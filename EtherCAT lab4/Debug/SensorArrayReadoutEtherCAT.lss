
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006be4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000154  20000000  00006be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020154  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020154  2**0
                  CONTENTS
  4 .bss          00001c14  20000160  00006d50  00020160  2**4
                  ALLOC
  5 .stack        00010004  20001d74  00008964  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
  8 .debug_info   00031cd4  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000037bf  00000000  00000000  00051eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010f61  00000000  00000000  0005566e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d40  00000000  00000000  000665cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e28  00000000  00000000  0006730f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034c92  00000000  00000000  00068137  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015716  00000000  00000000  0009cdc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001220f6  00000000  00000000  000b24df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000286c  00000000  00000000  001d45d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 1d 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     x.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	61 10 00 00 6d 10 00 00 79 10 00 00 85 10 00 00     a...m...y.......
      cc:	91 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	6d 11 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     m...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 7d 25 00 00 dd 02 00 00 dd 02 00 00     ....}%..........
     204:	dd 02 00 00 f5 07 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	00006be4 	.word	0x00006be4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00006be4 	.word	0x00006be4
     2c4:	20000164 	.word	0x20000164
     2c8:	00006be4 	.word	0x00006be4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000601 	.word	0x00000601

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00006be4 	.word	0x00006be4
     340:	20000154 	.word	0x20000154
     344:	20000160 	.word	0x20000160
     348:	20001d74 	.word	0x20001d74
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	0000690d 	.word	0x0000690d
     358:	0000223d 	.word	0x0000223d

0000035c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     372:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     382:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
	I2C_0_PORT_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	200003d0 	.word	0x200003d0
     400:	00000b01 	.word	0x00000b01
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     46e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     472:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SPI_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
	SPI_0_PORT_init();
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	200003a0 	.word	0x200003a0
     514:	00000c35 	.word	0x00000c35
     518:	00000409 	.word	0x00000409

0000051c <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     51c:	4b16      	ldr	r3, [pc, #88]	; (578 <I2C_1_PORT_init+0x5c>)
     51e:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     522:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     526:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     52e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     53e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     542:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     54e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     552:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     576:	4770      	bx	lr
     578:	41008000 	.word	0x41008000

0000057c <I2C_1_CLOCK_init>:
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <I2C_1_CLOCK_init+0x1c>)
     57e:	2240      	movs	r2, #64	; 0x40
     580:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     584:	2243      	movs	r2, #67	; 0x43
     586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     58a:	4a04      	ldr	r2, [pc, #16]	; (59c <I2C_1_CLOCK_init+0x20>)
     58c:	6a13      	ldr	r3, [r2, #32]
     58e:	f043 0308 	orr.w	r3, r3, #8
     592:	6213      	str	r3, [r2, #32]
     594:	4770      	bx	lr
     596:	bf00      	nop
     598:	40001c00 	.word	0x40001c00
     59c:	40000800 	.word	0x40000800

000005a0 <I2C_1_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void I2C_1_init(void)
{
     5a0:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <I2C_1_init+0x14>)
     5a4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_1, SERCOM7);
     5a6:	4904      	ldr	r1, [pc, #16]	; (5b8 <I2C_1_init+0x18>)
     5a8:	4804      	ldr	r0, [pc, #16]	; (5bc <I2C_1_init+0x1c>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <I2C_1_init+0x20>)
     5ac:	4798      	blx	r3
	I2C_1_PORT_init();
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <I2C_1_init+0x24>)
     5b0:	4798      	blx	r3
     5b2:	bd08      	pop	{r3, pc}
     5b4:	0000057d 	.word	0x0000057d
     5b8:	43000c00 	.word	0x43000c00
     5bc:	20000380 	.word	0x20000380
     5c0:	00000b01 	.word	0x00000b01
     5c4:	0000051d 	.word	0x0000051d

000005c8 <TIMER_1_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5c8:	4a04      	ldr	r2, [pc, #16]	; (5dc <TIMER_1_CLOCK_init+0x14>)
     5ca:	6993      	ldr	r3, [r2, #24]
     5cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5d0:	6193      	str	r3, [r2, #24]
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	4b02      	ldr	r3, [pc, #8]	; (5e0 <TIMER_1_CLOCK_init+0x18>)
     5d6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     5da:	4770      	bx	lr
     5dc:	40000800 	.word	0x40000800
     5e0:	40001c00 	.word	0x40001c00

000005e4 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     5e4:	4a04      	ldr	r2, [pc, #16]	; (5f8 <TIMER_0_CLOCK_init+0x14>)
     5e6:	6a13      	ldr	r3, [r2, #32]
     5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     5ec:	6213      	str	r3, [r2, #32]
     5ee:	2240      	movs	r2, #64	; 0x40
     5f0:	4b02      	ldr	r3, [pc, #8]	; (5fc <TIMER_0_CLOCK_init+0x18>)
     5f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     5f6:	4770      	bx	lr
     5f8:	40000800 	.word	0x40000800
     5fc:	40001c00 	.word	0x40001c00

00000600 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     600:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     602:	4b19      	ldr	r3, [pc, #100]	; (668 <system_init+0x68>)
     604:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     606:	4b19      	ldr	r3, [pc, #100]	; (66c <system_init+0x6c>)
     608:	2240      	movs	r2, #64	; 0x40
     60a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     60e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     612:	629a      	str	r2, [r3, #40]	; 0x28
     614:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     618:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     61e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     626:	2201      	movs	r2, #1
     628:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     634:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     638:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     644:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     648:	4b09      	ldr	r3, [pc, #36]	; (670 <system_init+0x70>)
     64a:	4798      	blx	r3

	SPI_0_init();
     64c:	4b09      	ldr	r3, [pc, #36]	; (674 <system_init+0x74>)
     64e:	4798      	blx	r3

	I2C_1_init();
     650:	4b09      	ldr	r3, [pc, #36]	; (678 <system_init+0x78>)
     652:	4798      	blx	r3

	TIMER_1_CLOCK_init();
     654:	4b09      	ldr	r3, [pc, #36]	; (67c <system_init+0x7c>)
     656:	4798      	blx	r3

	TIMER_1_init();
     658:	4b09      	ldr	r3, [pc, #36]	; (680 <system_init+0x80>)
     65a:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     65c:	4b09      	ldr	r3, [pc, #36]	; (684 <system_init+0x84>)
     65e:	4798      	blx	r3

	TIMER_0_init();
     660:	4b09      	ldr	r3, [pc, #36]	; (688 <system_init+0x88>)
     662:	4798      	blx	r3
     664:	bd08      	pop	{r3, pc}
     666:	bf00      	nop
     668:	00000d21 	.word	0x00000d21
     66c:	41008000 	.word	0x41008000
     670:	000003e1 	.word	0x000003e1
     674:	000004f5 	.word	0x000004f5
     678:	000005a1 	.word	0x000005a1
     67c:	000005c9 	.word	0x000005c9
     680:	00001d99 	.word	0x00001d99
     684:	000005e5 	.word	0x000005e5
     688:	00001e5d 	.word	0x00001e5d

0000068c <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     68c:	2201      	movs	r2, #1
     68e:	4b11      	ldr	r3, [pc, #68]	; (6d4 <LAN9252_rx_susp+0x48>)
     690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     694:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     698:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     69a:	68da      	ldr	r2, [r3, #12]
     69c:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <LAN9252_rx_susp+0x4c>)
     69e:	429a      	cmp	r2, r3
     6a0:	d00d      	beq.n	6be <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     6a2:	4b0e      	ldr	r3, [pc, #56]	; (6dc <LAN9252_rx_susp+0x50>)
     6a4:	2202      	movs	r2, #2
     6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6aa:	2001      	movs	r0, #1
     6ac:	4909      	ldr	r1, [pc, #36]	; (6d4 <LAN9252_rx_susp+0x48>)
     6ae:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     6b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     6b6:	2200      	movs	r2, #0
     6b8:	4b09      	ldr	r3, [pc, #36]	; (6e0 <LAN9252_rx_susp+0x54>)
     6ba:	701a      	strb	r2, [r3, #0]
     6bc:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     6be:	2301      	movs	r3, #1
     6c0:	4a07      	ldr	r2, [pc, #28]	; (6e0 <LAN9252_rx_susp+0x54>)
     6c2:	7013      	strb	r3, [r2, #0]
		row_change_possible = true; // for readout of array of wearable tactile sensor
     6c4:	4a07      	ldr	r2, [pc, #28]	; (6e4 <LAN9252_rx_susp+0x58>)
     6c6:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     6cc:	4b06      	ldr	r3, [pc, #24]	; (6e8 <LAN9252_rx_susp+0x5c>)
     6ce:	60da      	str	r2, [r3, #12]
     6d0:	4770      	bx	lr
     6d2:	bf00      	nop
     6d4:	41008000 	.word	0x41008000
     6d8:	20000578 	.word	0x20000578
     6dc:	4100a000 	.word	0x4100a000
     6e0:	20000588 	.word	0x20000588
     6e4:	20000540 	.word	0x20000540
     6e8:	e000e100 	.word	0xe000e100

000006ec <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     6ec:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     6ee:	880c      	ldrh	r4, [r1, #0]
     6f0:	b2a4      	uxth	r4, r4
     6f2:	f044 0401 	orr.w	r4, r4, #1
     6f6:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6f8:	880c      	ldrh	r4, [r1, #0]
     6fa:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     6fc:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     700:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     702:	880c      	ldrh	r4, [r1, #0]
     704:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     706:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     70a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     70e:	00ed      	lsls	r5, r5, #3
     710:	f005 0518 	and.w	r5, r5, #24
     714:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     716:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     718:	880c      	ldrh	r4, [r1, #0]
     71a:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     71c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     720:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     722:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     724:	2803      	cmp	r0, #3
     726:	d814      	bhi.n	752 <setup_transfer_descriptor+0x66>
     728:	e8df f000 	tbb	[pc, r0]
     72c:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     730:	8808      	ldrh	r0, [r1, #0]
     732:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     734:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     738:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     73a:	8808      	ldrh	r0, [r1, #0]
     73c:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     73e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     742:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     744:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     746:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     748:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     74a:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     74c:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     74e:	4a26      	ldr	r2, [pc, #152]	; (7e8 <setup_transfer_descriptor+0xfc>)
     750:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     752:	880a      	ldrh	r2, [r1, #0]
     754:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     75a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     75c:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     75e:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     760:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     764:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     766:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     768:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     76a:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     76c:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     76e:	9b02      	ldr	r3, [sp, #8]
     770:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     772:	bc30      	pop	{r4, r5}
     774:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     776:	880a      	ldrh	r2, [r1, #0]
     778:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     77e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     780:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     782:	880a      	ldrh	r2, [r1, #0]
     784:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     78a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     78c:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     78e:	4a17      	ldr	r2, [pc, #92]	; (7ec <setup_transfer_descriptor+0x100>)
     790:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     792:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     794:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     796:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     798:	4a13      	ldr	r2, [pc, #76]	; (7e8 <setup_transfer_descriptor+0xfc>)
     79a:	608a      	str	r2, [r1, #8]
     79c:	e7d9      	b.n	752 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     79e:	8808      	ldrh	r0, [r1, #0]
     7a0:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     7a2:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     7a6:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7a8:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7aa:	8808      	ldrh	r0, [r1, #0]
     7ac:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     7ae:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7b2:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     7b4:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     7b6:	480c      	ldr	r0, [pc, #48]	; (7e8 <setup_transfer_descriptor+0xfc>)
     7b8:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     7ba:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     7bc:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     7be:	608a      	str	r2, [r1, #8]
     7c0:	e7c7      	b.n	752 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7c2:	880a      	ldrh	r2, [r1, #0]
     7c4:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     7c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     7ca:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7cc:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7ce:	880a      	ldrh	r2, [r1, #0]
     7d0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     7d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     7d6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7d8:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     7da:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     7dc:	4a02      	ldr	r2, [pc, #8]	; (7e8 <setup_transfer_descriptor+0xfc>)
     7de:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     7e0:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     7e2:	4a03      	ldr	r2, [pc, #12]	; (7f0 <setup_transfer_descriptor+0x104>)
     7e4:	608a      	str	r2, [r1, #8]
     7e6:	e7b4      	b.n	752 <setup_transfer_descriptor+0x66>
     7e8:	43000428 	.word	0x43000428
     7ec:	00006954 	.word	0x00006954
     7f0:	20000440 	.word	0x20000440

000007f4 <TC7_Handler>:
void TC7_Handler(void){
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     7f8:	4a16      	ldr	r2, [pc, #88]	; (854 <TC7_Handler+0x60>)
     7fa:	7a93      	ldrb	r3, [r2, #10]
     7fc:	f043 0301 	orr.w	r3, r3, #1
     800:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     802:	2201      	movs	r2, #1
     804:	4b14      	ldr	r3, [pc, #80]	; (858 <TC7_Handler+0x64>)
     806:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     808:	4b14      	ldr	r3, [pc, #80]	; (85c <TC7_Handler+0x68>)
     80a:	781b      	ldrb	r3, [r3, #0]
     80c:	b183      	cbz	r3, 830 <TC7_Handler+0x3c>
		volatile int i=0;
     80e:	2300      	movs	r3, #0
     810:	9301      	str	r3, [sp, #4]
     812:	4611      	mov	r1, r2
     814:	4a12      	ldr	r2, [pc, #72]	; (860 <TC7_Handler+0x6c>)
     816:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     81a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     81e:	2102      	movs	r1, #2
     820:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     824:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     828:	4a0c      	ldr	r2, [pc, #48]	; (85c <TC7_Handler+0x68>)
     82a:	7013      	strb	r3, [r2, #0]
	};
     82c:	b003      	add	sp, #12
     82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <TC7_Handler+0x6c>)
     832:	2501      	movs	r5, #1
     834:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     838:	4e08      	ldr	r6, [pc, #32]	; (85c <TC7_Handler+0x68>)
     83a:	2400      	movs	r4, #0
     83c:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83e:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     842:	4621      	mov	r1, r4
     844:	4620      	mov	r0, r4
     846:	4f07      	ldr	r7, [pc, #28]	; (864 <TC7_Handler+0x70>)
     848:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     84a:	4621      	mov	r1, r4
     84c:	4628      	mov	r0, r5
     84e:	47b8      	blx	r7
		tx_ethercat_done = false;
     850:	7034      	strb	r4, [r6, #0]
	};
     852:	e7eb      	b.n	82c <TC7_Handler+0x38>
     854:	43001800 	.word	0x43001800
     858:	20000541 	.word	0x20000541
     85c:	20000588 	.word	0x20000588
     860:	41008000 	.word	0x41008000
     864:	00001015 	.word	0x00001015

00000868 <configure_ethercat_dma_descriptors>:
{
     868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     86c:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     86e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a28 <configure_ethercat_dma_descriptors+0x1c0>
     872:	4f61      	ldr	r7, [pc, #388]	; (9f8 <configure_ethercat_dma_descriptors+0x190>)
     874:	2602      	movs	r6, #2
     876:	9601      	str	r6, [sp, #4]
     878:	f8df 91b0 	ldr.w	r9, [pc, #432]	; a2c <configure_ethercat_dma_descriptors+0x1c4>
     87c:	f8cd 9000 	str.w	r9, [sp]
     880:	2313      	movs	r3, #19
     882:	f8d8 2004 	ldr.w	r2, [r8, #4]
     886:	4639      	mov	r1, r7
     888:	2000      	movs	r0, #0
     88a:	4d5c      	ldr	r5, [pc, #368]	; (9fc <configure_ethercat_dma_descriptors+0x194>)
     88c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     88e:	f8d8 b008 	ldr.w	fp, [r8, #8]
     892:	9601      	str	r6, [sp, #4]
     894:	4c5a      	ldr	r4, [pc, #360]	; (a00 <configure_ethercat_dma_descriptors+0x198>)
     896:	9400      	str	r4, [sp, #0]
     898:	2343      	movs	r3, #67	; 0x43
     89a:	465a      	mov	r2, fp
     89c:	4649      	mov	r1, r9
     89e:	2000      	movs	r0, #0
     8a0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     8a2:	4b58      	ldr	r3, [pc, #352]	; (a04 <configure_ethercat_dma_descriptors+0x19c>)
     8a4:	681a      	ldr	r2, [r3, #0]
     8a6:	f8df 9188 	ldr.w	r9, [pc, #392]	; a30 <configure_ethercat_dma_descriptors+0x1c8>
     8aa:	9601      	str	r6, [sp, #4]
     8ac:	f8cd 9000 	str.w	r9, [sp]
     8b0:	230b      	movs	r3, #11
     8b2:	4621      	mov	r1, r4
     8b4:	2000      	movs	r0, #0
     8b6:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     8b8:	2400      	movs	r4, #0
     8ba:	9401      	str	r4, [sp, #4]
     8bc:	f8df a174 	ldr.w	sl, [pc, #372]	; a34 <configure_ethercat_dma_descriptors+0x1cc>
     8c0:	f8cd a000 	str.w	sl, [sp]
     8c4:	2303      	movs	r3, #3
     8c6:	465a      	mov	r2, fp
     8c8:	4649      	mov	r1, r9
     8ca:	4620      	mov	r0, r4
     8cc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     8ce:	9601      	str	r6, [sp, #4]
     8d0:	f8df b164 	ldr.w	fp, [pc, #356]	; a38 <configure_ethercat_dma_descriptors+0x1d0>
     8d4:	f8cd b000 	str.w	fp, [sp]
     8d8:	2340      	movs	r3, #64	; 0x40
     8da:	4a4b      	ldr	r2, [pc, #300]	; (a08 <configure_ethercat_dma_descriptors+0x1a0>)
     8dc:	4651      	mov	r1, sl
     8de:	4620      	mov	r0, r4
     8e0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     8e2:	9601      	str	r6, [sp, #4]
     8e4:	f8df a154 	ldr.w	sl, [pc, #340]	; a3c <configure_ethercat_dma_descriptors+0x1d4>
     8e8:	f8cd a000 	str.w	sl, [sp]
     8ec:	2313      	movs	r3, #19
     8ee:	f8d8 200c 	ldr.w	r2, [r8, #12]
     8f2:	4659      	mov	r1, fp
     8f4:	4620      	mov	r0, r4
     8f6:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     8f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
     8fc:	9401      	str	r4, [sp, #4]
     8fe:	f8df 8140 	ldr.w	r8, [pc, #320]	; a40 <configure_ethercat_dma_descriptors+0x1d8>
     902:	f8cd 8000 	str.w	r8, [sp]
     906:	2303      	movs	r3, #3
     908:	4651      	mov	r1, sl
     90a:	4620      	mov	r0, r4
     90c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     90e:	9601      	str	r6, [sp, #4]
     910:	f8cd 9000 	str.w	r9, [sp]
     914:	2340      	movs	r3, #64	; 0x40
     916:	4622      	mov	r2, r4
     918:	4641      	mov	r1, r8
     91a:	4630      	mov	r0, r6
     91c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     91e:	f8df 8124 	ldr.w	r8, [pc, #292]	; a44 <configure_ethercat_dma_descriptors+0x1dc>
     922:	9601      	str	r6, [sp, #4]
     924:	f8df 9120 	ldr.w	r9, [pc, #288]	; a48 <configure_ethercat_dma_descriptors+0x1e0>
     928:	f8cd 9000 	str.w	r9, [sp]
     92c:	2313      	movs	r3, #19
     92e:	4622      	mov	r2, r4
     930:	4641      	mov	r1, r8
     932:	2003      	movs	r0, #3
     934:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     936:	9601      	str	r6, [sp, #4]
     938:	f8df a110 	ldr.w	sl, [pc, #272]	; a4c <configure_ethercat_dma_descriptors+0x1e4>
     93c:	f8cd a000 	str.w	sl, [sp]
     940:	2343      	movs	r3, #67	; 0x43
     942:	4622      	mov	r2, r4
     944:	4649      	mov	r1, r9
     946:	2003      	movs	r0, #3
     948:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     94a:	f8df 9104 	ldr.w	r9, [pc, #260]	; a50 <configure_ethercat_dma_descriptors+0x1e8>
     94e:	9601      	str	r6, [sp, #4]
     950:	f8cd 9000 	str.w	r9, [sp]
     954:	230b      	movs	r3, #11
     956:	4622      	mov	r2, r4
     958:	4651      	mov	r1, sl
     95a:	2003      	movs	r0, #3
     95c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     95e:	9601      	str	r6, [sp, #4]
     960:	f8df a0f0 	ldr.w	sl, [pc, #240]	; a54 <configure_ethercat_dma_descriptors+0x1ec>
     964:	f8cd a000 	str.w	sl, [sp]
     968:	2343      	movs	r3, #67	; 0x43
     96a:	4622      	mov	r2, r4
     96c:	4649      	mov	r1, r9
     96e:	2003      	movs	r0, #3
     970:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     972:	9601      	str	r6, [sp, #4]
     974:	f8df b0e0 	ldr.w	fp, [pc, #224]	; a58 <configure_ethercat_dma_descriptors+0x1f0>
     978:	f8cd b000 	str.w	fp, [sp]
     97c:	2313      	movs	r3, #19
     97e:	4622      	mov	r2, r4
     980:	4651      	mov	r1, sl
     982:	2003      	movs	r0, #3
     984:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     986:	9401      	str	r4, [sp, #4]
     988:	f8df a0d0 	ldr.w	sl, [pc, #208]	; a5c <configure_ethercat_dma_descriptors+0x1f4>
     98c:	f8cd a000 	str.w	sl, [sp]
     990:	2303      	movs	r3, #3
     992:	4622      	mov	r2, r4
     994:	4659      	mov	r1, fp
     996:	4618      	mov	r0, r3
     998:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     99a:	9601      	str	r6, [sp, #4]
     99c:	f8cd 9000 	str.w	r9, [sp]
     9a0:	2340      	movs	r3, #64	; 0x40
     9a2:	4a19      	ldr	r2, [pc, #100]	; (a08 <configure_ethercat_dma_descriptors+0x1a0>)
     9a4:	441a      	add	r2, r3
     9a6:	4651      	mov	r1, sl
     9a8:	2001      	movs	r0, #1
     9aa:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     9ac:	4d17      	ldr	r5, [pc, #92]	; (a0c <configure_ethercat_dma_descriptors+0x1a4>)
     9ae:	4a18      	ldr	r2, [pc, #96]	; (a10 <configure_ethercat_dma_descriptors+0x1a8>)
     9b0:	4631      	mov	r1, r6
     9b2:	4628      	mov	r0, r5
     9b4:	4b17      	ldr	r3, [pc, #92]	; (a14 <configure_ethercat_dma_descriptors+0x1ac>)
     9b6:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
     9bc:	9300      	str	r3, [sp, #0]
     9be:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     9c2:	4620      	mov	r0, r4
     9c4:	4e14      	ldr	r6, [pc, #80]	; (a18 <configure_ethercat_dma_descriptors+0x1b0>)
     9c6:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	9300      	str	r3, [sp, #0]
     9cc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     9d0:	2001      	movs	r0, #1
     9d2:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     9d4:	4628      	mov	r0, r5
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <configure_ethercat_dma_descriptors+0x1b4>)
     9d8:	4798      	blx	r3
     9da:	2601      	movs	r6, #1
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <configure_ethercat_dma_descriptors+0x1b8>)
     9de:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     9e2:	4621      	mov	r1, r4
     9e4:	4620      	mov	r0, r4
     9e6:	4d0f      	ldr	r5, [pc, #60]	; (a24 <configure_ethercat_dma_descriptors+0x1bc>)
     9e8:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     9ea:	4621      	mov	r1, r4
     9ec:	4630      	mov	r0, r6
     9ee:	47a8      	blx	r5
}
     9f0:	b003      	add	sp, #12
     9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9f6:	bf00      	nop
     9f8:	20000530 	.word	0x20000530
     9fc:	000006ed 	.word	0x000006ed
     a00:	20000558 	.word	0x20000558
     a04:	20000000 	.word	0x20000000
     a08:	20000480 	.word	0x20000480
     a0c:	200003a0 	.word	0x200003a0
     a10:	0000068d 	.word	0x0000068d
     a14:	00000ca9 	.word	0x00000ca9
     a18:	0000109d 	.word	0x0000109d
     a1c:	00000c81 	.word	0x00000c81
     a20:	41008000 	.word	0x41008000
     a24:	00001015 	.word	0x00001015
     a28:	00006954 	.word	0x00006954
     a2c:	20000460 	.word	0x20000460
     a30:	20000410 	.word	0x20000410
     a34:	20000430 	.word	0x20000430
     a38:	20000520 	.word	0x20000520
     a3c:	20000568 	.word	0x20000568
     a40:	20000420 	.word	0x20000420
     a44:	20000470 	.word	0x20000470
     a48:	20000500 	.word	0x20000500
     a4c:	20000510 	.word	0x20000510
     a50:	20000578 	.word	0x20000578
     a54:	200003f0 	.word	0x200003f0
     a58:	20000400 	.word	0x20000400
     a5c:	20000548 	.word	0x20000548

00000a60 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     a60:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <delay_us+0x14>)
     a64:	681c      	ldr	r4, [r3, #0]
     a66:	4b04      	ldr	r3, [pc, #16]	; (a78 <delay_us+0x18>)
     a68:	4798      	blx	r3
     a6a:	4601      	mov	r1, r0
     a6c:	4620      	mov	r0, r4
     a6e:	4b03      	ldr	r3, [pc, #12]	; (a7c <delay_us+0x1c>)
     a70:	4798      	blx	r3
     a72:	bd10      	pop	{r4, pc}
     a74:	2000017c 	.word	0x2000017c
     a78:	00000ce1 	.word	0x00000ce1
     a7c:	00000d19 	.word	0x00000d19

00000a80 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     a80:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     a82:	4b04      	ldr	r3, [pc, #16]	; (a94 <delay_ms+0x14>)
     a84:	681c      	ldr	r4, [r3, #0]
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <delay_ms+0x18>)
     a88:	4798      	blx	r3
     a8a:	4601      	mov	r1, r0
     a8c:	4620      	mov	r0, r4
     a8e:	4b03      	ldr	r3, [pc, #12]	; (a9c <delay_ms+0x1c>)
     a90:	4798      	blx	r3
     a92:	bd10      	pop	{r4, pc}
     a94:	2000017c 	.word	0x2000017c
     a98:	00000cf9 	.word	0x00000cf9
     a9c:	00000d19 	.word	0x00000d19

00000aa0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     aa0:	b510      	push	{r4, lr}
     aa2:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     aa4:	8903      	ldrh	r3, [r0, #8]
     aa6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     aaa:	4614      	mov	r4, r2
     aac:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     ab2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     ab6:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ab8:	a901      	add	r1, sp, #4
     aba:	3814      	subs	r0, #20
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <i2c_m_sync_write+0x2c>)
     abe:	4798      	blx	r3

	if (ret) {
     ac0:	b910      	cbnz	r0, ac8 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     ac2:	4620      	mov	r0, r4
     ac4:	b004      	add	sp, #16
     ac6:	bd10      	pop	{r4, pc}
		return ret;
     ac8:	4604      	mov	r4, r0
     aca:	e7fa      	b.n	ac2 <i2c_m_sync_write+0x22>
     acc:	000017a1 	.word	0x000017a1

00000ad0 <i2c_m_sync_read>:
{
     ad0:	b510      	push	{r4, lr}
     ad2:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     ad4:	8903      	ldrh	r3, [r0, #8]
     ad6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     ada:	4614      	mov	r4, r2
     adc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     ade:	f248 0301 	movw	r3, #32769	; 0x8001
     ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     ae6:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ae8:	a901      	add	r1, sp, #4
     aea:	3814      	subs	r0, #20
     aec:	4b03      	ldr	r3, [pc, #12]	; (afc <i2c_m_sync_read+0x2c>)
     aee:	4798      	blx	r3
	if (ret) {
     af0:	b910      	cbnz	r0, af8 <i2c_m_sync_read+0x28>
}
     af2:	4620      	mov	r0, r4
     af4:	b004      	add	sp, #16
     af6:	bd10      	pop	{r4, pc}
		return ret;
     af8:	4604      	mov	r4, r0
     afa:	e7fa      	b.n	af2 <i2c_m_sync_read+0x22>
     afc:	000017a1 	.word	0x000017a1

00000b00 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     b00:	b538      	push	{r3, r4, r5, lr}
     b02:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     b04:	4604      	mov	r4, r0
     b06:	225e      	movs	r2, #94	; 0x5e
     b08:	4908      	ldr	r1, [pc, #32]	; (b2c <i2c_m_sync_init+0x2c>)
     b0a:	3000      	adds	r0, #0
     b0c:	bf18      	it	ne
     b0e:	2001      	movne	r0, #1
     b10:	4b07      	ldr	r3, [pc, #28]	; (b30 <i2c_m_sync_init+0x30>)
     b12:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     b14:	4629      	mov	r1, r5
     b16:	4620      	mov	r0, r4
     b18:	4b06      	ldr	r3, [pc, #24]	; (b34 <i2c_m_sync_init+0x34>)
     b1a:	4798      	blx	r3
	if (init_status) {
     b1c:	4603      	mov	r3, r0
     b1e:	b918      	cbnz	r0, b28 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     b20:	4a05      	ldr	r2, [pc, #20]	; (b38 <i2c_m_sync_init+0x38>)
     b22:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     b24:	4a05      	ldr	r2, [pc, #20]	; (b3c <i2c_m_sync_init+0x3c>)
     b26:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     b28:	4618      	mov	r0, r3
     b2a:	bd38      	pop	{r3, r4, r5, pc}
     b2c:	00006968 	.word	0x00006968
     b30:	00000cd9 	.word	0x00000cd9
     b34:	000016f9 	.word	0x000016f9
     b38:	00000ad1 	.word	0x00000ad1
     b3c:	00000aa1 	.word	0x00000aa1

00000b40 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     b40:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     b42:	4b01      	ldr	r3, [pc, #4]	; (b48 <i2c_m_sync_enable+0x8>)
     b44:	4798      	blx	r3
}
     b46:	bd08      	pop	{r3, pc}
     b48:	00001729 	.word	0x00001729

00000b4c <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     b4c:	f3c1 0109 	ubfx	r1, r1, #0, #10
     b50:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     b54:	430a      	orrs	r2, r1
     b56:	8382      	strh	r2, [r0, #28]
}
     b58:	4610      	mov	r0, r2
     b5a:	4770      	bx	lr

00000b5c <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     b5c:	3014      	adds	r0, #20
     b5e:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     b60:	2000      	movs	r0, #0
     b62:	4770      	bx	lr

00000b64 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	460d      	mov	r5, r1
     b68:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b6a:	4604      	mov	r4, r0
     b6c:	b168      	cbz	r0, b8a <io_write+0x26>
     b6e:	b151      	cbz	r1, b86 <io_write+0x22>
     b70:	2001      	movs	r0, #1
     b72:	2234      	movs	r2, #52	; 0x34
     b74:	4906      	ldr	r1, [pc, #24]	; (b90 <io_write+0x2c>)
     b76:	4b07      	ldr	r3, [pc, #28]	; (b94 <io_write+0x30>)
     b78:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b7a:	6823      	ldr	r3, [r4, #0]
     b7c:	4632      	mov	r2, r6
     b7e:	4629      	mov	r1, r5
     b80:	4620      	mov	r0, r4
     b82:	4798      	blx	r3
}
     b84:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b86:	2000      	movs	r0, #0
     b88:	e7f3      	b.n	b72 <io_write+0xe>
     b8a:	2000      	movs	r0, #0
     b8c:	e7f1      	b.n	b72 <io_write+0xe>
     b8e:	bf00      	nop
     b90:	00006984 	.word	0x00006984
     b94:	00000cd9 	.word	0x00000cd9

00000b98 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b98:	b570      	push	{r4, r5, r6, lr}
     b9a:	460d      	mov	r5, r1
     b9c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b9e:	4604      	mov	r4, r0
     ba0:	b168      	cbz	r0, bbe <io_read+0x26>
     ba2:	b151      	cbz	r1, bba <io_read+0x22>
     ba4:	2001      	movs	r0, #1
     ba6:	223d      	movs	r2, #61	; 0x3d
     ba8:	4906      	ldr	r1, [pc, #24]	; (bc4 <io_read+0x2c>)
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <io_read+0x30>)
     bac:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     bae:	6863      	ldr	r3, [r4, #4]
     bb0:	4632      	mov	r2, r6
     bb2:	4629      	mov	r1, r5
     bb4:	4620      	mov	r0, r4
     bb6:	4798      	blx	r3
}
     bb8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     bba:	2000      	movs	r0, #0
     bbc:	e7f3      	b.n	ba6 <io_read+0xe>
     bbe:	2000      	movs	r0, #0
     bc0:	e7f1      	b.n	ba6 <io_read+0xe>
     bc2:	bf00      	nop
     bc4:	00006984 	.word	0x00006984
     bc8:	00000cd9 	.word	0x00000cd9

00000bcc <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
     bce:	460d      	mov	r5, r1
     bd0:	4616      	mov	r6, r2
	ASSERT(io);
     bd2:	4604      	mov	r4, r0
     bd4:	2298      	movs	r2, #152	; 0x98
     bd6:	4907      	ldr	r1, [pc, #28]	; (bf4 <_spi_m_dma_io_write+0x28>)
     bd8:	3000      	adds	r0, #0
     bda:	bf18      	it	ne
     bdc:	2001      	movne	r0, #1
     bde:	4b06      	ldr	r3, [pc, #24]	; (bf8 <_spi_m_dma_io_write+0x2c>)
     be0:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     be2:	4633      	mov	r3, r6
     be4:	2200      	movs	r2, #0
     be6:	4629      	mov	r1, r5
     be8:	f1a4 0020 	sub.w	r0, r4, #32
     bec:	4c03      	ldr	r4, [pc, #12]	; (bfc <_spi_m_dma_io_write+0x30>)
     bee:	47a0      	blx	r4
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
     bf2:	bf00      	nop
     bf4:	00006998 	.word	0x00006998
     bf8:	00000cd9 	.word	0x00000cd9
     bfc:	00001c85 	.word	0x00001c85

00000c00 <_spi_m_dma_io_read>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	460d      	mov	r5, r1
     c04:	4616      	mov	r6, r2
	ASSERT(io);
     c06:	4604      	mov	r4, r0
     c08:	2281      	movs	r2, #129	; 0x81
     c0a:	4907      	ldr	r1, [pc, #28]	; (c28 <_spi_m_dma_io_read+0x28>)
     c0c:	3000      	adds	r0, #0
     c0e:	bf18      	it	ne
     c10:	2001      	movne	r0, #1
     c12:	4b06      	ldr	r3, [pc, #24]	; (c2c <_spi_m_dma_io_read+0x2c>)
     c14:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     c16:	4633      	mov	r3, r6
     c18:	462a      	mov	r2, r5
     c1a:	2100      	movs	r1, #0
     c1c:	f1a4 0020 	sub.w	r0, r4, #32
     c20:	4c03      	ldr	r4, [pc, #12]	; (c30 <_spi_m_dma_io_read+0x30>)
     c22:	47a0      	blx	r4
}
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	bf00      	nop
     c28:	00006998 	.word	0x00006998
     c2c:	00000cd9 	.word	0x00000cd9
     c30:	00001c85 	.word	0x00001c85

00000c34 <spi_m_dma_init>:
{
     c34:	b538      	push	{r3, r4, r5, lr}
     c36:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     c38:	4605      	mov	r5, r0
     c3a:	b1a8      	cbz	r0, c68 <spi_m_dma_init+0x34>
     c3c:	b191      	cbz	r1, c64 <spi_m_dma_init+0x30>
     c3e:	2001      	movs	r0, #1
     c40:	223b      	movs	r2, #59	; 0x3b
     c42:	490a      	ldr	r1, [pc, #40]	; (c6c <spi_m_dma_init+0x38>)
     c44:	4b0a      	ldr	r3, [pc, #40]	; (c70 <spi_m_dma_init+0x3c>)
     c46:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c48:	4628      	mov	r0, r5
     c4a:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     c4e:	4621      	mov	r1, r4
     c50:	4b08      	ldr	r3, [pc, #32]	; (c74 <spi_m_dma_init+0x40>)
     c52:	4798      	blx	r3
	if (rc) {
     c54:	4603      	mov	r3, r0
     c56:	b918      	cbnz	r0, c60 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     c58:	4a07      	ldr	r2, [pc, #28]	; (c78 <spi_m_dma_init+0x44>)
     c5a:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     c5c:	4a07      	ldr	r2, [pc, #28]	; (c7c <spi_m_dma_init+0x48>)
     c5e:	626a      	str	r2, [r5, #36]	; 0x24
}
     c60:	4618      	mov	r0, r3
     c62:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     c64:	2000      	movs	r0, #0
     c66:	e7eb      	b.n	c40 <spi_m_dma_init+0xc>
     c68:	2000      	movs	r0, #0
     c6a:	e7e9      	b.n	c40 <spi_m_dma_init+0xc>
     c6c:	00006998 	.word	0x00006998
     c70:	00000cd9 	.word	0x00000cd9
     c74:	00001a51 	.word	0x00001a51
     c78:	00000c01 	.word	0x00000c01
     c7c:	00000bcd 	.word	0x00000bcd

00000c80 <spi_m_dma_enable>:
{
     c80:	b510      	push	{r4, lr}
	ASSERT(spi);
     c82:	4604      	mov	r4, r0
     c84:	2251      	movs	r2, #81	; 0x51
     c86:	4905      	ldr	r1, [pc, #20]	; (c9c <spi_m_dma_enable+0x1c>)
     c88:	3000      	adds	r0, #0
     c8a:	bf18      	it	ne
     c8c:	2001      	movne	r0, #1
     c8e:	4b04      	ldr	r3, [pc, #16]	; (ca0 <spi_m_dma_enable+0x20>)
     c90:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     c92:	1d20      	adds	r0, r4, #4
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <spi_m_dma_enable+0x24>)
     c96:	4798      	blx	r3
     c98:	bd10      	pop	{r4, pc}
     c9a:	bf00      	nop
     c9c:	00006998 	.word	0x00006998
     ca0:	00000cd9 	.word	0x00000cd9
     ca4:	00001bcd 	.word	0x00001bcd

00000ca8 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
     caa:	460d      	mov	r5, r1
     cac:	4616      	mov	r6, r2
	ASSERT(spi);
     cae:	4604      	mov	r4, r0
     cb0:	22a8      	movs	r2, #168	; 0xa8
     cb2:	4906      	ldr	r1, [pc, #24]	; (ccc <spi_m_dma_register_callback+0x24>)
     cb4:	3000      	adds	r0, #0
     cb6:	bf18      	it	ne
     cb8:	2001      	movne	r0, #1
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <spi_m_dma_register_callback+0x28>)
     cbc:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     cbe:	4632      	mov	r2, r6
     cc0:	4629      	mov	r1, r5
     cc2:	1d20      	adds	r0, r4, #4
     cc4:	4b03      	ldr	r3, [pc, #12]	; (cd4 <spi_m_dma_register_callback+0x2c>)
     cc6:	4798      	blx	r3
     cc8:	bd70      	pop	{r4, r5, r6, pc}
     cca:	bf00      	nop
     ccc:	00006998 	.word	0x00006998
     cd0:	00000cd9 	.word	0x00000cd9
     cd4:	00001c01 	.word	0x00001c01

00000cd8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     cd8:	b900      	cbnz	r0, cdc <assert+0x4>
		__asm("BKPT #0");
     cda:	be00      	bkpt	0x0000
     cdc:	4770      	bx	lr
	...

00000ce0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     ce0:	2364      	movs	r3, #100	; 0x64
     ce2:	fb03 f000 	mul.w	r0, r3, r0
     ce6:	3002      	adds	r0, #2
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <_get_cycles_for_us+0x14>)
     cea:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     cee:	0840      	lsrs	r0, r0, #1
     cf0:	4770      	bx	lr
     cf2:	bf00      	nop
     cf4:	aaaaaaab 	.word	0xaaaaaaab

00000cf8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     cf8:	2364      	movs	r3, #100	; 0x64
     cfa:	fb03 f300 	mul.w	r3, r3, r0
     cfe:	3302      	adds	r3, #2
     d00:	4804      	ldr	r0, [pc, #16]	; (d14 <_get_cycles_for_ms+0x1c>)
     d02:	fba0 2303 	umull	r2, r3, r0, r3
     d06:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d0c:	fb00 f003 	mul.w	r0, r0, r3
     d10:	4770      	bx	lr
     d12:	bf00      	nop
     d14:	aaaaaaab 	.word	0xaaaaaaab

00000d18 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     d18:	3901      	subs	r1, #1
     d1a:	d8fd      	bhi.n	d18 <_delay_cycles>
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop

00000d20 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d20:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     d22:	4a0d      	ldr	r2, [pc, #52]	; (d58 <_init_chip+0x38>)
     d24:	8813      	ldrh	r3, [r2, #0]
     d26:	b29b      	uxth	r3, r3
     d28:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     d2c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     d2e:	4b0b      	ldr	r3, [pc, #44]	; (d5c <_init_chip+0x3c>)
     d30:	4798      	blx	r3
	_oscctrl_init_sources();
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <_init_chip+0x40>)
     d34:	4798      	blx	r3
	_mclk_init();
     d36:	4b0b      	ldr	r3, [pc, #44]	; (d64 <_init_chip+0x44>)
     d38:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <_init_chip+0x48>)
     d3c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d3e:	f640 70ff 	movw	r0, #4095	; 0xfff
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <_init_chip+0x4c>)
     d44:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     d46:	4a0a      	ldr	r2, [pc, #40]	; (d70 <_init_chip+0x50>)
     d48:	6913      	ldr	r3, [r2, #16]
     d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     d4e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     d50:	4b08      	ldr	r3, [pc, #32]	; (d74 <_init_chip+0x54>)
     d52:	4798      	blx	r3
     d54:	bd08      	pop	{r3, pc}
     d56:	bf00      	nop
     d58:	41004000 	.word	0x41004000
     d5c:	000010f9 	.word	0x000010f9
     d60:	0000110d 	.word	0x0000110d
     d64:	000010ed 	.word	0x000010ed
     d68:	00001129 	.word	0x00001129
     d6c:	000010c9 	.word	0x000010c9
     d70:	40000800 	.word	0x40000800
     d74:	00000df9 	.word	0x00000df9

00000d78 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     d78:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d7a:	4a1d      	ldr	r2, [pc, #116]	; (df0 <_dmac_handler+0x78>)
     d7c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     d7e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     d82:	481c      	ldr	r0, [pc, #112]	; (df4 <_dmac_handler+0x7c>)
     d84:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d88:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     d8a:	f412 7f80 	tst.w	r2, #256	; 0x100
     d8e:	d10a      	bne.n	da6 <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d90:	4a17      	ldr	r2, [pc, #92]	; (df0 <_dmac_handler+0x78>)
     d92:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     d94:	f412 7f00 	tst.w	r2, #512	; 0x200
     d98:	d110      	bne.n	dbc <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d9a:	4a15      	ldr	r2, [pc, #84]	; (df0 <_dmac_handler+0x78>)
     d9c:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     d9e:	f412 6f80 	tst.w	r2, #1024	; 0x400
     da2:	d117      	bne.n	dd4 <_dmac_handler+0x5c>
     da4:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     da6:	011b      	lsls	r3, r3, #4
     da8:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     db0:	2101      	movs	r1, #1
     db2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     db6:	6843      	ldr	r3, [r0, #4]
     db8:	4798      	blx	r3
     dba:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     dbc:	011b      	lsls	r3, r3, #4
     dbe:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dc2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     dc6:	2102      	movs	r1, #2
     dc8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     dcc:	4a09      	ldr	r2, [pc, #36]	; (df4 <_dmac_handler+0x7c>)
     dce:	58d3      	ldr	r3, [r2, r3]
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     dd4:	011b      	lsls	r3, r3, #4
     dd6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dda:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     dde:	2104      	movs	r1, #4
     de0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     de4:	4a03      	ldr	r2, [pc, #12]	; (df4 <_dmac_handler+0x7c>)
     de6:	4413      	add	r3, r2
     de8:	689b      	ldr	r3, [r3, #8]
     dea:	4798      	blx	r3
	}
}
     dec:	e7da      	b.n	da4 <_dmac_handler+0x2c>
     dee:	bf00      	nop
     df0:	4100a000 	.word	0x4100a000
     df4:	20000180 	.word	0x20000180

00000df8 <_dma_init>:
{
     df8:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     dfa:	4a3d      	ldr	r2, [pc, #244]	; (ef0 <_dma_init+0xf8>)
     dfc:	8813      	ldrh	r3, [r2, #0]
     dfe:	b29b      	uxth	r3, r3
     e00:	f023 0302 	bic.w	r3, r3, #2
     e04:	b29b      	uxth	r3, r3
     e06:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     e08:	8853      	ldrh	r3, [r2, #2]
     e0a:	b29b      	uxth	r3, r3
     e0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     e10:	b29b      	uxth	r3, r3
     e12:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     e14:	8813      	ldrh	r3, [r2, #0]
     e16:	b29b      	uxth	r3, r3
     e18:	f043 0301 	orr.w	r3, r3, #1
     e1c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     e1e:	4b34      	ldr	r3, [pc, #208]	; (ef0 <_dma_init+0xf8>)
     e20:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     e22:	f013 0f01 	tst.w	r3, #1
     e26:	d1fa      	bne.n	e1e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     e28:	4a31      	ldr	r2, [pc, #196]	; (ef0 <_dma_init+0xf8>)
     e2a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     e2e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     e30:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     e32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
     e36:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     e3a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     e3c:	2300      	movs	r3, #0
     e3e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     e40:	492c      	ldr	r1, [pc, #176]	; (ef4 <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     e42:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     e44:	492c      	ldr	r1, [pc, #176]	; (ef8 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
     e46:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
     e48:	e016      	b.n	e78 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     e4a:	4a2c      	ldr	r2, [pc, #176]	; (efc <_dma_init+0x104>)
     e4c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     e50:	4c27      	ldr	r4, [pc, #156]	; (ef0 <_dma_init+0xf8>)
     e52:	1d19      	adds	r1, r3, #4
     e54:	0109      	lsls	r1, r1, #4
     e56:	1860      	adds	r0, r4, r1
     e58:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     e5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e5e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     e60:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     e62:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     e64:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     e66:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     e68:	4922      	ldr	r1, [pc, #136]	; (ef4 <_dma_init+0xfc>)
     e6a:	011a      	lsls	r2, r3, #4
     e6c:	1888      	adds	r0, r1, r2
     e6e:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     e70:	2200      	movs	r2, #0
     e72:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
     e74:	3301      	adds	r3, #1
     e76:	b2db      	uxtb	r3, r3
     e78:	2b1f      	cmp	r3, #31
     e7a:	d9e6      	bls.n	e4a <_dma_init+0x52>
     e7c:	2300      	movs	r3, #0
     e7e:	e00a      	b.n	e96 <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     e80:	f103 011f 	add.w	r1, r3, #31
     e84:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e86:	2a00      	cmp	r2, #0
     e88:	da10      	bge.n	eac <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e8a:	2a00      	cmp	r2, #0
     e8c:	da1c      	bge.n	ec8 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     e8e:	2a00      	cmp	r2, #0
     e90:	da24      	bge.n	edc <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
     e92:	3301      	adds	r3, #1
     e94:	b2db      	uxtb	r3, r3
     e96:	2b04      	cmp	r3, #4
     e98:	d9f2      	bls.n	e80 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     e9a:	4a15      	ldr	r2, [pc, #84]	; (ef0 <_dma_init+0xf8>)
     e9c:	8813      	ldrh	r3, [r2, #0]
     e9e:	b29b      	uxth	r3, r3
     ea0:	f043 0302 	orr.w	r3, r3, #2
     ea4:	8013      	strh	r3, [r2, #0]
}
     ea6:	2000      	movs	r0, #0
     ea8:	bc30      	pop	{r4, r5}
     eaa:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eac:	0950      	lsrs	r0, r2, #5
     eae:	f001 051f 	and.w	r5, r1, #31
     eb2:	2401      	movs	r4, #1
     eb4:	40ac      	lsls	r4, r5
     eb6:	3020      	adds	r0, #32
     eb8:	4d11      	ldr	r5, [pc, #68]	; (f00 <_dma_init+0x108>)
     eba:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ec2:	f3bf 8f6f 	isb	sy
     ec6:	e7e0      	b.n	e8a <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec8:	0950      	lsrs	r0, r2, #5
     eca:	f001 051f 	and.w	r5, r1, #31
     ece:	2401      	movs	r4, #1
     ed0:	40ac      	lsls	r4, r5
     ed2:	3060      	adds	r0, #96	; 0x60
     ed4:	4d0a      	ldr	r5, [pc, #40]	; (f00 <_dma_init+0x108>)
     ed6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     eda:	e7d8      	b.n	e8e <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     edc:	0952      	lsrs	r2, r2, #5
     ede:	f001 011f 	and.w	r1, r1, #31
     ee2:	2001      	movs	r0, #1
     ee4:	fa00 f101 	lsl.w	r1, r0, r1
     ee8:	4805      	ldr	r0, [pc, #20]	; (f00 <_dma_init+0x108>)
     eea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     eee:	e7d0      	b.n	e92 <_dma_init+0x9a>
     ef0:	4100a000 	.word	0x4100a000
     ef4:	20000590 	.word	0x20000590
     ef8:	20000790 	.word	0x20000790
     efc:	000069b4 	.word	0x000069b4
     f00:	e000e100 	.word	0xe000e100

00000f04 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     f04:	b991      	cbnz	r1, f2c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     f06:	b942      	cbnz	r2, f1a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     f08:	0100      	lsls	r0, r0, #4
     f0a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f0e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f12:	2302      	movs	r3, #2
     f14:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     f18:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     f1a:	0100      	lsls	r0, r0, #4
     f1c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f20:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f24:	2302      	movs	r3, #2
     f26:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     f2a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     f2c:	2901      	cmp	r1, #1
     f2e:	d002      	beq.n	f36 <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
     f30:	2902      	cmp	r1, #2
     f32:	d012      	beq.n	f5a <_dma_set_irq_state+0x56>
     f34:	4770      	bx	lr
	if (value == 0x0) {
     f36:	b93a      	cbnz	r2, f48 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     f38:	0100      	lsls	r0, r0, #4
     f3a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f3e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f42:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     f46:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     f48:	0100      	lsls	r0, r0, #4
     f4a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f4e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f52:	2301      	movs	r3, #1
     f54:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     f58:	4770      	bx	lr
	if (value == 0x0) {
     f5a:	b142      	cbz	r2, f6e <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
     f5c:	0100      	lsls	r0, r0, #4
     f5e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f62:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f66:	2304      	movs	r3, #4
     f68:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     f6c:	e7e2      	b.n	f34 <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
     f6e:	0100      	lsls	r0, r0, #4
     f70:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f74:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f78:	2304      	movs	r3, #4
     f7a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     f7e:	4770      	bx	lr

00000f80 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     f80:	4b02      	ldr	r3, [pc, #8]	; (f8c <_dma_set_destination_address+0xc>)
     f82:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f86:	6081      	str	r1, [r0, #8]
}
     f88:	2000      	movs	r0, #0
     f8a:	4770      	bx	lr
     f8c:	20000590 	.word	0x20000590

00000f90 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     f90:	4b02      	ldr	r3, [pc, #8]	; (f9c <_dma_set_source_address+0xc>)
     f92:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f96:	6041      	str	r1, [r0, #4]
}
     f98:	2000      	movs	r0, #0
     f9a:	4770      	bx	lr
     f9c:	20000590 	.word	0x20000590

00000fa0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fa0:	4a05      	ldr	r2, [pc, #20]	; (fb8 <_dma_srcinc_enable+0x18>)
     fa2:	0100      	lsls	r0, r0, #4
     fa4:	5a13      	ldrh	r3, [r2, r0]
     fa6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     fac:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     fb0:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     fb2:	5211      	strh	r1, [r2, r0]
}
     fb4:	2000      	movs	r0, #0
     fb6:	4770      	bx	lr
     fb8:	20000590 	.word	0x20000590

00000fbc <_dma_set_data_amount>:
{
     fbc:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     fbe:	4c14      	ldr	r4, [pc, #80]	; (1010 <_dma_set_data_amount+0x54>)
     fc0:	0102      	lsls	r2, r0, #4
     fc2:	18a3      	adds	r3, r4, r2
     fc4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fc6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     fc8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fcc:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     fce:	f412 6f00 	tst.w	r2, #2048	; 0x800
     fd2:	d006      	beq.n	fe2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     fd4:	fa01 f403 	lsl.w	r4, r1, r3
     fd8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     fda:	4a0d      	ldr	r2, [pc, #52]	; (1010 <_dma_set_data_amount+0x54>)
     fdc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     fe0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     fe2:	4c0b      	ldr	r4, [pc, #44]	; (1010 <_dma_set_data_amount+0x54>)
     fe4:	0102      	lsls	r2, r0, #4
     fe6:	18a5      	adds	r5, r4, r2
     fe8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fea:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     fec:	f412 6f80 	tst.w	r2, #1024	; 0x400
     ff0:	d005      	beq.n	ffe <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     ff2:	fa01 f303 	lsl.w	r3, r1, r3
     ff6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     ff8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     ffc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     ffe:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <_dma_set_data_amount+0x54>)
    1002:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1006:	8041      	strh	r1, [r0, #2]
}
    1008:	2000      	movs	r0, #0
    100a:	bc30      	pop	{r4, r5}
    100c:	4770      	bx	lr
    100e:	bf00      	nop
    1010:	20000590 	.word	0x20000590

00001014 <_dma_enable_transaction>:
{
    1014:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1016:	4c0c      	ldr	r4, [pc, #48]	; (1048 <_dma_enable_transaction+0x34>)
    1018:	0102      	lsls	r2, r0, #4
    101a:	5aa3      	ldrh	r3, [r4, r2]
    101c:	b29b      	uxth	r3, r3
    101e:	f043 0301 	orr.w	r3, r3, #1
    1022:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1024:	4c09      	ldr	r4, [pc, #36]	; (104c <_dma_enable_transaction+0x38>)
    1026:	1d03      	adds	r3, r0, #4
    1028:	011b      	lsls	r3, r3, #4
    102a:	58e2      	ldr	r2, [r4, r3]
    102c:	f042 0202 	orr.w	r2, r2, #2
    1030:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1032:	b129      	cbz	r1, 1040 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1034:	2301      	movs	r3, #1
    1036:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    103a:	6922      	ldr	r2, [r4, #16]
    103c:	4310      	orrs	r0, r2
    103e:	6120      	str	r0, [r4, #16]
}
    1040:	2000      	movs	r0, #0
    1042:	f85d 4b04 	ldr.w	r4, [sp], #4
    1046:	4770      	bx	lr
    1048:	20000590 	.word	0x20000590
    104c:	4100a000 	.word	0x4100a000

00001050 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1050:	4b02      	ldr	r3, [pc, #8]	; (105c <_dma_get_channel_resource+0xc>)
    1052:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    1056:	6001      	str	r1, [r0, #0]
}
    1058:	2000      	movs	r0, #0
    105a:	4770      	bx	lr
    105c:	20000180 	.word	0x20000180

00001060 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1060:	b508      	push	{r3, lr}
	_dmac_handler();
    1062:	4b01      	ldr	r3, [pc, #4]	; (1068 <DMAC_0_Handler+0x8>)
    1064:	4798      	blx	r3
    1066:	bd08      	pop	{r3, pc}
    1068:	00000d79 	.word	0x00000d79

0000106c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    106c:	b508      	push	{r3, lr}
	_dmac_handler();
    106e:	4b01      	ldr	r3, [pc, #4]	; (1074 <DMAC_1_Handler+0x8>)
    1070:	4798      	blx	r3
    1072:	bd08      	pop	{r3, pc}
    1074:	00000d79 	.word	0x00000d79

00001078 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1078:	b508      	push	{r3, lr}
	_dmac_handler();
    107a:	4b01      	ldr	r3, [pc, #4]	; (1080 <DMAC_2_Handler+0x8>)
    107c:	4798      	blx	r3
    107e:	bd08      	pop	{r3, pc}
    1080:	00000d79 	.word	0x00000d79

00001084 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1084:	b508      	push	{r3, lr}
	_dmac_handler();
    1086:	4b01      	ldr	r3, [pc, #4]	; (108c <DMAC_3_Handler+0x8>)
    1088:	4798      	blx	r3
    108a:	bd08      	pop	{r3, pc}
    108c:	00000d79 	.word	0x00000d79

00001090 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1090:	b508      	push	{r3, lr}
	_dmac_handler();
    1092:	4b01      	ldr	r3, [pc, #4]	; (1098 <DMAC_4_Handler+0x8>)
    1094:	4798      	blx	r3
    1096:	bd08      	pop	{r3, pc}
    1098:	00000d79 	.word	0x00000d79

0000109c <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
    109c:	b084      	sub	sp, #16
    109e:	b470      	push	{r4, r5, r6}
    10a0:	b085      	sub	sp, #20
    10a2:	4606      	mov	r6, r0
    10a4:	a809      	add	r0, sp, #36	; 0x24
    10a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    10aa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    10ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
    10b0:	4d04      	ldr	r5, [pc, #16]	; (10c4 <_dma_set_descriptor+0x28>)
    10b2:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    10b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    10ba:	b005      	add	sp, #20
    10bc:	bc70      	pop	{r4, r5, r6}
    10be:	b004      	add	sp, #16
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop
    10c4:	20000590 	.word	0x20000590

000010c8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10c8:	f010 0f01 	tst.w	r0, #1
    10cc:	d008      	beq.n	10e0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10ce:	4a05      	ldr	r2, [pc, #20]	; (10e4 <_gclk_init_generators_by_fref+0x1c>)
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_gclk_init_generators_by_fref+0x20>)
    10d2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_gclk_init_generators_by_fref+0x20>)
    10d6:	685a      	ldr	r2, [r3, #4]
    10d8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    10dc:	421a      	tst	r2, r3
    10de:	d1f9      	bne.n	10d4 <_gclk_init_generators_by_fref+0xc>
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop
    10e4:	00010108 	.word	0x00010108
    10e8:	40001c00 	.word	0x40001c00

000010ec <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10ec:	2201      	movs	r2, #1
    10ee:	4b01      	ldr	r3, [pc, #4]	; (10f4 <_mclk_init+0x8>)
    10f0:	715a      	strb	r2, [r3, #5]
    10f2:	4770      	bx	lr
    10f4:	40000800 	.word	0x40000800

000010f8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10f8:	4b03      	ldr	r3, [pc, #12]	; (1108 <_osc32kctrl_init_sources+0x10>)
    10fa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10fc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1100:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1102:	2201      	movs	r2, #1
    1104:	741a      	strb	r2, [r3, #16]
    1106:	4770      	bx	lr
    1108:	40001400 	.word	0x40001400

0000110c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    110c:	4a04      	ldr	r2, [pc, #16]	; (1120 <_oscctrl_init_sources+0x14>)
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <_oscctrl_init_sources+0x18>)
    1110:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1112:	4b04      	ldr	r3, [pc, #16]	; (1124 <_oscctrl_init_sources+0x18>)
    1114:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1116:	f013 0f02 	tst.w	r3, #2
    111a:	d0fa      	beq.n	1112 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    111c:	4770      	bx	lr
    111e:	bf00      	nop
    1120:	03002606 	.word	0x03002606
    1124:	40001000 	.word	0x40001000

00001128 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1128:	2231      	movs	r2, #49	; 0x31
    112a:	4b0e      	ldr	r3, [pc, #56]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    112c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    112e:	4b0d      	ldr	r3, [pc, #52]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1132:	f013 0f06 	tst.w	r3, #6
    1136:	d1fa      	bne.n	112e <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1138:	4b0a      	ldr	r3, [pc, #40]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    113a:	4a0b      	ldr	r2, [pc, #44]	; (1168 <_oscctrl_init_referenced_generators+0x40>)
    113c:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    113e:	2202      	movs	r2, #2
    1140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1144:	4b07      	ldr	r3, [pc, #28]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1148:	f013 0f02 	tst.w	r3, #2
    114c:	d1fa      	bne.n	1144 <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1152:	f013 0f01 	tst.w	r3, #1
    1156:	d104      	bne.n	1162 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    115c:	f013 0f02 	tst.w	r3, #2
    1160:	d0f5      	beq.n	114e <_oscctrl_init_referenced_generators+0x26>
    1162:	4770      	bx	lr
    1164:	40001000 	.word	0x40001000
    1168:	00020060 	.word	0x00020060

0000116c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    116c:	b500      	push	{lr}
    116e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1170:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <RAMECC_Handler+0x3c>)
    1172:	789b      	ldrb	r3, [r3, #2]
    1174:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1176:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1178:	9b01      	ldr	r3, [sp, #4]
    117a:	f013 0f02 	tst.w	r3, #2
    117e:	d006      	beq.n	118e <RAMECC_Handler+0x22>
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <RAMECC_Handler+0x40>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	b11b      	cbz	r3, 118e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1186:	4a08      	ldr	r2, [pc, #32]	; (11a8 <RAMECC_Handler+0x3c>)
    1188:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    118a:	4798      	blx	r3
    118c:	e009      	b.n	11a2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    118e:	9b01      	ldr	r3, [sp, #4]
    1190:	f013 0f01 	tst.w	r3, #1
    1194:	d005      	beq.n	11a2 <RAMECC_Handler+0x36>
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <RAMECC_Handler+0x40>)
    1198:	685b      	ldr	r3, [r3, #4]
    119a:	b113      	cbz	r3, 11a2 <RAMECC_Handler+0x36>
    119c:	4a02      	ldr	r2, [pc, #8]	; (11a8 <RAMECC_Handler+0x3c>)
    119e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    11a0:	4798      	blx	r3
	} else {
		return;
	}
}
    11a2:	b003      	add	sp, #12
    11a4:	f85d fb04 	ldr.w	pc, [sp], #4
    11a8:	41020000 	.word	0x41020000
    11ac:	20000990 	.word	0x20000990

000011b0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    11b0:	b470      	push	{r4, r5, r6}
    11b2:	b089      	sub	sp, #36	; 0x24
    11b4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    11b6:	466c      	mov	r4, sp
    11b8:	4d0c      	ldr	r5, [pc, #48]	; (11ec <_sercom_get_hardware_index+0x3c>)
    11ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    11be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    11c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11c6:	2000      	movs	r0, #0
    11c8:	2807      	cmp	r0, #7
    11ca:	d80a      	bhi.n	11e2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    11cc:	ab08      	add	r3, sp, #32
    11ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    11d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
    11d6:	42b3      	cmp	r3, r6
    11d8:	d001      	beq.n	11de <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11da:	3001      	adds	r0, #1
    11dc:	e7f4      	b.n	11c8 <_sercom_get_hardware_index+0x18>
			return i;
    11de:	b2c0      	uxtb	r0, r0
    11e0:	e000      	b.n	11e4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    11e2:	2000      	movs	r0, #0
}
    11e4:	b009      	add	sp, #36	; 0x24
    11e6:	bc70      	pop	{r4, r5, r6}
    11e8:	4770      	bx	lr
    11ea:	bf00      	nop
    11ec:	00006ab4 	.word	0x00006ab4

000011f0 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    11f0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    11f2:	f013 0f01 	tst.w	r3, #1
    11f6:	d109      	bne.n	120c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    11f8:	6803      	ldr	r3, [r0, #0]
    11fa:	f043 0302 	orr.w	r3, r3, #2
    11fe:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1200:	69c3      	ldr	r3, [r0, #28]
    1202:	f013 0f03 	tst.w	r3, #3
    1206:	d1fb      	bne.n	1200 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1208:	2000      	movs	r0, #0
    120a:	4770      	bx	lr
		return ERR_BUSY;
    120c:	f06f 0003 	mvn.w	r0, #3
}
    1210:	4770      	bx	lr

00001212 <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1212:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1214:	f013 0f04 	tst.w	r3, #4
    1218:	d109      	bne.n	122e <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    121a:	6843      	ldr	r3, [r0, #4]
    121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1220:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1222:	69c3      	ldr	r3, [r0, #28]
    1224:	f013 0f17 	tst.w	r3, #23
    1228:	d1fb      	bne.n	1222 <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    122a:	2000      	movs	r0, #0
    122c:	4770      	bx	lr
		return ERR_BUSY;
    122e:	f06f 0003 	mvn.w	r0, #3
}
    1232:	4770      	bx	lr

00001234 <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1234:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1236:	f013 0f04 	tst.w	r3, #4
    123a:	d109      	bne.n	1250 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    123c:	6843      	ldr	r3, [r0, #4]
    123e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    1242:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1244:	69c3      	ldr	r3, [r0, #28]
    1246:	f013 0f17 	tst.w	r3, #23
    124a:	d1fb      	bne.n	1244 <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    124c:	2000      	movs	r0, #0
    124e:	4770      	bx	lr
		return ERR_BUSY;
    1250:	f06f 0003 	mvn.w	r0, #3
}
    1254:	4770      	bx	lr

00001256 <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    1256:	3028      	adds	r0, #40	; 0x28
    1258:	4770      	bx	lr

0000125a <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    125a:	3028      	adds	r0, #40	; 0x28
    125c:	4770      	bx	lr
	...

00001260 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    1260:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1262:	4b04      	ldr	r3, [pc, #16]	; (1274 <_spi_get_tx_dma_channel+0x14>)
    1264:	4798      	blx	r3

	switch (index) {
    1266:	2805      	cmp	r0, #5
    1268:	d001      	beq.n	126e <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    126a:	2000      	movs	r0, #0
    126c:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    126e:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    1270:	bd08      	pop	{r3, pc}
    1272:	bf00      	nop
    1274:	000011b1 	.word	0x000011b1

00001278 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    1278:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <_spi_is_rx_dma_channel_enabled+0x14>)
    127c:	4798      	blx	r3

	switch (index) {
    127e:	2805      	cmp	r0, #5
    1280:	d001      	beq.n	1286 <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    1282:	2000      	movs	r0, #0
    1284:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    1286:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    1288:	bd08      	pop	{r3, pc}
    128a:	bf00      	nop
    128c:	000011b1 	.word	0x000011b1

00001290 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    1290:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <_spi_get_rx_dma_channel+0x20>)
    1294:	4798      	blx	r3

	switch (index) {
    1296:	2807      	cmp	r0, #7
    1298:	d807      	bhi.n	12aa <_spi_get_rx_dma_channel+0x1a>
    129a:	e8df f000 	tbb	[pc, r0]
    129e:	0404      	.short	0x0404
    12a0:	06040404 	.word	0x06040404
    12a4:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    12a6:	2001      	movs	r0, #1
    12a8:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    12aa:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    12ac:	bd08      	pop	{r3, pc}
    12ae:	bf00      	nop
    12b0:	000011b1 	.word	0x000011b1

000012b4 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    12b4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12b6:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    12b8:	689b      	ldr	r3, [r3, #8]
    12ba:	b103      	cbz	r3, 12be <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    12bc:	4798      	blx	r3
    12be:	bd08      	pop	{r3, pc}

000012c0 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    12c0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12c2:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    12c4:	68db      	ldr	r3, [r3, #12]
    12c6:	b103      	cbz	r3, 12ca <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    12c8:	4798      	blx	r3
    12ca:	bd08      	pop	{r3, pc}

000012cc <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    12cc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12ce:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    12d0:	685b      	ldr	r3, [r3, #4]
    12d2:	b103      	cbz	r3, 12d6 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    12d4:	4798      	blx	r3
    12d6:	bd08      	pop	{r3, pc}

000012d8 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    12d8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12da:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    12dc:	691b      	ldr	r3, [r3, #16]
    12de:	b103      	cbz	r3, 12e2 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    12e0:	4798      	blx	r3
    12e2:	bd08      	pop	{r3, pc}

000012e4 <_get_i2cm_index>:
{
    12e4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    12e6:	4b0e      	ldr	r3, [pc, #56]	; (1320 <_get_i2cm_index+0x3c>)
    12e8:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    12ea:	2300      	movs	r3, #0
    12ec:	2b01      	cmp	r3, #1
    12ee:	d80d      	bhi.n	130c <_get_i2cm_index+0x28>
		if (_i2cms[i].number == sercom_offset) {
    12f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    12f4:	00d1      	lsls	r1, r2, #3
    12f6:	4a0b      	ldr	r2, [pc, #44]	; (1324 <_get_i2cm_index+0x40>)
    12f8:	440a      	add	r2, r1
    12fa:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    12fe:	4290      	cmp	r0, r2
    1300:	d002      	beq.n	1308 <_get_i2cm_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1302:	3301      	adds	r3, #1
    1304:	b2db      	uxtb	r3, r3
    1306:	e7f1      	b.n	12ec <_get_i2cm_index+0x8>
			return i;
    1308:	b258      	sxtb	r0, r3
    130a:	bd08      	pop	{r3, pc}
	ASSERT(false);
    130c:	f240 32a7 	movw	r2, #935	; 0x3a7
    1310:	4905      	ldr	r1, [pc, #20]	; (1328 <_get_i2cm_index+0x44>)
    1312:	2000      	movs	r0, #0
    1314:	4b05      	ldr	r3, [pc, #20]	; (132c <_get_i2cm_index+0x48>)
    1316:	4798      	blx	r3
	return -1;
    1318:	f04f 30ff 	mov.w	r0, #4294967295
}
    131c:	bd08      	pop	{r3, pc}
    131e:	bf00      	nop
    1320:	000011b1 	.word	0x000011b1
    1324:	00006ab4 	.word	0x00006ab4
    1328:	00006b40 	.word	0x00006b40
    132c:	00000cd9 	.word	0x00000cd9

00001330 <_i2c_m_sync_init_impl>:
{
    1330:	b538      	push	{r3, r4, r5, lr}
    1332:	4605      	mov	r5, r0
    1334:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1336:	4608      	mov	r0, r1
    1338:	4b33      	ldr	r3, [pc, #204]	; (1408 <_i2c_m_sync_init_impl+0xd8>)
    133a:	4798      	blx	r3
    133c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    133e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1340:	f013 0f01 	tst.w	r3, #1
    1344:	d122      	bne.n	138c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1346:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    134a:	00da      	lsls	r2, r3, #3
    134c:	4b2f      	ldr	r3, [pc, #188]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    134e:	4413      	add	r3, r2
    1350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1352:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1356:	69e3      	ldr	r3, [r4, #28]
    1358:	f013 0f03 	tst.w	r3, #3
    135c:	d1fb      	bne.n	1356 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    135e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1360:	f013 0f02 	tst.w	r3, #2
    1364:	d00b      	beq.n	137e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1366:	6823      	ldr	r3, [r4, #0]
    1368:	f023 0302 	bic.w	r3, r3, #2
    136c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    136e:	69e3      	ldr	r3, [r4, #28]
    1370:	f013 0f03 	tst.w	r3, #3
    1374:	d1fb      	bne.n	136e <_i2c_m_sync_init_impl+0x3e>
    1376:	69e3      	ldr	r3, [r4, #28]
    1378:	f013 0f02 	tst.w	r3, #2
    137c:	d1fb      	bne.n	1376 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    137e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1382:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1384:	69e3      	ldr	r3, [r4, #28]
    1386:	f013 0f03 	tst.w	r3, #3
    138a:	d1fb      	bne.n	1384 <_i2c_m_sync_init_impl+0x54>
    138c:	69e3      	ldr	r3, [r4, #28]
    138e:	f013 0f01 	tst.w	r3, #1
    1392:	d1fb      	bne.n	138c <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1394:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1398:	00da      	lsls	r2, r3, #3
    139a:	4b1c      	ldr	r3, [pc, #112]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    139c:	4413      	add	r3, r2
    139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    13a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	f013 0f03 	tst.w	r3, #3
    13a8:	d1fb      	bne.n	13a2 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    13aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    13ae:	00da      	lsls	r2, r3, #3
    13b0:	4b16      	ldr	r3, [pc, #88]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13b2:	4413      	add	r3, r2
    13b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    13b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13b8:	69e3      	ldr	r3, [r4, #28]
    13ba:	f013 0f04 	tst.w	r3, #4
    13be:	d1fb      	bne.n	13b8 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    13c0:	0042      	lsls	r2, r0, #1
    13c2:	4402      	add	r2, r0
    13c4:	00d1      	lsls	r1, r2, #3
    13c6:	4b11      	ldr	r3, [pc, #68]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13c8:	440b      	add	r3, r1
    13ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    13cc:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    13ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    13d2:	f003 0303 	and.w	r3, r3, #3
    13d6:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    13d8:	2b01      	cmp	r3, #1
    13da:	bf94      	ite	ls
    13dc:	2300      	movls	r3, #0
    13de:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    13e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    13e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    13e6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    13ea:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13ec:	69e3      	ldr	r3, [r4, #28]
    13ee:	f013 0f04 	tst.w	r3, #4
    13f2:	d1fb      	bne.n	13ec <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    13f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    13f8:	00c2      	lsls	r2, r0, #3
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13fc:	4413      	add	r3, r2
    13fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1402:	81eb      	strh	r3, [r5, #14]
}
    1404:	2000      	movs	r0, #0
    1406:	bd38      	pop	{r3, r4, r5, pc}
    1408:	000012e5 	.word	0x000012e5
    140c:	00006ab4 	.word	0x00006ab4

00001410 <_sercom_i2c_sync_send_address>:
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1414:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1416:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1418:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    141c:	f240 52a6 	movw	r2, #1446	; 0x5a6
    1420:	4999      	ldr	r1, [pc, #612]	; (1688 <_sercom_i2c_sync_send_address+0x278>)
    1422:	3000      	adds	r0, #0
    1424:	bf18      	it	ne
    1426:	2001      	movne	r0, #1
    1428:	4b98      	ldr	r3, [pc, #608]	; (168c <_sercom_i2c_sync_send_address+0x27c>)
    142a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    142c:	686b      	ldr	r3, [r5, #4]
    142e:	2b01      	cmp	r3, #1
    1430:	d057      	beq.n	14e2 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1432:	6863      	ldr	r3, [r4, #4]
    1434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1438:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143a:	69e3      	ldr	r3, [r4, #28]
    143c:	f013 0f04 	tst.w	r3, #4
    1440:	d1fb      	bne.n	143a <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1442:	882b      	ldrh	r3, [r5, #0]
    1444:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1448:	d056      	beq.n	14f8 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    144a:	886a      	ldrh	r2, [r5, #2]
    144c:	f012 0f01 	tst.w	r2, #1
    1450:	d004      	beq.n	145c <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1452:	886a      	ldrh	r2, [r5, #2]
    1454:	b292      	uxth	r2, r2
    1456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    145a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    145c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1460:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1464:	69e3      	ldr	r3, [r4, #28]
    1466:	f013 0f04 	tst.w	r3, #4
    146a:	d1fb      	bne.n	1464 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    146c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1472:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1478:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    147a:	69e3      	ldr	r3, [r4, #28]
    147c:	f013 0f04 	tst.w	r3, #4
    1480:	d1fb      	bne.n	147a <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    1482:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1484:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1488:	7e33      	ldrb	r3, [r6, #24]
    148a:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    148c:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    148e:	1e51      	subs	r1, r2, #1
    1490:	b11a      	cbz	r2, 149a <_sercom_i2c_sync_send_address+0x8a>
    1492:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1494:	f013 0f03 	tst.w	r3, #3
    1498:	d0f6      	beq.n	1488 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    149a:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    149c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14a0:	69e3      	ldr	r3, [r4, #28]
    14a2:	f013 0f04 	tst.w	r3, #4
    14a6:	d1fb      	bne.n	14a0 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    14a8:	8b63      	ldrh	r3, [r4, #26]
    14aa:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    14ac:	f010 0f01 	tst.w	r0, #1
    14b0:	f000 809c 	beq.w	15ec <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    14b4:	f013 0f02 	tst.w	r3, #2
    14b8:	d032      	beq.n	1520 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    14ba:	2201      	movs	r2, #1
    14bc:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    14be:	886a      	ldrh	r2, [r5, #2]
    14c0:	b292      	uxth	r2, r2
    14c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    14c6:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    14c8:	886a      	ldrh	r2, [r5, #2]
    14ca:	b292      	uxth	r2, r2
    14cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    14d0:	b292      	uxth	r2, r2
    14d2:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    14d4:	f013 0f01 	tst.w	r3, #1
    14d8:	f000 80d1 	beq.w	167e <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    14dc:	f06f 0004 	mvn.w	r0, #4
    14e0:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    14e2:	2e00      	cmp	r6, #0
    14e4:	d0a5      	beq.n	1432 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14e6:	6863      	ldr	r3, [r4, #4]
    14e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    14ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14ee:	69e3      	ldr	r3, [r4, #28]
    14f0:	f013 0f04 	tst.w	r3, #4
    14f4:	d1fb      	bne.n	14ee <_sercom_i2c_sync_send_address+0xde>
    14f6:	e7a4      	b.n	1442 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    14f8:	005b      	lsls	r3, r3, #1
    14fa:	b2db      	uxtb	r3, r3
    14fc:	886a      	ldrh	r2, [r5, #2]
    14fe:	f002 0201 	and.w	r2, r2, #1
    1502:	431a      	orrs	r2, r3
    1504:	69e3      	ldr	r3, [r4, #28]
    1506:	f013 0f04 	tst.w	r3, #4
    150a:	d1fb      	bne.n	1504 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    150c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1512:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1514:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1516:	69e3      	ldr	r3, [r4, #28]
    1518:	f013 0f04 	tst.w	r3, #4
    151c:	d1fb      	bne.n	1516 <_sercom_i2c_sync_send_address+0x106>
    151e:	e7b0      	b.n	1482 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1520:	f013 0f04 	tst.w	r3, #4
    1524:	d11f      	bne.n	1566 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    1526:	886b      	ldrh	r3, [r5, #2]
    1528:	f413 6f80 	tst.w	r3, #1024	; 0x400
    152c:	d039      	beq.n	15a2 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    152e:	882b      	ldrh	r3, [r5, #0]
    1530:	121b      	asrs	r3, r3, #8
    1532:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1534:	f003 0206 	and.w	r2, r3, #6
    1538:	69e3      	ldr	r3, [r4, #28]
    153a:	f013 0f04 	tst.w	r3, #4
    153e:	d1fb      	bne.n	1538 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1540:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1546:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1548:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    154c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    154e:	69e3      	ldr	r3, [r4, #28]
    1550:	f013 0f04 	tst.w	r3, #4
    1554:	d1fb      	bne.n	154e <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    1556:	886b      	ldrh	r3, [r5, #2]
    1558:	b29b      	uxth	r3, r3
    155a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    155e:	b29b      	uxth	r3, r3
    1560:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1562:	2000      	movs	r0, #0
    1564:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    1566:	686b      	ldr	r3, [r5, #4]
    1568:	2b00      	cmp	r3, #0
    156a:	dd04      	ble.n	1576 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    156c:	886b      	ldrh	r3, [r5, #2]
    156e:	b29b      	uxth	r3, r3
    1570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1574:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1576:	886b      	ldrh	r3, [r5, #2]
    1578:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    157c:	d108      	bne.n	1590 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    157e:	886b      	ldrh	r3, [r5, #2]
    1580:	b29b      	uxth	r3, r3
    1582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1586:	b29b      	uxth	r3, r3
    1588:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    158a:	f06f 0001 	mvn.w	r0, #1
    158e:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1590:	6863      	ldr	r3, [r4, #4]
    1592:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1596:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1598:	69e3      	ldr	r3, [r4, #28]
    159a:	f013 0f04 	tst.w	r3, #4
    159e:	d1fb      	bne.n	1598 <_sercom_i2c_sync_send_address+0x188>
    15a0:	e7ed      	b.n	157e <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    15a2:	6868      	ldr	r0, [r5, #4]
    15a4:	b998      	cbnz	r0, 15ce <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    15a6:	886b      	ldrh	r3, [r5, #2]
    15a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15ac:	d106      	bne.n	15bc <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    15ae:	886b      	ldrh	r3, [r5, #2]
    15b0:	b29b      	uxth	r3, r3
    15b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    15b6:	b29b      	uxth	r3, r3
    15b8:	806b      	strh	r3, [r5, #2]
    15ba:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15bc:	6863      	ldr	r3, [r4, #4]
    15be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15c2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15c4:	69e3      	ldr	r3, [r4, #28]
    15c6:	f013 0f04 	tst.w	r3, #4
    15ca:	d1fb      	bne.n	15c4 <_sercom_i2c_sync_send_address+0x1b4>
    15cc:	e7ef      	b.n	15ae <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15ce:	68ab      	ldr	r3, [r5, #8]
    15d0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15d2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	f013 0f04 	tst.w	r3, #4
    15da:	d1fb      	bne.n	15d4 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    15dc:	68ab      	ldr	r3, [r5, #8]
    15de:	3301      	adds	r3, #1
    15e0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    15e2:	686b      	ldr	r3, [r5, #4]
    15e4:	3b01      	subs	r3, #1
    15e6:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    15e8:	2000      	movs	r0, #0
    15ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    15ec:	f010 0f02 	tst.w	r0, #2
    15f0:	d048      	beq.n	1684 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    15f2:	6869      	ldr	r1, [r5, #4]
    15f4:	2900      	cmp	r1, #0
    15f6:	d03d      	beq.n	1674 <_sercom_i2c_sync_send_address+0x264>
    15f8:	f013 0f04 	tst.w	r3, #4
    15fc:	d13a      	bne.n	1674 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    15fe:	3901      	subs	r1, #1
    1600:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1602:	b901      	cbnz	r1, 1606 <_sercom_i2c_sync_send_address+0x1f6>
    1604:	b1e2      	cbz	r2, 1640 <_sercom_i2c_sync_send_address+0x230>
    1606:	2901      	cmp	r1, #1
    1608:	d018      	beq.n	163c <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    160a:	686b      	ldr	r3, [r5, #4]
    160c:	b94b      	cbnz	r3, 1622 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    160e:	886b      	ldrh	r3, [r5, #2]
    1610:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1614:	d11d      	bne.n	1652 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    1616:	886b      	ldrh	r3, [r5, #2]
    1618:	b29b      	uxth	r3, r3
    161a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    161e:	b29b      	uxth	r3, r3
    1620:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1622:	68aa      	ldr	r2, [r5, #8]
    1624:	1c53      	adds	r3, r2, #1
    1626:	60ab      	str	r3, [r5, #8]
    1628:	69e3      	ldr	r3, [r4, #28]
    162a:	f013 0f04 	tst.w	r3, #4
    162e:	d1fb      	bne.n	1628 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1632:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1634:	2302      	movs	r3, #2
    1636:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1638:	2000      	movs	r0, #0
    163a:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    163c:	2a00      	cmp	r2, #0
    163e:	d0e4      	beq.n	160a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1640:	6863      	ldr	r3, [r4, #4]
    1642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1646:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1648:	69e3      	ldr	r3, [r4, #28]
    164a:	f013 0f04 	tst.w	r3, #4
    164e:	d1fb      	bne.n	1648 <_sercom_i2c_sync_send_address+0x238>
    1650:	e7db      	b.n	160a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1652:	6863      	ldr	r3, [r4, #4]
    1654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1658:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    165a:	69e3      	ldr	r3, [r4, #28]
    165c:	f013 0f04 	tst.w	r3, #4
    1660:	d1fb      	bne.n	165a <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1662:	6863      	ldr	r3, [r4, #4]
    1664:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1668:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    166a:	69e3      	ldr	r3, [r4, #28]
    166c:	f013 0f04 	tst.w	r3, #4
    1670:	d1fb      	bne.n	166a <_sercom_i2c_sync_send_address+0x25a>
    1672:	e7d0      	b.n	1616 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1674:	2302      	movs	r3, #2
    1676:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1678:	f06f 0001 	mvn.w	r0, #1
    167c:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    167e:	f06f 0003 	mvn.w	r0, #3
    1682:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    1684:	2000      	movs	r0, #0
}
    1686:	bd70      	pop	{r4, r5, r6, pc}
    1688:	00006b40 	.word	0x00006b40
    168c:	00000cd9 	.word	0x00000cd9

00001690 <_spi_m_dma_rx_enable>:
{
    1690:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1692:	4604      	mov	r4, r0
    1694:	b168      	cbz	r0, 16b2 <_spi_m_dma_rx_enable+0x22>
    1696:	6803      	ldr	r3, [r0, #0]
    1698:	b14b      	cbz	r3, 16ae <_spi_m_dma_rx_enable+0x1e>
    169a:	2001      	movs	r0, #1
    169c:	f640 32fe 	movw	r2, #3070	; 0xbfe
    16a0:	4905      	ldr	r1, [pc, #20]	; (16b8 <_spi_m_dma_rx_enable+0x28>)
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <_spi_m_dma_rx_enable+0x2c>)
    16a4:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    16a6:	6820      	ldr	r0, [r4, #0]
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <_spi_m_dma_rx_enable+0x30>)
    16aa:	4798      	blx	r3
}
    16ac:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    16ae:	2000      	movs	r0, #0
    16b0:	e7f4      	b.n	169c <_spi_m_dma_rx_enable+0xc>
    16b2:	2000      	movs	r0, #0
    16b4:	e7f2      	b.n	169c <_spi_m_dma_rx_enable+0xc>
    16b6:	bf00      	nop
    16b8:	00006b40 	.word	0x00006b40
    16bc:	00000cd9 	.word	0x00000cd9
    16c0:	00001213 	.word	0x00001213

000016c4 <_spi_m_dma_rx_disable>:
{
    16c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    16c6:	4604      	mov	r4, r0
    16c8:	b168      	cbz	r0, 16e6 <_spi_m_dma_rx_disable+0x22>
    16ca:	6803      	ldr	r3, [r0, #0]
    16cc:	b14b      	cbz	r3, 16e2 <_spi_m_dma_rx_disable+0x1e>
    16ce:	2001      	movs	r0, #1
    16d0:	f640 4205 	movw	r2, #3077	; 0xc05
    16d4:	4905      	ldr	r1, [pc, #20]	; (16ec <_spi_m_dma_rx_disable+0x28>)
    16d6:	4b06      	ldr	r3, [pc, #24]	; (16f0 <_spi_m_dma_rx_disable+0x2c>)
    16d8:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    16da:	6820      	ldr	r0, [r4, #0]
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <_spi_m_dma_rx_disable+0x30>)
    16de:	4798      	blx	r3
}
    16e0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    16e2:	2000      	movs	r0, #0
    16e4:	e7f4      	b.n	16d0 <_spi_m_dma_rx_disable+0xc>
    16e6:	2000      	movs	r0, #0
    16e8:	e7f2      	b.n	16d0 <_spi_m_dma_rx_disable+0xc>
    16ea:	bf00      	nop
    16ec:	00006b40 	.word	0x00006b40
    16f0:	00000cd9 	.word	0x00000cd9
    16f4:	00001235 	.word	0x00001235

000016f8 <_i2c_m_sync_init>:
{
    16f8:	b538      	push	{r3, r4, r5, lr}
    16fa:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    16fc:	4604      	mov	r4, r0
    16fe:	f240 5219 	movw	r2, #1305	; 0x519
    1702:	4906      	ldr	r1, [pc, #24]	; (171c <_i2c_m_sync_init+0x24>)
    1704:	3000      	adds	r0, #0
    1706:	bf18      	it	ne
    1708:	2001      	movne	r0, #1
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <_i2c_m_sync_init+0x28>)
    170c:	4798      	blx	r3
	i2c_dev->hw = hw;
    170e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1710:	4629      	mov	r1, r5
    1712:	4620      	mov	r0, r4
    1714:	4b03      	ldr	r3, [pc, #12]	; (1724 <_i2c_m_sync_init+0x2c>)
    1716:	4798      	blx	r3
}
    1718:	bd38      	pop	{r3, r4, r5, pc}
    171a:	bf00      	nop
    171c:	00006b40 	.word	0x00006b40
    1720:	00000cd9 	.word	0x00000cd9
    1724:	00001331 	.word	0x00001331

00001728 <_i2c_m_sync_enable>:
{
    1728:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    172a:	4e1b      	ldr	r6, [pc, #108]	; (1798 <_i2c_m_sync_enable+0x70>)
    172c:	4604      	mov	r4, r0
    172e:	f240 5236 	movw	r2, #1334	; 0x536
    1732:	4631      	mov	r1, r6
    1734:	3000      	adds	r0, #0
    1736:	bf18      	it	ne
    1738:	2001      	movne	r0, #1
    173a:	4d18      	ldr	r5, [pc, #96]	; (179c <_i2c_m_sync_enable+0x74>)
    173c:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    173e:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1740:	f240 6206 	movw	r2, #1542	; 0x606
    1744:	4631      	mov	r1, r6
    1746:	1c20      	adds	r0, r4, #0
    1748:	bf18      	it	ne
    174a:	2001      	movne	r0, #1
    174c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	f043 0302 	orr.w	r3, r3, #2
    1754:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1756:	69e3      	ldr	r3, [r4, #28]
    1758:	f013 0f03 	tst.w	r3, #3
    175c:	d1fb      	bne.n	1756 <_i2c_m_sync_enable+0x2e>
    175e:	2104      	movs	r1, #4
    1760:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1764:	69e3      	ldr	r3, [r4, #28]
    1766:	f013 0f04 	tst.w	r3, #4
    176a:	d1fb      	bne.n	1764 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    176c:	8b63      	ldrh	r3, [r4, #26]
    176e:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1772:	2b01      	cmp	r3, #1
    1774:	d00b      	beq.n	178e <_i2c_m_sync_enable+0x66>
		timeout--;
    1776:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    1778:	2a00      	cmp	r2, #0
    177a:	dcf3      	bgt.n	1764 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    177c:	3901      	subs	r1, #1
    177e:	d008      	beq.n	1792 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1780:	2310      	movs	r3, #16
    1782:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1784:	69e3      	ldr	r3, [r4, #28]
    1786:	f013 0f04 	tst.w	r3, #4
    178a:	d1fb      	bne.n	1784 <_i2c_m_sync_enable+0x5c>
    178c:	e7e8      	b.n	1760 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    178e:	2000      	movs	r0, #0
    1790:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1792:	f06f 0005 	mvn.w	r0, #5
}
    1796:	bd70      	pop	{r4, r5, r6, pc}
    1798:	00006b40 	.word	0x00006b40
    179c:	00000cd9 	.word	0x00000cd9

000017a0 <_i2c_m_sync_transfer>:
{
    17a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17a4:	4605      	mov	r5, r0
    17a6:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    17a8:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    17aa:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1a4c <_i2c_m_sync_transfer+0x2ac>
    17ae:	f240 52d1 	movw	r2, #1489	; 0x5d1
    17b2:	4641      	mov	r1, r8
    17b4:	3000      	adds	r0, #0
    17b6:	bf18      	it	ne
    17b8:	2001      	movne	r0, #1
    17ba:	4fa2      	ldr	r7, [pc, #648]	; (1a44 <_i2c_m_sync_transfer+0x2a4>)
    17bc:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    17be:	6928      	ldr	r0, [r5, #16]
    17c0:	f240 52d2 	movw	r2, #1490	; 0x5d2
    17c4:	4641      	mov	r1, r8
    17c6:	3000      	adds	r0, #0
    17c8:	bf18      	it	ne
    17ca:	2001      	movne	r0, #1
    17cc:	47b8      	blx	r7
	ASSERT(msg);
    17ce:	f240 52d3 	movw	r2, #1491	; 0x5d3
    17d2:	4641      	mov	r1, r8
    17d4:	1c30      	adds	r0, r6, #0
    17d6:	bf18      	it	ne
    17d8:	2001      	movne	r0, #1
    17da:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    17dc:	886b      	ldrh	r3, [r5, #2]
    17de:	f413 7f80 	tst.w	r3, #256	; 0x100
    17e2:	f040 812a 	bne.w	1a3a <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    17e6:	8873      	ldrh	r3, [r6, #2]
    17e8:	b29b      	uxth	r3, r3
    17ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17ee:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    17f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    17f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    17f8:	6863      	ldr	r3, [r4, #4]
    17fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1800:	69e3      	ldr	r3, [r4, #28]
    1802:	f013 0f04 	tst.w	r3, #4
    1806:	d1fb      	bne.n	1800 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1808:	4628      	mov	r0, r5
    180a:	4b8f      	ldr	r3, [pc, #572]	; (1a48 <_i2c_m_sync_transfer+0x2a8>)
    180c:	4798      	blx	r3
	if (ret) {
    180e:	4603      	mov	r3, r0
    1810:	2800      	cmp	r0, #0
    1812:	f000 80b0 	beq.w	1976 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1816:	886a      	ldrh	r2, [r5, #2]
    1818:	b292      	uxth	r2, r2
    181a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    181e:	b292      	uxth	r2, r2
    1820:	806a      	strh	r2, [r5, #2]
		return ret;
    1822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1826:	f06f 0004 	mvn.w	r0, #4
    182a:	e0b7      	b.n	199c <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    182c:	8873      	ldrh	r3, [r6, #2]
    182e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1832:	d107      	bne.n	1844 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1834:	886b      	ldrh	r3, [r5, #2]
    1836:	b29b      	uxth	r3, r3
    1838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    183c:	b29b      	uxth	r3, r3
    183e:	806b      	strh	r3, [r5, #2]
			return ret;
    1840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1844:	6863      	ldr	r3, [r4, #4]
    1846:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    184a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184c:	69e3      	ldr	r3, [r4, #28]
    184e:	f013 0f04 	tst.w	r3, #4
    1852:	d1fb      	bne.n	184c <_i2c_m_sync_transfer+0xac>
    1854:	e7ee      	b.n	1834 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1856:	f013 0f04 	tst.w	r3, #4
    185a:	d11f      	bne.n	189c <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    185c:	886b      	ldrh	r3, [r5, #2]
    185e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1862:	d039      	beq.n	18d8 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1864:	882b      	ldrh	r3, [r5, #0]
    1866:	121b      	asrs	r3, r3, #8
    1868:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    186a:	f003 0206 	and.w	r2, r3, #6
    186e:	69e3      	ldr	r3, [r4, #28]
    1870:	f013 0f04 	tst.w	r3, #4
    1874:	d1fb      	bne.n	186e <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1876:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    187c:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    187e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1882:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1884:	69e3      	ldr	r3, [r4, #28]
    1886:	f013 0f04 	tst.w	r3, #4
    188a:	d1fb      	bne.n	1884 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    188c:	886b      	ldrh	r3, [r5, #2]
    188e:	b29b      	uxth	r3, r3
    1890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1894:	b29b      	uxth	r3, r3
    1896:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1898:	2000      	movs	r0, #0
    189a:	e06b      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    189c:	686b      	ldr	r3, [r5, #4]
    189e:	2b00      	cmp	r3, #0
    18a0:	dd04      	ble.n	18ac <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    18a2:	886b      	ldrh	r3, [r5, #2]
    18a4:	b29b      	uxth	r3, r3
    18a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    18aa:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    18ac:	886b      	ldrh	r3, [r5, #2]
    18ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18b2:	d108      	bne.n	18c6 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    18b4:	886b      	ldrh	r3, [r5, #2]
    18b6:	b29b      	uxth	r3, r3
    18b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18bc:	b29b      	uxth	r3, r3
    18be:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    18c0:	f06f 0001 	mvn.w	r0, #1
    18c4:	e056      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18c6:	6863      	ldr	r3, [r4, #4]
    18c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    18cc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18ce:	69e3      	ldr	r3, [r4, #28]
    18d0:	f013 0f04 	tst.w	r3, #4
    18d4:	d1fb      	bne.n	18ce <_i2c_m_sync_transfer+0x12e>
    18d6:	e7ed      	b.n	18b4 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    18d8:	6868      	ldr	r0, [r5, #4]
    18da:	b998      	cbnz	r0, 1904 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    18dc:	886b      	ldrh	r3, [r5, #2]
    18de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18e2:	d106      	bne.n	18f2 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    18e4:	886b      	ldrh	r3, [r5, #2]
    18e6:	b29b      	uxth	r3, r3
    18e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18ec:	b29b      	uxth	r3, r3
    18ee:	806b      	strh	r3, [r5, #2]
    18f0:	e040      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18f2:	6863      	ldr	r3, [r4, #4]
    18f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    18f8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18fa:	69e3      	ldr	r3, [r4, #28]
    18fc:	f013 0f04 	tst.w	r3, #4
    1900:	d1fb      	bne.n	18fa <_i2c_m_sync_transfer+0x15a>
    1902:	e7ef      	b.n	18e4 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1904:	68ab      	ldr	r3, [r5, #8]
    1906:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1908:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    190a:	69e3      	ldr	r3, [r4, #28]
    190c:	f013 0f04 	tst.w	r3, #4
    1910:	d1fb      	bne.n	190a <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1912:	68ab      	ldr	r3, [r5, #8]
    1914:	3301      	adds	r3, #1
    1916:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1918:	686b      	ldr	r3, [r5, #4]
    191a:	3b01      	subs	r3, #1
    191c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    191e:	2000      	movs	r0, #0
    1920:	e028      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1922:	f017 0f02 	tst.w	r7, #2
    1926:	f000 8083 	beq.w	1a30 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    192a:	6869      	ldr	r1, [r5, #4]
    192c:	2900      	cmp	r1, #0
    192e:	d077      	beq.n	1a20 <_i2c_m_sync_transfer+0x280>
    1930:	f013 0f04 	tst.w	r3, #4
    1934:	d174      	bne.n	1a20 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1936:	3901      	subs	r1, #1
    1938:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    193a:	b909      	cbnz	r1, 1940 <_i2c_m_sync_transfer+0x1a0>
    193c:	2a00      	cmp	r2, #0
    193e:	d055      	beq.n	19ec <_i2c_m_sync_transfer+0x24c>
    1940:	2901      	cmp	r1, #1
    1942:	d051      	beq.n	19e8 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1944:	686b      	ldr	r3, [r5, #4]
    1946:	b94b      	cbnz	r3, 195c <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1948:	886b      	ldrh	r3, [r5, #2]
    194a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    194e:	d156      	bne.n	19fe <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1950:	886b      	ldrh	r3, [r5, #2]
    1952:	b29b      	uxth	r3, r3
    1954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1958:	b29b      	uxth	r3, r3
    195a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    195c:	68aa      	ldr	r2, [r5, #8]
    195e:	1c53      	adds	r3, r2, #1
    1960:	60ab      	str	r3, [r5, #8]
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	f013 0f04 	tst.w	r3, #4
    1968:	d1fb      	bne.n	1962 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    196a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    196c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    196e:	2302      	movs	r3, #2
    1970:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1972:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    1974:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1976:	886a      	ldrh	r2, [r5, #2]
    1978:	f412 7f80 	tst.w	r2, #256	; 0x100
    197c:	d05a      	beq.n	1a34 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    197e:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1980:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1984:	7e03      	ldrb	r3, [r0, #24]
    1986:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1988:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    198a:	1e51      	subs	r1, r2, #1
    198c:	2a00      	cmp	r2, #0
    198e:	f43f af4a 	beq.w	1826 <_i2c_m_sync_transfer+0x86>
    1992:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1994:	f013 0f03 	tst.w	r3, #3
    1998:	d0f4      	beq.n	1984 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    199a:	2000      	movs	r0, #0
		if (ret) {
    199c:	2800      	cmp	r0, #0
    199e:	f47f af45 	bne.w	182c <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    19a2:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    19a4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19a8:	69e3      	ldr	r3, [r4, #28]
    19aa:	f013 0f04 	tst.w	r3, #4
    19ae:	d1fb      	bne.n	19a8 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    19b0:	8b63      	ldrh	r3, [r4, #26]
    19b2:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    19b4:	f017 0f01 	tst.w	r7, #1
    19b8:	d0b3      	beq.n	1922 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    19ba:	f013 0f02 	tst.w	r3, #2
    19be:	f43f af4a 	beq.w	1856 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    19c2:	2201      	movs	r2, #1
    19c4:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    19c6:	886a      	ldrh	r2, [r5, #2]
    19c8:	b292      	uxth	r2, r2
    19ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    19ce:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    19d0:	886a      	ldrh	r2, [r5, #2]
    19d2:	b292      	uxth	r2, r2
    19d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    19d8:	b292      	uxth	r2, r2
    19da:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    19dc:	f013 0f01 	tst.w	r3, #1
    19e0:	d023      	beq.n	1a2a <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    19e2:	f06f 0004 	mvn.w	r0, #4
    19e6:	e7c5      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    19e8:	2a00      	cmp	r2, #0
    19ea:	d0ab      	beq.n	1944 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19ec:	6863      	ldr	r3, [r4, #4]
    19ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    19f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19f4:	69e3      	ldr	r3, [r4, #28]
    19f6:	f013 0f04 	tst.w	r3, #4
    19fa:	d1fb      	bne.n	19f4 <_i2c_m_sync_transfer+0x254>
    19fc:	e7a2      	b.n	1944 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    19fe:	6863      	ldr	r3, [r4, #4]
    1a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1a04:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f04 	tst.w	r3, #4
    1a0c:	d1fb      	bne.n	1a06 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1a0e:	6863      	ldr	r3, [r4, #4]
    1a10:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1a14:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a16:	69e3      	ldr	r3, [r4, #28]
    1a18:	f013 0f04 	tst.w	r3, #4
    1a1c:	d1fb      	bne.n	1a16 <_i2c_m_sync_transfer+0x276>
    1a1e:	e797      	b.n	1950 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1a20:	2302      	movs	r3, #2
    1a22:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1a24:	f06f 0001 	mvn.w	r0, #1
    1a28:	e7a4      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    1a2a:	f06f 0003 	mvn.w	r0, #3
    1a2e:	e7a1      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1a30:	2000      	movs	r0, #0
    1a32:	e79f      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1a34:	4618      	mov	r0, r3
    1a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    1a3a:	f06f 0005 	mvn.w	r0, #5
}
    1a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a42:	bf00      	nop
    1a44:	00000cd9 	.word	0x00000cd9
    1a48:	00001411 	.word	0x00001411
    1a4c:	00006b40 	.word	0x00006b40

00001a50 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	4605      	mov	r5, r0
    1a54:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1a56:	4608      	mov	r0, r1
    1a58:	4b50      	ldr	r3, [pc, #320]	; (1b9c <_spi_m_dma_init+0x14c>)
    1a5a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a5c:	2300      	movs	r3, #0
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d072      	beq.n	1b48 <_spi_m_dma_init+0xf8>
	return NULL;
    1a62:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1a64:	2d00      	cmp	r5, #0
    1a66:	d07b      	beq.n	1b60 <_spi_m_dma_init+0x110>
    1a68:	2c00      	cmp	r4, #0
    1a6a:	d077      	beq.n	1b5c <_spi_m_dma_init+0x10c>
    1a6c:	2001      	movs	r0, #1
    1a6e:	f640 42b3 	movw	r2, #3251	; 0xcb3
    1a72:	494b      	ldr	r1, [pc, #300]	; (1ba0 <_spi_m_dma_init+0x150>)
    1a74:	4b4b      	ldr	r3, [pc, #300]	; (1ba4 <_spi_m_dma_init+0x154>)
    1a76:	4798      	blx	r3

	if (regs == NULL) {
    1a78:	2e00      	cmp	r6, #0
    1a7a:	f000 808b 	beq.w	1b94 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1a7e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1a80:	f013 0f01 	tst.w	r3, #1
    1a84:	d11d      	bne.n	1ac2 <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1a86:	6833      	ldr	r3, [r6, #0]
    1a88:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a8c:	69e3      	ldr	r3, [r4, #28]
    1a8e:	f013 0f03 	tst.w	r3, #3
    1a92:	d1fb      	bne.n	1a8c <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1a94:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1a96:	f013 0f02 	tst.w	r3, #2
    1a9a:	d00b      	beq.n	1ab4 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1a9c:	6823      	ldr	r3, [r4, #0]
    1a9e:	f023 0302 	bic.w	r3, r3, #2
    1aa2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aa4:	69e3      	ldr	r3, [r4, #28]
    1aa6:	f013 0f03 	tst.w	r3, #3
    1aaa:	d1fb      	bne.n	1aa4 <_spi_m_dma_init+0x54>
    1aac:	69e3      	ldr	r3, [r4, #28]
    1aae:	f013 0f02 	tst.w	r3, #2
    1ab2:	d1fb      	bne.n	1aac <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1ab4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ab8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aba:	69e3      	ldr	r3, [r4, #28]
    1abc:	f013 0f03 	tst.w	r3, #3
    1ac0:	d1fb      	bne.n	1aba <_spi_m_dma_init+0x6a>
    1ac2:	69e3      	ldr	r3, [r4, #28]
    1ac4:	f013 0f01 	tst.w	r3, #1
    1ac8:	d1fb      	bne.n	1ac2 <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1aca:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1acc:	2c00      	cmp	r4, #0
    1ace:	d04b      	beq.n	1b68 <_spi_m_dma_init+0x118>
    1ad0:	2e00      	cmp	r6, #0
    1ad2:	d047      	beq.n	1b64 <_spi_m_dma_init+0x114>
    1ad4:	2001      	movs	r0, #1
    1ad6:	f640 120a 	movw	r2, #2314	; 0x90a
    1ada:	4931      	ldr	r1, [pc, #196]	; (1ba0 <_spi_m_dma_init+0x150>)
    1adc:	4b31      	ldr	r3, [pc, #196]	; (1ba4 <_spi_m_dma_init+0x154>)
    1ade:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ae0:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1ae2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1ae6:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1aea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aec:	69e3      	ldr	r3, [r4, #28]
    1aee:	f013 0f03 	tst.w	r3, #3
    1af2:	d1fb      	bne.n	1aec <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1af4:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1af6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1afa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1b02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b04:	69e3      	ldr	r3, [r4, #28]
    1b06:	f013 0f17 	tst.w	r3, #23
    1b0a:	d1fb      	bne.n	1b04 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1b0c:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1b0e:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1b10:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1b16:	4620      	mov	r0, r4
    1b18:	4b23      	ldr	r3, [pc, #140]	; (1ba8 <_spi_m_dma_init+0x158>)
    1b1a:	4798      	blx	r3
    1b1c:	bb30      	cbnz	r0, 1b6c <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1b1e:	4620      	mov	r0, r4
    1b20:	4b22      	ldr	r3, [pc, #136]	; (1bac <_spi_m_dma_init+0x15c>)
    1b22:	4798      	blx	r3
    1b24:	4601      	mov	r1, r0
    1b26:	f105 001c 	add.w	r0, r5, #28
    1b2a:	4b21      	ldr	r3, [pc, #132]	; (1bb0 <_spi_m_dma_init+0x160>)
    1b2c:	4798      	blx	r3
	dev->resource->back                 = dev;
    1b2e:	69eb      	ldr	r3, [r5, #28]
    1b30:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1b32:	69eb      	ldr	r3, [r5, #28]
    1b34:	4a1f      	ldr	r2, [pc, #124]	; (1bb4 <_spi_m_dma_init+0x164>)
    1b36:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1b38:	69eb      	ldr	r3, [r5, #28]
    1b3a:	4a1f      	ldr	r2, [pc, #124]	; (1bb8 <_spi_m_dma_init+0x168>)
    1b3c:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1b3e:	69eb      	ldr	r3, [r5, #28]
    1b40:	4a1e      	ldr	r2, [pc, #120]	; (1bbc <_spi_m_dma_init+0x16c>)
    1b42:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1b44:	2000      	movs	r0, #0
    1b46:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1b48:	2805      	cmp	r0, #5
    1b4a:	d002      	beq.n	1b52 <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1b4c:	3301      	adds	r3, #1
    1b4e:	b2db      	uxtb	r3, r3
    1b50:	e785      	b.n	1a5e <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1b52:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1b56:	4b1a      	ldr	r3, [pc, #104]	; (1bc0 <_spi_m_dma_init+0x170>)
    1b58:	441e      	add	r6, r3
    1b5a:	e783      	b.n	1a64 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1b5c:	2000      	movs	r0, #0
    1b5e:	e786      	b.n	1a6e <_spi_m_dma_init+0x1e>
    1b60:	2000      	movs	r0, #0
    1b62:	e784      	b.n	1a6e <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1b64:	2000      	movs	r0, #0
    1b66:	e7b6      	b.n	1ad6 <_spi_m_dma_init+0x86>
    1b68:	2000      	movs	r0, #0
    1b6a:	e7b4      	b.n	1ad6 <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1b6c:	4620      	mov	r0, r4
    1b6e:	4b15      	ldr	r3, [pc, #84]	; (1bc4 <_spi_m_dma_init+0x174>)
    1b70:	4798      	blx	r3
    1b72:	4601      	mov	r1, r0
    1b74:	f105 001c 	add.w	r0, r5, #28
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <_spi_m_dma_init+0x160>)
    1b7a:	4798      	blx	r3
		dev->resource->back                 = dev;
    1b7c:	69eb      	ldr	r3, [r5, #28]
    1b7e:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1b80:	69eb      	ldr	r3, [r5, #28]
    1b82:	4a11      	ldr	r2, [pc, #68]	; (1bc8 <_spi_m_dma_init+0x178>)
    1b84:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1b86:	69eb      	ldr	r3, [r5, #28]
    1b88:	4a0b      	ldr	r2, [pc, #44]	; (1bb8 <_spi_m_dma_init+0x168>)
    1b8a:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1b8c:	69eb      	ldr	r3, [r5, #28]
    1b8e:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <_spi_m_dma_init+0x16c>)
    1b90:	609a      	str	r2, [r3, #8]
    1b92:	e7c4      	b.n	1b1e <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1b94:	f06f 000c 	mvn.w	r0, #12
}
    1b98:	bd70      	pop	{r4, r5, r6, pc}
    1b9a:	bf00      	nop
    1b9c:	000011b1 	.word	0x000011b1
    1ba0:	00006b40 	.word	0x00006b40
    1ba4:	00000cd9 	.word	0x00000cd9
    1ba8:	00001279 	.word	0x00001279
    1bac:	00001261 	.word	0x00001261
    1bb0:	00001051 	.word	0x00001051
    1bb4:	000012cd 	.word	0x000012cd
    1bb8:	000012d9 	.word	0x000012d9
    1bbc:	000012c1 	.word	0x000012c1
    1bc0:	00006b2c 	.word	0x00006b2c
    1bc4:	00001291 	.word	0x00001291
    1bc8:	000012b5 	.word	0x000012b5

00001bcc <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1bcc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1bce:	4604      	mov	r4, r0
    1bd0:	b168      	cbz	r0, 1bee <_spi_m_dma_enable+0x22>
    1bd2:	6803      	ldr	r3, [r0, #0]
    1bd4:	b14b      	cbz	r3, 1bea <_spi_m_dma_enable+0x1e>
    1bd6:	2001      	movs	r0, #1
    1bd8:	f640 42e1 	movw	r2, #3297	; 0xce1
    1bdc:	4905      	ldr	r1, [pc, #20]	; (1bf4 <_spi_m_dma_enable+0x28>)
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <_spi_m_dma_enable+0x2c>)
    1be0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1be2:	6820      	ldr	r0, [r4, #0]
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <_spi_m_dma_enable+0x30>)
    1be6:	4798      	blx	r3
}
    1be8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1bea:	2000      	movs	r0, #0
    1bec:	e7f4      	b.n	1bd8 <_spi_m_dma_enable+0xc>
    1bee:	2000      	movs	r0, #0
    1bf0:	e7f2      	b.n	1bd8 <_spi_m_dma_enable+0xc>
    1bf2:	bf00      	nop
    1bf4:	00006b40 	.word	0x00006b40
    1bf8:	00000cd9 	.word	0x00000cd9
    1bfc:	000011f1 	.word	0x000011f1

00001c00 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	4605      	mov	r5, r0
    1c04:	4614      	mov	r4, r2
	switch (type) {
    1c06:	2903      	cmp	r1, #3
    1c08:	d835      	bhi.n	1c76 <_spi_m_dma_register_callback+0x76>
    1c0a:	e8df f001 	tbb	[pc, r1]
    1c0e:	0d02      	.short	0x0d02
    1c10:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1c12:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1c14:	6800      	ldr	r0, [r0, #0]
    1c16:	4b18      	ldr	r3, [pc, #96]	; (1c78 <_spi_m_dma_register_callback+0x78>)
    1c18:	4798      	blx	r3
    1c1a:	1c22      	adds	r2, r4, #0
    1c1c:	bf18      	it	ne
    1c1e:	2201      	movne	r2, #1
    1c20:	2100      	movs	r1, #0
    1c22:	4b16      	ldr	r3, [pc, #88]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c24:	4798      	blx	r3
		break;
    1c26:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1c28:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1c2a:	6800      	ldr	r0, [r0, #0]
    1c2c:	4b14      	ldr	r3, [pc, #80]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c2e:	4798      	blx	r3
    1c30:	1c22      	adds	r2, r4, #0
    1c32:	bf18      	it	ne
    1c34:	2201      	movne	r2, #1
    1c36:	2100      	movs	r1, #0
    1c38:	4b10      	ldr	r3, [pc, #64]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c3a:	4798      	blx	r3
		break;
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1c3e:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1c40:	6800      	ldr	r0, [r0, #0]
    1c42:	4b0f      	ldr	r3, [pc, #60]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c44:	4798      	blx	r3
    1c46:	3400      	adds	r4, #0
    1c48:	bf18      	it	ne
    1c4a:	2401      	movne	r4, #1
    1c4c:	4622      	mov	r2, r4
    1c4e:	2101      	movs	r1, #1
    1c50:	4e0a      	ldr	r6, [pc, #40]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c52:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1c54:	6828      	ldr	r0, [r5, #0]
    1c56:	4b08      	ldr	r3, [pc, #32]	; (1c78 <_spi_m_dma_register_callback+0x78>)
    1c58:	4798      	blx	r3
    1c5a:	4622      	mov	r2, r4
    1c5c:	2101      	movs	r1, #1
    1c5e:	47b0      	blx	r6
		break;
    1c60:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1c62:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1c64:	6800      	ldr	r0, [r0, #0]
    1c66:	4b06      	ldr	r3, [pc, #24]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c68:	4798      	blx	r3
    1c6a:	1c22      	adds	r2, r4, #0
    1c6c:	bf18      	it	ne
    1c6e:	2201      	movne	r2, #1
    1c70:	2102      	movs	r1, #2
    1c72:	4b02      	ldr	r3, [pc, #8]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c74:	4798      	blx	r3
    1c76:	bd70      	pop	{r4, r5, r6, pc}
    1c78:	00001261 	.word	0x00001261
    1c7c:	00000f05 	.word	0x00000f05
    1c80:	00001291 	.word	0x00001291

00001c84 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c88:	4605      	mov	r5, r0
    1c8a:	4689      	mov	r9, r1
    1c8c:	4690      	mov	r8, r2
    1c8e:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1c90:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1c92:	4620      	mov	r0, r4
    1c94:	4b33      	ldr	r3, [pc, #204]	; (1d64 <_spi_m_dma_transfer+0xe0>)
    1c96:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c98:	2300      	movs	r3, #0
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d03f      	beq.n	1d1e <_spi_m_dma_transfer+0x9a>
	return NULL;
    1c9e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1ca2:	4620      	mov	r0, r4
    1ca4:	4b30      	ldr	r3, [pc, #192]	; (1d68 <_spi_m_dma_transfer+0xe4>)
    1ca6:	4798      	blx	r3
    1ca8:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1caa:	4620      	mov	r0, r4
    1cac:	4b2f      	ldr	r3, [pc, #188]	; (1d6c <_spi_m_dma_transfer+0xe8>)
    1cae:	4798      	blx	r3
    1cb0:	4604      	mov	r4, r0

	if (rxbuf) {
    1cb2:	f1b8 0f00 	cmp.w	r8, #0
    1cb6:	d03c      	beq.n	1d32 <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1cb8:	4628      	mov	r0, r5
    1cba:	4b2d      	ldr	r3, [pc, #180]	; (1d70 <_spi_m_dma_transfer+0xec>)
    1cbc:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1cbe:	6828      	ldr	r0, [r5, #0]
    1cc0:	4b2c      	ldr	r3, [pc, #176]	; (1d74 <_spi_m_dma_transfer+0xf0>)
    1cc2:	4798      	blx	r3
    1cc4:	4601      	mov	r1, r0
    1cc6:	4630      	mov	r0, r6
    1cc8:	4b2b      	ldr	r3, [pc, #172]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1cca:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1ccc:	4641      	mov	r1, r8
    1cce:	4630      	mov	r0, r6
    1cd0:	4b2a      	ldr	r3, [pc, #168]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1cd2:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1cd4:	4639      	mov	r1, r7
    1cd6:	4630      	mov	r0, r6
    1cd8:	4b29      	ldr	r3, [pc, #164]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1cda:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1cdc:	2100      	movs	r1, #0
    1cde:	4630      	mov	r0, r6
    1ce0:	4b28      	ldr	r3, [pc, #160]	; (1d84 <_spi_m_dma_transfer+0x100>)
    1ce2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1ce4:	f1b9 0f00 	cmp.w	r9, #0
    1ce8:	d027      	beq.n	1d3a <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1cea:	4649      	mov	r1, r9
    1cec:	4620      	mov	r0, r4
    1cee:	4b22      	ldr	r3, [pc, #136]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1cf0:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1cf2:	6828      	ldr	r0, [r5, #0]
    1cf4:	4b24      	ldr	r3, [pc, #144]	; (1d88 <_spi_m_dma_transfer+0x104>)
    1cf6:	4798      	blx	r3
    1cf8:	4601      	mov	r1, r0
    1cfa:	4620      	mov	r0, r4
    1cfc:	4b1f      	ldr	r3, [pc, #124]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1cfe:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1d00:	2101      	movs	r1, #1
    1d02:	4620      	mov	r0, r4
    1d04:	4b21      	ldr	r3, [pc, #132]	; (1d8c <_spi_m_dma_transfer+0x108>)
    1d06:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1d08:	4639      	mov	r1, r7
    1d0a:	4620      	mov	r0, r4
    1d0c:	4b1c      	ldr	r3, [pc, #112]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1d0e:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1d10:	2100      	movs	r1, #0
    1d12:	4620      	mov	r0, r4
    1d14:	4b1b      	ldr	r3, [pc, #108]	; (1d84 <_spi_m_dma_transfer+0x100>)
    1d16:	4798      	blx	r3

	return ERR_NONE;
}
    1d18:	2000      	movs	r0, #0
    1d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1d1e:	2805      	cmp	r0, #5
    1d20:	d002      	beq.n	1d28 <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1d22:	3301      	adds	r3, #1
    1d24:	b2db      	uxtb	r3, r3
    1d26:	e7b8      	b.n	1c9a <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1d28:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1d2c:	4b18      	ldr	r3, [pc, #96]	; (1d90 <_spi_m_dma_transfer+0x10c>)
    1d2e:	449a      	add	sl, r3
    1d30:	e7b7      	b.n	1ca2 <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1d32:	4628      	mov	r0, r5
    1d34:	4b17      	ldr	r3, [pc, #92]	; (1d94 <_spi_m_dma_transfer+0x110>)
    1d36:	4798      	blx	r3
    1d38:	e7d4      	b.n	1ce4 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1d3a:	f10a 010e 	add.w	r1, sl, #14
    1d3e:	4620      	mov	r0, r4
    1d40:	4b0d      	ldr	r3, [pc, #52]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1d42:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1d44:	6828      	ldr	r0, [r5, #0]
    1d46:	4b10      	ldr	r3, [pc, #64]	; (1d88 <_spi_m_dma_transfer+0x104>)
    1d48:	4798      	blx	r3
    1d4a:	4601      	mov	r1, r0
    1d4c:	4620      	mov	r0, r4
    1d4e:	4b0b      	ldr	r3, [pc, #44]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1d50:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1d52:	2100      	movs	r1, #0
    1d54:	4620      	mov	r0, r4
    1d56:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <_spi_m_dma_transfer+0x108>)
    1d58:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1d5a:	4639      	mov	r1, r7
    1d5c:	4620      	mov	r0, r4
    1d5e:	4b08      	ldr	r3, [pc, #32]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1d60:	4798      	blx	r3
    1d62:	e7d5      	b.n	1d10 <_spi_m_dma_transfer+0x8c>
    1d64:	000011b1 	.word	0x000011b1
    1d68:	00001291 	.word	0x00001291
    1d6c:	00001261 	.word	0x00001261
    1d70:	00001691 	.word	0x00001691
    1d74:	00001257 	.word	0x00001257
    1d78:	00000f91 	.word	0x00000f91
    1d7c:	00000f81 	.word	0x00000f81
    1d80:	00000fbd 	.word	0x00000fbd
    1d84:	00001015 	.word	0x00001015
    1d88:	0000125b 	.word	0x0000125b
    1d8c:	00000fa1 	.word	0x00000fa1
    1d90:	00006b2c 	.word	0x00006b2c
    1d94:	000016c5 	.word	0x000016c5

00001d98 <TIMER_1_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d98:	4b2f      	ldr	r3, [pc, #188]	; (1e58 <TIMER_1_init+0xc0>)
    1d9a:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tc_is_syncing(TC3, TC_SYNCBUSY_SWRST)) {
    1d9c:	f013 0f01 	tst.w	r3, #1
    1da0:	d120      	bne.n	1de4 <TIMER_1_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1da2:	4b2d      	ldr	r3, [pc, #180]	; (1e58 <TIMER_1_init+0xc0>)
    1da4:	691b      	ldr	r3, [r3, #16]
    1da6:	f013 0f03 	tst.w	r3, #3
    1daa:	d1fa      	bne.n	1da2 <TIMER_1_init+0xa>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1dac:	4b2a      	ldr	r3, [pc, #168]	; (1e58 <TIMER_1_init+0xc0>)
    1dae:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    1db0:	f013 0f02 	tst.w	r3, #2
    1db4:	d00e      	beq.n	1dd4 <TIMER_1_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1db6:	4a28      	ldr	r2, [pc, #160]	; (1e58 <TIMER_1_init+0xc0>)
    1db8:	6813      	ldr	r3, [r2, #0]
    1dba:	f023 0302 	bic.w	r3, r3, #2
    1dbe:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dc0:	4b25      	ldr	r3, [pc, #148]	; (1e58 <TIMER_1_init+0xc0>)
    1dc2:	691b      	ldr	r3, [r3, #16]
    1dc4:	f013 0f03 	tst.w	r3, #3
    1dc8:	d1fa      	bne.n	1dc0 <TIMER_1_init+0x28>
    1dca:	4b23      	ldr	r3, [pc, #140]	; (1e58 <TIMER_1_init+0xc0>)
    1dcc:	691b      	ldr	r3, [r3, #16]
    1dce:	f013 0f02 	tst.w	r3, #2
    1dd2:	d1fa      	bne.n	1dca <TIMER_1_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dd4:	2201      	movs	r2, #1
    1dd6:	4b20      	ldr	r3, [pc, #128]	; (1e58 <TIMER_1_init+0xc0>)
    1dd8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dda:	4b1f      	ldr	r3, [pc, #124]	; (1e58 <TIMER_1_init+0xc0>)
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	f013 0f03 	tst.w	r3, #3
    1de2:	d1fa      	bne.n	1dda <TIMER_1_init+0x42>
    1de4:	4b1c      	ldr	r3, [pc, #112]	; (1e58 <TIMER_1_init+0xc0>)
    1de6:	691b      	ldr	r3, [r3, #16]
    1de8:	f013 0f01 	tst.w	r3, #1
    1dec:	d1fa      	bne.n	1de4 <TIMER_1_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1df2:	4b19      	ldr	r3, [pc, #100]	; (1e58 <TIMER_1_init+0xc0>)
    1df4:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1df6:	4b18      	ldr	r3, [pc, #96]	; (1e58 <TIMER_1_init+0xc0>)
    1df8:	691b      	ldr	r3, [r3, #16]
    1dfa:	f013 0f03 	tst.w	r3, #3
    1dfe:	d1fa      	bne.n	1df6 <TIMER_1_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1e00:	4b15      	ldr	r3, [pc, #84]	; (1e58 <TIMER_1_init+0xc0>)
    1e02:	2200      	movs	r2, #0
    1e04:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1e06:	22ff      	movs	r2, #255	; 0xff
    1e08:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e0a:	2201      	movs	r2, #1
    1e0c:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e0e:	f643 5208 	movw	r2, #15624	; 0x3d08
    1e12:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e14:	4b10      	ldr	r3, [pc, #64]	; (1e58 <TIMER_1_init+0xc0>)
    1e16:	691b      	ldr	r3, [r3, #16]
    1e18:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e1c:	d1fa      	bne.n	1e14 <TIMER_1_init+0x7c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e1e:	f641 0269 	movw	r2, #6249	; 0x1869
    1e22:	4b0d      	ldr	r3, [pc, #52]	; (1e58 <TIMER_1_init+0xc0>)
    1e24:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e26:	4b0c      	ldr	r3, [pc, #48]	; (1e58 <TIMER_1_init+0xc0>)
    1e28:	691b      	ldr	r3, [r3, #16]
    1e2a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e2e:	d1fa      	bne.n	1e26 <TIMER_1_init+0x8e>
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1e30:	4b09      	ldr	r3, [pc, #36]	; (1e58 <TIMER_1_init+0xc0>)
    1e32:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e36:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1e38:	2221      	movs	r2, #33	; 0x21
    1e3a:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1e3c:	22de      	movs	r2, #222	; 0xde
    1e3e:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e40:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1e42:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1e46:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <TIMER_1_init+0xc0>)
    1e4a:	691b      	ldr	r3, [r3, #16]
    1e4c:	f013 0f03 	tst.w	r3, #3
    1e50:	d1fa      	bne.n	1e48 <TIMER_1_init+0xb0>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e52:	2000      	movs	r0, #0
    1e54:	4770      	bx	lr
    1e56:	bf00      	nop
    1e58:	4101c000 	.word	0x4101c000

00001e5c <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1e5c:	4b29      	ldr	r3, [pc, #164]	; (1f04 <TIMER_0_init+0xa8>)
    1e5e:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    1e60:	f013 0f01 	tst.w	r3, #1
    1e64:	d120      	bne.n	1ea8 <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e66:	4b27      	ldr	r3, [pc, #156]	; (1f04 <TIMER_0_init+0xa8>)
    1e68:	691b      	ldr	r3, [r3, #16]
    1e6a:	f013 0f03 	tst.w	r3, #3
    1e6e:	d1fa      	bne.n	1e66 <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e70:	4b24      	ldr	r3, [pc, #144]	; (1f04 <TIMER_0_init+0xa8>)
    1e72:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    1e74:	f013 0f02 	tst.w	r3, #2
    1e78:	d00e      	beq.n	1e98 <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1e7a:	4a22      	ldr	r2, [pc, #136]	; (1f04 <TIMER_0_init+0xa8>)
    1e7c:	6813      	ldr	r3, [r2, #0]
    1e7e:	f023 0302 	bic.w	r3, r3, #2
    1e82:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e84:	4b1f      	ldr	r3, [pc, #124]	; (1f04 <TIMER_0_init+0xa8>)
    1e86:	691b      	ldr	r3, [r3, #16]
    1e88:	f013 0f03 	tst.w	r3, #3
    1e8c:	d1fa      	bne.n	1e84 <TIMER_0_init+0x28>
    1e8e:	4b1d      	ldr	r3, [pc, #116]	; (1f04 <TIMER_0_init+0xa8>)
    1e90:	691b      	ldr	r3, [r3, #16]
    1e92:	f013 0f02 	tst.w	r3, #2
    1e96:	d1fa      	bne.n	1e8e <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e98:	2201      	movs	r2, #1
    1e9a:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <TIMER_0_init+0xa8>)
    1e9c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e9e:	4b19      	ldr	r3, [pc, #100]	; (1f04 <TIMER_0_init+0xa8>)
    1ea0:	691b      	ldr	r3, [r3, #16]
    1ea2:	f013 0f03 	tst.w	r3, #3
    1ea6:	d1fa      	bne.n	1e9e <TIMER_0_init+0x42>
    1ea8:	4b16      	ldr	r3, [pc, #88]	; (1f04 <TIMER_0_init+0xa8>)
    1eaa:	691b      	ldr	r3, [r3, #16]
    1eac:	f013 0f01 	tst.w	r3, #1
    1eb0:	d1fa      	bne.n	1ea8 <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1eb6:	4b13      	ldr	r3, [pc, #76]	; (1f04 <TIMER_0_init+0xa8>)
    1eb8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <TIMER_0_init+0xa8>)
    1ebc:	691b      	ldr	r3, [r3, #16]
    1ebe:	f013 0f03 	tst.w	r3, #3
    1ec2:	d1fa      	bne.n	1eba <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1ec4:	4b0f      	ldr	r3, [pc, #60]	; (1f04 <TIMER_0_init+0xa8>)
    1ec6:	2200      	movs	r2, #0
    1ec8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1eca:	22ff      	movs	r2, #255	; 0xff
    1ecc:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1ece:	2201      	movs	r2, #1
    1ed0:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1ed2:	f641 0269 	movw	r2, #6249	; 0x1869
    1ed6:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ed8:	4b0a      	ldr	r3, [pc, #40]	; (1f04 <TIMER_0_init+0xa8>)
    1eda:	691b      	ldr	r3, [r3, #16]
    1edc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ee0:	d1fa      	bne.n	1ed8 <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1ee2:	4b08      	ldr	r3, [pc, #32]	; (1f04 <TIMER_0_init+0xa8>)
    1ee4:	2201      	movs	r2, #1
    1ee6:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1ee8:	22fe      	movs	r2, #254	; 0xfe
    1eea:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1eec:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1eee:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1ef2:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <TIMER_0_init+0xa8>)
    1ef6:	691b      	ldr	r3, [r3, #16]
    1ef8:	f013 0f03 	tst.w	r3, #3
    1efc:	d1fa      	bne.n	1ef4 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1efe:	2000      	movs	r0, #0
    1f00:	4770      	bx	lr
    1f02:	bf00      	nop
    1f04:	43001800 	.word	0x43001800

00001f08 <SensorRowUpdate>:
volatile BLDC_ECAT_OUT*  BLDC_OUT =&ram_buffer[ram_wr_start];
volatile BLDC_ECAT_IN*  BLDC_IN =&ram_buffer[ram_rd_start];


void SensorRowUpdate(struct sensor_array *sensor_array_use, uint8_t row_select, uint8_t output_mode_select) // rewrite to accept struct of any sensor array + update any row in array!!!!!
{
    1f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f0c:	4604      	mov	r4, r0
    1f0e:	460d      	mov	r5, r1
    1f10:	4616      	mov	r6, r2
	switch(row_select){
    1f12:	2902      	cmp	r1, #2
    1f14:	f000 8085 	beq.w	2022 <SensorRowUpdate+0x11a>
    1f18:	2903      	cmp	r1, #3
    1f1a:	f000 8101 	beq.w	2120 <SensorRowUpdate+0x218>
    1f1e:	2901      	cmp	r1, #1
    1f20:	d001      	beq.n	1f26 <SensorRowUpdate+0x1e>
    1f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		case 1: ;
			
			update_struct_values(&(sensor_array_use->sensorRow_Values_Left), &(sensor_array_use->sensor7), &(sensor_array_use->sensor4), &(sensor_array_use->sensor1));
    1f26:	f500 7746 	add.w	r7, r0, #792	; 0x318
    1f2a:	4603      	mov	r3, r0
    1f2c:	f500 7284 	add.w	r2, r0, #264	; 0x108
    1f30:	f500 7104 	add.w	r1, r0, #528	; 0x210
    1f34:	4638      	mov	r0, r7
    1f36:	f8df 8300 	ldr.w	r8, [pc, #768]	; 2238 <SensorRowUpdate+0x330>
    1f3a:	47c0      	blx	r8
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Left));
    1f3c:	4639      	mov	r1, r7
    1f3e:	4628      	mov	r0, r5
    1f40:	4bb9      	ldr	r3, [pc, #740]	; (2228 <SensorRowUpdate+0x320>)
    1f42:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Left), &(sensor_array_use->neuron_pair_1_top), &(sensor_array_use->neuron_pair_1_middle), &(sensor_array_use->neuron_pair_1_bottom));
    1f44:	f504 6887 	add.w	r8, r4, #1080	; 0x438
    1f48:	f504 699a 	add.w	r9, r4, #1232	; 0x4d0
    1f4c:	f504 6aad 	add.w	sl, r4, #1384	; 0x568
    1f50:	4653      	mov	r3, sl
    1f52:	464a      	mov	r2, r9
    1f54:	4641      	mov	r1, r8
    1f56:	4638      	mov	r0, r7
    1f58:	4fb4      	ldr	r7, [pc, #720]	; (222c <SensorRowUpdate+0x324>)
    1f5a:	47b8      	blx	r7
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Left), &(sensor_array_use->neuron_pair_1_top), &(sensor_array_use->neuron_pair_1_middle), &(sensor_array_use->neuron_pair_1_bottom));
    1f5c:	4653      	mov	r3, sl
    1f5e:	464a      	mov	r2, r9
    1f60:	4641      	mov	r1, r8
    1f62:	f504 6019 	add.w	r0, r4, #2448	; 0x990
    1f66:	4fb2      	ldr	r7, [pc, #712]	; (2230 <SensorRowUpdate+0x328>)
    1f68:	47b8      	blx	r7
			
			BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Left.b_x_top; //data7,8,9
    1f6a:	4bb2      	ldr	r3, [pc, #712]	; (2234 <SensorRowUpdate+0x32c>)
    1f6c:	681a      	ldr	r2, [r3, #0]
    1f6e:	f8d4 1318 	ldr.w	r1, [r4, #792]	; 0x318
    1f72:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Left.b_y_top;
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
    1f7a:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Left.b_z_top;
    1f7c:	f8d4 2330 	ldr.w	r2, [r4, #816]	; 0x330
    1f80:	609a      	str	r2, [r3, #8]
				
			BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Left.b_x_middle; //data4,5,6
    1f82:	f8d4 231c 	ldr.w	r2, [r4, #796]	; 0x31c
    1f86:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Left.b_y_middle;
    1f88:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
    1f8c:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Left.b_z_middle;
    1f8e:	f8d4 2334 	ldr.w	r2, [r4, #820]	; 0x334
    1f92:	61da      	str	r2, [r3, #28]

				
			BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Left.b_x_bottom; //data1,2,3
    1f94:	f8d4 2320 	ldr.w	r2, [r4, #800]	; 0x320
    1f98:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Left.b_y_bottom;
    1f9a:	f8d4 232c 	ldr.w	r2, [r4, #812]	; 0x32c
    1f9e:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Left.b_z_bottom;
    1fa0:	f8d4 2338 	ldr.w	r2, [r4, #824]	; 0x338
    1fa4:	635a      	str	r2, [r3, #52]	; 0x34
	
			
			switch(output_mode_select){
    1fa6:	2e01      	cmp	r6, #1
    1fa8:	d00f      	beq.n	1fca <SensorRowUpdate+0xc2>
    1faa:	2e02      	cmp	r6, #2
    1fac:	d020      	beq.n	1ff0 <SensorRowUpdate+0xe8>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Left.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Left.neuron_bottom_shear;
				break;
			}
			
			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3); 
    1fae:	f894 29d8 	ldrb.w	r2, [r4, #2520]	; 0x9d8
    1fb2:	3a01      	subs	r2, #1
    1fb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1fb8:	442a      	add	r2, r5
    1fba:	ee07 2a90 	vmov	s15, r2
    1fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1fc2:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
    1fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Left.force_z_top;
    1fca:	f8d4 2360 	ldr.w	r2, [r4, #864]	; 0x360
    1fce:	60da      	str	r2, [r3, #12]
					BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Left.force_r_top;
    1fd0:	f8d4 236c 	ldr.w	r2, [r4, #876]	; 0x36c
    1fd4:	611a      	str	r2, [r3, #16]
					BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Left.force_z_middle;
    1fd6:	f8d4 2364 	ldr.w	r2, [r4, #868]	; 0x364
    1fda:	625a      	str	r2, [r3, #36]	; 0x24
					BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Left.force_r_middle;
    1fdc:	f8d4 2370 	ldr.w	r2, [r4, #880]	; 0x370
    1fe0:	629a      	str	r2, [r3, #40]	; 0x28
					BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Left.force_z_bottom;
    1fe2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    1fe6:	639a      	str	r2, [r3, #56]	; 0x38
					BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Left.force_r_bottom;
    1fe8:	f8d4 2374 	ldr.w	r2, [r4, #884]	; 0x374
    1fec:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fee:	e7de      	b.n	1fae <SensorRowUpdate+0xa6>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Left.neuron_top_normal;
    1ff0:	f504 6219 	add.w	r2, r4, #2448	; 0x990
    1ff4:	6812      	ldr	r2, [r2, #0]
    1ff6:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Left.neuron_top_shear;
    1ff8:	f604 1294 	addw	r2, r4, #2452	; 0x994
    1ffc:	6812      	ldr	r2, [r2, #0]
    1ffe:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Left.neuron_middle_normal;
    2000:	f604 1298 	addw	r2, r4, #2456	; 0x998
    2004:	6812      	ldr	r2, [r2, #0]
    2006:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Left.neuron_middle_shear;
    2008:	f604 129c 	addw	r2, r4, #2460	; 0x99c
    200c:	6812      	ldr	r2, [r2, #0]
    200e:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Left.neuron_bottom_normal;
    2010:	f504 621a 	add.w	r2, r4, #2464	; 0x9a0
    2014:	6812      	ldr	r2, [r2, #0]
    2016:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Left.neuron_bottom_shear;
    2018:	f604 12a4 	addw	r2, r4, #2468	; 0x9a4
    201c:	6812      	ldr	r2, [r2, #0]
    201e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    2020:	e7c5      	b.n	1fae <SensorRowUpdate+0xa6>
		
		case 2: ;
			update_struct_values(&(sensor_array_use->sensorRow_Values_Middle), &(sensor_array_use->sensor8), &(sensor_array_use->sensor5), &(sensor_array_use->sensor2));
    2022:	f500 775e 	add.w	r7, r0, #888	; 0x378
    2026:	f100 0358 	add.w	r3, r0, #88	; 0x58
    202a:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    202e:	f500 711a 	add.w	r1, r0, #616	; 0x268
    2032:	4638      	mov	r0, r7
    2034:	f8df 8200 	ldr.w	r8, [pc, #512]	; 2238 <SensorRowUpdate+0x330>
    2038:	47c0      	blx	r8
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Middle));
    203a:	4639      	mov	r1, r7
    203c:	4628      	mov	r0, r5
    203e:	4b7a      	ldr	r3, [pc, #488]	; (2228 <SensorRowUpdate+0x320>)
    2040:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Middle), &(sensor_array_use->neuron_pair_2_top), &(sensor_array_use->neuron_pair_2_middle), &(sensor_array_use->neuron_pair_2_bottom));
    2042:	f504 68c0 	add.w	r8, r4, #1536	; 0x600
    2046:	f504 69d3 	add.w	r9, r4, #1688	; 0x698
    204a:	f504 6ae6 	add.w	sl, r4, #1840	; 0x730
    204e:	4653      	mov	r3, sl
    2050:	464a      	mov	r2, r9
    2052:	4641      	mov	r1, r8
    2054:	4638      	mov	r0, r7
    2056:	4f75      	ldr	r7, [pc, #468]	; (222c <SensorRowUpdate+0x324>)
    2058:	47b8      	blx	r7
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Middle), &(sensor_array_use->neuron_pair_2_top), &(sensor_array_use->neuron_pair_2_middle), &(sensor_array_use->neuron_pair_2_bottom));
    205a:	4653      	mov	r3, sl
    205c:	464a      	mov	r2, r9
    205e:	4641      	mov	r1, r8
    2060:	f604 10a8 	addw	r0, r4, #2472	; 0x9a8
    2064:	4f72      	ldr	r7, [pc, #456]	; (2230 <SensorRowUpdate+0x328>)
    2066:	47b8      	blx	r7
			
			BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Middle.b_x_top; //data7,8,9
    2068:	4b72      	ldr	r3, [pc, #456]	; (2234 <SensorRowUpdate+0x32c>)
    206a:	681a      	ldr	r2, [r3, #0]
    206c:	f8d4 1378 	ldr.w	r1, [r4, #888]	; 0x378
    2070:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Middle.b_y_top;
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	f8d4 2384 	ldr.w	r2, [r4, #900]	; 0x384
    2078:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Middle.b_z_top;
    207a:	f8d4 2390 	ldr.w	r2, [r4, #912]	; 0x390
    207e:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Middle.b_x_middle; //data4,5,6
    2080:	f8d4 237c 	ldr.w	r2, [r4, #892]	; 0x37c
    2084:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Middle.b_y_middle;
    2086:	f8d4 2388 	ldr.w	r2, [r4, #904]	; 0x388
    208a:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Middle.b_z_middle;
    208c:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
    2090:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Middle.b_x_bottom; //data1,2,3
    2092:	f8d4 2380 	ldr.w	r2, [r4, #896]	; 0x380
    2096:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Middle.b_y_bottom;
    2098:	f8d4 238c 	ldr.w	r2, [r4, #908]	; 0x38c
    209c:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Middle.b_z_bottom;
    209e:	f8d4 2398 	ldr.w	r2, [r4, #920]	; 0x398
    20a2:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    20a4:	2e01      	cmp	r6, #1
    20a6:	d00f      	beq.n	20c8 <SensorRowUpdate+0x1c0>
    20a8:	2e02      	cmp	r6, #2
    20aa:	d020      	beq.n	20ee <SensorRowUpdate+0x1e6>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_shear;
				break;
			}
		
			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3);
    20ac:	f894 29d8 	ldrb.w	r2, [r4, #2520]	; 0x9d8
    20b0:	3a01      	subs	r2, #1
    20b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    20b6:	442a      	add	r2, r5
    20b8:	ee07 2a90 	vmov	s15, r2
    20bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    20c0:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
    20c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Middle.force_z_top;
    20c8:	f8d4 23c0 	ldr.w	r2, [r4, #960]	; 0x3c0
    20cc:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Middle.force_r_top;
    20ce:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
    20d2:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Middle.force_z_middle;
    20d4:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
    20d8:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Middle.force_r_middle;
    20da:	f8d4 23d0 	ldr.w	r2, [r4, #976]	; 0x3d0
    20de:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Middle.force_z_bottom;
    20e0:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
    20e4:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Middle.force_r_bottom;
    20e6:	f8d4 23d4 	ldr.w	r2, [r4, #980]	; 0x3d4
    20ea:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    20ec:	e7de      	b.n	20ac <SensorRowUpdate+0x1a4>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Middle.neuron_top_normal;
    20ee:	f604 12a8 	addw	r2, r4, #2472	; 0x9a8
    20f2:	6812      	ldr	r2, [r2, #0]
    20f4:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Middle.neuron_top_shear;
    20f6:	f604 12ac 	addw	r2, r4, #2476	; 0x9ac
    20fa:	6812      	ldr	r2, [r2, #0]
    20fc:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Middle.neuron_middle_normal;
    20fe:	f504 621b 	add.w	r2, r4, #2480	; 0x9b0
    2102:	6812      	ldr	r2, [r2, #0]
    2104:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Middle.neuron_middle_shear;
    2106:	f604 12b4 	addw	r2, r4, #2484	; 0x9b4
    210a:	6812      	ldr	r2, [r2, #0]
    210c:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_normal;
    210e:	f604 12b8 	addw	r2, r4, #2488	; 0x9b8
    2112:	6812      	ldr	r2, [r2, #0]
    2114:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_shear;
    2116:	f604 12bc 	addw	r2, r4, #2492	; 0x9bc
    211a:	6812      	ldr	r2, [r2, #0]
    211c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    211e:	e7c5      	b.n	20ac <SensorRowUpdate+0x1a4>
			
		case 3: ;
			update_struct_values(&(sensor_array_use->sensorRow_Values_Right), &(sensor_array_use->sensor9), &(sensor_array_use->sensor6), &(sensor_array_use->sensor3));
    2120:	f500 7776 	add.w	r7, r0, #984	; 0x3d8
    2124:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    2128:	f500 72dc 	add.w	r2, r0, #440	; 0x1b8
    212c:	f500 7130 	add.w	r1, r0, #704	; 0x2c0
    2130:	4638      	mov	r0, r7
    2132:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2238 <SensorRowUpdate+0x330>
    2136:	47c0      	blx	r8
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Right));
    2138:	4639      	mov	r1, r7
    213a:	4628      	mov	r0, r5
    213c:	4b3a      	ldr	r3, [pc, #232]	; (2228 <SensorRowUpdate+0x320>)
    213e:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Right), &(sensor_array_use->neuron_pair_3_top), &(sensor_array_use->neuron_pair_3_middle), &(sensor_array_use->neuron_pair_3_bottom));
    2140:	f504 68f9 	add.w	r8, r4, #1992	; 0x7c8
    2144:	f504 6906 	add.w	r9, r4, #2144	; 0x860
    2148:	f604 0af8 	addw	sl, r4, #2296	; 0x8f8
    214c:	4653      	mov	r3, sl
    214e:	464a      	mov	r2, r9
    2150:	4641      	mov	r1, r8
    2152:	4638      	mov	r0, r7
    2154:	4f35      	ldr	r7, [pc, #212]	; (222c <SensorRowUpdate+0x324>)
    2156:	47b8      	blx	r7
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Right), &(sensor_array_use->neuron_pair_3_top), &(sensor_array_use->neuron_pair_3_middle), &(sensor_array_use->neuron_pair_3_bottom));
    2158:	4653      	mov	r3, sl
    215a:	464a      	mov	r2, r9
    215c:	4641      	mov	r1, r8
    215e:	f504 601c 	add.w	r0, r4, #2496	; 0x9c0
    2162:	4f33      	ldr	r7, [pc, #204]	; (2230 <SensorRowUpdate+0x328>)
    2164:	47b8      	blx	r7
			
			BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Right.b_x_top; //data7,8,9
    2166:	4b33      	ldr	r3, [pc, #204]	; (2234 <SensorRowUpdate+0x32c>)
    2168:	681a      	ldr	r2, [r3, #0]
    216a:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
    216e:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Right.b_y_top;
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	f8d4 23e4 	ldr.w	r2, [r4, #996]	; 0x3e4
    2176:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Right.b_z_top;
    2178:	f8d4 23f0 	ldr.w	r2, [r4, #1008]	; 0x3f0
    217c:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Right.b_x_middle; //data4,5,6
    217e:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    2182:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Right.b_y_middle;
    2184:	f8d4 23e8 	ldr.w	r2, [r4, #1000]	; 0x3e8
    2188:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Right.b_z_middle;
    218a:	f8d4 23f4 	ldr.w	r2, [r4, #1012]	; 0x3f4
    218e:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Right.b_x_bottom; //data1,2,3
    2190:	f8d4 23e0 	ldr.w	r2, [r4, #992]	; 0x3e0
    2194:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Right.b_y_bottom;
    2196:	f8d4 23ec 	ldr.w	r2, [r4, #1004]	; 0x3ec
    219a:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Right.b_z_bottom;
    219c:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
    21a0:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    21a2:	2e01      	cmp	r6, #1
    21a4:	d00e      	beq.n	21c4 <SensorRowUpdate+0x2bc>
    21a6:	2e02      	cmp	r6, #2
    21a8:	d025      	beq.n	21f6 <SensorRowUpdate+0x2ee>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Right.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Right.neuron_bottom_shear;
				break;
			}

			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3); 
    21aa:	f894 29d8 	ldrb.w	r2, [r4, #2520]	; 0x9d8
    21ae:	3a01      	subs	r2, #1
    21b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    21b4:	4415      	add	r5, r2
    21b6:	ee07 5a90 	vmov	s15, r5
    21ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    21be:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
		}
};
    21c2:	e6ae      	b.n	1f22 <SensorRowUpdate+0x1a>
				BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Right.force_z_top;
    21c4:	f504 6284 	add.w	r2, r4, #1056	; 0x420
    21c8:	6812      	ldr	r2, [r2, #0]
    21ca:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Right.force_r_top;
    21cc:	f204 422c 	addw	r2, r4, #1068	; 0x42c
    21d0:	6812      	ldr	r2, [r2, #0]
    21d2:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Right.force_z_middle;
    21d4:	f204 4224 	addw	r2, r4, #1060	; 0x424
    21d8:	6812      	ldr	r2, [r2, #0]
    21da:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Right.force_r_middle;
    21dc:	f504 6286 	add.w	r2, r4, #1072	; 0x430
    21e0:	6812      	ldr	r2, [r2, #0]
    21e2:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Right.force_z_bottom;
    21e4:	f504 6285 	add.w	r2, r4, #1064	; 0x428
    21e8:	6812      	ldr	r2, [r2, #0]
    21ea:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Right.force_r_bottom;
    21ec:	f204 4234 	addw	r2, r4, #1076	; 0x434
    21f0:	6812      	ldr	r2, [r2, #0]
    21f2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    21f4:	e7d9      	b.n	21aa <SensorRowUpdate+0x2a2>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Right.neuron_top_normal;
    21f6:	f504 621c 	add.w	r2, r4, #2496	; 0x9c0
    21fa:	6812      	ldr	r2, [r2, #0]
    21fc:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Right.neuron_top_shear;
    21fe:	f604 12c4 	addw	r2, r4, #2500	; 0x9c4
    2202:	6812      	ldr	r2, [r2, #0]
    2204:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Right.neuron_middle_normal;
    2206:	f604 12c8 	addw	r2, r4, #2504	; 0x9c8
    220a:	6812      	ldr	r2, [r2, #0]
    220c:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Right.neuron_middle_shear;
    220e:	f604 12cc 	addw	r2, r4, #2508	; 0x9cc
    2212:	6812      	ldr	r2, [r2, #0]
    2214:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Right.neuron_bottom_normal;
    2216:	f504 621d 	add.w	r2, r4, #2512	; 0x9d0
    221a:	6812      	ldr	r2, [r2, #0]
    221c:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Right.neuron_bottom_shear;
    221e:	f604 12d4 	addw	r2, r4, #2516	; 0x9d4
    2222:	6812      	ldr	r2, [r2, #0]
    2224:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    2226:	e7c0      	b.n	21aa <SensorRowUpdate+0x2a2>
    2228:	00003551 	.word	0x00003551
    222c:	00005c81 	.word	0x00005c81
    2230:	00005d39 	.word	0x00005d39
    2234:	20000074 	.word	0x20000074
    2238:	000034a9 	.word	0x000034a9

0000223c <main>:


int main(void)
{
    223c:	b580      	push	{r7, lr}
    223e:	b088      	sub	sp, #32
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2240:	4ba3      	ldr	r3, [pc, #652]	; (24d0 <main+0x294>)
    2242:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    2244:	4ba3      	ldr	r3, [pc, #652]	; (24d4 <main+0x298>)
    2246:	4798      	blx	r3
	
	//Initialize I2C communication
	
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    2248:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 253c <main+0x300>
    224c:	4ea2      	ldr	r6, [pc, #648]	; (24d8 <main+0x29c>)
    224e:	4641      	mov	r1, r8
    2250:	4630      	mov	r0, r6
    2252:	4fa2      	ldr	r7, [pc, #648]	; (24dc <main+0x2a0>)
    2254:	47b8      	blx	r7
	i2c_m_sync_enable(&I2C_0);
    2256:	4630      	mov	r0, r6
    2258:	4ca1      	ldr	r4, [pc, #644]	; (24e0 <main+0x2a4>)
    225a:	47a0      	blx	r4
	
	
	i2c_m_sync_get_io_descriptor(&I2C_1, &bmx_io_2);
    225c:	4da1      	ldr	r5, [pc, #644]	; (24e4 <main+0x2a8>)
    225e:	49a2      	ldr	r1, [pc, #648]	; (24e8 <main+0x2ac>)
    2260:	4628      	mov	r0, r5
    2262:	47b8      	blx	r7
	i2c_m_sync_enable(&I2C_1);
    2264:	4628      	mov	r0, r5
    2266:	47a0      	blx	r4
    2268:	2240      	movs	r2, #64	; 0x40
    226a:	4ba0      	ldr	r3, [pc, #640]	; (24ec <main+0x2b0>)
    226c:	615a      	str	r2, [r3, #20]
	
	//Reset TRG Pin
	gpio_set_pin_level(TRG,false);

	//Initialize Readout Variables
	new_data = false;
    226e:	2300      	movs	r3, #0
    2270:	4a9f      	ldr	r2, [pc, #636]	; (24f0 <main+0x2b4>)
    2272:	7013      	strb	r3, [r2, #0]
	triggered = false;
    2274:	4a9f      	ldr	r2, [pc, #636]	; (24f4 <main+0x2b8>)
    2276:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    2278:	4a9f      	ldr	r2, [pc, #636]	; (24f8 <main+0x2bc>)
    227a:	7013      	strb	r3, [r2, #0]
	data_sent = false;
    227c:	4a9f      	ldr	r2, [pc, #636]	; (24fc <main+0x2c0>)
    227e:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&(sensor_array_1.sensor9));
    2280:	4d9f      	ldr	r5, [pc, #636]	; (2500 <main+0x2c4>)
    2282:	4628      	mov	r0, r5
    2284:	4b9f      	ldr	r3, [pc, #636]	; (2504 <main+0x2c8>)
    2286:	4798      	blx	r3
    2288:	4b9f      	ldr	r3, [pc, #636]	; (2508 <main+0x2cc>)
    228a:	8018      	strh	r0, [r3, #0]
	selected_row = 1; //1 = left, 2 = middle, 3 = right
    228c:	2301      	movs	r3, #1
    228e:	4a9f      	ldr	r2, [pc, #636]	; (250c <main+0x2d0>)
    2290:	7013      	strb	r3, [r2, #0]
	selected_array = 1; 
    2292:	4a9f      	ldr	r2, [pc, #636]	; (2510 <main+0x2d4>)
    2294:	7013      	strb	r3, [r2, #0]
	
	// User Input
	selected_output_mode = 1; //1 = Force, 2 = Neural Spikes
    2296:	4a9f      	ldr	r2, [pc, #636]	; (2514 <main+0x2d8>)
    2298:	7013      	strb	r3, [r2, #0]
	number_of_arrays = 2; // how many arrays you want to read out at the same time - implementation necessairy!
    229a:	4f9f      	ldr	r7, [pc, #636]	; (2518 <main+0x2dc>)
    229c:	2202      	movs	r2, #2
    229e:	703a      	strb	r2, [r7, #0]
	
	
	// Initialize Sensor Array
	
	sensor_array_1.array_number = 1;
    22a0:	f5a5 7430 	sub.w	r4, r5, #704	; 0x2c0
    22a4:	f884 39d8 	strb.w	r3, [r4, #2520]	; 0x9d8
	SensorArray_Init(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
    22a8:	f8d8 3000 	ldr.w	r3, [r8]
    22ac:	9306      	str	r3, [sp, #24]
    22ae:	9605      	str	r6, [sp, #20]
    22b0:	9504      	str	r5, [sp, #16]
    22b2:	f504 731a 	add.w	r3, r4, #616	; 0x268
    22b6:	9303      	str	r3, [sp, #12]
    22b8:	f504 7304 	add.w	r3, r4, #528	; 0x210
    22bc:	9302      	str	r3, [sp, #8]
    22be:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
    22c2:	9301      	str	r3, [sp, #4]
    22c4:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    22c8:	9300      	str	r3, [sp, #0]
    22ca:	f504 7384 	add.w	r3, r4, #264	; 0x108
    22ce:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    22d2:	f104 0158 	add.w	r1, r4, #88	; 0x58
    22d6:	4620      	mov	r0, r4
    22d8:	4d90      	ldr	r5, [pc, #576]	; (251c <main+0x2e0>)
    22da:	47a8      	blx	r5
					 &(sensor_array_1.sensor4),&(sensor_array_1.sensor5),&(sensor_array_1.sensor6),
					 &(sensor_array_1.sensor7),&(sensor_array_1.sensor8),&(sensor_array_1.sensor9), &I2C_0, bmx_io);
	neuron_init_array(&(sensor_array_1.neuron_pair_1_top), &(sensor_array_1.neuron_pair_1_middle), &(sensor_array_1.neuron_pair_1_bottom),
    22dc:	f604 03f8 	addw	r3, r4, #2296	; 0x8f8
    22e0:	9304      	str	r3, [sp, #16]
    22e2:	f504 6306 	add.w	r3, r4, #2144	; 0x860
    22e6:	9303      	str	r3, [sp, #12]
    22e8:	f504 63f9 	add.w	r3, r4, #1992	; 0x7c8
    22ec:	9302      	str	r3, [sp, #8]
    22ee:	f504 63e6 	add.w	r3, r4, #1840	; 0x730
    22f2:	9301      	str	r3, [sp, #4]
    22f4:	f504 63d3 	add.w	r3, r4, #1688	; 0x698
    22f8:	9300      	str	r3, [sp, #0]
    22fa:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
    22fe:	f504 62ad 	add.w	r2, r4, #1384	; 0x568
    2302:	f504 619a 	add.w	r1, r4, #1232	; 0x4d0
    2306:	f504 6087 	add.w	r0, r4, #1080	; 0x438
    230a:	4c85      	ldr	r4, [pc, #532]	; (2520 <main+0x2e4>)
    230c:	47a0      	blx	r4
					  &(sensor_array_1.neuron_pair_2_top), &(sensor_array_1.neuron_pair_2_middle), &(sensor_array_1.neuron_pair_2_bottom), 
					  &(sensor_array_1.neuron_pair_3_top), &(sensor_array_1.neuron_pair_3_middle), &(sensor_array_1.neuron_pair_3_bottom));
	delay_ms(10);
    230e:	200a      	movs	r0, #10
    2310:	4b84      	ldr	r3, [pc, #528]	; (2524 <main+0x2e8>)
    2312:	4798      	blx	r3
	
	if (number_of_arrays == 2)
    2314:	783b      	ldrb	r3, [r7, #0]
    2316:	2b02      	cmp	r3, #2
    2318:	d050      	beq.n	23bc <main+0x180>
						 &(sensor_array_2.sensor7),&(sensor_array_2.sensor8),&(sensor_array_2.sensor9), &I2C_1, bmx_io_2);
		neuron_init_array(&(sensor_array_2.neuron_pair_1_top), &(sensor_array_2.neuron_pair_1_middle), &(sensor_array_2.neuron_pair_1_bottom),
						  &(sensor_array_2.neuron_pair_2_top), &(sensor_array_2.neuron_pair_2_middle), &(sensor_array_2.neuron_pair_2_bottom),
						  &(sensor_array_2.neuron_pair_3_top), &(sensor_array_2.neuron_pair_3_middle), &(sensor_array_2.neuron_pair_3_bottom));
	}
	delay_ms(10);
    231a:	200a      	movs	r0, #10
    231c:	4b81      	ldr	r3, [pc, #516]	; (2524 <main+0x2e8>)
    231e:	4798      	blx	r3
    2320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2324:	4b80      	ldr	r3, [pc, #512]	; (2528 <main+0x2ec>)
    2326:	60da      	str	r2, [r3, #12]
	/* Replace with your application code */
	 
	while (1) 
	{
		
		if (triggered == false)	
    2328:	4b72      	ldr	r3, [pc, #456]	; (24f4 <main+0x2b8>)
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	2b00      	cmp	r3, #0
    232e:	d07e      	beq.n	242e <main+0x1f2>
			triggerSensor(50);
			triggered = true;
			data_readout = false;
		}
		
		if(new_data == true && data_readout == false)
    2330:	4b6f      	ldr	r3, [pc, #444]	; (24f0 <main+0x2b4>)
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	b18b      	cbz	r3, 235a <main+0x11e>
    2336:	4b70      	ldr	r3, [pc, #448]	; (24f8 <main+0x2bc>)
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	b973      	cbnz	r3, 235a <main+0x11e>
		{	
			//Needs to be rewritten to change between sensor arrays !!!!!!
			if (selected_array == 1)
    233c:	4b74      	ldr	r3, [pc, #464]	; (2510 <main+0x2d4>)
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b01      	cmp	r3, #1
    2342:	d07e      	beq.n	2442 <main+0x206>
			{
				triggerReadoutArray(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
									&(sensor_array_1.sensor4),&(sensor_array_1.sensor5),&(sensor_array_1.sensor6),
									&(sensor_array_1.sensor7),&(sensor_array_1.sensor8),&(sensor_array_1.sensor9), &I2C_0, bmx_io);
			}
			if (selected_array == 2)
    2344:	4b72      	ldr	r3, [pc, #456]	; (2510 <main+0x2d4>)
    2346:	781b      	ldrb	r3, [r3, #0]
    2348:	2b02      	cmp	r3, #2
    234a:	f000 8098 	beq.w	247e <main+0x242>
				triggerReadoutArray(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
									&(sensor_array_2.sensor4),&(sensor_array_2.sensor5),&(sensor_array_2.sensor6),
									&(sensor_array_2.sensor7),&(sensor_array_2.sensor8),&(sensor_array_2.sensor9), &I2C_1, bmx_io_2);
			}
		
			new_data = false; 
    234e:	2200      	movs	r2, #0
    2350:	4b67      	ldr	r3, [pc, #412]	; (24f0 <main+0x2b4>)
    2352:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    2354:	2201      	movs	r2, #1
    2356:	4b68      	ldr	r3, [pc, #416]	; (24f8 <main+0x2bc>)
    2358:	701a      	strb	r2, [r3, #0]
		}
		
		if(data_readout == true && row_change_possible == true && data_sent == false)
    235a:	4b67      	ldr	r3, [pc, #412]	; (24f8 <main+0x2bc>)
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	2b00      	cmp	r3, #0
    2360:	d0e2      	beq.n	2328 <main+0xec>
    2362:	4b72      	ldr	r3, [pc, #456]	; (252c <main+0x2f0>)
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	2b00      	cmp	r3, #0
    2368:	d0de      	beq.n	2328 <main+0xec>
    236a:	4b64      	ldr	r3, [pc, #400]	; (24fc <main+0x2c0>)
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d1da      	bne.n	2328 <main+0xec>
		{
			if (selected_array == 1)
    2372:	4b67      	ldr	r3, [pc, #412]	; (2510 <main+0x2d4>)
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	2b01      	cmp	r3, #1
    2378:	f000 809f 	beq.w	24ba <main+0x27e>
			{
				SensorRowUpdate(&sensor_array_1, selected_row, selected_output_mode);		
				delay_ms(2);
			}
			if (selected_array == 2)
    237c:	4b64      	ldr	r3, [pc, #400]	; (2510 <main+0x2d4>)
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	2b02      	cmp	r3, #2
    2382:	f000 80e5 	beq.w	2550 <main+0x314>
			{
				SensorRowUpdate(&sensor_array_2, selected_row, selected_output_mode);	
				delay_ms(2);
			}
			selected_row++;	
    2386:	4a61      	ldr	r2, [pc, #388]	; (250c <main+0x2d0>)
    2388:	7813      	ldrb	r3, [r2, #0]
    238a:	3301      	adds	r3, #1
    238c:	b2db      	uxtb	r3, r3
    238e:	7013      	strb	r3, [r2, #0]
			row_change_possible == false;
    2390:	4a66      	ldr	r2, [pc, #408]	; (252c <main+0x2f0>)
    2392:	7812      	ldrb	r2, [r2, #0]
			if (selected_row == 4)
    2394:	2b04      	cmp	r3, #4
    2396:	d1c7      	bne.n	2328 <main+0xec>
			{
				selected_row = 1;
    2398:	2201      	movs	r2, #1
    239a:	4b5c      	ldr	r3, [pc, #368]	; (250c <main+0x2d0>)
    239c:	701a      	strb	r2, [r3, #0]
				selected_array++;
    239e:	495c      	ldr	r1, [pc, #368]	; (2510 <main+0x2d4>)
    23a0:	780b      	ldrb	r3, [r1, #0]
    23a2:	4413      	add	r3, r2
    23a4:	b2db      	uxtb	r3, r3
    23a6:	700b      	strb	r3, [r1, #0]
				data_sent = true;
    23a8:	4954      	ldr	r1, [pc, #336]	; (24fc <main+0x2c0>)
    23aa:	700a      	strb	r2, [r1, #0]
				if (selected_array > number_of_arrays)
    23ac:	4a5a      	ldr	r2, [pc, #360]	; (2518 <main+0x2dc>)
    23ae:	7812      	ldrb	r2, [r2, #0]
    23b0:	4293      	cmp	r3, r2
    23b2:	d9b9      	bls.n	2328 <main+0xec>
				 {
					 selected_array = 1;
    23b4:	2201      	movs	r2, #1
    23b6:	4b56      	ldr	r3, [pc, #344]	; (2510 <main+0x2d4>)
    23b8:	701a      	strb	r2, [r3, #0]
    23ba:	e7b5      	b.n	2328 <main+0xec>
		sensor_array_2.array_number = 2;
    23bc:	4c5c      	ldr	r4, [pc, #368]	; (2530 <main+0x2f4>)
    23be:	f884 39d8 	strb.w	r3, [r4, #2520]	; 0x9d8
		SensorArray_Init(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
    23c2:	4b49      	ldr	r3, [pc, #292]	; (24e8 <main+0x2ac>)
    23c4:	681b      	ldr	r3, [r3, #0]
    23c6:	9306      	str	r3, [sp, #24]
    23c8:	4b46      	ldr	r3, [pc, #280]	; (24e4 <main+0x2a8>)
    23ca:	9305      	str	r3, [sp, #20]
    23cc:	f504 7330 	add.w	r3, r4, #704	; 0x2c0
    23d0:	9304      	str	r3, [sp, #16]
    23d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
    23d6:	9303      	str	r3, [sp, #12]
    23d8:	f504 7304 	add.w	r3, r4, #528	; 0x210
    23dc:	9302      	str	r3, [sp, #8]
    23de:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
    23e2:	9301      	str	r3, [sp, #4]
    23e4:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    23e8:	9300      	str	r3, [sp, #0]
    23ea:	f504 7384 	add.w	r3, r4, #264	; 0x108
    23ee:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    23f2:	f104 0158 	add.w	r1, r4, #88	; 0x58
    23f6:	4620      	mov	r0, r4
    23f8:	47a8      	blx	r5
		neuron_init_array(&(sensor_array_2.neuron_pair_1_top), &(sensor_array_2.neuron_pair_1_middle), &(sensor_array_2.neuron_pair_1_bottom),
    23fa:	f604 03f8 	addw	r3, r4, #2296	; 0x8f8
    23fe:	9304      	str	r3, [sp, #16]
    2400:	f504 6306 	add.w	r3, r4, #2144	; 0x860
    2404:	9303      	str	r3, [sp, #12]
    2406:	f504 63f9 	add.w	r3, r4, #1992	; 0x7c8
    240a:	9302      	str	r3, [sp, #8]
    240c:	f504 63e6 	add.w	r3, r4, #1840	; 0x730
    2410:	9301      	str	r3, [sp, #4]
    2412:	f504 63d3 	add.w	r3, r4, #1688	; 0x698
    2416:	9300      	str	r3, [sp, #0]
    2418:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
    241c:	f504 62ad 	add.w	r2, r4, #1384	; 0x568
    2420:	f504 619a 	add.w	r1, r4, #1232	; 0x4d0
    2424:	f504 6087 	add.w	r0, r4, #1080	; 0x438
    2428:	4c3d      	ldr	r4, [pc, #244]	; (2520 <main+0x2e4>)
    242a:	47a0      	blx	r4
    242c:	e775      	b.n	231a <main+0xde>
			triggerSensor(50);
    242e:	2032      	movs	r0, #50	; 0x32
    2430:	4b40      	ldr	r3, [pc, #256]	; (2534 <main+0x2f8>)
    2432:	4798      	blx	r3
			triggered = true;
    2434:	2201      	movs	r2, #1
    2436:	4b2f      	ldr	r3, [pc, #188]	; (24f4 <main+0x2b8>)
    2438:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    243a:	2200      	movs	r2, #0
    243c:	4b2e      	ldr	r3, [pc, #184]	; (24f8 <main+0x2bc>)
    243e:	701a      	strb	r2, [r3, #0]
    2440:	e776      	b.n	2330 <main+0xf4>
				triggerReadoutArray(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
    2442:	493d      	ldr	r1, [pc, #244]	; (2538 <main+0x2fc>)
    2444:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
    2448:	4b3c      	ldr	r3, [pc, #240]	; (253c <main+0x300>)
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	9306      	str	r3, [sp, #24]
    244e:	4b22      	ldr	r3, [pc, #136]	; (24d8 <main+0x29c>)
    2450:	9305      	str	r3, [sp, #20]
    2452:	f500 7330 	add.w	r3, r0, #704	; 0x2c0
    2456:	9304      	str	r3, [sp, #16]
    2458:	f500 731a 	add.w	r3, r0, #616	; 0x268
    245c:	9303      	str	r3, [sp, #12]
    245e:	f500 7304 	add.w	r3, r0, #528	; 0x210
    2462:	9302      	str	r3, [sp, #8]
    2464:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
    2468:	9301      	str	r3, [sp, #4]
    246a:	f500 73b0 	add.w	r3, r0, #352	; 0x160
    246e:	9300      	str	r3, [sp, #0]
    2470:	460b      	mov	r3, r1
    2472:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    2476:	39b0      	subs	r1, #176	; 0xb0
    2478:	4c31      	ldr	r4, [pc, #196]	; (2540 <main+0x304>)
    247a:	47a0      	blx	r4
    247c:	e762      	b.n	2344 <main+0x108>
				triggerReadoutArray(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
    247e:	4931      	ldr	r1, [pc, #196]	; (2544 <main+0x308>)
    2480:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
    2484:	4b18      	ldr	r3, [pc, #96]	; (24e8 <main+0x2ac>)
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	9306      	str	r3, [sp, #24]
    248a:	4b16      	ldr	r3, [pc, #88]	; (24e4 <main+0x2a8>)
    248c:	9305      	str	r3, [sp, #20]
    248e:	f500 7330 	add.w	r3, r0, #704	; 0x2c0
    2492:	9304      	str	r3, [sp, #16]
    2494:	f500 731a 	add.w	r3, r0, #616	; 0x268
    2498:	9303      	str	r3, [sp, #12]
    249a:	f500 7304 	add.w	r3, r0, #528	; 0x210
    249e:	9302      	str	r3, [sp, #8]
    24a0:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
    24a4:	9301      	str	r3, [sp, #4]
    24a6:	f500 73b0 	add.w	r3, r0, #352	; 0x160
    24aa:	9300      	str	r3, [sp, #0]
    24ac:	460b      	mov	r3, r1
    24ae:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    24b2:	39b0      	subs	r1, #176	; 0xb0
    24b4:	4c22      	ldr	r4, [pc, #136]	; (2540 <main+0x304>)
    24b6:	47a0      	blx	r4
    24b8:	e749      	b.n	234e <main+0x112>
				SensorRowUpdate(&sensor_array_1, selected_row, selected_output_mode);		
    24ba:	4b16      	ldr	r3, [pc, #88]	; (2514 <main+0x2d8>)
    24bc:	781a      	ldrb	r2, [r3, #0]
    24be:	4b13      	ldr	r3, [pc, #76]	; (250c <main+0x2d0>)
    24c0:	7819      	ldrb	r1, [r3, #0]
    24c2:	4821      	ldr	r0, [pc, #132]	; (2548 <main+0x30c>)
    24c4:	4b21      	ldr	r3, [pc, #132]	; (254c <main+0x310>)
    24c6:	4798      	blx	r3
				delay_ms(2);
    24c8:	2002      	movs	r0, #2
    24ca:	4b16      	ldr	r3, [pc, #88]	; (2524 <main+0x2e8>)
    24cc:	4798      	blx	r3
    24ce:	e755      	b.n	237c <main+0x140>
    24d0:	000002d1 	.word	0x000002d1
    24d4:	00000869 	.word	0x00000869
    24d8:	200003d0 	.word	0x200003d0
    24dc:	00000b5d 	.word	0x00000b5d
    24e0:	00000b41 	.word	0x00000b41
    24e4:	20000380 	.word	0x20000380
    24e8:	2000138c 	.word	0x2000138c
    24ec:	41008000 	.word	0x41008000
    24f0:	20001380 	.word	0x20001380
    24f4:	20001394 	.word	0x20001394
    24f8:	20001389 	.word	0x20001389
    24fc:	20001391 	.word	0x20001391
    2500:	20001658 	.word	0x20001658
    2504:	00002d61 	.word	0x00002d61
    2508:	20001392 	.word	0x20001392
    250c:	200009a0 	.word	0x200009a0
    2510:	20001396 	.word	0x20001396
    2514:	20001395 	.word	0x20001395
    2518:	20001390 	.word	0x20001390
    251c:	00003349 	.word	0x00003349
    2520:	00005c61 	.word	0x00005c61
    2524:	00000a81 	.word	0x00000a81
    2528:	e000e100 	.word	0xe000e100
    252c:	20000540 	.word	0x20000540
    2530:	200009a4 	.word	0x200009a4
    2534:	00003249 	.word	0x00003249
    2538:	200014a0 	.word	0x200014a0
    253c:	20001384 	.word	0x20001384
    2540:	0000328d 	.word	0x0000328d
    2544:	20000aac 	.word	0x20000aac
    2548:	20001398 	.word	0x20001398
    254c:	00001f09 	.word	0x00001f09
				SensorRowUpdate(&sensor_array_2, selected_row, selected_output_mode);	
    2550:	4b05      	ldr	r3, [pc, #20]	; (2568 <main+0x32c>)
    2552:	781a      	ldrb	r2, [r3, #0]
    2554:	4b05      	ldr	r3, [pc, #20]	; (256c <main+0x330>)
    2556:	7819      	ldrb	r1, [r3, #0]
    2558:	4805      	ldr	r0, [pc, #20]	; (2570 <main+0x334>)
    255a:	4b06      	ldr	r3, [pc, #24]	; (2574 <main+0x338>)
    255c:	4798      	blx	r3
				delay_ms(2);
    255e:	2002      	movs	r0, #2
    2560:	4b05      	ldr	r3, [pc, #20]	; (2578 <main+0x33c>)
    2562:	4798      	blx	r3
    2564:	e70f      	b.n	2386 <main+0x14a>
    2566:	bf00      	nop
    2568:	20001395 	.word	0x20001395
    256c:	200009a0 	.word	0x200009a0
    2570:	200009a4 	.word	0x200009a4
    2574:	00001f09 	.word	0x00001f09
    2578:	00000a81 	.word	0x00000a81

0000257c <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    257c:	4b0f      	ldr	r3, [pc, #60]	; (25bc <TC3_Handler+0x40>)
    257e:	7a9b      	ldrb	r3, [r3, #10]
    2580:	f013 0f01 	tst.w	r3, #1
    2584:	d110      	bne.n	25a8 <TC3_Handler+0x2c>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    2586:	4b0d      	ldr	r3, [pc, #52]	; (25bc <TC3_Handler+0x40>)
    2588:	7a9b      	ldrb	r3, [r3, #10]
    258a:	f013 0f20 	tst.w	r3, #32
    258e:	d00a      	beq.n	25a6 <TC3_Handler+0x2a>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    2590:	4a0a      	ldr	r2, [pc, #40]	; (25bc <TC3_Handler+0x40>)
    2592:	7a93      	ldrb	r3, [r2, #10]
    2594:	f043 0320 	orr.w	r3, r3, #32
    2598:	7293      	strb	r3, [r2, #10]
		new_data = true;
    259a:	2201      	movs	r2, #1
    259c:	4b08      	ldr	r3, [pc, #32]	; (25c0 <TC3_Handler+0x44>)
    259e:	701a      	strb	r2, [r3, #0]
		data_sent = false;
    25a0:	2200      	movs	r2, #0
    25a2:	4b08      	ldr	r3, [pc, #32]	; (25c4 <TC3_Handler+0x48>)
    25a4:	701a      	strb	r2, [r3, #0]
    25a6:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    25a8:	4a04      	ldr	r2, [pc, #16]	; (25bc <TC3_Handler+0x40>)
    25aa:	7a93      	ldrb	r3, [r2, #10]
    25ac:	f043 0301 	orr.w	r3, r3, #1
    25b0:	7293      	strb	r3, [r2, #10]
		triggered = false;
    25b2:	2200      	movs	r2, #0
    25b4:	4b04      	ldr	r3, [pc, #16]	; (25c8 <TC3_Handler+0x4c>)
    25b6:	701a      	strb	r2, [r3, #0]
    25b8:	4770      	bx	lr
    25ba:	bf00      	nop
    25bc:	4101c000 	.word	0x4101c000
    25c0:	20001380 	.word	0x20001380
    25c4:	20001391 	.word	0x20001391
    25c8:	20001394 	.word	0x20001394

000025cc <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    25cc:	3901      	subs	r1, #1
    25ce:	2903      	cmp	r1, #3
    25d0:	d805      	bhi.n	25de <select_prefix+0x12>
    25d2:	e8df f001 	tbb	[pc, r1]
    25d6:	0602      	.short	0x0602
    25d8:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    25da:	230c      	movs	r3, #12
    25dc:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    25de:	7840      	ldrb	r0, [r0, #1]
    25e0:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    25e2:	2310      	movs	r3, #16
    25e4:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    25e6:	e7fa      	b.n	25de <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    25e8:	2314      	movs	r3, #20
    25ea:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    25ec:	e7f7      	b.n	25de <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    25ee:	2318      	movs	r3, #24
    25f0:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    25f2:	e7f4      	b.n	25de <select_prefix+0x12>

000025f4 <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    25f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25f6:	b083      	sub	sp, #12
    25f8:	4606      	mov	r6, r0
    25fa:	4617      	mov	r7, r2
    25fc:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    25fe:	ab02      	add	r3, sp, #8
    2600:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    2604:	2201      	movs	r2, #1
    2606:	4619      	mov	r1, r3
    2608:	4b0a      	ldr	r3, [pc, #40]	; (2634 <i2c_m_sync_cmd_write_easy+0x40>)
    260a:	4798      	blx	r3
	if (ret != 1) {return -1;}
    260c:	2801      	cmp	r0, #1
    260e:	d10d      	bne.n	262c <i2c_m_sync_cmd_write_easy+0x38>
    2610:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    2612:	462a      	mov	r2, r5
    2614:	4639      	mov	r1, r7
    2616:	4630      	mov	r0, r6
    2618:	4b07      	ldr	r3, [pc, #28]	; (2638 <i2c_m_sync_cmd_write_easy+0x44>)
    261a:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    261c:	42a8      	cmp	r0, r5
    261e:	d102      	bne.n	2626 <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    2620:	4620      	mov	r0, r4
    2622:	b003      	add	sp, #12
    2624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    2626:	f04f 34ff 	mov.w	r4, #4294967295
    262a:	e7f9      	b.n	2620 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    262c:	f04f 34ff 	mov.w	r4, #4294967295
    2630:	e7f6      	b.n	2620 <i2c_m_sync_cmd_write_easy+0x2c>
    2632:	bf00      	nop
    2634:	00000b65 	.word	0x00000b65
    2638:	00000b99 	.word	0x00000b99

0000263c <sendCommand>:
{
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	b082      	sub	sp, #8
    2640:	460d      	mov	r5, r1
    2642:	4616      	mov	r6, r2
    2644:	461c      	mov	r4, r3
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    2646:	f44f 6200 	mov.w	r2, #2048	; 0x800
    264a:	7801      	ldrb	r1, [r0, #0]
    264c:	4630      	mov	r0, r6
    264e:	4b08      	ldr	r3, [pc, #32]	; (2670 <sendCommand+0x34>)
    2650:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    2652:	2301      	movs	r3, #1
    2654:	aa01      	add	r2, sp, #4
    2656:	4629      	mov	r1, r5
    2658:	4620      	mov	r0, r4
    265a:	4c06      	ldr	r4, [pc, #24]	; (2674 <sendCommand+0x38>)
    265c:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    265e:	2800      	cmp	r0, #0
    2660:	dd03      	ble.n	266a <sendCommand+0x2e>
  return buffer_answer[0];
    2662:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2666:	b002      	add	sp, #8
    2668:	bd70      	pop	{r4, r5, r6, pc}
  if (ret < 1) {return STATUS_ERROR;}
    266a:	20ff      	movs	r0, #255	; 0xff
    266c:	e7fb      	b.n	2666 <sendCommand+0x2a>
    266e:	bf00      	nop
    2670:	00000b4d 	.word	0x00000b4d
    2674:	000025f5 	.word	0x000025f5

00002678 <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	b082      	sub	sp, #8
    267c:	4605      	mov	r5, r0
    267e:	461e      	mov	r6, r3
    2680:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    2684:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    2688:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    268c:	2202      	movs	r2, #2
    268e:	a901      	add	r1, sp, #4
    2690:	4b09      	ldr	r3, [pc, #36]	; (26b8 <i2c_m_sync_reg_read_easy+0x40>)
    2692:	4798      	blx	r3
	if (ret != 2) {return -1;}
    2694:	2802      	cmp	r0, #2
    2696:	d10c      	bne.n	26b2 <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    2698:	4622      	mov	r2, r4
    269a:	4631      	mov	r1, r6
    269c:	4628      	mov	r0, r5
    269e:	4b07      	ldr	r3, [pc, #28]	; (26bc <i2c_m_sync_reg_read_easy+0x44>)
    26a0:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    26a2:	42a0      	cmp	r0, r4
    26a4:	d102      	bne.n	26ac <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    26a6:	2001      	movs	r0, #1
}
    26a8:	b002      	add	sp, #8
    26aa:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    26ac:	f04f 30ff 	mov.w	r0, #4294967295
    26b0:	e7fa      	b.n	26a8 <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    26b2:	f04f 30ff 	mov.w	r0, #4294967295
    26b6:	e7f7      	b.n	26a8 <i2c_m_sync_reg_read_easy+0x30>
    26b8:	00000b65 	.word	0x00000b65
    26bc:	00000b99 	.word	0x00000b99

000026c0 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    26c0:	b510      	push	{r4, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    26c6:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    26ca:	0a11      	lsrs	r1, r2, #8
    26cc:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    26d0:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    26d4:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    26d8:	2204      	movs	r2, #4
    26da:	eb0d 0102 	add.w	r1, sp, r2
    26de:	4b09      	ldr	r3, [pc, #36]	; (2704 <i2c_m_sync_reg_write_easy+0x44>)
    26e0:	4798      	blx	r3
	if (ret != 4) {return -1;}
    26e2:	2804      	cmp	r0, #4
    26e4:	d10b      	bne.n	26fe <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    26e6:	2201      	movs	r2, #1
    26e8:	9904      	ldr	r1, [sp, #16]
    26ea:	4620      	mov	r0, r4
    26ec:	4b06      	ldr	r3, [pc, #24]	; (2708 <i2c_m_sync_reg_write_easy+0x48>)
    26ee:	4798      	blx	r3
	if (ret != 1) {return -1;}
    26f0:	2801      	cmp	r0, #1
    26f2:	d101      	bne.n	26f8 <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    26f4:	b002      	add	sp, #8
    26f6:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    26f8:	f04f 30ff 	mov.w	r0, #4294967295
    26fc:	e7fa      	b.n	26f4 <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    26fe:	f04f 30ff 	mov.w	r0, #4294967295
    2702:	e7f7      	b.n	26f4 <i2c_m_sync_reg_write_easy+0x34>
    2704:	00000b65 	.word	0x00000b65
    2708:	00000b99 	.word	0x00000b99

0000270c <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    270c:	2308      	movs	r3, #8
    270e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    2712:	4770      	bx	lr

00002714 <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    2714:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    2716:	2200      	movs	r2, #0
    2718:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    271a:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    271c:	4a0e      	ldr	r2, [pc, #56]	; (2758 <initialize+0x44>)
    271e:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    2720:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    2724:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    2726:	4a0d      	ldr	r2, [pc, #52]	; (275c <initialize+0x48>)
    2728:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    272a:	4a0d      	ldr	r2, [pc, #52]	; (2760 <initialize+0x4c>)
    272c:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    272e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2732:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    2734:	4a0b      	ldr	r2, [pc, #44]	; (2764 <initialize+0x50>)
    2736:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    2738:	4a0b      	ldr	r2, [pc, #44]	; (2768 <initialize+0x54>)
    273a:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    273c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2740:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    2742:	4a0a      	ldr	r2, [pc, #40]	; (276c <initialize+0x58>)
    2744:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    2746:	4a0a      	ldr	r2, [pc, #40]	; (2770 <initialize+0x5c>)
    2748:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    274a:	4a0a      	ldr	r2, [pc, #40]	; (2774 <initialize+0x60>)
    274c:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    274e:	4a0a      	ldr	r2, [pc, #40]	; (2778 <initialize+0x64>)
    2750:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    2752:	4b0a      	ldr	r3, [pc, #40]	; (277c <initialize+0x68>)
    2754:	4798      	blx	r3
    2756:	bd08      	pop	{r3, pc}
    2758:	40a00000 	.word	0x40a00000
    275c:	40400000 	.word	0x40400000
    2760:	40200000 	.word	0x40200000
    2764:	3fd55555 	.word	0x3fd55555
    2768:	3faaaaab 	.word	0x3faaaaab
    276c:	3e48b439 	.word	0x3e48b439
    2770:	3ea1cac1 	.word	0x3ea1cac1
    2774:	3e19999a 	.word	0x3e19999a
    2778:	3e77ced9 	.word	0x3e77ced9
    277c:	0000270d 	.word	0x0000270d

00002780 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    2780:	2301      	movs	r3, #1
    2782:	fa03 f101 	lsl.w	r1, r3, r1
    2786:	f001 0108 	and.w	r1, r1, #8
    278a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    278e:	4319      	orrs	r1, r3
    2790:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2794:	4770      	bx	lr

00002796 <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    2796:	2902      	cmp	r1, #2
    2798:	d80c      	bhi.n	27b4 <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    279a:	f101 031c 	add.w	r3, r1, #28
    279e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    27a2:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    27a4:	2301      	movs	r3, #1
    27a6:	408b      	lsls	r3, r1
    27a8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    27ac:	ea21 0103 	bic.w	r1, r1, r3
    27b0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    27b4:	4770      	bx	lr
	...

000027b8 <readRegister>:
{
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ba:	b085      	sub	sp, #20
    27bc:	4604      	mov	r4, r0
    27be:	460d      	mov	r5, r1
    27c0:	4617      	mov	r7, r2
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    27c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    27c6:	7801      	ldrb	r1, [r0, #0]
    27c8:	4618      	mov	r0, r3
    27ca:	4b10      	ldr	r3, [pc, #64]	; (280c <readRegister+0x54>)
    27cc:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    27ce:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    27d0:	2303      	movs	r3, #3
    27d2:	9300      	str	r3, [sp, #0]
    27d4:	ab03      	add	r3, sp, #12
    27d6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    27da:	2150      	movs	r1, #80	; 0x50
    27dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    27de:	4e0c      	ldr	r6, [pc, #48]	; (2810 <readRegister+0x58>)
    27e0:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    27e2:	2800      	cmp	r0, #0
    27e4:	dc03      	bgt.n	27ee <readRegister+0x36>
    27e6:	26ff      	movs	r6, #255	; 0xff
}
    27e8:	4630      	mov	r0, r6
    27ea:	b005      	add	sp, #20
    27ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    27ee:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    27f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    27f6:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    27fa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    27fe:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    2800:	4629      	mov	r1, r5
    2802:	4620      	mov	r0, r4
    2804:	4b03      	ldr	r3, [pc, #12]	; (2814 <readRegister+0x5c>)
    2806:	4798      	blx	r3
  return status;
    2808:	e7ee      	b.n	27e8 <readRegister+0x30>
    280a:	bf00      	nop
    280c:	00000b4d 	.word	0x00000b4d
    2810:	00002679 	.word	0x00002679
    2814:	00002797 	.word	0x00002797

00002818 <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor,struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    2818:	b570      	push	{r4, r5, r6, lr}
    281a:	4604      	mov	r4, r0
    281c:	460d      	mov	r5, r1
    281e:	4616      	mov	r6, r2
  cache_invalidate(hall_sensor);
    2820:	4b06      	ldr	r3, [pc, #24]	; (283c <reset+0x24>)
    2822:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, i2c, io);
    2824:	4633      	mov	r3, r6
    2826:	462a      	mov	r2, r5
    2828:	21f0      	movs	r1, #240	; 0xf0
    282a:	4620      	mov	r0, r4
    282c:	4c04      	ldr	r4, [pc, #16]	; (2840 <reset+0x28>)
    282e:	47a0      	blx	r4
    2830:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    2832:	2003      	movs	r0, #3
    2834:	4b03      	ldr	r3, [pc, #12]	; (2844 <reset+0x2c>)
    2836:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    2838:	4620      	mov	r0, r4
    283a:	bd70      	pop	{r4, r5, r6, pc}
    283c:	0000270d 	.word	0x0000270d
    2840:	0000263d 	.word	0x0000263d
    2844:	00000a81 	.word	0x00000a81

00002848 <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, i2c, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    2848:	b510      	push	{r4, lr}
  return sendCommand(hall_sensor, CMD_EXIT, i2c, io);
    284a:	4613      	mov	r3, r2
    284c:	460a      	mov	r2, r1
    284e:	2180      	movs	r1, #128	; 0x80
    2850:	4c01      	ldr	r4, [pc, #4]	; (2858 <exit_command+0x10>)
    2852:	47a0      	blx	r4
  delay_ms(2);
}
    2854:	bd10      	pop	{r4, pc}
    2856:	bf00      	nop
    2858:	0000263d 	.word	0x0000263d

0000285c <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, i2c, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2860:	b084      	sub	sp, #16
    2862:	4605      	mov	r5, r0
    2864:	460c      	mov	r4, r1
    2866:	4610      	mov	r0, r2
    2868:	4698      	mov	r8, r3
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    286a:	f001 060f 	and.w	r6, r1, #15
    286e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    2872:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2876:	7829      	ldrb	r1, [r5, #0]
    2878:	4b3c      	ldr	r3, [pc, #240]	; (296c <readMeasurement+0x110>)
    287a:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    287c:	f014 0908 	ands.w	r9, r4, #8
    2880:	d05b      	beq.n	293a <readMeasurement+0xde>
    2882:	2302      	movs	r3, #2
    2884:	f014 0a04 	ands.w	sl, r4, #4
    2888:	d059      	beq.n	293e <readMeasurement+0xe2>
    288a:	2202      	movs	r2, #2
    288c:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    288e:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    2892:	443b      	add	r3, r7
    2894:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    2896:	f014 0401 	ands.w	r4, r4, #1
    289a:	d052      	beq.n	2942 <readMeasurement+0xe6>
    289c:	2302      	movs	r3, #2
    289e:	4413      	add	r3, r2
    28a0:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    28a2:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    28a4:	b2db      	uxtb	r3, r3
    28a6:	aa01      	add	r2, sp, #4
    28a8:	4631      	mov	r1, r6
    28aa:	4640      	mov	r0, r8
    28ac:	4e30      	ldr	r6, [pc, #192]	; (2970 <readMeasurement+0x114>)
    28ae:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    28b0:	2800      	cmp	r0, #0
    28b2:	dd59      	ble.n	2968 <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    28b4:	2c00      	cmp	r4, #0
    28b6:	d046      	beq.n	2946 <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    28b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    28bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    28c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28c4:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    28c8:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    28ca:	2f00      	cmp	r7, #0
    28cc:	d040      	beq.n	2950 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    28ce:	aa04      	add	r2, sp, #16
    28d0:	441a      	add	r2, r3
    28d2:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    28d6:	1c59      	adds	r1, r3, #1
    28d8:	aa04      	add	r2, sp, #16
    28da:	4411      	add	r1, r2
    28dc:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    28e0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    28e4:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    28e8:	3302      	adds	r3, #2
    28ea:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    28ec:	f1ba 0f00 	cmp.w	sl, #0
    28f0:	d032      	beq.n	2958 <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    28f2:	aa04      	add	r2, sp, #16
    28f4:	441a      	add	r2, r3
    28f6:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    28fa:	1c59      	adds	r1, r3, #1
    28fc:	aa04      	add	r2, sp, #16
    28fe:	4411      	add	r1, r2
    2900:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    2904:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2908:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    290c:	3302      	adds	r3, #2
    290e:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    2910:	f1b9 0f00 	cmp.w	r9, #0
    2914:	d024      	beq.n	2960 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    2916:	aa04      	add	r2, sp, #16
    2918:	441a      	add	r2, r3
    291a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    291e:	3301      	adds	r3, #1
    2920:	a904      	add	r1, sp, #16
    2922:	440b      	add	r3, r1
    2924:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    2928:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    292c:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    2930:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2934:	b004      	add	sp, #16
    2936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    293a:	2300      	movs	r3, #0
    293c:	e7a2      	b.n	2884 <readMeasurement+0x28>
    293e:	2200      	movs	r2, #0
    2940:	e7a4      	b.n	288c <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    2942:	2300      	movs	r3, #0
    2944:	e7ab      	b.n	289e <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    2946:	2300      	movs	r3, #0
    2948:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    294c:	2301      	movs	r3, #1
    294e:	e7bc      	b.n	28ca <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    2950:	2200      	movs	r2, #0
    2952:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    2956:	e7c9      	b.n	28ec <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    2958:	2200      	movs	r2, #0
    295a:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    295e:	e7d7      	b.n	2910 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    2960:	2300      	movs	r3, #0
    2962:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    2966:	e7e3      	b.n	2930 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    2968:	20ff      	movs	r0, #255	; 0xff
    296a:	e7e3      	b.n	2934 <readMeasurement+0xd8>
    296c:	00000b4d 	.word	0x00000b4d
    2970:	000025f5 	.word	0x000025f5

00002974 <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, i2c, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    2974:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    2976:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    2978:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    297c:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    2980:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    2982:	f3c1 1147 	ubfx	r1, r1, #5, #8
    2986:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    298a:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    298e:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    2992:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    2994:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    2996:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    299a:	2a0c      	cmp	r2, #12
    299c:	f000 8091 	beq.w	2ac2 <convertRaw+0x14e>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    29a0:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    29a4:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    29a8:	3302      	adds	r3, #2
    29aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    29ae:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    29b2:	2c00      	cmp	r4, #0
    29b4:	f000 808a 	beq.w	2acc <convertRaw+0x158>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    29b8:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    29bc:	ee06 3a90 	vmov	s13, r3
    29c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    29c4:	eddf 7ae0 	vldr	s15, [pc, #896]	; 2d48 <convertRaw+0x3d4>
    29c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
    29cc:	ee65 6a26 	vmul.f32	s13, s10, s13
    29d0:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    29d4:	2201      	movs	r2, #1
    29d6:	fa02 f101 	lsl.w	r1, r2, r1
    29da:	ee07 1a90 	vmov	s15, r1
    29de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    29e2:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    29e6:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    29ea:	2c00      	cmp	r4, #0
    29ec:	f000 80d4 	beq.w	2b98 <convertRaw+0x224>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    29f0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    29f4:	ee07 3a10 	vmov	s14, r3
    29f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    29fc:	eddf 7ad2 	vldr	s15, [pc, #840]	; 2d48 <convertRaw+0x3d4>
    2a00:	ee37 7a67 	vsub.f32	s14, s14, s15
    2a04:	ee25 7a07 	vmul.f32	s14, s10, s14
    2a08:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    2a0c:	2301      	movs	r3, #1
    2a0e:	40b3      	lsls	r3, r6
    2a10:	ee07 3a90 	vmov	s15, r3
    2a14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2a18:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2a1c:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    2a20:	2c00      	cmp	r4, #0
    2a22:	f000 811c 	beq.w	2c5e <convertRaw+0x2ea>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2a26:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2a2a:	ee07 3a90 	vmov	s15, r3
    2a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2a32:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2d48 <convertRaw+0x3d4>
    2a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2a3a:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2a3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    2a42:	2301      	movs	r3, #1
    2a44:	fa03 f505 	lsl.w	r5, r3, r5
    2a48:	ee07 5a10 	vmov	s14, r5
    2a4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2a50:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2a54:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    2a58:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2a5c:	ee07 3a90 	vmov	s15, r3
    2a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2a64:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 2d4c <convertRaw+0x3d8>
    2a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2a6c:	eddf 6ab8 	vldr	s13, [pc, #736]	; 2d50 <convertRaw+0x3dc>
    2a70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2a74:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    2a78:	ee77 7a27 	vadd.f32	s15, s14, s15
    2a7c:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    2a80:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    2a84:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 2d54 <convertRaw+0x3e0>
    2a88:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a90:	f340 814a 	ble.w	2d28 <convertRaw+0x3b4>
  {
	  hall_sensor->data.x = 50000;
    2a94:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    2a98:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    2a9c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 2d54 <convertRaw+0x3e0>
    2aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
    2aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2aa8:	f300 8149 	bgt.w	2d3e <convertRaw+0x3ca>
    {
	    hall_sensor->data.y = 50000;
    }
    else
    {
	    if (hall_sensor->data.y < -50000)
    2aac:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 2d58 <convertRaw+0x3e4>
    2ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
    2ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ab8:	f140 8143 	bpl.w	2d42 <convertRaw+0x3ce>
	    {
		    hall_sensor->data.y = -50000;
    2abc:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.z < -50000)
	    {
		    //hall_sensor->data.z = -50000;
	    }
    }
}
    2ac0:	e13f      	b.n	2d42 <convertRaw+0x3ce>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    2ac2:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    2ac6:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    2aca:	e76d      	b.n	29a8 <convertRaw+0x34>
    switch(res_x){
    2acc:	2903      	cmp	r1, #3
    2ace:	d88c      	bhi.n	29ea <convertRaw+0x76>
    2ad0:	e8df f001 	tbb	[pc, r1]
    2ad4:	482e1802 	.word	0x482e1802
		hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    2ad8:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    2adc:	ee07 3a90 	vmov	s15, r3
    2ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ae4:	ee67 7a85 	vmul.f32	s15, s15, s10
    2ae8:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2aec:	2301      	movs	r3, #1
    2aee:	fa03 f101 	lsl.w	r1, r3, r1
    2af2:	ee07 1a90 	vmov	s15, r1
    2af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2afa:	ee67 7a87 	vmul.f32	s15, s15, s14
    2afe:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		break;
    2b02:	e772      	b.n	29ea <convertRaw+0x76>
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    2b04:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    2b08:	ee07 3a90 	vmov	s15, r3
    2b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b10:	ee67 7a85 	vmul.f32	s15, s15, s10
    2b14:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2b18:	2301      	movs	r3, #1
    2b1a:	fa03 f101 	lsl.w	r1, r3, r1
    2b1e:	ee07 1a90 	vmov	s15, r1
    2b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b26:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b2a:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2b2e:	e75c      	b.n	29ea <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2b30:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2b34:	ee07 3a90 	vmov	s15, r3
    2b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b3c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 2d48 <convertRaw+0x3d4>
    2b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2b44:	ee65 7a27 	vmul.f32	s15, s10, s15
    2b48:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2b4c:	2301      	movs	r3, #1
    2b4e:	fa03 f101 	lsl.w	r1, r3, r1
    2b52:	ee07 1a10 	vmov	s14, r1
    2b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2b5e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2b62:	e742      	b.n	29ea <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2b64:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2b68:	ee07 3a90 	vmov	s15, r3
    2b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b70:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 2d5c <convertRaw+0x3e8>
    2b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2b78:	ee65 7a27 	vmul.f32	s15, s10, s15
    2b7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2b80:	2301      	movs	r3, #1
    2b82:	fa03 f101 	lsl.w	r1, r3, r1
    2b86:	ee07 1a10 	vmov	s14, r1
    2b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2b92:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2b96:	e728      	b.n	29ea <convertRaw+0x76>
    switch(res_y){
    2b98:	2e03      	cmp	r6, #3
    2b9a:	f63f af41 	bhi.w	2a20 <convertRaw+0xac>
    2b9e:	e8df f006 	tbb	[pc, r6]
    2ba2:	1702      	.short	0x1702
    2ba4:	452c      	.short	0x452c
		hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    2ba6:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    2baa:	ee07 3a10 	vmov	s14, r3
    2bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2bb2:	ee27 7a05 	vmul.f32	s14, s14, s10
    2bb6:	ee25 5a87 	vmul.f32	s10, s11, s14
    2bba:	2301      	movs	r3, #1
    2bbc:	40b3      	lsls	r3, r6
    2bbe:	ee07 3a90 	vmov	s15, r3
    2bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2bc6:	ee27 7a05 	vmul.f32	s14, s14, s10
    2bca:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
		break;
    2bce:	e727      	b.n	2a20 <convertRaw+0xac>
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    2bd0:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    2bd4:	ee07 3a10 	vmov	s14, r3
    2bd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2bdc:	ee27 7a05 	vmul.f32	s14, s14, s10
    2be0:	ee25 5a87 	vmul.f32	s10, s11, s14
    2be4:	2301      	movs	r3, #1
    2be6:	40b3      	lsls	r3, r6
    2be8:	ee07 3a90 	vmov	s15, r3
    2bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2bf0:	ee27 7a05 	vmul.f32	s14, s14, s10
    2bf4:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2bf8:	e712      	b.n	2a20 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2bfa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2bfe:	ee07 3a10 	vmov	s14, r3
    2c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2c06:	eddf 7a50 	vldr	s15, [pc, #320]	; 2d48 <convertRaw+0x3d4>
    2c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c0e:	ee25 7a07 	vmul.f32	s14, s10, s14
    2c12:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    2c16:	2301      	movs	r3, #1
    2c18:	40b3      	lsls	r3, r6
    2c1a:	ee07 3a90 	vmov	s15, r3
    2c1e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2c22:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2c26:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2c2a:	e6f9      	b.n	2a20 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2c2c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2c30:	ee07 3a10 	vmov	s14, r3
    2c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2c38:	eddf 7a48 	vldr	s15, [pc, #288]	; 2d5c <convertRaw+0x3e8>
    2c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c40:	ee25 7a07 	vmul.f32	s14, s10, s14
    2c44:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    2c48:	2301      	movs	r3, #1
    2c4a:	40b3      	lsls	r3, r6
    2c4c:	ee07 3a90 	vmov	s15, r3
    2c50:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2c54:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2c58:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2c5c:	e6e0      	b.n	2a20 <convertRaw+0xac>
    switch(res_z){
    2c5e:	2d03      	cmp	r5, #3
    2c60:	f63f aefa 	bhi.w	2a58 <convertRaw+0xe4>
    2c64:	e8df f005 	tbb	[pc, r5]
    2c68:	462c1702 	.word	0x462c1702
		hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2c6c:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2c70:	ee07 3a90 	vmov	s15, r3
    2c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c78:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2c7c:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2c80:	2301      	movs	r3, #1
    2c82:	40ab      	lsls	r3, r5
    2c84:	ee07 3a90 	vmov	s15, r3
    2c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2c90:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		break;
    2c94:	e6e0      	b.n	2a58 <convertRaw+0xe4>
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2c96:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2c9a:	ee07 3a90 	vmov	s15, r3
    2c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ca2:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2ca6:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2caa:	2301      	movs	r3, #1
    2cac:	40ab      	lsls	r3, r5
    2cae:	ee07 3a90 	vmov	s15, r3
    2cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2cb6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2cba:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2cbe:	e6cb      	b.n	2a58 <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2cc0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2cc4:	ee07 3a90 	vmov	s15, r3
    2cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ccc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2d48 <convertRaw+0x3d4>
    2cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2cd4:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2cd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2cdc:	2301      	movs	r3, #1
    2cde:	fa03 f505 	lsl.w	r5, r3, r5
    2ce2:	ee07 5a10 	vmov	s14, r5
    2ce6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2cea:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2cee:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2cf2:	e6b1      	b.n	2a58 <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2cf4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2cf8:	ee07 3a90 	vmov	s15, r3
    2cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d00:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2d5c <convertRaw+0x3e8>
    2d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2d08:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2d0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2d10:	2301      	movs	r3, #1
    2d12:	fa03 f505 	lsl.w	r5, r3, r5
    2d16:	ee07 5a10 	vmov	s14, r5
    2d1a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2d1e:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2d22:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2d26:	e697      	b.n	2a58 <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    2d28:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2d58 <convertRaw+0x3e4>
    2d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d34:	f57f aeb0 	bpl.w	2a98 <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    2d38:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2d3c:	e6ac      	b.n	2a98 <convertRaw+0x124>
	    hall_sensor->data.y = 50000;
    2d3e:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
}
    2d42:	bc70      	pop	{r4, r5, r6}
    2d44:	4770      	bx	lr
    2d46:	bf00      	nop
    2d48:	47000000 	.word	0x47000000
    2d4c:	4734a400 	.word	0x4734a400
    2d50:	4234cccd 	.word	0x4234cccd
    2d54:	47435000 	.word	0x47435000
    2d58:	c7435000 	.word	0xc7435000
    2d5c:	46800000 	.word	0x46800000

00002d60 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    2d60:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    2d62:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2d64:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    2d68:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    2d6c:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    2d70:	2201      	movs	r2, #1
    2d72:	408a      	lsls	r2, r1
    2d74:	3202      	adds	r2, #2
    2d76:	409a      	lsls	r2, r3
    2d78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2d7c:	0193      	lsls	r3, r2, #6
    2d7e:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    2d82:	23c0      	movs	r3, #192	; 0xc0
    2d84:	40a3      	lsls	r3, r4
    2d86:	3343      	adds	r3, #67	; 0x43
    2d88:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <convDelayMicro+0x40>)
    2d8c:	fba3 3000 	umull	r3, r0, r3, r0
    2d90:	f3c0 104f 	ubfx	r0, r0, #5, #16
    2d94:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    2d96:	b280      	uxth	r0, r0
    2d98:	f85d 4b04 	ldr.w	r4, [sp], #4
    2d9c:	4770      	bx	lr
    2d9e:	bf00      	nop
    2da0:	51eb851f 	.word	0x51eb851f

00002da4 <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    2da4:	0900      	lsrs	r0, r0, #4
    2da6:	f080 0001 	eor.w	r0, r0, #1
}
    2daa:	f000 0001 	and.w	r0, r0, #1
    2dae:	4770      	bx	lr

00002db0 <writeRegister>:
{
    2db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2db2:	b085      	sub	sp, #20
    2db4:	4605      	mov	r5, r0
    2db6:	460e      	mov	r6, r1
    2db8:	4617      	mov	r7, r2
    2dba:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    2dbc:	4b12      	ldr	r3, [pc, #72]	; (2e08 <writeRegister+0x58>)
    2dbe:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    2dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2dc4:	7829      	ldrb	r1, [r5, #0]
    2dc6:	4620      	mov	r0, r4
    2dc8:	4b10      	ldr	r3, [pc, #64]	; (2e0c <writeRegister+0x5c>)
    2dca:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    2dcc:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    2dce:	aa03      	add	r2, sp, #12
    2dd0:	9200      	str	r2, [sp, #0]
    2dd2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2dd6:	463a      	mov	r2, r7
    2dd8:	2160      	movs	r1, #96	; 0x60
    2dda:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ddc:	4c0c      	ldr	r4, [pc, #48]	; (2e10 <writeRegister+0x60>)
    2dde:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2de0:	2800      	cmp	r0, #0
    2de2:	dd0e      	ble.n	2e02 <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    2de4:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    2de8:	4620      	mov	r0, r4
    2dea:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <writeRegister+0x64>)
    2dec:	4798      	blx	r3
    2dee:	b908      	cbnz	r0, 2df4 <writeRegister+0x44>
  return status;
    2df0:	4620      	mov	r0, r4
    2df2:	e007      	b.n	2e04 <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    2df4:	463a      	mov	r2, r7
    2df6:	4631      	mov	r1, r6
    2df8:	4628      	mov	r0, r5
    2dfa:	4b07      	ldr	r3, [pc, #28]	; (2e18 <writeRegister+0x68>)
    2dfc:	4798      	blx	r3
  return status;
    2dfe:	4620      	mov	r0, r4
    2e00:	e000      	b.n	2e04 <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    2e02:	20ff      	movs	r0, #255	; 0xff
}
    2e04:	b005      	add	sp, #20
    2e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e08:	00002781 	.word	0x00002781
    2e0c:	00000b4d 	.word	0x00000b4d
    2e10:	000026c1 	.word	0x000026c1
    2e14:	00002da5 	.word	0x00002da5
    2e18:	00002797 	.word	0x00002797

00002e1c <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    2e1c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2e20:	4770      	bx	lr
	...

00002e24 <cache_fill>:
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io) {
    2e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e28:	b082      	sub	sp, #8
  if (hall_sensor->cache.dirty != 0) {
    2e2a:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
    2e2e:	b304      	cbz	r4, 2e72 <cache_fill+0x4e>
    2e30:	4617      	mov	r7, r2
    2e32:	4688      	mov	r8, r1
    2e34:	4605      	mov	r5, r0
    2e36:	2400      	movs	r4, #0
    2e38:	e001      	b.n	2e3e <cache_fill+0x1a>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    2e3a:	3401      	adds	r4, #1
    2e3c:	b2e4      	uxtb	r4, r4
    2e3e:	2c02      	cmp	r4, #2
    2e40:	d816      	bhi.n	2e70 <cache_fill+0x4c>
      if (hall_sensor->cache.dirty & (1 << address)){
    2e42:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2e46:	4123      	asrs	r3, r4
    2e48:	f013 0f01 	tst.w	r3, #1
    2e4c:	d0f5      	beq.n	2e3a <cache_fill+0x16>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]),i2c, io))) {
    2e4e:	f104 021c 	add.w	r2, r4, #28
    2e52:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2e56:	9700      	str	r7, [sp, #0]
    2e58:	4643      	mov	r3, r8
    2e5a:	3202      	adds	r2, #2
    2e5c:	4621      	mov	r1, r4
    2e5e:	4628      	mov	r0, r5
    2e60:	4e06      	ldr	r6, [pc, #24]	; (2e7c <cache_fill+0x58>)
    2e62:	47b0      	blx	r6
    2e64:	4b06      	ldr	r3, [pc, #24]	; (2e80 <cache_fill+0x5c>)
    2e66:	4798      	blx	r3
    2e68:	2800      	cmp	r0, #0
    2e6a:	d0e6      	beq.n	2e3a <cache_fill+0x16>
          return STATUS_ERROR;
    2e6c:	24ff      	movs	r4, #255	; 0xff
    2e6e:	e000      	b.n	2e72 <cache_fill+0x4e>
  return STATUS_OK;
    2e70:	2400      	movs	r4, #0
}
    2e72:	4620      	mov	r0, r4
    2e74:	b002      	add	sp, #8
    2e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e7a:	bf00      	nop
    2e7c:	000027b9 	.word	0x000027b9
    2e80:	00002e1d 	.word	0x00002e1d

00002e84 <startMeasurement>:
{
    2e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e86:	4607      	mov	r7, r0
    2e88:	460c      	mov	r4, r1
    2e8a:	4615      	mov	r5, r2
    2e8c:	461e      	mov	r6, r3
  cache_fill(hall_sensor, i2c, io);
    2e8e:	461a      	mov	r2, r3
    2e90:	4629      	mov	r1, r5
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <startMeasurement+0x28>)
    2e94:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    2e96:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, i2c, io);
    2e9a:	4633      	mov	r3, r6
    2e9c:	462a      	mov	r2, r5
    2e9e:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2ea2:	4638      	mov	r0, r7
    2ea4:	4c02      	ldr	r4, [pc, #8]	; (2eb0 <startMeasurement+0x2c>)
    2ea6:	47a0      	blx	r4
}
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eaa:	bf00      	nop
    2eac:	00002e25 	.word	0x00002e25
    2eb0:	0000263d 	.word	0x0000263d

00002eb4 <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    2eb4:	f010 0f10 	tst.w	r0, #16
    2eb8:	d001      	beq.n	2ebe <checkStatus+0xa>
    2eba:	20ff      	movs	r0, #255	; 0xff
    2ebc:	4770      	bx	lr
    2ebe:	2000      	movs	r0, #0
    2ec0:	4770      	bx	lr
	...

00002ec4 <setGainSel>:
{
    2ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ec8:	b085      	sub	sp, #20
    2eca:	4680      	mov	r8, r0
    2ecc:	4689      	mov	r9, r1
    2ece:	4615      	mov	r5, r2
    2ed0:	461e      	mov	r6, r3
  uint16_t old_val = 0;
    2ed2:	2400      	movs	r4, #0
    2ed4:	aa04      	add	r2, sp, #16
    2ed6:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, i2c, io);
    2eda:	9300      	str	r3, [sp, #0]
    2edc:	462b      	mov	r3, r5
    2ede:	4621      	mov	r1, r4
    2ee0:	4f10      	ldr	r7, [pc, #64]	; (2f24 <setGainSel+0x60>)
    2ee2:	47b8      	blx	r7
    2ee4:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), i2c, io);
    2ee6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2eee:	b212      	sxth	r2, r2
    2ef0:	ea4f 1909 	mov.w	r9, r9, lsl #4
    2ef4:	f009 0970 	and.w	r9, r9, #112	; 0x70
    2ef8:	ea42 0209 	orr.w	r2, r2, r9
    2efc:	9600      	str	r6, [sp, #0]
    2efe:	462b      	mov	r3, r5
    2f00:	b292      	uxth	r2, r2
    2f02:	4621      	mov	r1, r4
    2f04:	4640      	mov	r0, r8
    2f06:	4c08      	ldr	r4, [pc, #32]	; (2f28 <setGainSel+0x64>)
    2f08:	47a0      	blx	r4
    2f0a:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2f0c:	4638      	mov	r0, r7
    2f0e:	4d07      	ldr	r5, [pc, #28]	; (2f2c <setGainSel+0x68>)
    2f10:	47a8      	blx	r5
    2f12:	4604      	mov	r4, r0
    2f14:	4630      	mov	r0, r6
    2f16:	47a8      	blx	r5
    2f18:	4320      	orrs	r0, r4
}
    2f1a:	b2c0      	uxtb	r0, r0
    2f1c:	b005      	add	sp, #20
    2f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2f22:	bf00      	nop
    2f24:	000027b9 	.word	0x000027b9
    2f28:	00002db1 	.word	0x00002db1
    2f2c:	00002eb5 	.word	0x00002eb5

00002f30 <setResolution>:
{
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	b085      	sub	sp, #20
    2f34:	4606      	mov	r6, r0
    2f36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    2f38:	011b      	lsls	r3, r3, #4
    2f3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2f3e:	0092      	lsls	r2, r2, #2
    2f40:	f002 020c 	and.w	r2, r2, #12
    2f44:	431a      	orrs	r2, r3
    2f46:	f001 0103 	and.w	r1, r1, #3
    2f4a:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    2f4e:	aa04      	add	r2, sp, #16
    2f50:	2300      	movs	r3, #0
    2f52:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, i2c, io);
    2f56:	9500      	str	r5, [sp, #0]
    2f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f5a:	2102      	movs	r1, #2
    2f5c:	4f0d      	ldr	r7, [pc, #52]	; (2f94 <setResolution+0x64>)
    2f5e:	47b8      	blx	r7
    2f60:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), i2c, io);
    2f62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2f66:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2f6a:	b212      	sxth	r2, r2
    2f6c:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2f70:	9500      	str	r5, [sp, #0]
    2f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f74:	b292      	uxth	r2, r2
    2f76:	2102      	movs	r1, #2
    2f78:	4630      	mov	r0, r6
    2f7a:	4c07      	ldr	r4, [pc, #28]	; (2f98 <setResolution+0x68>)
    2f7c:	47a0      	blx	r4
    2f7e:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2f80:	4638      	mov	r0, r7
    2f82:	4d06      	ldr	r5, [pc, #24]	; (2f9c <setResolution+0x6c>)
    2f84:	47a8      	blx	r5
    2f86:	4604      	mov	r4, r0
    2f88:	4630      	mov	r0, r6
    2f8a:	47a8      	blx	r5
    2f8c:	4320      	orrs	r0, r4
}
    2f8e:	b2c0      	uxtb	r0, r0
    2f90:	b005      	add	sp, #20
    2f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f94:	000027b9 	.word	0x000027b9
    2f98:	00002db1 	.word	0x00002db1
    2f9c:	00002eb5 	.word	0x00002eb5

00002fa0 <setOverSampling>:
{
    2fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fa4:	b084      	sub	sp, #16
    2fa6:	4607      	mov	r7, r0
    2fa8:	4688      	mov	r8, r1
    2faa:	4614      	mov	r4, r2
    2fac:	461d      	mov	r5, r3
  uint16_t old_val = 0;
    2fae:	aa04      	add	r2, sp, #16
    2fb0:	2300      	movs	r3, #0
    2fb2:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, i2c, io);
    2fb6:	9500      	str	r5, [sp, #0]
    2fb8:	4623      	mov	r3, r4
    2fba:	2102      	movs	r1, #2
    2fbc:	4e0f      	ldr	r6, [pc, #60]	; (2ffc <setOverSampling+0x5c>)
    2fbe:	47b0      	blx	r6
    2fc0:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), i2c, io);
    2fc2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2fc6:	f022 0203 	bic.w	r2, r2, #3
    2fca:	b212      	sxth	r2, r2
    2fcc:	f008 0803 	and.w	r8, r8, #3
    2fd0:	ea42 0208 	orr.w	r2, r2, r8
    2fd4:	9500      	str	r5, [sp, #0]
    2fd6:	4623      	mov	r3, r4
    2fd8:	b292      	uxth	r2, r2
    2fda:	2102      	movs	r1, #2
    2fdc:	4638      	mov	r0, r7
    2fde:	4c08      	ldr	r4, [pc, #32]	; (3000 <setOverSampling+0x60>)
    2fe0:	47a0      	blx	r4
    2fe2:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2fe4:	4630      	mov	r0, r6
    2fe6:	4d07      	ldr	r5, [pc, #28]	; (3004 <setOverSampling+0x64>)
    2fe8:	47a8      	blx	r5
    2fea:	4604      	mov	r4, r0
    2fec:	4638      	mov	r0, r7
    2fee:	47a8      	blx	r5
    2ff0:	4320      	orrs	r0, r4
}
    2ff2:	b2c0      	uxtb	r0, r0
    2ff4:	b004      	add	sp, #16
    2ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ffa:	bf00      	nop
    2ffc:	000027b9 	.word	0x000027b9
    3000:	00002db1 	.word	0x00002db1
    3004:	00002eb5 	.word	0x00002eb5

00003008 <setDigitalFiltering>:
{
    3008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    300c:	b084      	sub	sp, #16
    300e:	4607      	mov	r7, r0
    3010:	4688      	mov	r8, r1
    3012:	4614      	mov	r4, r2
    3014:	461d      	mov	r5, r3
  uint16_t old_val = 0;
    3016:	aa04      	add	r2, sp, #16
    3018:	2300      	movs	r3, #0
    301a:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, i2c, io);
    301e:	9500      	str	r5, [sp, #0]
    3020:	4623      	mov	r3, r4
    3022:	2102      	movs	r1, #2
    3024:	4e10      	ldr	r6, [pc, #64]	; (3068 <setDigitalFiltering+0x60>)
    3026:	47b0      	blx	r6
    3028:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK), i2c, io);
    302a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    302e:	f022 021c 	bic.w	r2, r2, #28
    3032:	b212      	sxth	r2, r2
    3034:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3038:	f008 081c 	and.w	r8, r8, #28
    303c:	ea42 0208 	orr.w	r2, r2, r8
    3040:	9500      	str	r5, [sp, #0]
    3042:	4623      	mov	r3, r4
    3044:	b292      	uxth	r2, r2
    3046:	2102      	movs	r1, #2
    3048:	4638      	mov	r0, r7
    304a:	4c08      	ldr	r4, [pc, #32]	; (306c <setDigitalFiltering+0x64>)
    304c:	47a0      	blx	r4
    304e:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    3050:	4630      	mov	r0, r6
    3052:	4d07      	ldr	r5, [pc, #28]	; (3070 <setDigitalFiltering+0x68>)
    3054:	47a8      	blx	r5
    3056:	4604      	mov	r4, r0
    3058:	4638      	mov	r0, r7
    305a:	47a8      	blx	r5
    305c:	4320      	orrs	r0, r4
}
    305e:	b2c0      	uxtb	r0, r0
    3060:	b004      	add	sp, #16
    3062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3066:	bf00      	nop
    3068:	000027b9 	.word	0x000027b9
    306c:	00002db1 	.word	0x00002db1
    3070:	00002eb5 	.word	0x00002eb5

00003074 <setTemperatureCompensation>:
{
    3074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3078:	b084      	sub	sp, #16
    307a:	4607      	mov	r7, r0
    307c:	4614      	mov	r4, r2
    307e:	461d      	mov	r5, r3
  uint8_t tcmp_en = enabled?1:0;
    3080:	f111 0800 	adds.w	r8, r1, #0
    3084:	bf18      	it	ne
    3086:	f04f 0801 	movne.w	r8, #1
  uint16_t old_val = 0;
    308a:	aa04      	add	r2, sp, #16
    308c:	2300      	movs	r3, #0
    308e:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, i2c, io);
    3092:	9500      	str	r5, [sp, #0]
    3094:	4623      	mov	r3, r4
    3096:	2101      	movs	r1, #1
    3098:	4e0e      	ldr	r6, [pc, #56]	; (30d4 <setTemperatureCompensation+0x60>)
    309a:	47b0      	blx	r6
    309c:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), i2c, io);
    309e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    30a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    30a6:	b212      	sxth	r2, r2
    30a8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
    30ac:	9500      	str	r5, [sp, #0]
    30ae:	4623      	mov	r3, r4
    30b0:	b292      	uxth	r2, r2
    30b2:	2101      	movs	r1, #1
    30b4:	4638      	mov	r0, r7
    30b6:	4c08      	ldr	r4, [pc, #32]	; (30d8 <setTemperatureCompensation+0x64>)
    30b8:	47a0      	blx	r4
    30ba:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    30bc:	4630      	mov	r0, r6
    30be:	4d07      	ldr	r5, [pc, #28]	; (30dc <setTemperatureCompensation+0x68>)
    30c0:	47a8      	blx	r5
    30c2:	4604      	mov	r4, r0
    30c4:	4638      	mov	r0, r7
    30c6:	47a8      	blx	r5
    30c8:	4320      	orrs	r0, r4
}
    30ca:	b2c0      	uxtb	r0, r0
    30cc:	b004      	add	sp, #16
    30ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30d2:	bf00      	nop
    30d4:	000027b9 	.word	0x000027b9
    30d8:	00002db1 	.word	0x00002db1
    30dc:	00002eb5 	.word	0x00002eb5

000030e0 <begin>:
{
    30e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30e4:	b083      	sub	sp, #12
    30e6:	4604      	mov	r4, r0
    30e8:	4690      	mov	r8, r2
    30ea:	461f      	mov	r7, r3
    30ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    30ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  select_prefix(hall_sensor, order_code_last_digit);
    30f0:	4b28      	ldr	r3, [pc, #160]	; (3194 <begin+0xb4>)
    30f2:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    30f4:	f994 2001 	ldrsb.w	r2, [r4, #1]
    30f8:	f1b8 0f00 	cmp.w	r8, #0
    30fc:	d147      	bne.n	318e <begin+0xae>
    30fe:	2300      	movs	r3, #0
    3100:	4313      	orrs	r3, r2
    3102:	2f00      	cmp	r7, #0
    3104:	bf18      	it	ne
    3106:	f043 0301 	orrne.w	r3, r3, #1
    310a:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    310c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3110:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, i2c, io);
    3112:	4632      	mov	r2, r6
    3114:	4629      	mov	r1, r5
    3116:	4620      	mov	r0, r4
    3118:	4b1f      	ldr	r3, [pc, #124]	; (3198 <begin+0xb8>)
    311a:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, i2c, io));
    311c:	4632      	mov	r2, r6
    311e:	4629      	mov	r1, r5
    3120:	4620      	mov	r0, r4
    3122:	4b1e      	ldr	r3, [pc, #120]	; (319c <begin+0xbc>)
    3124:	4798      	blx	r3
    3126:	4b1e      	ldr	r3, [pc, #120]	; (31a0 <begin+0xc0>)
    3128:	4798      	blx	r3
    312a:	4682      	mov	sl, r0
  uint8_t status2 = setGainSel(hall_sensor, 1, i2c, io); //7 is factory ours was 2
    312c:	4633      	mov	r3, r6
    312e:	462a      	mov	r2, r5
    3130:	2101      	movs	r1, #1
    3132:	4620      	mov	r0, r4
    3134:	4f1b      	ldr	r7, [pc, #108]	; (31a4 <begin+0xc4>)
    3136:	47b8      	blx	r7
    3138:	4683      	mov	fp, r0
  uint8_t status3 = setResolution(hall_sensor, 0, 0, 0, i2c, io); //0,0,0
    313a:	9601      	str	r6, [sp, #4]
    313c:	9500      	str	r5, [sp, #0]
    313e:	2300      	movs	r3, #0
    3140:	461a      	mov	r2, r3
    3142:	4619      	mov	r1, r3
    3144:	4620      	mov	r0, r4
    3146:	4f18      	ldr	r7, [pc, #96]	; (31a8 <begin+0xc8>)
    3148:	47b8      	blx	r7
    314a:	4681      	mov	r9, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, i2c, io); //3
    314c:	4633      	mov	r3, r6
    314e:	462a      	mov	r2, r5
    3150:	2101      	movs	r1, #1
    3152:	4620      	mov	r0, r4
    3154:	4f15      	ldr	r7, [pc, #84]	; (31ac <begin+0xcc>)
    3156:	47b8      	blx	r7
    3158:	4680      	mov	r8, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, i2c, io); //7
    315a:	4633      	mov	r3, r6
    315c:	462a      	mov	r2, r5
    315e:	2102      	movs	r1, #2
    3160:	4620      	mov	r0, r4
    3162:	4f13      	ldr	r7, [pc, #76]	; (31b0 <begin+0xd0>)
    3164:	47b8      	blx	r7
    3166:	4607      	mov	r7, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, i2c, io);//0
    3168:	4633      	mov	r3, r6
    316a:	462a      	mov	r2, r5
    316c:	2100      	movs	r1, #0
    316e:	4620      	mov	r0, r4
    3170:	4c10      	ldr	r4, [pc, #64]	; (31b4 <begin+0xd4>)
    3172:	47a0      	blx	r4
  return status1 | status2 | status3 | status4 | status5 | status6;
    3174:	ea4a 0a0b 	orr.w	sl, sl, fp
    3178:	ea49 090a 	orr.w	r9, r9, sl
    317c:	ea48 0809 	orr.w	r8, r8, r9
    3180:	ea47 0708 	orr.w	r7, r7, r8
    3184:	4338      	orrs	r0, r7
}
    3186:	b2c0      	uxtb	r0, r0
    3188:	b003      	add	sp, #12
    318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    318e:	2302      	movs	r3, #2
    3190:	e7b6      	b.n	3100 <begin+0x20>
    3192:	bf00      	nop
    3194:	000025cd 	.word	0x000025cd
    3198:	00002849 	.word	0x00002849
    319c:	00002819 	.word	0x00002819
    31a0:	00002eb5 	.word	0x00002eb5
    31a4:	00002ec5 	.word	0x00002ec5
    31a8:	00002f31 	.word	0x00002f31
    31ac:	00002fa1 	.word	0x00002fa1
    31b0:	00003009 	.word	0x00003009
    31b4:	00003075 	.word	0x00003075

000031b8 <setExtTrig>:
{
    31b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31bc:	b084      	sub	sp, #16
    31be:	4680      	mov	r8, r0
    31c0:	460c      	mov	r4, r1
    31c2:	4615      	mov	r5, r2
    31c4:	461e      	mov	r6, r3
  uint16_t old_val = 0;
    31c6:	aa04      	add	r2, sp, #16
    31c8:	2300      	movs	r3, #0
    31ca:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, i2c, io);
    31ce:	9600      	str	r6, [sp, #0]
    31d0:	462b      	mov	r3, r5
    31d2:	2101      	movs	r1, #1
    31d4:	4f0f      	ldr	r7, [pc, #60]	; (3214 <setExtTrig+0x5c>)
    31d6:	47b8      	blx	r7
    31d8:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), i2c, io);
    31da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    31de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    31e2:	b213      	sxth	r3, r2
    31e4:	b2a2      	uxth	r2, r4
    31e6:	02d2      	lsls	r2, r2, #11
    31e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    31ec:	431a      	orrs	r2, r3
    31ee:	9600      	str	r6, [sp, #0]
    31f0:	462b      	mov	r3, r5
    31f2:	b292      	uxth	r2, r2
    31f4:	2101      	movs	r1, #1
    31f6:	4640      	mov	r0, r8
    31f8:	4c07      	ldr	r4, [pc, #28]	; (3218 <setExtTrig+0x60>)
    31fa:	47a0      	blx	r4
    31fc:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    31fe:	4638      	mov	r0, r7
    3200:	4d06      	ldr	r5, [pc, #24]	; (321c <setExtTrig+0x64>)
    3202:	47a8      	blx	r5
    3204:	4604      	mov	r4, r0
    3206:	4630      	mov	r0, r6
    3208:	47a8      	blx	r5
    320a:	4320      	orrs	r0, r4
}
    320c:	b2c0      	uxtb	r0, r0
    320e:	b004      	add	sp, #16
    3210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3214:	000027b9 	.word	0x000027b9
    3218:	00002db1 	.word	0x00002db1
    321c:	00002eb5 	.word	0x00002eb5

00003220 <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include <math.h>


void triggerInitialize(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    3220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3222:	4606      	mov	r6, r0
    3224:	460c      	mov	r4, r1
    3226:	4615      	mov	r5, r2
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,i2c,io);
    3228:	4613      	mov	r3, r2
    322a:	460a      	mov	r2, r1
    322c:	2101      	movs	r1, #1
    322e:	4f04      	ldr	r7, [pc, #16]	; (3240 <triggerInitialize+0x20>)
    3230:	47b8      	blx	r7
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, i2c, io);
    3232:	462b      	mov	r3, r5
    3234:	4622      	mov	r2, r4
    3236:	210e      	movs	r1, #14
    3238:	4630      	mov	r0, r6
    323a:	4c02      	ldr	r4, [pc, #8]	; (3244 <triggerInitialize+0x24>)
    323c:	47a0      	blx	r4
    323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3240:	000031b9 	.word	0x000031b9
    3244:	00002e85 	.word	0x00002e85

00003248 <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    3248:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    324a:	4c03      	ldr	r4, [pc, #12]	; (3258 <triggerSensor+0x10>)
    324c:	2540      	movs	r5, #64	; 0x40
    324e:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <triggerSensor+0x14>)
    3252:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3254:	6165      	str	r5, [r4, #20]
    3256:	bd38      	pop	{r3, r4, r5, pc}
    3258:	41008000 	.word	0x41008000
    325c:	00000a61 	.word	0x00000a61

00003260 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    3260:	b538      	push	{r3, r4, r5, lr}
    3262:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , i2c, io);
    3264:	4613      	mov	r3, r2
    3266:	460a      	mov	r2, r1
    3268:	210e      	movs	r1, #14
    326a:	4c05      	ldr	r4, [pc, #20]	; (3280 <triggerReadout+0x20>)
    326c:	47a0      	blx	r4
    326e:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    3270:	4628      	mov	r0, r5
    3272:	4b04      	ldr	r3, [pc, #16]	; (3284 <triggerReadout+0x24>)
    3274:	4798      	blx	r3
	return checkStatus(status);
    3276:	4620      	mov	r0, r4
    3278:	4b03      	ldr	r3, [pc, #12]	; (3288 <triggerReadout+0x28>)
    327a:	4798      	blx	r3
};
    327c:	bd38      	pop	{r3, r4, r5, pc}
    327e:	bf00      	nop
    3280:	0000285d 	.word	0x0000285d
    3284:	00002975 	.word	0x00002975
    3288:	00002eb5 	.word	0x00002eb5

0000328c <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3290:	b083      	sub	sp, #12
    3292:	4688      	mov	r8, r1
    3294:	4617      	mov	r7, r2
    3296:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,i2c,io);
    3298:	9a12      	ldr	r2, [sp, #72]	; 0x48
    329a:	9911      	ldr	r1, [sp, #68]	; 0x44
    329c:	4c28      	ldr	r4, [pc, #160]	; (3340 <triggerReadoutArray+0xb4>)
    329e:	47a0      	blx	r4
    32a0:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,i2c,io);
    32a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32a4:	9911      	ldr	r1, [sp, #68]	; 0x44
    32a6:	4640      	mov	r0, r8
    32a8:	47a0      	blx	r4
    32aa:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,i2c,io);
    32ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32ae:	9911      	ldr	r1, [sp, #68]	; 0x44
    32b0:	4638      	mov	r0, r7
    32b2:	47a0      	blx	r4
    32b4:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,i2c,io);
    32b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32b8:	9911      	ldr	r1, [sp, #68]	; 0x44
    32ba:	4630      	mov	r0, r6
    32bc:	47a0      	blx	r4
    32be:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,i2c,io);
    32c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32c2:	9911      	ldr	r1, [sp, #68]	; 0x44
    32c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    32c6:	47a0      	blx	r4
    32c8:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,i2c,io);
    32ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    32ce:	980d      	ldr	r0, [sp, #52]	; 0x34
    32d0:	47a0      	blx	r4
    32d2:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,i2c,io);
    32d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32d6:	9911      	ldr	r1, [sp, #68]	; 0x44
    32d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    32da:	47a0      	blx	r4
    32dc:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,i2c,io);
    32de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    32e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    32e4:	47a0      	blx	r4
    32e6:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,i2c,io);
    32e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    32ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    32ec:	9810      	ldr	r0, [sp, #64]	; 0x40
    32ee:	47a0      	blx	r4
    32f0:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    32f2:	4628      	mov	r0, r5
    32f4:	4d13      	ldr	r5, [pc, #76]	; (3344 <triggerReadoutArray+0xb8>)
    32f6:	47a8      	blx	r5
    32f8:	4604      	mov	r4, r0
    32fa:	4658      	mov	r0, fp
    32fc:	47a8      	blx	r5
    32fe:	4304      	orrs	r4, r0
    3300:	b2e4      	uxtb	r4, r4
    3302:	4650      	mov	r0, sl
    3304:	47a8      	blx	r5
    3306:	4304      	orrs	r4, r0
    3308:	b2e4      	uxtb	r4, r4
    330a:	4648      	mov	r0, r9
    330c:	47a8      	blx	r5
    330e:	4304      	orrs	r4, r0
    3310:	b2e4      	uxtb	r4, r4
    3312:	4640      	mov	r0, r8
    3314:	47a8      	blx	r5
    3316:	4304      	orrs	r4, r0
    3318:	b2e4      	uxtb	r4, r4
    331a:	4638      	mov	r0, r7
    331c:	47a8      	blx	r5
    331e:	4304      	orrs	r4, r0
    3320:	b2e4      	uxtb	r4, r4
    3322:	4630      	mov	r0, r6
    3324:	47a8      	blx	r5
    3326:	4304      	orrs	r4, r0
    3328:	b2e4      	uxtb	r4, r4
    332a:	9800      	ldr	r0, [sp, #0]
    332c:	47a8      	blx	r5
    332e:	4304      	orrs	r4, r0
    3330:	b2e4      	uxtb	r4, r4
    3332:	9801      	ldr	r0, [sp, #4]
    3334:	47a8      	blx	r5
    3336:	4320      	orrs	r0, r4
};
    3338:	b2c0      	uxtb	r0, r0
    333a:	b003      	add	sp, #12
    333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3340:	00003261 	.word	0x00003261
    3344:	00002eb5 	.word	0x00002eb5

00003348 <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
					  struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
					  struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					  struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    3348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    334c:	b087      	sub	sp, #28
    334e:	4607      	mov	r7, r0
    3350:	468b      	mov	fp, r1
    3352:	9204      	str	r2, [sp, #16]
    3354:	9305      	str	r3, [sp, #20]
    3356:	9d15      	ldr	r5, [sp, #84]	; 0x54
    3358:	9e16      	ldr	r6, [sp, #88]	; 0x58
	//bottom row left
	initialize(hall_sensor_1);
    335a:	f8df a140 	ldr.w	sl, [pc, #320]	; 349c <SensorArray_Init+0x154>
    335e:	47d0      	blx	sl
	begin(hall_sensor_1,1,0,0,false, i2c, io);
    3360:	9602      	str	r6, [sp, #8]
    3362:	9501      	str	r5, [sp, #4]
    3364:	2400      	movs	r4, #0
    3366:	9400      	str	r4, [sp, #0]
    3368:	4623      	mov	r3, r4
    336a:	4622      	mov	r2, r4
    336c:	2101      	movs	r1, #1
    336e:	4638      	mov	r0, r7
    3370:	f8df 912c 	ldr.w	r9, [pc, #300]	; 34a0 <SensorArray_Init+0x158>
    3374:	47c8      	blx	r9
	triggerInitialize(hall_sensor_1, i2c, io);
    3376:	4632      	mov	r2, r6
    3378:	4629      	mov	r1, r5
    337a:	4638      	mov	r0, r7
    337c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 34a4 <SensorArray_Init+0x15c>
    3380:	47c0      	blx	r8
	delay_ms(5);
    3382:	2005      	movs	r0, #5
    3384:	4f44      	ldr	r7, [pc, #272]	; (3498 <SensorArray_Init+0x150>)
    3386:	47b8      	blx	r7
	
	//bottom row middle
	initialize(hall_sensor_2);
    3388:	4658      	mov	r0, fp
    338a:	47d0      	blx	sl
	begin(hall_sensor_2,1,0,1,false, i2c, io);
    338c:	9602      	str	r6, [sp, #8]
    338e:	9501      	str	r5, [sp, #4]
    3390:	9400      	str	r4, [sp, #0]
    3392:	2301      	movs	r3, #1
    3394:	4622      	mov	r2, r4
    3396:	4619      	mov	r1, r3
    3398:	4658      	mov	r0, fp
    339a:	47c8      	blx	r9
	triggerInitialize(hall_sensor_2, i2c, io);
    339c:	4632      	mov	r2, r6
    339e:	4629      	mov	r1, r5
    33a0:	4658      	mov	r0, fp
    33a2:	47c0      	blx	r8
	delay_ms(5);
    33a4:	2005      	movs	r0, #5
    33a6:	47b8      	blx	r7
	
	//bottom row right
	initialize(hall_sensor_3);
    33a8:	f8dd b010 	ldr.w	fp, [sp, #16]
    33ac:	4658      	mov	r0, fp
    33ae:	47d0      	blx	sl
	begin(hall_sensor_3,1,1,0,false, i2c, io);
    33b0:	9602      	str	r6, [sp, #8]
    33b2:	9501      	str	r5, [sp, #4]
    33b4:	9400      	str	r4, [sp, #0]
    33b6:	4623      	mov	r3, r4
    33b8:	2201      	movs	r2, #1
    33ba:	4611      	mov	r1, r2
    33bc:	4658      	mov	r0, fp
    33be:	47c8      	blx	r9
	triggerInitialize(hall_sensor_3, i2c, io);
    33c0:	4632      	mov	r2, r6
    33c2:	4629      	mov	r1, r5
    33c4:	4658      	mov	r0, fp
    33c6:	47c0      	blx	r8
	delay_ms(5);
    33c8:	2005      	movs	r0, #5
    33ca:	47b8      	blx	r7
	
	//middle row left
	initialize(hall_sensor_4);
    33cc:	f8dd b014 	ldr.w	fp, [sp, #20]
    33d0:	4658      	mov	r0, fp
    33d2:	47d0      	blx	sl
	begin(hall_sensor_4,2,0,0,false, i2c, io);
    33d4:	9602      	str	r6, [sp, #8]
    33d6:	9501      	str	r5, [sp, #4]
    33d8:	9400      	str	r4, [sp, #0]
    33da:	4623      	mov	r3, r4
    33dc:	4622      	mov	r2, r4
    33de:	2102      	movs	r1, #2
    33e0:	4658      	mov	r0, fp
    33e2:	47c8      	blx	r9
	triggerInitialize(hall_sensor_4, i2c, io);
    33e4:	4632      	mov	r2, r6
    33e6:	4629      	mov	r1, r5
    33e8:	4658      	mov	r0, fp
    33ea:	47c0      	blx	r8
	delay_ms(5);
    33ec:	2005      	movs	r0, #5
    33ee:	47b8      	blx	r7
	
	//middle row middle
	initialize(hall_sensor_5);
    33f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    33f2:	47d0      	blx	sl
	begin(hall_sensor_5,2,0,1,false, i2c, io);
    33f4:	9602      	str	r6, [sp, #8]
    33f6:	9501      	str	r5, [sp, #4]
    33f8:	9400      	str	r4, [sp, #0]
    33fa:	2301      	movs	r3, #1
    33fc:	4622      	mov	r2, r4
    33fe:	2102      	movs	r1, #2
    3400:	9810      	ldr	r0, [sp, #64]	; 0x40
    3402:	47c8      	blx	r9
	triggerInitialize(hall_sensor_5, i2c, io);
    3404:	4632      	mov	r2, r6
    3406:	4629      	mov	r1, r5
    3408:	9810      	ldr	r0, [sp, #64]	; 0x40
    340a:	47c0      	blx	r8
	delay_ms(5);
    340c:	2005      	movs	r0, #5
    340e:	47b8      	blx	r7
	
	//middle row right
	initialize(hall_sensor_6);
    3410:	9811      	ldr	r0, [sp, #68]	; 0x44
    3412:	47d0      	blx	sl
	begin(hall_sensor_6,2,1,0,false, i2c, io);
    3414:	9602      	str	r6, [sp, #8]
    3416:	9501      	str	r5, [sp, #4]
    3418:	9400      	str	r4, [sp, #0]
    341a:	4623      	mov	r3, r4
    341c:	2201      	movs	r2, #1
    341e:	2102      	movs	r1, #2
    3420:	9811      	ldr	r0, [sp, #68]	; 0x44
    3422:	47c8      	blx	r9
	triggerInitialize(hall_sensor_6, i2c, io);
    3424:	4632      	mov	r2, r6
    3426:	4629      	mov	r1, r5
    3428:	9811      	ldr	r0, [sp, #68]	; 0x44
    342a:	47c0      	blx	r8
	delay_ms(5);
    342c:	2005      	movs	r0, #5
    342e:	47b8      	blx	r7
	
	//top row left
	initialize(hall_sensor_7);
    3430:	9812      	ldr	r0, [sp, #72]	; 0x48
    3432:	47d0      	blx	sl
	begin(hall_sensor_7,3,0,0,false, i2c, io);
    3434:	9602      	str	r6, [sp, #8]
    3436:	9501      	str	r5, [sp, #4]
    3438:	9400      	str	r4, [sp, #0]
    343a:	4623      	mov	r3, r4
    343c:	4622      	mov	r2, r4
    343e:	2103      	movs	r1, #3
    3440:	9812      	ldr	r0, [sp, #72]	; 0x48
    3442:	47c8      	blx	r9
	triggerInitialize(hall_sensor_7, i2c, io);
    3444:	4632      	mov	r2, r6
    3446:	4629      	mov	r1, r5
    3448:	9812      	ldr	r0, [sp, #72]	; 0x48
    344a:	47c0      	blx	r8
	delay_ms(5);
    344c:	2005      	movs	r0, #5
    344e:	47b8      	blx	r7
	
	//top row middle
	initialize(hall_sensor_8);
    3450:	9813      	ldr	r0, [sp, #76]	; 0x4c
    3452:	47d0      	blx	sl
	begin(hall_sensor_8,3,0,1,false, i2c, io);
    3454:	9602      	str	r6, [sp, #8]
    3456:	9501      	str	r5, [sp, #4]
    3458:	9400      	str	r4, [sp, #0]
    345a:	2301      	movs	r3, #1
    345c:	4622      	mov	r2, r4
    345e:	2103      	movs	r1, #3
    3460:	9813      	ldr	r0, [sp, #76]	; 0x4c
    3462:	47c8      	blx	r9
	triggerInitialize(hall_sensor_8, i2c, io);
    3464:	4632      	mov	r2, r6
    3466:	4629      	mov	r1, r5
    3468:	9813      	ldr	r0, [sp, #76]	; 0x4c
    346a:	47c0      	blx	r8
	delay_ms(5);
    346c:	2005      	movs	r0, #5
    346e:	47b8      	blx	r7
	
	//top row right
	initialize(hall_sensor_9);
    3470:	9814      	ldr	r0, [sp, #80]	; 0x50
    3472:	47d0      	blx	sl
	begin(hall_sensor_9,3,1,0,false, i2c, io);
    3474:	9602      	str	r6, [sp, #8]
    3476:	9501      	str	r5, [sp, #4]
    3478:	9400      	str	r4, [sp, #0]
    347a:	4623      	mov	r3, r4
    347c:	2201      	movs	r2, #1
    347e:	2103      	movs	r1, #3
    3480:	9814      	ldr	r0, [sp, #80]	; 0x50
    3482:	47c8      	blx	r9
	triggerInitialize(hall_sensor_9, i2c, io);
    3484:	4632      	mov	r2, r6
    3486:	4629      	mov	r1, r5
    3488:	9814      	ldr	r0, [sp, #80]	; 0x50
    348a:	47c0      	blx	r8
	delay_ms(5);
    348c:	2005      	movs	r0, #5
    348e:	47b8      	blx	r7
}
    3490:	b007      	add	sp, #28
    3492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3496:	bf00      	nop
    3498:	00000a81 	.word	0x00000a81
    349c:	00002715 	.word	0x00002715
    34a0:	000030e1 	.word	0x000030e1
    34a4:	00003221 	.word	0x00003221

000034a8 <update_struct_values>:


void update_struct_values(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    34a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34aa:	4604      	mov	r4, r0
		//allocate every data to corresponding struct value
		sensor_row->b_x_top = hall_sensor_top->data.x;
    34ac:	edd1 7a13 	vldr	s15, [r1, #76]	; 0x4c
    34b0:	edc0 7a00 	vstr	s15, [r0]
		sensor_row->b_y_top = hall_sensor_top->data.y;
    34b4:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
    34b8:	ed80 7a03 	vstr	s14, [r0, #12]
		sensor_row->b_z_top = hall_sensor_top->data.z;
    34bc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    34be:	6181      	str	r1, [r0, #24]
		
		sensor_row->b_x_middle = hall_sensor_middle->data.x;
    34c0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    34c2:	6041      	str	r1, [r0, #4]
		sensor_row->b_y_middle = hall_sensor_middle->data.y;
    34c4:	6d11      	ldr	r1, [r2, #80]	; 0x50
    34c6:	6101      	str	r1, [r0, #16]
		sensor_row->b_z_middle = hall_sensor_middle->data.z;
    34c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
    34ca:	61c2      	str	r2, [r0, #28]
		
		sensor_row->b_x_bottom = hall_sensor_bottom->data.x;
    34cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    34ce:	6082      	str	r2, [r0, #8]
		sensor_row->b_y_bottom = hall_sensor_bottom->data.y;
    34d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    34d2:	6142      	str	r2, [r0, #20]
		sensor_row->b_z_bottom = hall_sensor_bottom->data.z;
    34d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    34d6:	6203      	str	r3, [r0, #32]
		
		//Combine X and Y Axis Into Br
		sensor_row->b_r_top = (sensor_row->b_x_top*sensor_row->b_x_top) + (sensor_row->b_y_top*sensor_row->b_y_top);
    34d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    34dc:	ee27 7a07 	vmul.f32	s14, s14, s14
    34e0:	ee77 7a87 	vadd.f32	s15, s15, s14
    34e4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
		sensor_row->b_r_top = sqrt(sensor_row->b_r_top);
    34e8:	4f16      	ldr	r7, [pc, #88]	; (3544 <update_struct_values+0x9c>)
    34ea:	ee17 0a90 	vmov	r0, s15
    34ee:	47b8      	blx	r7
    34f0:	4e15      	ldr	r6, [pc, #84]	; (3548 <update_struct_values+0xa0>)
    34f2:	47b0      	blx	r6
    34f4:	4d15      	ldr	r5, [pc, #84]	; (354c <update_struct_values+0xa4>)
    34f6:	47a8      	blx	r5
    34f8:	6260      	str	r0, [r4, #36]	; 0x24

		sensor_row->b_r_middle = (sensor_row->b_x_middle*sensor_row->b_x_middle) + (sensor_row->b_y_middle*sensor_row->b_y_middle);
    34fa:	edd4 7a01 	vldr	s15, [r4, #4]
    34fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3502:	ed94 7a04 	vldr	s14, [r4, #16]
    3506:	ee27 7a07 	vmul.f32	s14, s14, s14
    350a:	ee77 7a87 	vadd.f32	s15, s15, s14
    350e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		sensor_row->b_r_middle = sqrt(sensor_row->b_r_middle);
    3512:	ee17 0a90 	vmov	r0, s15
    3516:	47b8      	blx	r7
    3518:	47b0      	blx	r6
    351a:	47a8      	blx	r5
    351c:	62a0      	str	r0, [r4, #40]	; 0x28
		
		sensor_row->b_r_bottom = (sensor_row->b_x_bottom*sensor_row->b_x_bottom) + (sensor_row->b_y_bottom *sensor_row->b_y_bottom );
    351e:	edd4 7a02 	vldr	s15, [r4, #8]
    3522:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3526:	ed94 7a05 	vldr	s14, [r4, #20]
    352a:	ee27 7a07 	vmul.f32	s14, s14, s14
    352e:	ee77 7a87 	vadd.f32	s15, s15, s14
    3532:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
    3536:	ee17 0a90 	vmov	r0, s15
    353a:	47b8      	blx	r7
    353c:	47b0      	blx	r6
    353e:	47a8      	blx	r5
    3540:	62e0      	str	r0, [r4, #44]	; 0x2c
    3542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3544:	00006259 	.word	0x00006259
    3548:	00005d59 	.word	0x00005d59
    354c:	00006861 	.word	0x00006861

00003550 <mag_to_force>:
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
		*/
}


void mag_to_force(uint8_t row_select, struct sensorRow_Values *sensor_row){
    3550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3554:	ed2d 8b06 	vpush	{d8-d10}
    3558:	b089      	sub	sp, #36	; 0x24
    355a:	468a      	mov	sl, r1
	
	switch(row_select){
    355c:	2802      	cmp	r0, #2
    355e:	f000 862d 	beq.w	41bc <mag_to_force+0xc6c>
    3562:	2803      	cmp	r0, #3
    3564:	f001 844e 	beq.w	4e04 <mag_to_force+0x18b4>
    3568:	2801      	cmp	r0, #1
    356a:	d004      	beq.n	3576 <mag_to_force+0x26>
	
	sensor_row->force_z_bottom = 35.2728 + (-0.0130*sensor_row->b_r_top) + (0.0084*hall_sensor_bottom->data.z);
	sensor_row->force_r_bottom = 9.9403 + (-0.0075*sensor_row->b_r_top) + (0.0013*hall_sensor_bottom->data.z);
	*/
	}
    356c:	b009      	add	sp, #36	; 0x24
    356e:	ecbd 8b06 	vpop	{d8-d10}
    3572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3576:	edd1 8a00 	vldr	s17, [r1]
    357a:	4dcb      	ldr	r5, [pc, #812]	; (38a8 <mag_to_force+0x358>)
    357c:	ee18 0a90 	vmov	r0, s17
    3580:	47a8      	blx	r5
    3582:	4cca      	ldr	r4, [pc, #808]	; (38ac <mag_to_force+0x35c>)
    3584:	a39c      	add	r3, pc, #624	; (adr r3, 37f8 <mag_to_force+0x2a8>)
    3586:	e9d3 2300 	ldrd	r2, r3, [r3]
    358a:	47a0      	blx	r4
    358c:	4ec8      	ldr	r6, [pc, #800]	; (38b0 <mag_to_force+0x360>)
    358e:	4602      	mov	r2, r0
    3590:	460b      	mov	r3, r1
    3592:	a19b      	add	r1, pc, #620	; (adr r1, 3800 <mag_to_force+0x2b0>)
    3594:	e9d1 0100 	ldrd	r0, r1, [r1]
    3598:	47b0      	blx	r6
    359a:	4680      	mov	r8, r0
    359c:	4689      	mov	r9, r1
    359e:	ed9a 8a06 	vldr	s16, [sl, #24]
    35a2:	ee18 0a10 	vmov	r0, s16
    35a6:	47a8      	blx	r5
    35a8:	e9cd 0100 	strd	r0, r1, [sp]
    35ac:	a396      	add	r3, pc, #600	; (adr r3, 3808 <mag_to_force+0x2b8>)
    35ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    35b2:	47a0      	blx	r4
    35b4:	4fbf      	ldr	r7, [pc, #764]	; (38b4 <mag_to_force+0x364>)
    35b6:	4602      	mov	r2, r0
    35b8:	460b      	mov	r3, r1
    35ba:	4640      	mov	r0, r8
    35bc:	4649      	mov	r1, r9
    35be:	47b8      	blx	r7
    35c0:	4680      	mov	r8, r0
    35c2:	4689      	mov	r9, r1
    35c4:	ee28 9aa8 	vmul.f32	s18, s17, s17
    35c8:	ee19 0a10 	vmov	r0, s18
    35cc:	47a8      	blx	r5
    35ce:	a390      	add	r3, pc, #576	; (adr r3, 3810 <mag_to_force+0x2c0>)
    35d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35d4:	47a0      	blx	r4
    35d6:	4602      	mov	r2, r0
    35d8:	460b      	mov	r3, r1
    35da:	4640      	mov	r0, r8
    35dc:	4649      	mov	r1, r9
    35de:	47b8      	blx	r7
    35e0:	4680      	mov	r8, r0
    35e2:	4689      	mov	r9, r1
    35e4:	ee68 7a88 	vmul.f32	s15, s17, s16
    35e8:	ee17 0a90 	vmov	r0, s15
    35ec:	47a8      	blx	r5
    35ee:	a38a      	add	r3, pc, #552	; (adr r3, 3818 <mag_to_force+0x2c8>)
    35f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35f4:	47a0      	blx	r4
    35f6:	4602      	mov	r2, r0
    35f8:	460b      	mov	r3, r1
    35fa:	4640      	mov	r0, r8
    35fc:	4649      	mov	r1, r9
    35fe:	47b0      	blx	r6
    3600:	4680      	mov	r8, r0
    3602:	4689      	mov	r9, r1
    3604:	ee28 aa08 	vmul.f32	s20, s16, s16
    3608:	ee1a 0a10 	vmov	r0, s20
    360c:	47a8      	blx	r5
    360e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3612:	a383      	add	r3, pc, #524	; (adr r3, 3820 <mag_to_force+0x2d0>)
    3614:	e9d3 2300 	ldrd	r2, r3, [r3]
    3618:	47a0      	blx	r4
    361a:	4602      	mov	r2, r0
    361c:	460b      	mov	r3, r1
    361e:	4640      	mov	r0, r8
    3620:	4649      	mov	r1, r9
    3622:	47b8      	blx	r7
    3624:	4680      	mov	r8, r0
    3626:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3628:	ee68 7a09 	vmul.f32	s15, s16, s18
    362c:	ee17 0a90 	vmov	r0, s15
    3630:	47a8      	blx	r5
    3632:	a37d      	add	r3, pc, #500	; (adr r3, 3828 <mag_to_force+0x2d8>)
    3634:	e9d3 2300 	ldrd	r2, r3, [r3]
    3638:	47a0      	blx	r4
    363a:	4602      	mov	r2, r0
    363c:	460b      	mov	r3, r1
    363e:	4640      	mov	r0, r8
    3640:	4649      	mov	r1, r9
    3642:	47b8      	blx	r7
    3644:	4680      	mov	r8, r0
    3646:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3648:	ee68 7a8a 	vmul.f32	s15, s17, s20
    364c:	ee17 0a90 	vmov	r0, s15
    3650:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3652:	a377      	add	r3, pc, #476	; (adr r3, 3830 <mag_to_force+0x2e0>)
    3654:	e9d3 2300 	ldrd	r2, r3, [r3]
    3658:	47a0      	blx	r4
    365a:	4602      	mov	r2, r0
    365c:	460b      	mov	r3, r1
    365e:	4640      	mov	r0, r8
    3660:	4649      	mov	r1, r9
    3662:	47b0      	blx	r6
    3664:	4680      	mov	r8, r0
    3666:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3668:	ee68 7a0a 	vmul.f32	s15, s16, s20
    366c:	ee17 0a90 	vmov	r0, s15
    3670:	47a8      	blx	r5
    3672:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3676:	a370      	add	r3, pc, #448	; (adr r3, 3838 <mag_to_force+0x2e8>)
    3678:	e9d3 2300 	ldrd	r2, r3, [r3]
    367c:	47a0      	blx	r4
    367e:	4602      	mov	r2, r0
    3680:	460b      	mov	r3, r1
    3682:	4640      	mov	r0, r8
    3684:	4649      	mov	r1, r9
    3686:	47b8      	blx	r7
    3688:	f8df b22c 	ldr.w	fp, [pc, #556]	; 38b8 <mag_to_force+0x368>
    368c:	47d8      	blx	fp
    368e:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3692:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3696:	ed9a 9a03 	vldr	s18, [sl, #12]
    369a:	ee19 0a10 	vmov	r0, s18
    369e:	47a8      	blx	r5
    36a0:	a367      	add	r3, pc, #412	; (adr r3, 3840 <mag_to_force+0x2f0>)
    36a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    36a6:	47a0      	blx	r4
    36a8:	4602      	mov	r2, r0
    36aa:	460b      	mov	r3, r1
    36ac:	a166      	add	r1, pc, #408	; (adr r1, 3848 <mag_to_force+0x2f8>)
    36ae:	e9d1 0100 	ldrd	r0, r1, [r1]
    36b2:	47b0      	blx	r6
    36b4:	4680      	mov	r8, r0
    36b6:	4689      	mov	r9, r1
    36b8:	a365      	add	r3, pc, #404	; (adr r3, 3850 <mag_to_force+0x300>)
    36ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    36be:	e9dd 0100 	ldrd	r0, r1, [sp]
    36c2:	47a0      	blx	r4
    36c4:	4602      	mov	r2, r0
    36c6:	460b      	mov	r3, r1
    36c8:	4640      	mov	r0, r8
    36ca:	4649      	mov	r1, r9
    36cc:	47b8      	blx	r7
    36ce:	4680      	mov	r8, r0
    36d0:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    36d2:	ee69 9a09 	vmul.f32	s19, s18, s18
    36d6:	ee19 0a90 	vmov	r0, s19
    36da:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    36dc:	a35e      	add	r3, pc, #376	; (adr r3, 3858 <mag_to_force+0x308>)
    36de:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e2:	47a0      	blx	r4
    36e4:	4602      	mov	r2, r0
    36e6:	460b      	mov	r3, r1
    36e8:	4640      	mov	r0, r8
    36ea:	4649      	mov	r1, r9
    36ec:	47b8      	blx	r7
    36ee:	4680      	mov	r8, r0
    36f0:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    36f2:	ee68 7a09 	vmul.f32	s15, s16, s18
    36f6:	ee17 0a90 	vmov	r0, s15
    36fa:	47a8      	blx	r5
    36fc:	a358      	add	r3, pc, #352	; (adr r3, 3860 <mag_to_force+0x310>)
    36fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3702:	47a0      	blx	r4
    3704:	4602      	mov	r2, r0
    3706:	460b      	mov	r3, r1
    3708:	4640      	mov	r0, r8
    370a:	4649      	mov	r1, r9
    370c:	47b0      	blx	r6
    370e:	4680      	mov	r8, r0
    3710:	4689      	mov	r9, r1
    3712:	a355      	add	r3, pc, #340	; (adr r3, 3868 <mag_to_force+0x318>)
    3714:	e9d3 2300 	ldrd	r2, r3, [r3]
    3718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    371c:	47a0      	blx	r4
    371e:	4602      	mov	r2, r0
    3720:	460b      	mov	r3, r1
    3722:	4640      	mov	r0, r8
    3724:	4649      	mov	r1, r9
    3726:	47b8      	blx	r7
    3728:	4680      	mov	r8, r0
    372a:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    372c:	ee68 7a29 	vmul.f32	s15, s16, s19
    3730:	ee17 0a90 	vmov	r0, s15
    3734:	47a8      	blx	r5
    3736:	a34e      	add	r3, pc, #312	; (adr r3, 3870 <mag_to_force+0x320>)
    3738:	e9d3 2300 	ldrd	r2, r3, [r3]
    373c:	47a0      	blx	r4
    373e:	4602      	mov	r2, r0
    3740:	460b      	mov	r3, r1
    3742:	4640      	mov	r0, r8
    3744:	4649      	mov	r1, r9
    3746:	47b8      	blx	r7
    3748:	4680      	mov	r8, r0
    374a:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    374c:	ee6a 7a09 	vmul.f32	s15, s20, s18
    3750:	ee17 0a90 	vmov	r0, s15
    3754:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3756:	a348      	add	r3, pc, #288	; (adr r3, 3878 <mag_to_force+0x328>)
    3758:	e9d3 2300 	ldrd	r2, r3, [r3]
    375c:	47a0      	blx	r4
    375e:	4602      	mov	r2, r0
    3760:	460b      	mov	r3, r1
    3762:	4640      	mov	r0, r8
    3764:	4649      	mov	r1, r9
    3766:	47b0      	blx	r6
    3768:	4680      	mov	r8, r0
    376a:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    376c:	a344      	add	r3, pc, #272	; (adr r3, 3880 <mag_to_force+0x330>)
    376e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3776:	47a0      	blx	r4
    3778:	4602      	mov	r2, r0
    377a:	460b      	mov	r3, r1
    377c:	4640      	mov	r0, r8
    377e:	4649      	mov	r1, r9
    3780:	47b8      	blx	r7
    3782:	47d8      	blx	fp
    3784:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3788:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    378c:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    3790:	ee19 0a90 	vmov	r0, s19
    3794:	47a8      	blx	r5
    3796:	a33c      	add	r3, pc, #240	; (adr r3, 3888 <mag_to_force+0x338>)
    3798:	e9d3 2300 	ldrd	r2, r3, [r3]
    379c:	47a0      	blx	r4
    379e:	4602      	mov	r2, r0
    37a0:	460b      	mov	r3, r1
    37a2:	a13b      	add	r1, pc, #236	; (adr r1, 3890 <mag_to_force+0x340>)
    37a4:	e9d1 0100 	ldrd	r0, r1, [r1]
    37a8:	47b0      	blx	r6
    37aa:	4680      	mov	r8, r0
    37ac:	4689      	mov	r9, r1
    37ae:	a33a      	add	r3, pc, #232	; (adr r3, 3898 <mag_to_force+0x348>)
    37b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    37b4:	e9dd 0100 	ldrd	r0, r1, [sp]
    37b8:	47a0      	blx	r4
    37ba:	4602      	mov	r2, r0
    37bc:	460b      	mov	r3, r1
    37be:	4640      	mov	r0, r8
    37c0:	4649      	mov	r1, r9
    37c2:	47b8      	blx	r7
    37c4:	4680      	mov	r8, r0
    37c6:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    37c8:	ee69 aaa9 	vmul.f32	s21, s19, s19
    37cc:	ee1a 0a90 	vmov	r0, s21
    37d0:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    37d2:	a333      	add	r3, pc, #204	; (adr r3, 38a0 <mag_to_force+0x350>)
    37d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    37d8:	47a0      	blx	r4
    37da:	4602      	mov	r2, r0
    37dc:	460b      	mov	r3, r1
    37de:	4640      	mov	r0, r8
    37e0:	4649      	mov	r1, r9
    37e2:	47b8      	blx	r7
    37e4:	4680      	mov	r8, r0
    37e6:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    37e8:	ee68 7a29 	vmul.f32	s15, s16, s19
    37ec:	ee17 0a90 	vmov	r0, s15
    37f0:	47a8      	blx	r5
    37f2:	e063      	b.n	38bc <mag_to_force+0x36c>
    37f4:	f3af 8000 	nop.w
    37f8:	8f041462 	.word	0x8f041462
    37fc:	3f6aef6f 	.word	0x3f6aef6f
    3800:	c28f5c29 	.word	0xc28f5c29
    3804:	402aa8f5 	.word	0x402aa8f5
    3808:	229e9079 	.word	0x229e9079
    380c:	3f6b8887 	.word	0x3f6b8887
    3810:	d646eb6e 	.word	0xd646eb6e
    3814:	3ea84b1c 	.word	0x3ea84b1c
    3818:	521dd696 	.word	0x521dd696
    381c:	3ea4ce9e 	.word	0x3ea4ce9e
    3820:	8b46aa0f 	.word	0x8b46aa0f
    3824:	3e91cf89 	.word	0x3e91cf89
    3828:	05b88164 	.word	0x05b88164
    382c:	3dcadc6f 	.word	0x3dcadc6f
    3830:	c6957207 	.word	0xc6957207
    3834:	3dba9bb1 	.word	0x3dba9bb1
    3838:	54aa19eb 	.word	0x54aa19eb
    383c:	3d9d014f 	.word	0x3d9d014f
    3840:	328a96c7 	.word	0x328a96c7
    3844:	3f3faac0 	.word	0x3f3faac0
    3848:	4fdf3b64 	.word	0x4fdf3b64
    384c:	4006978d 	.word	0x4006978d
    3850:	4662bae0 	.word	0x4662bae0
    3854:	3f507b78 	.word	0x3f507b78
    3858:	1dbb855a 	.word	0x1dbb855a
    385c:	3ea17b5b 	.word	0x3ea17b5b
    3860:	f2d94d7a 	.word	0xf2d94d7a
    3864:	3e9ac354 	.word	0x3e9ac354
    3868:	8ed8f651 	.word	0x8ed8f651
    386c:	3e821e90 	.word	0x3e821e90
    3870:	37757ffe 	.word	0x37757ffe
    3874:	3dc19631 	.word	0x3dc19631
    3878:	8cce8eea 	.word	0x8cce8eea
    387c:	3db7f827 	.word	0x3db7f827
    3880:	7c871c2d 	.word	0x7c871c2d
    3884:	3d953cf8 	.word	0x3d953cf8
    3888:	94ccab3f 	.word	0x94ccab3f
    388c:	3f72dfd6 	.word	0x3f72dfd6
    3890:	eb851eb8 	.word	0xeb851eb8
    3894:	40387851 	.word	0x40387851
    3898:	9f51697f 	.word	0x9f51697f
    389c:	3f7b0ee4 	.word	0x3f7b0ee4
    38a0:	fec17451 	.word	0xfec17451
    38a4:	3e9ad482 	.word	0x3e9ad482
    38a8:	00006259 	.word	0x00006259
    38ac:	00006301 	.word	0x00006301
    38b0:	00005f99 	.word	0x00005f99
    38b4:	00005f9d 	.word	0x00005f9d
    38b8:	00006861 	.word	0x00006861
    38bc:	a3f5      	add	r3, pc, #980	; (adr r3, 3c94 <mag_to_force+0x744>)
    38be:	e9d3 2300 	ldrd	r2, r3, [r3]
    38c2:	47a0      	blx	r4
    38c4:	4602      	mov	r2, r0
    38c6:	460b      	mov	r3, r1
    38c8:	4640      	mov	r0, r8
    38ca:	4649      	mov	r1, r9
    38cc:	47b0      	blx	r6
    38ce:	4680      	mov	r8, r0
    38d0:	4689      	mov	r9, r1
    38d2:	a3f2      	add	r3, pc, #968	; (adr r3, 3c9c <mag_to_force+0x74c>)
    38d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    38d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    38dc:	47a0      	blx	r4
    38de:	4602      	mov	r2, r0
    38e0:	460b      	mov	r3, r1
    38e2:	4640      	mov	r0, r8
    38e4:	4649      	mov	r1, r9
    38e6:	47b8      	blx	r7
    38e8:	4680      	mov	r8, r0
    38ea:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    38ec:	ee68 7a2a 	vmul.f32	s15, s16, s21
    38f0:	ee17 0a90 	vmov	r0, s15
    38f4:	47a8      	blx	r5
    38f6:	a3eb      	add	r3, pc, #940	; (adr r3, 3ca4 <mag_to_force+0x754>)
    38f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    38fc:	47a0      	blx	r4
    38fe:	4602      	mov	r2, r0
    3900:	460b      	mov	r3, r1
    3902:	4640      	mov	r0, r8
    3904:	4649      	mov	r1, r9
    3906:	47b8      	blx	r7
    3908:	4680      	mov	r8, r0
    390a:	4689      	mov	r9, r1
	
    390c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3910:	ee17 0a90 	vmov	r0, s15
    3914:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3916:	a3e5      	add	r3, pc, #916	; (adr r3, 3cac <mag_to_force+0x75c>)
    3918:	e9d3 2300 	ldrd	r2, r3, [r3]
    391c:	47a0      	blx	r4
    391e:	4602      	mov	r2, r0
    3920:	460b      	mov	r3, r1
    3922:	4640      	mov	r0, r8
    3924:	4649      	mov	r1, r9
    3926:	47b0      	blx	r6
    3928:	4680      	mov	r8, r0
    392a:	4689      	mov	r9, r1
	
    392c:	a3e1      	add	r3, pc, #900	; (adr r3, 3cb4 <mag_to_force+0x764>)
    392e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3936:	47a0      	blx	r4
    3938:	4602      	mov	r2, r0
    393a:	460b      	mov	r3, r1
    393c:	4640      	mov	r0, r8
    393e:	4649      	mov	r1, r9
    3940:	47b8      	blx	r7
    3942:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3944:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3948:	ee68 8aa8 	vmul.f32	s17, s17, s17
    394c:	ee29 9a09 	vmul.f32	s18, s18, s18
    3950:	ee78 8a89 	vadd.f32	s17, s17, s18
    3954:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3958:	ee18 0a90 	vmov	r0, s17
    395c:	47a8      	blx	r5
    395e:	4bcc      	ldr	r3, [pc, #816]	; (3c90 <mag_to_force+0x740>)
    3960:	4798      	blx	r3
    3962:	47d8      	blx	fp
    3964:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3968:	edda 8a01 	vldr	s17, [sl, #4]
    396c:	ee18 0a90 	vmov	r0, s17
    3970:	47a8      	blx	r5
    3972:	a39b      	add	r3, pc, #620	; (adr r3, 3be0 <mag_to_force+0x690>)
    3974:	e9d3 2300 	ldrd	r2, r3, [r3]
    3978:	47a0      	blx	r4
    397a:	4602      	mov	r2, r0
    397c:	460b      	mov	r3, r1
    397e:	a19a      	add	r1, pc, #616	; (adr r1, 3be8 <mag_to_force+0x698>)
    3980:	e9d1 0100 	ldrd	r0, r1, [r1]
    3984:	47b0      	blx	r6
    3986:	4680      	mov	r8, r0
    3988:	4689      	mov	r9, r1
    398a:	ed9a 8a07 	vldr	s16, [sl, #28]
    398e:	ee18 0a10 	vmov	r0, s16
    3992:	47a8      	blx	r5
    3994:	e9cd 0100 	strd	r0, r1, [sp]
    3998:	a395      	add	r3, pc, #596	; (adr r3, 3bf0 <mag_to_force+0x6a0>)
    399a:	e9d3 2300 	ldrd	r2, r3, [r3]
    399e:	47a0      	blx	r4
    39a0:	4602      	mov	r2, r0
    39a2:	460b      	mov	r3, r1
    39a4:	4640      	mov	r0, r8
    39a6:	4649      	mov	r1, r9
    39a8:	47b8      	blx	r7
    39aa:	4680      	mov	r8, r0
    39ac:	4689      	mov	r9, r1
    39ae:	ee28 9aa8 	vmul.f32	s18, s17, s17
    39b2:	ee19 0a10 	vmov	r0, s18
    39b6:	47a8      	blx	r5
    39b8:	a38f      	add	r3, pc, #572	; (adr r3, 3bf8 <mag_to_force+0x6a8>)
    39ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    39be:	47a0      	blx	r4
    39c0:	4602      	mov	r2, r0
    39c2:	460b      	mov	r3, r1
    39c4:	4640      	mov	r0, r8
    39c6:	4649      	mov	r1, r9
    39c8:	47b8      	blx	r7
    39ca:	4680      	mov	r8, r0
    39cc:	4689      	mov	r9, r1
    39ce:	ee68 7a88 	vmul.f32	s15, s17, s16
    39d2:	ee17 0a90 	vmov	r0, s15
    39d6:	47a8      	blx	r5
    39d8:	a389      	add	r3, pc, #548	; (adr r3, 3c00 <mag_to_force+0x6b0>)
    39da:	e9d3 2300 	ldrd	r2, r3, [r3]
    39de:	47a0      	blx	r4
    39e0:	4602      	mov	r2, r0
    39e2:	460b      	mov	r3, r1
    39e4:	4640      	mov	r0, r8
    39e6:	4649      	mov	r1, r9
    39e8:	47b0      	blx	r6
    39ea:	4680      	mov	r8, r0
    39ec:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    39ee:	ee28 aa08 	vmul.f32	s20, s16, s16
    39f2:	ee1a 0a10 	vmov	r0, s20
    39f6:	47a8      	blx	r5
    39f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    39fc:	a382      	add	r3, pc, #520	; (adr r3, 3c08 <mag_to_force+0x6b8>)
    39fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a02:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3a04:	4602      	mov	r2, r0
    3a06:	460b      	mov	r3, r1
    3a08:	4640      	mov	r0, r8
    3a0a:	4649      	mov	r1, r9
    3a0c:	47b8      	blx	r7
    3a0e:	4680      	mov	r8, r0
    3a10:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3a12:	ee68 7a09 	vmul.f32	s15, s16, s18
    3a16:	ee17 0a90 	vmov	r0, s15
    3a1a:	47a8      	blx	r5
    3a1c:	a37c      	add	r3, pc, #496	; (adr r3, 3c10 <mag_to_force+0x6c0>)
    3a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a22:	47a0      	blx	r4
    3a24:	4602      	mov	r2, r0
    3a26:	460b      	mov	r3, r1
    3a28:	4640      	mov	r0, r8
    3a2a:	4649      	mov	r1, r9
    3a2c:	47b8      	blx	r7
    3a2e:	4680      	mov	r8, r0
    3a30:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3a32:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3a36:	ee17 0a90 	vmov	r0, s15
    3a3a:	47a8      	blx	r5
    3a3c:	a376      	add	r3, pc, #472	; (adr r3, 3c18 <mag_to_force+0x6c8>)
    3a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a42:	47a0      	blx	r4
    3a44:	4602      	mov	r2, r0
    3a46:	460b      	mov	r3, r1
    3a48:	4640      	mov	r0, r8
    3a4a:	4649      	mov	r1, r9
    3a4c:	47b0      	blx	r6
    3a4e:	4680      	mov	r8, r0
    3a50:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3a52:	ee68 7a0a 	vmul.f32	s15, s16, s20
    3a56:	ee17 0a90 	vmov	r0, s15
    3a5a:	47a8      	blx	r5
    3a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3a60:	a36f      	add	r3, pc, #444	; (adr r3, 3c20 <mag_to_force+0x6d0>)
    3a62:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a66:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3a68:	4602      	mov	r2, r0
    3a6a:	460b      	mov	r3, r1
    3a6c:	4640      	mov	r0, r8
    3a6e:	4649      	mov	r1, r9
    3a70:	47b8      	blx	r7
    3a72:	47d8      	blx	fp
    3a74:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3a78:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3a7c:	ed9a 9a04 	vldr	s18, [sl, #16]
    3a80:	ee19 0a10 	vmov	r0, s18
    3a84:	47a8      	blx	r5
    3a86:	a368      	add	r3, pc, #416	; (adr r3, 3c28 <mag_to_force+0x6d8>)
    3a88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a8c:	47a0      	blx	r4
    3a8e:	4602      	mov	r2, r0
    3a90:	460b      	mov	r3, r1
    3a92:	a167      	add	r1, pc, #412	; (adr r1, 3c30 <mag_to_force+0x6e0>)
    3a94:	e9d1 0100 	ldrd	r0, r1, [r1]
    3a98:	47b0      	blx	r6
    3a9a:	4680      	mov	r8, r0
    3a9c:	4689      	mov	r9, r1
    3a9e:	a366      	add	r3, pc, #408	; (adr r3, 3c38 <mag_to_force+0x6e8>)
    3aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
    3aa8:	47a0      	blx	r4
    3aaa:	4602      	mov	r2, r0
    3aac:	460b      	mov	r3, r1
    3aae:	4640      	mov	r0, r8
    3ab0:	4649      	mov	r1, r9
    3ab2:	47b8      	blx	r7
    3ab4:	4680      	mov	r8, r0
    3ab6:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3ab8:	ee69 9a09 	vmul.f32	s19, s18, s18
    3abc:	ee19 0a90 	vmov	r0, s19
    3ac0:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3ac2:	a35f      	add	r3, pc, #380	; (adr r3, 3c40 <mag_to_force+0x6f0>)
    3ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ac8:	47a0      	blx	r4
    3aca:	4602      	mov	r2, r0
    3acc:	460b      	mov	r3, r1
    3ace:	4640      	mov	r0, r8
    3ad0:	4649      	mov	r1, r9
    3ad2:	47b0      	blx	r6
    3ad4:	4680      	mov	r8, r0
    3ad6:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3ad8:	ee68 7a09 	vmul.f32	s15, s16, s18
    3adc:	ee17 0a90 	vmov	r0, s15
    3ae0:	47a8      	blx	r5
    3ae2:	a359      	add	r3, pc, #356	; (adr r3, 3c48 <mag_to_force+0x6f8>)
    3ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ae8:	47a0      	blx	r4
    3aea:	4602      	mov	r2, r0
    3aec:	460b      	mov	r3, r1
    3aee:	4640      	mov	r0, r8
    3af0:	4649      	mov	r1, r9
    3af2:	47b0      	blx	r6
    3af4:	4680      	mov	r8, r0
    3af6:	4689      	mov	r9, r1
    3af8:	a355      	add	r3, pc, #340	; (adr r3, 3c50 <mag_to_force+0x700>)
    3afa:	e9d3 2300 	ldrd	r2, r3, [r3]
    3afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3b02:	47a0      	blx	r4
    3b04:	4602      	mov	r2, r0
    3b06:	460b      	mov	r3, r1
    3b08:	4640      	mov	r0, r8
    3b0a:	4649      	mov	r1, r9
    3b0c:	47b8      	blx	r7
    3b0e:	4680      	mov	r8, r0
    3b10:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3b12:	ee68 7a29 	vmul.f32	s15, s16, s19
    3b16:	ee17 0a90 	vmov	r0, s15
    3b1a:	47a8      	blx	r5
    3b1c:	a34e      	add	r3, pc, #312	; (adr r3, 3c58 <mag_to_force+0x708>)
    3b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b22:	47a0      	blx	r4
    3b24:	4602      	mov	r2, r0
    3b26:	460b      	mov	r3, r1
    3b28:	4640      	mov	r0, r8
    3b2a:	4649      	mov	r1, r9
    3b2c:	47b0      	blx	r6
    3b2e:	4680      	mov	r8, r0
    3b30:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3b32:	ee6a 7a09 	vmul.f32	s15, s20, s18
    3b36:	ee17 0a90 	vmov	r0, s15
    3b3a:	47a8      	blx	r5
    3b3c:	a348      	add	r3, pc, #288	; (adr r3, 3c60 <mag_to_force+0x710>)
    3b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b42:	47a0      	blx	r4
    3b44:	4602      	mov	r2, r0
    3b46:	460b      	mov	r3, r1
    3b48:	4640      	mov	r0, r8
    3b4a:	4649      	mov	r1, r9
    3b4c:	47b0      	blx	r6
    3b4e:	4680      	mov	r8, r0
    3b50:	4689      	mov	r9, r1
	
    3b52:	a345      	add	r3, pc, #276	; (adr r3, 3c68 <mag_to_force+0x718>)
    3b54:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3b5c:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3b5e:	4602      	mov	r2, r0
    3b60:	460b      	mov	r3, r1
    3b62:	4640      	mov	r0, r8
    3b64:	4649      	mov	r1, r9
    3b66:	47b8      	blx	r7
    3b68:	47d8      	blx	fp
    3b6a:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3b6e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3b72:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    3b76:	ee19 0a90 	vmov	r0, s19
    3b7a:	47a8      	blx	r5
    3b7c:	a33c      	add	r3, pc, #240	; (adr r3, 3c70 <mag_to_force+0x720>)
    3b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b82:	47a0      	blx	r4
    3b84:	4602      	mov	r2, r0
    3b86:	460b      	mov	r3, r1
    3b88:	a13b      	add	r1, pc, #236	; (adr r1, 3c78 <mag_to_force+0x728>)
    3b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
    3b8e:	47b0      	blx	r6
    3b90:	4680      	mov	r8, r0
    3b92:	4689      	mov	r9, r1
    3b94:	a33a      	add	r3, pc, #232	; (adr r3, 3c80 <mag_to_force+0x730>)
    3b96:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
    3b9e:	47a0      	blx	r4
    3ba0:	4602      	mov	r2, r0
    3ba2:	460b      	mov	r3, r1
    3ba4:	4640      	mov	r0, r8
    3ba6:	4649      	mov	r1, r9
    3ba8:	47b8      	blx	r7
    3baa:	4680      	mov	r8, r0
    3bac:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3bae:	ee69 aaa9 	vmul.f32	s21, s19, s19
    3bb2:	ee1a 0a90 	vmov	r0, s21
    3bb6:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3bb8:	a333      	add	r3, pc, #204	; (adr r3, 3c88 <mag_to_force+0x738>)
    3bba:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bbe:	47a0      	blx	r4
    3bc0:	4602      	mov	r2, r0
    3bc2:	460b      	mov	r3, r1
    3bc4:	4640      	mov	r0, r8
    3bc6:	4649      	mov	r1, r9
    3bc8:	47b8      	blx	r7
    3bca:	4680      	mov	r8, r0
    3bcc:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3bce:	ee68 7a29 	vmul.f32	s15, s16, s19
    3bd2:	ee17 0a90 	vmov	r0, s15
    3bd6:	47a8      	blx	r5
    3bd8:	e070      	b.n	3cbc <mag_to_force+0x76c>
    3bda:	bf00      	nop
    3bdc:	f3af 8000 	nop.w
    3be0:	412c1a3a 	.word	0x412c1a3a
    3be4:	3f3286eb 	.word	0x3f3286eb
    3be8:	bc6a7efa 	.word	0xbc6a7efa
    3bec:	3ff69374 	.word	0x3ff69374
    3bf0:	92beb405 	.word	0x92beb405
    3bf4:	3f36e5f5 	.word	0x3f36e5f5
    3bf8:	a908d438 	.word	0xa908d438
    3bfc:	3e864e96 	.word	0x3e864e96
    3c00:	17c30410 	.word	0x17c30410
    3c04:	3e8a1af8 	.word	0x3e8a1af8
    3c08:	3d66d634 	.word	0x3d66d634
    3c0c:	3e632932 	.word	0x3e632932
    3c10:	1b4047b2 	.word	0x1b4047b2
    3c14:	3da8a10a 	.word	0x3da8a10a
    3c18:	6fcf44ac 	.word	0x6fcf44ac
    3c1c:	3da4129b 	.word	0x3da4129b
    3c20:	29e54c52 	.word	0x29e54c52
    3c24:	3d73af87 	.word	0x3d73af87
    3c28:	80f98fa3 	.word	0x80f98fa3
    3c2c:	3f726740 	.word	0x3f726740
    3c30:	ed916873 	.word	0xed916873
    3c34:	401f3f7c 	.word	0x401f3f7c
    3c38:	3dfb0d52 	.word	0x3dfb0d52
    3c3c:	3f654eb1 	.word	0x3f654eb1
    3c40:	a7d49e3c 	.word	0xa7d49e3c
    3c44:	3e7ceff5 	.word	0x3e7ceff5
    3c48:	4fba36fa 	.word	0x4fba36fa
    3c4c:	3ea8b079 	.word	0x3ea8b079
    3c50:	d77b216a 	.word	0xd77b216a
    3c54:	3e91a9bd 	.word	0x3e91a9bd
    3c58:	9612a3e2 	.word	0x9612a3e2
    3c5c:	3daa2579 	.word	0x3daa2579
    3c60:	82163668 	.word	0x82163668
    3c64:	3dbcbdc1 	.word	0x3dbcbdc1
    3c68:	9d1f8878 	.word	0x9d1f8878
    3c6c:	3da13b46 	.word	0x3da13b46
    3c70:	dad31fcd 	.word	0xdad31fcd
    3c74:	3f77b634 	.word	0x3f77b634
    3c78:	1eb851ec 	.word	0x1eb851ec
    3c7c:	402c6b85 	.word	0x402c6b85
    3c80:	bdcad14a 	.word	0xbdcad14a
    3c84:	3f70acc0 	.word	0x3f70acc0
    3c88:	60693e8b 	.word	0x60693e8b
    3c8c:	3ea1b6a0 	.word	0x3ea1b6a0
    3c90:	00005d59 	.word	0x00005d59
    3c94:	f40c67fe 	.word	0xf40c67fe
    3c98:	3ea64c02 	.word	0x3ea64c02
    3c9c:	02588cee 	.word	0x02588cee
    3ca0:	3ea1c2a7 	.word	0x3ea1c2a7
    3ca4:	884399b8 	.word	0x884399b8
    3ca8:	3d9e314d 	.word	0x3d9e314d
    3cac:	3cc5c3bb 	.word	0x3cc5c3bb
    3cb0:	3dbb0978 	.word	0x3dbb0978
    3cb4:	fe5cd623 	.word	0xfe5cd623
    3cb8:	3da74f44 	.word	0x3da74f44
    3cbc:	a3f6      	add	r3, pc, #984	; (adr r3, 4098 <mag_to_force+0xb48>)
    3cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cc2:	47a0      	blx	r4
    3cc4:	4602      	mov	r2, r0
    3cc6:	460b      	mov	r3, r1
    3cc8:	4640      	mov	r0, r8
    3cca:	4649      	mov	r1, r9
    3ccc:	47b0      	blx	r6
    3cce:	4680      	mov	r8, r0
    3cd0:	4689      	mov	r9, r1
    3cd2:	a3f3      	add	r3, pc, #972	; (adr r3, 40a0 <mag_to_force+0xb50>)
    3cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3cdc:	47a0      	blx	r4
    3cde:	4602      	mov	r2, r0
    3ce0:	460b      	mov	r3, r1
    3ce2:	4640      	mov	r0, r8
    3ce4:	4649      	mov	r1, r9
    3ce6:	47b8      	blx	r7
    3ce8:	4680      	mov	r8, r0
    3cea:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3cec:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3cf0:	ee17 0a90 	vmov	r0, s15
    3cf4:	47a8      	blx	r5
    3cf6:	a3ec      	add	r3, pc, #944	; (adr r3, 40a8 <mag_to_force+0xb58>)
    3cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cfc:	47a0      	blx	r4
    3cfe:	4602      	mov	r2, r0
    3d00:	460b      	mov	r3, r1
    3d02:	4640      	mov	r0, r8
    3d04:	4649      	mov	r1, r9
    3d06:	47b8      	blx	r7
    3d08:	4680      	mov	r8, r0
    3d0a:	4689      	mov	r9, r1
	
    3d0c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3d10:	ee17 0a90 	vmov	r0, s15
    3d14:	47a8      	blx	r5
    3d16:	a3e6      	add	r3, pc, #920	; (adr r3, 40b0 <mag_to_force+0xb60>)
    3d18:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d1c:	47a0      	blx	r4
    3d1e:	4602      	mov	r2, r0
    3d20:	460b      	mov	r3, r1
    3d22:	4640      	mov	r0, r8
    3d24:	4649      	mov	r1, r9
    3d26:	47b0      	blx	r6
    3d28:	4680      	mov	r8, r0
    3d2a:	4689      	mov	r9, r1
	
    3d2c:	a3e2      	add	r3, pc, #904	; (adr r3, 40b8 <mag_to_force+0xb68>)
    3d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3d36:	47a0      	blx	r4
	
    3d38:	4602      	mov	r2, r0
    3d3a:	460b      	mov	r3, r1
    3d3c:	4640      	mov	r0, r8
    3d3e:	4649      	mov	r1, r9
    3d40:	47b8      	blx	r7
    3d42:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3d44:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3d48:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3d4c:	ee29 9a09 	vmul.f32	s18, s18, s18
    3d50:	ee78 8a89 	vadd.f32	s17, s17, s18
    3d54:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3d58:	ee18 0a90 	vmov	r0, s17
    3d5c:	47a8      	blx	r5
    3d5e:	4bcc      	ldr	r3, [pc, #816]	; (4090 <mag_to_force+0xb40>)
    3d60:	4798      	blx	r3
    3d62:	47d8      	blx	fp
    3d64:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3d68:	ed9a 8a02 	vldr	s16, [sl, #8]
    3d6c:	ee18 0a10 	vmov	r0, s16
    3d70:	47a8      	blx	r5
    3d72:	a39b      	add	r3, pc, #620	; (adr r3, 3fe0 <mag_to_force+0xa90>)
    3d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d78:	47a0      	blx	r4
    3d7a:	4602      	mov	r2, r0
    3d7c:	460b      	mov	r3, r1
    3d7e:	a19a      	add	r1, pc, #616	; (adr r1, 3fe8 <mag_to_force+0xa98>)
    3d80:	e9d1 0100 	ldrd	r0, r1, [r1]
    3d84:	47b0      	blx	r6
    3d86:	4680      	mov	r8, r0
    3d88:	4689      	mov	r9, r1
    3d8a:	edda 8a08 	vldr	s17, [sl, #32]
    3d8e:	ee18 0a90 	vmov	r0, s17
    3d92:	47a8      	blx	r5
    3d94:	e9cd 0100 	strd	r0, r1, [sp]
    3d98:	a395      	add	r3, pc, #596	; (adr r3, 3ff0 <mag_to_force+0xaa0>)
    3d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d9e:	47a0      	blx	r4
    3da0:	4602      	mov	r2, r0
    3da2:	460b      	mov	r3, r1
    3da4:	4640      	mov	r0, r8
    3da6:	4649      	mov	r1, r9
    3da8:	47b0      	blx	r6
    3daa:	4680      	mov	r8, r0
    3dac:	4689      	mov	r9, r1
    3dae:	ee28 9a08 	vmul.f32	s18, s16, s16
    3db2:	ee19 0a10 	vmov	r0, s18
    3db6:	47a8      	blx	r5
    3db8:	a38f      	add	r3, pc, #572	; (adr r3, 3ff8 <mag_to_force+0xaa8>)
    3dba:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dbe:	47a0      	blx	r4
    3dc0:	4602      	mov	r2, r0
    3dc2:	460b      	mov	r3, r1
    3dc4:	4640      	mov	r0, r8
    3dc6:	4649      	mov	r1, r9
    3dc8:	47b0      	blx	r6
    3dca:	4680      	mov	r8, r0
    3dcc:	4689      	mov	r9, r1
    3dce:	ee68 7a28 	vmul.f32	s15, s16, s17
    3dd2:	ee17 0a90 	vmov	r0, s15
    3dd6:	47a8      	blx	r5
    3dd8:	a389      	add	r3, pc, #548	; (adr r3, 4000 <mag_to_force+0xab0>)
    3dda:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dde:	47a0      	blx	r4
    3de0:	4602      	mov	r2, r0
    3de2:	460b      	mov	r3, r1
    3de4:	4640      	mov	r0, r8
    3de6:	4649      	mov	r1, r9
    3de8:	47b0      	blx	r6
    3dea:	4680      	mov	r8, r0
    3dec:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3dee:	ee68 9aa8 	vmul.f32	s19, s17, s17
    3df2:	ee19 0a90 	vmov	r0, s19
    3df6:	47a8      	blx	r5
    3df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3dfc:	a382      	add	r3, pc, #520	; (adr r3, 4008 <mag_to_force+0xab8>)
    3dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e02:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3e04:	4602      	mov	r2, r0
    3e06:	460b      	mov	r3, r1
    3e08:	4640      	mov	r0, r8
    3e0a:	4649      	mov	r1, r9
    3e0c:	47b0      	blx	r6
    3e0e:	4680      	mov	r8, r0
    3e10:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3e12:	ee68 7a89 	vmul.f32	s15, s17, s18
    3e16:	ee17 0a90 	vmov	r0, s15
    3e1a:	47a8      	blx	r5
    3e1c:	a37c      	add	r3, pc, #496	; (adr r3, 4010 <mag_to_force+0xac0>)
    3e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e22:	47a0      	blx	r4
    3e24:	4602      	mov	r2, r0
    3e26:	460b      	mov	r3, r1
    3e28:	4640      	mov	r0, r8
    3e2a:	4649      	mov	r1, r9
    3e2c:	47b0      	blx	r6
    3e2e:	4680      	mov	r8, r0
    3e30:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3e32:	ee68 7a29 	vmul.f32	s15, s16, s19
    3e36:	ee17 0a90 	vmov	r0, s15
    3e3a:	47a8      	blx	r5
    3e3c:	a376      	add	r3, pc, #472	; (adr r3, 4018 <mag_to_force+0xac8>)
    3e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e42:	47a0      	blx	r4
    3e44:	4602      	mov	r2, r0
    3e46:	460b      	mov	r3, r1
    3e48:	4640      	mov	r0, r8
    3e4a:	4649      	mov	r1, r9
    3e4c:	47b0      	blx	r6
    3e4e:	4680      	mov	r8, r0
    3e50:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3e52:	ee68 7aa9 	vmul.f32	s15, s17, s19
    3e56:	ee17 0a90 	vmov	r0, s15
    3e5a:	47a8      	blx	r5
    3e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3e60:	a36f      	add	r3, pc, #444	; (adr r3, 4020 <mag_to_force+0xad0>)
    3e62:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e66:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3e68:	4602      	mov	r2, r0
    3e6a:	460b      	mov	r3, r1
    3e6c:	4640      	mov	r0, r8
    3e6e:	4649      	mov	r1, r9
    3e70:	47b0      	blx	r6
    3e72:	47d8      	blx	fp
    3e74:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3e78:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3e7c:	ed9a 9a05 	vldr	s18, [sl, #20]
    3e80:	ee19 0a10 	vmov	r0, s18
    3e84:	47a8      	blx	r5
    3e86:	a368      	add	r3, pc, #416	; (adr r3, 4028 <mag_to_force+0xad8>)
    3e88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e8c:	47a0      	blx	r4
    3e8e:	a368      	add	r3, pc, #416	; (adr r3, 4030 <mag_to_force+0xae0>)
    3e90:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e94:	47b0      	blx	r6
    3e96:	4680      	mov	r8, r0
    3e98:	4689      	mov	r9, r1
    3e9a:	a367      	add	r3, pc, #412	; (adr r3, 4038 <mag_to_force+0xae8>)
    3e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
    3ea4:	47a0      	blx	r4
    3ea6:	4602      	mov	r2, r0
    3ea8:	460b      	mov	r3, r1
    3eaa:	4640      	mov	r0, r8
    3eac:	4649      	mov	r1, r9
    3eae:	47b0      	blx	r6
    3eb0:	4680      	mov	r8, r0
    3eb2:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3eb4:	ee29 aa09 	vmul.f32	s20, s18, s18
    3eb8:	ee1a 0a10 	vmov	r0, s20
    3ebc:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3ebe:	a360      	add	r3, pc, #384	; (adr r3, 4040 <mag_to_force+0xaf0>)
    3ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ec4:	47a0      	blx	r4
    3ec6:	4602      	mov	r2, r0
    3ec8:	460b      	mov	r3, r1
    3eca:	4640      	mov	r0, r8
    3ecc:	4649      	mov	r1, r9
    3ece:	47b8      	blx	r7
    3ed0:	4680      	mov	r8, r0
    3ed2:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3ed4:	462e      	mov	r6, r5
    3ed6:	ee68 7a89 	vmul.f32	s15, s17, s18
    3eda:	ee17 0a90 	vmov	r0, s15
    3ede:	47a8      	blx	r5
    3ee0:	a359      	add	r3, pc, #356	; (adr r3, 4048 <mag_to_force+0xaf8>)
    3ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ee6:	47a0      	blx	r4
    3ee8:	463d      	mov	r5, r7
    3eea:	4602      	mov	r2, r0
    3eec:	460b      	mov	r3, r1
    3eee:	4640      	mov	r0, r8
    3ef0:	4649      	mov	r1, r9
    3ef2:	47b8      	blx	r7
    3ef4:	4680      	mov	r8, r0
    3ef6:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3ef8:	a355      	add	r3, pc, #340	; (adr r3, 4050 <mag_to_force+0xb00>)
    3efa:	e9d3 2300 	ldrd	r2, r3, [r3]
    3efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3f02:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3f04:	4f63      	ldr	r7, [pc, #396]	; (4094 <mag_to_force+0xb44>)
    3f06:	4602      	mov	r2, r0
    3f08:	460b      	mov	r3, r1
    3f0a:	4640      	mov	r0, r8
    3f0c:	4649      	mov	r1, r9
    3f0e:	47b8      	blx	r7
    3f10:	4680      	mov	r8, r0
    3f12:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3f14:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3f18:	ee17 0a90 	vmov	r0, s15
    3f1c:	47b0      	blx	r6
    3f1e:	a34e      	add	r3, pc, #312	; (adr r3, 4058 <mag_to_force+0xb08>)
    3f20:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f24:	47a0      	blx	r4
    3f26:	4602      	mov	r2, r0
    3f28:	460b      	mov	r3, r1
    3f2a:	4640      	mov	r0, r8
    3f2c:	4649      	mov	r1, r9
    3f2e:	47a8      	blx	r5
    3f30:	4680      	mov	r8, r0
    3f32:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3f34:	ee69 7a89 	vmul.f32	s15, s19, s18
    3f38:	ee17 0a90 	vmov	r0, s15
    3f3c:	47b0      	blx	r6
    3f3e:	a348      	add	r3, pc, #288	; (adr r3, 4060 <mag_to_force+0xb10>)
    3f40:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f44:	47a0      	blx	r4
    3f46:	4602      	mov	r2, r0
    3f48:	460b      	mov	r3, r1
    3f4a:	4640      	mov	r0, r8
    3f4c:	4649      	mov	r1, r9
    3f4e:	47a8      	blx	r5
    3f50:	4680      	mov	r8, r0
    3f52:	4689      	mov	r9, r1
		break;
    3f54:	a344      	add	r3, pc, #272	; (adr r3, 4068 <mag_to_force+0xb18>)
    3f56:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3f5e:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3f60:	4602      	mov	r2, r0
    3f62:	460b      	mov	r3, r1
    3f64:	4640      	mov	r0, r8
    3f66:	4649      	mov	r1, r9
    3f68:	47b8      	blx	r7
    3f6a:	47d8      	blx	fp
    3f6c:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3f70:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3f74:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    3f78:	ee19 0a10 	vmov	r0, s18
    3f7c:	47b0      	blx	r6
    3f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3f82:	a33b      	add	r3, pc, #236	; (adr r3, 4070 <mag_to_force+0xb20>)
    3f84:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f88:	47a0      	blx	r4
    3f8a:	4602      	mov	r2, r0
    3f8c:	460b      	mov	r3, r1
    3f8e:	a13a      	add	r1, pc, #232	; (adr r1, 4078 <mag_to_force+0xb28>)
    3f90:	e9d1 0100 	ldrd	r0, r1, [r1]
    3f94:	47b8      	blx	r7
    3f96:	4680      	mov	r8, r0
    3f98:	4689      	mov	r9, r1
    3f9a:	a339      	add	r3, pc, #228	; (adr r3, 4080 <mag_to_force+0xb30>)
    3f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
    3fa4:	47a0      	blx	r4
    3fa6:	4602      	mov	r2, r0
    3fa8:	460b      	mov	r3, r1
    3faa:	4640      	mov	r0, r8
    3fac:	4649      	mov	r1, r9
    3fae:	47a8      	blx	r5
    3fb0:	4680      	mov	r8, r0
    3fb2:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3fb4:	ee69 7a09 	vmul.f32	s15, s18, s18
    3fb8:	ee17 0a90 	vmov	r0, s15
    3fbc:	47b0      	blx	r6
    3fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3fc2:	a331      	add	r3, pc, #196	; (adr r3, 4088 <mag_to_force+0xb38>)
    3fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fc8:	47a0      	blx	r4
    3fca:	4602      	mov	r2, r0
    3fcc:	460b      	mov	r3, r1
    3fce:	4640      	mov	r0, r8
    3fd0:	4649      	mov	r1, r9
    3fd2:	47a8      	blx	r5
    3fd4:	4680      	mov	r8, r0
    3fd6:	4689      	mov	r9, r1
    3fd8:	e072      	b.n	40c0 <mag_to_force+0xb70>
    3fda:	bf00      	nop
    3fdc:	f3af 8000 	nop.w
    3fe0:	6b50b0f2 	.word	0x6b50b0f2
    3fe4:	3f6c779a 	.word	0x3f6c779a
    3fe8:	c28f5c29 	.word	0xc28f5c29
    3fec:	c024a8f5 	.word	0xc024a8f5
    3ff0:	d5171e2a 	.word	0xd5171e2a
    3ff4:	3f68a222 	.word	0x3f68a222
    3ff8:	69edc5c6 	.word	0x69edc5c6
    3ffc:	3ea5a9a9 	.word	0x3ea5a9a9
    4000:	81bc997e 	.word	0x81bc997e
    4004:	3ea8aec1 	.word	0x3ea8aec1
    4008:	de9fb9ed 	.word	0xde9fb9ed
    400c:	3e9247cb 	.word	0x3e9247cb
    4010:	82393435 	.word	0x82393435
    4014:	3dc8377c 	.word	0x3dc8377c
    4018:	e19c6262 	.word	0xe19c6262
    401c:	3dc1773a 	.word	0x3dc1773a
    4020:	7476128f 	.word	0x7476128f
    4024:	3da06d3c 	.word	0x3da06d3c
    4028:	b0fadf2f 	.word	0xb0fadf2f
    402c:	3f65a8de 	.word	0x3f65a8de
    4030:	9ba5e354 	.word	0x9ba5e354
    4034:	400120c4 	.word	0x400120c4
    4038:	ef1fddec 	.word	0xef1fddec
    403c:	3f432b55 	.word	0x3f432b55
    4040:	ebb865dc 	.word	0xebb865dc
    4044:	3ea2ee70 	.word	0x3ea2ee70
    4048:	ea8666cf 	.word	0xea8666cf
    404c:	3e853bb5 	.word	0x3e853bb5
    4050:	5799a806 	.word	0x5799a806
    4054:	3e6193c0 	.word	0x3e6193c0
    4058:	cece3cda 	.word	0xcece3cda
    405c:	3dc62920 	.word	0x3dc62920
    4060:	d5564f58 	.word	0xd5564f58
    4064:	3d683df5 	.word	0x3d683df5
    4068:	664dc709 	.word	0x664dc709
    406c:	3d626c2b 	.word	0x3d626c2b
    4070:	c4cdfaca 	.word	0xc4cdfaca
    4074:	3f762174 	.word	0x3f762174
    4078:	f5c28f5c 	.word	0xf5c28f5c
    407c:	40399c28 	.word	0x40399c28
    4080:	5cc42635 	.word	0x5cc42635
    4084:	3f7db552 	.word	0x3f7db552
    4088:	88e4e2e6 	.word	0x88e4e2e6
    408c:	3eb215f9 	.word	0x3eb215f9
    4090:	00005d59 	.word	0x00005d59
    4094:	00005f99 	.word	0x00005f99
    4098:	02547d8d 	.word	0x02547d8d
    409c:	3ea9b22c 	.word	0x3ea9b22c
    40a0:	227c1fc4 	.word	0x227c1fc4
    40a4:	3e96b3f3 	.word	0x3e96b3f3
    40a8:	f946a57c 	.word	0xf946a57c
    40ac:	3db0a587 	.word	0x3db0a587
    40b0:	82163668 	.word	0x82163668
    40b4:	3dbcbdc1 	.word	0x3dbcbdc1
    40b8:	02de4486 	.word	0x02de4486
    40bc:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    40c0:	a334      	add	r3, pc, #208	; (adr r3, 4194 <mag_to_force+0xc44>)
    40c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    40c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    40ca:	47a0      	blx	r4
    40cc:	4602      	mov	r2, r0
    40ce:	460b      	mov	r3, r1
    40d0:	e9dd 0100 	ldrd	r0, r1, [sp]
    40d4:	47a0      	blx	r4
    40d6:	4602      	mov	r2, r0
    40d8:	460b      	mov	r3, r1
    40da:	4640      	mov	r0, r8
    40dc:	4649      	mov	r1, r9
    40de:	47b8      	blx	r7
    40e0:	4680      	mov	r8, r0
    40e2:	4689      	mov	r9, r1
    40e4:	a32d      	add	r3, pc, #180	; (adr r3, 419c <mag_to_force+0xc4c>)
    40e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    40ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    40ee:	47a0      	blx	r4
    40f0:	4602      	mov	r2, r0
    40f2:	460b      	mov	r3, r1
    40f4:	4640      	mov	r0, r8
    40f6:	4649      	mov	r1, r9
    40f8:	47a8      	blx	r5
    40fa:	4680      	mov	r8, r0
    40fc:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    40fe:	a329      	add	r3, pc, #164	; (adr r3, 41a4 <mag_to_force+0xc54>)
    4100:	e9d3 2300 	ldrd	r2, r3, [r3]
    4104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4108:	47a0      	blx	r4
    410a:	4602      	mov	r2, r0
    410c:	460b      	mov	r3, r1
    410e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4112:	47a0      	blx	r4
    4114:	4602      	mov	r2, r0
    4116:	460b      	mov	r3, r1
    4118:	4640      	mov	r0, r8
    411a:	4649      	mov	r1, r9
    411c:	47a8      	blx	r5
    411e:	4680      	mov	r8, r0
    4120:	4689      	mov	r9, r1
		break;
    4122:	a322      	add	r3, pc, #136	; (adr r3, 41ac <mag_to_force+0xc5c>)
    4124:	e9d3 2300 	ldrd	r2, r3, [r3]
    4128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    412c:	47a0      	blx	r4
    412e:	4602      	mov	r2, r0
    4130:	460b      	mov	r3, r1
    4132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4136:	47a0      	blx	r4
    4138:	4602      	mov	r2, r0
    413a:	460b      	mov	r3, r1
    413c:	4640      	mov	r0, r8
    413e:	4649      	mov	r1, r9
    4140:	47b8      	blx	r7
    4142:	4680      	mov	r8, r0
    4144:	4689      	mov	r9, r1
    4146:	a31b      	add	r3, pc, #108	; (adr r3, 41b4 <mag_to_force+0xc64>)
    4148:	e9d3 2300 	ldrd	r2, r3, [r3]
    414c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4150:	47a0      	blx	r4
	
    4152:	4602      	mov	r2, r0
    4154:	460b      	mov	r3, r1
    4156:	e9dd 0100 	ldrd	r0, r1, [sp]
    415a:	47a0      	blx	r4
		break;
    415c:	4602      	mov	r2, r0
    415e:	460b      	mov	r3, r1
    4160:	4640      	mov	r0, r8
    4162:	4649      	mov	r1, r9
    4164:	47a8      	blx	r5
    4166:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4168:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    416c:	ee28 8a08 	vmul.f32	s16, s16, s16
    4170:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4174:	ee38 8a28 	vadd.f32	s16, s16, s17
    4178:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    417c:	ee18 0a10 	vmov	r0, s16
    4180:	47b0      	blx	r6
    4182:	4b03      	ldr	r3, [pc, #12]	; (4190 <mag_to_force+0xc40>)
    4184:	4798      	blx	r3
    4186:	47d8      	blx	fp
    4188:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
		break;
    418c:	f7ff b9ee 	b.w	356c <mag_to_force+0x1c>
    4190:	00005d59 	.word	0x00005d59
    4194:	5a723736 	.word	0x5a723736
    4198:	3ea77381 	.word	0x3ea77381
    419c:	4e8b8a55 	.word	0x4e8b8a55
    41a0:	3ea47f97 	.word	0x3ea47f97
    41a4:	a48fe74d 	.word	0xa48fe74d
    41a8:	3dce7643 	.word	0x3dce7643
    41ac:	e61b6f11 	.word	0xe61b6f11
    41b0:	3db71428 	.word	0x3db71428
    41b4:	447e7fdf 	.word	0x447e7fdf
    41b8:	3dacd9e7 	.word	0x3dacd9e7
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    41bc:	edd1 8a00 	vldr	s17, [r1]
    41c0:	4dcb      	ldr	r5, [pc, #812]	; (44f0 <mag_to_force+0xfa0>)
    41c2:	ee18 0a90 	vmov	r0, s17
    41c6:	47a8      	blx	r5
    41c8:	4cca      	ldr	r4, [pc, #808]	; (44f4 <mag_to_force+0xfa4>)
    41ca:	a39d      	add	r3, pc, #628	; (adr r3, 4440 <mag_to_force+0xef0>)
    41cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    41d0:	47a0      	blx	r4
    41d2:	4ec9      	ldr	r6, [pc, #804]	; (44f8 <mag_to_force+0xfa8>)
    41d4:	4602      	mov	r2, r0
    41d6:	460b      	mov	r3, r1
    41d8:	a19b      	add	r1, pc, #620	; (adr r1, 4448 <mag_to_force+0xef8>)
    41da:	e9d1 0100 	ldrd	r0, r1, [r1]
    41de:	47b0      	blx	r6
    41e0:	4680      	mov	r8, r0
    41e2:	4689      	mov	r9, r1
    41e4:	ed9a 8a06 	vldr	s16, [sl, #24]
    41e8:	ee18 0a10 	vmov	r0, s16
    41ec:	47a8      	blx	r5
    41ee:	e9cd 0100 	strd	r0, r1, [sp]
    41f2:	a397      	add	r3, pc, #604	; (adr r3, 4450 <mag_to_force+0xf00>)
    41f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    41f8:	47a0      	blx	r4
    41fa:	4fc0      	ldr	r7, [pc, #768]	; (44fc <mag_to_force+0xfac>)
    41fc:	4602      	mov	r2, r0
    41fe:	460b      	mov	r3, r1
    4200:	4640      	mov	r0, r8
    4202:	4649      	mov	r1, r9
    4204:	47b8      	blx	r7
    4206:	4680      	mov	r8, r0
    4208:	4689      	mov	r9, r1
    420a:	ee28 9aa8 	vmul.f32	s18, s17, s17
    420e:	ee19 0a10 	vmov	r0, s18
    4212:	47a8      	blx	r5
    4214:	a390      	add	r3, pc, #576	; (adr r3, 4458 <mag_to_force+0xf08>)
    4216:	e9d3 2300 	ldrd	r2, r3, [r3]
    421a:	47a0      	blx	r4
    421c:	4602      	mov	r2, r0
    421e:	460b      	mov	r3, r1
    4220:	4640      	mov	r0, r8
    4222:	4649      	mov	r1, r9
    4224:	47b8      	blx	r7
    4226:	4680      	mov	r8, r0
    4228:	4689      	mov	r9, r1
    422a:	ee68 7a88 	vmul.f32	s15, s17, s16
    422e:	ee17 0a90 	vmov	r0, s15
    4232:	47a8      	blx	r5
    4234:	a38a      	add	r3, pc, #552	; (adr r3, 4460 <mag_to_force+0xf10>)
    4236:	e9d3 2300 	ldrd	r2, r3, [r3]
    423a:	47a0      	blx	r4
    423c:	4602      	mov	r2, r0
    423e:	460b      	mov	r3, r1
    4240:	4640      	mov	r0, r8
    4242:	4649      	mov	r1, r9
    4244:	47b0      	blx	r6
    4246:	4680      	mov	r8, r0
    4248:	4689      	mov	r9, r1
    424a:	ee28 aa08 	vmul.f32	s20, s16, s16
    424e:	ee1a 0a10 	vmov	r0, s20
    4252:	47a8      	blx	r5
    4254:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4258:	a383      	add	r3, pc, #524	; (adr r3, 4468 <mag_to_force+0xf18>)
    425a:	e9d3 2300 	ldrd	r2, r3, [r3]
    425e:	47a0      	blx	r4
    4260:	4602      	mov	r2, r0
    4262:	460b      	mov	r3, r1
    4264:	4640      	mov	r0, r8
    4266:	4649      	mov	r1, r9
    4268:	47b8      	blx	r7
    426a:	4680      	mov	r8, r0
    426c:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    426e:	ee68 7a09 	vmul.f32	s15, s16, s18
    4272:	ee17 0a90 	vmov	r0, s15
    4276:	47a8      	blx	r5
    4278:	a37d      	add	r3, pc, #500	; (adr r3, 4470 <mag_to_force+0xf20>)
    427a:	e9d3 2300 	ldrd	r2, r3, [r3]
    427e:	47a0      	blx	r4
    4280:	4602      	mov	r2, r0
    4282:	460b      	mov	r3, r1
    4284:	4640      	mov	r0, r8
    4286:	4649      	mov	r1, r9
    4288:	47b8      	blx	r7
    428a:	4680      	mov	r8, r0
    428c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    428e:	ee68 7a8a 	vmul.f32	s15, s17, s20
    4292:	ee17 0a90 	vmov	r0, s15
    4296:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4298:	a377      	add	r3, pc, #476	; (adr r3, 4478 <mag_to_force+0xf28>)
    429a:	e9d3 2300 	ldrd	r2, r3, [r3]
    429e:	47a0      	blx	r4
    42a0:	4602      	mov	r2, r0
    42a2:	460b      	mov	r3, r1
    42a4:	4640      	mov	r0, r8
    42a6:	4649      	mov	r1, r9
    42a8:	47b0      	blx	r6
    42aa:	4680      	mov	r8, r0
    42ac:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    42ae:	ee68 7a0a 	vmul.f32	s15, s16, s20
    42b2:	ee17 0a90 	vmov	r0, s15
    42b6:	47a8      	blx	r5
    42b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    42bc:	a370      	add	r3, pc, #448	; (adr r3, 4480 <mag_to_force+0xf30>)
    42be:	e9d3 2300 	ldrd	r2, r3, [r3]
    42c2:	47a0      	blx	r4
    42c4:	4602      	mov	r2, r0
    42c6:	460b      	mov	r3, r1
    42c8:	4640      	mov	r0, r8
    42ca:	4649      	mov	r1, r9
    42cc:	47b8      	blx	r7
    42ce:	f8df b230 	ldr.w	fp, [pc, #560]	; 4500 <mag_to_force+0xfb0>
    42d2:	47d8      	blx	fp
    42d4:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    42d8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    42dc:	ed9a 9a03 	vldr	s18, [sl, #12]
    42e0:	ee19 0a10 	vmov	r0, s18
    42e4:	47a8      	blx	r5
    42e6:	a368      	add	r3, pc, #416	; (adr r3, 4488 <mag_to_force+0xf38>)
    42e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    42ec:	47a0      	blx	r4
    42ee:	4602      	mov	r2, r0
    42f0:	460b      	mov	r3, r1
    42f2:	a167      	add	r1, pc, #412	; (adr r1, 4490 <mag_to_force+0xf40>)
    42f4:	e9d1 0100 	ldrd	r0, r1, [r1]
    42f8:	47b0      	blx	r6
    42fa:	4680      	mov	r8, r0
    42fc:	4689      	mov	r9, r1
    42fe:	a366      	add	r3, pc, #408	; (adr r3, 4498 <mag_to_force+0xf48>)
    4300:	e9d3 2300 	ldrd	r2, r3, [r3]
    4304:	e9dd 0100 	ldrd	r0, r1, [sp]
    4308:	47a0      	blx	r4
    430a:	4602      	mov	r2, r0
    430c:	460b      	mov	r3, r1
    430e:	4640      	mov	r0, r8
    4310:	4649      	mov	r1, r9
    4312:	47b8      	blx	r7
    4314:	4680      	mov	r8, r0
    4316:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4318:	ee69 9a09 	vmul.f32	s19, s18, s18
    431c:	ee19 0a90 	vmov	r0, s19
    4320:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4322:	a35f      	add	r3, pc, #380	; (adr r3, 44a0 <mag_to_force+0xf50>)
    4324:	e9d3 2300 	ldrd	r2, r3, [r3]
    4328:	47a0      	blx	r4
    432a:	4602      	mov	r2, r0
    432c:	460b      	mov	r3, r1
    432e:	4640      	mov	r0, r8
    4330:	4649      	mov	r1, r9
    4332:	47b8      	blx	r7
    4334:	4680      	mov	r8, r0
    4336:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4338:	ee68 7a09 	vmul.f32	s15, s16, s18
    433c:	ee17 0a90 	vmov	r0, s15
    4340:	47a8      	blx	r5
    4342:	a359      	add	r3, pc, #356	; (adr r3, 44a8 <mag_to_force+0xf58>)
    4344:	e9d3 2300 	ldrd	r2, r3, [r3]
    4348:	47a0      	blx	r4
    434a:	4602      	mov	r2, r0
    434c:	460b      	mov	r3, r1
    434e:	4640      	mov	r0, r8
    4350:	4649      	mov	r1, r9
    4352:	47b0      	blx	r6
    4354:	4680      	mov	r8, r0
    4356:	4689      	mov	r9, r1
    4358:	a355      	add	r3, pc, #340	; (adr r3, 44b0 <mag_to_force+0xf60>)
    435a:	e9d3 2300 	ldrd	r2, r3, [r3]
    435e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4362:	47a0      	blx	r4
    4364:	4602      	mov	r2, r0
    4366:	460b      	mov	r3, r1
    4368:	4640      	mov	r0, r8
    436a:	4649      	mov	r1, r9
    436c:	47b8      	blx	r7
    436e:	4680      	mov	r8, r0
    4370:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4372:	ee68 7a29 	vmul.f32	s15, s16, s19
    4376:	ee17 0a90 	vmov	r0, s15
    437a:	47a8      	blx	r5
    437c:	a34e      	add	r3, pc, #312	; (adr r3, 44b8 <mag_to_force+0xf68>)
    437e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4382:	47a0      	blx	r4
    4384:	4602      	mov	r2, r0
    4386:	460b      	mov	r3, r1
    4388:	4640      	mov	r0, r8
    438a:	4649      	mov	r1, r9
    438c:	47b8      	blx	r7
    438e:	4680      	mov	r8, r0
    4390:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4392:	ee6a 7a09 	vmul.f32	s15, s20, s18
    4396:	ee17 0a90 	vmov	r0, s15
    439a:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    439c:	a348      	add	r3, pc, #288	; (adr r3, 44c0 <mag_to_force+0xf70>)
    439e:	e9d3 2300 	ldrd	r2, r3, [r3]
    43a2:	47a0      	blx	r4
    43a4:	4602      	mov	r2, r0
    43a6:	460b      	mov	r3, r1
    43a8:	4640      	mov	r0, r8
    43aa:	4649      	mov	r1, r9
    43ac:	47b0      	blx	r6
    43ae:	4680      	mov	r8, r0
    43b0:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    43b2:	a345      	add	r3, pc, #276	; (adr r3, 44c8 <mag_to_force+0xf78>)
    43b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    43b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    43bc:	47a0      	blx	r4
    43be:	4602      	mov	r2, r0
    43c0:	460b      	mov	r3, r1
    43c2:	4640      	mov	r0, r8
    43c4:	4649      	mov	r1, r9
    43c6:	47b8      	blx	r7
    43c8:	47d8      	blx	fp
    43ca:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    43ce:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    43d2:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    43d6:	ee19 0a90 	vmov	r0, s19
    43da:	47a8      	blx	r5
    43dc:	a33c      	add	r3, pc, #240	; (adr r3, 44d0 <mag_to_force+0xf80>)
    43de:	e9d3 2300 	ldrd	r2, r3, [r3]
    43e2:	47a0      	blx	r4
    43e4:	4602      	mov	r2, r0
    43e6:	460b      	mov	r3, r1
    43e8:	a13b      	add	r1, pc, #236	; (adr r1, 44d8 <mag_to_force+0xf88>)
    43ea:	e9d1 0100 	ldrd	r0, r1, [r1]
    43ee:	47b0      	blx	r6
    43f0:	4680      	mov	r8, r0
    43f2:	4689      	mov	r9, r1
    43f4:	a33a      	add	r3, pc, #232	; (adr r3, 44e0 <mag_to_force+0xf90>)
    43f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    43fa:	e9dd 0100 	ldrd	r0, r1, [sp]
    43fe:	47a0      	blx	r4
    4400:	4602      	mov	r2, r0
    4402:	460b      	mov	r3, r1
    4404:	4640      	mov	r0, r8
    4406:	4649      	mov	r1, r9
    4408:	47b8      	blx	r7
    440a:	4680      	mov	r8, r0
    440c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    440e:	ee69 aaa9 	vmul.f32	s21, s19, s19
    4412:	ee1a 0a90 	vmov	r0, s21
    4416:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4418:	a333      	add	r3, pc, #204	; (adr r3, 44e8 <mag_to_force+0xf98>)
    441a:	e9d3 2300 	ldrd	r2, r3, [r3]
    441e:	47a0      	blx	r4
    4420:	4602      	mov	r2, r0
    4422:	460b      	mov	r3, r1
    4424:	4640      	mov	r0, r8
    4426:	4649      	mov	r1, r9
    4428:	47b8      	blx	r7
    442a:	4680      	mov	r8, r0
    442c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    442e:	ee68 7a29 	vmul.f32	s15, s16, s19
    4432:	ee17 0a90 	vmov	r0, s15
    4436:	47a8      	blx	r5
    4438:	e064      	b.n	4504 <mag_to_force+0xfb4>
    443a:	bf00      	nop
    443c:	f3af 8000 	nop.w
    4440:	8f041462 	.word	0x8f041462
    4444:	3f6aef6f 	.word	0x3f6aef6f
    4448:	c28f5c29 	.word	0xc28f5c29
    444c:	402aa8f5 	.word	0x402aa8f5
    4450:	229e9079 	.word	0x229e9079
    4454:	3f6b8887 	.word	0x3f6b8887
    4458:	d646eb6e 	.word	0xd646eb6e
    445c:	3ea84b1c 	.word	0x3ea84b1c
    4460:	521dd696 	.word	0x521dd696
    4464:	3ea4ce9e 	.word	0x3ea4ce9e
    4468:	8b46aa0f 	.word	0x8b46aa0f
    446c:	3e91cf89 	.word	0x3e91cf89
    4470:	05b88164 	.word	0x05b88164
    4474:	3dcadc6f 	.word	0x3dcadc6f
    4478:	c6957207 	.word	0xc6957207
    447c:	3dba9bb1 	.word	0x3dba9bb1
    4480:	54aa19eb 	.word	0x54aa19eb
    4484:	3d9d014f 	.word	0x3d9d014f
    4488:	328a96c7 	.word	0x328a96c7
    448c:	3f3faac0 	.word	0x3f3faac0
    4490:	4fdf3b64 	.word	0x4fdf3b64
    4494:	4006978d 	.word	0x4006978d
    4498:	4662bae0 	.word	0x4662bae0
    449c:	3f507b78 	.word	0x3f507b78
    44a0:	1dbb855a 	.word	0x1dbb855a
    44a4:	3ea17b5b 	.word	0x3ea17b5b
    44a8:	f2d94d7a 	.word	0xf2d94d7a
    44ac:	3e9ac354 	.word	0x3e9ac354
    44b0:	8ed8f651 	.word	0x8ed8f651
    44b4:	3e821e90 	.word	0x3e821e90
    44b8:	37757ffe 	.word	0x37757ffe
    44bc:	3dc19631 	.word	0x3dc19631
    44c0:	8cce8eea 	.word	0x8cce8eea
    44c4:	3db7f827 	.word	0x3db7f827
    44c8:	7c871c2d 	.word	0x7c871c2d
    44cc:	3d953cf8 	.word	0x3d953cf8
    44d0:	94ccab3f 	.word	0x94ccab3f
    44d4:	3f72dfd6 	.word	0x3f72dfd6
    44d8:	eb851eb8 	.word	0xeb851eb8
    44dc:	40387851 	.word	0x40387851
    44e0:	9f51697f 	.word	0x9f51697f
    44e4:	3f7b0ee4 	.word	0x3f7b0ee4
    44e8:	fec17451 	.word	0xfec17451
    44ec:	3e9ad482 	.word	0x3e9ad482
    44f0:	00006259 	.word	0x00006259
    44f4:	00006301 	.word	0x00006301
    44f8:	00005f99 	.word	0x00005f99
    44fc:	00005f9d 	.word	0x00005f9d
    4500:	00006861 	.word	0x00006861
    4504:	a3f5      	add	r3, pc, #980	; (adr r3, 48dc <mag_to_force+0x138c>)
    4506:	e9d3 2300 	ldrd	r2, r3, [r3]
    450a:	47a0      	blx	r4
    450c:	4602      	mov	r2, r0
    450e:	460b      	mov	r3, r1
    4510:	4640      	mov	r0, r8
    4512:	4649      	mov	r1, r9
    4514:	47b0      	blx	r6
    4516:	4680      	mov	r8, r0
    4518:	4689      	mov	r9, r1
    451a:	a3f2      	add	r3, pc, #968	; (adr r3, 48e4 <mag_to_force+0x1394>)
    451c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4524:	47a0      	blx	r4
    4526:	4602      	mov	r2, r0
    4528:	460b      	mov	r3, r1
    452a:	4640      	mov	r0, r8
    452c:	4649      	mov	r1, r9
    452e:	47b8      	blx	r7
    4530:	4680      	mov	r8, r0
    4532:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4534:	ee68 7a2a 	vmul.f32	s15, s16, s21
    4538:	ee17 0a90 	vmov	r0, s15
    453c:	47a8      	blx	r5
    453e:	a3eb      	add	r3, pc, #940	; (adr r3, 48ec <mag_to_force+0x139c>)
    4540:	e9d3 2300 	ldrd	r2, r3, [r3]
    4544:	47a0      	blx	r4
    4546:	4602      	mov	r2, r0
    4548:	460b      	mov	r3, r1
    454a:	4640      	mov	r0, r8
    454c:	4649      	mov	r1, r9
    454e:	47b8      	blx	r7
    4550:	4680      	mov	r8, r0
    4552:	4689      	mov	r9, r1
		
    4554:	ee6a 7a29 	vmul.f32	s15, s20, s19
    4558:	ee17 0a90 	vmov	r0, s15
    455c:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    455e:	a3e5      	add	r3, pc, #916	; (adr r3, 48f4 <mag_to_force+0x13a4>)
    4560:	e9d3 2300 	ldrd	r2, r3, [r3]
    4564:	47a0      	blx	r4
    4566:	4602      	mov	r2, r0
    4568:	460b      	mov	r3, r1
    456a:	4640      	mov	r0, r8
    456c:	4649      	mov	r1, r9
    456e:	47b0      	blx	r6
    4570:	4680      	mov	r8, r0
    4572:	4689      	mov	r9, r1
		
    4574:	a3e1      	add	r3, pc, #900	; (adr r3, 48fc <mag_to_force+0x13ac>)
    4576:	e9d3 2300 	ldrd	r2, r3, [r3]
    457a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    457e:	47a0      	blx	r4
    4580:	4602      	mov	r2, r0
    4582:	460b      	mov	r3, r1
    4584:	4640      	mov	r0, r8
    4586:	4649      	mov	r1, r9
    4588:	47b8      	blx	r7
    458a:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    458c:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4590:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4594:	ee29 9a09 	vmul.f32	s18, s18, s18
    4598:	ee78 8a89 	vadd.f32	s17, s17, s18
    459c:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    45a0:	ee18 0a90 	vmov	r0, s17
    45a4:	47a8      	blx	r5
    45a6:	4bcc      	ldr	r3, [pc, #816]	; (48d8 <mag_to_force+0x1388>)
    45a8:	4798      	blx	r3
    45aa:	47d8      	blx	fp
    45ac:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    45b0:	edda 8a01 	vldr	s17, [sl, #4]
    45b4:	ee18 0a90 	vmov	r0, s17
    45b8:	47a8      	blx	r5
    45ba:	a39b      	add	r3, pc, #620	; (adr r3, 4828 <mag_to_force+0x12d8>)
    45bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    45c0:	47a0      	blx	r4
    45c2:	4602      	mov	r2, r0
    45c4:	460b      	mov	r3, r1
    45c6:	a19a      	add	r1, pc, #616	; (adr r1, 4830 <mag_to_force+0x12e0>)
    45c8:	e9d1 0100 	ldrd	r0, r1, [r1]
    45cc:	47b0      	blx	r6
    45ce:	4680      	mov	r8, r0
    45d0:	4689      	mov	r9, r1
    45d2:	ed9a 8a07 	vldr	s16, [sl, #28]
    45d6:	ee18 0a10 	vmov	r0, s16
    45da:	47a8      	blx	r5
    45dc:	e9cd 0100 	strd	r0, r1, [sp]
    45e0:	a395      	add	r3, pc, #596	; (adr r3, 4838 <mag_to_force+0x12e8>)
    45e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    45e6:	47a0      	blx	r4
    45e8:	4602      	mov	r2, r0
    45ea:	460b      	mov	r3, r1
    45ec:	4640      	mov	r0, r8
    45ee:	4649      	mov	r1, r9
    45f0:	47b8      	blx	r7
    45f2:	4680      	mov	r8, r0
    45f4:	4689      	mov	r9, r1
    45f6:	ee28 9aa8 	vmul.f32	s18, s17, s17
    45fa:	ee19 0a10 	vmov	r0, s18
    45fe:	47a8      	blx	r5
    4600:	a38f      	add	r3, pc, #572	; (adr r3, 4840 <mag_to_force+0x12f0>)
    4602:	e9d3 2300 	ldrd	r2, r3, [r3]
    4606:	47a0      	blx	r4
    4608:	4602      	mov	r2, r0
    460a:	460b      	mov	r3, r1
    460c:	4640      	mov	r0, r8
    460e:	4649      	mov	r1, r9
    4610:	47b8      	blx	r7
    4612:	4680      	mov	r8, r0
    4614:	4689      	mov	r9, r1
    4616:	ee68 7a88 	vmul.f32	s15, s17, s16
    461a:	ee17 0a90 	vmov	r0, s15
    461e:	47a8      	blx	r5
    4620:	a389      	add	r3, pc, #548	; (adr r3, 4848 <mag_to_force+0x12f8>)
    4622:	e9d3 2300 	ldrd	r2, r3, [r3]
    4626:	47a0      	blx	r4
    4628:	4602      	mov	r2, r0
    462a:	460b      	mov	r3, r1
    462c:	4640      	mov	r0, r8
    462e:	4649      	mov	r1, r9
    4630:	47b0      	blx	r6
    4632:	4680      	mov	r8, r0
    4634:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4636:	ee28 aa08 	vmul.f32	s20, s16, s16
    463a:	ee1a 0a10 	vmov	r0, s20
    463e:	47a8      	blx	r5
    4640:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4644:	a382      	add	r3, pc, #520	; (adr r3, 4850 <mag_to_force+0x1300>)
    4646:	e9d3 2300 	ldrd	r2, r3, [r3]
    464a:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    464c:	4602      	mov	r2, r0
    464e:	460b      	mov	r3, r1
    4650:	4640      	mov	r0, r8
    4652:	4649      	mov	r1, r9
    4654:	47b8      	blx	r7
    4656:	4680      	mov	r8, r0
    4658:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    465a:	ee68 7a09 	vmul.f32	s15, s16, s18
    465e:	ee17 0a90 	vmov	r0, s15
    4662:	47a8      	blx	r5
    4664:	a37c      	add	r3, pc, #496	; (adr r3, 4858 <mag_to_force+0x1308>)
    4666:	e9d3 2300 	ldrd	r2, r3, [r3]
    466a:	47a0      	blx	r4
    466c:	4602      	mov	r2, r0
    466e:	460b      	mov	r3, r1
    4670:	4640      	mov	r0, r8
    4672:	4649      	mov	r1, r9
    4674:	47b8      	blx	r7
    4676:	4680      	mov	r8, r0
    4678:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    467a:	ee68 7a8a 	vmul.f32	s15, s17, s20
    467e:	ee17 0a90 	vmov	r0, s15
    4682:	47a8      	blx	r5
    4684:	a376      	add	r3, pc, #472	; (adr r3, 4860 <mag_to_force+0x1310>)
    4686:	e9d3 2300 	ldrd	r2, r3, [r3]
    468a:	47a0      	blx	r4
    468c:	4602      	mov	r2, r0
    468e:	460b      	mov	r3, r1
    4690:	4640      	mov	r0, r8
    4692:	4649      	mov	r1, r9
    4694:	47b0      	blx	r6
    4696:	4680      	mov	r8, r0
    4698:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    469a:	ee68 7a0a 	vmul.f32	s15, s16, s20
    469e:	ee17 0a90 	vmov	r0, s15
    46a2:	47a8      	blx	r5
    46a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    46a8:	a36f      	add	r3, pc, #444	; (adr r3, 4868 <mag_to_force+0x1318>)
    46aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    46ae:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    46b0:	4602      	mov	r2, r0
    46b2:	460b      	mov	r3, r1
    46b4:	4640      	mov	r0, r8
    46b6:	4649      	mov	r1, r9
    46b8:	47b8      	blx	r7
    46ba:	47d8      	blx	fp
    46bc:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    46c0:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    46c4:	ed9a 9a04 	vldr	s18, [sl, #16]
    46c8:	ee19 0a10 	vmov	r0, s18
    46cc:	47a8      	blx	r5
    46ce:	a368      	add	r3, pc, #416	; (adr r3, 4870 <mag_to_force+0x1320>)
    46d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    46d4:	47a0      	blx	r4
    46d6:	4602      	mov	r2, r0
    46d8:	460b      	mov	r3, r1
    46da:	a167      	add	r1, pc, #412	; (adr r1, 4878 <mag_to_force+0x1328>)
    46dc:	e9d1 0100 	ldrd	r0, r1, [r1]
    46e0:	47b0      	blx	r6
    46e2:	4680      	mov	r8, r0
    46e4:	4689      	mov	r9, r1
    46e6:	a366      	add	r3, pc, #408	; (adr r3, 4880 <mag_to_force+0x1330>)
    46e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    46ec:	e9dd 0100 	ldrd	r0, r1, [sp]
    46f0:	47a0      	blx	r4
    46f2:	4602      	mov	r2, r0
    46f4:	460b      	mov	r3, r1
    46f6:	4640      	mov	r0, r8
    46f8:	4649      	mov	r1, r9
    46fa:	47b8      	blx	r7
    46fc:	4680      	mov	r8, r0
    46fe:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4700:	ee69 9a09 	vmul.f32	s19, s18, s18
    4704:	ee19 0a90 	vmov	r0, s19
    4708:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    470a:	a35f      	add	r3, pc, #380	; (adr r3, 4888 <mag_to_force+0x1338>)
    470c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4710:	47a0      	blx	r4
    4712:	4602      	mov	r2, r0
    4714:	460b      	mov	r3, r1
    4716:	4640      	mov	r0, r8
    4718:	4649      	mov	r1, r9
    471a:	47b0      	blx	r6
    471c:	4680      	mov	r8, r0
    471e:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4720:	ee68 7a09 	vmul.f32	s15, s16, s18
    4724:	ee17 0a90 	vmov	r0, s15
    4728:	47a8      	blx	r5
    472a:	a359      	add	r3, pc, #356	; (adr r3, 4890 <mag_to_force+0x1340>)
    472c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4730:	47a0      	blx	r4
    4732:	4602      	mov	r2, r0
    4734:	460b      	mov	r3, r1
    4736:	4640      	mov	r0, r8
    4738:	4649      	mov	r1, r9
    473a:	47b0      	blx	r6
    473c:	4680      	mov	r8, r0
    473e:	4689      	mov	r9, r1
    4740:	a355      	add	r3, pc, #340	; (adr r3, 4898 <mag_to_force+0x1348>)
    4742:	e9d3 2300 	ldrd	r2, r3, [r3]
    4746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    474a:	47a0      	blx	r4
    474c:	4602      	mov	r2, r0
    474e:	460b      	mov	r3, r1
    4750:	4640      	mov	r0, r8
    4752:	4649      	mov	r1, r9
    4754:	47b8      	blx	r7
    4756:	4680      	mov	r8, r0
    4758:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    475a:	ee68 7a29 	vmul.f32	s15, s16, s19
    475e:	ee17 0a90 	vmov	r0, s15
    4762:	47a8      	blx	r5
    4764:	a34e      	add	r3, pc, #312	; (adr r3, 48a0 <mag_to_force+0x1350>)
    4766:	e9d3 2300 	ldrd	r2, r3, [r3]
    476a:	47a0      	blx	r4
    476c:	4602      	mov	r2, r0
    476e:	460b      	mov	r3, r1
    4770:	4640      	mov	r0, r8
    4772:	4649      	mov	r1, r9
    4774:	47b0      	blx	r6
    4776:	4680      	mov	r8, r0
    4778:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    477a:	ee6a 7a09 	vmul.f32	s15, s20, s18
    477e:	ee17 0a90 	vmov	r0, s15
    4782:	47a8      	blx	r5
    4784:	a348      	add	r3, pc, #288	; (adr r3, 48a8 <mag_to_force+0x1358>)
    4786:	e9d3 2300 	ldrd	r2, r3, [r3]
    478a:	47a0      	blx	r4
    478c:	4602      	mov	r2, r0
    478e:	460b      	mov	r3, r1
    4790:	4640      	mov	r0, r8
    4792:	4649      	mov	r1, r9
    4794:	47b0      	blx	r6
    4796:	4680      	mov	r8, r0
    4798:	4689      	mov	r9, r1
		
    479a:	a345      	add	r3, pc, #276	; (adr r3, 48b0 <mag_to_force+0x1360>)
    479c:	e9d3 2300 	ldrd	r2, r3, [r3]
    47a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    47a4:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    47a6:	4602      	mov	r2, r0
    47a8:	460b      	mov	r3, r1
    47aa:	4640      	mov	r0, r8
    47ac:	4649      	mov	r1, r9
    47ae:	47b8      	blx	r7
    47b0:	47d8      	blx	fp
    47b2:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    47b6:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    47ba:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    47be:	ee19 0a90 	vmov	r0, s19
    47c2:	47a8      	blx	r5
    47c4:	a33c      	add	r3, pc, #240	; (adr r3, 48b8 <mag_to_force+0x1368>)
    47c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    47ca:	47a0      	blx	r4
    47cc:	4602      	mov	r2, r0
    47ce:	460b      	mov	r3, r1
    47d0:	a13b      	add	r1, pc, #236	; (adr r1, 48c0 <mag_to_force+0x1370>)
    47d2:	e9d1 0100 	ldrd	r0, r1, [r1]
    47d6:	47b0      	blx	r6
    47d8:	4680      	mov	r8, r0
    47da:	4689      	mov	r9, r1
    47dc:	a33a      	add	r3, pc, #232	; (adr r3, 48c8 <mag_to_force+0x1378>)
    47de:	e9d3 2300 	ldrd	r2, r3, [r3]
    47e2:	e9dd 0100 	ldrd	r0, r1, [sp]
    47e6:	47a0      	blx	r4
    47e8:	4602      	mov	r2, r0
    47ea:	460b      	mov	r3, r1
    47ec:	4640      	mov	r0, r8
    47ee:	4649      	mov	r1, r9
    47f0:	47b8      	blx	r7
    47f2:	4680      	mov	r8, r0
    47f4:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    47f6:	ee69 aaa9 	vmul.f32	s21, s19, s19
    47fa:	ee1a 0a90 	vmov	r0, s21
    47fe:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4800:	a333      	add	r3, pc, #204	; (adr r3, 48d0 <mag_to_force+0x1380>)
    4802:	e9d3 2300 	ldrd	r2, r3, [r3]
    4806:	47a0      	blx	r4
    4808:	4602      	mov	r2, r0
    480a:	460b      	mov	r3, r1
    480c:	4640      	mov	r0, r8
    480e:	4649      	mov	r1, r9
    4810:	47b8      	blx	r7
    4812:	4680      	mov	r8, r0
    4814:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    4816:	ee68 7a29 	vmul.f32	s15, s16, s19
    481a:	ee17 0a90 	vmov	r0, s15
    481e:	47a8      	blx	r5
    4820:	e070      	b.n	4904 <mag_to_force+0x13b4>
    4822:	bf00      	nop
    4824:	f3af 8000 	nop.w
    4828:	412c1a3a 	.word	0x412c1a3a
    482c:	3f3286eb 	.word	0x3f3286eb
    4830:	bc6a7efa 	.word	0xbc6a7efa
    4834:	3ff69374 	.word	0x3ff69374
    4838:	92beb405 	.word	0x92beb405
    483c:	3f36e5f5 	.word	0x3f36e5f5
    4840:	a908d438 	.word	0xa908d438
    4844:	3e864e96 	.word	0x3e864e96
    4848:	17c30410 	.word	0x17c30410
    484c:	3e8a1af8 	.word	0x3e8a1af8
    4850:	3d66d634 	.word	0x3d66d634
    4854:	3e632932 	.word	0x3e632932
    4858:	1b4047b2 	.word	0x1b4047b2
    485c:	3da8a10a 	.word	0x3da8a10a
    4860:	6fcf44ac 	.word	0x6fcf44ac
    4864:	3da4129b 	.word	0x3da4129b
    4868:	29e54c52 	.word	0x29e54c52
    486c:	3d73af87 	.word	0x3d73af87
    4870:	80f98fa3 	.word	0x80f98fa3
    4874:	3f726740 	.word	0x3f726740
    4878:	ed916873 	.word	0xed916873
    487c:	401f3f7c 	.word	0x401f3f7c
    4880:	3dfb0d52 	.word	0x3dfb0d52
    4884:	3f654eb1 	.word	0x3f654eb1
    4888:	a7d49e3c 	.word	0xa7d49e3c
    488c:	3e7ceff5 	.word	0x3e7ceff5
    4890:	4fba36fa 	.word	0x4fba36fa
    4894:	3ea8b079 	.word	0x3ea8b079
    4898:	d77b216a 	.word	0xd77b216a
    489c:	3e91a9bd 	.word	0x3e91a9bd
    48a0:	9612a3e2 	.word	0x9612a3e2
    48a4:	3daa2579 	.word	0x3daa2579
    48a8:	82163668 	.word	0x82163668
    48ac:	3dbcbdc1 	.word	0x3dbcbdc1
    48b0:	9d1f8878 	.word	0x9d1f8878
    48b4:	3da13b46 	.word	0x3da13b46
    48b8:	dad31fcd 	.word	0xdad31fcd
    48bc:	3f77b634 	.word	0x3f77b634
    48c0:	1eb851ec 	.word	0x1eb851ec
    48c4:	402c6b85 	.word	0x402c6b85
    48c8:	bdcad14a 	.word	0xbdcad14a
    48cc:	3f70acc0 	.word	0x3f70acc0
    48d0:	60693e8b 	.word	0x60693e8b
    48d4:	3ea1b6a0 	.word	0x3ea1b6a0
    48d8:	00005d59 	.word	0x00005d59
    48dc:	f40c67fe 	.word	0xf40c67fe
    48e0:	3ea64c02 	.word	0x3ea64c02
    48e4:	02588cee 	.word	0x02588cee
    48e8:	3ea1c2a7 	.word	0x3ea1c2a7
    48ec:	884399b8 	.word	0x884399b8
    48f0:	3d9e314d 	.word	0x3d9e314d
    48f4:	3cc5c3bb 	.word	0x3cc5c3bb
    48f8:	3dbb0978 	.word	0x3dbb0978
    48fc:	fe5cd623 	.word	0xfe5cd623
    4900:	3da74f44 	.word	0x3da74f44
    4904:	a3f6      	add	r3, pc, #984	; (adr r3, 4ce0 <mag_to_force+0x1790>)
    4906:	e9d3 2300 	ldrd	r2, r3, [r3]
    490a:	47a0      	blx	r4
    490c:	4602      	mov	r2, r0
    490e:	460b      	mov	r3, r1
    4910:	4640      	mov	r0, r8
    4912:	4649      	mov	r1, r9
    4914:	47b0      	blx	r6
    4916:	4680      	mov	r8, r0
    4918:	4689      	mov	r9, r1
    491a:	a3f3      	add	r3, pc, #972	; (adr r3, 4ce8 <mag_to_force+0x1798>)
    491c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4924:	47a0      	blx	r4
    4926:	4602      	mov	r2, r0
    4928:	460b      	mov	r3, r1
    492a:	4640      	mov	r0, r8
    492c:	4649      	mov	r1, r9
    492e:	47b8      	blx	r7
    4930:	4680      	mov	r8, r0
    4932:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    4934:	ee68 7a2a 	vmul.f32	s15, s16, s21
    4938:	ee17 0a90 	vmov	r0, s15
    493c:	47a8      	blx	r5
    493e:	a3ec      	add	r3, pc, #944	; (adr r3, 4cf0 <mag_to_force+0x17a0>)
    4940:	e9d3 2300 	ldrd	r2, r3, [r3]
    4944:	47a0      	blx	r4
    4946:	4602      	mov	r2, r0
    4948:	460b      	mov	r3, r1
    494a:	4640      	mov	r0, r8
    494c:	4649      	mov	r1, r9
    494e:	47b8      	blx	r7
    4950:	4680      	mov	r8, r0
    4952:	4689      	mov	r9, r1
		
    4954:	ee6a 7a29 	vmul.f32	s15, s20, s19
    4958:	ee17 0a90 	vmov	r0, s15
    495c:	47a8      	blx	r5
    495e:	a3e6      	add	r3, pc, #920	; (adr r3, 4cf8 <mag_to_force+0x17a8>)
    4960:	e9d3 2300 	ldrd	r2, r3, [r3]
    4964:	47a0      	blx	r4
    4966:	4602      	mov	r2, r0
    4968:	460b      	mov	r3, r1
    496a:	4640      	mov	r0, r8
    496c:	4649      	mov	r1, r9
    496e:	47b0      	blx	r6
    4970:	4680      	mov	r8, r0
    4972:	4689      	mov	r9, r1
		
    4974:	a3e2      	add	r3, pc, #904	; (adr r3, 4d00 <mag_to_force+0x17b0>)
    4976:	e9d3 2300 	ldrd	r2, r3, [r3]
    497a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    497e:	47a0      	blx	r4
		
    4980:	4602      	mov	r2, r0
    4982:	460b      	mov	r3, r1
    4984:	4640      	mov	r0, r8
    4986:	4649      	mov	r1, r9
    4988:	47b8      	blx	r7
    498a:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    498c:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    4990:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4994:	ee29 9a09 	vmul.f32	s18, s18, s18
    4998:	ee78 8a89 	vadd.f32	s17, s17, s18
    499c:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    49a0:	ee18 0a90 	vmov	r0, s17
    49a4:	47a8      	blx	r5
    49a6:	4bcc      	ldr	r3, [pc, #816]	; (4cd8 <mag_to_force+0x1788>)
    49a8:	4798      	blx	r3
    49aa:	47d8      	blx	fp
    49ac:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    49b0:	ed9a 8a02 	vldr	s16, [sl, #8]
    49b4:	ee18 0a10 	vmov	r0, s16
    49b8:	47a8      	blx	r5
    49ba:	a39b      	add	r3, pc, #620	; (adr r3, 4c28 <mag_to_force+0x16d8>)
    49bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    49c0:	47a0      	blx	r4
    49c2:	4602      	mov	r2, r0
    49c4:	460b      	mov	r3, r1
    49c6:	a19a      	add	r1, pc, #616	; (adr r1, 4c30 <mag_to_force+0x16e0>)
    49c8:	e9d1 0100 	ldrd	r0, r1, [r1]
    49cc:	47b0      	blx	r6
    49ce:	4680      	mov	r8, r0
    49d0:	4689      	mov	r9, r1
    49d2:	edda 8a08 	vldr	s17, [sl, #32]
    49d6:	ee18 0a90 	vmov	r0, s17
    49da:	47a8      	blx	r5
    49dc:	e9cd 0100 	strd	r0, r1, [sp]
    49e0:	a395      	add	r3, pc, #596	; (adr r3, 4c38 <mag_to_force+0x16e8>)
    49e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    49e6:	47a0      	blx	r4
    49e8:	4602      	mov	r2, r0
    49ea:	460b      	mov	r3, r1
    49ec:	4640      	mov	r0, r8
    49ee:	4649      	mov	r1, r9
    49f0:	47b0      	blx	r6
    49f2:	4680      	mov	r8, r0
    49f4:	4689      	mov	r9, r1
    49f6:	ee28 9a08 	vmul.f32	s18, s16, s16
    49fa:	ee19 0a10 	vmov	r0, s18
    49fe:	47a8      	blx	r5
    4a00:	a38f      	add	r3, pc, #572	; (adr r3, 4c40 <mag_to_force+0x16f0>)
    4a02:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a06:	47a0      	blx	r4
    4a08:	4602      	mov	r2, r0
    4a0a:	460b      	mov	r3, r1
    4a0c:	4640      	mov	r0, r8
    4a0e:	4649      	mov	r1, r9
    4a10:	47b0      	blx	r6
    4a12:	4680      	mov	r8, r0
    4a14:	4689      	mov	r9, r1
    4a16:	ee68 7a28 	vmul.f32	s15, s16, s17
    4a1a:	ee17 0a90 	vmov	r0, s15
    4a1e:	47a8      	blx	r5
    4a20:	a389      	add	r3, pc, #548	; (adr r3, 4c48 <mag_to_force+0x16f8>)
    4a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a26:	47a0      	blx	r4
    4a28:	4602      	mov	r2, r0
    4a2a:	460b      	mov	r3, r1
    4a2c:	4640      	mov	r0, r8
    4a2e:	4649      	mov	r1, r9
    4a30:	47b0      	blx	r6
    4a32:	4680      	mov	r8, r0
    4a34:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4a36:	ee68 9aa8 	vmul.f32	s19, s17, s17
    4a3a:	ee19 0a90 	vmov	r0, s19
    4a3e:	47a8      	blx	r5
    4a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4a44:	a382      	add	r3, pc, #520	; (adr r3, 4c50 <mag_to_force+0x1700>)
    4a46:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a4a:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4a4c:	4602      	mov	r2, r0
    4a4e:	460b      	mov	r3, r1
    4a50:	4640      	mov	r0, r8
    4a52:	4649      	mov	r1, r9
    4a54:	47b0      	blx	r6
    4a56:	4680      	mov	r8, r0
    4a58:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4a5a:	ee68 7a89 	vmul.f32	s15, s17, s18
    4a5e:	ee17 0a90 	vmov	r0, s15
    4a62:	47a8      	blx	r5
    4a64:	a37c      	add	r3, pc, #496	; (adr r3, 4c58 <mag_to_force+0x1708>)
    4a66:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a6a:	47a0      	blx	r4
    4a6c:	4602      	mov	r2, r0
    4a6e:	460b      	mov	r3, r1
    4a70:	4640      	mov	r0, r8
    4a72:	4649      	mov	r1, r9
    4a74:	47b0      	blx	r6
    4a76:	4680      	mov	r8, r0
    4a78:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4a7a:	ee68 7a29 	vmul.f32	s15, s16, s19
    4a7e:	ee17 0a90 	vmov	r0, s15
    4a82:	47a8      	blx	r5
    4a84:	a376      	add	r3, pc, #472	; (adr r3, 4c60 <mag_to_force+0x1710>)
    4a86:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a8a:	47a0      	blx	r4
    4a8c:	4602      	mov	r2, r0
    4a8e:	460b      	mov	r3, r1
    4a90:	4640      	mov	r0, r8
    4a92:	4649      	mov	r1, r9
    4a94:	47b0      	blx	r6
    4a96:	4680      	mov	r8, r0
    4a98:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4a9a:	ee68 7aa9 	vmul.f32	s15, s17, s19
    4a9e:	ee17 0a90 	vmov	r0, s15
    4aa2:	47a8      	blx	r5
    4aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4aa8:	a36f      	add	r3, pc, #444	; (adr r3, 4c68 <mag_to_force+0x1718>)
    4aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aae:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4ab0:	4602      	mov	r2, r0
    4ab2:	460b      	mov	r3, r1
    4ab4:	4640      	mov	r0, r8
    4ab6:	4649      	mov	r1, r9
    4ab8:	47b0      	blx	r6
    4aba:	47d8      	blx	fp
    4abc:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4ac0:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4ac4:	ed9a 9a05 	vldr	s18, [sl, #20]
    4ac8:	ee19 0a10 	vmov	r0, s18
    4acc:	47a8      	blx	r5
    4ace:	a368      	add	r3, pc, #416	; (adr r3, 4c70 <mag_to_force+0x1720>)
    4ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ad4:	47a0      	blx	r4
    4ad6:	a368      	add	r3, pc, #416	; (adr r3, 4c78 <mag_to_force+0x1728>)
    4ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4adc:	47b0      	blx	r6
    4ade:	4680      	mov	r8, r0
    4ae0:	4689      	mov	r9, r1
    4ae2:	a367      	add	r3, pc, #412	; (adr r3, 4c80 <mag_to_force+0x1730>)
    4ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
    4aec:	47a0      	blx	r4
    4aee:	4602      	mov	r2, r0
    4af0:	460b      	mov	r3, r1
    4af2:	4640      	mov	r0, r8
    4af4:	4649      	mov	r1, r9
    4af6:	47b0      	blx	r6
    4af8:	4680      	mov	r8, r0
    4afa:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4afc:	ee29 aa09 	vmul.f32	s20, s18, s18
    4b00:	ee1a 0a10 	vmov	r0, s20
    4b04:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4b06:	a360      	add	r3, pc, #384	; (adr r3, 4c88 <mag_to_force+0x1738>)
    4b08:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b0c:	47a0      	blx	r4
    4b0e:	4602      	mov	r2, r0
    4b10:	460b      	mov	r3, r1
    4b12:	4640      	mov	r0, r8
    4b14:	4649      	mov	r1, r9
    4b16:	47b8      	blx	r7
    4b18:	4680      	mov	r8, r0
    4b1a:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4b1c:	462e      	mov	r6, r5
    4b1e:	ee68 7a89 	vmul.f32	s15, s17, s18
    4b22:	ee17 0a90 	vmov	r0, s15
    4b26:	47a8      	blx	r5
    4b28:	a359      	add	r3, pc, #356	; (adr r3, 4c90 <mag_to_force+0x1740>)
    4b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b2e:	47a0      	blx	r4
    4b30:	463d      	mov	r5, r7
    4b32:	4602      	mov	r2, r0
    4b34:	460b      	mov	r3, r1
    4b36:	4640      	mov	r0, r8
    4b38:	4649      	mov	r1, r9
    4b3a:	47b8      	blx	r7
    4b3c:	4680      	mov	r8, r0
    4b3e:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4b40:	a355      	add	r3, pc, #340	; (adr r3, 4c98 <mag_to_force+0x1748>)
    4b42:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4b4a:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4b4c:	4f63      	ldr	r7, [pc, #396]	; (4cdc <mag_to_force+0x178c>)
    4b4e:	4602      	mov	r2, r0
    4b50:	460b      	mov	r3, r1
    4b52:	4640      	mov	r0, r8
    4b54:	4649      	mov	r1, r9
    4b56:	47b8      	blx	r7
    4b58:	4680      	mov	r8, r0
    4b5a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4b5c:	ee68 7a8a 	vmul.f32	s15, s17, s20
    4b60:	ee17 0a90 	vmov	r0, s15
    4b64:	47b0      	blx	r6
    4b66:	a34e      	add	r3, pc, #312	; (adr r3, 4ca0 <mag_to_force+0x1750>)
    4b68:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b6c:	47a0      	blx	r4
    4b6e:	4602      	mov	r2, r0
    4b70:	460b      	mov	r3, r1
    4b72:	4640      	mov	r0, r8
    4b74:	4649      	mov	r1, r9
    4b76:	47a8      	blx	r5
    4b78:	4680      	mov	r8, r0
    4b7a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4b7c:	ee69 7a89 	vmul.f32	s15, s19, s18
    4b80:	ee17 0a90 	vmov	r0, s15
    4b84:	47b0      	blx	r6
    4b86:	a348      	add	r3, pc, #288	; (adr r3, 4ca8 <mag_to_force+0x1758>)
    4b88:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b8c:	47a0      	blx	r4
    4b8e:	4602      	mov	r2, r0
    4b90:	460b      	mov	r3, r1
    4b92:	4640      	mov	r0, r8
    4b94:	4649      	mov	r1, r9
    4b96:	47a8      	blx	r5
    4b98:	4680      	mov	r8, r0
    4b9a:	4689      	mov	r9, r1
		break;
    4b9c:	a344      	add	r3, pc, #272	; (adr r3, 4cb0 <mag_to_force+0x1760>)
    4b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ba6:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4ba8:	4602      	mov	r2, r0
    4baa:	460b      	mov	r3, r1
    4bac:	4640      	mov	r0, r8
    4bae:	4649      	mov	r1, r9
    4bb0:	47b8      	blx	r7
    4bb2:	47d8      	blx	fp
    4bb4:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4bb8:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4bbc:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    4bc0:	ee19 0a10 	vmov	r0, s18
    4bc4:	47b0      	blx	r6
    4bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4bca:	a33b      	add	r3, pc, #236	; (adr r3, 4cb8 <mag_to_force+0x1768>)
    4bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bd0:	47a0      	blx	r4
    4bd2:	4602      	mov	r2, r0
    4bd4:	460b      	mov	r3, r1
    4bd6:	a13a      	add	r1, pc, #232	; (adr r1, 4cc0 <mag_to_force+0x1770>)
    4bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
    4bdc:	47b8      	blx	r7
    4bde:	4680      	mov	r8, r0
    4be0:	4689      	mov	r9, r1
    4be2:	a339      	add	r3, pc, #228	; (adr r3, 4cc8 <mag_to_force+0x1778>)
    4be4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4be8:	e9dd 0100 	ldrd	r0, r1, [sp]
    4bec:	47a0      	blx	r4
    4bee:	4602      	mov	r2, r0
    4bf0:	460b      	mov	r3, r1
    4bf2:	4640      	mov	r0, r8
    4bf4:	4649      	mov	r1, r9
    4bf6:	47a8      	blx	r5
    4bf8:	4680      	mov	r8, r0
    4bfa:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4bfc:	ee69 7a09 	vmul.f32	s15, s18, s18
    4c00:	ee17 0a90 	vmov	r0, s15
    4c04:	47b0      	blx	r6
    4c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4c0a:	a331      	add	r3, pc, #196	; (adr r3, 4cd0 <mag_to_force+0x1780>)
    4c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c10:	47a0      	blx	r4
    4c12:	4602      	mov	r2, r0
    4c14:	460b      	mov	r3, r1
    4c16:	4640      	mov	r0, r8
    4c18:	4649      	mov	r1, r9
    4c1a:	47a8      	blx	r5
    4c1c:	4680      	mov	r8, r0
    4c1e:	4689      	mov	r9, r1
    4c20:	e072      	b.n	4d08 <mag_to_force+0x17b8>
    4c22:	bf00      	nop
    4c24:	f3af 8000 	nop.w
    4c28:	6b50b0f2 	.word	0x6b50b0f2
    4c2c:	3f6c779a 	.word	0x3f6c779a
    4c30:	c28f5c29 	.word	0xc28f5c29
    4c34:	c024a8f5 	.word	0xc024a8f5
    4c38:	d5171e2a 	.word	0xd5171e2a
    4c3c:	3f68a222 	.word	0x3f68a222
    4c40:	69edc5c6 	.word	0x69edc5c6
    4c44:	3ea5a9a9 	.word	0x3ea5a9a9
    4c48:	81bc997e 	.word	0x81bc997e
    4c4c:	3ea8aec1 	.word	0x3ea8aec1
    4c50:	de9fb9ed 	.word	0xde9fb9ed
    4c54:	3e9247cb 	.word	0x3e9247cb
    4c58:	82393435 	.word	0x82393435
    4c5c:	3dc8377c 	.word	0x3dc8377c
    4c60:	e19c6262 	.word	0xe19c6262
    4c64:	3dc1773a 	.word	0x3dc1773a
    4c68:	7476128f 	.word	0x7476128f
    4c6c:	3da06d3c 	.word	0x3da06d3c
    4c70:	b0fadf2f 	.word	0xb0fadf2f
    4c74:	3f65a8de 	.word	0x3f65a8de
    4c78:	9ba5e354 	.word	0x9ba5e354
    4c7c:	400120c4 	.word	0x400120c4
    4c80:	ef1fddec 	.word	0xef1fddec
    4c84:	3f432b55 	.word	0x3f432b55
    4c88:	ebb865dc 	.word	0xebb865dc
    4c8c:	3ea2ee70 	.word	0x3ea2ee70
    4c90:	ea8666cf 	.word	0xea8666cf
    4c94:	3e853bb5 	.word	0x3e853bb5
    4c98:	5799a806 	.word	0x5799a806
    4c9c:	3e6193c0 	.word	0x3e6193c0
    4ca0:	cece3cda 	.word	0xcece3cda
    4ca4:	3dc62920 	.word	0x3dc62920
    4ca8:	d5564f58 	.word	0xd5564f58
    4cac:	3d683df5 	.word	0x3d683df5
    4cb0:	664dc709 	.word	0x664dc709
    4cb4:	3d626c2b 	.word	0x3d626c2b
    4cb8:	c4cdfaca 	.word	0xc4cdfaca
    4cbc:	3f762174 	.word	0x3f762174
    4cc0:	f5c28f5c 	.word	0xf5c28f5c
    4cc4:	40399c28 	.word	0x40399c28
    4cc8:	5cc42635 	.word	0x5cc42635
    4ccc:	3f7db552 	.word	0x3f7db552
    4cd0:	88e4e2e6 	.word	0x88e4e2e6
    4cd4:	3eb215f9 	.word	0x3eb215f9
    4cd8:	00005d59 	.word	0x00005d59
    4cdc:	00005f99 	.word	0x00005f99
    4ce0:	02547d8d 	.word	0x02547d8d
    4ce4:	3ea9b22c 	.word	0x3ea9b22c
    4ce8:	227c1fc4 	.word	0x227c1fc4
    4cec:	3e96b3f3 	.word	0x3e96b3f3
    4cf0:	f946a57c 	.word	0xf946a57c
    4cf4:	3db0a587 	.word	0x3db0a587
    4cf8:	82163668 	.word	0x82163668
    4cfc:	3dbcbdc1 	.word	0x3dbcbdc1
    4d00:	02de4486 	.word	0x02de4486
    4d04:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4d08:	a334      	add	r3, pc, #208	; (adr r3, 4ddc <mag_to_force+0x188c>)
    4d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4d12:	47a0      	blx	r4
    4d14:	4602      	mov	r2, r0
    4d16:	460b      	mov	r3, r1
    4d18:	e9dd 0100 	ldrd	r0, r1, [sp]
    4d1c:	47a0      	blx	r4
    4d1e:	4602      	mov	r2, r0
    4d20:	460b      	mov	r3, r1
    4d22:	4640      	mov	r0, r8
    4d24:	4649      	mov	r1, r9
    4d26:	47b8      	blx	r7
    4d28:	4680      	mov	r8, r0
    4d2a:	4689      	mov	r9, r1
    4d2c:	a32d      	add	r3, pc, #180	; (adr r3, 4de4 <mag_to_force+0x1894>)
    4d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4d36:	47a0      	blx	r4
    4d38:	4602      	mov	r2, r0
    4d3a:	460b      	mov	r3, r1
    4d3c:	4640      	mov	r0, r8
    4d3e:	4649      	mov	r1, r9
    4d40:	47a8      	blx	r5
    4d42:	4680      	mov	r8, r0
    4d44:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4d46:	a329      	add	r3, pc, #164	; (adr r3, 4dec <mag_to_force+0x189c>)
    4d48:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4d50:	47a0      	blx	r4
    4d52:	4602      	mov	r2, r0
    4d54:	460b      	mov	r3, r1
    4d56:	e9dd 0100 	ldrd	r0, r1, [sp]
    4d5a:	47a0      	blx	r4
    4d5c:	4602      	mov	r2, r0
    4d5e:	460b      	mov	r3, r1
    4d60:	4640      	mov	r0, r8
    4d62:	4649      	mov	r1, r9
    4d64:	47a8      	blx	r5
    4d66:	4680      	mov	r8, r0
    4d68:	4689      	mov	r9, r1
		break;
    4d6a:	a322      	add	r3, pc, #136	; (adr r3, 4df4 <mag_to_force+0x18a4>)
    4d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4d74:	47a0      	blx	r4
    4d76:	4602      	mov	r2, r0
    4d78:	460b      	mov	r3, r1
    4d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4d7e:	47a0      	blx	r4
    4d80:	4602      	mov	r2, r0
    4d82:	460b      	mov	r3, r1
    4d84:	4640      	mov	r0, r8
    4d86:	4649      	mov	r1, r9
    4d88:	47b8      	blx	r7
    4d8a:	4680      	mov	r8, r0
    4d8c:	4689      	mov	r9, r1
    4d8e:	a31b      	add	r3, pc, #108	; (adr r3, 4dfc <mag_to_force+0x18ac>)
    4d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4d98:	47a0      	blx	r4
	
    4d9a:	4602      	mov	r2, r0
    4d9c:	460b      	mov	r3, r1
    4d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4da2:	47a0      	blx	r4
		break;
    4da4:	4602      	mov	r2, r0
    4da6:	460b      	mov	r3, r1
    4da8:	4640      	mov	r0, r8
    4daa:	4649      	mov	r1, r9
    4dac:	47a8      	blx	r5
    4dae:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4db0:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4db4:	ee28 8a08 	vmul.f32	s16, s16, s16
    4db8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4dbc:	ee38 8a28 	vadd.f32	s16, s16, s17
    4dc0:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4dc4:	ee18 0a10 	vmov	r0, s16
    4dc8:	47b0      	blx	r6
    4dca:	4b03      	ldr	r3, [pc, #12]	; (4dd8 <mag_to_force+0x1888>)
    4dcc:	4798      	blx	r3
    4dce:	47d8      	blx	fp
    4dd0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
		break;
    4dd4:	f7fe bbca 	b.w	356c <mag_to_force+0x1c>
    4dd8:	00005d59 	.word	0x00005d59
    4ddc:	5a723736 	.word	0x5a723736
    4de0:	3ea77381 	.word	0x3ea77381
    4de4:	4e8b8a55 	.word	0x4e8b8a55
    4de8:	3ea47f97 	.word	0x3ea47f97
    4dec:	a48fe74d 	.word	0xa48fe74d
    4df0:	3dce7643 	.word	0x3dce7643
    4df4:	e61b6f11 	.word	0xe61b6f11
    4df8:	3db71428 	.word	0x3db71428
    4dfc:	447e7fdf 	.word	0x447e7fdf
    4e00:	3dacd9e7 	.word	0x3dacd9e7
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4e04:	edd1 8a00 	vldr	s17, [r1]
    4e08:	4dcb      	ldr	r5, [pc, #812]	; (5138 <mag_to_force+0x1be8>)
    4e0a:	ee18 0a90 	vmov	r0, s17
    4e0e:	47a8      	blx	r5
    4e10:	4cca      	ldr	r4, [pc, #808]	; (513c <mag_to_force+0x1bec>)
    4e12:	a39d      	add	r3, pc, #628	; (adr r3, 5088 <mag_to_force+0x1b38>)
    4e14:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e18:	47a0      	blx	r4
    4e1a:	4ec9      	ldr	r6, [pc, #804]	; (5140 <mag_to_force+0x1bf0>)
    4e1c:	4602      	mov	r2, r0
    4e1e:	460b      	mov	r3, r1
    4e20:	a19b      	add	r1, pc, #620	; (adr r1, 5090 <mag_to_force+0x1b40>)
    4e22:	e9d1 0100 	ldrd	r0, r1, [r1]
    4e26:	47b0      	blx	r6
    4e28:	4680      	mov	r8, r0
    4e2a:	4689      	mov	r9, r1
    4e2c:	ed9a 8a06 	vldr	s16, [sl, #24]
    4e30:	ee18 0a10 	vmov	r0, s16
    4e34:	47a8      	blx	r5
    4e36:	e9cd 0100 	strd	r0, r1, [sp]
    4e3a:	a397      	add	r3, pc, #604	; (adr r3, 5098 <mag_to_force+0x1b48>)
    4e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e40:	47a0      	blx	r4
    4e42:	4fc0      	ldr	r7, [pc, #768]	; (5144 <mag_to_force+0x1bf4>)
    4e44:	4602      	mov	r2, r0
    4e46:	460b      	mov	r3, r1
    4e48:	4640      	mov	r0, r8
    4e4a:	4649      	mov	r1, r9
    4e4c:	47b8      	blx	r7
    4e4e:	4680      	mov	r8, r0
    4e50:	4689      	mov	r9, r1
    4e52:	ee28 9aa8 	vmul.f32	s18, s17, s17
    4e56:	ee19 0a10 	vmov	r0, s18
    4e5a:	47a8      	blx	r5
    4e5c:	a390      	add	r3, pc, #576	; (adr r3, 50a0 <mag_to_force+0x1b50>)
    4e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e62:	47a0      	blx	r4
    4e64:	4602      	mov	r2, r0
    4e66:	460b      	mov	r3, r1
    4e68:	4640      	mov	r0, r8
    4e6a:	4649      	mov	r1, r9
    4e6c:	47b8      	blx	r7
    4e6e:	4680      	mov	r8, r0
    4e70:	4689      	mov	r9, r1
    4e72:	ee68 7a88 	vmul.f32	s15, s17, s16
    4e76:	ee17 0a90 	vmov	r0, s15
    4e7a:	47a8      	blx	r5
    4e7c:	a38a      	add	r3, pc, #552	; (adr r3, 50a8 <mag_to_force+0x1b58>)
    4e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e82:	47a0      	blx	r4
    4e84:	4602      	mov	r2, r0
    4e86:	460b      	mov	r3, r1
    4e88:	4640      	mov	r0, r8
    4e8a:	4649      	mov	r1, r9
    4e8c:	47b0      	blx	r6
    4e8e:	4680      	mov	r8, r0
    4e90:	4689      	mov	r9, r1
    4e92:	ee28 aa08 	vmul.f32	s20, s16, s16
    4e96:	ee1a 0a10 	vmov	r0, s20
    4e9a:	47a8      	blx	r5
    4e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4ea0:	a383      	add	r3, pc, #524	; (adr r3, 50b0 <mag_to_force+0x1b60>)
    4ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ea6:	47a0      	blx	r4
    4ea8:	4602      	mov	r2, r0
    4eaa:	460b      	mov	r3, r1
    4eac:	4640      	mov	r0, r8
    4eae:	4649      	mov	r1, r9
    4eb0:	47b8      	blx	r7
    4eb2:	4680      	mov	r8, r0
    4eb4:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4eb6:	ee68 7a09 	vmul.f32	s15, s16, s18
    4eba:	ee17 0a90 	vmov	r0, s15
    4ebe:	47a8      	blx	r5
    4ec0:	a37d      	add	r3, pc, #500	; (adr r3, 50b8 <mag_to_force+0x1b68>)
    4ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ec6:	47a0      	blx	r4
    4ec8:	4602      	mov	r2, r0
    4eca:	460b      	mov	r3, r1
    4ecc:	4640      	mov	r0, r8
    4ece:	4649      	mov	r1, r9
    4ed0:	47b8      	blx	r7
    4ed2:	4680      	mov	r8, r0
    4ed4:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4ed6:	ee68 7a8a 	vmul.f32	s15, s17, s20
    4eda:	ee17 0a90 	vmov	r0, s15
    4ede:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4ee0:	a377      	add	r3, pc, #476	; (adr r3, 50c0 <mag_to_force+0x1b70>)
    4ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ee6:	47a0      	blx	r4
    4ee8:	4602      	mov	r2, r0
    4eea:	460b      	mov	r3, r1
    4eec:	4640      	mov	r0, r8
    4eee:	4649      	mov	r1, r9
    4ef0:	47b0      	blx	r6
    4ef2:	4680      	mov	r8, r0
    4ef4:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4ef6:	ee68 7a0a 	vmul.f32	s15, s16, s20
    4efa:	ee17 0a90 	vmov	r0, s15
    4efe:	47a8      	blx	r5
    4f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4f04:	a370      	add	r3, pc, #448	; (adr r3, 50c8 <mag_to_force+0x1b78>)
    4f06:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f0a:	47a0      	blx	r4
    4f0c:	4602      	mov	r2, r0
    4f0e:	460b      	mov	r3, r1
    4f10:	4640      	mov	r0, r8
    4f12:	4649      	mov	r1, r9
    4f14:	47b8      	blx	r7
    4f16:	f8df b230 	ldr.w	fp, [pc, #560]	; 5148 <mag_to_force+0x1bf8>
    4f1a:	47d8      	blx	fp
    4f1c:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4f20:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4f24:	ed9a 9a03 	vldr	s18, [sl, #12]
    4f28:	ee19 0a10 	vmov	r0, s18
    4f2c:	47a8      	blx	r5
    4f2e:	a368      	add	r3, pc, #416	; (adr r3, 50d0 <mag_to_force+0x1b80>)
    4f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f34:	47a0      	blx	r4
    4f36:	4602      	mov	r2, r0
    4f38:	460b      	mov	r3, r1
    4f3a:	a167      	add	r1, pc, #412	; (adr r1, 50d8 <mag_to_force+0x1b88>)
    4f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
    4f40:	47b0      	blx	r6
    4f42:	4680      	mov	r8, r0
    4f44:	4689      	mov	r9, r1
    4f46:	a366      	add	r3, pc, #408	; (adr r3, 50e0 <mag_to_force+0x1b90>)
    4f48:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
    4f50:	47a0      	blx	r4
    4f52:	4602      	mov	r2, r0
    4f54:	460b      	mov	r3, r1
    4f56:	4640      	mov	r0, r8
    4f58:	4649      	mov	r1, r9
    4f5a:	47b8      	blx	r7
    4f5c:	4680      	mov	r8, r0
    4f5e:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4f60:	ee69 9a09 	vmul.f32	s19, s18, s18
    4f64:	ee19 0a90 	vmov	r0, s19
    4f68:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4f6a:	a35f      	add	r3, pc, #380	; (adr r3, 50e8 <mag_to_force+0x1b98>)
    4f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f70:	47a0      	blx	r4
    4f72:	4602      	mov	r2, r0
    4f74:	460b      	mov	r3, r1
    4f76:	4640      	mov	r0, r8
    4f78:	4649      	mov	r1, r9
    4f7a:	47b8      	blx	r7
    4f7c:	4680      	mov	r8, r0
    4f7e:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4f80:	ee68 7a09 	vmul.f32	s15, s16, s18
    4f84:	ee17 0a90 	vmov	r0, s15
    4f88:	47a8      	blx	r5
    4f8a:	a359      	add	r3, pc, #356	; (adr r3, 50f0 <mag_to_force+0x1ba0>)
    4f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f90:	47a0      	blx	r4
    4f92:	4602      	mov	r2, r0
    4f94:	460b      	mov	r3, r1
    4f96:	4640      	mov	r0, r8
    4f98:	4649      	mov	r1, r9
    4f9a:	47b0      	blx	r6
    4f9c:	4680      	mov	r8, r0
    4f9e:	4689      	mov	r9, r1
    4fa0:	a355      	add	r3, pc, #340	; (adr r3, 50f8 <mag_to_force+0x1ba8>)
    4fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4faa:	47a0      	blx	r4
    4fac:	4602      	mov	r2, r0
    4fae:	460b      	mov	r3, r1
    4fb0:	4640      	mov	r0, r8
    4fb2:	4649      	mov	r1, r9
    4fb4:	47b8      	blx	r7
    4fb6:	4680      	mov	r8, r0
    4fb8:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4fba:	ee68 7a29 	vmul.f32	s15, s16, s19
    4fbe:	ee17 0a90 	vmov	r0, s15
    4fc2:	47a8      	blx	r5
    4fc4:	a34e      	add	r3, pc, #312	; (adr r3, 5100 <mag_to_force+0x1bb0>)
    4fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fca:	47a0      	blx	r4
    4fcc:	4602      	mov	r2, r0
    4fce:	460b      	mov	r3, r1
    4fd0:	4640      	mov	r0, r8
    4fd2:	4649      	mov	r1, r9
    4fd4:	47b8      	blx	r7
    4fd6:	4680      	mov	r8, r0
    4fd8:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4fda:	ee6a 7a09 	vmul.f32	s15, s20, s18
    4fde:	ee17 0a90 	vmov	r0, s15
    4fe2:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4fe4:	a348      	add	r3, pc, #288	; (adr r3, 5108 <mag_to_force+0x1bb8>)
    4fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fea:	47a0      	blx	r4
    4fec:	4602      	mov	r2, r0
    4fee:	460b      	mov	r3, r1
    4ff0:	4640      	mov	r0, r8
    4ff2:	4649      	mov	r1, r9
    4ff4:	47b0      	blx	r6
    4ff6:	4680      	mov	r8, r0
    4ff8:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4ffa:	a345      	add	r3, pc, #276	; (adr r3, 5110 <mag_to_force+0x1bc0>)
    4ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    5000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5004:	47a0      	blx	r4
    5006:	4602      	mov	r2, r0
    5008:	460b      	mov	r3, r1
    500a:	4640      	mov	r0, r8
    500c:	4649      	mov	r1, r9
    500e:	47b8      	blx	r7
    5010:	47d8      	blx	fp
    5012:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    5016:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    501a:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    501e:	ee19 0a90 	vmov	r0, s19
    5022:	47a8      	blx	r5
    5024:	a33c      	add	r3, pc, #240	; (adr r3, 5118 <mag_to_force+0x1bc8>)
    5026:	e9d3 2300 	ldrd	r2, r3, [r3]
    502a:	47a0      	blx	r4
    502c:	4602      	mov	r2, r0
    502e:	460b      	mov	r3, r1
    5030:	a13b      	add	r1, pc, #236	; (adr r1, 5120 <mag_to_force+0x1bd0>)
    5032:	e9d1 0100 	ldrd	r0, r1, [r1]
    5036:	47b0      	blx	r6
    5038:	4680      	mov	r8, r0
    503a:	4689      	mov	r9, r1
    503c:	a33a      	add	r3, pc, #232	; (adr r3, 5128 <mag_to_force+0x1bd8>)
    503e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5042:	e9dd 0100 	ldrd	r0, r1, [sp]
    5046:	47a0      	blx	r4
    5048:	4602      	mov	r2, r0
    504a:	460b      	mov	r3, r1
    504c:	4640      	mov	r0, r8
    504e:	4649      	mov	r1, r9
    5050:	47b8      	blx	r7
    5052:	4680      	mov	r8, r0
    5054:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    5056:	ee69 aaa9 	vmul.f32	s21, s19, s19
    505a:	ee1a 0a90 	vmov	r0, s21
    505e:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    5060:	a333      	add	r3, pc, #204	; (adr r3, 5130 <mag_to_force+0x1be0>)
    5062:	e9d3 2300 	ldrd	r2, r3, [r3]
    5066:	47a0      	blx	r4
    5068:	4602      	mov	r2, r0
    506a:	460b      	mov	r3, r1
    506c:	4640      	mov	r0, r8
    506e:	4649      	mov	r1, r9
    5070:	47b8      	blx	r7
    5072:	4680      	mov	r8, r0
    5074:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    5076:	ee68 7a29 	vmul.f32	s15, s16, s19
    507a:	ee17 0a90 	vmov	r0, s15
    507e:	47a8      	blx	r5
    5080:	e064      	b.n	514c <mag_to_force+0x1bfc>
    5082:	bf00      	nop
    5084:	f3af 8000 	nop.w
    5088:	8f041462 	.word	0x8f041462
    508c:	3f6aef6f 	.word	0x3f6aef6f
    5090:	c28f5c29 	.word	0xc28f5c29
    5094:	402aa8f5 	.word	0x402aa8f5
    5098:	229e9079 	.word	0x229e9079
    509c:	3f6b8887 	.word	0x3f6b8887
    50a0:	d646eb6e 	.word	0xd646eb6e
    50a4:	3ea84b1c 	.word	0x3ea84b1c
    50a8:	521dd696 	.word	0x521dd696
    50ac:	3ea4ce9e 	.word	0x3ea4ce9e
    50b0:	8b46aa0f 	.word	0x8b46aa0f
    50b4:	3e91cf89 	.word	0x3e91cf89
    50b8:	05b88164 	.word	0x05b88164
    50bc:	3dcadc6f 	.word	0x3dcadc6f
    50c0:	c6957207 	.word	0xc6957207
    50c4:	3dba9bb1 	.word	0x3dba9bb1
    50c8:	54aa19eb 	.word	0x54aa19eb
    50cc:	3d9d014f 	.word	0x3d9d014f
    50d0:	328a96c7 	.word	0x328a96c7
    50d4:	3f3faac0 	.word	0x3f3faac0
    50d8:	4fdf3b64 	.word	0x4fdf3b64
    50dc:	4006978d 	.word	0x4006978d
    50e0:	4662bae0 	.word	0x4662bae0
    50e4:	3f507b78 	.word	0x3f507b78
    50e8:	1dbb855a 	.word	0x1dbb855a
    50ec:	3ea17b5b 	.word	0x3ea17b5b
    50f0:	f2d94d7a 	.word	0xf2d94d7a
    50f4:	3e9ac354 	.word	0x3e9ac354
    50f8:	8ed8f651 	.word	0x8ed8f651
    50fc:	3e821e90 	.word	0x3e821e90
    5100:	37757ffe 	.word	0x37757ffe
    5104:	3dc19631 	.word	0x3dc19631
    5108:	8cce8eea 	.word	0x8cce8eea
    510c:	3db7f827 	.word	0x3db7f827
    5110:	7c871c2d 	.word	0x7c871c2d
    5114:	3d953cf8 	.word	0x3d953cf8
    5118:	94ccab3f 	.word	0x94ccab3f
    511c:	3f72dfd6 	.word	0x3f72dfd6
    5120:	eb851eb8 	.word	0xeb851eb8
    5124:	40387851 	.word	0x40387851
    5128:	9f51697f 	.word	0x9f51697f
    512c:	3f7b0ee4 	.word	0x3f7b0ee4
    5130:	fec17451 	.word	0xfec17451
    5134:	3e9ad482 	.word	0x3e9ad482
    5138:	00006259 	.word	0x00006259
    513c:	00006301 	.word	0x00006301
    5140:	00005f99 	.word	0x00005f99
    5144:	00005f9d 	.word	0x00005f9d
    5148:	00006861 	.word	0x00006861
    514c:	a3f5      	add	r3, pc, #980	; (adr r3, 5524 <mag_to_force+0x1fd4>)
    514e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5152:	47a0      	blx	r4
    5154:	4602      	mov	r2, r0
    5156:	460b      	mov	r3, r1
    5158:	4640      	mov	r0, r8
    515a:	4649      	mov	r1, r9
    515c:	47b0      	blx	r6
    515e:	4680      	mov	r8, r0
    5160:	4689      	mov	r9, r1
    5162:	a3f2      	add	r3, pc, #968	; (adr r3, 552c <mag_to_force+0x1fdc>)
    5164:	e9d3 2300 	ldrd	r2, r3, [r3]
    5168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    516c:	47a0      	blx	r4
    516e:	4602      	mov	r2, r0
    5170:	460b      	mov	r3, r1
    5172:	4640      	mov	r0, r8
    5174:	4649      	mov	r1, r9
    5176:	47b8      	blx	r7
    5178:	4680      	mov	r8, r0
    517a:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    517c:	ee68 7a2a 	vmul.f32	s15, s16, s21
    5180:	ee17 0a90 	vmov	r0, s15
    5184:	47a8      	blx	r5
    5186:	a3eb      	add	r3, pc, #940	; (adr r3, 5534 <mag_to_force+0x1fe4>)
    5188:	e9d3 2300 	ldrd	r2, r3, [r3]
    518c:	47a0      	blx	r4
    518e:	4602      	mov	r2, r0
    5190:	460b      	mov	r3, r1
    5192:	4640      	mov	r0, r8
    5194:	4649      	mov	r1, r9
    5196:	47b8      	blx	r7
    5198:	4680      	mov	r8, r0
    519a:	4689      	mov	r9, r1
			
    519c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    51a0:	ee17 0a90 	vmov	r0, s15
    51a4:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    51a6:	a3e5      	add	r3, pc, #916	; (adr r3, 553c <mag_to_force+0x1fec>)
    51a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    51ac:	47a0      	blx	r4
    51ae:	4602      	mov	r2, r0
    51b0:	460b      	mov	r3, r1
    51b2:	4640      	mov	r0, r8
    51b4:	4649      	mov	r1, r9
    51b6:	47b0      	blx	r6
    51b8:	4680      	mov	r8, r0
    51ba:	4689      	mov	r9, r1
			
    51bc:	a3e1      	add	r3, pc, #900	; (adr r3, 5544 <mag_to_force+0x1ff4>)
    51be:	e9d3 2300 	ldrd	r2, r3, [r3]
    51c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    51c6:	47a0      	blx	r4
    51c8:	4602      	mov	r2, r0
    51ca:	460b      	mov	r3, r1
    51cc:	4640      	mov	r0, r8
    51ce:	4649      	mov	r1, r9
    51d0:	47b8      	blx	r7
    51d2:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    51d4:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    51d8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    51dc:	ee29 9a09 	vmul.f32	s18, s18, s18
    51e0:	ee78 8a89 	vadd.f32	s17, s17, s18
    51e4:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    51e8:	ee18 0a90 	vmov	r0, s17
    51ec:	47a8      	blx	r5
    51ee:	4bcc      	ldr	r3, [pc, #816]	; (5520 <mag_to_force+0x1fd0>)
    51f0:	4798      	blx	r3
    51f2:	47d8      	blx	fp
    51f4:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    51f8:	edda 8a01 	vldr	s17, [sl, #4]
    51fc:	ee18 0a90 	vmov	r0, s17
    5200:	47a8      	blx	r5
    5202:	a39b      	add	r3, pc, #620	; (adr r3, 5470 <mag_to_force+0x1f20>)
    5204:	e9d3 2300 	ldrd	r2, r3, [r3]
    5208:	47a0      	blx	r4
    520a:	4602      	mov	r2, r0
    520c:	460b      	mov	r3, r1
    520e:	a19a      	add	r1, pc, #616	; (adr r1, 5478 <mag_to_force+0x1f28>)
    5210:	e9d1 0100 	ldrd	r0, r1, [r1]
    5214:	47b0      	blx	r6
    5216:	4680      	mov	r8, r0
    5218:	4689      	mov	r9, r1
    521a:	ed9a 8a07 	vldr	s16, [sl, #28]
    521e:	ee18 0a10 	vmov	r0, s16
    5222:	47a8      	blx	r5
    5224:	e9cd 0100 	strd	r0, r1, [sp]
    5228:	a395      	add	r3, pc, #596	; (adr r3, 5480 <mag_to_force+0x1f30>)
    522a:	e9d3 2300 	ldrd	r2, r3, [r3]
    522e:	47a0      	blx	r4
    5230:	4602      	mov	r2, r0
    5232:	460b      	mov	r3, r1
    5234:	4640      	mov	r0, r8
    5236:	4649      	mov	r1, r9
    5238:	47b8      	blx	r7
    523a:	4680      	mov	r8, r0
    523c:	4689      	mov	r9, r1
    523e:	ee28 9aa8 	vmul.f32	s18, s17, s17
    5242:	ee19 0a10 	vmov	r0, s18
    5246:	47a8      	blx	r5
    5248:	a38f      	add	r3, pc, #572	; (adr r3, 5488 <mag_to_force+0x1f38>)
    524a:	e9d3 2300 	ldrd	r2, r3, [r3]
    524e:	47a0      	blx	r4
    5250:	4602      	mov	r2, r0
    5252:	460b      	mov	r3, r1
    5254:	4640      	mov	r0, r8
    5256:	4649      	mov	r1, r9
    5258:	47b8      	blx	r7
    525a:	4680      	mov	r8, r0
    525c:	4689      	mov	r9, r1
    525e:	ee68 7a88 	vmul.f32	s15, s17, s16
    5262:	ee17 0a90 	vmov	r0, s15
    5266:	47a8      	blx	r5
    5268:	a389      	add	r3, pc, #548	; (adr r3, 5490 <mag_to_force+0x1f40>)
    526a:	e9d3 2300 	ldrd	r2, r3, [r3]
    526e:	47a0      	blx	r4
    5270:	4602      	mov	r2, r0
    5272:	460b      	mov	r3, r1
    5274:	4640      	mov	r0, r8
    5276:	4649      	mov	r1, r9
    5278:	47b0      	blx	r6
    527a:	4680      	mov	r8, r0
    527c:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    527e:	ee28 aa08 	vmul.f32	s20, s16, s16
    5282:	ee1a 0a10 	vmov	r0, s20
    5286:	47a8      	blx	r5
    5288:	e9cd 0102 	strd	r0, r1, [sp, #8]
    528c:	a382      	add	r3, pc, #520	; (adr r3, 5498 <mag_to_force+0x1f48>)
    528e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5292:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5294:	4602      	mov	r2, r0
    5296:	460b      	mov	r3, r1
    5298:	4640      	mov	r0, r8
    529a:	4649      	mov	r1, r9
    529c:	47b8      	blx	r7
    529e:	4680      	mov	r8, r0
    52a0:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    52a2:	ee68 7a09 	vmul.f32	s15, s16, s18
    52a6:	ee17 0a90 	vmov	r0, s15
    52aa:	47a8      	blx	r5
    52ac:	a37c      	add	r3, pc, #496	; (adr r3, 54a0 <mag_to_force+0x1f50>)
    52ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    52b2:	47a0      	blx	r4
    52b4:	4602      	mov	r2, r0
    52b6:	460b      	mov	r3, r1
    52b8:	4640      	mov	r0, r8
    52ba:	4649      	mov	r1, r9
    52bc:	47b8      	blx	r7
    52be:	4680      	mov	r8, r0
    52c0:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    52c2:	ee68 7a8a 	vmul.f32	s15, s17, s20
    52c6:	ee17 0a90 	vmov	r0, s15
    52ca:	47a8      	blx	r5
    52cc:	a376      	add	r3, pc, #472	; (adr r3, 54a8 <mag_to_force+0x1f58>)
    52ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    52d2:	47a0      	blx	r4
    52d4:	4602      	mov	r2, r0
    52d6:	460b      	mov	r3, r1
    52d8:	4640      	mov	r0, r8
    52da:	4649      	mov	r1, r9
    52dc:	47b0      	blx	r6
    52de:	4680      	mov	r8, r0
    52e0:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    52e2:	ee68 7a0a 	vmul.f32	s15, s16, s20
    52e6:	ee17 0a90 	vmov	r0, s15
    52ea:	47a8      	blx	r5
    52ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    52f0:	a36f      	add	r3, pc, #444	; (adr r3, 54b0 <mag_to_force+0x1f60>)
    52f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    52f6:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    52f8:	4602      	mov	r2, r0
    52fa:	460b      	mov	r3, r1
    52fc:	4640      	mov	r0, r8
    52fe:	4649      	mov	r1, r9
    5300:	47b8      	blx	r7
    5302:	47d8      	blx	fp
    5304:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5308:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    530c:	ed9a 9a04 	vldr	s18, [sl, #16]
    5310:	ee19 0a10 	vmov	r0, s18
    5314:	47a8      	blx	r5
    5316:	a368      	add	r3, pc, #416	; (adr r3, 54b8 <mag_to_force+0x1f68>)
    5318:	e9d3 2300 	ldrd	r2, r3, [r3]
    531c:	47a0      	blx	r4
    531e:	4602      	mov	r2, r0
    5320:	460b      	mov	r3, r1
    5322:	a167      	add	r1, pc, #412	; (adr r1, 54c0 <mag_to_force+0x1f70>)
    5324:	e9d1 0100 	ldrd	r0, r1, [r1]
    5328:	47b0      	blx	r6
    532a:	4680      	mov	r8, r0
    532c:	4689      	mov	r9, r1
    532e:	a366      	add	r3, pc, #408	; (adr r3, 54c8 <mag_to_force+0x1f78>)
    5330:	e9d3 2300 	ldrd	r2, r3, [r3]
    5334:	e9dd 0100 	ldrd	r0, r1, [sp]
    5338:	47a0      	blx	r4
    533a:	4602      	mov	r2, r0
    533c:	460b      	mov	r3, r1
    533e:	4640      	mov	r0, r8
    5340:	4649      	mov	r1, r9
    5342:	47b8      	blx	r7
    5344:	4680      	mov	r8, r0
    5346:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5348:	ee69 9a09 	vmul.f32	s19, s18, s18
    534c:	ee19 0a90 	vmov	r0, s19
    5350:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5352:	a35f      	add	r3, pc, #380	; (adr r3, 54d0 <mag_to_force+0x1f80>)
    5354:	e9d3 2300 	ldrd	r2, r3, [r3]
    5358:	47a0      	blx	r4
    535a:	4602      	mov	r2, r0
    535c:	460b      	mov	r3, r1
    535e:	4640      	mov	r0, r8
    5360:	4649      	mov	r1, r9
    5362:	47b0      	blx	r6
    5364:	4680      	mov	r8, r0
    5366:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5368:	ee68 7a09 	vmul.f32	s15, s16, s18
    536c:	ee17 0a90 	vmov	r0, s15
    5370:	47a8      	blx	r5
    5372:	a359      	add	r3, pc, #356	; (adr r3, 54d8 <mag_to_force+0x1f88>)
    5374:	e9d3 2300 	ldrd	r2, r3, [r3]
    5378:	47a0      	blx	r4
    537a:	4602      	mov	r2, r0
    537c:	460b      	mov	r3, r1
    537e:	4640      	mov	r0, r8
    5380:	4649      	mov	r1, r9
    5382:	47b0      	blx	r6
    5384:	4680      	mov	r8, r0
    5386:	4689      	mov	r9, r1
    5388:	a355      	add	r3, pc, #340	; (adr r3, 54e0 <mag_to_force+0x1f90>)
    538a:	e9d3 2300 	ldrd	r2, r3, [r3]
    538e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5392:	47a0      	blx	r4
    5394:	4602      	mov	r2, r0
    5396:	460b      	mov	r3, r1
    5398:	4640      	mov	r0, r8
    539a:	4649      	mov	r1, r9
    539c:	47b8      	blx	r7
    539e:	4680      	mov	r8, r0
    53a0:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    53a2:	ee68 7a29 	vmul.f32	s15, s16, s19
    53a6:	ee17 0a90 	vmov	r0, s15
    53aa:	47a8      	blx	r5
    53ac:	a34e      	add	r3, pc, #312	; (adr r3, 54e8 <mag_to_force+0x1f98>)
    53ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    53b2:	47a0      	blx	r4
    53b4:	4602      	mov	r2, r0
    53b6:	460b      	mov	r3, r1
    53b8:	4640      	mov	r0, r8
    53ba:	4649      	mov	r1, r9
    53bc:	47b0      	blx	r6
    53be:	4680      	mov	r8, r0
    53c0:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    53c2:	ee6a 7a09 	vmul.f32	s15, s20, s18
    53c6:	ee17 0a90 	vmov	r0, s15
    53ca:	47a8      	blx	r5
    53cc:	a348      	add	r3, pc, #288	; (adr r3, 54f0 <mag_to_force+0x1fa0>)
    53ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    53d2:	47a0      	blx	r4
    53d4:	4602      	mov	r2, r0
    53d6:	460b      	mov	r3, r1
    53d8:	4640      	mov	r0, r8
    53da:	4649      	mov	r1, r9
    53dc:	47b0      	blx	r6
    53de:	4680      	mov	r8, r0
    53e0:	4689      	mov	r9, r1
			
    53e2:	a345      	add	r3, pc, #276	; (adr r3, 54f8 <mag_to_force+0x1fa8>)
    53e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    53e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    53ec:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    53ee:	4602      	mov	r2, r0
    53f0:	460b      	mov	r3, r1
    53f2:	4640      	mov	r0, r8
    53f4:	4649      	mov	r1, r9
    53f6:	47b8      	blx	r7
    53f8:	47d8      	blx	fp
    53fa:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    53fe:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5402:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    5406:	ee19 0a90 	vmov	r0, s19
    540a:	47a8      	blx	r5
    540c:	a33c      	add	r3, pc, #240	; (adr r3, 5500 <mag_to_force+0x1fb0>)
    540e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5412:	47a0      	blx	r4
    5414:	4602      	mov	r2, r0
    5416:	460b      	mov	r3, r1
    5418:	a13b      	add	r1, pc, #236	; (adr r1, 5508 <mag_to_force+0x1fb8>)
    541a:	e9d1 0100 	ldrd	r0, r1, [r1]
    541e:	47b0      	blx	r6
    5420:	4680      	mov	r8, r0
    5422:	4689      	mov	r9, r1
    5424:	a33a      	add	r3, pc, #232	; (adr r3, 5510 <mag_to_force+0x1fc0>)
    5426:	e9d3 2300 	ldrd	r2, r3, [r3]
    542a:	e9dd 0100 	ldrd	r0, r1, [sp]
    542e:	47a0      	blx	r4
    5430:	4602      	mov	r2, r0
    5432:	460b      	mov	r3, r1
    5434:	4640      	mov	r0, r8
    5436:	4649      	mov	r1, r9
    5438:	47b8      	blx	r7
    543a:	4680      	mov	r8, r0
    543c:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    543e:	ee69 aaa9 	vmul.f32	s21, s19, s19
    5442:	ee1a 0a90 	vmov	r0, s21
    5446:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5448:	a333      	add	r3, pc, #204	; (adr r3, 5518 <mag_to_force+0x1fc8>)
    544a:	e9d3 2300 	ldrd	r2, r3, [r3]
    544e:	47a0      	blx	r4
    5450:	4602      	mov	r2, r0
    5452:	460b      	mov	r3, r1
    5454:	4640      	mov	r0, r8
    5456:	4649      	mov	r1, r9
    5458:	47b8      	blx	r7
    545a:	4680      	mov	r8, r0
    545c:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    545e:	ee68 7a29 	vmul.f32	s15, s16, s19
    5462:	ee17 0a90 	vmov	r0, s15
    5466:	47a8      	blx	r5
    5468:	e070      	b.n	554c <mag_to_force+0x1ffc>
    546a:	bf00      	nop
    546c:	f3af 8000 	nop.w
    5470:	412c1a3a 	.word	0x412c1a3a
    5474:	3f3286eb 	.word	0x3f3286eb
    5478:	bc6a7efa 	.word	0xbc6a7efa
    547c:	3ff69374 	.word	0x3ff69374
    5480:	92beb405 	.word	0x92beb405
    5484:	3f36e5f5 	.word	0x3f36e5f5
    5488:	a908d438 	.word	0xa908d438
    548c:	3e864e96 	.word	0x3e864e96
    5490:	17c30410 	.word	0x17c30410
    5494:	3e8a1af8 	.word	0x3e8a1af8
    5498:	3d66d634 	.word	0x3d66d634
    549c:	3e632932 	.word	0x3e632932
    54a0:	1b4047b2 	.word	0x1b4047b2
    54a4:	3da8a10a 	.word	0x3da8a10a
    54a8:	6fcf44ac 	.word	0x6fcf44ac
    54ac:	3da4129b 	.word	0x3da4129b
    54b0:	29e54c52 	.word	0x29e54c52
    54b4:	3d73af87 	.word	0x3d73af87
    54b8:	80f98fa3 	.word	0x80f98fa3
    54bc:	3f726740 	.word	0x3f726740
    54c0:	ed916873 	.word	0xed916873
    54c4:	401f3f7c 	.word	0x401f3f7c
    54c8:	3dfb0d52 	.word	0x3dfb0d52
    54cc:	3f654eb1 	.word	0x3f654eb1
    54d0:	a7d49e3c 	.word	0xa7d49e3c
    54d4:	3e7ceff5 	.word	0x3e7ceff5
    54d8:	4fba36fa 	.word	0x4fba36fa
    54dc:	3ea8b079 	.word	0x3ea8b079
    54e0:	d77b216a 	.word	0xd77b216a
    54e4:	3e91a9bd 	.word	0x3e91a9bd
    54e8:	9612a3e2 	.word	0x9612a3e2
    54ec:	3daa2579 	.word	0x3daa2579
    54f0:	82163668 	.word	0x82163668
    54f4:	3dbcbdc1 	.word	0x3dbcbdc1
    54f8:	9d1f8878 	.word	0x9d1f8878
    54fc:	3da13b46 	.word	0x3da13b46
    5500:	dad31fcd 	.word	0xdad31fcd
    5504:	3f77b634 	.word	0x3f77b634
    5508:	1eb851ec 	.word	0x1eb851ec
    550c:	402c6b85 	.word	0x402c6b85
    5510:	bdcad14a 	.word	0xbdcad14a
    5514:	3f70acc0 	.word	0x3f70acc0
    5518:	60693e8b 	.word	0x60693e8b
    551c:	3ea1b6a0 	.word	0x3ea1b6a0
    5520:	00005d59 	.word	0x00005d59
    5524:	f40c67fe 	.word	0xf40c67fe
    5528:	3ea64c02 	.word	0x3ea64c02
    552c:	02588cee 	.word	0x02588cee
    5530:	3ea1c2a7 	.word	0x3ea1c2a7
    5534:	884399b8 	.word	0x884399b8
    5538:	3d9e314d 	.word	0x3d9e314d
    553c:	3cc5c3bb 	.word	0x3cc5c3bb
    5540:	3dbb0978 	.word	0x3dbb0978
    5544:	fe5cd623 	.word	0xfe5cd623
    5548:	3da74f44 	.word	0x3da74f44
    554c:	a3f6      	add	r3, pc, #984	; (adr r3, 5928 <mag_to_force+0x23d8>)
    554e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5552:	47a0      	blx	r4
    5554:	4602      	mov	r2, r0
    5556:	460b      	mov	r3, r1
    5558:	4640      	mov	r0, r8
    555a:	4649      	mov	r1, r9
    555c:	47b0      	blx	r6
    555e:	4680      	mov	r8, r0
    5560:	4689      	mov	r9, r1
    5562:	a3f3      	add	r3, pc, #972	; (adr r3, 5930 <mag_to_force+0x23e0>)
    5564:	e9d3 2300 	ldrd	r2, r3, [r3]
    5568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    556c:	47a0      	blx	r4
    556e:	4602      	mov	r2, r0
    5570:	460b      	mov	r3, r1
    5572:	4640      	mov	r0, r8
    5574:	4649      	mov	r1, r9
    5576:	47b8      	blx	r7
    5578:	4680      	mov	r8, r0
    557a:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    557c:	ee68 7a2a 	vmul.f32	s15, s16, s21
    5580:	ee17 0a90 	vmov	r0, s15
    5584:	47a8      	blx	r5
    5586:	a3ec      	add	r3, pc, #944	; (adr r3, 5938 <mag_to_force+0x23e8>)
    5588:	e9d3 2300 	ldrd	r2, r3, [r3]
    558c:	47a0      	blx	r4
    558e:	4602      	mov	r2, r0
    5590:	460b      	mov	r3, r1
    5592:	4640      	mov	r0, r8
    5594:	4649      	mov	r1, r9
    5596:	47b8      	blx	r7
    5598:	4680      	mov	r8, r0
    559a:	4689      	mov	r9, r1
			
    559c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    55a0:	ee17 0a90 	vmov	r0, s15
    55a4:	47a8      	blx	r5
    55a6:	a3e6      	add	r3, pc, #920	; (adr r3, 5940 <mag_to_force+0x23f0>)
    55a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    55ac:	47a0      	blx	r4
    55ae:	4602      	mov	r2, r0
    55b0:	460b      	mov	r3, r1
    55b2:	4640      	mov	r0, r8
    55b4:	4649      	mov	r1, r9
    55b6:	47b0      	blx	r6
    55b8:	4680      	mov	r8, r0
    55ba:	4689      	mov	r9, r1
			
    55bc:	a3e2      	add	r3, pc, #904	; (adr r3, 5948 <mag_to_force+0x23f8>)
    55be:	e9d3 2300 	ldrd	r2, r3, [r3]
    55c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    55c6:	47a0      	blx	r4
			
    55c8:	4602      	mov	r2, r0
    55ca:	460b      	mov	r3, r1
    55cc:	4640      	mov	r0, r8
    55ce:	4649      	mov	r1, r9
    55d0:	47b8      	blx	r7
    55d2:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    55d4:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    55d8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    55dc:	ee29 9a09 	vmul.f32	s18, s18, s18
    55e0:	ee78 8a89 	vadd.f32	s17, s17, s18
    55e4:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    55e8:	ee18 0a90 	vmov	r0, s17
    55ec:	47a8      	blx	r5
    55ee:	4bcc      	ldr	r3, [pc, #816]	; (5920 <mag_to_force+0x23d0>)
    55f0:	4798      	blx	r3
    55f2:	47d8      	blx	fp
    55f4:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    55f8:	ed9a 8a02 	vldr	s16, [sl, #8]
    55fc:	ee18 0a10 	vmov	r0, s16
    5600:	47a8      	blx	r5
    5602:	a39b      	add	r3, pc, #620	; (adr r3, 5870 <mag_to_force+0x2320>)
    5604:	e9d3 2300 	ldrd	r2, r3, [r3]
    5608:	47a0      	blx	r4
    560a:	4602      	mov	r2, r0
    560c:	460b      	mov	r3, r1
    560e:	a19a      	add	r1, pc, #616	; (adr r1, 5878 <mag_to_force+0x2328>)
    5610:	e9d1 0100 	ldrd	r0, r1, [r1]
    5614:	47b0      	blx	r6
    5616:	4680      	mov	r8, r0
    5618:	4689      	mov	r9, r1
    561a:	edda 8a08 	vldr	s17, [sl, #32]
    561e:	ee18 0a90 	vmov	r0, s17
    5622:	47a8      	blx	r5
    5624:	e9cd 0100 	strd	r0, r1, [sp]
    5628:	a395      	add	r3, pc, #596	; (adr r3, 5880 <mag_to_force+0x2330>)
    562a:	e9d3 2300 	ldrd	r2, r3, [r3]
    562e:	47a0      	blx	r4
    5630:	4602      	mov	r2, r0
    5632:	460b      	mov	r3, r1
    5634:	4640      	mov	r0, r8
    5636:	4649      	mov	r1, r9
    5638:	47b0      	blx	r6
    563a:	4680      	mov	r8, r0
    563c:	4689      	mov	r9, r1
    563e:	ee28 9a08 	vmul.f32	s18, s16, s16
    5642:	ee19 0a10 	vmov	r0, s18
    5646:	47a8      	blx	r5
    5648:	a38f      	add	r3, pc, #572	; (adr r3, 5888 <mag_to_force+0x2338>)
    564a:	e9d3 2300 	ldrd	r2, r3, [r3]
    564e:	47a0      	blx	r4
    5650:	4602      	mov	r2, r0
    5652:	460b      	mov	r3, r1
    5654:	4640      	mov	r0, r8
    5656:	4649      	mov	r1, r9
    5658:	47b0      	blx	r6
    565a:	4680      	mov	r8, r0
    565c:	4689      	mov	r9, r1
    565e:	ee68 7a28 	vmul.f32	s15, s16, s17
    5662:	ee17 0a90 	vmov	r0, s15
    5666:	47a8      	blx	r5
    5668:	a389      	add	r3, pc, #548	; (adr r3, 5890 <mag_to_force+0x2340>)
    566a:	e9d3 2300 	ldrd	r2, r3, [r3]
    566e:	47a0      	blx	r4
    5670:	4602      	mov	r2, r0
    5672:	460b      	mov	r3, r1
    5674:	4640      	mov	r0, r8
    5676:	4649      	mov	r1, r9
    5678:	47b0      	blx	r6
    567a:	4680      	mov	r8, r0
    567c:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    567e:	ee68 9aa8 	vmul.f32	s19, s17, s17
    5682:	ee19 0a90 	vmov	r0, s19
    5686:	47a8      	blx	r5
    5688:	e9cd 0102 	strd	r0, r1, [sp, #8]
    568c:	a382      	add	r3, pc, #520	; (adr r3, 5898 <mag_to_force+0x2348>)
    568e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5692:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5694:	4602      	mov	r2, r0
    5696:	460b      	mov	r3, r1
    5698:	4640      	mov	r0, r8
    569a:	4649      	mov	r1, r9
    569c:	47b0      	blx	r6
    569e:	4680      	mov	r8, r0
    56a0:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    56a2:	ee68 7a89 	vmul.f32	s15, s17, s18
    56a6:	ee17 0a90 	vmov	r0, s15
    56aa:	47a8      	blx	r5
    56ac:	a37c      	add	r3, pc, #496	; (adr r3, 58a0 <mag_to_force+0x2350>)
    56ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    56b2:	47a0      	blx	r4
    56b4:	4602      	mov	r2, r0
    56b6:	460b      	mov	r3, r1
    56b8:	4640      	mov	r0, r8
    56ba:	4649      	mov	r1, r9
    56bc:	47b0      	blx	r6
    56be:	4680      	mov	r8, r0
    56c0:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    56c2:	ee68 7a29 	vmul.f32	s15, s16, s19
    56c6:	ee17 0a90 	vmov	r0, s15
    56ca:	47a8      	blx	r5
    56cc:	a376      	add	r3, pc, #472	; (adr r3, 58a8 <mag_to_force+0x2358>)
    56ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    56d2:	47a0      	blx	r4
    56d4:	4602      	mov	r2, r0
    56d6:	460b      	mov	r3, r1
    56d8:	4640      	mov	r0, r8
    56da:	4649      	mov	r1, r9
    56dc:	47b0      	blx	r6
    56de:	4680      	mov	r8, r0
    56e0:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    56e2:	ee68 7aa9 	vmul.f32	s15, s17, s19
    56e6:	ee17 0a90 	vmov	r0, s15
    56ea:	47a8      	blx	r5
    56ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    56f0:	a36f      	add	r3, pc, #444	; (adr r3, 58b0 <mag_to_force+0x2360>)
    56f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    56f6:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    56f8:	4602      	mov	r2, r0
    56fa:	460b      	mov	r3, r1
    56fc:	4640      	mov	r0, r8
    56fe:	4649      	mov	r1, r9
    5700:	47b0      	blx	r6
    5702:	47d8      	blx	fp
    5704:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5708:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    570c:	ed9a 9a05 	vldr	s18, [sl, #20]
    5710:	ee19 0a10 	vmov	r0, s18
    5714:	47a8      	blx	r5
    5716:	a368      	add	r3, pc, #416	; (adr r3, 58b8 <mag_to_force+0x2368>)
    5718:	e9d3 2300 	ldrd	r2, r3, [r3]
    571c:	47a0      	blx	r4
    571e:	a368      	add	r3, pc, #416	; (adr r3, 58c0 <mag_to_force+0x2370>)
    5720:	e9d3 2300 	ldrd	r2, r3, [r3]
    5724:	47b0      	blx	r6
    5726:	4680      	mov	r8, r0
    5728:	4689      	mov	r9, r1
    572a:	a367      	add	r3, pc, #412	; (adr r3, 58c8 <mag_to_force+0x2378>)
    572c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5730:	e9dd 0100 	ldrd	r0, r1, [sp]
    5734:	47a0      	blx	r4
    5736:	4602      	mov	r2, r0
    5738:	460b      	mov	r3, r1
    573a:	4640      	mov	r0, r8
    573c:	4649      	mov	r1, r9
    573e:	47b0      	blx	r6
    5740:	4680      	mov	r8, r0
    5742:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5744:	ee29 aa09 	vmul.f32	s20, s18, s18
    5748:	ee1a 0a10 	vmov	r0, s20
    574c:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    574e:	a360      	add	r3, pc, #384	; (adr r3, 58d0 <mag_to_force+0x2380>)
    5750:	e9d3 2300 	ldrd	r2, r3, [r3]
    5754:	47a0      	blx	r4
    5756:	4602      	mov	r2, r0
    5758:	460b      	mov	r3, r1
    575a:	4640      	mov	r0, r8
    575c:	4649      	mov	r1, r9
    575e:	47b8      	blx	r7
    5760:	4680      	mov	r8, r0
    5762:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5764:	462e      	mov	r6, r5
    5766:	ee68 7a89 	vmul.f32	s15, s17, s18
    576a:	ee17 0a90 	vmov	r0, s15
    576e:	47a8      	blx	r5
    5770:	a359      	add	r3, pc, #356	; (adr r3, 58d8 <mag_to_force+0x2388>)
    5772:	e9d3 2300 	ldrd	r2, r3, [r3]
    5776:	47a0      	blx	r4
    5778:	463d      	mov	r5, r7
    577a:	4602      	mov	r2, r0
    577c:	460b      	mov	r3, r1
    577e:	4640      	mov	r0, r8
    5780:	4649      	mov	r1, r9
    5782:	47b8      	blx	r7
    5784:	4680      	mov	r8, r0
    5786:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5788:	a355      	add	r3, pc, #340	; (adr r3, 58e0 <mag_to_force+0x2390>)
    578a:	e9d3 2300 	ldrd	r2, r3, [r3]
    578e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5792:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5794:	4f63      	ldr	r7, [pc, #396]	; (5924 <mag_to_force+0x23d4>)
    5796:	4602      	mov	r2, r0
    5798:	460b      	mov	r3, r1
    579a:	4640      	mov	r0, r8
    579c:	4649      	mov	r1, r9
    579e:	47b8      	blx	r7
    57a0:	4680      	mov	r8, r0
    57a2:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    57a4:	ee68 7a8a 	vmul.f32	s15, s17, s20
    57a8:	ee17 0a90 	vmov	r0, s15
    57ac:	47b0      	blx	r6
    57ae:	a34e      	add	r3, pc, #312	; (adr r3, 58e8 <mag_to_force+0x2398>)
    57b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    57b4:	47a0      	blx	r4
    57b6:	4602      	mov	r2, r0
    57b8:	460b      	mov	r3, r1
    57ba:	4640      	mov	r0, r8
    57bc:	4649      	mov	r1, r9
    57be:	47a8      	blx	r5
    57c0:	4680      	mov	r8, r0
    57c2:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    57c4:	ee69 7a89 	vmul.f32	s15, s19, s18
    57c8:	ee17 0a90 	vmov	r0, s15
    57cc:	47b0      	blx	r6
    57ce:	a348      	add	r3, pc, #288	; (adr r3, 58f0 <mag_to_force+0x23a0>)
    57d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    57d4:	47a0      	blx	r4
    57d6:	4602      	mov	r2, r0
    57d8:	460b      	mov	r3, r1
    57da:	4640      	mov	r0, r8
    57dc:	4649      	mov	r1, r9
    57de:	47a8      	blx	r5
    57e0:	4680      	mov	r8, r0
    57e2:	4689      	mov	r9, r1
			break;
    57e4:	a344      	add	r3, pc, #272	; (adr r3, 58f8 <mag_to_force+0x23a8>)
    57e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    57ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    57ee:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    57f0:	4602      	mov	r2, r0
    57f2:	460b      	mov	r3, r1
    57f4:	4640      	mov	r0, r8
    57f6:	4649      	mov	r1, r9
    57f8:	47b8      	blx	r7
    57fa:	47d8      	blx	fp
    57fc:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5800:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5804:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    5808:	ee19 0a10 	vmov	r0, s18
    580c:	47b0      	blx	r6
    580e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    5812:	a33b      	add	r3, pc, #236	; (adr r3, 5900 <mag_to_force+0x23b0>)
    5814:	e9d3 2300 	ldrd	r2, r3, [r3]
    5818:	47a0      	blx	r4
    581a:	4602      	mov	r2, r0
    581c:	460b      	mov	r3, r1
    581e:	a13a      	add	r1, pc, #232	; (adr r1, 5908 <mag_to_force+0x23b8>)
    5820:	e9d1 0100 	ldrd	r0, r1, [r1]
    5824:	47b8      	blx	r7
    5826:	4680      	mov	r8, r0
    5828:	4689      	mov	r9, r1
    582a:	a339      	add	r3, pc, #228	; (adr r3, 5910 <mag_to_force+0x23c0>)
    582c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5830:	e9dd 0100 	ldrd	r0, r1, [sp]
    5834:	47a0      	blx	r4
    5836:	4602      	mov	r2, r0
    5838:	460b      	mov	r3, r1
    583a:	4640      	mov	r0, r8
    583c:	4649      	mov	r1, r9
    583e:	47a8      	blx	r5
    5840:	4680      	mov	r8, r0
    5842:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5844:	ee69 7a09 	vmul.f32	s15, s18, s18
    5848:	ee17 0a90 	vmov	r0, s15
    584c:	47b0      	blx	r6
    584e:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5852:	a331      	add	r3, pc, #196	; (adr r3, 5918 <mag_to_force+0x23c8>)
    5854:	e9d3 2300 	ldrd	r2, r3, [r3]
    5858:	47a0      	blx	r4
    585a:	4602      	mov	r2, r0
    585c:	460b      	mov	r3, r1
    585e:	4640      	mov	r0, r8
    5860:	4649      	mov	r1, r9
    5862:	47a8      	blx	r5
    5864:	4680      	mov	r8, r0
    5866:	4689      	mov	r9, r1
    5868:	e072      	b.n	5950 <mag_to_force+0x2400>
    586a:	bf00      	nop
    586c:	f3af 8000 	nop.w
    5870:	6b50b0f2 	.word	0x6b50b0f2
    5874:	3f6c779a 	.word	0x3f6c779a
    5878:	c28f5c29 	.word	0xc28f5c29
    587c:	c024a8f5 	.word	0xc024a8f5
    5880:	d5171e2a 	.word	0xd5171e2a
    5884:	3f68a222 	.word	0x3f68a222
    5888:	69edc5c6 	.word	0x69edc5c6
    588c:	3ea5a9a9 	.word	0x3ea5a9a9
    5890:	81bc997e 	.word	0x81bc997e
    5894:	3ea8aec1 	.word	0x3ea8aec1
    5898:	de9fb9ed 	.word	0xde9fb9ed
    589c:	3e9247cb 	.word	0x3e9247cb
    58a0:	82393435 	.word	0x82393435
    58a4:	3dc8377c 	.word	0x3dc8377c
    58a8:	e19c6262 	.word	0xe19c6262
    58ac:	3dc1773a 	.word	0x3dc1773a
    58b0:	7476128f 	.word	0x7476128f
    58b4:	3da06d3c 	.word	0x3da06d3c
    58b8:	b0fadf2f 	.word	0xb0fadf2f
    58bc:	3f65a8de 	.word	0x3f65a8de
    58c0:	9ba5e354 	.word	0x9ba5e354
    58c4:	400120c4 	.word	0x400120c4
    58c8:	ef1fddec 	.word	0xef1fddec
    58cc:	3f432b55 	.word	0x3f432b55
    58d0:	ebb865dc 	.word	0xebb865dc
    58d4:	3ea2ee70 	.word	0x3ea2ee70
    58d8:	ea8666cf 	.word	0xea8666cf
    58dc:	3e853bb5 	.word	0x3e853bb5
    58e0:	5799a806 	.word	0x5799a806
    58e4:	3e6193c0 	.word	0x3e6193c0
    58e8:	cece3cda 	.word	0xcece3cda
    58ec:	3dc62920 	.word	0x3dc62920
    58f0:	d5564f58 	.word	0xd5564f58
    58f4:	3d683df5 	.word	0x3d683df5
    58f8:	664dc709 	.word	0x664dc709
    58fc:	3d626c2b 	.word	0x3d626c2b
    5900:	c4cdfaca 	.word	0xc4cdfaca
    5904:	3f762174 	.word	0x3f762174
    5908:	f5c28f5c 	.word	0xf5c28f5c
    590c:	40399c28 	.word	0x40399c28
    5910:	5cc42635 	.word	0x5cc42635
    5914:	3f7db552 	.word	0x3f7db552
    5918:	88e4e2e6 	.word	0x88e4e2e6
    591c:	3eb215f9 	.word	0x3eb215f9
    5920:	00005d59 	.word	0x00005d59
    5924:	00005f99 	.word	0x00005f99
    5928:	02547d8d 	.word	0x02547d8d
    592c:	3ea9b22c 	.word	0x3ea9b22c
    5930:	227c1fc4 	.word	0x227c1fc4
    5934:	3e96b3f3 	.word	0x3e96b3f3
    5938:	f946a57c 	.word	0xf946a57c
    593c:	3db0a587 	.word	0x3db0a587
    5940:	82163668 	.word	0x82163668
    5944:	3dbcbdc1 	.word	0x3dbcbdc1
    5948:	02de4486 	.word	0x02de4486
    594c:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5950:	a334      	add	r3, pc, #208	; (adr r3, 5a24 <mag_to_force+0x24d4>)
    5952:	e9d3 2300 	ldrd	r2, r3, [r3]
    5956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    595a:	47a0      	blx	r4
    595c:	4602      	mov	r2, r0
    595e:	460b      	mov	r3, r1
    5960:	e9dd 0100 	ldrd	r0, r1, [sp]
    5964:	47a0      	blx	r4
    5966:	4602      	mov	r2, r0
    5968:	460b      	mov	r3, r1
    596a:	4640      	mov	r0, r8
    596c:	4649      	mov	r1, r9
    596e:	47b8      	blx	r7
    5970:	4680      	mov	r8, r0
    5972:	4689      	mov	r9, r1
    5974:	a32d      	add	r3, pc, #180	; (adr r3, 5a2c <mag_to_force+0x24dc>)
    5976:	e9d3 2300 	ldrd	r2, r3, [r3]
    597a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    597e:	47a0      	blx	r4
    5980:	4602      	mov	r2, r0
    5982:	460b      	mov	r3, r1
    5984:	4640      	mov	r0, r8
    5986:	4649      	mov	r1, r9
    5988:	47a8      	blx	r5
    598a:	4680      	mov	r8, r0
    598c:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    598e:	a329      	add	r3, pc, #164	; (adr r3, 5a34 <mag_to_force+0x24e4>)
    5990:	e9d3 2300 	ldrd	r2, r3, [r3]
    5994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5998:	47a0      	blx	r4
    599a:	4602      	mov	r2, r0
    599c:	460b      	mov	r3, r1
    599e:	e9dd 0100 	ldrd	r0, r1, [sp]
    59a2:	47a0      	blx	r4
    59a4:	4602      	mov	r2, r0
    59a6:	460b      	mov	r3, r1
    59a8:	4640      	mov	r0, r8
    59aa:	4649      	mov	r1, r9
    59ac:	47a8      	blx	r5
    59ae:	4680      	mov	r8, r0
    59b0:	4689      	mov	r9, r1
			break;
    59b2:	a322      	add	r3, pc, #136	; (adr r3, 5a3c <mag_to_force+0x24ec>)
    59b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    59b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    59bc:	47a0      	blx	r4
    59be:	4602      	mov	r2, r0
    59c0:	460b      	mov	r3, r1
    59c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59c6:	47a0      	blx	r4
    59c8:	4602      	mov	r2, r0
    59ca:	460b      	mov	r3, r1
    59cc:	4640      	mov	r0, r8
    59ce:	4649      	mov	r1, r9
    59d0:	47b8      	blx	r7
    59d2:	4680      	mov	r8, r0
    59d4:	4689      	mov	r9, r1
    59d6:	a31b      	add	r3, pc, #108	; (adr r3, 5a44 <mag_to_force+0x24f4>)
    59d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    59dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59e0:	47a0      	blx	r4
	
    59e2:	4602      	mov	r2, r0
    59e4:	460b      	mov	r3, r1
    59e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    59ea:	47a0      	blx	r4
			break;
    59ec:	4602      	mov	r2, r0
    59ee:	460b      	mov	r3, r1
    59f0:	4640      	mov	r0, r8
    59f2:	4649      	mov	r1, r9
    59f4:	47a8      	blx	r5
    59f6:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    59f8:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    59fc:	ee28 8a08 	vmul.f32	s16, s16, s16
    5a00:	ee68 8aa8 	vmul.f32	s17, s17, s17
    5a04:	ee38 8a28 	vadd.f32	s16, s16, s17
    5a08:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    5a0c:	ee18 0a10 	vmov	r0, s16
    5a10:	47b0      	blx	r6
    5a12:	4b03      	ldr	r3, [pc, #12]	; (5a20 <mag_to_force+0x24d0>)
    5a14:	4798      	blx	r3
    5a16:	47d8      	blx	fp
    5a18:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    5a1c:	f7fd bda6 	b.w	356c <mag_to_force+0x1c>
    5a20:	00005d59 	.word	0x00005d59
    5a24:	5a723736 	.word	0x5a723736
    5a28:	3ea77381 	.word	0x3ea77381
    5a2c:	4e8b8a55 	.word	0x4e8b8a55
    5a30:	3ea47f97 	.word	0x3ea47f97
    5a34:	a48fe74d 	.word	0xa48fe74d
    5a38:	3dce7643 	.word	0x3dce7643
    5a3c:	e61b6f11 	.word	0xe61b6f11
    5a40:	3db71428 	.word	0x3db71428
    5a44:	447e7fdf 	.word	0x447e7fdf
    5a48:	3dacd9e7 	.word	0x3dacd9e7

00005a4c <RS>:
#include "math.h"
#include <Tactile_Sensor/neural_spikes.h>

void RS(struct fneuron_t *neuron) {
	// create a "regular spiking" floating point neuron
	neuron->a = 0.02;
    5a4c:	4b07      	ldr	r3, [pc, #28]	; (5a6c <RS+0x20>)
    5a4e:	6003      	str	r3, [r0, #0]
	neuron->b = 0.2;
    5a50:	4b07      	ldr	r3, [pc, #28]	; (5a70 <RS+0x24>)
    5a52:	6043      	str	r3, [r0, #4]
	neuron->c = -65;
    5a54:	4b07      	ldr	r3, [pc, #28]	; (5a74 <RS+0x28>)
    5a56:	6083      	str	r3, [r0, #8]
	neuron->d = 6;
    5a58:	4b07      	ldr	r3, [pc, #28]	; (5a78 <RS+0x2c>)
    5a5a:	60c3      	str	r3, [r0, #12]
	neuron->potential = neuron->recovery = 0;
    5a5c:	2300      	movs	r3, #0
    5a5e:	6143      	str	r3, [r0, #20]
    5a60:	6103      	str	r3, [r0, #16]
	neuron->timestep_neuron = 1; // junan recommendation 0.05, bigger timesteps till 1.5 is fine (see paper) 
    5a62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5a66:	61c3      	str	r3, [r0, #28]
    5a68:	4770      	bx	lr
    5a6a:	bf00      	nop
    5a6c:	3ca3d70a 	.word	0x3ca3d70a
    5a70:	3e4ccccd 	.word	0x3e4ccccd
    5a74:	c2820000 	.word	0xc2820000
    5a78:	40c00000 	.word	0x40c00000

00005a7c <force_parameters>:
}

void force_parameters (struct fneuron_t *neuron) {
	// initiate parameters for normal and shear force
	// parameters normal force
	neuron->beta = 0;
    5a7c:	2300      	movs	r3, #0
    5a7e:	6303      	str	r3, [r0, #48]	; 0x30
	neuron->k_s	= 1.2; //0.0000003
    5a80:	4a05      	ldr	r2, [pc, #20]	; (5a98 <force_parameters+0x1c>)
    5a82:	6342      	str	r2, [r0, #52]	; 0x34
	neuron->k_d = 0;//0.003
    5a84:	6383      	str	r3, [r0, #56]	; 0x38
	neuron-> normal_force_past = 0; 
    5a86:	6283      	str	r3, [r0, #40]	; 0x28
	// parameters shear force
	neuron->theta = 0;
    5a88:	63c3      	str	r3, [r0, #60]	; 0x3c
	neuron->r_s = 4.8;
    5a8a:	4a04      	ldr	r2, [pc, #16]	; (5a9c <force_parameters+0x20>)
    5a8c:	6402      	str	r2, [r0, #64]	; 0x40
	neuron->r_d = 0;
    5a8e:	6443      	str	r3, [r0, #68]	; 0x44
	neuron-> shear_force_past = 0; 
    5a90:	62c3      	str	r3, [r0, #44]	; 0x2c
	neuron->timestep_force = 10; 
    5a92:	4b03      	ldr	r3, [pc, #12]	; (5aa0 <force_parameters+0x24>)
    5a94:	6483      	str	r3, [r0, #72]	; 0x48
    5a96:	4770      	bx	lr
    5a98:	3f99999a 	.word	0x3f99999a
    5a9c:	4099999a 	.word	0x4099999a
    5aa0:	41200000 	.word	0x41200000

00005aa4 <calc_current_normal_force>:
}

void calc_current_normal_force(struct fneuron_t *neuron, float force_z){
    5aa4:	ee07 1a90 	vmov	s15, r1
	neuron->normal_force = force_z;
    5aa8:	6201      	str	r1, [r0, #32]
	neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    5aaa:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    5aae:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    5ab2:	ee67 6aa6 	vmul.f32	s13, s15, s13
    5ab6:	ee37 7a26 	vadd.f32	s14, s14, s13
    5aba:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->normal_force_past = neuron->normal_force;
    5abe:	6281      	str	r1, [r0, #40]	; 0x28
    5ac0:	4770      	bx	lr

00005ac2 <calc_current_shear_force>:
}

void calc_current_shear_force(struct fneuron_t *neuron,float force_r){//(fneuron_t *neuron, bool start, float force_x, float force_y
    5ac2:	ee07 1a90 	vmov	s15, r1
	
	neuron->shear_force = force_r;
    5ac6:	6241      	str	r1, [r0, #36]	; 0x24
	neuron->cell_current = neuron->theta + (neuron->r_s * neuron->shear_force);
    5ac8:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    5acc:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    5ad0:	ee67 6aa6 	vmul.f32	s13, s15, s13
    5ad4:	ee37 7a26 	vadd.f32	s14, s14, s13
    5ad8:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->shear_force_past = neuron->shear_force;
    5adc:	62c1      	str	r1, [r0, #44]	; 0x2c
    5ade:	4770      	bx	lr

00005ae0 <step_f>:
	
}

void step_f(struct fneuron_t *neuron, float synapse, float ms) {
    5ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ae4:	ed2d 8b04 	vpush	{d8-d9}
    5ae8:	b082      	sub	sp, #8
	// step a neuron through ms milliseconds with synapse input
	//   if you don't have a good reason to do otherwise, keep ms between 0.1
	//   and 1.0
	if (neuron->potential >= 30) {
    5aea:	ed90 8a04 	vldr	s16, [r0, #16]
    5aee:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    5af2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5afa:	da6c      	bge.n	5bd6 <step_f+0xf6>
    5afc:	ee08 2a90 	vmov	s17, r2
    5b00:	468a      	mov	sl, r1
    5b02:	4604      	mov	r4, r0
		neuron->potential = neuron->c;
		neuron->recovery += neuron->d;
		return;
	}
	float v = neuron->potential;
	float u = neuron->recovery;
    5b04:	ed90 9a05 	vldr	s18, [r0, #20]
	neuron->potential = v + ms * (0.04 * v * v + 5 * v + 140 - u + synapse);
    5b08:	4d3b      	ldr	r5, [pc, #236]	; (5bf8 <step_f+0x118>)
    5b0a:	ee18 0a10 	vmov	r0, s16
    5b0e:	47a8      	blx	r5
    5b10:	4680      	mov	r8, r0
    5b12:	4689      	mov	r9, r1
    5b14:	4f39      	ldr	r7, [pc, #228]	; (5bfc <step_f+0x11c>)
    5b16:	a336      	add	r3, pc, #216	; (adr r3, 5bf0 <step_f+0x110>)
    5b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    5b1c:	47b8      	blx	r7
    5b1e:	4602      	mov	r2, r0
    5b20:	460b      	mov	r3, r1
    5b22:	e9cd 8900 	strd	r8, r9, [sp]
    5b26:	4640      	mov	r0, r8
    5b28:	4649      	mov	r1, r9
    5b2a:	47b8      	blx	r7
    5b2c:	4680      	mov	r8, r0
    5b2e:	4689      	mov	r9, r1
    5b30:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    5b34:	ee68 7a27 	vmul.f32	s15, s16, s15
    5b38:	ee17 0a90 	vmov	r0, s15
    5b3c:	47a8      	blx	r5
    5b3e:	4e30      	ldr	r6, [pc, #192]	; (5c00 <step_f+0x120>)
    5b40:	4602      	mov	r2, r0
    5b42:	460b      	mov	r3, r1
    5b44:	4640      	mov	r0, r8
    5b46:	4649      	mov	r1, r9
    5b48:	47b0      	blx	r6
    5b4a:	2200      	movs	r2, #0
    5b4c:	4b2d      	ldr	r3, [pc, #180]	; (5c04 <step_f+0x124>)
    5b4e:	47b0      	blx	r6
    5b50:	4680      	mov	r8, r0
    5b52:	4689      	mov	r9, r1
    5b54:	ee19 0a10 	vmov	r0, s18
    5b58:	47a8      	blx	r5
    5b5a:	4602      	mov	r2, r0
    5b5c:	460b      	mov	r3, r1
    5b5e:	4640      	mov	r0, r8
    5b60:	4649      	mov	r1, r9
    5b62:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5c0c <step_f+0x12c>
    5b66:	47c0      	blx	r8
    5b68:	4680      	mov	r8, r0
    5b6a:	4689      	mov	r9, r1
    5b6c:	4650      	mov	r0, sl
    5b6e:	47a8      	blx	r5
    5b70:	4642      	mov	r2, r8
    5b72:	464b      	mov	r3, r9
    5b74:	47b0      	blx	r6
    5b76:	4680      	mov	r8, r0
    5b78:	4689      	mov	r9, r1
    5b7a:	ee18 0a90 	vmov	r0, s17
    5b7e:	47a8      	blx	r5
    5b80:	4642      	mov	r2, r8
    5b82:	464b      	mov	r3, r9
    5b84:	47b8      	blx	r7
    5b86:	4602      	mov	r2, r0
    5b88:	460b      	mov	r3, r1
    5b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
    5b8e:	47b0      	blx	r6
    5b90:	4b1d      	ldr	r3, [pc, #116]	; (5c08 <step_f+0x128>)
    5b92:	4798      	blx	r3
    5b94:	ee07 0a90 	vmov	s15, r0
    5b98:	6120      	str	r0, [r4, #16]
	if (neuron -> potential > 30) {
    5b9a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    5b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ba6:	dd01      	ble.n	5bac <step_f+0xcc>
		neuron -> potential = 30;
    5ba8:	ed84 7a04 	vstr	s14, [r4, #16]
	}
	neuron->recovery = u + ms * (neuron->a * (neuron->b * v - u));
    5bac:	edd4 7a00 	vldr	s15, [r4]
    5bb0:	ed94 7a01 	vldr	s14, [r4, #4]
    5bb4:	ee28 8a07 	vmul.f32	s16, s16, s14
    5bb8:	ee38 8a49 	vsub.f32	s16, s16, s18
    5bbc:	ee27 8a88 	vmul.f32	s16, s15, s16
    5bc0:	ee68 8a88 	vmul.f32	s17, s17, s16
    5bc4:	ee79 8a28 	vadd.f32	s17, s18, s17
    5bc8:	edc4 8a05 	vstr	s17, [r4, #20]
	return;
}
    5bcc:	b002      	add	sp, #8
    5bce:	ecbd 8b04 	vpop	{d8-d9}
    5bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		neuron->potential = neuron->c;
    5bd6:	6883      	ldr	r3, [r0, #8]
    5bd8:	6103      	str	r3, [r0, #16]
		neuron->recovery += neuron->d;
    5bda:	ed90 7a03 	vldr	s14, [r0, #12]
    5bde:	edd0 7a05 	vldr	s15, [r0, #20]
    5be2:	ee77 7a87 	vadd.f32	s15, s15, s14
    5be6:	edc0 7a05 	vstr	s15, [r0, #20]
		return;
    5bea:	e7ef      	b.n	5bcc <step_f+0xec>
    5bec:	f3af 8000 	nop.w
    5bf0:	47ae147b 	.word	0x47ae147b
    5bf4:	3fa47ae1 	.word	0x3fa47ae1
    5bf8:	00006259 	.word	0x00006259
    5bfc:	00006301 	.word	0x00006301
    5c00:	00005f9d 	.word	0x00005f9d
    5c04:	40618000 	.word	0x40618000
    5c08:	00006861 	.word	0x00006861
    5c0c:	00005f99 	.word	0x00005f99

00005c10 <neuron_init_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}
*/

void neuron_init_row(struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    5c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c14:	4680      	mov	r8, r0
    5c16:	460f      	mov	r7, r1
    5c18:	4615      	mov	r5, r2
	
	RS(&neuron_pair_top->neuron_normal);
    5c1a:	4e0f      	ldr	r6, [pc, #60]	; (5c58 <neuron_init_row+0x48>)
    5c1c:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_normal);
    5c1e:	4640      	mov	r0, r8
    5c20:	4c0e      	ldr	r4, [pc, #56]	; (5c5c <neuron_init_row+0x4c>)
    5c22:	47a0      	blx	r4
	
	RS(&neuron_pair_top->neuron_shear);
    5c24:	f108 084c 	add.w	r8, r8, #76	; 0x4c
    5c28:	4640      	mov	r0, r8
    5c2a:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_shear);
    5c2c:	4640      	mov	r0, r8
    5c2e:	47a0      	blx	r4
	
	
	RS(&neuron_pair_middle->neuron_normal);
    5c30:	4638      	mov	r0, r7
    5c32:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_normal);
    5c34:	4638      	mov	r0, r7
    5c36:	47a0      	blx	r4
	
	RS(&neuron_pair_middle->neuron_shear);
    5c38:	374c      	adds	r7, #76	; 0x4c
    5c3a:	4638      	mov	r0, r7
    5c3c:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_shear);
    5c3e:	4638      	mov	r0, r7
    5c40:	47a0      	blx	r4
	
	
	RS(&neuron_pair_bottom->neuron_normal);
    5c42:	4628      	mov	r0, r5
    5c44:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_normal);
    5c46:	4628      	mov	r0, r5
    5c48:	47a0      	blx	r4
	
	RS(&neuron_pair_bottom->neuron_shear);
    5c4a:	354c      	adds	r5, #76	; 0x4c
    5c4c:	4628      	mov	r0, r5
    5c4e:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_shear);
    5c50:	4628      	mov	r0, r5
    5c52:	47a0      	blx	r4
    5c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c58:	00005a4d 	.word	0x00005a4d
    5c5c:	00005a7d 	.word	0x00005a7d

00005c60 <neuron_init_array>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}

void neuron_init_array(struct neuron_pair *neuron_pair_1, struct neuron_pair *neuron_pair_2, struct neuron_pair *neuron_pair_3, struct neuron_pair *neuron_pair_4, struct neuron_pair *neuron_pair_5, struct neuron_pair *neuron_pair_6, struct neuron_pair *neuron_pair_7, struct neuron_pair *neuron_pair_8, struct neuron_pair *neuron_pair_9)
{
    5c60:	b538      	push	{r3, r4, r5, lr}
    5c62:	461d      	mov	r5, r3
	neuron_init_row(neuron_pair_1, neuron_pair_2, neuron_pair_3);
    5c64:	4c05      	ldr	r4, [pc, #20]	; (5c7c <neuron_init_array+0x1c>)
    5c66:	47a0      	blx	r4
	neuron_init_row(neuron_pair_4, neuron_pair_5, neuron_pair_6);
    5c68:	9a05      	ldr	r2, [sp, #20]
    5c6a:	9904      	ldr	r1, [sp, #16]
    5c6c:	4628      	mov	r0, r5
    5c6e:	47a0      	blx	r4
	neuron_init_row(neuron_pair_7, neuron_pair_8, neuron_pair_9);
    5c70:	9a08      	ldr	r2, [sp, #32]
    5c72:	9907      	ldr	r1, [sp, #28]
    5c74:	9806      	ldr	r0, [sp, #24]
    5c76:	47a0      	blx	r4
    5c78:	bd38      	pop	{r3, r4, r5, pc}
    5c7a:	bf00      	nop
    5c7c:	00005c11 	.word	0x00005c11

00005c80 <neuron_calc_row>:
}

 void neuron_calc_row(struct sensorRow_Values *sensor_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    5c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c84:	b085      	sub	sp, #20
    5c86:	4604      	mov	r4, r0
    5c88:	460d      	mov	r5, r1
    5c8a:	4617      	mov	r7, r2
    5c8c:	461e      	mov	r6, r3
	 
	 uint8_t repeatition = (uint8_t) (neuron_pair_top->neuron_normal.timestep_force/neuron_pair_top->neuron_normal.timestep_neuron);
    5c8e:	edd1 6a12 	vldr	s13, [r1, #72]	; 0x48
    5c92:	ed91 7a07 	vldr	s14, [r1, #28]
    5c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5c9e:	edcd 7a00 	vstr	s15, [sp]
    5ca2:	f89d 9000 	ldrb.w	r9, [sp]
	 
	 calc_current_normal_force(&neuron_pair_top->neuron_normal,sensor_row->force_z_top);
    5ca6:	9100      	str	r1, [sp, #0]
    5ca8:	6c81      	ldr	r1, [r0, #72]	; 0x48
    5caa:	4628      	mov	r0, r5
    5cac:	f8df a080 	ldr.w	sl, [pc, #128]	; 5d30 <neuron_calc_row+0xb0>
    5cb0:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_top->neuron_shear,sensor_row->force_r_top);
    5cb2:	f105 0b4c 	add.w	fp, r5, #76	; 0x4c
    5cb6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    5cb8:	4658      	mov	r0, fp
    5cba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5d34 <neuron_calc_row+0xb4>
    5cbe:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_middle->neuron_normal,sensor_row->force_z_middle);
    5cc0:	9701      	str	r7, [sp, #4]
    5cc2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    5cc4:	4638      	mov	r0, r7
    5cc6:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_middle->neuron_shear,sensor_row->force_r_middle);
    5cc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    5ccc:	9302      	str	r3, [sp, #8]
    5cce:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5cd0:	4618      	mov	r0, r3
    5cd2:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_bottom->neuron_normal,sensor_row->force_z_bottom);
    5cd4:	9603      	str	r6, [sp, #12]
    5cd6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    5cd8:	4630      	mov	r0, r6
    5cda:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_bottom->neuron_shear,sensor_row->force_r_bottom);
    5cdc:	f106 0a4c 	add.w	sl, r6, #76	; 0x4c
    5ce0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    5ce2:	4650      	mov	r0, sl
    5ce4:	47c0      	blx	r8
	 
	 for(int i = 0; i<repeatition; i++){
    5ce6:	f04f 0800 	mov.w	r8, #0
    5cea:	e01a      	b.n	5d22 <neuron_calc_row+0xa2>
		step_f(&neuron_pair_top->neuron_normal, neuron_pair_top->neuron_normal.cell_current,neuron_pair_top->neuron_normal.timestep_neuron);//neuron_pair_top->neuron_normal.timestep_neuron
    5cec:	69ea      	ldr	r2, [r5, #28]
    5cee:	69a9      	ldr	r1, [r5, #24]
    5cf0:	9800      	ldr	r0, [sp, #0]
    5cf2:	4c0e      	ldr	r4, [pc, #56]	; (5d2c <neuron_calc_row+0xac>)
    5cf4:	47a0      	blx	r4
		step_f(&neuron_pair_top->neuron_shear, neuron_pair_top->neuron_shear.cell_current, neuron_pair_top->neuron_shear.timestep_neuron);
    5cf6:	6eaa      	ldr	r2, [r5, #104]	; 0x68
    5cf8:	6e69      	ldr	r1, [r5, #100]	; 0x64
    5cfa:	4658      	mov	r0, fp
    5cfc:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_normal, neuron_pair_middle->neuron_normal.cell_current, neuron_pair_middle->neuron_normal.timestep_neuron);
    5cfe:	69fa      	ldr	r2, [r7, #28]
    5d00:	69b9      	ldr	r1, [r7, #24]
    5d02:	9801      	ldr	r0, [sp, #4]
    5d04:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_shear, neuron_pair_middle->neuron_shear.cell_current, neuron_pair_middle->neuron_shear.timestep_neuron);
    5d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
    5d08:	6e79      	ldr	r1, [r7, #100]	; 0x64
    5d0a:	9802      	ldr	r0, [sp, #8]
    5d0c:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_normal, neuron_pair_bottom->neuron_normal.cell_current, neuron_pair_bottom->neuron_normal.timestep_neuron);
    5d0e:	69f2      	ldr	r2, [r6, #28]
    5d10:	69b1      	ldr	r1, [r6, #24]
    5d12:	9803      	ldr	r0, [sp, #12]
    5d14:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_shear, neuron_pair_bottom->neuron_shear.cell_current, neuron_pair_bottom->neuron_shear.timestep_neuron);
    5d16:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    5d18:	6e71      	ldr	r1, [r6, #100]	; 0x64
    5d1a:	4650      	mov	r0, sl
    5d1c:	47a0      	blx	r4
	 for(int i = 0; i<repeatition; i++){
    5d1e:	f108 0801 	add.w	r8, r8, #1
    5d22:	45c8      	cmp	r8, r9
    5d24:	dbe2      	blt.n	5cec <neuron_calc_row+0x6c>
	 }
}
    5d26:	b005      	add	sp, #20
    5d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d2c:	00005ae1 	.word	0x00005ae1
    5d30:	00005aa5 	.word	0x00005aa5
    5d34:	00005ac3 	.word	0x00005ac3

00005d38 <update_struct_values_neural>:
	step_f(neuron3_normal, neuron3_normal->cell_current, neuron3_normal->timestep_neuron);
	step_f(neuron3_shear, neuron3_shear->cell_current, neuron3_shear->timestep_neuron);
}
*/

void update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    5d38:	b410      	push	{r4}
	neuron_row->neuron_top_normal = neuron_pair_top->neuron_normal.potential;
    5d3a:	690c      	ldr	r4, [r1, #16]
    5d3c:	6004      	str	r4, [r0, #0]
	neuron_row->neuron_top_shear = neuron_pair_top->neuron_shear.potential;
    5d3e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    5d40:	6041      	str	r1, [r0, #4]
	
	neuron_row->neuron_middle_normal = neuron_pair_middle->neuron_normal.potential;
    5d42:	6911      	ldr	r1, [r2, #16]
    5d44:	6081      	str	r1, [r0, #8]
	neuron_row->neuron_middle_shear = neuron_pair_middle->neuron_shear.potential;
    5d46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    5d48:	60c2      	str	r2, [r0, #12]
	
	neuron_row->neuron_bottom_normal = neuron_pair_bottom->neuron_normal.potential;
    5d4a:	691a      	ldr	r2, [r3, #16]
    5d4c:	6102      	str	r2, [r0, #16]
	neuron_row->neuron_bottom_shear = neuron_pair_bottom->neuron_shear.potential;
    5d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    5d50:	6143      	str	r3, [r0, #20]
    5d52:	f85d 4b04 	ldr.w	r4, [sp], #4
    5d56:	4770      	bx	lr

00005d58 <sqrt>:
    5d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d5c:	b08b      	sub	sp, #44	; 0x2c
    5d5e:	4604      	mov	r4, r0
    5d60:	460d      	mov	r5, r1
    5d62:	f000 f857 	bl	5e14 <__ieee754_sqrt>
    5d66:	4b29      	ldr	r3, [pc, #164]	; (5e0c <sqrt+0xb4>)
    5d68:	f993 a000 	ldrsb.w	sl, [r3]
    5d6c:	f1ba 3fff 	cmp.w	sl, #4294967295
    5d70:	4606      	mov	r6, r0
    5d72:	460f      	mov	r7, r1
    5d74:	d012      	beq.n	5d9c <sqrt+0x44>
    5d76:	4622      	mov	r2, r4
    5d78:	462b      	mov	r3, r5
    5d7a:	4620      	mov	r0, r4
    5d7c:	4629      	mov	r1, r5
    5d7e:	f000 fd59 	bl	6834 <__aeabi_dcmpun>
    5d82:	4683      	mov	fp, r0
    5d84:	b950      	cbnz	r0, 5d9c <sqrt+0x44>
    5d86:	f04f 0800 	mov.w	r8, #0
    5d8a:	f04f 0900 	mov.w	r9, #0
    5d8e:	4642      	mov	r2, r8
    5d90:	464b      	mov	r3, r9
    5d92:	4620      	mov	r0, r4
    5d94:	4629      	mov	r1, r5
    5d96:	f000 fd25 	bl	67e4 <__aeabi_dcmplt>
    5d9a:	b920      	cbnz	r0, 5da6 <sqrt+0x4e>
    5d9c:	4630      	mov	r0, r6
    5d9e:	4639      	mov	r1, r7
    5da0:	b00b      	add	sp, #44	; 0x2c
    5da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5da6:	4b1a      	ldr	r3, [pc, #104]	; (5e10 <sqrt+0xb8>)
    5da8:	f8cd b020 	str.w	fp, [sp, #32]
    5dac:	2201      	movs	r2, #1
    5dae:	e9cd 4504 	strd	r4, r5, [sp, #16]
    5db2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    5db6:	e88d 000c 	stmia.w	sp, {r2, r3}
    5dba:	f1ba 0f00 	cmp.w	sl, #0
    5dbe:	d017      	beq.n	5df0 <sqrt+0x98>
    5dc0:	4642      	mov	r2, r8
    5dc2:	464b      	mov	r3, r9
    5dc4:	4640      	mov	r0, r8
    5dc6:	4649      	mov	r1, r9
    5dc8:	f000 fbc4 	bl	6554 <__aeabi_ddiv>
    5dcc:	f1ba 0f02 	cmp.w	sl, #2
    5dd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5dd4:	d10e      	bne.n	5df4 <sqrt+0x9c>
    5dd6:	f000 fd93 	bl	6900 <__errno>
    5dda:	2321      	movs	r3, #33	; 0x21
    5ddc:	6003      	str	r3, [r0, #0]
    5dde:	9b08      	ldr	r3, [sp, #32]
    5de0:	b973      	cbnz	r3, 5e00 <sqrt+0xa8>
    5de2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    5de6:	4630      	mov	r0, r6
    5de8:	4639      	mov	r1, r7
    5dea:	b00b      	add	sp, #44	; 0x2c
    5dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5df0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    5df4:	4668      	mov	r0, sp
    5df6:	f000 f8c9 	bl	5f8c <matherr>
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d1ef      	bne.n	5dde <sqrt+0x86>
    5dfe:	e7ea      	b.n	5dd6 <sqrt+0x7e>
    5e00:	f000 fd7e 	bl	6900 <__errno>
    5e04:	9b08      	ldr	r3, [sp, #32]
    5e06:	6003      	str	r3, [r0, #0]
    5e08:	e7eb      	b.n	5de2 <sqrt+0x8a>
    5e0a:	bf00      	nop
    5e0c:	200000ee 	.word	0x200000ee
    5e10:	00006b5c 	.word	0x00006b5c

00005e14 <__ieee754_sqrt>:
    5e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e18:	4f5b      	ldr	r7, [pc, #364]	; (5f88 <__ieee754_sqrt+0x174>)
    5e1a:	438f      	bics	r7, r1
    5e1c:	4605      	mov	r5, r0
    5e1e:	460c      	mov	r4, r1
    5e20:	f000 8092 	beq.w	5f48 <__ieee754_sqrt+0x134>
    5e24:	2900      	cmp	r1, #0
    5e26:	460b      	mov	r3, r1
    5e28:	4602      	mov	r2, r0
    5e2a:	dd6f      	ble.n	5f0c <__ieee754_sqrt+0xf8>
    5e2c:	150f      	asrs	r7, r1, #20
    5e2e:	d07b      	beq.n	5f28 <__ieee754_sqrt+0x114>
    5e30:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    5e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e38:	07f8      	lsls	r0, r7, #31
    5e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5e3e:	d45c      	bmi.n	5efa <__ieee754_sqrt+0xe6>
    5e40:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    5e44:	2600      	movs	r6, #0
    5e46:	440b      	add	r3, r1
    5e48:	107f      	asrs	r7, r7, #1
    5e4a:	0052      	lsls	r2, r2, #1
    5e4c:	46b6      	mov	lr, r6
    5e4e:	2016      	movs	r0, #22
    5e50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    5e54:	eb0e 0401 	add.w	r4, lr, r1
    5e58:	429c      	cmp	r4, r3
    5e5a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    5e5e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5e62:	dc03      	bgt.n	5e6c <__ieee754_sqrt+0x58>
    5e64:	1b1b      	subs	r3, r3, r4
    5e66:	eb04 0e01 	add.w	lr, r4, r1
    5e6a:	440e      	add	r6, r1
    5e6c:	3801      	subs	r0, #1
    5e6e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    5e72:	ea4f 0151 	mov.w	r1, r1, lsr #1
    5e76:	d1ed      	bne.n	5e54 <__ieee754_sqrt+0x40>
    5e78:	4684      	mov	ip, r0
    5e7a:	2420      	movs	r4, #32
    5e7c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5e80:	e009      	b.n	5e96 <__ieee754_sqrt+0x82>
    5e82:	d020      	beq.n	5ec6 <__ieee754_sqrt+0xb2>
    5e84:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    5e88:	3c01      	subs	r4, #1
    5e8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    5e8e:	442b      	add	r3, r5
    5e90:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5e94:	d020      	beq.n	5ed8 <__ieee754_sqrt+0xc4>
    5e96:	4573      	cmp	r3, lr
    5e98:	eb01 050c 	add.w	r5, r1, ip
    5e9c:	ddf1      	ble.n	5e82 <__ieee754_sqrt+0x6e>
    5e9e:	2d00      	cmp	r5, #0
    5ea0:	eb05 0c01 	add.w	ip, r5, r1
    5ea4:	db09      	blt.n	5eba <__ieee754_sqrt+0xa6>
    5ea6:	46f0      	mov	r8, lr
    5ea8:	4295      	cmp	r5, r2
    5eaa:	eba3 030e 	sub.w	r3, r3, lr
    5eae:	d900      	bls.n	5eb2 <__ieee754_sqrt+0x9e>
    5eb0:	3b01      	subs	r3, #1
    5eb2:	1b52      	subs	r2, r2, r5
    5eb4:	4408      	add	r0, r1
    5eb6:	46c6      	mov	lr, r8
    5eb8:	e7e4      	b.n	5e84 <__ieee754_sqrt+0x70>
    5eba:	f1bc 0f00 	cmp.w	ip, #0
    5ebe:	dbf2      	blt.n	5ea6 <__ieee754_sqrt+0x92>
    5ec0:	f10e 0801 	add.w	r8, lr, #1
    5ec4:	e7f0      	b.n	5ea8 <__ieee754_sqrt+0x94>
    5ec6:	4295      	cmp	r5, r2
    5ec8:	d8dc      	bhi.n	5e84 <__ieee754_sqrt+0x70>
    5eca:	2d00      	cmp	r5, #0
    5ecc:	eb05 0c01 	add.w	ip, r5, r1
    5ed0:	db44      	blt.n	5f5c <__ieee754_sqrt+0x148>
    5ed2:	4698      	mov	r8, r3
    5ed4:	2300      	movs	r3, #0
    5ed6:	e7ec      	b.n	5eb2 <__ieee754_sqrt+0x9e>
    5ed8:	4313      	orrs	r3, r2
    5eda:	d113      	bne.n	5f04 <__ieee754_sqrt+0xf0>
    5edc:	0840      	lsrs	r0, r0, #1
    5ede:	1073      	asrs	r3, r6, #1
    5ee0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    5ee4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5ee8:	07f2      	lsls	r2, r6, #31
    5eea:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    5eee:	bf48      	it	mi
    5ef0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    5ef4:	4649      	mov	r1, r9
    5ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5efa:	005b      	lsls	r3, r3, #1
    5efc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    5f00:	0052      	lsls	r2, r2, #1
    5f02:	e79d      	b.n	5e40 <__ieee754_sqrt+0x2c>
    5f04:	1c41      	adds	r1, r0, #1
    5f06:	d02d      	beq.n	5f64 <__ieee754_sqrt+0x150>
    5f08:	3001      	adds	r0, #1
    5f0a:	e7e7      	b.n	5edc <__ieee754_sqrt+0xc8>
    5f0c:	4606      	mov	r6, r0
    5f0e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    5f12:	433e      	orrs	r6, r7
    5f14:	d0ef      	beq.n	5ef6 <__ieee754_sqrt+0xe2>
    5f16:	bb69      	cbnz	r1, 5f74 <__ieee754_sqrt+0x160>
    5f18:	460f      	mov	r7, r1
    5f1a:	0ad3      	lsrs	r3, r2, #11
    5f1c:	3f15      	subs	r7, #21
    5f1e:	0552      	lsls	r2, r2, #21
    5f20:	2b00      	cmp	r3, #0
    5f22:	d0fa      	beq.n	5f1a <__ieee754_sqrt+0x106>
    5f24:	02de      	lsls	r6, r3, #11
    5f26:	d420      	bmi.n	5f6a <__ieee754_sqrt+0x156>
    5f28:	2400      	movs	r4, #0
    5f2a:	e000      	b.n	5f2e <__ieee754_sqrt+0x11a>
    5f2c:	4604      	mov	r4, r0
    5f2e:	005b      	lsls	r3, r3, #1
    5f30:	02dd      	lsls	r5, r3, #11
    5f32:	f104 0001 	add.w	r0, r4, #1
    5f36:	d5f9      	bpl.n	5f2c <__ieee754_sqrt+0x118>
    5f38:	f1c0 0120 	rsb	r1, r0, #32
    5f3c:	fa22 f101 	lsr.w	r1, r2, r1
    5f40:	430b      	orrs	r3, r1
    5f42:	1b3f      	subs	r7, r7, r4
    5f44:	4082      	lsls	r2, r0
    5f46:	e773      	b.n	5e30 <__ieee754_sqrt+0x1c>
    5f48:	4602      	mov	r2, r0
    5f4a:	460b      	mov	r3, r1
    5f4c:	f000 f9d8 	bl	6300 <__aeabi_dmul>
    5f50:	462a      	mov	r2, r5
    5f52:	4623      	mov	r3, r4
    5f54:	f000 f822 	bl	5f9c <__adddf3>
    5f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5f5c:	f1bc 0f00 	cmp.w	ip, #0
    5f60:	daae      	bge.n	5ec0 <__ieee754_sqrt+0xac>
    5f62:	e7b6      	b.n	5ed2 <__ieee754_sqrt+0xbe>
    5f64:	3601      	adds	r6, #1
    5f66:	4620      	mov	r0, r4
    5f68:	e7b9      	b.n	5ede <__ieee754_sqrt+0xca>
    5f6a:	2000      	movs	r0, #0
    5f6c:	2120      	movs	r1, #32
    5f6e:	f04f 34ff 	mov.w	r4, #4294967295
    5f72:	e7e3      	b.n	5f3c <__ieee754_sqrt+0x128>
    5f74:	4602      	mov	r2, r0
    5f76:	460b      	mov	r3, r1
    5f78:	f000 f80e 	bl	5f98 <__aeabi_dsub>
    5f7c:	4602      	mov	r2, r0
    5f7e:	460b      	mov	r3, r1
    5f80:	f000 fae8 	bl	6554 <__aeabi_ddiv>
    5f84:	e7b7      	b.n	5ef6 <__ieee754_sqrt+0xe2>
    5f86:	bf00      	nop
    5f88:	7ff00000 	.word	0x7ff00000

00005f8c <matherr>:
    5f8c:	2000      	movs	r0, #0
    5f8e:	4770      	bx	lr

00005f90 <__aeabi_drsub>:
    5f90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5f94:	e002      	b.n	5f9c <__adddf3>
    5f96:	bf00      	nop

00005f98 <__aeabi_dsub>:
    5f98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005f9c <__adddf3>:
    5f9c:	b530      	push	{r4, r5, lr}
    5f9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5fa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    5fa6:	ea94 0f05 	teq	r4, r5
    5faa:	bf08      	it	eq
    5fac:	ea90 0f02 	teqeq	r0, r2
    5fb0:	bf1f      	itttt	ne
    5fb2:	ea54 0c00 	orrsne.w	ip, r4, r0
    5fb6:	ea55 0c02 	orrsne.w	ip, r5, r2
    5fba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    5fbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5fc2:	f000 80e2 	beq.w	618a <__adddf3+0x1ee>
    5fc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    5fca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    5fce:	bfb8      	it	lt
    5fd0:	426d      	neglt	r5, r5
    5fd2:	dd0c      	ble.n	5fee <__adddf3+0x52>
    5fd4:	442c      	add	r4, r5
    5fd6:	ea80 0202 	eor.w	r2, r0, r2
    5fda:	ea81 0303 	eor.w	r3, r1, r3
    5fde:	ea82 0000 	eor.w	r0, r2, r0
    5fe2:	ea83 0101 	eor.w	r1, r3, r1
    5fe6:	ea80 0202 	eor.w	r2, r0, r2
    5fea:	ea81 0303 	eor.w	r3, r1, r3
    5fee:	2d36      	cmp	r5, #54	; 0x36
    5ff0:	bf88      	it	hi
    5ff2:	bd30      	pophi	{r4, r5, pc}
    5ff4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5ff8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5ffc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6000:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6004:	d002      	beq.n	600c <__adddf3+0x70>
    6006:	4240      	negs	r0, r0
    6008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    600c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6010:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6014:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6018:	d002      	beq.n	6020 <__adddf3+0x84>
    601a:	4252      	negs	r2, r2
    601c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6020:	ea94 0f05 	teq	r4, r5
    6024:	f000 80a7 	beq.w	6176 <__adddf3+0x1da>
    6028:	f1a4 0401 	sub.w	r4, r4, #1
    602c:	f1d5 0e20 	rsbs	lr, r5, #32
    6030:	db0d      	blt.n	604e <__adddf3+0xb2>
    6032:	fa02 fc0e 	lsl.w	ip, r2, lr
    6036:	fa22 f205 	lsr.w	r2, r2, r5
    603a:	1880      	adds	r0, r0, r2
    603c:	f141 0100 	adc.w	r1, r1, #0
    6040:	fa03 f20e 	lsl.w	r2, r3, lr
    6044:	1880      	adds	r0, r0, r2
    6046:	fa43 f305 	asr.w	r3, r3, r5
    604a:	4159      	adcs	r1, r3
    604c:	e00e      	b.n	606c <__adddf3+0xd0>
    604e:	f1a5 0520 	sub.w	r5, r5, #32
    6052:	f10e 0e20 	add.w	lr, lr, #32
    6056:	2a01      	cmp	r2, #1
    6058:	fa03 fc0e 	lsl.w	ip, r3, lr
    605c:	bf28      	it	cs
    605e:	f04c 0c02 	orrcs.w	ip, ip, #2
    6062:	fa43 f305 	asr.w	r3, r3, r5
    6066:	18c0      	adds	r0, r0, r3
    6068:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    606c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6070:	d507      	bpl.n	6082 <__adddf3+0xe6>
    6072:	f04f 0e00 	mov.w	lr, #0
    6076:	f1dc 0c00 	rsbs	ip, ip, #0
    607a:	eb7e 0000 	sbcs.w	r0, lr, r0
    607e:	eb6e 0101 	sbc.w	r1, lr, r1
    6082:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6086:	d31b      	bcc.n	60c0 <__adddf3+0x124>
    6088:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    608c:	d30c      	bcc.n	60a8 <__adddf3+0x10c>
    608e:	0849      	lsrs	r1, r1, #1
    6090:	ea5f 0030 	movs.w	r0, r0, rrx
    6094:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6098:	f104 0401 	add.w	r4, r4, #1
    609c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    60a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    60a4:	f080 809a 	bcs.w	61dc <__adddf3+0x240>
    60a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    60ac:	bf08      	it	eq
    60ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    60b2:	f150 0000 	adcs.w	r0, r0, #0
    60b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    60ba:	ea41 0105 	orr.w	r1, r1, r5
    60be:	bd30      	pop	{r4, r5, pc}
    60c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    60c4:	4140      	adcs	r0, r0
    60c6:	eb41 0101 	adc.w	r1, r1, r1
    60ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    60ce:	f1a4 0401 	sub.w	r4, r4, #1
    60d2:	d1e9      	bne.n	60a8 <__adddf3+0x10c>
    60d4:	f091 0f00 	teq	r1, #0
    60d8:	bf04      	itt	eq
    60da:	4601      	moveq	r1, r0
    60dc:	2000      	moveq	r0, #0
    60de:	fab1 f381 	clz	r3, r1
    60e2:	bf08      	it	eq
    60e4:	3320      	addeq	r3, #32
    60e6:	f1a3 030b 	sub.w	r3, r3, #11
    60ea:	f1b3 0220 	subs.w	r2, r3, #32
    60ee:	da0c      	bge.n	610a <__adddf3+0x16e>
    60f0:	320c      	adds	r2, #12
    60f2:	dd08      	ble.n	6106 <__adddf3+0x16a>
    60f4:	f102 0c14 	add.w	ip, r2, #20
    60f8:	f1c2 020c 	rsb	r2, r2, #12
    60fc:	fa01 f00c 	lsl.w	r0, r1, ip
    6100:	fa21 f102 	lsr.w	r1, r1, r2
    6104:	e00c      	b.n	6120 <__adddf3+0x184>
    6106:	f102 0214 	add.w	r2, r2, #20
    610a:	bfd8      	it	le
    610c:	f1c2 0c20 	rsble	ip, r2, #32
    6110:	fa01 f102 	lsl.w	r1, r1, r2
    6114:	fa20 fc0c 	lsr.w	ip, r0, ip
    6118:	bfdc      	itt	le
    611a:	ea41 010c 	orrle.w	r1, r1, ip
    611e:	4090      	lslle	r0, r2
    6120:	1ae4      	subs	r4, r4, r3
    6122:	bfa2      	ittt	ge
    6124:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6128:	4329      	orrge	r1, r5
    612a:	bd30      	popge	{r4, r5, pc}
    612c:	ea6f 0404 	mvn.w	r4, r4
    6130:	3c1f      	subs	r4, #31
    6132:	da1c      	bge.n	616e <__adddf3+0x1d2>
    6134:	340c      	adds	r4, #12
    6136:	dc0e      	bgt.n	6156 <__adddf3+0x1ba>
    6138:	f104 0414 	add.w	r4, r4, #20
    613c:	f1c4 0220 	rsb	r2, r4, #32
    6140:	fa20 f004 	lsr.w	r0, r0, r4
    6144:	fa01 f302 	lsl.w	r3, r1, r2
    6148:	ea40 0003 	orr.w	r0, r0, r3
    614c:	fa21 f304 	lsr.w	r3, r1, r4
    6150:	ea45 0103 	orr.w	r1, r5, r3
    6154:	bd30      	pop	{r4, r5, pc}
    6156:	f1c4 040c 	rsb	r4, r4, #12
    615a:	f1c4 0220 	rsb	r2, r4, #32
    615e:	fa20 f002 	lsr.w	r0, r0, r2
    6162:	fa01 f304 	lsl.w	r3, r1, r4
    6166:	ea40 0003 	orr.w	r0, r0, r3
    616a:	4629      	mov	r1, r5
    616c:	bd30      	pop	{r4, r5, pc}
    616e:	fa21 f004 	lsr.w	r0, r1, r4
    6172:	4629      	mov	r1, r5
    6174:	bd30      	pop	{r4, r5, pc}
    6176:	f094 0f00 	teq	r4, #0
    617a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    617e:	bf06      	itte	eq
    6180:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6184:	3401      	addeq	r4, #1
    6186:	3d01      	subne	r5, #1
    6188:	e74e      	b.n	6028 <__adddf3+0x8c>
    618a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    618e:	bf18      	it	ne
    6190:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6194:	d029      	beq.n	61ea <__adddf3+0x24e>
    6196:	ea94 0f05 	teq	r4, r5
    619a:	bf08      	it	eq
    619c:	ea90 0f02 	teqeq	r0, r2
    61a0:	d005      	beq.n	61ae <__adddf3+0x212>
    61a2:	ea54 0c00 	orrs.w	ip, r4, r0
    61a6:	bf04      	itt	eq
    61a8:	4619      	moveq	r1, r3
    61aa:	4610      	moveq	r0, r2
    61ac:	bd30      	pop	{r4, r5, pc}
    61ae:	ea91 0f03 	teq	r1, r3
    61b2:	bf1e      	ittt	ne
    61b4:	2100      	movne	r1, #0
    61b6:	2000      	movne	r0, #0
    61b8:	bd30      	popne	{r4, r5, pc}
    61ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    61be:	d105      	bne.n	61cc <__adddf3+0x230>
    61c0:	0040      	lsls	r0, r0, #1
    61c2:	4149      	adcs	r1, r1
    61c4:	bf28      	it	cs
    61c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    61ca:	bd30      	pop	{r4, r5, pc}
    61cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    61d0:	bf3c      	itt	cc
    61d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    61d6:	bd30      	popcc	{r4, r5, pc}
    61d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    61dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    61e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    61e4:	f04f 0000 	mov.w	r0, #0
    61e8:	bd30      	pop	{r4, r5, pc}
    61ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    61ee:	bf1a      	itte	ne
    61f0:	4619      	movne	r1, r3
    61f2:	4610      	movne	r0, r2
    61f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    61f8:	bf1c      	itt	ne
    61fa:	460b      	movne	r3, r1
    61fc:	4602      	movne	r2, r0
    61fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6202:	bf06      	itte	eq
    6204:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6208:	ea91 0f03 	teqeq	r1, r3
    620c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6210:	bd30      	pop	{r4, r5, pc}
    6212:	bf00      	nop

00006214 <__aeabi_ui2d>:
    6214:	f090 0f00 	teq	r0, #0
    6218:	bf04      	itt	eq
    621a:	2100      	moveq	r1, #0
    621c:	4770      	bxeq	lr
    621e:	b530      	push	{r4, r5, lr}
    6220:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6224:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6228:	f04f 0500 	mov.w	r5, #0
    622c:	f04f 0100 	mov.w	r1, #0
    6230:	e750      	b.n	60d4 <__adddf3+0x138>
    6232:	bf00      	nop

00006234 <__aeabi_i2d>:
    6234:	f090 0f00 	teq	r0, #0
    6238:	bf04      	itt	eq
    623a:	2100      	moveq	r1, #0
    623c:	4770      	bxeq	lr
    623e:	b530      	push	{r4, r5, lr}
    6240:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6244:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6248:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    624c:	bf48      	it	mi
    624e:	4240      	negmi	r0, r0
    6250:	f04f 0100 	mov.w	r1, #0
    6254:	e73e      	b.n	60d4 <__adddf3+0x138>
    6256:	bf00      	nop

00006258 <__aeabi_f2d>:
    6258:	0042      	lsls	r2, r0, #1
    625a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    625e:	ea4f 0131 	mov.w	r1, r1, rrx
    6262:	ea4f 7002 	mov.w	r0, r2, lsl #28
    6266:	bf1f      	itttt	ne
    6268:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    626c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6270:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6274:	4770      	bxne	lr
    6276:	f092 0f00 	teq	r2, #0
    627a:	bf14      	ite	ne
    627c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6280:	4770      	bxeq	lr
    6282:	b530      	push	{r4, r5, lr}
    6284:	f44f 7460 	mov.w	r4, #896	; 0x380
    6288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    628c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6290:	e720      	b.n	60d4 <__adddf3+0x138>
    6292:	bf00      	nop

00006294 <__aeabi_ul2d>:
    6294:	ea50 0201 	orrs.w	r2, r0, r1
    6298:	bf08      	it	eq
    629a:	4770      	bxeq	lr
    629c:	b530      	push	{r4, r5, lr}
    629e:	f04f 0500 	mov.w	r5, #0
    62a2:	e00a      	b.n	62ba <__aeabi_l2d+0x16>

000062a4 <__aeabi_l2d>:
    62a4:	ea50 0201 	orrs.w	r2, r0, r1
    62a8:	bf08      	it	eq
    62aa:	4770      	bxeq	lr
    62ac:	b530      	push	{r4, r5, lr}
    62ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    62b2:	d502      	bpl.n	62ba <__aeabi_l2d+0x16>
    62b4:	4240      	negs	r0, r0
    62b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    62ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
    62be:	f104 0432 	add.w	r4, r4, #50	; 0x32
    62c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    62c6:	f43f aedc 	beq.w	6082 <__adddf3+0xe6>
    62ca:	f04f 0203 	mov.w	r2, #3
    62ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    62d2:	bf18      	it	ne
    62d4:	3203      	addne	r2, #3
    62d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    62da:	bf18      	it	ne
    62dc:	3203      	addne	r2, #3
    62de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    62e2:	f1c2 0320 	rsb	r3, r2, #32
    62e6:	fa00 fc03 	lsl.w	ip, r0, r3
    62ea:	fa20 f002 	lsr.w	r0, r0, r2
    62ee:	fa01 fe03 	lsl.w	lr, r1, r3
    62f2:	ea40 000e 	orr.w	r0, r0, lr
    62f6:	fa21 f102 	lsr.w	r1, r1, r2
    62fa:	4414      	add	r4, r2
    62fc:	e6c1      	b.n	6082 <__adddf3+0xe6>
    62fe:	bf00      	nop

00006300 <__aeabi_dmul>:
    6300:	b570      	push	{r4, r5, r6, lr}
    6302:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    630a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    630e:	bf1d      	ittte	ne
    6310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6314:	ea94 0f0c 	teqne	r4, ip
    6318:	ea95 0f0c 	teqne	r5, ip
    631c:	f000 f8de 	bleq	64dc <__aeabi_dmul+0x1dc>
    6320:	442c      	add	r4, r5
    6322:	ea81 0603 	eor.w	r6, r1, r3
    6326:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    632a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    632e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    6332:	bf18      	it	ne
    6334:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    6338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    633c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6340:	d038      	beq.n	63b4 <__aeabi_dmul+0xb4>
    6342:	fba0 ce02 	umull	ip, lr, r0, r2
    6346:	f04f 0500 	mov.w	r5, #0
    634a:	fbe1 e502 	umlal	lr, r5, r1, r2
    634e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    6352:	fbe0 e503 	umlal	lr, r5, r0, r3
    6356:	f04f 0600 	mov.w	r6, #0
    635a:	fbe1 5603 	umlal	r5, r6, r1, r3
    635e:	f09c 0f00 	teq	ip, #0
    6362:	bf18      	it	ne
    6364:	f04e 0e01 	orrne.w	lr, lr, #1
    6368:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    636c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6370:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    6374:	d204      	bcs.n	6380 <__aeabi_dmul+0x80>
    6376:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    637a:	416d      	adcs	r5, r5
    637c:	eb46 0606 	adc.w	r6, r6, r6
    6380:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    6384:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    6388:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    638c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    6390:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    6394:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    6398:	bf88      	it	hi
    639a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    639e:	d81e      	bhi.n	63de <__aeabi_dmul+0xde>
    63a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    63a4:	bf08      	it	eq
    63a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    63aa:	f150 0000 	adcs.w	r0, r0, #0
    63ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    63b2:	bd70      	pop	{r4, r5, r6, pc}
    63b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    63b8:	ea46 0101 	orr.w	r1, r6, r1
    63bc:	ea40 0002 	orr.w	r0, r0, r2
    63c0:	ea81 0103 	eor.w	r1, r1, r3
    63c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    63c8:	bfc2      	ittt	gt
    63ca:	ebd4 050c 	rsbsgt	r5, r4, ip
    63ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    63d2:	bd70      	popgt	{r4, r5, r6, pc}
    63d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    63d8:	f04f 0e00 	mov.w	lr, #0
    63dc:	3c01      	subs	r4, #1
    63de:	f300 80ab 	bgt.w	6538 <__aeabi_dmul+0x238>
    63e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    63e6:	bfde      	ittt	le
    63e8:	2000      	movle	r0, #0
    63ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    63ee:	bd70      	pople	{r4, r5, r6, pc}
    63f0:	f1c4 0400 	rsb	r4, r4, #0
    63f4:	3c20      	subs	r4, #32
    63f6:	da35      	bge.n	6464 <__aeabi_dmul+0x164>
    63f8:	340c      	adds	r4, #12
    63fa:	dc1b      	bgt.n	6434 <__aeabi_dmul+0x134>
    63fc:	f104 0414 	add.w	r4, r4, #20
    6400:	f1c4 0520 	rsb	r5, r4, #32
    6404:	fa00 f305 	lsl.w	r3, r0, r5
    6408:	fa20 f004 	lsr.w	r0, r0, r4
    640c:	fa01 f205 	lsl.w	r2, r1, r5
    6410:	ea40 0002 	orr.w	r0, r0, r2
    6414:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    6418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    641c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6420:	fa21 f604 	lsr.w	r6, r1, r4
    6424:	eb42 0106 	adc.w	r1, r2, r6
    6428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    642c:	bf08      	it	eq
    642e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    6432:	bd70      	pop	{r4, r5, r6, pc}
    6434:	f1c4 040c 	rsb	r4, r4, #12
    6438:	f1c4 0520 	rsb	r5, r4, #32
    643c:	fa00 f304 	lsl.w	r3, r0, r4
    6440:	fa20 f005 	lsr.w	r0, r0, r5
    6444:	fa01 f204 	lsl.w	r2, r1, r4
    6448:	ea40 0002 	orr.w	r0, r0, r2
    644c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6454:	f141 0100 	adc.w	r1, r1, #0
    6458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    645c:	bf08      	it	eq
    645e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	f1c4 0520 	rsb	r5, r4, #32
    6468:	fa00 f205 	lsl.w	r2, r0, r5
    646c:	ea4e 0e02 	orr.w	lr, lr, r2
    6470:	fa20 f304 	lsr.w	r3, r0, r4
    6474:	fa01 f205 	lsl.w	r2, r1, r5
    6478:	ea43 0302 	orr.w	r3, r3, r2
    647c:	fa21 f004 	lsr.w	r0, r1, r4
    6480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6484:	fa21 f204 	lsr.w	r2, r1, r4
    6488:	ea20 0002 	bic.w	r0, r0, r2
    648c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    6490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6494:	bf08      	it	eq
    6496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    649a:	bd70      	pop	{r4, r5, r6, pc}
    649c:	f094 0f00 	teq	r4, #0
    64a0:	d10f      	bne.n	64c2 <__aeabi_dmul+0x1c2>
    64a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    64a6:	0040      	lsls	r0, r0, #1
    64a8:	eb41 0101 	adc.w	r1, r1, r1
    64ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    64b0:	bf08      	it	eq
    64b2:	3c01      	subeq	r4, #1
    64b4:	d0f7      	beq.n	64a6 <__aeabi_dmul+0x1a6>
    64b6:	ea41 0106 	orr.w	r1, r1, r6
    64ba:	f095 0f00 	teq	r5, #0
    64be:	bf18      	it	ne
    64c0:	4770      	bxne	lr
    64c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    64c6:	0052      	lsls	r2, r2, #1
    64c8:	eb43 0303 	adc.w	r3, r3, r3
    64cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    64d0:	bf08      	it	eq
    64d2:	3d01      	subeq	r5, #1
    64d4:	d0f7      	beq.n	64c6 <__aeabi_dmul+0x1c6>
    64d6:	ea43 0306 	orr.w	r3, r3, r6
    64da:	4770      	bx	lr
    64dc:	ea94 0f0c 	teq	r4, ip
    64e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    64e4:	bf18      	it	ne
    64e6:	ea95 0f0c 	teqne	r5, ip
    64ea:	d00c      	beq.n	6506 <__aeabi_dmul+0x206>
    64ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    64f0:	bf18      	it	ne
    64f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    64f6:	d1d1      	bne.n	649c <__aeabi_dmul+0x19c>
    64f8:	ea81 0103 	eor.w	r1, r1, r3
    64fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6500:	f04f 0000 	mov.w	r0, #0
    6504:	bd70      	pop	{r4, r5, r6, pc}
    6506:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    650a:	bf06      	itte	eq
    650c:	4610      	moveq	r0, r2
    650e:	4619      	moveq	r1, r3
    6510:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6514:	d019      	beq.n	654a <__aeabi_dmul+0x24a>
    6516:	ea94 0f0c 	teq	r4, ip
    651a:	d102      	bne.n	6522 <__aeabi_dmul+0x222>
    651c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    6520:	d113      	bne.n	654a <__aeabi_dmul+0x24a>
    6522:	ea95 0f0c 	teq	r5, ip
    6526:	d105      	bne.n	6534 <__aeabi_dmul+0x234>
    6528:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    652c:	bf1c      	itt	ne
    652e:	4610      	movne	r0, r2
    6530:	4619      	movne	r1, r3
    6532:	d10a      	bne.n	654a <__aeabi_dmul+0x24a>
    6534:	ea81 0103 	eor.w	r1, r1, r3
    6538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    653c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6544:	f04f 0000 	mov.w	r0, #0
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    654e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    6552:	bd70      	pop	{r4, r5, r6, pc}

00006554 <__aeabi_ddiv>:
    6554:	b570      	push	{r4, r5, r6, lr}
    6556:	f04f 0cff 	mov.w	ip, #255	; 0xff
    655a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    655e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6562:	bf1d      	ittte	ne
    6564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6568:	ea94 0f0c 	teqne	r4, ip
    656c:	ea95 0f0c 	teqne	r5, ip
    6570:	f000 f8a7 	bleq	66c2 <__aeabi_ddiv+0x16e>
    6574:	eba4 0405 	sub.w	r4, r4, r5
    6578:	ea81 0e03 	eor.w	lr, r1, r3
    657c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6580:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6584:	f000 8088 	beq.w	6698 <__aeabi_ddiv+0x144>
    6588:	ea4f 3303 	mov.w	r3, r3, lsl #12
    658c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6590:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    6594:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    6598:	ea4f 2202 	mov.w	r2, r2, lsl #8
    659c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    65a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    65a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    65a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    65ac:	429d      	cmp	r5, r3
    65ae:	bf08      	it	eq
    65b0:	4296      	cmpeq	r6, r2
    65b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    65b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    65ba:	d202      	bcs.n	65c2 <__aeabi_ddiv+0x6e>
    65bc:	085b      	lsrs	r3, r3, #1
    65be:	ea4f 0232 	mov.w	r2, r2, rrx
    65c2:	1ab6      	subs	r6, r6, r2
    65c4:	eb65 0503 	sbc.w	r5, r5, r3
    65c8:	085b      	lsrs	r3, r3, #1
    65ca:	ea4f 0232 	mov.w	r2, r2, rrx
    65ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    65d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    65d6:	ebb6 0e02 	subs.w	lr, r6, r2
    65da:	eb75 0e03 	sbcs.w	lr, r5, r3
    65de:	bf22      	ittt	cs
    65e0:	1ab6      	subcs	r6, r6, r2
    65e2:	4675      	movcs	r5, lr
    65e4:	ea40 000c 	orrcs.w	r0, r0, ip
    65e8:	085b      	lsrs	r3, r3, #1
    65ea:	ea4f 0232 	mov.w	r2, r2, rrx
    65ee:	ebb6 0e02 	subs.w	lr, r6, r2
    65f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    65f6:	bf22      	ittt	cs
    65f8:	1ab6      	subcs	r6, r6, r2
    65fa:	4675      	movcs	r5, lr
    65fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6600:	085b      	lsrs	r3, r3, #1
    6602:	ea4f 0232 	mov.w	r2, r2, rrx
    6606:	ebb6 0e02 	subs.w	lr, r6, r2
    660a:	eb75 0e03 	sbcs.w	lr, r5, r3
    660e:	bf22      	ittt	cs
    6610:	1ab6      	subcs	r6, r6, r2
    6612:	4675      	movcs	r5, lr
    6614:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6618:	085b      	lsrs	r3, r3, #1
    661a:	ea4f 0232 	mov.w	r2, r2, rrx
    661e:	ebb6 0e02 	subs.w	lr, r6, r2
    6622:	eb75 0e03 	sbcs.w	lr, r5, r3
    6626:	bf22      	ittt	cs
    6628:	1ab6      	subcs	r6, r6, r2
    662a:	4675      	movcs	r5, lr
    662c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6630:	ea55 0e06 	orrs.w	lr, r5, r6
    6634:	d018      	beq.n	6668 <__aeabi_ddiv+0x114>
    6636:	ea4f 1505 	mov.w	r5, r5, lsl #4
    663a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    663e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    6642:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    6646:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    664a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    664e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    6652:	d1c0      	bne.n	65d6 <__aeabi_ddiv+0x82>
    6654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6658:	d10b      	bne.n	6672 <__aeabi_ddiv+0x11e>
    665a:	ea41 0100 	orr.w	r1, r1, r0
    665e:	f04f 0000 	mov.w	r0, #0
    6662:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    6666:	e7b6      	b.n	65d6 <__aeabi_ddiv+0x82>
    6668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    666c:	bf04      	itt	eq
    666e:	4301      	orreq	r1, r0
    6670:	2000      	moveq	r0, #0
    6672:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    6676:	bf88      	it	hi
    6678:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    667c:	f63f aeaf 	bhi.w	63de <__aeabi_dmul+0xde>
    6680:	ebb5 0c03 	subs.w	ip, r5, r3
    6684:	bf04      	itt	eq
    6686:	ebb6 0c02 	subseq.w	ip, r6, r2
    668a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    668e:	f150 0000 	adcs.w	r0, r0, #0
    6692:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6696:	bd70      	pop	{r4, r5, r6, pc}
    6698:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    669c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    66a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    66a4:	bfc2      	ittt	gt
    66a6:	ebd4 050c 	rsbsgt	r5, r4, ip
    66aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    66ae:	bd70      	popgt	{r4, r5, r6, pc}
    66b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    66b4:	f04f 0e00 	mov.w	lr, #0
    66b8:	3c01      	subs	r4, #1
    66ba:	e690      	b.n	63de <__aeabi_dmul+0xde>
    66bc:	ea45 0e06 	orr.w	lr, r5, r6
    66c0:	e68d      	b.n	63de <__aeabi_dmul+0xde>
    66c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    66c6:	ea94 0f0c 	teq	r4, ip
    66ca:	bf08      	it	eq
    66cc:	ea95 0f0c 	teqeq	r5, ip
    66d0:	f43f af3b 	beq.w	654a <__aeabi_dmul+0x24a>
    66d4:	ea94 0f0c 	teq	r4, ip
    66d8:	d10a      	bne.n	66f0 <__aeabi_ddiv+0x19c>
    66da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    66de:	f47f af34 	bne.w	654a <__aeabi_dmul+0x24a>
    66e2:	ea95 0f0c 	teq	r5, ip
    66e6:	f47f af25 	bne.w	6534 <__aeabi_dmul+0x234>
    66ea:	4610      	mov	r0, r2
    66ec:	4619      	mov	r1, r3
    66ee:	e72c      	b.n	654a <__aeabi_dmul+0x24a>
    66f0:	ea95 0f0c 	teq	r5, ip
    66f4:	d106      	bne.n	6704 <__aeabi_ddiv+0x1b0>
    66f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    66fa:	f43f aefd 	beq.w	64f8 <__aeabi_dmul+0x1f8>
    66fe:	4610      	mov	r0, r2
    6700:	4619      	mov	r1, r3
    6702:	e722      	b.n	654a <__aeabi_dmul+0x24a>
    6704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6708:	bf18      	it	ne
    670a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    670e:	f47f aec5 	bne.w	649c <__aeabi_dmul+0x19c>
    6712:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    6716:	f47f af0d 	bne.w	6534 <__aeabi_dmul+0x234>
    671a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    671e:	f47f aeeb 	bne.w	64f8 <__aeabi_dmul+0x1f8>
    6722:	e712      	b.n	654a <__aeabi_dmul+0x24a>

00006724 <__gedf2>:
    6724:	f04f 3cff 	mov.w	ip, #4294967295
    6728:	e006      	b.n	6738 <__cmpdf2+0x4>
    672a:	bf00      	nop

0000672c <__ledf2>:
    672c:	f04f 0c01 	mov.w	ip, #1
    6730:	e002      	b.n	6738 <__cmpdf2+0x4>
    6732:	bf00      	nop

00006734 <__cmpdf2>:
    6734:	f04f 0c01 	mov.w	ip, #1
    6738:	f84d cd04 	str.w	ip, [sp, #-4]!
    673c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6748:	bf18      	it	ne
    674a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    674e:	d01b      	beq.n	6788 <__cmpdf2+0x54>
    6750:	b001      	add	sp, #4
    6752:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    6756:	bf0c      	ite	eq
    6758:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    675c:	ea91 0f03 	teqne	r1, r3
    6760:	bf02      	ittt	eq
    6762:	ea90 0f02 	teqeq	r0, r2
    6766:	2000      	moveq	r0, #0
    6768:	4770      	bxeq	lr
    676a:	f110 0f00 	cmn.w	r0, #0
    676e:	ea91 0f03 	teq	r1, r3
    6772:	bf58      	it	pl
    6774:	4299      	cmppl	r1, r3
    6776:	bf08      	it	eq
    6778:	4290      	cmpeq	r0, r2
    677a:	bf2c      	ite	cs
    677c:	17d8      	asrcs	r0, r3, #31
    677e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    6782:	f040 0001 	orr.w	r0, r0, #1
    6786:	4770      	bx	lr
    6788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    678c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6790:	d102      	bne.n	6798 <__cmpdf2+0x64>
    6792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6796:	d107      	bne.n	67a8 <__cmpdf2+0x74>
    6798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    679c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    67a0:	d1d6      	bne.n	6750 <__cmpdf2+0x1c>
    67a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    67a6:	d0d3      	beq.n	6750 <__cmpdf2+0x1c>
    67a8:	f85d 0b04 	ldr.w	r0, [sp], #4
    67ac:	4770      	bx	lr
    67ae:	bf00      	nop

000067b0 <__aeabi_cdrcmple>:
    67b0:	4684      	mov	ip, r0
    67b2:	4610      	mov	r0, r2
    67b4:	4662      	mov	r2, ip
    67b6:	468c      	mov	ip, r1
    67b8:	4619      	mov	r1, r3
    67ba:	4663      	mov	r3, ip
    67bc:	e000      	b.n	67c0 <__aeabi_cdcmpeq>
    67be:	bf00      	nop

000067c0 <__aeabi_cdcmpeq>:
    67c0:	b501      	push	{r0, lr}
    67c2:	f7ff ffb7 	bl	6734 <__cmpdf2>
    67c6:	2800      	cmp	r0, #0
    67c8:	bf48      	it	mi
    67ca:	f110 0f00 	cmnmi.w	r0, #0
    67ce:	bd01      	pop	{r0, pc}

000067d0 <__aeabi_dcmpeq>:
    67d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    67d4:	f7ff fff4 	bl	67c0 <__aeabi_cdcmpeq>
    67d8:	bf0c      	ite	eq
    67da:	2001      	moveq	r0, #1
    67dc:	2000      	movne	r0, #0
    67de:	f85d fb08 	ldr.w	pc, [sp], #8
    67e2:	bf00      	nop

000067e4 <__aeabi_dcmplt>:
    67e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    67e8:	f7ff ffea 	bl	67c0 <__aeabi_cdcmpeq>
    67ec:	bf34      	ite	cc
    67ee:	2001      	movcc	r0, #1
    67f0:	2000      	movcs	r0, #0
    67f2:	f85d fb08 	ldr.w	pc, [sp], #8
    67f6:	bf00      	nop

000067f8 <__aeabi_dcmple>:
    67f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    67fc:	f7ff ffe0 	bl	67c0 <__aeabi_cdcmpeq>
    6800:	bf94      	ite	ls
    6802:	2001      	movls	r0, #1
    6804:	2000      	movhi	r0, #0
    6806:	f85d fb08 	ldr.w	pc, [sp], #8
    680a:	bf00      	nop

0000680c <__aeabi_dcmpge>:
    680c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6810:	f7ff ffce 	bl	67b0 <__aeabi_cdrcmple>
    6814:	bf94      	ite	ls
    6816:	2001      	movls	r0, #1
    6818:	2000      	movhi	r0, #0
    681a:	f85d fb08 	ldr.w	pc, [sp], #8
    681e:	bf00      	nop

00006820 <__aeabi_dcmpgt>:
    6820:	f84d ed08 	str.w	lr, [sp, #-8]!
    6824:	f7ff ffc4 	bl	67b0 <__aeabi_cdrcmple>
    6828:	bf34      	ite	cc
    682a:	2001      	movcc	r0, #1
    682c:	2000      	movcs	r0, #0
    682e:	f85d fb08 	ldr.w	pc, [sp], #8
    6832:	bf00      	nop

00006834 <__aeabi_dcmpun>:
    6834:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6838:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    683c:	d102      	bne.n	6844 <__aeabi_dcmpun+0x10>
    683e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6842:	d10a      	bne.n	685a <__aeabi_dcmpun+0x26>
    6844:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    684c:	d102      	bne.n	6854 <__aeabi_dcmpun+0x20>
    684e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    6852:	d102      	bne.n	685a <__aeabi_dcmpun+0x26>
    6854:	f04f 0000 	mov.w	r0, #0
    6858:	4770      	bx	lr
    685a:	f04f 0001 	mov.w	r0, #1
    685e:	4770      	bx	lr

00006860 <__aeabi_d2f>:
    6860:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6864:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6868:	bf24      	itt	cs
    686a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    686e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6872:	d90d      	bls.n	6890 <__aeabi_d2f+0x30>
    6874:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6878:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    687c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6880:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6884:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6888:	bf08      	it	eq
    688a:	f020 0001 	biceq.w	r0, r0, #1
    688e:	4770      	bx	lr
    6890:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6894:	d121      	bne.n	68da <__aeabi_d2f+0x7a>
    6896:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    689a:	bfbc      	itt	lt
    689c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    68a0:	4770      	bxlt	lr
    68a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    68a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    68aa:	f1c2 0218 	rsb	r2, r2, #24
    68ae:	f1c2 0c20 	rsb	ip, r2, #32
    68b2:	fa10 f30c 	lsls.w	r3, r0, ip
    68b6:	fa20 f002 	lsr.w	r0, r0, r2
    68ba:	bf18      	it	ne
    68bc:	f040 0001 	orrne.w	r0, r0, #1
    68c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    68c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    68c8:	fa03 fc0c 	lsl.w	ip, r3, ip
    68cc:	ea40 000c 	orr.w	r0, r0, ip
    68d0:	fa23 f302 	lsr.w	r3, r3, r2
    68d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    68d8:	e7cc      	b.n	6874 <__aeabi_d2f+0x14>
    68da:	ea7f 5362 	mvns.w	r3, r2, asr #21
    68de:	d107      	bne.n	68f0 <__aeabi_d2f+0x90>
    68e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    68e4:	bf1e      	ittt	ne
    68e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    68ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    68ee:	4770      	bxne	lr
    68f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    68f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    68f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    68fc:	4770      	bx	lr
    68fe:	bf00      	nop

00006900 <__errno>:
    6900:	4b01      	ldr	r3, [pc, #4]	; (6908 <__errno+0x8>)
    6902:	6818      	ldr	r0, [r3, #0]
    6904:	4770      	bx	lr
    6906:	bf00      	nop
    6908:	200000f0 	.word	0x200000f0

0000690c <__libc_init_array>:
    690c:	b570      	push	{r4, r5, r6, lr}
    690e:	4e0d      	ldr	r6, [pc, #52]	; (6944 <__libc_init_array+0x38>)
    6910:	4c0d      	ldr	r4, [pc, #52]	; (6948 <__libc_init_array+0x3c>)
    6912:	1ba4      	subs	r4, r4, r6
    6914:	10a4      	asrs	r4, r4, #2
    6916:	2500      	movs	r5, #0
    6918:	42a5      	cmp	r5, r4
    691a:	d109      	bne.n	6930 <__libc_init_array+0x24>
    691c:	4e0b      	ldr	r6, [pc, #44]	; (694c <__libc_init_array+0x40>)
    691e:	4c0c      	ldr	r4, [pc, #48]	; (6950 <__libc_init_array+0x44>)
    6920:	f000 f950 	bl	6bc4 <_init>
    6924:	1ba4      	subs	r4, r4, r6
    6926:	10a4      	asrs	r4, r4, #2
    6928:	2500      	movs	r5, #0
    692a:	42a5      	cmp	r5, r4
    692c:	d105      	bne.n	693a <__libc_init_array+0x2e>
    692e:	bd70      	pop	{r4, r5, r6, pc}
    6930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6934:	4798      	blx	r3
    6936:	3501      	adds	r5, #1
    6938:	e7ee      	b.n	6918 <__libc_init_array+0xc>
    693a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    693e:	4798      	blx	r3
    6940:	3501      	adds	r5, #1
    6942:	e7f2      	b.n	692a <__libc_init_array+0x1e>
    6944:	00006bd0 	.word	0x00006bd0
    6948:	00006bd0 	.word	0x00006bd0
    694c:	00006bd0 	.word	0x00006bd0
    6950:	00006bd4 	.word	0x00006bd4

00006954 <dummy_register>:
    6954:	20000008                                ... 

00006958 <abort_fifo_start>:
    6958:	20000012                                ... 

0000695c <wr_pdram_start>:
    695c:	2000004e                                N.. 

00006960 <cf_pdram_start>:
    6960:	20000038                                8.. 

00006964 <rd_pdram_start>:
    6964:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    6974:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    6984:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    6994:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    69a4:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

000069b4 <_cfgs>:
    69b4:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    6ab4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    6ac4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00006ad4 <_usarts>:
	...

00006aec <_i2cms>:
    6aec:	00000003 70200014 00000100 000000ff     ...... p........
    6afc:	00d70000 05f5e100 00000007 70200014     .............. p
    6b0c:	00000100 000000ff 00d70000 05f5e100     ................

00006b1c <_i2css>:
	...

00006b2c <sercomspi_regs>:
    6b2c:	0030000c 00020000 00000000 01ff0004     ..0.............
    6b3c:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    6b4c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    6b5c:	74727173 00000000                       sqrt....

00006b64 <__sf_fake_stderr>:
	...

00006b84 <__sf_fake_stdin>:
	...

00006ba4 <__sf_fake_stdout>:
	...

00006bc4 <_init>:
    6bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bc6:	bf00      	nop
    6bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6bca:	bc08      	pop	{r3}
    6bcc:	469e      	mov	lr, r3
    6bce:	4770      	bx	lr

00006bd0 <__init_array_start>:
    6bd0:	00000289 	.word	0x00000289

00006bd4 <_fini>:
    6bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bd6:	bf00      	nop
    6bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6bda:	bc08      	pop	{r3}
    6bdc:	469e      	mov	lr, r3
    6bde:	4770      	bx	lr

00006be0 <__fini_array_start>:
    6be0:	00000265 	.word	0x00000265
