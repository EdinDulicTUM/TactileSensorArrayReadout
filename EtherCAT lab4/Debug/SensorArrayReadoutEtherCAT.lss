
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004848  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  00004848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200d8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200d8  2**0
                  CONTENTS
  4 .bss          00000d80  200000e0  00004930  000200e0  2**4
                  ALLOC
  5 .stack        00010000  20000e60  000056b0  000200e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020106  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033520  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000041d3  00000000  00000000  0005367f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001124e  00000000  00000000  00057852  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e80  00000000  00000000  00068aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f58  00000000  00000000  00069920  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036939  00000000  00000000  0006a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000190cd  00000000  00000000  000a11b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012279c  00000000  00000000  000ba27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ad4  00000000  00000000  001dca1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 0e 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     `.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	69 12 00 00 75 12 00 00 81 12 00 00 8d 12 00 00     i...u...........
      cc:	99 12 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	75 13 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     u...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 7d 22 00 00 dd 02 00 00 dd 02 00 00     ....}"..........
     204:	dd 02 00 00 51 07 00 00 dd 02 00 00 dd 02 00 00     ....Q...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000e0 	.word	0x200000e0
     280:	00000000 	.word	0x00000000
     284:	00004848 	.word	0x00004848

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004848 	.word	0x00004848
     2c4:	200000e4 	.word	0x200000e4
     2c8:	00004848 	.word	0x00004848
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000575 	.word	0x00000575

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00004848 	.word	0x00004848
     340:	200000d8 	.word	0x200000d8
     344:	200000e0 	.word	0x200000e0
     348:	20000e60 	.word	0x20000e60
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00004509 	.word	0x00004509
     358:	00002539 	.word	0x00002539

0000035c <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     35c:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     35e:	4a08      	ldr	r2, [pc, #32]	; (380 <TIMER_1_init+0x24>)
     360:	6993      	ldr	r3, [r2, #24]
     362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     366:	6193      	str	r3, [r2, #24]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     368:	2240      	movs	r2, #64	; 0x40
     36a:	4b06      	ldr	r3, [pc, #24]	; (384 <TIMER_1_init+0x28>)
     36c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_1, TC3, _tc_get_timer());
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <TIMER_1_init+0x2c>)
     372:	4798      	blx	r3
     374:	4602      	mov	r2, r0
     376:	4905      	ldr	r1, [pc, #20]	; (38c <TIMER_1_init+0x30>)
     378:	4805      	ldr	r0, [pc, #20]	; (390 <TIMER_1_init+0x34>)
     37a:	4b06      	ldr	r3, [pc, #24]	; (394 <TIMER_1_init+0x38>)
     37c:	4798      	blx	r3
     37e:	bd08      	pop	{r3, pc}
     380:	40000800 	.word	0x40000800
     384:	40001c00 	.word	0x40001c00
     388:	00002237 	.word	0x00002237
     38c:	4101c000 	.word	0x4101c000
     390:	20000318 	.word	0x20000318
     394:	00000d09 	.word	0x00000d09

00000398 <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     398:	4b16      	ldr	r3, [pc, #88]	; (3f4 <I2C_0_PORT_init+0x5c>)
     39a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     39e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     3aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3be:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     3ca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ea:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3f2:	4770      	bx	lr
     3f4:	41008000 	.word	0x41008000

000003f8 <I2C_0_CLOCK_init>:
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <I2C_0_CLOCK_init+0x1c>)
     3fa:	2240      	movs	r2, #64	; 0x40
     3fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     400:	2243      	movs	r2, #67	; 0x43
     402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     406:	4a04      	ldr	r2, [pc, #16]	; (418 <I2C_0_CLOCK_init+0x20>)
     408:	6993      	ldr	r3, [r2, #24]
     40a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     40e:	6193      	str	r3, [r2, #24]
     410:	4770      	bx	lr
     412:	bf00      	nop
     414:	40001c00 	.word	0x40001c00
     418:	40000800 	.word	0x40000800

0000041c <I2C_0_init>:
{
     41c:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <I2C_0_init+0x14>)
     420:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     422:	4904      	ldr	r1, [pc, #16]	; (434 <I2C_0_init+0x18>)
     424:	4804      	ldr	r0, [pc, #16]	; (438 <I2C_0_init+0x1c>)
     426:	4b05      	ldr	r3, [pc, #20]	; (43c <I2C_0_init+0x20>)
     428:	4798      	blx	r3
	I2C_0_PORT_init();
     42a:	4b05      	ldr	r3, [pc, #20]	; (440 <I2C_0_init+0x24>)
     42c:	4798      	blx	r3
     42e:	bd08      	pop	{r3, pc}
     430:	000003f9 	.word	0x000003f9
     434:	41014000 	.word	0x41014000
     438:	20000364 	.word	0x20000364
     43c:	00000a79 	.word	0x00000a79
     440:	00000399 	.word	0x00000399

00000444 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	4b2c      	ldr	r3, [pc, #176]	; (4f8 <SPI_0_PORT_init+0xb4>)
     446:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     44a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     452:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     456:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     45a:	4a28      	ldr	r2, [pc, #160]	; (4fc <SPI_0_PORT_init+0xb8>)
     45c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     460:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     468:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     470:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     474:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     478:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     47c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     480:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     48c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     490:	4a1b      	ldr	r2, [pc, #108]	; (500 <SPI_0_PORT_init+0xbc>)
     492:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     496:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b6:	2202      	movs	r2, #2
     4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4bc:	4a11      	ldr	r2, [pc, #68]	; (504 <SPI_0_PORT_init+0xc0>)
     4be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4c2:	4a11      	ldr	r2, [pc, #68]	; (508 <SPI_0_PORT_init+0xc4>)
     4c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c8:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     4cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d4:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4dc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e4:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4e8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop
     4f8:	41008000 	.word	0x41008000
     4fc:	c0000001 	.word	0xc0000001
     500:	c0000002 	.word	0xc0000002
     504:	40020002 	.word	0x40020002
     508:	c0020000 	.word	0xc0020000

0000050c <SPI_0_CLOCK_init>:
     50c:	4b06      	ldr	r3, [pc, #24]	; (528 <SPI_0_CLOCK_init+0x1c>)
     50e:	2240      	movs	r2, #64	; 0x40
     510:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     514:	2243      	movs	r2, #67	; 0x43
     516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     51a:	4a04      	ldr	r2, [pc, #16]	; (52c <SPI_0_CLOCK_init+0x20>)
     51c:	6a13      	ldr	r3, [r2, #32]
     51e:	f043 0302 	orr.w	r3, r3, #2
     522:	6213      	str	r3, [r2, #32]
     524:	4770      	bx	lr
     526:	bf00      	nop
     528:	40001c00 	.word	0x40001c00
     52c:	40000800 	.word	0x40000800

00000530 <SPI_0_init>:
{
     530:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <SPI_0_init+0x14>)
     534:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     536:	4904      	ldr	r1, [pc, #16]	; (548 <SPI_0_init+0x18>)
     538:	4804      	ldr	r0, [pc, #16]	; (54c <SPI_0_init+0x1c>)
     53a:	4b05      	ldr	r3, [pc, #20]	; (550 <SPI_0_init+0x20>)
     53c:	4798      	blx	r3
	SPI_0_PORT_init();
     53e:	4b05      	ldr	r3, [pc, #20]	; (554 <SPI_0_init+0x24>)
     540:	4798      	blx	r3
     542:	bd08      	pop	{r3, pc}
     544:	0000050d 	.word	0x0000050d
     548:	43000400 	.word	0x43000400
     54c:	20000334 	.word	0x20000334
     550:	00000bad 	.word	0x00000bad
     554:	00000445 	.word	0x00000445

00000558 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     558:	4a04      	ldr	r2, [pc, #16]	; (56c <TIMER_0_CLOCK_init+0x14>)
     55a:	6a13      	ldr	r3, [r2, #32]
     55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     560:	6213      	str	r3, [r2, #32]
     562:	2240      	movs	r2, #64	; 0x40
     564:	4b02      	ldr	r3, [pc, #8]	; (570 <TIMER_0_CLOCK_init+0x18>)
     566:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     56a:	4770      	bx	lr
     56c:	40000800 	.word	0x40000800
     570:	40001c00 	.word	0x40001c00

00000574 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     574:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     576:	4b17      	ldr	r3, [pc, #92]	; (5d4 <system_init+0x60>)
     578:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     57a:	4b17      	ldr	r3, [pc, #92]	; (5d8 <system_init+0x64>)
     57c:	2240      	movs	r2, #64	; 0x40
     57e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     582:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     586:	629a      	str	r2, [r3, #40]	; 0x28
     588:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     58c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     59a:	2201      	movs	r2, #1
     59c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5ac:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b0:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     5bc:	4b07      	ldr	r3, [pc, #28]	; (5dc <system_init+0x68>)
     5be:	4798      	blx	r3

	SPI_0_init();
     5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <system_init+0x6c>)
     5c2:	4798      	blx	r3

	TIMER_1_init();
     5c4:	4b07      	ldr	r3, [pc, #28]	; (5e4 <system_init+0x70>)
     5c6:	4798      	blx	r3
	TIMER_0_CLOCK_init();
     5c8:	4b07      	ldr	r3, [pc, #28]	; (5e8 <system_init+0x74>)
     5ca:	4798      	blx	r3

	TIMER_0_init();
     5cc:	4b07      	ldr	r3, [pc, #28]	; (5ec <system_init+0x78>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
     5d2:	bf00      	nop
     5d4:	00000f29 	.word	0x00000f29
     5d8:	41008000 	.word	0x41008000
     5dc:	0000041d 	.word	0x0000041d
     5e0:	00000531 	.word	0x00000531
     5e4:	0000035d 	.word	0x0000035d
     5e8:	00000559 	.word	0x00000559
     5ec:	00002291 	.word	0x00002291

000005f0 <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5f0:	2201      	movs	r2, #1
     5f2:	4b10      	ldr	r3, [pc, #64]	; (634 <LAN9252_rx_susp+0x44>)
     5f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     5f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     5fe:	68da      	ldr	r2, [r3, #12]
     600:	4b0d      	ldr	r3, [pc, #52]	; (638 <LAN9252_rx_susp+0x48>)
     602:	429a      	cmp	r2, r3
     604:	d00d      	beq.n	622 <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     606:	4b0d      	ldr	r3, [pc, #52]	; (63c <LAN9252_rx_susp+0x4c>)
     608:	2202      	movs	r2, #2
     60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     60e:	2001      	movs	r0, #1
     610:	4908      	ldr	r1, [pc, #32]	; (634 <LAN9252_rx_susp+0x44>)
     612:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     616:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     61a:	2200      	movs	r2, #0
     61c:	4b08      	ldr	r3, [pc, #32]	; (640 <LAN9252_rx_susp+0x50>)
     61e:	701a      	strb	r2, [r3, #0]
     620:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     622:	2201      	movs	r2, #1
     624:	4b06      	ldr	r3, [pc, #24]	; (640 <LAN9252_rx_susp+0x50>)
     626:	701a      	strb	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     62c:	4b05      	ldr	r3, [pc, #20]	; (644 <LAN9252_rx_susp+0x54>)
     62e:	60da      	str	r2, [r3, #12]
     630:	4770      	bx	lr
     632:	bf00      	nop
     634:	41008000 	.word	0x41008000
     638:	20000518 	.word	0x20000518
     63c:	4100a000 	.word	0x4100a000
     640:	20000528 	.word	0x20000528
     644:	e000e100 	.word	0xe000e100

00000648 <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     648:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     64a:	880c      	ldrh	r4, [r1, #0]
     64c:	b2a4      	uxth	r4, r4
     64e:	f044 0401 	orr.w	r4, r4, #1
     652:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     654:	880c      	ldrh	r4, [r1, #0]
     656:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     658:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     65c:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     65e:	880c      	ldrh	r4, [r1, #0]
     660:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     662:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     666:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     66a:	00ed      	lsls	r5, r5, #3
     66c:	f005 0518 	and.w	r5, r5, #24
     670:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     672:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     674:	880c      	ldrh	r4, [r1, #0]
     676:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     678:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     67c:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     67e:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     680:	2803      	cmp	r0, #3
     682:	d814      	bhi.n	6ae <setup_transfer_descriptor+0x66>
     684:	e8df f000 	tbb	[pc, r0]
     688:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     68c:	8808      	ldrh	r0, [r1, #0]
     68e:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     690:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     694:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     696:	8808      	ldrh	r0, [r1, #0]
     698:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     69a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     69e:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a0:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     6a2:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6a4:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6a6:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     6a8:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     6aa:	4a26      	ldr	r2, [pc, #152]	; (744 <setup_transfer_descriptor+0xfc>)
     6ac:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ae:	880a      	ldrh	r2, [r1, #0]
     6b0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     6b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     6b6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6b8:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ba:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     6bc:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6c0:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     6c2:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     6c4:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     6c6:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     6c8:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     6ca:	9b02      	ldr	r3, [sp, #8]
     6cc:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     6ce:	bc30      	pop	{r4, r5}
     6d0:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6d2:	880a      	ldrh	r2, [r1, #0]
     6d4:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     6da:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6dc:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6de:	880a      	ldrh	r2, [r1, #0]
     6e0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     6e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     6e6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6e8:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     6ea:	4a17      	ldr	r2, [pc, #92]	; (748 <setup_transfer_descriptor+0x100>)
     6ec:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6ee:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6f0:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     6f2:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     6f4:	4a13      	ldr	r2, [pc, #76]	; (744 <setup_transfer_descriptor+0xfc>)
     6f6:	608a      	str	r2, [r1, #8]
     6f8:	e7d9      	b.n	6ae <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6fa:	8808      	ldrh	r0, [r1, #0]
     6fc:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6fe:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     702:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     704:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     706:	8808      	ldrh	r0, [r1, #0]
     708:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     70a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     70e:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     710:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     712:	480c      	ldr	r0, [pc, #48]	; (744 <setup_transfer_descriptor+0xfc>)
     714:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     716:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     718:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     71a:	608a      	str	r2, [r1, #8]
     71c:	e7c7      	b.n	6ae <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     71e:	880a      	ldrh	r2, [r1, #0]
     720:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     726:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     728:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     72a:	880a      	ldrh	r2, [r1, #0]
     72c:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     72e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     732:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     734:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     736:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     738:	4a02      	ldr	r2, [pc, #8]	; (744 <setup_transfer_descriptor+0xfc>)
     73a:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     73c:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     73e:	4a03      	ldr	r2, [pc, #12]	; (74c <setup_transfer_descriptor+0x104>)
     740:	608a      	str	r2, [r1, #8]
     742:	e7b4      	b.n	6ae <setup_transfer_descriptor+0x66>
     744:	43000428 	.word	0x43000428
     748:	00004550 	.word	0x00004550
     74c:	200003e0 	.word	0x200003e0

00000750 <TC7_Handler>:
void TC7_Handler(void){
     750:	b5f0      	push	{r4, r5, r6, r7, lr}
     752:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     754:	4a16      	ldr	r2, [pc, #88]	; (7b0 <TC7_Handler+0x60>)
     756:	7a93      	ldrb	r3, [r2, #10]
     758:	f043 0301 	orr.w	r3, r3, #1
     75c:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     75e:	2201      	movs	r2, #1
     760:	4b14      	ldr	r3, [pc, #80]	; (7b4 <TC7_Handler+0x64>)
     762:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     764:	4b14      	ldr	r3, [pc, #80]	; (7b8 <TC7_Handler+0x68>)
     766:	781b      	ldrb	r3, [r3, #0]
     768:	b183      	cbz	r3, 78c <TC7_Handler+0x3c>
		volatile int i=0;
     76a:	2300      	movs	r3, #0
     76c:	9301      	str	r3, [sp, #4]
     76e:	4611      	mov	r1, r2
     770:	4a12      	ldr	r2, [pc, #72]	; (7bc <TC7_Handler+0x6c>)
     772:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     776:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     77a:	2102      	movs	r1, #2
     77c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     780:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     784:	4a0c      	ldr	r2, [pc, #48]	; (7b8 <TC7_Handler+0x68>)
     786:	7013      	strb	r3, [r2, #0]
	};
     788:	b003      	add	sp, #12
     78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     78c:	4b0b      	ldr	r3, [pc, #44]	; (7bc <TC7_Handler+0x6c>)
     78e:	2501      	movs	r5, #1
     790:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     794:	4e08      	ldr	r6, [pc, #32]	; (7b8 <TC7_Handler+0x68>)
     796:	2400      	movs	r4, #0
     798:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     79a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     79e:	4621      	mov	r1, r4
     7a0:	4620      	mov	r0, r4
     7a2:	4f07      	ldr	r7, [pc, #28]	; (7c0 <TC7_Handler+0x70>)
     7a4:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     7a6:	4621      	mov	r1, r4
     7a8:	4628      	mov	r0, r5
     7aa:	47b8      	blx	r7
		tx_ethercat_done = false;
     7ac:	7034      	strb	r4, [r6, #0]
	};
     7ae:	e7eb      	b.n	788 <TC7_Handler+0x38>
     7b0:	43001800 	.word	0x43001800
     7b4:	200004e0 	.word	0x200004e0
     7b8:	20000528 	.word	0x20000528
     7bc:	41008000 	.word	0x41008000
     7c0:	0000121d 	.word	0x0000121d

000007c4 <configure_ethercat_dma_descriptors>:
{
     7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7c8:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     7ca:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 984 <configure_ethercat_dma_descriptors+0x1c0>
     7ce:	4f61      	ldr	r7, [pc, #388]	; (954 <configure_ethercat_dma_descriptors+0x190>)
     7d0:	2602      	movs	r6, #2
     7d2:	9601      	str	r6, [sp, #4]
     7d4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 988 <configure_ethercat_dma_descriptors+0x1c4>
     7d8:	f8cd 9000 	str.w	r9, [sp]
     7dc:	2313      	movs	r3, #19
     7de:	f8d8 2004 	ldr.w	r2, [r8, #4]
     7e2:	4639      	mov	r1, r7
     7e4:	2000      	movs	r0, #0
     7e6:	4d5c      	ldr	r5, [pc, #368]	; (958 <configure_ethercat_dma_descriptors+0x194>)
     7e8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     7ea:	f8d8 b008 	ldr.w	fp, [r8, #8]
     7ee:	9601      	str	r6, [sp, #4]
     7f0:	4c5a      	ldr	r4, [pc, #360]	; (95c <configure_ethercat_dma_descriptors+0x198>)
     7f2:	9400      	str	r4, [sp, #0]
     7f4:	2343      	movs	r3, #67	; 0x43
     7f6:	465a      	mov	r2, fp
     7f8:	4649      	mov	r1, r9
     7fa:	2000      	movs	r0, #0
     7fc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     7fe:	4b58      	ldr	r3, [pc, #352]	; (960 <configure_ethercat_dma_descriptors+0x19c>)
     800:	681a      	ldr	r2, [r3, #0]
     802:	f8df 9188 	ldr.w	r9, [pc, #392]	; 98c <configure_ethercat_dma_descriptors+0x1c8>
     806:	9601      	str	r6, [sp, #4]
     808:	f8cd 9000 	str.w	r9, [sp]
     80c:	230b      	movs	r3, #11
     80e:	4621      	mov	r1, r4
     810:	2000      	movs	r0, #0
     812:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     814:	2400      	movs	r4, #0
     816:	9401      	str	r4, [sp, #4]
     818:	f8df a174 	ldr.w	sl, [pc, #372]	; 990 <configure_ethercat_dma_descriptors+0x1cc>
     81c:	f8cd a000 	str.w	sl, [sp]
     820:	2303      	movs	r3, #3
     822:	465a      	mov	r2, fp
     824:	4649      	mov	r1, r9
     826:	4620      	mov	r0, r4
     828:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     82a:	9601      	str	r6, [sp, #4]
     82c:	f8df b164 	ldr.w	fp, [pc, #356]	; 994 <configure_ethercat_dma_descriptors+0x1d0>
     830:	f8cd b000 	str.w	fp, [sp]
     834:	2340      	movs	r3, #64	; 0x40
     836:	4a4b      	ldr	r2, [pc, #300]	; (964 <configure_ethercat_dma_descriptors+0x1a0>)
     838:	4651      	mov	r1, sl
     83a:	4620      	mov	r0, r4
     83c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     83e:	9601      	str	r6, [sp, #4]
     840:	f8df a154 	ldr.w	sl, [pc, #340]	; 998 <configure_ethercat_dma_descriptors+0x1d4>
     844:	f8cd a000 	str.w	sl, [sp]
     848:	2313      	movs	r3, #19
     84a:	f8d8 200c 	ldr.w	r2, [r8, #12]
     84e:	4659      	mov	r1, fp
     850:	4620      	mov	r0, r4
     852:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     854:	f8d8 2010 	ldr.w	r2, [r8, #16]
     858:	9401      	str	r4, [sp, #4]
     85a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 99c <configure_ethercat_dma_descriptors+0x1d8>
     85e:	f8cd 8000 	str.w	r8, [sp]
     862:	2303      	movs	r3, #3
     864:	4651      	mov	r1, sl
     866:	4620      	mov	r0, r4
     868:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     86a:	9601      	str	r6, [sp, #4]
     86c:	f8cd 9000 	str.w	r9, [sp]
     870:	2340      	movs	r3, #64	; 0x40
     872:	4622      	mov	r2, r4
     874:	4641      	mov	r1, r8
     876:	4630      	mov	r0, r6
     878:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     87a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9a0 <configure_ethercat_dma_descriptors+0x1dc>
     87e:	9601      	str	r6, [sp, #4]
     880:	f8df 9120 	ldr.w	r9, [pc, #288]	; 9a4 <configure_ethercat_dma_descriptors+0x1e0>
     884:	f8cd 9000 	str.w	r9, [sp]
     888:	2313      	movs	r3, #19
     88a:	4622      	mov	r2, r4
     88c:	4641      	mov	r1, r8
     88e:	2003      	movs	r0, #3
     890:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     892:	9601      	str	r6, [sp, #4]
     894:	f8df a110 	ldr.w	sl, [pc, #272]	; 9a8 <configure_ethercat_dma_descriptors+0x1e4>
     898:	f8cd a000 	str.w	sl, [sp]
     89c:	2343      	movs	r3, #67	; 0x43
     89e:	4622      	mov	r2, r4
     8a0:	4649      	mov	r1, r9
     8a2:	2003      	movs	r0, #3
     8a4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     8a6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 9ac <configure_ethercat_dma_descriptors+0x1e8>
     8aa:	9601      	str	r6, [sp, #4]
     8ac:	f8cd 9000 	str.w	r9, [sp]
     8b0:	230b      	movs	r3, #11
     8b2:	4622      	mov	r2, r4
     8b4:	4651      	mov	r1, sl
     8b6:	2003      	movs	r0, #3
     8b8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     8ba:	9601      	str	r6, [sp, #4]
     8bc:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 9b0 <configure_ethercat_dma_descriptors+0x1ec>
     8c0:	f8cd a000 	str.w	sl, [sp]
     8c4:	2343      	movs	r3, #67	; 0x43
     8c6:	4622      	mov	r2, r4
     8c8:	4649      	mov	r1, r9
     8ca:	2003      	movs	r0, #3
     8cc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     8ce:	9601      	str	r6, [sp, #4]
     8d0:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 9b4 <configure_ethercat_dma_descriptors+0x1f0>
     8d4:	f8cd b000 	str.w	fp, [sp]
     8d8:	2313      	movs	r3, #19
     8da:	4622      	mov	r2, r4
     8dc:	4651      	mov	r1, sl
     8de:	2003      	movs	r0, #3
     8e0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     8e2:	9401      	str	r4, [sp, #4]
     8e4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 9b8 <configure_ethercat_dma_descriptors+0x1f4>
     8e8:	f8cd a000 	str.w	sl, [sp]
     8ec:	2303      	movs	r3, #3
     8ee:	4622      	mov	r2, r4
     8f0:	4659      	mov	r1, fp
     8f2:	4618      	mov	r0, r3
     8f4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     8f6:	9601      	str	r6, [sp, #4]
     8f8:	f8cd 9000 	str.w	r9, [sp]
     8fc:	2340      	movs	r3, #64	; 0x40
     8fe:	4a19      	ldr	r2, [pc, #100]	; (964 <configure_ethercat_dma_descriptors+0x1a0>)
     900:	441a      	add	r2, r3
     902:	4651      	mov	r1, sl
     904:	2001      	movs	r0, #1
     906:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     908:	4d17      	ldr	r5, [pc, #92]	; (968 <configure_ethercat_dma_descriptors+0x1a4>)
     90a:	4a18      	ldr	r2, [pc, #96]	; (96c <configure_ethercat_dma_descriptors+0x1a8>)
     90c:	4631      	mov	r1, r6
     90e:	4628      	mov	r0, r5
     910:	4b17      	ldr	r3, [pc, #92]	; (970 <configure_ethercat_dma_descriptors+0x1ac>)
     912:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     914:	f8d8 300c 	ldr.w	r3, [r8, #12]
     918:	9300      	str	r3, [sp, #0]
     91a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     91e:	4620      	mov	r0, r4
     920:	4e14      	ldr	r6, [pc, #80]	; (974 <configure_ethercat_dma_descriptors+0x1b0>)
     922:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     924:	68fb      	ldr	r3, [r7, #12]
     926:	9300      	str	r3, [sp, #0]
     928:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     92c:	2001      	movs	r0, #1
     92e:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     930:	4628      	mov	r0, r5
     932:	4b11      	ldr	r3, [pc, #68]	; (978 <configure_ethercat_dma_descriptors+0x1b4>)
     934:	4798      	blx	r3
     936:	2601      	movs	r6, #1
     938:	4b10      	ldr	r3, [pc, #64]	; (97c <configure_ethercat_dma_descriptors+0x1b8>)
     93a:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     93e:	4621      	mov	r1, r4
     940:	4620      	mov	r0, r4
     942:	4d0f      	ldr	r5, [pc, #60]	; (980 <configure_ethercat_dma_descriptors+0x1bc>)
     944:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     946:	4621      	mov	r1, r4
     948:	4630      	mov	r0, r6
     94a:	47a8      	blx	r5
}
     94c:	b003      	add	sp, #12
     94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     952:	bf00      	nop
     954:	200004d0 	.word	0x200004d0
     958:	00000649 	.word	0x00000649
     95c:	200004f8 	.word	0x200004f8
     960:	20000000 	.word	0x20000000
     964:	20000420 	.word	0x20000420
     968:	20000334 	.word	0x20000334
     96c:	000005f1 	.word	0x000005f1
     970:	00000c21 	.word	0x00000c21
     974:	000012a5 	.word	0x000012a5
     978:	00000bf9 	.word	0x00000bf9
     97c:	41008000 	.word	0x41008000
     980:	0000121d 	.word	0x0000121d
     984:	00004550 	.word	0x00004550
     988:	20000400 	.word	0x20000400
     98c:	200003b0 	.word	0x200003b0
     990:	200003d0 	.word	0x200003d0
     994:	200004c0 	.word	0x200004c0
     998:	20000508 	.word	0x20000508
     99c:	200003c0 	.word	0x200003c0
     9a0:	20000410 	.word	0x20000410
     9a4:	200004a0 	.word	0x200004a0
     9a8:	200004b0 	.word	0x200004b0
     9ac:	20000518 	.word	0x20000518
     9b0:	20000390 	.word	0x20000390
     9b4:	200003a0 	.word	0x200003a0
     9b8:	200004e8 	.word	0x200004e8

000009bc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     9c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     9c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     9c4:	f3bf 8f5f 	dmb	sy
     9c8:	4770      	bx	lr

000009ca <atomic_leave_critical>:
     9ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     9ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9d0:	f383 8810 	msr	PRIMASK, r3
     9d4:	4770      	bx	lr
	...

000009d8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     9d8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9da:	4b04      	ldr	r3, [pc, #16]	; (9ec <delay_us+0x14>)
     9dc:	681c      	ldr	r4, [r3, #0]
     9de:	4b04      	ldr	r3, [pc, #16]	; (9f0 <delay_us+0x18>)
     9e0:	4798      	blx	r3
     9e2:	4601      	mov	r1, r0
     9e4:	4620      	mov	r0, r4
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <delay_us+0x1c>)
     9e8:	4798      	blx	r3
     9ea:	bd10      	pop	{r4, pc}
     9ec:	200000fc 	.word	0x200000fc
     9f0:	00000ee9 	.word	0x00000ee9
     9f4:	00000f21 	.word	0x00000f21

000009f8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     9f8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     9fa:	4b04      	ldr	r3, [pc, #16]	; (a0c <delay_ms+0x14>)
     9fc:	681c      	ldr	r4, [r3, #0]
     9fe:	4b04      	ldr	r3, [pc, #16]	; (a10 <delay_ms+0x18>)
     a00:	4798      	blx	r3
     a02:	4601      	mov	r1, r0
     a04:	4620      	mov	r0, r4
     a06:	4b03      	ldr	r3, [pc, #12]	; (a14 <delay_ms+0x1c>)
     a08:	4798      	blx	r3
     a0a:	bd10      	pop	{r4, pc}
     a0c:	200000fc 	.word	0x200000fc
     a10:	00000f01 	.word	0x00000f01
     a14:	00000f21 	.word	0x00000f21

00000a18 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     a18:	b510      	push	{r4, lr}
     a1a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     a1c:	8903      	ldrh	r3, [r0, #8]
     a1e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a22:	4614      	mov	r4, r2
     a24:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     a2e:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a30:	a901      	add	r1, sp, #4
     a32:	3814      	subs	r0, #20
     a34:	4b03      	ldr	r3, [pc, #12]	; (a44 <i2c_m_sync_write+0x2c>)
     a36:	4798      	blx	r3

	if (ret) {
     a38:	b910      	cbnz	r0, a40 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     a3a:	4620      	mov	r0, r4
     a3c:	b004      	add	sp, #16
     a3e:	bd10      	pop	{r4, pc}
		return ret;
     a40:	4604      	mov	r4, r0
     a42:	e7fa      	b.n	a3a <i2c_m_sync_write+0x22>
     a44:	000019a5 	.word	0x000019a5

00000a48 <i2c_m_sync_read>:
{
     a48:	b510      	push	{r4, lr}
     a4a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a4c:	8903      	ldrh	r3, [r0, #8]
     a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a52:	4614      	mov	r4, r2
     a54:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a56:	f248 0301 	movw	r3, #32769	; 0x8001
     a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a5e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a60:	a901      	add	r1, sp, #4
     a62:	3814      	subs	r0, #20
     a64:	4b03      	ldr	r3, [pc, #12]	; (a74 <i2c_m_sync_read+0x2c>)
     a66:	4798      	blx	r3
	if (ret) {
     a68:	b910      	cbnz	r0, a70 <i2c_m_sync_read+0x28>
}
     a6a:	4620      	mov	r0, r4
     a6c:	b004      	add	sp, #16
     a6e:	bd10      	pop	{r4, pc}
		return ret;
     a70:	4604      	mov	r4, r0
     a72:	e7fa      	b.n	a6a <i2c_m_sync_read+0x22>
     a74:	000019a5 	.word	0x000019a5

00000a78 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a78:	b538      	push	{r3, r4, r5, lr}
     a7a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a7c:	4604      	mov	r4, r0
     a7e:	225e      	movs	r2, #94	; 0x5e
     a80:	4908      	ldr	r1, [pc, #32]	; (aa4 <i2c_m_sync_init+0x2c>)
     a82:	3000      	adds	r0, #0
     a84:	bf18      	it	ne
     a86:	2001      	movne	r0, #1
     a88:	4b07      	ldr	r3, [pc, #28]	; (aa8 <i2c_m_sync_init+0x30>)
     a8a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     a8c:	4629      	mov	r1, r5
     a8e:	4620      	mov	r0, r4
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <i2c_m_sync_init+0x34>)
     a92:	4798      	blx	r3
	if (init_status) {
     a94:	4603      	mov	r3, r0
     a96:	b918      	cbnz	r0, aa0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     a98:	4a05      	ldr	r2, [pc, #20]	; (ab0 <i2c_m_sync_init+0x38>)
     a9a:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     a9c:	4a05      	ldr	r2, [pc, #20]	; (ab4 <i2c_m_sync_init+0x3c>)
     a9e:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     aa0:	4618      	mov	r0, r3
     aa2:	bd38      	pop	{r3, r4, r5, pc}
     aa4:	00004564 	.word	0x00004564
     aa8:	00000e6d 	.word	0x00000e6d
     aac:	000018fd 	.word	0x000018fd
     ab0:	00000a49 	.word	0x00000a49
     ab4:	00000a19 	.word	0x00000a19

00000ab8 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     ab8:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     aba:	4b01      	ldr	r3, [pc, #4]	; (ac0 <i2c_m_sync_enable+0x8>)
     abc:	4798      	blx	r3
}
     abe:	bd08      	pop	{r3, pc}
     ac0:	0000192d 	.word	0x0000192d

00000ac4 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     ac4:	f3c1 0109 	ubfx	r1, r1, #0, #10
     ac8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     acc:	430a      	orrs	r2, r1
     ace:	8382      	strh	r2, [r0, #28]
}
     ad0:	4610      	mov	r0, r2
     ad2:	4770      	bx	lr

00000ad4 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     ad4:	3014      	adds	r0, #20
     ad6:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     ad8:	2000      	movs	r0, #0
     ada:	4770      	bx	lr

00000adc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	460d      	mov	r5, r1
     ae0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     ae2:	4604      	mov	r4, r0
     ae4:	b168      	cbz	r0, b02 <io_write+0x26>
     ae6:	b151      	cbz	r1, afe <io_write+0x22>
     ae8:	2001      	movs	r0, #1
     aea:	2234      	movs	r2, #52	; 0x34
     aec:	4906      	ldr	r1, [pc, #24]	; (b08 <io_write+0x2c>)
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <io_write+0x30>)
     af0:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     af2:	6823      	ldr	r3, [r4, #0]
     af4:	4632      	mov	r2, r6
     af6:	4629      	mov	r1, r5
     af8:	4620      	mov	r0, r4
     afa:	4798      	blx	r3
}
     afc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     afe:	2000      	movs	r0, #0
     b00:	e7f3      	b.n	aea <io_write+0xe>
     b02:	2000      	movs	r0, #0
     b04:	e7f1      	b.n	aea <io_write+0xe>
     b06:	bf00      	nop
     b08:	00004580 	.word	0x00004580
     b0c:	00000e6d 	.word	0x00000e6d

00000b10 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	460d      	mov	r5, r1
     b14:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b16:	4604      	mov	r4, r0
     b18:	b168      	cbz	r0, b36 <io_read+0x26>
     b1a:	b151      	cbz	r1, b32 <io_read+0x22>
     b1c:	2001      	movs	r0, #1
     b1e:	223d      	movs	r2, #61	; 0x3d
     b20:	4906      	ldr	r1, [pc, #24]	; (b3c <io_read+0x2c>)
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <io_read+0x30>)
     b24:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     b26:	6863      	ldr	r3, [r4, #4]
     b28:	4632      	mov	r2, r6
     b2a:	4629      	mov	r1, r5
     b2c:	4620      	mov	r0, r4
     b2e:	4798      	blx	r3
}
     b30:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b32:	2000      	movs	r0, #0
     b34:	e7f3      	b.n	b1e <io_read+0xe>
     b36:	2000      	movs	r0, #0
     b38:	e7f1      	b.n	b1e <io_read+0xe>
     b3a:	bf00      	nop
     b3c:	00004580 	.word	0x00004580
     b40:	00000e6d 	.word	0x00000e6d

00000b44 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     b44:	b570      	push	{r4, r5, r6, lr}
     b46:	460d      	mov	r5, r1
     b48:	4616      	mov	r6, r2
	ASSERT(io);
     b4a:	4604      	mov	r4, r0
     b4c:	2298      	movs	r2, #152	; 0x98
     b4e:	4907      	ldr	r1, [pc, #28]	; (b6c <_spi_m_dma_io_write+0x28>)
     b50:	3000      	adds	r0, #0
     b52:	bf18      	it	ne
     b54:	2001      	movne	r0, #1
     b56:	4b06      	ldr	r3, [pc, #24]	; (b70 <_spi_m_dma_io_write+0x2c>)
     b58:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     b5a:	4633      	mov	r3, r6
     b5c:	2200      	movs	r2, #0
     b5e:	4629      	mov	r1, r5
     b60:	f1a4 0020 	sub.w	r0, r4, #32
     b64:	4c03      	ldr	r4, [pc, #12]	; (b74 <_spi_m_dma_io_write+0x30>)
     b66:	47a0      	blx	r4
}
     b68:	bd70      	pop	{r4, r5, r6, pc}
     b6a:	bf00      	nop
     b6c:	00004594 	.word	0x00004594
     b70:	00000e6d 	.word	0x00000e6d
     b74:	00001e89 	.word	0x00001e89

00000b78 <_spi_m_dma_io_read>:
{
     b78:	b570      	push	{r4, r5, r6, lr}
     b7a:	460d      	mov	r5, r1
     b7c:	4616      	mov	r6, r2
	ASSERT(io);
     b7e:	4604      	mov	r4, r0
     b80:	2281      	movs	r2, #129	; 0x81
     b82:	4907      	ldr	r1, [pc, #28]	; (ba0 <_spi_m_dma_io_read+0x28>)
     b84:	3000      	adds	r0, #0
     b86:	bf18      	it	ne
     b88:	2001      	movne	r0, #1
     b8a:	4b06      	ldr	r3, [pc, #24]	; (ba4 <_spi_m_dma_io_read+0x2c>)
     b8c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     b8e:	4633      	mov	r3, r6
     b90:	462a      	mov	r2, r5
     b92:	2100      	movs	r1, #0
     b94:	f1a4 0020 	sub.w	r0, r4, #32
     b98:	4c03      	ldr	r4, [pc, #12]	; (ba8 <_spi_m_dma_io_read+0x30>)
     b9a:	47a0      	blx	r4
}
     b9c:	bd70      	pop	{r4, r5, r6, pc}
     b9e:	bf00      	nop
     ba0:	00004594 	.word	0x00004594
     ba4:	00000e6d 	.word	0x00000e6d
     ba8:	00001e89 	.word	0x00001e89

00000bac <spi_m_dma_init>:
{
     bac:	b538      	push	{r3, r4, r5, lr}
     bae:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     bb0:	4605      	mov	r5, r0
     bb2:	b1a8      	cbz	r0, be0 <spi_m_dma_init+0x34>
     bb4:	b191      	cbz	r1, bdc <spi_m_dma_init+0x30>
     bb6:	2001      	movs	r0, #1
     bb8:	223b      	movs	r2, #59	; 0x3b
     bba:	490a      	ldr	r1, [pc, #40]	; (be4 <spi_m_dma_init+0x38>)
     bbc:	4b0a      	ldr	r3, [pc, #40]	; (be8 <spi_m_dma_init+0x3c>)
     bbe:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     bc0:	4628      	mov	r0, r5
     bc2:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     bc6:	4621      	mov	r1, r4
     bc8:	4b08      	ldr	r3, [pc, #32]	; (bec <spi_m_dma_init+0x40>)
     bca:	4798      	blx	r3
	if (rc) {
     bcc:	4603      	mov	r3, r0
     bce:	b918      	cbnz	r0, bd8 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     bd0:	4a07      	ldr	r2, [pc, #28]	; (bf0 <spi_m_dma_init+0x44>)
     bd2:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     bd4:	4a07      	ldr	r2, [pc, #28]	; (bf4 <spi_m_dma_init+0x48>)
     bd6:	626a      	str	r2, [r5, #36]	; 0x24
}
     bd8:	4618      	mov	r0, r3
     bda:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     bdc:	2000      	movs	r0, #0
     bde:	e7eb      	b.n	bb8 <spi_m_dma_init+0xc>
     be0:	2000      	movs	r0, #0
     be2:	e7e9      	b.n	bb8 <spi_m_dma_init+0xc>
     be4:	00004594 	.word	0x00004594
     be8:	00000e6d 	.word	0x00000e6d
     bec:	00001c55 	.word	0x00001c55
     bf0:	00000b79 	.word	0x00000b79
     bf4:	00000b45 	.word	0x00000b45

00000bf8 <spi_m_dma_enable>:
{
     bf8:	b510      	push	{r4, lr}
	ASSERT(spi);
     bfa:	4604      	mov	r4, r0
     bfc:	2251      	movs	r2, #81	; 0x51
     bfe:	4905      	ldr	r1, [pc, #20]	; (c14 <spi_m_dma_enable+0x1c>)
     c00:	3000      	adds	r0, #0
     c02:	bf18      	it	ne
     c04:	2001      	movne	r0, #1
     c06:	4b04      	ldr	r3, [pc, #16]	; (c18 <spi_m_dma_enable+0x20>)
     c08:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     c0a:	1d20      	adds	r0, r4, #4
     c0c:	4b03      	ldr	r3, [pc, #12]	; (c1c <spi_m_dma_enable+0x24>)
     c0e:	4798      	blx	r3
     c10:	bd10      	pop	{r4, pc}
     c12:	bf00      	nop
     c14:	00004594 	.word	0x00004594
     c18:	00000e6d 	.word	0x00000e6d
     c1c:	00001dd1 	.word	0x00001dd1

00000c20 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     c20:	b570      	push	{r4, r5, r6, lr}
     c22:	460d      	mov	r5, r1
     c24:	4616      	mov	r6, r2
	ASSERT(spi);
     c26:	4604      	mov	r4, r0
     c28:	22a8      	movs	r2, #168	; 0xa8
     c2a:	4906      	ldr	r1, [pc, #24]	; (c44 <spi_m_dma_register_callback+0x24>)
     c2c:	3000      	adds	r0, #0
     c2e:	bf18      	it	ne
     c30:	2001      	movne	r0, #1
     c32:	4b05      	ldr	r3, [pc, #20]	; (c48 <spi_m_dma_register_callback+0x28>)
     c34:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     c36:	4632      	mov	r2, r6
     c38:	4629      	mov	r1, r5
     c3a:	1d20      	adds	r0, r4, #4
     c3c:	4b03      	ldr	r3, [pc, #12]	; (c4c <spi_m_dma_register_callback+0x2c>)
     c3e:	4798      	blx	r3
     c40:	bd70      	pop	{r4, r5, r6, pc}
     c42:	bf00      	nop
     c44:	00004594 	.word	0x00004594
     c48:	00000e6d 	.word	0x00000e6d
     c4c:	00001e05 	.word	0x00001e05

00000c50 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     c52:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     c54:	b117      	cbz	r7, c5c <timer_add_timer_task+0xc>
     c56:	463c      	mov	r4, r7
     c58:	2600      	movs	r6, #0
     c5a:	e00b      	b.n	c74 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     c5c:	4b0e      	ldr	r3, [pc, #56]	; (c98 <timer_add_timer_task+0x48>)
     c5e:	4798      	blx	r3
		return;
     c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c62:	68a5      	ldr	r5, [r4, #8]
     c64:	442b      	add	r3, r5
     c66:	1a9b      	subs	r3, r3, r2
     c68:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     c6a:	688d      	ldr	r5, [r1, #8]
     c6c:	42ab      	cmp	r3, r5
     c6e:	d209      	bcs.n	c84 <timer_add_timer_task+0x34>
			break;
		prev = it;
     c70:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c72:	6824      	ldr	r4, [r4, #0]
     c74:	b134      	cbz	r4, c84 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     c76:	6863      	ldr	r3, [r4, #4]
     c78:	4293      	cmp	r3, r2
     c7a:	d8f2      	bhi.n	c62 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     c7c:	68a5      	ldr	r5, [r4, #8]
     c7e:	1a9b      	subs	r3, r3, r2
     c80:	442b      	add	r3, r5
     c82:	e7f2      	b.n	c6a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     c84:	42bc      	cmp	r4, r7
     c86:	d003      	beq.n	c90 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c88:	4630      	mov	r0, r6
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <timer_add_timer_task+0x4c>)
     c8c:	4798      	blx	r3
     c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c90:	4b01      	ldr	r3, [pc, #4]	; (c98 <timer_add_timer_task+0x48>)
     c92:	4798      	blx	r3
     c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c96:	bf00      	nop
     c98:	00000e89 	.word	0x00000e89
     c9c:	00000eb5 	.word	0x00000eb5

00000ca0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ca2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     ca4:	6906      	ldr	r6, [r0, #16]
     ca6:	3601      	adds	r6, #1
     ca8:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     caa:	7e03      	ldrb	r3, [r0, #24]
     cac:	f013 0f01 	tst.w	r3, #1
     cb0:	d105      	bne.n	cbe <timer_process_counted+0x1e>
     cb2:	7e03      	ldrb	r3, [r0, #24]
     cb4:	f013 0f02 	tst.w	r3, #2
     cb8:	d101      	bne.n	cbe <timer_process_counted+0x1e>
     cba:	4605      	mov	r5, r0
     cbc:	e009      	b.n	cd2 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     cbe:	7e03      	ldrb	r3, [r0, #24]
     cc0:	f043 0302 	orr.w	r3, r3, #2
     cc4:	7603      	strb	r3, [r0, #24]
		return;
     cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cc8:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     cca:	68e3      	ldr	r3, [r4, #12]
     ccc:	4620      	mov	r0, r4
     cce:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     cd0:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     cd2:	b19c      	cbz	r4, cfc <timer_process_counted+0x5c>
     cd4:	6863      	ldr	r3, [r4, #4]
     cd6:	1af3      	subs	r3, r6, r3
     cd8:	68a2      	ldr	r2, [r4, #8]
     cda:	4293      	cmp	r3, r2
     cdc:	d30e      	bcc.n	cfc <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     cde:	f105 0714 	add.w	r7, r5, #20
     ce2:	4638      	mov	r0, r7
     ce4:	4b06      	ldr	r3, [pc, #24]	; (d00 <timer_process_counted+0x60>)
     ce6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ce8:	7c23      	ldrb	r3, [r4, #16]
     cea:	2b01      	cmp	r3, #1
     cec:	d1ec      	bne.n	cc8 <timer_process_counted+0x28>
			tmp->time_label = time;
     cee:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     cf0:	4632      	mov	r2, r6
     cf2:	4621      	mov	r1, r4
     cf4:	4638      	mov	r0, r7
     cf6:	4b03      	ldr	r3, [pc, #12]	; (d04 <timer_process_counted+0x64>)
     cf8:	4798      	blx	r3
     cfa:	e7e5      	b.n	cc8 <timer_process_counted+0x28>
     cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cfe:	bf00      	nop
     d00:	00000ebd 	.word	0x00000ebd
     d04:	00000c51 	.word	0x00000c51

00000d08 <timer_init>:
{
     d08:	b538      	push	{r3, r4, r5, lr}
     d0a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d0c:	4604      	mov	r4, r0
     d0e:	b180      	cbz	r0, d32 <timer_init+0x2a>
     d10:	b169      	cbz	r1, d2e <timer_init+0x26>
     d12:	2001      	movs	r0, #1
     d14:	223b      	movs	r2, #59	; 0x3b
     d16:	4908      	ldr	r1, [pc, #32]	; (d38 <timer_init+0x30>)
     d18:	4b08      	ldr	r3, [pc, #32]	; (d3c <timer_init+0x34>)
     d1a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     d1c:	4629      	mov	r1, r5
     d1e:	4620      	mov	r0, r4
     d20:	4b07      	ldr	r3, [pc, #28]	; (d40 <timer_init+0x38>)
     d22:	4798      	blx	r3
	descr->time                           = 0;
     d24:	2000      	movs	r0, #0
     d26:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     d28:	4b06      	ldr	r3, [pc, #24]	; (d44 <timer_init+0x3c>)
     d2a:	6023      	str	r3, [r4, #0]
}
     d2c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d2e:	2000      	movs	r0, #0
     d30:	e7f0      	b.n	d14 <timer_init+0xc>
     d32:	2000      	movs	r0, #0
     d34:	e7ee      	b.n	d14 <timer_init+0xc>
     d36:	bf00      	nop
     d38:	000045b0 	.word	0x000045b0
     d3c:	00000e6d 	.word	0x00000e6d
     d40:	00002041 	.word	0x00002041
     d44:	00000ca1 	.word	0x00000ca1

00000d48 <timer_start>:
{
     d48:	b510      	push	{r4, lr}
	ASSERT(descr);
     d4a:	4604      	mov	r4, r0
     d4c:	2253      	movs	r2, #83	; 0x53
     d4e:	4909      	ldr	r1, [pc, #36]	; (d74 <timer_start+0x2c>)
     d50:	3000      	adds	r0, #0
     d52:	bf18      	it	ne
     d54:	2001      	movne	r0, #1
     d56:	4b08      	ldr	r3, [pc, #32]	; (d78 <timer_start+0x30>)
     d58:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     d5a:	4620      	mov	r0, r4
     d5c:	4b07      	ldr	r3, [pc, #28]	; (d7c <timer_start+0x34>)
     d5e:	4798      	blx	r3
     d60:	b920      	cbnz	r0, d6c <timer_start+0x24>
	_timer_start(&descr->device);
     d62:	4620      	mov	r0, r4
     d64:	4b06      	ldr	r3, [pc, #24]	; (d80 <timer_start+0x38>)
     d66:	4798      	blx	r3
	return ERR_NONE;
     d68:	2000      	movs	r0, #0
     d6a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d6c:	f06f 0010 	mvn.w	r0, #16
}
     d70:	bd10      	pop	{r4, pc}
     d72:	bf00      	nop
     d74:	000045b0 	.word	0x000045b0
     d78:	00000e6d 	.word	0x00000e6d
     d7c:	00002225 	.word	0x00002225
     d80:	000021fd 	.word	0x000021fd

00000d84 <timer_stop>:
{
     d84:	b510      	push	{r4, lr}
	ASSERT(descr);
     d86:	4604      	mov	r4, r0
     d88:	2261      	movs	r2, #97	; 0x61
     d8a:	4909      	ldr	r1, [pc, #36]	; (db0 <timer_stop+0x2c>)
     d8c:	3000      	adds	r0, #0
     d8e:	bf18      	it	ne
     d90:	2001      	movne	r0, #1
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <timer_stop+0x30>)
     d94:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     d96:	4620      	mov	r0, r4
     d98:	4b07      	ldr	r3, [pc, #28]	; (db8 <timer_stop+0x34>)
     d9a:	4798      	blx	r3
     d9c:	b120      	cbz	r0, da8 <timer_stop+0x24>
	_timer_stop(&descr->device);
     d9e:	4620      	mov	r0, r4
     da0:	4b06      	ldr	r3, [pc, #24]	; (dbc <timer_stop+0x38>)
     da2:	4798      	blx	r3
	return ERR_NONE;
     da4:	2000      	movs	r0, #0
     da6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     da8:	f06f 0010 	mvn.w	r0, #16
}
     dac:	bd10      	pop	{r4, pc}
     dae:	bf00      	nop
     db0:	000045b0 	.word	0x000045b0
     db4:	00000e6d 	.word	0x00000e6d
     db8:	00002225 	.word	0x00002225
     dbc:	00002211 	.word	0x00002211

00000dc0 <timer_add_task>:
{
     dc0:	b570      	push	{r4, r5, r6, lr}
     dc2:	b082      	sub	sp, #8
     dc4:	460d      	mov	r5, r1
	ASSERT(descr && task);
     dc6:	4604      	mov	r4, r0
     dc8:	b320      	cbz	r0, e14 <timer_add_task+0x54>
     dca:	b309      	cbz	r1, e10 <timer_add_task+0x50>
     dcc:	2001      	movs	r0, #1
     dce:	227a      	movs	r2, #122	; 0x7a
     dd0:	491f      	ldr	r1, [pc, #124]	; (e50 <timer_add_task+0x90>)
     dd2:	4b20      	ldr	r3, [pc, #128]	; (e54 <timer_add_task+0x94>)
     dd4:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     dd6:	7e23      	ldrb	r3, [r4, #24]
     dd8:	f043 0301 	orr.w	r3, r3, #1
     ddc:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     dde:	f104 0614 	add.w	r6, r4, #20
     de2:	4629      	mov	r1, r5
     de4:	4630      	mov	r0, r6
     de6:	4b1c      	ldr	r3, [pc, #112]	; (e58 <timer_add_task+0x98>)
     de8:	4798      	blx	r3
     dea:	b9a8      	cbnz	r0, e18 <timer_add_task+0x58>
	task->time_label = descr->time;
     dec:	6923      	ldr	r3, [r4, #16]
     dee:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     df0:	6922      	ldr	r2, [r4, #16]
     df2:	4629      	mov	r1, r5
     df4:	4630      	mov	r0, r6
     df6:	4b19      	ldr	r3, [pc, #100]	; (e5c <timer_add_task+0x9c>)
     df8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     dfa:	7e23      	ldrb	r3, [r4, #24]
     dfc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     e00:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     e02:	7e23      	ldrb	r3, [r4, #24]
     e04:	f013 0f02 	tst.w	r3, #2
     e08:	d112      	bne.n	e30 <timer_add_task+0x70>
	return ERR_NONE;
     e0a:	2000      	movs	r0, #0
}
     e0c:	b002      	add	sp, #8
     e0e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     e10:	2000      	movs	r0, #0
     e12:	e7dc      	b.n	dce <timer_add_task+0xe>
     e14:	2000      	movs	r0, #0
     e16:	e7da      	b.n	dce <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     e18:	7e23      	ldrb	r3, [r4, #24]
     e1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     e1e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     e20:	227f      	movs	r2, #127	; 0x7f
     e22:	490b      	ldr	r1, [pc, #44]	; (e50 <timer_add_task+0x90>)
     e24:	2000      	movs	r0, #0
     e26:	4b0b      	ldr	r3, [pc, #44]	; (e54 <timer_add_task+0x94>)
     e28:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     e2a:	f06f 0011 	mvn.w	r0, #17
     e2e:	e7ed      	b.n	e0c <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
     e30:	a801      	add	r0, sp, #4
     e32:	4b0b      	ldr	r3, [pc, #44]	; (e60 <timer_add_task+0xa0>)
     e34:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     e36:	7e23      	ldrb	r3, [r4, #24]
     e38:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     e3c:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     e3e:	4620      	mov	r0, r4
     e40:	4b08      	ldr	r3, [pc, #32]	; (e64 <timer_add_task+0xa4>)
     e42:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     e44:	a801      	add	r0, sp, #4
     e46:	4b08      	ldr	r3, [pc, #32]	; (e68 <timer_add_task+0xa8>)
     e48:	4798      	blx	r3
	return ERR_NONE;
     e4a:	2000      	movs	r0, #0
     e4c:	e7de      	b.n	e0c <timer_add_task+0x4c>
     e4e:	bf00      	nop
     e50:	000045b0 	.word	0x000045b0
     e54:	00000e6d 	.word	0x00000e6d
     e58:	00000e73 	.word	0x00000e73
     e5c:	00000c51 	.word	0x00000c51
     e60:	000009bd 	.word	0x000009bd
     e64:	0000223d 	.word	0x0000223d
     e68:	000009cb 	.word	0x000009cb

00000e6c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e6c:	b900      	cbnz	r0, e70 <assert+0x4>
		__asm("BKPT #0");
     e6e:	be00      	bkpt	0x0000
     e70:	4770      	bx	lr

00000e72 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     e72:	6803      	ldr	r3, [r0, #0]
     e74:	b11b      	cbz	r3, e7e <is_list_element+0xc>
		if (it == element) {
     e76:	428b      	cmp	r3, r1
     e78:	d003      	beq.n	e82 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	e7fa      	b.n	e74 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     e7e:	2000      	movs	r0, #0
     e80:	4770      	bx	lr
			return true;
     e82:	2001      	movs	r0, #1
}
     e84:	4770      	bx	lr
	...

00000e88 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     e88:	b538      	push	{r3, r4, r5, lr}
     e8a:	4604      	mov	r4, r0
     e8c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <list_insert_as_head+0x20>)
     e90:	4798      	blx	r3
     e92:	f080 0001 	eor.w	r0, r0, #1
     e96:	2239      	movs	r2, #57	; 0x39
     e98:	4904      	ldr	r1, [pc, #16]	; (eac <list_insert_as_head+0x24>)
     e9a:	b2c0      	uxtb	r0, r0
     e9c:	4b04      	ldr	r3, [pc, #16]	; (eb0 <list_insert_as_head+0x28>)
     e9e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ea0:	6823      	ldr	r3, [r4, #0]
     ea2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ea4:	6025      	str	r5, [r4, #0]
     ea6:	bd38      	pop	{r3, r4, r5, pc}
     ea8:	00000e73 	.word	0x00000e73
     eac:	000045c8 	.word	0x000045c8
     eb0:	00000e6d 	.word	0x00000e6d

00000eb4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     eb4:	6803      	ldr	r3, [r0, #0]
     eb6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     eb8:	6001      	str	r1, [r0, #0]
     eba:	4770      	bx	lr

00000ebc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     ebc:	6803      	ldr	r3, [r0, #0]
     ebe:	b11b      	cbz	r3, ec8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     ec0:	681a      	ldr	r2, [r3, #0]
     ec2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     ec4:	4618      	mov	r0, r3
     ec6:	4770      	bx	lr
	}

	return NULL;
     ec8:	2000      	movs	r0, #0
}
     eca:	4770      	bx	lr

00000ecc <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ecc:	0943      	lsrs	r3, r0, #5
     ece:	f000 001f 	and.w	r0, r0, #31
     ed2:	2201      	movs	r2, #1
     ed4:	fa02 f000 	lsl.w	r0, r2, r0
     ed8:	3340      	adds	r3, #64	; 0x40
     eda:	4a02      	ldr	r2, [pc, #8]	; (ee4 <_irq_set+0x18>)
     edc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     ee0:	4770      	bx	lr
     ee2:	bf00      	nop
     ee4:	e000e100 	.word	0xe000e100

00000ee8 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     ee8:	2364      	movs	r3, #100	; 0x64
     eea:	fb03 f000 	mul.w	r0, r3, r0
     eee:	3002      	adds	r0, #2
     ef0:	4b02      	ldr	r3, [pc, #8]	; (efc <_get_cycles_for_us+0x14>)
     ef2:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     ef6:	0840      	lsrs	r0, r0, #1
     ef8:	4770      	bx	lr
     efa:	bf00      	nop
     efc:	aaaaaaab 	.word	0xaaaaaaab

00000f00 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     f00:	2364      	movs	r3, #100	; 0x64
     f02:	fb03 f300 	mul.w	r3, r3, r0
     f06:	3302      	adds	r3, #2
     f08:	4804      	ldr	r0, [pc, #16]	; (f1c <_get_cycles_for_ms+0x1c>)
     f0a:	fba0 2303 	umull	r2, r3, r0, r3
     f0e:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f14:	fb00 f003 	mul.w	r0, r0, r3
     f18:	4770      	bx	lr
     f1a:	bf00      	nop
     f1c:	aaaaaaab 	.word	0xaaaaaaab

00000f20 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     f20:	3901      	subs	r1, #1
     f22:	d8fd      	bhi.n	f20 <_delay_cycles>
     f24:	4770      	bx	lr
     f26:	bf00      	nop

00000f28 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f28:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f2a:	4a0d      	ldr	r2, [pc, #52]	; (f60 <_init_chip+0x38>)
     f2c:	8813      	ldrh	r3, [r2, #0]
     f2e:	b29b      	uxth	r3, r3
     f30:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     f34:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f36:	4b0b      	ldr	r3, [pc, #44]	; (f64 <_init_chip+0x3c>)
     f38:	4798      	blx	r3
	_oscctrl_init_sources();
     f3a:	4b0b      	ldr	r3, [pc, #44]	; (f68 <_init_chip+0x40>)
     f3c:	4798      	blx	r3
	_mclk_init();
     f3e:	4b0b      	ldr	r3, [pc, #44]	; (f6c <_init_chip+0x44>)
     f40:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <_init_chip+0x48>)
     f44:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f46:	f640 70ff 	movw	r0, #4095	; 0xfff
     f4a:	4b0a      	ldr	r3, [pc, #40]	; (f74 <_init_chip+0x4c>)
     f4c:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     f4e:	4a0a      	ldr	r2, [pc, #40]	; (f78 <_init_chip+0x50>)
     f50:	6913      	ldr	r3, [r2, #16]
     f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     f56:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     f58:	4b08      	ldr	r3, [pc, #32]	; (f7c <_init_chip+0x54>)
     f5a:	4798      	blx	r3
     f5c:	bd08      	pop	{r3, pc}
     f5e:	bf00      	nop
     f60:	41004000 	.word	0x41004000
     f64:	00001301 	.word	0x00001301
     f68:	00001315 	.word	0x00001315
     f6c:	000012f5 	.word	0x000012f5
     f70:	00001331 	.word	0x00001331
     f74:	000012d1 	.word	0x000012d1
     f78:	40000800 	.word	0x40000800
     f7c:	00001001 	.word	0x00001001

00000f80 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     f80:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     f82:	4a1d      	ldr	r2, [pc, #116]	; (ff8 <_dmac_handler+0x78>)
     f84:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     f86:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     f8a:	481c      	ldr	r0, [pc, #112]	; (ffc <_dmac_handler+0x7c>)
     f8c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     f90:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     f92:	f412 7f80 	tst.w	r2, #256	; 0x100
     f96:	d10a      	bne.n	fae <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     f98:	4a17      	ldr	r2, [pc, #92]	; (ff8 <_dmac_handler+0x78>)
     f9a:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     f9c:	f412 7f00 	tst.w	r2, #512	; 0x200
     fa0:	d110      	bne.n	fc4 <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     fa2:	4a15      	ldr	r2, [pc, #84]	; (ff8 <_dmac_handler+0x78>)
     fa4:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     fa6:	f412 6f80 	tst.w	r2, #1024	; 0x400
     faa:	d117      	bne.n	fdc <_dmac_handler+0x5c>
     fac:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     fae:	011b      	lsls	r3, r3, #4
     fb0:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     fb4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fb8:	2101      	movs	r1, #1
     fba:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     fbe:	6843      	ldr	r3, [r0, #4]
     fc0:	4798      	blx	r3
     fc2:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     fc4:	011b      	lsls	r3, r3, #4
     fc6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     fca:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fce:	2102      	movs	r1, #2
     fd0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     fd4:	4a09      	ldr	r2, [pc, #36]	; (ffc <_dmac_handler+0x7c>)
     fd6:	58d3      	ldr	r3, [r2, r3]
     fd8:	4798      	blx	r3
     fda:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     fdc:	011b      	lsls	r3, r3, #4
     fde:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     fe2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fe6:	2104      	movs	r1, #4
     fe8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     fec:	4a03      	ldr	r2, [pc, #12]	; (ffc <_dmac_handler+0x7c>)
     fee:	4413      	add	r3, r2
     ff0:	689b      	ldr	r3, [r3, #8]
     ff2:	4798      	blx	r3
	}
}
     ff4:	e7da      	b.n	fac <_dmac_handler+0x2c>
     ff6:	bf00      	nop
     ff8:	4100a000 	.word	0x4100a000
     ffc:	20000100 	.word	0x20000100

00001000 <_dma_init>:
{
    1000:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1002:	4a3d      	ldr	r2, [pc, #244]	; (10f8 <_dma_init+0xf8>)
    1004:	8813      	ldrh	r3, [r2, #0]
    1006:	b29b      	uxth	r3, r3
    1008:	f023 0302 	bic.w	r3, r3, #2
    100c:	b29b      	uxth	r3, r3
    100e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1010:	8853      	ldrh	r3, [r2, #2]
    1012:	b29b      	uxth	r3, r3
    1014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1018:	b29b      	uxth	r3, r3
    101a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    101c:	8813      	ldrh	r3, [r2, #0]
    101e:	b29b      	uxth	r3, r3
    1020:	f043 0301 	orr.w	r3, r3, #1
    1024:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1026:	4b34      	ldr	r3, [pc, #208]	; (10f8 <_dma_init+0xf8>)
    1028:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    102a:	f013 0f01 	tst.w	r3, #1
    102e:	d1fa      	bne.n	1026 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1030:	4a31      	ldr	r2, [pc, #196]	; (10f8 <_dma_init+0xf8>)
    1032:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1036:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1038:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    103a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    103e:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1042:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1044:	2300      	movs	r3, #0
    1046:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1048:	492c      	ldr	r1, [pc, #176]	; (10fc <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    104a:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    104c:	492c      	ldr	r1, [pc, #176]	; (1100 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
    104e:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1050:	e016      	b.n	1080 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1052:	4a2c      	ldr	r2, [pc, #176]	; (1104 <_dma_init+0x104>)
    1054:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1058:	4c27      	ldr	r4, [pc, #156]	; (10f8 <_dma_init+0xf8>)
    105a:	1d19      	adds	r1, r3, #4
    105c:	0109      	lsls	r1, r1, #4
    105e:	1860      	adds	r0, r4, r1
    1060:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1062:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1066:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1068:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    106a:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    106c:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    106e:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1070:	4922      	ldr	r1, [pc, #136]	; (10fc <_dma_init+0xfc>)
    1072:	011a      	lsls	r2, r3, #4
    1074:	1888      	adds	r0, r1, r2
    1076:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1078:	2200      	movs	r2, #0
    107a:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    107c:	3301      	adds	r3, #1
    107e:	b2db      	uxtb	r3, r3
    1080:	2b1f      	cmp	r3, #31
    1082:	d9e6      	bls.n	1052 <_dma_init+0x52>
    1084:	2300      	movs	r3, #0
    1086:	e00a      	b.n	109e <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1088:	f103 011f 	add.w	r1, r3, #31
    108c:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    108e:	2a00      	cmp	r2, #0
    1090:	da10      	bge.n	10b4 <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1092:	2a00      	cmp	r2, #0
    1094:	da1c      	bge.n	10d0 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
    1096:	2a00      	cmp	r2, #0
    1098:	da24      	bge.n	10e4 <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
    109a:	3301      	adds	r3, #1
    109c:	b2db      	uxtb	r3, r3
    109e:	2b04      	cmp	r3, #4
    10a0:	d9f2      	bls.n	1088 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    10a2:	4a15      	ldr	r2, [pc, #84]	; (10f8 <_dma_init+0xf8>)
    10a4:	8813      	ldrh	r3, [r2, #0]
    10a6:	b29b      	uxth	r3, r3
    10a8:	f043 0302 	orr.w	r3, r3, #2
    10ac:	8013      	strh	r3, [r2, #0]
}
    10ae:	2000      	movs	r0, #0
    10b0:	bc30      	pop	{r4, r5}
    10b2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10b4:	0950      	lsrs	r0, r2, #5
    10b6:	f001 051f 	and.w	r5, r1, #31
    10ba:	2401      	movs	r4, #1
    10bc:	40ac      	lsls	r4, r5
    10be:	3020      	adds	r0, #32
    10c0:	4d11      	ldr	r5, [pc, #68]	; (1108 <_dma_init+0x108>)
    10c2:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    10c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10ca:	f3bf 8f6f 	isb	sy
    10ce:	e7e0      	b.n	1092 <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10d0:	0950      	lsrs	r0, r2, #5
    10d2:	f001 051f 	and.w	r5, r1, #31
    10d6:	2401      	movs	r4, #1
    10d8:	40ac      	lsls	r4, r5
    10da:	3060      	adds	r0, #96	; 0x60
    10dc:	4d0a      	ldr	r5, [pc, #40]	; (1108 <_dma_init+0x108>)
    10de:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    10e2:	e7d8      	b.n	1096 <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10e4:	0952      	lsrs	r2, r2, #5
    10e6:	f001 011f 	and.w	r1, r1, #31
    10ea:	2001      	movs	r0, #1
    10ec:	fa00 f101 	lsl.w	r1, r0, r1
    10f0:	4805      	ldr	r0, [pc, #20]	; (1108 <_dma_init+0x108>)
    10f2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    10f6:	e7d0      	b.n	109a <_dma_init+0x9a>
    10f8:	4100a000 	.word	0x4100a000
    10fc:	20000530 	.word	0x20000530
    1100:	20000730 	.word	0x20000730
    1104:	000045e8 	.word	0x000045e8
    1108:	e000e100 	.word	0xe000e100

0000110c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    110c:	b991      	cbnz	r1, 1134 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    110e:	b942      	cbnz	r2, 1122 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    1110:	0100      	lsls	r0, r0, #4
    1112:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1116:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    111a:	2302      	movs	r3, #2
    111c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1120:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    1122:	0100      	lsls	r0, r0, #4
    1124:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1128:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    112c:	2302      	movs	r3, #2
    112e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1132:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1134:	2901      	cmp	r1, #1
    1136:	d002      	beq.n	113e <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
    1138:	2902      	cmp	r1, #2
    113a:	d012      	beq.n	1162 <_dma_set_irq_state+0x56>
    113c:	4770      	bx	lr
	if (value == 0x0) {
    113e:	b93a      	cbnz	r2, 1150 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    1140:	0100      	lsls	r0, r0, #4
    1142:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1146:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    114a:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    114e:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    1150:	0100      	lsls	r0, r0, #4
    1152:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1156:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    115a:	2301      	movs	r3, #1
    115c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1160:	4770      	bx	lr
	if (value == 0x0) {
    1162:	b142      	cbz	r2, 1176 <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
    1164:	0100      	lsls	r0, r0, #4
    1166:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    116a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    116e:	2304      	movs	r3, #4
    1170:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1174:	e7e2      	b.n	113c <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
    1176:	0100      	lsls	r0, r0, #4
    1178:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    117c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1180:	2304      	movs	r3, #4
    1182:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1186:	4770      	bx	lr

00001188 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1188:	4b02      	ldr	r3, [pc, #8]	; (1194 <_dma_set_destination_address+0xc>)
    118a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    118e:	6081      	str	r1, [r0, #8]
}
    1190:	2000      	movs	r0, #0
    1192:	4770      	bx	lr
    1194:	20000530 	.word	0x20000530

00001198 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1198:	4b02      	ldr	r3, [pc, #8]	; (11a4 <_dma_set_source_address+0xc>)
    119a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    119e:	6041      	str	r1, [r0, #4]
}
    11a0:	2000      	movs	r0, #0
    11a2:	4770      	bx	lr
    11a4:	20000530 	.word	0x20000530

000011a8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11a8:	4a05      	ldr	r2, [pc, #20]	; (11c0 <_dma_srcinc_enable+0x18>)
    11aa:	0100      	lsls	r0, r0, #4
    11ac:	5a13      	ldrh	r3, [r2, r0]
    11ae:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    11b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    11b4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    11b8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    11ba:	5211      	strh	r1, [r2, r0]
}
    11bc:	2000      	movs	r0, #0
    11be:	4770      	bx	lr
    11c0:	20000530 	.word	0x20000530

000011c4 <_dma_set_data_amount>:
{
    11c4:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    11c6:	4c14      	ldr	r4, [pc, #80]	; (1218 <_dma_set_data_amount+0x54>)
    11c8:	0102      	lsls	r2, r0, #4
    11ca:	18a3      	adds	r3, r4, r2
    11cc:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11ce:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    11d0:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11d4:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    11d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
    11da:	d006      	beq.n	11ea <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    11dc:	fa01 f403 	lsl.w	r4, r1, r3
    11e0:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    11e2:	4a0d      	ldr	r2, [pc, #52]	; (1218 <_dma_set_data_amount+0x54>)
    11e4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    11e8:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    11ea:	4c0b      	ldr	r4, [pc, #44]	; (1218 <_dma_set_data_amount+0x54>)
    11ec:	0102      	lsls	r2, r0, #4
    11ee:	18a5      	adds	r5, r4, r2
    11f0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11f2:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    11f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    11f8:	d005      	beq.n	1206 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    11fa:	fa01 f303 	lsl.w	r3, r1, r3
    11fe:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1200:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1204:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1206:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <_dma_set_data_amount+0x54>)
    120a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    120e:	8041      	strh	r1, [r0, #2]
}
    1210:	2000      	movs	r0, #0
    1212:	bc30      	pop	{r4, r5}
    1214:	4770      	bx	lr
    1216:	bf00      	nop
    1218:	20000530 	.word	0x20000530

0000121c <_dma_enable_transaction>:
{
    121c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    121e:	4c0c      	ldr	r4, [pc, #48]	; (1250 <_dma_enable_transaction+0x34>)
    1220:	0102      	lsls	r2, r0, #4
    1222:	5aa3      	ldrh	r3, [r4, r2]
    1224:	b29b      	uxth	r3, r3
    1226:	f043 0301 	orr.w	r3, r3, #1
    122a:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    122c:	4c09      	ldr	r4, [pc, #36]	; (1254 <_dma_enable_transaction+0x38>)
    122e:	1d03      	adds	r3, r0, #4
    1230:	011b      	lsls	r3, r3, #4
    1232:	58e2      	ldr	r2, [r4, r3]
    1234:	f042 0202 	orr.w	r2, r2, #2
    1238:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    123a:	b129      	cbz	r1, 1248 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    123c:	2301      	movs	r3, #1
    123e:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1242:	6922      	ldr	r2, [r4, #16]
    1244:	4310      	orrs	r0, r2
    1246:	6120      	str	r0, [r4, #16]
}
    1248:	2000      	movs	r0, #0
    124a:	f85d 4b04 	ldr.w	r4, [sp], #4
    124e:	4770      	bx	lr
    1250:	20000530 	.word	0x20000530
    1254:	4100a000 	.word	0x4100a000

00001258 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1258:	4b02      	ldr	r3, [pc, #8]	; (1264 <_dma_get_channel_resource+0xc>)
    125a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    125e:	6001      	str	r1, [r0, #0]
}
    1260:	2000      	movs	r0, #0
    1262:	4770      	bx	lr
    1264:	20000100 	.word	0x20000100

00001268 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1268:	b508      	push	{r3, lr}
	_dmac_handler();
    126a:	4b01      	ldr	r3, [pc, #4]	; (1270 <DMAC_0_Handler+0x8>)
    126c:	4798      	blx	r3
    126e:	bd08      	pop	{r3, pc}
    1270:	00000f81 	.word	0x00000f81

00001274 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1274:	b508      	push	{r3, lr}
	_dmac_handler();
    1276:	4b01      	ldr	r3, [pc, #4]	; (127c <DMAC_1_Handler+0x8>)
    1278:	4798      	blx	r3
    127a:	bd08      	pop	{r3, pc}
    127c:	00000f81 	.word	0x00000f81

00001280 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1280:	b508      	push	{r3, lr}
	_dmac_handler();
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <DMAC_2_Handler+0x8>)
    1284:	4798      	blx	r3
    1286:	bd08      	pop	{r3, pc}
    1288:	00000f81 	.word	0x00000f81

0000128c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    128c:	b508      	push	{r3, lr}
	_dmac_handler();
    128e:	4b01      	ldr	r3, [pc, #4]	; (1294 <DMAC_3_Handler+0x8>)
    1290:	4798      	blx	r3
    1292:	bd08      	pop	{r3, pc}
    1294:	00000f81 	.word	0x00000f81

00001298 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1298:	b508      	push	{r3, lr}
	_dmac_handler();
    129a:	4b01      	ldr	r3, [pc, #4]	; (12a0 <DMAC_4_Handler+0x8>)
    129c:	4798      	blx	r3
    129e:	bd08      	pop	{r3, pc}
    12a0:	00000f81 	.word	0x00000f81

000012a4 <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
    12a4:	b084      	sub	sp, #16
    12a6:	b470      	push	{r4, r5, r6}
    12a8:	b085      	sub	sp, #20
    12aa:	4606      	mov	r6, r0
    12ac:	a809      	add	r0, sp, #36	; 0x24
    12ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    12b2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    12b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
    12b8:	4d04      	ldr	r5, [pc, #16]	; (12cc <_dma_set_descriptor+0x28>)
    12ba:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    12be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    12c2:	b005      	add	sp, #20
    12c4:	bc70      	pop	{r4, r5, r6}
    12c6:	b004      	add	sp, #16
    12c8:	4770      	bx	lr
    12ca:	bf00      	nop
    12cc:	20000530 	.word	0x20000530

000012d0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    12d0:	f010 0f01 	tst.w	r0, #1
    12d4:	d008      	beq.n	12e8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    12d6:	4a05      	ldr	r2, [pc, #20]	; (12ec <_gclk_init_generators_by_fref+0x1c>)
    12d8:	4b05      	ldr	r3, [pc, #20]	; (12f0 <_gclk_init_generators_by_fref+0x20>)
    12da:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    12dc:	4b04      	ldr	r3, [pc, #16]	; (12f0 <_gclk_init_generators_by_fref+0x20>)
    12de:	685a      	ldr	r2, [r3, #4]
    12e0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    12e4:	421a      	tst	r2, r3
    12e6:	d1f9      	bne.n	12dc <_gclk_init_generators_by_fref+0xc>
    12e8:	4770      	bx	lr
    12ea:	bf00      	nop
    12ec:	00010108 	.word	0x00010108
    12f0:	40001c00 	.word	0x40001c00

000012f4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    12f4:	2201      	movs	r2, #1
    12f6:	4b01      	ldr	r3, [pc, #4]	; (12fc <_mclk_init+0x8>)
    12f8:	715a      	strb	r2, [r3, #5]
    12fa:	4770      	bx	lr
    12fc:	40000800 	.word	0x40000800

00001300 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1300:	4b03      	ldr	r3, [pc, #12]	; (1310 <_osc32kctrl_init_sources+0x10>)
    1302:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1304:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1308:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    130a:	2201      	movs	r2, #1
    130c:	741a      	strb	r2, [r3, #16]
    130e:	4770      	bx	lr
    1310:	40001400 	.word	0x40001400

00001314 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1314:	4a04      	ldr	r2, [pc, #16]	; (1328 <_oscctrl_init_sources+0x14>)
    1316:	4b05      	ldr	r3, [pc, #20]	; (132c <_oscctrl_init_sources+0x18>)
    1318:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <_oscctrl_init_sources+0x18>)
    131c:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    131e:	f013 0f02 	tst.w	r3, #2
    1322:	d0fa      	beq.n	131a <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1324:	4770      	bx	lr
    1326:	bf00      	nop
    1328:	03002606 	.word	0x03002606
    132c:	40001000 	.word	0x40001000

00001330 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1330:	2231      	movs	r2, #49	; 0x31
    1332:	4b0e      	ldr	r3, [pc, #56]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    1334:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1336:	4b0d      	ldr	r3, [pc, #52]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    1338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    133a:	f013 0f06 	tst.w	r3, #6
    133e:	d1fa      	bne.n	1336 <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1340:	4b0a      	ldr	r3, [pc, #40]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    1342:	4a0b      	ldr	r2, [pc, #44]	; (1370 <_oscctrl_init_referenced_generators+0x40>)
    1344:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1346:	2202      	movs	r2, #2
    1348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    134c:	4b07      	ldr	r3, [pc, #28]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1350:	f013 0f02 	tst.w	r3, #2
    1354:	d1fa      	bne.n	134c <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1356:	4b05      	ldr	r3, [pc, #20]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    1358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    135a:	f013 0f01 	tst.w	r3, #1
    135e:	d104      	bne.n	136a <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1360:	4b02      	ldr	r3, [pc, #8]	; (136c <_oscctrl_init_referenced_generators+0x3c>)
    1362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1364:	f013 0f02 	tst.w	r3, #2
    1368:	d0f5      	beq.n	1356 <_oscctrl_init_referenced_generators+0x26>
    136a:	4770      	bx	lr
    136c:	40001000 	.word	0x40001000
    1370:	00020060 	.word	0x00020060

00001374 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1374:	b500      	push	{lr}
    1376:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1378:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <RAMECC_Handler+0x3c>)
    137a:	789b      	ldrb	r3, [r3, #2]
    137c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    137e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1380:	9b01      	ldr	r3, [sp, #4]
    1382:	f013 0f02 	tst.w	r3, #2
    1386:	d006      	beq.n	1396 <RAMECC_Handler+0x22>
    1388:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <RAMECC_Handler+0x40>)
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	b11b      	cbz	r3, 1396 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    138e:	4a08      	ldr	r2, [pc, #32]	; (13b0 <RAMECC_Handler+0x3c>)
    1390:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1392:	4798      	blx	r3
    1394:	e009      	b.n	13aa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1396:	9b01      	ldr	r3, [sp, #4]
    1398:	f013 0f01 	tst.w	r3, #1
    139c:	d005      	beq.n	13aa <RAMECC_Handler+0x36>
    139e:	4b05      	ldr	r3, [pc, #20]	; (13b4 <RAMECC_Handler+0x40>)
    13a0:	685b      	ldr	r3, [r3, #4]
    13a2:	b113      	cbz	r3, 13aa <RAMECC_Handler+0x36>
    13a4:	4a02      	ldr	r2, [pc, #8]	; (13b0 <RAMECC_Handler+0x3c>)
    13a6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    13a8:	4798      	blx	r3
	} else {
		return;
	}
}
    13aa:	b003      	add	sp, #12
    13ac:	f85d fb04 	ldr.w	pc, [sp], #4
    13b0:	41020000 	.word	0x41020000
    13b4:	20000930 	.word	0x20000930

000013b8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    13b8:	b470      	push	{r4, r5, r6}
    13ba:	b089      	sub	sp, #36	; 0x24
    13bc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    13be:	466c      	mov	r4, sp
    13c0:	4d0c      	ldr	r5, [pc, #48]	; (13f4 <_sercom_get_hardware_index+0x3c>)
    13c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    13c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    13c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    13ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ce:	2000      	movs	r0, #0
    13d0:	2807      	cmp	r0, #7
    13d2:	d80a      	bhi.n	13ea <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    13d4:	ab08      	add	r3, sp, #32
    13d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    13da:	f853 3c20 	ldr.w	r3, [r3, #-32]
    13de:	42b3      	cmp	r3, r6
    13e0:	d001      	beq.n	13e6 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13e2:	3001      	adds	r0, #1
    13e4:	e7f4      	b.n	13d0 <_sercom_get_hardware_index+0x18>
			return i;
    13e6:	b2c0      	uxtb	r0, r0
    13e8:	e000      	b.n	13ec <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    13ea:	2000      	movs	r0, #0
}
    13ec:	b009      	add	sp, #36	; 0x24
    13ee:	bc70      	pop	{r4, r5, r6}
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop
    13f4:	000046e8 	.word	0x000046e8

000013f8 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13f8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    13fa:	f013 0f01 	tst.w	r3, #1
    13fe:	d109      	bne.n	1414 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1400:	6803      	ldr	r3, [r0, #0]
    1402:	f043 0302 	orr.w	r3, r3, #2
    1406:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1408:	69c3      	ldr	r3, [r0, #28]
    140a:	f013 0f03 	tst.w	r3, #3
    140e:	d1fb      	bne.n	1408 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1410:	2000      	movs	r0, #0
    1412:	4770      	bx	lr
		return ERR_BUSY;
    1414:	f06f 0003 	mvn.w	r0, #3
}
    1418:	4770      	bx	lr

0000141a <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    141a:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    141c:	f013 0f04 	tst.w	r3, #4
    1420:	d109      	bne.n	1436 <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    1422:	6843      	ldr	r3, [r0, #4]
    1424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1428:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    142a:	69c3      	ldr	r3, [r0, #28]
    142c:	f013 0f17 	tst.w	r3, #23
    1430:	d1fb      	bne.n	142a <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1432:	2000      	movs	r0, #0
    1434:	4770      	bx	lr
		return ERR_BUSY;
    1436:	f06f 0003 	mvn.w	r0, #3
}
    143a:	4770      	bx	lr

0000143c <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    143c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    143e:	f013 0f04 	tst.w	r3, #4
    1442:	d109      	bne.n	1458 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    1444:	6843      	ldr	r3, [r0, #4]
    1446:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    144a:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    144c:	69c3      	ldr	r3, [r0, #28]
    144e:	f013 0f17 	tst.w	r3, #23
    1452:	d1fb      	bne.n	144c <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1454:	2000      	movs	r0, #0
    1456:	4770      	bx	lr
		return ERR_BUSY;
    1458:	f06f 0003 	mvn.w	r0, #3
}
    145c:	4770      	bx	lr

0000145e <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    145e:	3028      	adds	r0, #40	; 0x28
    1460:	4770      	bx	lr

00001462 <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    1462:	3028      	adds	r0, #40	; 0x28
    1464:	4770      	bx	lr
	...

00001468 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    1468:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    146a:	4b04      	ldr	r3, [pc, #16]	; (147c <_spi_get_tx_dma_channel+0x14>)
    146c:	4798      	blx	r3

	switch (index) {
    146e:	2805      	cmp	r0, #5
    1470:	d001      	beq.n	1476 <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    1472:	2000      	movs	r0, #0
    1474:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    1476:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    1478:	bd08      	pop	{r3, pc}
    147a:	bf00      	nop
    147c:	000013b9 	.word	0x000013b9

00001480 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    1480:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1482:	4b04      	ldr	r3, [pc, #16]	; (1494 <_spi_is_rx_dma_channel_enabled+0x14>)
    1484:	4798      	blx	r3

	switch (index) {
    1486:	2805      	cmp	r0, #5
    1488:	d001      	beq.n	148e <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    148a:	2000      	movs	r0, #0
    148c:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    148e:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    1490:	bd08      	pop	{r3, pc}
    1492:	bf00      	nop
    1494:	000013b9 	.word	0x000013b9

00001498 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    1498:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    149a:	4b07      	ldr	r3, [pc, #28]	; (14b8 <_spi_get_rx_dma_channel+0x20>)
    149c:	4798      	blx	r3

	switch (index) {
    149e:	2807      	cmp	r0, #7
    14a0:	d807      	bhi.n	14b2 <_spi_get_rx_dma_channel+0x1a>
    14a2:	e8df f000 	tbb	[pc, r0]
    14a6:	0404      	.short	0x0404
    14a8:	06040404 	.word	0x06040404
    14ac:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    14ae:	2001      	movs	r0, #1
    14b0:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    14b2:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    14b4:	bd08      	pop	{r3, pc}
    14b6:	bf00      	nop
    14b8:	000013b9 	.word	0x000013b9

000014bc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    14bc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    14be:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    14c0:	689b      	ldr	r3, [r3, #8]
    14c2:	b103      	cbz	r3, 14c6 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    14c4:	4798      	blx	r3
    14c6:	bd08      	pop	{r3, pc}

000014c8 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    14c8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    14ca:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    14cc:	68db      	ldr	r3, [r3, #12]
    14ce:	b103      	cbz	r3, 14d2 <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    14d0:	4798      	blx	r3
    14d2:	bd08      	pop	{r3, pc}

000014d4 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    14d4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    14d6:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    14d8:	685b      	ldr	r3, [r3, #4]
    14da:	b103      	cbz	r3, 14de <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    14dc:	4798      	blx	r3
    14de:	bd08      	pop	{r3, pc}

000014e0 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    14e0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    14e2:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    14e4:	691b      	ldr	r3, [r3, #16]
    14e6:	b103      	cbz	r3, 14ea <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    14e8:	4798      	blx	r3
    14ea:	bd08      	pop	{r3, pc}

000014ec <_get_i2cm_index>:
{
    14ec:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    14ee:	4b0d      	ldr	r3, [pc, #52]	; (1524 <_get_i2cm_index+0x38>)
    14f0:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    14f2:	2300      	movs	r3, #0
    14f4:	b143      	cbz	r3, 1508 <_get_i2cm_index+0x1c>
	ASSERT(false);
    14f6:	f240 32a7 	movw	r2, #935	; 0x3a7
    14fa:	490b      	ldr	r1, [pc, #44]	; (1528 <_get_i2cm_index+0x3c>)
    14fc:	2000      	movs	r0, #0
    14fe:	4b0b      	ldr	r3, [pc, #44]	; (152c <_get_i2cm_index+0x40>)
    1500:	4798      	blx	r3
	return -1;
    1502:	f04f 30ff 	mov.w	r0, #4294967295
}
    1506:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1508:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    150c:	00d1      	lsls	r1, r2, #3
    150e:	4a08      	ldr	r2, [pc, #32]	; (1530 <_get_i2cm_index+0x44>)
    1510:	440a      	add	r2, r1
    1512:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    1516:	4290      	cmp	r0, r2
    1518:	d002      	beq.n	1520 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    151a:	3301      	adds	r3, #1
    151c:	b2db      	uxtb	r3, r3
    151e:	e7e9      	b.n	14f4 <_get_i2cm_index+0x8>
			return i;
    1520:	b258      	sxtb	r0, r3
    1522:	bd08      	pop	{r3, pc}
    1524:	000013b9 	.word	0x000013b9
    1528:	0000475c 	.word	0x0000475c
    152c:	00000e6d 	.word	0x00000e6d
    1530:	000046e8 	.word	0x000046e8

00001534 <_i2c_m_sync_init_impl>:
{
    1534:	b538      	push	{r3, r4, r5, lr}
    1536:	4605      	mov	r5, r0
    1538:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    153a:	4608      	mov	r0, r1
    153c:	4b33      	ldr	r3, [pc, #204]	; (160c <_i2c_m_sync_init_impl+0xd8>)
    153e:	4798      	blx	r3
    1540:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1542:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1544:	f013 0f01 	tst.w	r3, #1
    1548:	d122      	bne.n	1590 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    154a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    154e:	00da      	lsls	r2, r3, #3
    1550:	4b2f      	ldr	r3, [pc, #188]	; (1610 <_i2c_m_sync_init_impl+0xdc>)
    1552:	4413      	add	r3, r2
    1554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1556:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    155a:	69e3      	ldr	r3, [r4, #28]
    155c:	f013 0f03 	tst.w	r3, #3
    1560:	d1fb      	bne.n	155a <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1562:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1564:	f013 0f02 	tst.w	r3, #2
    1568:	d00b      	beq.n	1582 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    156a:	6823      	ldr	r3, [r4, #0]
    156c:	f023 0302 	bic.w	r3, r3, #2
    1570:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1572:	69e3      	ldr	r3, [r4, #28]
    1574:	f013 0f03 	tst.w	r3, #3
    1578:	d1fb      	bne.n	1572 <_i2c_m_sync_init_impl+0x3e>
    157a:	69e3      	ldr	r3, [r4, #28]
    157c:	f013 0f02 	tst.w	r3, #2
    1580:	d1fb      	bne.n	157a <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1582:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1586:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1588:	69e3      	ldr	r3, [r4, #28]
    158a:	f013 0f03 	tst.w	r3, #3
    158e:	d1fb      	bne.n	1588 <_i2c_m_sync_init_impl+0x54>
    1590:	69e3      	ldr	r3, [r4, #28]
    1592:	f013 0f01 	tst.w	r3, #1
    1596:	d1fb      	bne.n	1590 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1598:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    159c:	00da      	lsls	r2, r3, #3
    159e:	4b1c      	ldr	r3, [pc, #112]	; (1610 <_i2c_m_sync_init_impl+0xdc>)
    15a0:	4413      	add	r3, r2
    15a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    15a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	f013 0f03 	tst.w	r3, #3
    15ac:	d1fb      	bne.n	15a6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    15ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    15b2:	00da      	lsls	r2, r3, #3
    15b4:	4b16      	ldr	r3, [pc, #88]	; (1610 <_i2c_m_sync_init_impl+0xdc>)
    15b6:	4413      	add	r3, r2
    15b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    15ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15bc:	69e3      	ldr	r3, [r4, #28]
    15be:	f013 0f04 	tst.w	r3, #4
    15c2:	d1fb      	bne.n	15bc <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    15c4:	0042      	lsls	r2, r0, #1
    15c6:	4402      	add	r2, r0
    15c8:	00d1      	lsls	r1, r2, #3
    15ca:	4b11      	ldr	r3, [pc, #68]	; (1610 <_i2c_m_sync_init_impl+0xdc>)
    15cc:	440b      	add	r3, r1
    15ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    15d0:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    15d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    15d6:	f003 0303 	and.w	r3, r3, #3
    15da:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    15dc:	2b01      	cmp	r3, #1
    15de:	bf94      	ite	ls
    15e0:	2300      	movls	r3, #0
    15e2:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    15e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    15e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    15ea:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    15ee:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15f0:	69e3      	ldr	r3, [r4, #28]
    15f2:	f013 0f04 	tst.w	r3, #4
    15f6:	d1fb      	bne.n	15f0 <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    15f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15fc:	00c2      	lsls	r2, r0, #3
    15fe:	4b04      	ldr	r3, [pc, #16]	; (1610 <_i2c_m_sync_init_impl+0xdc>)
    1600:	4413      	add	r3, r2
    1602:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1606:	81eb      	strh	r3, [r5, #14]
}
    1608:	2000      	movs	r0, #0
    160a:	bd38      	pop	{r3, r4, r5, pc}
    160c:	000014ed 	.word	0x000014ed
    1610:	000046e8 	.word	0x000046e8

00001614 <_sercom_i2c_sync_send_address>:
{
    1614:	b570      	push	{r4, r5, r6, lr}
    1616:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1618:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    161a:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    161c:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1620:	f240 52a6 	movw	r2, #1446	; 0x5a6
    1624:	4999      	ldr	r1, [pc, #612]	; (188c <_sercom_i2c_sync_send_address+0x278>)
    1626:	3000      	adds	r0, #0
    1628:	bf18      	it	ne
    162a:	2001      	movne	r0, #1
    162c:	4b98      	ldr	r3, [pc, #608]	; (1890 <_sercom_i2c_sync_send_address+0x27c>)
    162e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1630:	686b      	ldr	r3, [r5, #4]
    1632:	2b01      	cmp	r3, #1
    1634:	d057      	beq.n	16e6 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1636:	6863      	ldr	r3, [r4, #4]
    1638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    163c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    163e:	69e3      	ldr	r3, [r4, #28]
    1640:	f013 0f04 	tst.w	r3, #4
    1644:	d1fb      	bne.n	163e <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1646:	882b      	ldrh	r3, [r5, #0]
    1648:	f413 6f80 	tst.w	r3, #1024	; 0x400
    164c:	d056      	beq.n	16fc <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    164e:	886a      	ldrh	r2, [r5, #2]
    1650:	f012 0f01 	tst.w	r2, #1
    1654:	d004      	beq.n	1660 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1656:	886a      	ldrh	r2, [r5, #2]
    1658:	b292      	uxth	r2, r2
    165a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    165e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1660:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1664:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1668:	69e3      	ldr	r3, [r4, #28]
    166a:	f013 0f04 	tst.w	r3, #4
    166e:	d1fb      	bne.n	1668 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1670:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1676:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    167c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    167e:	69e3      	ldr	r3, [r4, #28]
    1680:	f013 0f04 	tst.w	r3, #4
    1684:	d1fb      	bne.n	167e <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    1686:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1688:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    168c:	7e33      	ldrb	r3, [r6, #24]
    168e:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1690:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    1692:	1e51      	subs	r1, r2, #1
    1694:	b11a      	cbz	r2, 169e <_sercom_i2c_sync_send_address+0x8a>
    1696:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1698:	f013 0f03 	tst.w	r3, #3
    169c:	d0f6      	beq.n	168c <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    169e:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    16a0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16a4:	69e3      	ldr	r3, [r4, #28]
    16a6:	f013 0f04 	tst.w	r3, #4
    16aa:	d1fb      	bne.n	16a4 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    16ac:	8b63      	ldrh	r3, [r4, #26]
    16ae:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    16b0:	f010 0f01 	tst.w	r0, #1
    16b4:	f000 809c 	beq.w	17f0 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    16b8:	f013 0f02 	tst.w	r3, #2
    16bc:	d032      	beq.n	1724 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16be:	2201      	movs	r2, #1
    16c0:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    16c2:	886a      	ldrh	r2, [r5, #2]
    16c4:	b292      	uxth	r2, r2
    16c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    16ca:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    16cc:	886a      	ldrh	r2, [r5, #2]
    16ce:	b292      	uxth	r2, r2
    16d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    16d4:	b292      	uxth	r2, r2
    16d6:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    16d8:	f013 0f01 	tst.w	r3, #1
    16dc:	f000 80d1 	beq.w	1882 <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    16e0:	f06f 0004 	mvn.w	r0, #4
    16e4:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    16e6:	2e00      	cmp	r6, #0
    16e8:	d0a5      	beq.n	1636 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16ea:	6863      	ldr	r3, [r4, #4]
    16ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    16f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16f2:	69e3      	ldr	r3, [r4, #28]
    16f4:	f013 0f04 	tst.w	r3, #4
    16f8:	d1fb      	bne.n	16f2 <_sercom_i2c_sync_send_address+0xde>
    16fa:	e7a4      	b.n	1646 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    16fc:	005b      	lsls	r3, r3, #1
    16fe:	b2db      	uxtb	r3, r3
    1700:	886a      	ldrh	r2, [r5, #2]
    1702:	f002 0201 	and.w	r2, r2, #1
    1706:	431a      	orrs	r2, r3
    1708:	69e3      	ldr	r3, [r4, #28]
    170a:	f013 0f04 	tst.w	r3, #4
    170e:	d1fb      	bne.n	1708 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1710:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1716:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1718:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    171a:	69e3      	ldr	r3, [r4, #28]
    171c:	f013 0f04 	tst.w	r3, #4
    1720:	d1fb      	bne.n	171a <_sercom_i2c_sync_send_address+0x106>
    1722:	e7b0      	b.n	1686 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1724:	f013 0f04 	tst.w	r3, #4
    1728:	d11f      	bne.n	176a <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    172a:	886b      	ldrh	r3, [r5, #2]
    172c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1730:	d039      	beq.n	17a6 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1732:	882b      	ldrh	r3, [r5, #0]
    1734:	121b      	asrs	r3, r3, #8
    1736:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1738:	f003 0206 	and.w	r2, r3, #6
    173c:	69e3      	ldr	r3, [r4, #28]
    173e:	f013 0f04 	tst.w	r3, #4
    1742:	d1fb      	bne.n	173c <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1744:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    174a:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    174c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1750:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1752:	69e3      	ldr	r3, [r4, #28]
    1754:	f013 0f04 	tst.w	r3, #4
    1758:	d1fb      	bne.n	1752 <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    175a:	886b      	ldrh	r3, [r5, #2]
    175c:	b29b      	uxth	r3, r3
    175e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1762:	b29b      	uxth	r3, r3
    1764:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1766:	2000      	movs	r0, #0
    1768:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    176a:	686b      	ldr	r3, [r5, #4]
    176c:	2b00      	cmp	r3, #0
    176e:	dd04      	ble.n	177a <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    1770:	886b      	ldrh	r3, [r5, #2]
    1772:	b29b      	uxth	r3, r3
    1774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1778:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    177a:	886b      	ldrh	r3, [r5, #2]
    177c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1780:	d108      	bne.n	1794 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    1782:	886b      	ldrh	r3, [r5, #2]
    1784:	b29b      	uxth	r3, r3
    1786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    178a:	b29b      	uxth	r3, r3
    178c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    178e:	f06f 0001 	mvn.w	r0, #1
    1792:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1794:	6863      	ldr	r3, [r4, #4]
    1796:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    179a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    179c:	69e3      	ldr	r3, [r4, #28]
    179e:	f013 0f04 	tst.w	r3, #4
    17a2:	d1fb      	bne.n	179c <_sercom_i2c_sync_send_address+0x188>
    17a4:	e7ed      	b.n	1782 <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    17a6:	6868      	ldr	r0, [r5, #4]
    17a8:	b998      	cbnz	r0, 17d2 <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    17aa:	886b      	ldrh	r3, [r5, #2]
    17ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17b0:	d106      	bne.n	17c0 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    17b2:	886b      	ldrh	r3, [r5, #2]
    17b4:	b29b      	uxth	r3, r3
    17b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    17ba:	b29b      	uxth	r3, r3
    17bc:	806b      	strh	r3, [r5, #2]
    17be:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    17c0:	6863      	ldr	r3, [r4, #4]
    17c2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    17c6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17c8:	69e3      	ldr	r3, [r4, #28]
    17ca:	f013 0f04 	tst.w	r3, #4
    17ce:	d1fb      	bne.n	17c8 <_sercom_i2c_sync_send_address+0x1b4>
    17d0:	e7ef      	b.n	17b2 <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    17d2:	68ab      	ldr	r3, [r5, #8]
    17d4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    17d6:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17d8:	69e3      	ldr	r3, [r4, #28]
    17da:	f013 0f04 	tst.w	r3, #4
    17de:	d1fb      	bne.n	17d8 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    17e0:	68ab      	ldr	r3, [r5, #8]
    17e2:	3301      	adds	r3, #1
    17e4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    17e6:	686b      	ldr	r3, [r5, #4]
    17e8:	3b01      	subs	r3, #1
    17ea:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    17ec:	2000      	movs	r0, #0
    17ee:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    17f0:	f010 0f02 	tst.w	r0, #2
    17f4:	d048      	beq.n	1888 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    17f6:	6869      	ldr	r1, [r5, #4]
    17f8:	2900      	cmp	r1, #0
    17fa:	d03d      	beq.n	1878 <_sercom_i2c_sync_send_address+0x264>
    17fc:	f013 0f04 	tst.w	r3, #4
    1800:	d13a      	bne.n	1878 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    1802:	3901      	subs	r1, #1
    1804:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1806:	b901      	cbnz	r1, 180a <_sercom_i2c_sync_send_address+0x1f6>
    1808:	b1e2      	cbz	r2, 1844 <_sercom_i2c_sync_send_address+0x230>
    180a:	2901      	cmp	r1, #1
    180c:	d018      	beq.n	1840 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    180e:	686b      	ldr	r3, [r5, #4]
    1810:	b94b      	cbnz	r3, 1826 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    1812:	886b      	ldrh	r3, [r5, #2]
    1814:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1818:	d11d      	bne.n	1856 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    181a:	886b      	ldrh	r3, [r5, #2]
    181c:	b29b      	uxth	r3, r3
    181e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1822:	b29b      	uxth	r3, r3
    1824:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1826:	68aa      	ldr	r2, [r5, #8]
    1828:	1c53      	adds	r3, r2, #1
    182a:	60ab      	str	r3, [r5, #8]
    182c:	69e3      	ldr	r3, [r4, #28]
    182e:	f013 0f04 	tst.w	r3, #4
    1832:	d1fb      	bne.n	182c <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1836:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1838:	2302      	movs	r3, #2
    183a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    183c:	2000      	movs	r0, #0
    183e:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1840:	2a00      	cmp	r2, #0
    1842:	d0e4      	beq.n	180e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1844:	6863      	ldr	r3, [r4, #4]
    1846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    184a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184c:	69e3      	ldr	r3, [r4, #28]
    184e:	f013 0f04 	tst.w	r3, #4
    1852:	d1fb      	bne.n	184c <_sercom_i2c_sync_send_address+0x238>
    1854:	e7db      	b.n	180e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1856:	6863      	ldr	r3, [r4, #4]
    1858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    185c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    185e:	69e3      	ldr	r3, [r4, #28]
    1860:	f013 0f04 	tst.w	r3, #4
    1864:	d1fb      	bne.n	185e <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1866:	6863      	ldr	r3, [r4, #4]
    1868:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    186c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    186e:	69e3      	ldr	r3, [r4, #28]
    1870:	f013 0f04 	tst.w	r3, #4
    1874:	d1fb      	bne.n	186e <_sercom_i2c_sync_send_address+0x25a>
    1876:	e7d0      	b.n	181a <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1878:	2302      	movs	r3, #2
    187a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    187c:	f06f 0001 	mvn.w	r0, #1
    1880:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    1882:	f06f 0003 	mvn.w	r0, #3
    1886:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    1888:	2000      	movs	r0, #0
}
    188a:	bd70      	pop	{r4, r5, r6, pc}
    188c:	0000475c 	.word	0x0000475c
    1890:	00000e6d 	.word	0x00000e6d

00001894 <_spi_m_dma_rx_enable>:
{
    1894:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1896:	4604      	mov	r4, r0
    1898:	b168      	cbz	r0, 18b6 <_spi_m_dma_rx_enable+0x22>
    189a:	6803      	ldr	r3, [r0, #0]
    189c:	b14b      	cbz	r3, 18b2 <_spi_m_dma_rx_enable+0x1e>
    189e:	2001      	movs	r0, #1
    18a0:	f640 32fe 	movw	r2, #3070	; 0xbfe
    18a4:	4905      	ldr	r1, [pc, #20]	; (18bc <_spi_m_dma_rx_enable+0x28>)
    18a6:	4b06      	ldr	r3, [pc, #24]	; (18c0 <_spi_m_dma_rx_enable+0x2c>)
    18a8:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    18aa:	6820      	ldr	r0, [r4, #0]
    18ac:	4b05      	ldr	r3, [pc, #20]	; (18c4 <_spi_m_dma_rx_enable+0x30>)
    18ae:	4798      	blx	r3
}
    18b0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    18b2:	2000      	movs	r0, #0
    18b4:	e7f4      	b.n	18a0 <_spi_m_dma_rx_enable+0xc>
    18b6:	2000      	movs	r0, #0
    18b8:	e7f2      	b.n	18a0 <_spi_m_dma_rx_enable+0xc>
    18ba:	bf00      	nop
    18bc:	0000475c 	.word	0x0000475c
    18c0:	00000e6d 	.word	0x00000e6d
    18c4:	0000141b 	.word	0x0000141b

000018c8 <_spi_m_dma_rx_disable>:
{
    18c8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    18ca:	4604      	mov	r4, r0
    18cc:	b168      	cbz	r0, 18ea <_spi_m_dma_rx_disable+0x22>
    18ce:	6803      	ldr	r3, [r0, #0]
    18d0:	b14b      	cbz	r3, 18e6 <_spi_m_dma_rx_disable+0x1e>
    18d2:	2001      	movs	r0, #1
    18d4:	f640 4205 	movw	r2, #3077	; 0xc05
    18d8:	4905      	ldr	r1, [pc, #20]	; (18f0 <_spi_m_dma_rx_disable+0x28>)
    18da:	4b06      	ldr	r3, [pc, #24]	; (18f4 <_spi_m_dma_rx_disable+0x2c>)
    18dc:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    18de:	6820      	ldr	r0, [r4, #0]
    18e0:	4b05      	ldr	r3, [pc, #20]	; (18f8 <_spi_m_dma_rx_disable+0x30>)
    18e2:	4798      	blx	r3
}
    18e4:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    18e6:	2000      	movs	r0, #0
    18e8:	e7f4      	b.n	18d4 <_spi_m_dma_rx_disable+0xc>
    18ea:	2000      	movs	r0, #0
    18ec:	e7f2      	b.n	18d4 <_spi_m_dma_rx_disable+0xc>
    18ee:	bf00      	nop
    18f0:	0000475c 	.word	0x0000475c
    18f4:	00000e6d 	.word	0x00000e6d
    18f8:	0000143d 	.word	0x0000143d

000018fc <_i2c_m_sync_init>:
{
    18fc:	b538      	push	{r3, r4, r5, lr}
    18fe:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1900:	4604      	mov	r4, r0
    1902:	f240 5219 	movw	r2, #1305	; 0x519
    1906:	4906      	ldr	r1, [pc, #24]	; (1920 <_i2c_m_sync_init+0x24>)
    1908:	3000      	adds	r0, #0
    190a:	bf18      	it	ne
    190c:	2001      	movne	r0, #1
    190e:	4b05      	ldr	r3, [pc, #20]	; (1924 <_i2c_m_sync_init+0x28>)
    1910:	4798      	blx	r3
	i2c_dev->hw = hw;
    1912:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1914:	4629      	mov	r1, r5
    1916:	4620      	mov	r0, r4
    1918:	4b03      	ldr	r3, [pc, #12]	; (1928 <_i2c_m_sync_init+0x2c>)
    191a:	4798      	blx	r3
}
    191c:	bd38      	pop	{r3, r4, r5, pc}
    191e:	bf00      	nop
    1920:	0000475c 	.word	0x0000475c
    1924:	00000e6d 	.word	0x00000e6d
    1928:	00001535 	.word	0x00001535

0000192c <_i2c_m_sync_enable>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    192e:	4e1b      	ldr	r6, [pc, #108]	; (199c <_i2c_m_sync_enable+0x70>)
    1930:	4604      	mov	r4, r0
    1932:	f240 5236 	movw	r2, #1334	; 0x536
    1936:	4631      	mov	r1, r6
    1938:	3000      	adds	r0, #0
    193a:	bf18      	it	ne
    193c:	2001      	movne	r0, #1
    193e:	4d18      	ldr	r5, [pc, #96]	; (19a0 <_i2c_m_sync_enable+0x74>)
    1940:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1942:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1944:	f240 6206 	movw	r2, #1542	; 0x606
    1948:	4631      	mov	r1, r6
    194a:	1c20      	adds	r0, r4, #0
    194c:	bf18      	it	ne
    194e:	2001      	movne	r0, #1
    1950:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1952:	6823      	ldr	r3, [r4, #0]
    1954:	f043 0302 	orr.w	r3, r3, #2
    1958:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    195a:	69e3      	ldr	r3, [r4, #28]
    195c:	f013 0f03 	tst.w	r3, #3
    1960:	d1fb      	bne.n	195a <_i2c_m_sync_enable+0x2e>
    1962:	2104      	movs	r1, #4
    1964:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1968:	69e3      	ldr	r3, [r4, #28]
    196a:	f013 0f04 	tst.w	r3, #4
    196e:	d1fb      	bne.n	1968 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1970:	8b63      	ldrh	r3, [r4, #26]
    1972:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1976:	2b01      	cmp	r3, #1
    1978:	d00b      	beq.n	1992 <_i2c_m_sync_enable+0x66>
		timeout--;
    197a:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    197c:	2a00      	cmp	r2, #0
    197e:	dcf3      	bgt.n	1968 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    1980:	3901      	subs	r1, #1
    1982:	d008      	beq.n	1996 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1984:	2310      	movs	r3, #16
    1986:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1988:	69e3      	ldr	r3, [r4, #28]
    198a:	f013 0f04 	tst.w	r3, #4
    198e:	d1fb      	bne.n	1988 <_i2c_m_sync_enable+0x5c>
    1990:	e7e8      	b.n	1964 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    1992:	2000      	movs	r0, #0
    1994:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1996:	f06f 0005 	mvn.w	r0, #5
}
    199a:	bd70      	pop	{r4, r5, r6, pc}
    199c:	0000475c 	.word	0x0000475c
    19a0:	00000e6d 	.word	0x00000e6d

000019a4 <_i2c_m_sync_transfer>:
{
    19a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19a8:	4605      	mov	r5, r0
    19aa:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    19ac:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    19ae:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1c50 <_i2c_m_sync_transfer+0x2ac>
    19b2:	f240 52d1 	movw	r2, #1489	; 0x5d1
    19b6:	4641      	mov	r1, r8
    19b8:	3000      	adds	r0, #0
    19ba:	bf18      	it	ne
    19bc:	2001      	movne	r0, #1
    19be:	4fa2      	ldr	r7, [pc, #648]	; (1c48 <_i2c_m_sync_transfer+0x2a4>)
    19c0:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    19c2:	6928      	ldr	r0, [r5, #16]
    19c4:	f240 52d2 	movw	r2, #1490	; 0x5d2
    19c8:	4641      	mov	r1, r8
    19ca:	3000      	adds	r0, #0
    19cc:	bf18      	it	ne
    19ce:	2001      	movne	r0, #1
    19d0:	47b8      	blx	r7
	ASSERT(msg);
    19d2:	f240 52d3 	movw	r2, #1491	; 0x5d3
    19d6:	4641      	mov	r1, r8
    19d8:	1c30      	adds	r0, r6, #0
    19da:	bf18      	it	ne
    19dc:	2001      	movne	r0, #1
    19de:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    19e0:	886b      	ldrh	r3, [r5, #2]
    19e2:	f413 7f80 	tst.w	r3, #256	; 0x100
    19e6:	f040 812a 	bne.w	1c3e <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    19ea:	8873      	ldrh	r3, [r6, #2]
    19ec:	b29b      	uxth	r3, r3
    19ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    19f2:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    19f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    19f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    19fc:	6863      	ldr	r3, [r4, #4]
    19fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1a02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a04:	69e3      	ldr	r3, [r4, #28]
    1a06:	f013 0f04 	tst.w	r3, #4
    1a0a:	d1fb      	bne.n	1a04 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1a0c:	4628      	mov	r0, r5
    1a0e:	4b8f      	ldr	r3, [pc, #572]	; (1c4c <_i2c_m_sync_transfer+0x2a8>)
    1a10:	4798      	blx	r3
	if (ret) {
    1a12:	4603      	mov	r3, r0
    1a14:	2800      	cmp	r0, #0
    1a16:	f000 80b0 	beq.w	1b7a <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1a1a:	886a      	ldrh	r2, [r5, #2]
    1a1c:	b292      	uxth	r2, r2
    1a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1a22:	b292      	uxth	r2, r2
    1a24:	806a      	strh	r2, [r5, #2]
		return ret;
    1a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1a2a:	f06f 0004 	mvn.w	r0, #4
    1a2e:	e0b7      	b.n	1ba0 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1a30:	8873      	ldrh	r3, [r6, #2]
    1a32:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1a36:	d107      	bne.n	1a48 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1a38:	886b      	ldrh	r3, [r5, #2]
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1a40:	b29b      	uxth	r3, r3
    1a42:	806b      	strh	r3, [r5, #2]
			return ret;
    1a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1a48:	6863      	ldr	r3, [r4, #4]
    1a4a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1a4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a50:	69e3      	ldr	r3, [r4, #28]
    1a52:	f013 0f04 	tst.w	r3, #4
    1a56:	d1fb      	bne.n	1a50 <_i2c_m_sync_transfer+0xac>
    1a58:	e7ee      	b.n	1a38 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1a5a:	f013 0f04 	tst.w	r3, #4
    1a5e:	d11f      	bne.n	1aa0 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    1a60:	886b      	ldrh	r3, [r5, #2]
    1a62:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1a66:	d039      	beq.n	1adc <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1a68:	882b      	ldrh	r3, [r5, #0]
    1a6a:	121b      	asrs	r3, r3, #8
    1a6c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1a6e:	f003 0206 	and.w	r2, r3, #6
    1a72:	69e3      	ldr	r3, [r4, #28]
    1a74:	f013 0f04 	tst.w	r3, #4
    1a78:	d1fb      	bne.n	1a72 <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1a80:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1a82:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1a86:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a88:	69e3      	ldr	r3, [r4, #28]
    1a8a:	f013 0f04 	tst.w	r3, #4
    1a8e:	d1fb      	bne.n	1a88 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    1a90:	886b      	ldrh	r3, [r5, #2]
    1a92:	b29b      	uxth	r3, r3
    1a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1a98:	b29b      	uxth	r3, r3
    1a9a:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1a9c:	2000      	movs	r0, #0
    1a9e:	e06b      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    1aa0:	686b      	ldr	r3, [r5, #4]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	dd04      	ble.n	1ab0 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    1aa6:	886b      	ldrh	r3, [r5, #2]
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1aae:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1ab0:	886b      	ldrh	r3, [r5, #2]
    1ab2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ab6:	d108      	bne.n	1aca <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    1ab8:	886b      	ldrh	r3, [r5, #2]
    1aba:	b29b      	uxth	r3, r3
    1abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1ac0:	b29b      	uxth	r3, r3
    1ac2:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1ac4:	f06f 0001 	mvn.w	r0, #1
    1ac8:	e056      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1aca:	6863      	ldr	r3, [r4, #4]
    1acc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1ad0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ad2:	69e3      	ldr	r3, [r4, #28]
    1ad4:	f013 0f04 	tst.w	r3, #4
    1ad8:	d1fb      	bne.n	1ad2 <_i2c_m_sync_transfer+0x12e>
    1ada:	e7ed      	b.n	1ab8 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    1adc:	6868      	ldr	r0, [r5, #4]
    1ade:	b998      	cbnz	r0, 1b08 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1ae0:	886b      	ldrh	r3, [r5, #2]
    1ae2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ae6:	d106      	bne.n	1af6 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1ae8:	886b      	ldrh	r3, [r5, #2]
    1aea:	b29b      	uxth	r3, r3
    1aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1af0:	b29b      	uxth	r3, r3
    1af2:	806b      	strh	r3, [r5, #2]
    1af4:	e040      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1af6:	6863      	ldr	r3, [r4, #4]
    1af8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1afc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1afe:	69e3      	ldr	r3, [r4, #28]
    1b00:	f013 0f04 	tst.w	r3, #4
    1b04:	d1fb      	bne.n	1afe <_i2c_m_sync_transfer+0x15a>
    1b06:	e7ef      	b.n	1ae8 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1b08:	68ab      	ldr	r3, [r5, #8]
    1b0a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1b0c:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b0e:	69e3      	ldr	r3, [r4, #28]
    1b10:	f013 0f04 	tst.w	r3, #4
    1b14:	d1fb      	bne.n	1b0e <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1b16:	68ab      	ldr	r3, [r5, #8]
    1b18:	3301      	adds	r3, #1
    1b1a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1b1c:	686b      	ldr	r3, [r5, #4]
    1b1e:	3b01      	subs	r3, #1
    1b20:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1b22:	2000      	movs	r0, #0
    1b24:	e028      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1b26:	f017 0f02 	tst.w	r7, #2
    1b2a:	f000 8083 	beq.w	1c34 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1b2e:	6869      	ldr	r1, [r5, #4]
    1b30:	2900      	cmp	r1, #0
    1b32:	d077      	beq.n	1c24 <_i2c_m_sync_transfer+0x280>
    1b34:	f013 0f04 	tst.w	r3, #4
    1b38:	d174      	bne.n	1c24 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1b3a:	3901      	subs	r1, #1
    1b3c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1b3e:	b909      	cbnz	r1, 1b44 <_i2c_m_sync_transfer+0x1a0>
    1b40:	2a00      	cmp	r2, #0
    1b42:	d055      	beq.n	1bf0 <_i2c_m_sync_transfer+0x24c>
    1b44:	2901      	cmp	r1, #1
    1b46:	d051      	beq.n	1bec <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1b48:	686b      	ldr	r3, [r5, #4]
    1b4a:	b94b      	cbnz	r3, 1b60 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1b4c:	886b      	ldrh	r3, [r5, #2]
    1b4e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1b52:	d156      	bne.n	1c02 <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1b54:	886b      	ldrh	r3, [r5, #2]
    1b56:	b29b      	uxth	r3, r3
    1b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1b5c:	b29b      	uxth	r3, r3
    1b5e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1b60:	68aa      	ldr	r2, [r5, #8]
    1b62:	1c53      	adds	r3, r2, #1
    1b64:	60ab      	str	r3, [r5, #8]
    1b66:	69e3      	ldr	r3, [r4, #28]
    1b68:	f013 0f04 	tst.w	r3, #4
    1b6c:	d1fb      	bne.n	1b66 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b70:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1b72:	2302      	movs	r3, #2
    1b74:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1b76:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    1b78:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1b7a:	886a      	ldrh	r2, [r5, #2]
    1b7c:	f412 7f80 	tst.w	r2, #256	; 0x100
    1b80:	d05a      	beq.n	1c38 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    1b82:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1b88:	7e03      	ldrb	r3, [r0, #24]
    1b8a:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1b8c:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    1b8e:	1e51      	subs	r1, r2, #1
    1b90:	2a00      	cmp	r2, #0
    1b92:	f43f af4a 	beq.w	1a2a <_i2c_m_sync_transfer+0x86>
    1b96:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1b98:	f013 0f03 	tst.w	r3, #3
    1b9c:	d0f4      	beq.n	1b88 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    1b9e:	2000      	movs	r0, #0
		if (ret) {
    1ba0:	2800      	cmp	r0, #0
    1ba2:	f47f af45 	bne.w	1a30 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1ba6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1ba8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1bac:	69e3      	ldr	r3, [r4, #28]
    1bae:	f013 0f04 	tst.w	r3, #4
    1bb2:	d1fb      	bne.n	1bac <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1bb4:	8b63      	ldrh	r3, [r4, #26]
    1bb6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1bb8:	f017 0f01 	tst.w	r7, #1
    1bbc:	d0b3      	beq.n	1b26 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1bbe:	f013 0f02 	tst.w	r3, #2
    1bc2:	f43f af4a 	beq.w	1a5a <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1bc6:	2201      	movs	r2, #1
    1bc8:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1bca:	886a      	ldrh	r2, [r5, #2]
    1bcc:	b292      	uxth	r2, r2
    1bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1bd2:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1bd4:	886a      	ldrh	r2, [r5, #2]
    1bd6:	b292      	uxth	r2, r2
    1bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1bdc:	b292      	uxth	r2, r2
    1bde:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1be0:	f013 0f01 	tst.w	r3, #1
    1be4:	d023      	beq.n	1c2e <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    1be6:	f06f 0004 	mvn.w	r0, #4
    1bea:	e7c5      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1bec:	2a00      	cmp	r2, #0
    1bee:	d0ab      	beq.n	1b48 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1bf0:	6863      	ldr	r3, [r4, #4]
    1bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1bf6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1bf8:	69e3      	ldr	r3, [r4, #28]
    1bfa:	f013 0f04 	tst.w	r3, #4
    1bfe:	d1fb      	bne.n	1bf8 <_i2c_m_sync_transfer+0x254>
    1c00:	e7a2      	b.n	1b48 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1c02:	6863      	ldr	r3, [r4, #4]
    1c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c08:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c0a:	69e3      	ldr	r3, [r4, #28]
    1c0c:	f013 0f04 	tst.w	r3, #4
    1c10:	d1fb      	bne.n	1c0a <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1c12:	6863      	ldr	r3, [r4, #4]
    1c14:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1c18:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c1a:	69e3      	ldr	r3, [r4, #28]
    1c1c:	f013 0f04 	tst.w	r3, #4
    1c20:	d1fb      	bne.n	1c1a <_i2c_m_sync_transfer+0x276>
    1c22:	e797      	b.n	1b54 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1c24:	2302      	movs	r3, #2
    1c26:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1c28:	f06f 0001 	mvn.w	r0, #1
    1c2c:	e7a4      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    1c2e:	f06f 0003 	mvn.w	r0, #3
    1c32:	e7a1      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1c34:	2000      	movs	r0, #0
    1c36:	e79f      	b.n	1b78 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1c38:	4618      	mov	r0, r3
    1c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    1c3e:	f06f 0005 	mvn.w	r0, #5
}
    1c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c46:	bf00      	nop
    1c48:	00000e6d 	.word	0x00000e6d
    1c4c:	00001615 	.word	0x00001615
    1c50:	0000475c 	.word	0x0000475c

00001c54 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	4605      	mov	r5, r0
    1c58:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1c5a:	4608      	mov	r0, r1
    1c5c:	4b50      	ldr	r3, [pc, #320]	; (1da0 <_spi_m_dma_init+0x14c>)
    1c5e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c60:	2300      	movs	r3, #0
    1c62:	2b00      	cmp	r3, #0
    1c64:	d072      	beq.n	1d4c <_spi_m_dma_init+0xf8>
	return NULL;
    1c66:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1c68:	2d00      	cmp	r5, #0
    1c6a:	d07b      	beq.n	1d64 <_spi_m_dma_init+0x110>
    1c6c:	2c00      	cmp	r4, #0
    1c6e:	d077      	beq.n	1d60 <_spi_m_dma_init+0x10c>
    1c70:	2001      	movs	r0, #1
    1c72:	f640 42b3 	movw	r2, #3251	; 0xcb3
    1c76:	494b      	ldr	r1, [pc, #300]	; (1da4 <_spi_m_dma_init+0x150>)
    1c78:	4b4b      	ldr	r3, [pc, #300]	; (1da8 <_spi_m_dma_init+0x154>)
    1c7a:	4798      	blx	r3

	if (regs == NULL) {
    1c7c:	2e00      	cmp	r6, #0
    1c7e:	f000 808b 	beq.w	1d98 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1c82:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1c84:	f013 0f01 	tst.w	r3, #1
    1c88:	d11d      	bne.n	1cc6 <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1c8a:	6833      	ldr	r3, [r6, #0]
    1c8c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c90:	69e3      	ldr	r3, [r4, #28]
    1c92:	f013 0f03 	tst.w	r3, #3
    1c96:	d1fb      	bne.n	1c90 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1c98:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1c9a:	f013 0f02 	tst.w	r3, #2
    1c9e:	d00b      	beq.n	1cb8 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1ca0:	6823      	ldr	r3, [r4, #0]
    1ca2:	f023 0302 	bic.w	r3, r3, #2
    1ca6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ca8:	69e3      	ldr	r3, [r4, #28]
    1caa:	f013 0f03 	tst.w	r3, #3
    1cae:	d1fb      	bne.n	1ca8 <_spi_m_dma_init+0x54>
    1cb0:	69e3      	ldr	r3, [r4, #28]
    1cb2:	f013 0f02 	tst.w	r3, #2
    1cb6:	d1fb      	bne.n	1cb0 <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1cb8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1cbc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1cbe:	69e3      	ldr	r3, [r4, #28]
    1cc0:	f013 0f03 	tst.w	r3, #3
    1cc4:	d1fb      	bne.n	1cbe <_spi_m_dma_init+0x6a>
    1cc6:	69e3      	ldr	r3, [r4, #28]
    1cc8:	f013 0f01 	tst.w	r3, #1
    1ccc:	d1fb      	bne.n	1cc6 <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1cce:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	d04b      	beq.n	1d6c <_spi_m_dma_init+0x118>
    1cd4:	2e00      	cmp	r6, #0
    1cd6:	d047      	beq.n	1d68 <_spi_m_dma_init+0x114>
    1cd8:	2001      	movs	r0, #1
    1cda:	f640 120a 	movw	r2, #2314	; 0x90a
    1cde:	4931      	ldr	r1, [pc, #196]	; (1da4 <_spi_m_dma_init+0x150>)
    1ce0:	4b31      	ldr	r3, [pc, #196]	; (1da8 <_spi_m_dma_init+0x154>)
    1ce2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ce4:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1ce6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1cea:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1cee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1cf0:	69e3      	ldr	r3, [r4, #28]
    1cf2:	f013 0f03 	tst.w	r3, #3
    1cf6:	d1fb      	bne.n	1cf0 <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1cf8:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1cfa:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1cfe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1d06:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d08:	69e3      	ldr	r3, [r4, #28]
    1d0a:	f013 0f17 	tst.w	r3, #23
    1d0e:	d1fb      	bne.n	1d08 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1d10:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1d12:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1d14:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1d16:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1d1a:	4620      	mov	r0, r4
    1d1c:	4b23      	ldr	r3, [pc, #140]	; (1dac <_spi_m_dma_init+0x158>)
    1d1e:	4798      	blx	r3
    1d20:	bb30      	cbnz	r0, 1d70 <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1d22:	4620      	mov	r0, r4
    1d24:	4b22      	ldr	r3, [pc, #136]	; (1db0 <_spi_m_dma_init+0x15c>)
    1d26:	4798      	blx	r3
    1d28:	4601      	mov	r1, r0
    1d2a:	f105 001c 	add.w	r0, r5, #28
    1d2e:	4b21      	ldr	r3, [pc, #132]	; (1db4 <_spi_m_dma_init+0x160>)
    1d30:	4798      	blx	r3
	dev->resource->back                 = dev;
    1d32:	69eb      	ldr	r3, [r5, #28]
    1d34:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1d36:	69eb      	ldr	r3, [r5, #28]
    1d38:	4a1f      	ldr	r2, [pc, #124]	; (1db8 <_spi_m_dma_init+0x164>)
    1d3a:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1d3c:	69eb      	ldr	r3, [r5, #28]
    1d3e:	4a1f      	ldr	r2, [pc, #124]	; (1dbc <_spi_m_dma_init+0x168>)
    1d40:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1d42:	69eb      	ldr	r3, [r5, #28]
    1d44:	4a1e      	ldr	r2, [pc, #120]	; (1dc0 <_spi_m_dma_init+0x16c>)
    1d46:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1d48:	2000      	movs	r0, #0
    1d4a:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1d4c:	2805      	cmp	r0, #5
    1d4e:	d002      	beq.n	1d56 <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1d50:	3301      	adds	r3, #1
    1d52:	b2db      	uxtb	r3, r3
    1d54:	e785      	b.n	1c62 <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1d56:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1d5a:	4b1a      	ldr	r3, [pc, #104]	; (1dc4 <_spi_m_dma_init+0x170>)
    1d5c:	441e      	add	r6, r3
    1d5e:	e783      	b.n	1c68 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1d60:	2000      	movs	r0, #0
    1d62:	e786      	b.n	1c72 <_spi_m_dma_init+0x1e>
    1d64:	2000      	movs	r0, #0
    1d66:	e784      	b.n	1c72 <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1d68:	2000      	movs	r0, #0
    1d6a:	e7b6      	b.n	1cda <_spi_m_dma_init+0x86>
    1d6c:	2000      	movs	r0, #0
    1d6e:	e7b4      	b.n	1cda <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1d70:	4620      	mov	r0, r4
    1d72:	4b15      	ldr	r3, [pc, #84]	; (1dc8 <_spi_m_dma_init+0x174>)
    1d74:	4798      	blx	r3
    1d76:	4601      	mov	r1, r0
    1d78:	f105 001c 	add.w	r0, r5, #28
    1d7c:	4b0d      	ldr	r3, [pc, #52]	; (1db4 <_spi_m_dma_init+0x160>)
    1d7e:	4798      	blx	r3
		dev->resource->back                 = dev;
    1d80:	69eb      	ldr	r3, [r5, #28]
    1d82:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1d84:	69eb      	ldr	r3, [r5, #28]
    1d86:	4a11      	ldr	r2, [pc, #68]	; (1dcc <_spi_m_dma_init+0x178>)
    1d88:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1d8a:	69eb      	ldr	r3, [r5, #28]
    1d8c:	4a0b      	ldr	r2, [pc, #44]	; (1dbc <_spi_m_dma_init+0x168>)
    1d8e:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1d90:	69eb      	ldr	r3, [r5, #28]
    1d92:	4a0b      	ldr	r2, [pc, #44]	; (1dc0 <_spi_m_dma_init+0x16c>)
    1d94:	609a      	str	r2, [r3, #8]
    1d96:	e7c4      	b.n	1d22 <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1d98:	f06f 000c 	mvn.w	r0, #12
}
    1d9c:	bd70      	pop	{r4, r5, r6, pc}
    1d9e:	bf00      	nop
    1da0:	000013b9 	.word	0x000013b9
    1da4:	0000475c 	.word	0x0000475c
    1da8:	00000e6d 	.word	0x00000e6d
    1dac:	00001481 	.word	0x00001481
    1db0:	00001469 	.word	0x00001469
    1db4:	00001259 	.word	0x00001259
    1db8:	000014d5 	.word	0x000014d5
    1dbc:	000014e1 	.word	0x000014e1
    1dc0:	000014c9 	.word	0x000014c9
    1dc4:	00004748 	.word	0x00004748
    1dc8:	00001499 	.word	0x00001499
    1dcc:	000014bd 	.word	0x000014bd

00001dd0 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1dd0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1dd2:	4604      	mov	r4, r0
    1dd4:	b168      	cbz	r0, 1df2 <_spi_m_dma_enable+0x22>
    1dd6:	6803      	ldr	r3, [r0, #0]
    1dd8:	b14b      	cbz	r3, 1dee <_spi_m_dma_enable+0x1e>
    1dda:	2001      	movs	r0, #1
    1ddc:	f640 42e1 	movw	r2, #3297	; 0xce1
    1de0:	4905      	ldr	r1, [pc, #20]	; (1df8 <_spi_m_dma_enable+0x28>)
    1de2:	4b06      	ldr	r3, [pc, #24]	; (1dfc <_spi_m_dma_enable+0x2c>)
    1de4:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1de6:	6820      	ldr	r0, [r4, #0]
    1de8:	4b05      	ldr	r3, [pc, #20]	; (1e00 <_spi_m_dma_enable+0x30>)
    1dea:	4798      	blx	r3
}
    1dec:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1dee:	2000      	movs	r0, #0
    1df0:	e7f4      	b.n	1ddc <_spi_m_dma_enable+0xc>
    1df2:	2000      	movs	r0, #0
    1df4:	e7f2      	b.n	1ddc <_spi_m_dma_enable+0xc>
    1df6:	bf00      	nop
    1df8:	0000475c 	.word	0x0000475c
    1dfc:	00000e6d 	.word	0x00000e6d
    1e00:	000013f9 	.word	0x000013f9

00001e04 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1e04:	b570      	push	{r4, r5, r6, lr}
    1e06:	4605      	mov	r5, r0
    1e08:	4614      	mov	r4, r2
	switch (type) {
    1e0a:	2903      	cmp	r1, #3
    1e0c:	d835      	bhi.n	1e7a <_spi_m_dma_register_callback+0x76>
    1e0e:	e8df f001 	tbb	[pc, r1]
    1e12:	0d02      	.short	0x0d02
    1e14:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1e16:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1e18:	6800      	ldr	r0, [r0, #0]
    1e1a:	4b18      	ldr	r3, [pc, #96]	; (1e7c <_spi_m_dma_register_callback+0x78>)
    1e1c:	4798      	blx	r3
    1e1e:	1c22      	adds	r2, r4, #0
    1e20:	bf18      	it	ne
    1e22:	2201      	movne	r2, #1
    1e24:	2100      	movs	r1, #0
    1e26:	4b16      	ldr	r3, [pc, #88]	; (1e80 <_spi_m_dma_register_callback+0x7c>)
    1e28:	4798      	blx	r3
		break;
    1e2a:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1e2c:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1e2e:	6800      	ldr	r0, [r0, #0]
    1e30:	4b14      	ldr	r3, [pc, #80]	; (1e84 <_spi_m_dma_register_callback+0x80>)
    1e32:	4798      	blx	r3
    1e34:	1c22      	adds	r2, r4, #0
    1e36:	bf18      	it	ne
    1e38:	2201      	movne	r2, #1
    1e3a:	2100      	movs	r1, #0
    1e3c:	4b10      	ldr	r3, [pc, #64]	; (1e80 <_spi_m_dma_register_callback+0x7c>)
    1e3e:	4798      	blx	r3
		break;
    1e40:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1e42:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1e44:	6800      	ldr	r0, [r0, #0]
    1e46:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <_spi_m_dma_register_callback+0x80>)
    1e48:	4798      	blx	r3
    1e4a:	3400      	adds	r4, #0
    1e4c:	bf18      	it	ne
    1e4e:	2401      	movne	r4, #1
    1e50:	4622      	mov	r2, r4
    1e52:	2101      	movs	r1, #1
    1e54:	4e0a      	ldr	r6, [pc, #40]	; (1e80 <_spi_m_dma_register_callback+0x7c>)
    1e56:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1e58:	6828      	ldr	r0, [r5, #0]
    1e5a:	4b08      	ldr	r3, [pc, #32]	; (1e7c <_spi_m_dma_register_callback+0x78>)
    1e5c:	4798      	blx	r3
    1e5e:	4622      	mov	r2, r4
    1e60:	2101      	movs	r1, #1
    1e62:	47b0      	blx	r6
		break;
    1e64:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1e66:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1e68:	6800      	ldr	r0, [r0, #0]
    1e6a:	4b06      	ldr	r3, [pc, #24]	; (1e84 <_spi_m_dma_register_callback+0x80>)
    1e6c:	4798      	blx	r3
    1e6e:	1c22      	adds	r2, r4, #0
    1e70:	bf18      	it	ne
    1e72:	2201      	movne	r2, #1
    1e74:	2102      	movs	r1, #2
    1e76:	4b02      	ldr	r3, [pc, #8]	; (1e80 <_spi_m_dma_register_callback+0x7c>)
    1e78:	4798      	blx	r3
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	00001469 	.word	0x00001469
    1e80:	0000110d 	.word	0x0000110d
    1e84:	00001499 	.word	0x00001499

00001e88 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e8c:	4605      	mov	r5, r0
    1e8e:	4689      	mov	r9, r1
    1e90:	4690      	mov	r8, r2
    1e92:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1e94:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1e96:	4620      	mov	r0, r4
    1e98:	4b33      	ldr	r3, [pc, #204]	; (1f68 <_spi_m_dma_transfer+0xe0>)
    1e9a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1e9c:	2300      	movs	r3, #0
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d03f      	beq.n	1f22 <_spi_m_dma_transfer+0x9a>
	return NULL;
    1ea2:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1ea6:	4620      	mov	r0, r4
    1ea8:	4b30      	ldr	r3, [pc, #192]	; (1f6c <_spi_m_dma_transfer+0xe4>)
    1eaa:	4798      	blx	r3
    1eac:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1eae:	4620      	mov	r0, r4
    1eb0:	4b2f      	ldr	r3, [pc, #188]	; (1f70 <_spi_m_dma_transfer+0xe8>)
    1eb2:	4798      	blx	r3
    1eb4:	4604      	mov	r4, r0

	if (rxbuf) {
    1eb6:	f1b8 0f00 	cmp.w	r8, #0
    1eba:	d03c      	beq.n	1f36 <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1ebc:	4628      	mov	r0, r5
    1ebe:	4b2d      	ldr	r3, [pc, #180]	; (1f74 <_spi_m_dma_transfer+0xec>)
    1ec0:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1ec2:	6828      	ldr	r0, [r5, #0]
    1ec4:	4b2c      	ldr	r3, [pc, #176]	; (1f78 <_spi_m_dma_transfer+0xf0>)
    1ec6:	4798      	blx	r3
    1ec8:	4601      	mov	r1, r0
    1eca:	4630      	mov	r0, r6
    1ecc:	4b2b      	ldr	r3, [pc, #172]	; (1f7c <_spi_m_dma_transfer+0xf4>)
    1ece:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1ed0:	4641      	mov	r1, r8
    1ed2:	4630      	mov	r0, r6
    1ed4:	4b2a      	ldr	r3, [pc, #168]	; (1f80 <_spi_m_dma_transfer+0xf8>)
    1ed6:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1ed8:	4639      	mov	r1, r7
    1eda:	4630      	mov	r0, r6
    1edc:	4b29      	ldr	r3, [pc, #164]	; (1f84 <_spi_m_dma_transfer+0xfc>)
    1ede:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1ee0:	2100      	movs	r1, #0
    1ee2:	4630      	mov	r0, r6
    1ee4:	4b28      	ldr	r3, [pc, #160]	; (1f88 <_spi_m_dma_transfer+0x100>)
    1ee6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	d027      	beq.n	1f3e <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1eee:	4649      	mov	r1, r9
    1ef0:	4620      	mov	r0, r4
    1ef2:	4b22      	ldr	r3, [pc, #136]	; (1f7c <_spi_m_dma_transfer+0xf4>)
    1ef4:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1ef6:	6828      	ldr	r0, [r5, #0]
    1ef8:	4b24      	ldr	r3, [pc, #144]	; (1f8c <_spi_m_dma_transfer+0x104>)
    1efa:	4798      	blx	r3
    1efc:	4601      	mov	r1, r0
    1efe:	4620      	mov	r0, r4
    1f00:	4b1f      	ldr	r3, [pc, #124]	; (1f80 <_spi_m_dma_transfer+0xf8>)
    1f02:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1f04:	2101      	movs	r1, #1
    1f06:	4620      	mov	r0, r4
    1f08:	4b21      	ldr	r3, [pc, #132]	; (1f90 <_spi_m_dma_transfer+0x108>)
    1f0a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1f0c:	4639      	mov	r1, r7
    1f0e:	4620      	mov	r0, r4
    1f10:	4b1c      	ldr	r3, [pc, #112]	; (1f84 <_spi_m_dma_transfer+0xfc>)
    1f12:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1f14:	2100      	movs	r1, #0
    1f16:	4620      	mov	r0, r4
    1f18:	4b1b      	ldr	r3, [pc, #108]	; (1f88 <_spi_m_dma_transfer+0x100>)
    1f1a:	4798      	blx	r3

	return ERR_NONE;
}
    1f1c:	2000      	movs	r0, #0
    1f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1f22:	2805      	cmp	r0, #5
    1f24:	d002      	beq.n	1f2c <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1f26:	3301      	adds	r3, #1
    1f28:	b2db      	uxtb	r3, r3
    1f2a:	e7b8      	b.n	1e9e <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1f2c:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1f30:	4b18      	ldr	r3, [pc, #96]	; (1f94 <_spi_m_dma_transfer+0x10c>)
    1f32:	449a      	add	sl, r3
    1f34:	e7b7      	b.n	1ea6 <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1f36:	4628      	mov	r0, r5
    1f38:	4b17      	ldr	r3, [pc, #92]	; (1f98 <_spi_m_dma_transfer+0x110>)
    1f3a:	4798      	blx	r3
    1f3c:	e7d4      	b.n	1ee8 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1f3e:	f10a 010e 	add.w	r1, sl, #14
    1f42:	4620      	mov	r0, r4
    1f44:	4b0d      	ldr	r3, [pc, #52]	; (1f7c <_spi_m_dma_transfer+0xf4>)
    1f46:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1f48:	6828      	ldr	r0, [r5, #0]
    1f4a:	4b10      	ldr	r3, [pc, #64]	; (1f8c <_spi_m_dma_transfer+0x104>)
    1f4c:	4798      	blx	r3
    1f4e:	4601      	mov	r1, r0
    1f50:	4620      	mov	r0, r4
    1f52:	4b0b      	ldr	r3, [pc, #44]	; (1f80 <_spi_m_dma_transfer+0xf8>)
    1f54:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1f56:	2100      	movs	r1, #0
    1f58:	4620      	mov	r0, r4
    1f5a:	4b0d      	ldr	r3, [pc, #52]	; (1f90 <_spi_m_dma_transfer+0x108>)
    1f5c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1f5e:	4639      	mov	r1, r7
    1f60:	4620      	mov	r0, r4
    1f62:	4b08      	ldr	r3, [pc, #32]	; (1f84 <_spi_m_dma_transfer+0xfc>)
    1f64:	4798      	blx	r3
    1f66:	e7d5      	b.n	1f14 <_spi_m_dma_transfer+0x8c>
    1f68:	000013b9 	.word	0x000013b9
    1f6c:	00001499 	.word	0x00001499
    1f70:	00001469 	.word	0x00001469
    1f74:	00001895 	.word	0x00001895
    1f78:	0000145f 	.word	0x0000145f
    1f7c:	00001199 	.word	0x00001199
    1f80:	00001189 	.word	0x00001189
    1f84:	000011c5 	.word	0x000011c5
    1f88:	0000121d 	.word	0x0000121d
    1f8c:	00001463 	.word	0x00001463
    1f90:	000011a9 	.word	0x000011a9
    1f94:	00004748 	.word	0x00004748
    1f98:	000018c9 	.word	0x000018c9

00001f9c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1f9c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1f9e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1fa0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1fa2:	f012 0f01 	tst.w	r2, #1
    1fa6:	d100      	bne.n	1faa <tc_interrupt_handler+0xe>
    1fa8:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1faa:	2201      	movs	r2, #1
    1fac:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    1fae:	6803      	ldr	r3, [r0, #0]
    1fb0:	4798      	blx	r3
	}
}
    1fb2:	e7f9      	b.n	1fa8 <tc_interrupt_handler+0xc>

00001fb4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1fb4:	4b03      	ldr	r3, [pc, #12]	; (1fc4 <_tc_init_irq_param+0x10>)
    1fb6:	4298      	cmp	r0, r3
    1fb8:	d000      	beq.n	1fbc <_tc_init_irq_param+0x8>
    1fba:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    1fbc:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <_tc_init_irq_param+0x14>)
    1fbe:	6019      	str	r1, [r3, #0]
	}
	if (hw == TC7) {
		_tc7_dev = (struct _pwm_device *)dev;
	}
}
    1fc0:	e7fb      	b.n	1fba <_tc_init_irq_param+0x6>
    1fc2:	bf00      	nop
    1fc4:	4101c000 	.word	0x4101c000
    1fc8:	20000300 	.word	0x20000300

00001fcc <get_tc_index>:
{
    1fcc:	b570      	push	{r4, r5, r6, lr}
    1fce:	b088      	sub	sp, #32
    1fd0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1fd2:	466c      	mov	r4, sp
    1fd4:	4d17      	ldr	r5, [pc, #92]	; (2034 <get_tc_index+0x68>)
    1fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1fda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1fe2:	2300      	movs	r3, #0
    1fe4:	2b07      	cmp	r3, #7
    1fe6:	d80a      	bhi.n	1ffe <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1fe8:	aa08      	add	r2, sp, #32
    1fea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1fee:	f852 2c20 	ldr.w	r2, [r2, #-32]
    1ff2:	42b2      	cmp	r2, r6
    1ff4:	d001      	beq.n	1ffa <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1ff6:	3301      	adds	r3, #1
    1ff8:	e7f4      	b.n	1fe4 <get_tc_index+0x18>
			return i;
    1ffa:	b2db      	uxtb	r3, r3
    1ffc:	e000      	b.n	2000 <get_tc_index+0x34>
		}
	}
	return 0;
    1ffe:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2000:	2200      	movs	r2, #0
    2002:	b14a      	cbz	r2, 2018 <get_tc_index+0x4c>
	ASSERT(false);
    2004:	f44f 729f 	mov.w	r2, #318	; 0x13e
    2008:	490b      	ldr	r1, [pc, #44]	; (2038 <get_tc_index+0x6c>)
    200a:	2000      	movs	r0, #0
    200c:	4b0b      	ldr	r3, [pc, #44]	; (203c <get_tc_index+0x70>)
    200e:	4798      	blx	r3
	return -1;
    2010:	f04f 30ff 	mov.w	r0, #4294967295
}
    2014:	b008      	add	sp, #32
    2016:	bd70      	pop	{r4, r5, r6, pc}
		if (_tcs[i].number == index) {
    2018:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    201c:	0088      	lsls	r0, r1, #2
    201e:	4905      	ldr	r1, [pc, #20]	; (2034 <get_tc_index+0x68>)
    2020:	4401      	add	r1, r0
    2022:	f891 1020 	ldrb.w	r1, [r1, #32]
    2026:	4299      	cmp	r1, r3
    2028:	d002      	beq.n	2030 <get_tc_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    202a:	3201      	adds	r2, #1
    202c:	b2d2      	uxtb	r2, r2
    202e:	e7e8      	b.n	2002 <get_tc_index+0x36>
			return i;
    2030:	b250      	sxtb	r0, r2
    2032:	e7ef      	b.n	2014 <get_tc_index+0x48>
    2034:	00004778 	.word	0x00004778
    2038:	000047ac 	.word	0x000047ac
    203c:	00000e6d 	.word	0x00000e6d

00002040 <_timer_init>:
{
    2040:	b570      	push	{r4, r5, r6, lr}
    2042:	4606      	mov	r6, r0
    2044:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2046:	4608      	mov	r0, r1
    2048:	4b66      	ldr	r3, [pc, #408]	; (21e4 <_timer_init+0x1a4>)
    204a:	4798      	blx	r3
    204c:	4605      	mov	r5, r0
	device->hw = hw;
    204e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2050:	228f      	movs	r2, #143	; 0x8f
    2052:	4965      	ldr	r1, [pc, #404]	; (21e8 <_timer_init+0x1a8>)
    2054:	2001      	movs	r0, #1
    2056:	4b65      	ldr	r3, [pc, #404]	; (21ec <_timer_init+0x1ac>)
    2058:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    205a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    205c:	f013 0f01 	tst.w	r3, #1
    2060:	d119      	bne.n	2096 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2062:	6923      	ldr	r3, [r4, #16]
    2064:	f013 0f03 	tst.w	r3, #3
    2068:	d1fb      	bne.n	2062 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    206a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    206c:	f013 0f02 	tst.w	r3, #2
    2070:	d00b      	beq.n	208a <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2072:	6823      	ldr	r3, [r4, #0]
    2074:	f023 0302 	bic.w	r3, r3, #2
    2078:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    207a:	6923      	ldr	r3, [r4, #16]
    207c:	f013 0f03 	tst.w	r3, #3
    2080:	d1fb      	bne.n	207a <_timer_init+0x3a>
    2082:	6923      	ldr	r3, [r4, #16]
    2084:	f013 0f02 	tst.w	r3, #2
    2088:	d1fb      	bne.n	2082 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    208a:	2301      	movs	r3, #1
    208c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    208e:	6923      	ldr	r3, [r4, #16]
    2090:	f013 0f03 	tst.w	r3, #3
    2094:	d1fb      	bne.n	208e <_timer_init+0x4e>
    2096:	6923      	ldr	r3, [r4, #16]
    2098:	f013 0f01 	tst.w	r3, #1
    209c:	d1fb      	bne.n	2096 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    209e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20a2:	009a      	lsls	r2, r3, #2
    20a4:	4b52      	ldr	r3, [pc, #328]	; (21f0 <_timer_init+0x1b0>)
    20a6:	4413      	add	r3, r2
    20a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20aa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20ac:	6923      	ldr	r3, [r4, #16]
    20ae:	f013 0f03 	tst.w	r3, #3
    20b2:	d1fb      	bne.n	20ac <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    20b4:	00aa      	lsls	r2, r5, #2
    20b6:	442a      	add	r2, r5
    20b8:	0091      	lsls	r1, r2, #2
    20ba:	4b4d      	ldr	r3, [pc, #308]	; (21f0 <_timer_init+0x1b0>)
    20bc:	440b      	add	r3, r1
    20be:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    20c2:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    20c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    20c6:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    20c8:	2201      	movs	r2, #1
    20ca:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    20cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20ce:	f003 030c 	and.w	r3, r3, #12
    20d2:	2b08      	cmp	r3, #8
    20d4:	d056      	beq.n	2184 <_timer_init+0x144>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    20d6:	2b00      	cmp	r3, #0
    20d8:	d163      	bne.n	21a2 <_timer_init+0x162>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    20da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20de:	009a      	lsls	r2, r3, #2
    20e0:	4b43      	ldr	r3, [pc, #268]	; (21f0 <_timer_init+0x1b0>)
    20e2:	4413      	add	r3, r2
    20e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    20e6:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20e8:	6923      	ldr	r3, [r4, #16]
    20ea:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    20ee:	d1fb      	bne.n	20e8 <_timer_init+0xa8>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    20f0:	2300      	movs	r3, #0
    20f2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20f4:	6923      	ldr	r3, [r4, #16]
    20f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    20fa:	d1fb      	bne.n	20f4 <_timer_init+0xb4>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    20fc:	2301      	movs	r3, #1
    20fe:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2100:	4631      	mov	r1, r6
    2102:	4620      	mov	r0, r4
    2104:	4b3b      	ldr	r3, [pc, #236]	; (21f4 <_timer_init+0x1b4>)
    2106:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2108:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    210c:	009a      	lsls	r2, r3, #2
    210e:	4b38      	ldr	r3, [pc, #224]	; (21f0 <_timer_init+0x1b0>)
    2110:	4413      	add	r3, r2
    2112:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2116:	2b00      	cmp	r3, #0
    2118:	db0d      	blt.n	2136 <_timer_init+0xf6>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    211a:	095a      	lsrs	r2, r3, #5
    211c:	f003 031f 	and.w	r3, r3, #31
    2120:	2101      	movs	r1, #1
    2122:	fa01 f303 	lsl.w	r3, r1, r3
    2126:	3220      	adds	r2, #32
    2128:	4933      	ldr	r1, [pc, #204]	; (21f8 <_timer_init+0x1b8>)
    212a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    212e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2132:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2136:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    213a:	009a      	lsls	r2, r3, #2
    213c:	4b2c      	ldr	r3, [pc, #176]	; (21f0 <_timer_init+0x1b0>)
    213e:	4413      	add	r3, r2
    2140:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2144:	2b00      	cmp	r3, #0
    2146:	db09      	blt.n	215c <_timer_init+0x11c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2148:	095a      	lsrs	r2, r3, #5
    214a:	f003 031f 	and.w	r3, r3, #31
    214e:	2101      	movs	r1, #1
    2150:	fa01 f303 	lsl.w	r3, r1, r3
    2154:	3260      	adds	r2, #96	; 0x60
    2156:	4928      	ldr	r1, [pc, #160]	; (21f8 <_timer_init+0x1b8>)
    2158:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    215c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2160:	00aa      	lsls	r2, r5, #2
    2162:	4b23      	ldr	r3, [pc, #140]	; (21f0 <_timer_init+0x1b0>)
    2164:	4413      	add	r3, r2
    2166:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    216a:	2b00      	cmp	r3, #0
    216c:	db08      	blt.n	2180 <_timer_init+0x140>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216e:	0959      	lsrs	r1, r3, #5
    2170:	f003 031f 	and.w	r3, r3, #31
    2174:	2201      	movs	r2, #1
    2176:	fa02 f303 	lsl.w	r3, r2, r3
    217a:	4a1f      	ldr	r2, [pc, #124]	; (21f8 <_timer_init+0x1b8>)
    217c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2180:	2000      	movs	r0, #0
    2182:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2184:	4b1a      	ldr	r3, [pc, #104]	; (21f0 <_timer_init+0x1b0>)
    2186:	440b      	add	r3, r1
    2188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    218a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    218c:	6923      	ldr	r3, [r4, #16]
    218e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2192:	d1fb      	bne.n	218c <_timer_init+0x14c>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2194:	2300      	movs	r3, #0
    2196:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2198:	6923      	ldr	r3, [r4, #16]
    219a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    219e:	d1fb      	bne.n	2198 <_timer_init+0x158>
    21a0:	e7ac      	b.n	20fc <_timer_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    21a2:	2b04      	cmp	r3, #4
    21a4:	d1aa      	bne.n	20fc <_timer_init+0xbc>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    21a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21aa:	009a      	lsls	r2, r3, #2
    21ac:	4b10      	ldr	r3, [pc, #64]	; (21f0 <_timer_init+0x1b0>)
    21ae:	4413      	add	r3, r2
    21b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    21b4:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21b6:	6923      	ldr	r3, [r4, #16]
    21b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21bc:	d1fb      	bne.n	21b6 <_timer_init+0x176>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    21be:	2300      	movs	r3, #0
    21c0:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21c2:	6923      	ldr	r3, [r4, #16]
    21c4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21c8:	d1fb      	bne.n	21c2 <_timer_init+0x182>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    21ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21ce:	009a      	lsls	r2, r3, #2
    21d0:	4b07      	ldr	r3, [pc, #28]	; (21f0 <_timer_init+0x1b0>)
    21d2:	4413      	add	r3, r2
    21d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    21d8:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21da:	6923      	ldr	r3, [r4, #16]
    21dc:	f013 0f20 	tst.w	r3, #32
    21e0:	d1fb      	bne.n	21da <_timer_init+0x19a>
    21e2:	e78b      	b.n	20fc <_timer_init+0xbc>
    21e4:	00001fcd 	.word	0x00001fcd
    21e8:	000047ac 	.word	0x000047ac
    21ec:	00000e6d 	.word	0x00000e6d
    21f0:	00004778 	.word	0x00004778
    21f4:	00001fb5 	.word	0x00001fb5
    21f8:	e000e100 	.word	0xe000e100

000021fc <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    21fc:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    21fe:	6813      	ldr	r3, [r2, #0]
    2200:	f043 0302 	orr.w	r3, r3, #2
    2204:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2206:	6913      	ldr	r3, [r2, #16]
    2208:	f013 0f03 	tst.w	r3, #3
    220c:	d1fb      	bne.n	2206 <_timer_start+0xa>
}
    220e:	4770      	bx	lr

00002210 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2210:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2212:	6813      	ldr	r3, [r2, #0]
    2214:	f023 0302 	bic.w	r3, r3, #2
    2218:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    221a:	6913      	ldr	r3, [r2, #16]
    221c:	f013 0f03 	tst.w	r3, #3
    2220:	d1fb      	bne.n	221a <_timer_stop+0xa>
}
    2222:	4770      	bx	lr

00002224 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2224:	68c2      	ldr	r2, [r0, #12]
    2226:	6913      	ldr	r3, [r2, #16]
    2228:	f013 0f03 	tst.w	r3, #3
    222c:	d1fb      	bne.n	2226 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    222e:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2230:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    2234:	4770      	bx	lr

00002236 <_tc_get_timer>:
}
    2236:	2000      	movs	r0, #0
    2238:	4770      	bx	lr
	...

0000223c <_timer_set_irq>:
{
    223c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    223e:	68c0      	ldr	r0, [r0, #12]
    2240:	4b09      	ldr	r3, [pc, #36]	; (2268 <_timer_set_irq+0x2c>)
    2242:	4798      	blx	r3
    2244:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2246:	f240 1211 	movw	r2, #273	; 0x111
    224a:	4908      	ldr	r1, [pc, #32]	; (226c <_timer_set_irq+0x30>)
    224c:	2001      	movs	r0, #1
    224e:	4b08      	ldr	r3, [pc, #32]	; (2270 <_timer_set_irq+0x34>)
    2250:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2252:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2256:	00a2      	lsls	r2, r4, #2
    2258:	4b06      	ldr	r3, [pc, #24]	; (2274 <_timer_set_irq+0x38>)
    225a:	4413      	add	r3, r2
    225c:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <_timer_set_irq+0x3c>)
    2262:	4798      	blx	r3
    2264:	bd10      	pop	{r4, pc}
    2266:	bf00      	nop
    2268:	00001fcd 	.word	0x00001fcd
    226c:	000047ac 	.word	0x000047ac
    2270:	00000e6d 	.word	0x00000e6d
    2274:	00004778 	.word	0x00004778
    2278:	00000ecd 	.word	0x00000ecd

0000227c <TC3_Handler>:
{
    227c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    227e:	4b02      	ldr	r3, [pc, #8]	; (2288 <TC3_Handler+0xc>)
    2280:	6818      	ldr	r0, [r3, #0]
    2282:	4b02      	ldr	r3, [pc, #8]	; (228c <TC3_Handler+0x10>)
    2284:	4798      	blx	r3
    2286:	bd08      	pop	{r3, pc}
    2288:	20000300 	.word	0x20000300
    228c:	00001f9d 	.word	0x00001f9d

00002290 <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2290:	4b29      	ldr	r3, [pc, #164]	; (2338 <TIMER_0_init+0xa8>)
    2292:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    2294:	f013 0f01 	tst.w	r3, #1
    2298:	d120      	bne.n	22dc <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    229a:	4b27      	ldr	r3, [pc, #156]	; (2338 <TIMER_0_init+0xa8>)
    229c:	691b      	ldr	r3, [r3, #16]
    229e:	f013 0f03 	tst.w	r3, #3
    22a2:	d1fa      	bne.n	229a <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22a4:	4b24      	ldr	r3, [pc, #144]	; (2338 <TIMER_0_init+0xa8>)
    22a6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    22a8:	f013 0f02 	tst.w	r3, #2
    22ac:	d00e      	beq.n	22cc <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    22ae:	4a22      	ldr	r2, [pc, #136]	; (2338 <TIMER_0_init+0xa8>)
    22b0:	6813      	ldr	r3, [r2, #0]
    22b2:	f023 0302 	bic.w	r3, r3, #2
    22b6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22b8:	4b1f      	ldr	r3, [pc, #124]	; (2338 <TIMER_0_init+0xa8>)
    22ba:	691b      	ldr	r3, [r3, #16]
    22bc:	f013 0f03 	tst.w	r3, #3
    22c0:	d1fa      	bne.n	22b8 <TIMER_0_init+0x28>
    22c2:	4b1d      	ldr	r3, [pc, #116]	; (2338 <TIMER_0_init+0xa8>)
    22c4:	691b      	ldr	r3, [r3, #16]
    22c6:	f013 0f02 	tst.w	r3, #2
    22ca:	d1fa      	bne.n	22c2 <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22cc:	2201      	movs	r2, #1
    22ce:	4b1a      	ldr	r3, [pc, #104]	; (2338 <TIMER_0_init+0xa8>)
    22d0:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22d2:	4b19      	ldr	r3, [pc, #100]	; (2338 <TIMER_0_init+0xa8>)
    22d4:	691b      	ldr	r3, [r3, #16]
    22d6:	f013 0f03 	tst.w	r3, #3
    22da:	d1fa      	bne.n	22d2 <TIMER_0_init+0x42>
    22dc:	4b16      	ldr	r3, [pc, #88]	; (2338 <TIMER_0_init+0xa8>)
    22de:	691b      	ldr	r3, [r3, #16]
    22e0:	f013 0f01 	tst.w	r3, #1
    22e4:	d1fa      	bne.n	22dc <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22ea:	4b13      	ldr	r3, [pc, #76]	; (2338 <TIMER_0_init+0xa8>)
    22ec:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22ee:	4b12      	ldr	r3, [pc, #72]	; (2338 <TIMER_0_init+0xa8>)
    22f0:	691b      	ldr	r3, [r3, #16]
    22f2:	f013 0f03 	tst.w	r3, #3
    22f6:	d1fa      	bne.n	22ee <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    22f8:	4b0f      	ldr	r3, [pc, #60]	; (2338 <TIMER_0_init+0xa8>)
    22fa:	2200      	movs	r2, #0
    22fc:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    22fe:	22ff      	movs	r2, #255	; 0xff
    2300:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2302:	2201      	movs	r2, #1
    2304:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2306:	f641 0269 	movw	r2, #6249	; 0x1869
    230a:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    230c:	4b0a      	ldr	r3, [pc, #40]	; (2338 <TIMER_0_init+0xa8>)
    230e:	691b      	ldr	r3, [r3, #16]
    2310:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2314:	d1fa      	bne.n	230c <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    2316:	4b08      	ldr	r3, [pc, #32]	; (2338 <TIMER_0_init+0xa8>)
    2318:	2201      	movs	r2, #1
    231a:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    231c:	22fe      	movs	r2, #254	; 0xfe
    231e:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2320:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    2322:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    2326:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2328:	4b03      	ldr	r3, [pc, #12]	; (2338 <TIMER_0_init+0xa8>)
    232a:	691b      	ldr	r3, [r3, #16]
    232c:	f013 0f03 	tst.w	r3, #3
    2330:	d1fa      	bne.n	2328 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    2332:	2000      	movs	r0, #0
    2334:	4770      	bx	lr
    2336:	bf00      	nop
    2338:	43001800 	.word	0x43001800

0000233c <TIMER_task1_cb>:

volatile BLDC_ECAT_OUT* const BLDC_OUT =&ram_buffer[ram_wr_start];
volatile BLDC_ECAT_IN* const BLDC_IN =&ram_buffer[ram_rd_start];

static void TIMER_task1_cb(const struct timer_task *const timer_task)
{
    233c:	b510      	push	{r4, lr}
    233e:	b086      	sub	sp, #24
	triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <TIMER_task1_cb+0x3c>)
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	9305      	str	r3, [sp, #20]
    2346:	4b0d      	ldr	r3, [pc, #52]	; (237c <TIMER_task1_cb+0x40>)
    2348:	9304      	str	r3, [sp, #16]
    234a:	4b0d      	ldr	r3, [pc, #52]	; (2380 <TIMER_task1_cb+0x44>)
    234c:	9303      	str	r3, [sp, #12]
    234e:	4b0d      	ldr	r3, [pc, #52]	; (2384 <TIMER_task1_cb+0x48>)
    2350:	9302      	str	r3, [sp, #8]
    2352:	4b0d      	ldr	r3, [pc, #52]	; (2388 <TIMER_task1_cb+0x4c>)
    2354:	9301      	str	r3, [sp, #4]
    2356:	4b0d      	ldr	r3, [pc, #52]	; (238c <TIMER_task1_cb+0x50>)
    2358:	9300      	str	r3, [sp, #0]
    235a:	4b0d      	ldr	r3, [pc, #52]	; (2390 <TIMER_task1_cb+0x54>)
    235c:	4a0d      	ldr	r2, [pc, #52]	; (2394 <TIMER_task1_cb+0x58>)
    235e:	490e      	ldr	r1, [pc, #56]	; (2398 <TIMER_task1_cb+0x5c>)
    2360:	480e      	ldr	r0, [pc, #56]	; (239c <TIMER_task1_cb+0x60>)
    2362:	4c0f      	ldr	r4, [pc, #60]	; (23a0 <TIMER_task1_cb+0x64>)
    2364:	47a0      	blx	r4
	new_data = true;
    2366:	2201      	movs	r2, #1
    2368:	4b0e      	ldr	r3, [pc, #56]	; (23a4 <TIMER_task1_cb+0x68>)
    236a:	701a      	strb	r2, [r3, #0]
	timer_stop(&TIMER_1);
    236c:	480e      	ldr	r0, [pc, #56]	; (23a8 <TIMER_task1_cb+0x6c>)
    236e:	4b0f      	ldr	r3, [pc, #60]	; (23ac <TIMER_task1_cb+0x70>)
    2370:	4798      	blx	r3
};
    2372:	b006      	add	sp, #24
    2374:	bd10      	pop	{r4, pc}
    2376:	bf00      	nop
    2378:	20000a84 	.word	0x20000a84
    237c:	20000bfc 	.word	0x20000bfc
    2380:	20000dac 	.word	0x20000dac
    2384:	20000a2c 	.word	0x20000a2c
    2388:	20000b48 	.word	0x20000b48
    238c:	20000c58 	.word	0x20000c58
    2390:	20000cb0 	.word	0x20000cb0
    2394:	20000ba0 	.word	0x20000ba0
    2398:	20000e04 	.word	0x20000e04
    239c:	20000d08 	.word	0x20000d08
    23a0:	00003291 	.word	0x00003291
    23a4:	20000a28 	.word	0x20000a28
    23a8:	20000318 	.word	0x20000318
    23ac:	00000d85 	.word	0x00000d85

000023b0 <TIMER_init>:

void TIMER_init(uint16_t timer_interval)
{
    23b0:	b508      	push	{r3, lr}
	TIMER_task1.interval = timer_interval;
    23b2:	4905      	ldr	r1, [pc, #20]	; (23c8 <TIMER_init+0x18>)
    23b4:	6088      	str	r0, [r1, #8]
	TIMER_task1.cb       = TIMER_task1_cb;
    23b6:	4b05      	ldr	r3, [pc, #20]	; (23cc <TIMER_init+0x1c>)
    23b8:	60cb      	str	r3, [r1, #12]
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    23ba:	2301      	movs	r3, #1
    23bc:	740b      	strb	r3, [r1, #16]

	timer_add_task(&TIMER_1, &TIMER_task1);
    23be:	4804      	ldr	r0, [pc, #16]	; (23d0 <TIMER_init+0x20>)
    23c0:	4b04      	ldr	r3, [pc, #16]	; (23d4 <TIMER_init+0x24>)
    23c2:	4798      	blx	r3
    23c4:	bd08      	pop	{r3, pc}
    23c6:	bf00      	nop
    23c8:	20000304 	.word	0x20000304
    23cc:	0000233d 	.word	0x0000233d
    23d0:	20000318 	.word	0x20000318
    23d4:	00000dc1 	.word	0x00000dc1

000023d8 <SensorRowUpdate>:
	//timer_start(&TIMER_0);
};

void SensorRowUpdate(uint8_t row_select)
{
    23d8:	b570      	push	{r4, r5, r6, lr}
    23da:	b084      	sub	sp, #16
	switch(row_select){
    23dc:	2802      	cmp	r0, #2
    23de:	d02f      	beq.n	2440 <SensorRowUpdate+0x68>
    23e0:	2803      	cmp	r0, #3
    23e2:	d057      	beq.n	2494 <SensorRowUpdate+0xbc>
    23e4:	2801      	cmp	r0, #1
    23e6:	d001      	beq.n	23ec <SensorRowUpdate+0x14>
			neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 3;
			break;
		}
}
    23e8:	b004      	add	sp, #16
    23ea:	bd70      	pop	{r4, r5, r6, pc}
			BLDC_OUT->hall_bottom_x = sensor1.data.x; //data1,2,3
    23ec:	493e      	ldr	r1, [pc, #248]	; (24e8 <SensorRowUpdate+0x110>)
    23ee:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    23f0:	4c3e      	ldr	r4, [pc, #248]	; (24ec <SensorRowUpdate+0x114>)
    23f2:	62e3      	str	r3, [r4, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor1.data.y;
    23f4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    23f6:	6323      	str	r3, [r4, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor1.data.z;
    23f8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    23fa:	6363      	str	r3, [r4, #52]	; 0x34
			BLDC_OUT->hall_middle_x = sensor4.data.x; //data4,5,6
    23fc:	4a3c      	ldr	r2, [pc, #240]	; (24f0 <SensorRowUpdate+0x118>)
    23fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2400:	6163      	str	r3, [r4, #20]
			BLDC_OUT->hall_middle_y = sensor4.data.y;
    2402:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2404:	61a3      	str	r3, [r4, #24]
			BLDC_OUT->hall_middle_z = sensor4.data.z;
    2406:	6d53      	ldr	r3, [r2, #84]	; 0x54
    2408:	61e3      	str	r3, [r4, #28]
			BLDC_OUT->hall_top_x = sensor7.data.x; //data7,8,9
    240a:	4b3a      	ldr	r3, [pc, #232]	; (24f4 <SensorRowUpdate+0x11c>)
    240c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    240e:	6020      	str	r0, [r4, #0]
			BLDC_OUT->hall_top_y = sensor7.data.y;
    2410:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2412:	6060      	str	r0, [r4, #4]
			BLDC_OUT->hall_top_z = sensor7.data.z;
    2414:	6d58      	ldr	r0, [r3, #84]	; 0x54
    2416:	60a0      	str	r0, [r4, #8]
			mag_to_force(&sensorRow_Values_1, &sensor1, &sensor4, &sensor7);
    2418:	4d37      	ldr	r5, [pc, #220]	; (24f8 <SensorRowUpdate+0x120>)
    241a:	4628      	mov	r0, r5
    241c:	4e37      	ldr	r6, [pc, #220]	; (24fc <SensorRowUpdate+0x124>)
    241e:	47b0      	blx	r6
			neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
    2420:	4b37      	ldr	r3, [pc, #220]	; (2500 <SensorRowUpdate+0x128>)
    2422:	9302      	str	r3, [sp, #8]
    2424:	4b37      	ldr	r3, [pc, #220]	; (2504 <SensorRowUpdate+0x12c>)
    2426:	9301      	str	r3, [sp, #4]
    2428:	4b37      	ldr	r3, [pc, #220]	; (2508 <SensorRowUpdate+0x130>)
    242a:	9300      	str	r3, [sp, #0]
    242c:	4b37      	ldr	r3, [pc, #220]	; (250c <SensorRowUpdate+0x134>)
    242e:	4a38      	ldr	r2, [pc, #224]	; (2510 <SensorRowUpdate+0x138>)
    2430:	4938      	ldr	r1, [pc, #224]	; (2514 <SensorRowUpdate+0x13c>)
    2432:	4628      	mov	r0, r5
    2434:	4d38      	ldr	r5, [pc, #224]	; (2518 <SensorRowUpdate+0x140>)
    2436:	47a8      	blx	r5
			BLDC_OUT->hall_middle_temp = 1;
    2438:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    243c:	6223      	str	r3, [r4, #32]
			break;
    243e:	e7d3      	b.n	23e8 <SensorRowUpdate+0x10>
			BLDC_OUT->hall_bottom_x = sensor2.data.x; //data1,2,3
    2440:	4936      	ldr	r1, [pc, #216]	; (251c <SensorRowUpdate+0x144>)
    2442:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    2444:	4c29      	ldr	r4, [pc, #164]	; (24ec <SensorRowUpdate+0x114>)
    2446:	62e3      	str	r3, [r4, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor2.data.y;
    2448:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    244a:	6323      	str	r3, [r4, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor2.data.z;
    244c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    244e:	6363      	str	r3, [r4, #52]	; 0x34
			BLDC_OUT->hall_middle_x = sensor5.data.x; //data4,5,6
    2450:	4a33      	ldr	r2, [pc, #204]	; (2520 <SensorRowUpdate+0x148>)
    2452:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2454:	6163      	str	r3, [r4, #20]
			BLDC_OUT->hall_middle_y = sensor5.data.y;
    2456:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2458:	61a3      	str	r3, [r4, #24]
			BLDC_OUT->hall_middle_z = sensor5.data.z;
    245a:	6d53      	ldr	r3, [r2, #84]	; 0x54
    245c:	61e3      	str	r3, [r4, #28]
			BLDC_OUT->hall_top_x = sensor8.data.x; //data7,8,9
    245e:	4b31      	ldr	r3, [pc, #196]	; (2524 <SensorRowUpdate+0x14c>)
    2460:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    2462:	6020      	str	r0, [r4, #0]
			BLDC_OUT->hall_top_y = sensor8.data.y;
    2464:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2466:	6060      	str	r0, [r4, #4]
			BLDC_OUT->hall_top_z = sensor8.data.z;
    2468:	6d58      	ldr	r0, [r3, #84]	; 0x54
    246a:	60a0      	str	r0, [r4, #8]
			mag_to_force(&sensorRow_Values_1, &sensor2, &sensor5, &sensor8);
    246c:	4d22      	ldr	r5, [pc, #136]	; (24f8 <SensorRowUpdate+0x120>)
    246e:	4628      	mov	r0, r5
    2470:	4e22      	ldr	r6, [pc, #136]	; (24fc <SensorRowUpdate+0x124>)
    2472:	47b0      	blx	r6
			neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
    2474:	4b22      	ldr	r3, [pc, #136]	; (2500 <SensorRowUpdate+0x128>)
    2476:	9302      	str	r3, [sp, #8]
    2478:	4b22      	ldr	r3, [pc, #136]	; (2504 <SensorRowUpdate+0x12c>)
    247a:	9301      	str	r3, [sp, #4]
    247c:	4b22      	ldr	r3, [pc, #136]	; (2508 <SensorRowUpdate+0x130>)
    247e:	9300      	str	r3, [sp, #0]
    2480:	4b22      	ldr	r3, [pc, #136]	; (250c <SensorRowUpdate+0x134>)
    2482:	4a23      	ldr	r2, [pc, #140]	; (2510 <SensorRowUpdate+0x138>)
    2484:	4923      	ldr	r1, [pc, #140]	; (2514 <SensorRowUpdate+0x13c>)
    2486:	4628      	mov	r0, r5
    2488:	4d23      	ldr	r5, [pc, #140]	; (2518 <SensorRowUpdate+0x140>)
    248a:	47a8      	blx	r5
			BLDC_OUT->hall_middle_temp = 2;
    248c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2490:	6223      	str	r3, [r4, #32]
			break;
    2492:	e7a9      	b.n	23e8 <SensorRowUpdate+0x10>
			BLDC_OUT->hall_bottom_x = sensor3.data.x; //data1,2,3
    2494:	4924      	ldr	r1, [pc, #144]	; (2528 <SensorRowUpdate+0x150>)
    2496:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    2498:	4c14      	ldr	r4, [pc, #80]	; (24ec <SensorRowUpdate+0x114>)
    249a:	62e3      	str	r3, [r4, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor3.data.y;
    249c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    249e:	6323      	str	r3, [r4, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor3.data.z;
    24a0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    24a2:	6363      	str	r3, [r4, #52]	; 0x34
			BLDC_OUT->hall_middle_x = sensor6.data.x; //data4,5,6
    24a4:	4a21      	ldr	r2, [pc, #132]	; (252c <SensorRowUpdate+0x154>)
    24a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    24a8:	6163      	str	r3, [r4, #20]
			BLDC_OUT->hall_middle_y = sensor6.data.y;
    24aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
    24ac:	61a3      	str	r3, [r4, #24]
			BLDC_OUT->hall_middle_z = sensor6.data.z;
    24ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
    24b0:	61e3      	str	r3, [r4, #28]
			BLDC_OUT->hall_top_x = sensor9.data.x; //data7,8,9
    24b2:	4b1f      	ldr	r3, [pc, #124]	; (2530 <SensorRowUpdate+0x158>)
    24b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    24b6:	6020      	str	r0, [r4, #0]
			BLDC_OUT->hall_top_y = sensor9.data.y;
    24b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
    24ba:	6060      	str	r0, [r4, #4]
			BLDC_OUT->hall_top_z = sensor9.data.z;
    24bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    24be:	60a0      	str	r0, [r4, #8]
			mag_to_force(&sensorRow_Values_1, &sensor3, &sensor6, &sensor9);
    24c0:	4d0d      	ldr	r5, [pc, #52]	; (24f8 <SensorRowUpdate+0x120>)
    24c2:	4628      	mov	r0, r5
    24c4:	4e0d      	ldr	r6, [pc, #52]	; (24fc <SensorRowUpdate+0x124>)
    24c6:	47b0      	blx	r6
			neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
    24c8:	4b0d      	ldr	r3, [pc, #52]	; (2500 <SensorRowUpdate+0x128>)
    24ca:	9302      	str	r3, [sp, #8]
    24cc:	4b0d      	ldr	r3, [pc, #52]	; (2504 <SensorRowUpdate+0x12c>)
    24ce:	9301      	str	r3, [sp, #4]
    24d0:	4b0d      	ldr	r3, [pc, #52]	; (2508 <SensorRowUpdate+0x130>)
    24d2:	9300      	str	r3, [sp, #0]
    24d4:	4b0d      	ldr	r3, [pc, #52]	; (250c <SensorRowUpdate+0x134>)
    24d6:	4a0e      	ldr	r2, [pc, #56]	; (2510 <SensorRowUpdate+0x138>)
    24d8:	490e      	ldr	r1, [pc, #56]	; (2514 <SensorRowUpdate+0x13c>)
    24da:	4628      	mov	r0, r5
    24dc:	4d0e      	ldr	r5, [pc, #56]	; (2518 <SensorRowUpdate+0x140>)
    24de:	47a8      	blx	r5
			BLDC_OUT->hall_middle_temp = 3;
    24e0:	4b14      	ldr	r3, [pc, #80]	; (2534 <SensorRowUpdate+0x15c>)
    24e2:	6223      	str	r3, [r4, #32]
}
    24e4:	e780      	b.n	23e8 <SensorRowUpdate+0x10>
    24e6:	bf00      	nop
    24e8:	20000d08 	.word	0x20000d08
    24ec:	20000420 	.word	0x20000420
    24f0:	20000cb0 	.word	0x20000cb0
    24f4:	20000a2c 	.word	0x20000a2c
    24f8:	20000b24 	.word	0x20000b24
    24fc:	00003441 	.word	0x00003441
    2500:	2000098c 	.word	0x2000098c
    2504:	20000940 	.word	0x20000940
    2508:	20000ad8 	.word	0x20000ad8
    250c:	20000d60 	.word	0x20000d60
    2510:	200009dc 	.word	0x200009dc
    2514:	20000a88 	.word	0x20000a88
    2518:	000038cd 	.word	0x000038cd
    251c:	20000e04 	.word	0x20000e04
    2520:	20000c58 	.word	0x20000c58
    2524:	20000dac 	.word	0x20000dac
    2528:	20000ba0 	.word	0x20000ba0
    252c:	20000b48 	.word	0x20000b48
    2530:	20000bfc 	.word	0x20000bfc
    2534:	40400000 	.word	0x40400000

00002538 <main>:


int main(void)
{
    2538:	b580      	push	{r7, lr}
    253a:	b086      	sub	sp, #24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    253c:	4b2d      	ldr	r3, [pc, #180]	; (25f4 <main+0xbc>)
    253e:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    2540:	4b2d      	ldr	r3, [pc, #180]	; (25f8 <main+0xc0>)
    2542:	4798      	blx	r3
	
	//Initialize I2C communication
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    2544:	4e2d      	ldr	r6, [pc, #180]	; (25fc <main+0xc4>)
    2546:	4c2e      	ldr	r4, [pc, #184]	; (2600 <main+0xc8>)
    2548:	4631      	mov	r1, r6
    254a:	4620      	mov	r0, r4
    254c:	4b2d      	ldr	r3, [pc, #180]	; (2604 <main+0xcc>)
    254e:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    2550:	4620      	mov	r0, r4
    2552:	4b2d      	ldr	r3, [pc, #180]	; (2608 <main+0xd0>)
    2554:	4798      	blx	r3
    2556:	4c2d      	ldr	r4, [pc, #180]	; (260c <main+0xd4>)
    2558:	2540      	movs	r5, #64	; 0x40
    255a:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    255c:	61a5      	str	r5, [r4, #24]
	// for testing purposes
	gpio_set_pin_level(TRG,false);
	gpio_set_pin_level(TRG,true);
	
	// Initialize Sensor Array
	SensorArray_Init(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    255e:	6833      	ldr	r3, [r6, #0]
    2560:	9305      	str	r3, [sp, #20]
    2562:	4e2b      	ldr	r6, [pc, #172]	; (2610 <main+0xd8>)
    2564:	9604      	str	r6, [sp, #16]
    2566:	4b2b      	ldr	r3, [pc, #172]	; (2614 <main+0xdc>)
    2568:	9303      	str	r3, [sp, #12]
    256a:	4b2b      	ldr	r3, [pc, #172]	; (2618 <main+0xe0>)
    256c:	9302      	str	r3, [sp, #8]
    256e:	4b2b      	ldr	r3, [pc, #172]	; (261c <main+0xe4>)
    2570:	9301      	str	r3, [sp, #4]
    2572:	4b2b      	ldr	r3, [pc, #172]	; (2620 <main+0xe8>)
    2574:	9300      	str	r3, [sp, #0]
    2576:	4b2b      	ldr	r3, [pc, #172]	; (2624 <main+0xec>)
    2578:	4a2b      	ldr	r2, [pc, #172]	; (2628 <main+0xf0>)
    257a:	492c      	ldr	r1, [pc, #176]	; (262c <main+0xf4>)
    257c:	482c      	ldr	r0, [pc, #176]	; (2630 <main+0xf8>)
    257e:	4f2d      	ldr	r7, [pc, #180]	; (2634 <main+0xfc>)
    2580:	47b8      	blx	r7
	neuron_init(&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
    2582:	4b2d      	ldr	r3, [pc, #180]	; (2638 <main+0x100>)
    2584:	9301      	str	r3, [sp, #4]
    2586:	4b2d      	ldr	r3, [pc, #180]	; (263c <main+0x104>)
    2588:	9300      	str	r3, [sp, #0]
    258a:	4b2d      	ldr	r3, [pc, #180]	; (2640 <main+0x108>)
    258c:	4a2d      	ldr	r2, [pc, #180]	; (2644 <main+0x10c>)
    258e:	492e      	ldr	r1, [pc, #184]	; (2648 <main+0x110>)
    2590:	482e      	ldr	r0, [pc, #184]	; (264c <main+0x114>)
    2592:	4f2f      	ldr	r7, [pc, #188]	; (2650 <main+0x118>)
    2594:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2596:	6165      	str	r5, [r4, #20]

	gpio_set_pin_level(TRG,false);
	
	//Initialize ReadoutVariables
	new_data = false;
    2598:	2300      	movs	r3, #0
    259a:	4a2e      	ldr	r2, [pc, #184]	; (2654 <main+0x11c>)
    259c:	7013      	strb	r3, [r2, #0]
	triggered = false;
    259e:	4a2e      	ldr	r2, [pc, #184]	; (2658 <main+0x120>)
    25a0:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&sensor9);
    25a2:	4630      	mov	r0, r6
    25a4:	4b2d      	ldr	r3, [pc, #180]	; (265c <main+0x124>)
    25a6:	4798      	blx	r3
    25a8:	4b2d      	ldr	r3, [pc, #180]	; (2660 <main+0x128>)
    25aa:	8018      	strh	r0, [r3, #0]
	TIMER_init(wait_time);
    25ac:	4b2d      	ldr	r3, [pc, #180]	; (2664 <main+0x12c>)
    25ae:	4798      	blx	r3
	selected_row = 1; //1 = left, 2 = middle, 3 = right
    25b0:	2201      	movs	r2, #1
    25b2:	4b2d      	ldr	r3, [pc, #180]	; (2668 <main+0x130>)
    25b4:	701a      	strb	r2, [r3, #0]
    25b6:	e002      	b.n	25be <main+0x86>
			BLDC_OUT->hall_middle_temp = 0;
			triggerReadout_Prepare_Timer(50);
			timer_start(&TIMER_1);
			triggered = true;
		}
		if(new_data == true){	
    25b8:	4b26      	ldr	r3, [pc, #152]	; (2654 <main+0x11c>)
    25ba:	781b      	ldrb	r3, [r3, #0]
    25bc:	b983      	cbnz	r3, 25e0 <main+0xa8>
		if (triggered == false)	{
    25be:	4b26      	ldr	r3, [pc, #152]	; (2658 <main+0x120>)
    25c0:	781b      	ldrb	r3, [r3, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d1f8      	bne.n	25b8 <main+0x80>
			BLDC_OUT->hall_middle_temp = 0;
    25c6:	2200      	movs	r2, #0
    25c8:	4b28      	ldr	r3, [pc, #160]	; (266c <main+0x134>)
    25ca:	621a      	str	r2, [r3, #32]
			triggerReadout_Prepare_Timer(50);
    25cc:	2032      	movs	r0, #50	; 0x32
    25ce:	4b28      	ldr	r3, [pc, #160]	; (2670 <main+0x138>)
    25d0:	4798      	blx	r3
			timer_start(&TIMER_1);
    25d2:	4828      	ldr	r0, [pc, #160]	; (2674 <main+0x13c>)
    25d4:	4b28      	ldr	r3, [pc, #160]	; (2678 <main+0x140>)
    25d6:	4798      	blx	r3
			triggered = true;
    25d8:	2201      	movs	r2, #1
    25da:	4b1f      	ldr	r3, [pc, #124]	; (2658 <main+0x120>)
    25dc:	701a      	strb	r2, [r3, #0]
    25de:	e7eb      	b.n	25b8 <main+0x80>
			SensorRowUpdate(selected_row);
    25e0:	4b21      	ldr	r3, [pc, #132]	; (2668 <main+0x130>)
    25e2:	7818      	ldrb	r0, [r3, #0]
    25e4:	4b25      	ldr	r3, [pc, #148]	; (267c <main+0x144>)
    25e6:	4798      	blx	r3
			new_data = false; 
    25e8:	2300      	movs	r3, #0
    25ea:	4a1a      	ldr	r2, [pc, #104]	; (2654 <main+0x11c>)
    25ec:	7013      	strb	r3, [r2, #0]
			triggered = false;
    25ee:	4a1a      	ldr	r2, [pc, #104]	; (2658 <main+0x120>)
    25f0:	7013      	strb	r3, [r2, #0]
    25f2:	e7e4      	b.n	25be <main+0x86>
    25f4:	000002d1 	.word	0x000002d1
    25f8:	000007c5 	.word	0x000007c5
    25fc:	20000a84 	.word	0x20000a84
    2600:	20000364 	.word	0x20000364
    2604:	00000ad5 	.word	0x00000ad5
    2608:	00000ab9 	.word	0x00000ab9
    260c:	41008000 	.word	0x41008000
    2610:	20000bfc 	.word	0x20000bfc
    2614:	20000dac 	.word	0x20000dac
    2618:	20000a2c 	.word	0x20000a2c
    261c:	20000b48 	.word	0x20000b48
    2620:	20000c58 	.word	0x20000c58
    2624:	20000cb0 	.word	0x20000cb0
    2628:	20000ba0 	.word	0x20000ba0
    262c:	20000e04 	.word	0x20000e04
    2630:	20000d08 	.word	0x20000d08
    2634:	0000333d 	.word	0x0000333d
    2638:	2000098c 	.word	0x2000098c
    263c:	20000940 	.word	0x20000940
    2640:	20000ad8 	.word	0x20000ad8
    2644:	20000d60 	.word	0x20000d60
    2648:	200009dc 	.word	0x200009dc
    264c:	20000a88 	.word	0x20000a88
    2650:	00003881 	.word	0x00003881
    2654:	20000a28 	.word	0x20000a28
    2658:	20000c54 	.word	0x20000c54
    265c:	00002dc1 	.word	0x00002dc1
    2660:	20000bf8 	.word	0x20000bf8
    2664:	000023b1 	.word	0x000023b1
    2668:	200009d8 	.word	0x200009d8
    266c:	20000420 	.word	0x20000420
    2670:	0000325d 	.word	0x0000325d
    2674:	20000318 	.word	0x20000318
    2678:	00000d49 	.word	0x00000d49
    267c:	000023d9 	.word	0x000023d9

00002680 <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    2680:	3901      	subs	r1, #1
    2682:	2903      	cmp	r1, #3
    2684:	d805      	bhi.n	2692 <select_prefix+0x12>
    2686:	e8df f001 	tbb	[pc, r1]
    268a:	0602      	.short	0x0602
    268c:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    268e:	230c      	movs	r3, #12
    2690:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    2692:	7840      	ldrb	r0, [r0, #1]
    2694:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    2696:	2310      	movs	r3, #16
    2698:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    269a:	e7fa      	b.n	2692 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    269c:	2314      	movs	r3, #20
    269e:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    26a0:	e7f7      	b.n	2692 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    26a2:	2318      	movs	r3, #24
    26a4:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    26a6:	e7f4      	b.n	2692 <select_prefix+0x12>

000026a8 <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    26a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26aa:	b083      	sub	sp, #12
    26ac:	4606      	mov	r6, r0
    26ae:	4617      	mov	r7, r2
    26b0:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    26b2:	ab02      	add	r3, sp, #8
    26b4:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    26b8:	2201      	movs	r2, #1
    26ba:	4619      	mov	r1, r3
    26bc:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <i2c_m_sync_cmd_write_easy+0x40>)
    26be:	4798      	blx	r3
	if (ret != 1) {return -1;}
    26c0:	2801      	cmp	r0, #1
    26c2:	d10d      	bne.n	26e0 <i2c_m_sync_cmd_write_easy+0x38>
    26c4:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    26c6:	462a      	mov	r2, r5
    26c8:	4639      	mov	r1, r7
    26ca:	4630      	mov	r0, r6
    26cc:	4b07      	ldr	r3, [pc, #28]	; (26ec <i2c_m_sync_cmd_write_easy+0x44>)
    26ce:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    26d0:	42a8      	cmp	r0, r5
    26d2:	d102      	bne.n	26da <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    26d4:	4620      	mov	r0, r4
    26d6:	b003      	add	sp, #12
    26d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    26da:	f04f 34ff 	mov.w	r4, #4294967295
    26de:	e7f9      	b.n	26d4 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    26e0:	f04f 34ff 	mov.w	r4, #4294967295
    26e4:	e7f6      	b.n	26d4 <i2c_m_sync_cmd_write_easy+0x2c>
    26e6:	bf00      	nop
    26e8:	00000add 	.word	0x00000add
    26ec:	00000b11 	.word	0x00000b11

000026f0 <sendCommand>:
{
    26f0:	b530      	push	{r4, r5, lr}
    26f2:	b083      	sub	sp, #12
    26f4:	460d      	mov	r5, r1
    26f6:	4614      	mov	r4, r2
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    26f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    26fc:	7801      	ldrb	r1, [r0, #0]
    26fe:	4808      	ldr	r0, [pc, #32]	; (2720 <sendCommand+0x30>)
    2700:	4b08      	ldr	r3, [pc, #32]	; (2724 <sendCommand+0x34>)
    2702:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    2704:	2301      	movs	r3, #1
    2706:	aa01      	add	r2, sp, #4
    2708:	4629      	mov	r1, r5
    270a:	4620      	mov	r0, r4
    270c:	4c06      	ldr	r4, [pc, #24]	; (2728 <sendCommand+0x38>)
    270e:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2710:	2800      	cmp	r0, #0
    2712:	dd03      	ble.n	271c <sendCommand+0x2c>
  return buffer_answer[0];
    2714:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2718:	b003      	add	sp, #12
    271a:	bd30      	pop	{r4, r5, pc}
  if (ret < 1) {return STATUS_ERROR;}
    271c:	20ff      	movs	r0, #255	; 0xff
    271e:	e7fb      	b.n	2718 <sendCommand+0x28>
    2720:	20000364 	.word	0x20000364
    2724:	00000ac5 	.word	0x00000ac5
    2728:	000026a9 	.word	0x000026a9

0000272c <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    272c:	b570      	push	{r4, r5, r6, lr}
    272e:	b082      	sub	sp, #8
    2730:	4605      	mov	r5, r0
    2732:	461e      	mov	r6, r3
    2734:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    2738:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    273c:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    2740:	2202      	movs	r2, #2
    2742:	a901      	add	r1, sp, #4
    2744:	4b09      	ldr	r3, [pc, #36]	; (276c <i2c_m_sync_reg_read_easy+0x40>)
    2746:	4798      	blx	r3
	if (ret != 2) {return -1;}
    2748:	2802      	cmp	r0, #2
    274a:	d10c      	bne.n	2766 <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    274c:	4622      	mov	r2, r4
    274e:	4631      	mov	r1, r6
    2750:	4628      	mov	r0, r5
    2752:	4b07      	ldr	r3, [pc, #28]	; (2770 <i2c_m_sync_reg_read_easy+0x44>)
    2754:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    2756:	42a0      	cmp	r0, r4
    2758:	d102      	bne.n	2760 <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    275a:	2001      	movs	r0, #1
}
    275c:	b002      	add	sp, #8
    275e:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    2760:	f04f 30ff 	mov.w	r0, #4294967295
    2764:	e7fa      	b.n	275c <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    2766:	f04f 30ff 	mov.w	r0, #4294967295
    276a:	e7f7      	b.n	275c <i2c_m_sync_reg_read_easy+0x30>
    276c:	00000add 	.word	0x00000add
    2770:	00000b11 	.word	0x00000b11

00002774 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    2774:	b510      	push	{r4, lr}
    2776:	b082      	sub	sp, #8
    2778:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    277a:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    277e:	0a11      	lsrs	r1, r2, #8
    2780:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    2784:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    2788:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    278c:	2204      	movs	r2, #4
    278e:	eb0d 0102 	add.w	r1, sp, r2
    2792:	4b09      	ldr	r3, [pc, #36]	; (27b8 <i2c_m_sync_reg_write_easy+0x44>)
    2794:	4798      	blx	r3
	if (ret != 4) {return -1;}
    2796:	2804      	cmp	r0, #4
    2798:	d10b      	bne.n	27b2 <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    279a:	2201      	movs	r2, #1
    279c:	9904      	ldr	r1, [sp, #16]
    279e:	4620      	mov	r0, r4
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <i2c_m_sync_reg_write_easy+0x48>)
    27a2:	4798      	blx	r3
	if (ret != 1) {return -1;}
    27a4:	2801      	cmp	r0, #1
    27a6:	d101      	bne.n	27ac <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    27a8:	b002      	add	sp, #8
    27aa:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    27ac:	f04f 30ff 	mov.w	r0, #4294967295
    27b0:	e7fa      	b.n	27a8 <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    27b2:	f04f 30ff 	mov.w	r0, #4294967295
    27b6:	e7f7      	b.n	27a8 <i2c_m_sync_reg_write_easy+0x34>
    27b8:	00000add 	.word	0x00000add
    27bc:	00000b11 	.word	0x00000b11

000027c0 <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    27c0:	2308      	movs	r3, #8
    27c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    27c6:	4770      	bx	lr

000027c8 <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    27c8:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    27ca:	2200      	movs	r2, #0
    27cc:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    27ce:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    27d0:	4a0e      	ldr	r2, [pc, #56]	; (280c <initialize+0x44>)
    27d2:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    27d4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    27d8:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    27da:	4a0d      	ldr	r2, [pc, #52]	; (2810 <initialize+0x48>)
    27dc:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    27de:	4a0d      	ldr	r2, [pc, #52]	; (2814 <initialize+0x4c>)
    27e0:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    27e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27e6:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    27e8:	4a0b      	ldr	r2, [pc, #44]	; (2818 <initialize+0x50>)
    27ea:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    27ec:	4a0b      	ldr	r2, [pc, #44]	; (281c <initialize+0x54>)
    27ee:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    27f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    27f4:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    27f6:	4a0a      	ldr	r2, [pc, #40]	; (2820 <initialize+0x58>)
    27f8:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    27fa:	4a0a      	ldr	r2, [pc, #40]	; (2824 <initialize+0x5c>)
    27fc:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    27fe:	4a0a      	ldr	r2, [pc, #40]	; (2828 <initialize+0x60>)
    2800:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    2802:	4a0a      	ldr	r2, [pc, #40]	; (282c <initialize+0x64>)
    2804:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    2806:	4b0a      	ldr	r3, [pc, #40]	; (2830 <initialize+0x68>)
    2808:	4798      	blx	r3
    280a:	bd08      	pop	{r3, pc}
    280c:	40a00000 	.word	0x40a00000
    2810:	40400000 	.word	0x40400000
    2814:	40200000 	.word	0x40200000
    2818:	3fd55555 	.word	0x3fd55555
    281c:	3faaaaab 	.word	0x3faaaaab
    2820:	3e48b439 	.word	0x3e48b439
    2824:	3ea1cac1 	.word	0x3ea1cac1
    2828:	3e19999a 	.word	0x3e19999a
    282c:	3e77ced9 	.word	0x3e77ced9
    2830:	000027c1 	.word	0x000027c1

00002834 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    2834:	2301      	movs	r3, #1
    2836:	fa03 f101 	lsl.w	r1, r3, r1
    283a:	f001 0108 	and.w	r1, r1, #8
    283e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    2842:	4319      	orrs	r1, r3
    2844:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2848:	4770      	bx	lr

0000284a <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    284a:	2902      	cmp	r1, #2
    284c:	d80c      	bhi.n	2868 <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    284e:	f101 031c 	add.w	r3, r1, #28
    2852:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    2856:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    2858:	2301      	movs	r3, #1
    285a:	408b      	lsls	r3, r1
    285c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    2860:	ea21 0103 	bic.w	r1, r1, r3
    2864:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2868:	4770      	bx	lr
	...

0000286c <readRegister>:
{
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	b085      	sub	sp, #20
    2870:	4604      	mov	r4, r0
    2872:	460d      	mov	r5, r1
    2874:	4617      	mov	r7, r2
    2876:	461e      	mov	r6, r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2878:	f44f 6200 	mov.w	r2, #2048	; 0x800
    287c:	7801      	ldrb	r1, [r0, #0]
    287e:	4810      	ldr	r0, [pc, #64]	; (28c0 <readRegister+0x54>)
    2880:	4b10      	ldr	r3, [pc, #64]	; (28c4 <readRegister+0x58>)
    2882:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    2884:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    2886:	2303      	movs	r3, #3
    2888:	9300      	str	r3, [sp, #0]
    288a:	ab03      	add	r3, sp, #12
    288c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    2890:	2150      	movs	r1, #80	; 0x50
    2892:	4630      	mov	r0, r6
    2894:	4e0c      	ldr	r6, [pc, #48]	; (28c8 <readRegister+0x5c>)
    2896:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    2898:	2800      	cmp	r0, #0
    289a:	dc03      	bgt.n	28a4 <readRegister+0x38>
    289c:	26ff      	movs	r6, #255	; 0xff
}
    289e:	4630      	mov	r0, r6
    28a0:	b005      	add	sp, #20
    28a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    28a4:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    28a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    28ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    28b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    28b4:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    28b6:	4629      	mov	r1, r5
    28b8:	4620      	mov	r0, r4
    28ba:	4b04      	ldr	r3, [pc, #16]	; (28cc <readRegister+0x60>)
    28bc:	4798      	blx	r3
  return status;
    28be:	e7ee      	b.n	289e <readRegister+0x32>
    28c0:	20000364 	.word	0x20000364
    28c4:	00000ac5 	.word	0x00000ac5
    28c8:	0000272d 	.word	0x0000272d
    28cc:	0000284b 	.word	0x0000284b

000028d0 <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    28d0:	b538      	push	{r3, r4, r5, lr}
    28d2:	4604      	mov	r4, r0
    28d4:	460d      	mov	r5, r1
  cache_invalidate(hall_sensor);
    28d6:	4b06      	ldr	r3, [pc, #24]	; (28f0 <reset+0x20>)
    28d8:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, io);
    28da:	462a      	mov	r2, r5
    28dc:	21f0      	movs	r1, #240	; 0xf0
    28de:	4620      	mov	r0, r4
    28e0:	4b04      	ldr	r3, [pc, #16]	; (28f4 <reset+0x24>)
    28e2:	4798      	blx	r3
    28e4:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    28e6:	2003      	movs	r0, #3
    28e8:	4b03      	ldr	r3, [pc, #12]	; (28f8 <reset+0x28>)
    28ea:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    28ec:	4620      	mov	r0, r4
    28ee:	bd38      	pop	{r3, r4, r5, pc}
    28f0:	000027c1 	.word	0x000027c1
    28f4:	000026f1 	.word	0x000026f1
    28f8:	000009f9 	.word	0x000009f9

000028fc <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    28fc:	b508      	push	{r3, lr}
  return sendCommand(hall_sensor, CMD_EXIT, io);
    28fe:	460a      	mov	r2, r1
    2900:	2180      	movs	r1, #128	; 0x80
    2902:	4b01      	ldr	r3, [pc, #4]	; (2908 <exit_command+0xc>)
    2904:	4798      	blx	r3
  delay_ms(2);
}
    2906:	bd08      	pop	{r3, pc}
    2908:	000026f1 	.word	0x000026f1

0000290c <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct io_descriptor *io)
{
    290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2910:	b084      	sub	sp, #16
    2912:	4605      	mov	r5, r0
    2914:	460c      	mov	r4, r1
    2916:	4690      	mov	r8, r2
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    2918:	f001 060f 	and.w	r6, r1, #15
    291c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2920:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2924:	7801      	ldrb	r1, [r0, #0]
    2926:	483d      	ldr	r0, [pc, #244]	; (2a1c <readMeasurement+0x110>)
    2928:	4b3d      	ldr	r3, [pc, #244]	; (2a20 <readMeasurement+0x114>)
    292a:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    292c:	f014 0908 	ands.w	r9, r4, #8
    2930:	d05b      	beq.n	29ea <readMeasurement+0xde>
    2932:	2302      	movs	r3, #2
    2934:	f014 0a04 	ands.w	sl, r4, #4
    2938:	d059      	beq.n	29ee <readMeasurement+0xe2>
    293a:	2202      	movs	r2, #2
    293c:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    293e:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    2942:	443b      	add	r3, r7
    2944:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    2946:	f014 0401 	ands.w	r4, r4, #1
    294a:	d052      	beq.n	29f2 <readMeasurement+0xe6>
    294c:	2302      	movs	r3, #2
    294e:	4413      	add	r3, r2
    2950:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    2952:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    2954:	b2db      	uxtb	r3, r3
    2956:	aa01      	add	r2, sp, #4
    2958:	4631      	mov	r1, r6
    295a:	4640      	mov	r0, r8
    295c:	4e31      	ldr	r6, [pc, #196]	; (2a24 <readMeasurement+0x118>)
    295e:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    2960:	2800      	cmp	r0, #0
    2962:	dd59      	ble.n	2a18 <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    2964:	2c00      	cmp	r4, #0
    2966:	d046      	beq.n	29f6 <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    2968:	f89d 2005 	ldrb.w	r2, [sp, #5]
    296c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2974:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    2978:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    297a:	2f00      	cmp	r7, #0
    297c:	d040      	beq.n	2a00 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    297e:	aa04      	add	r2, sp, #16
    2980:	441a      	add	r2, r3
    2982:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    2986:	1c59      	adds	r1, r3, #1
    2988:	aa04      	add	r2, sp, #16
    298a:	4411      	add	r1, r2
    298c:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    2990:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2994:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    2998:	3302      	adds	r3, #2
    299a:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    299c:	f1ba 0f00 	cmp.w	sl, #0
    29a0:	d032      	beq.n	2a08 <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    29a2:	aa04      	add	r2, sp, #16
    29a4:	441a      	add	r2, r3
    29a6:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    29aa:	1c59      	adds	r1, r3, #1
    29ac:	aa04      	add	r2, sp, #16
    29ae:	4411      	add	r1, r2
    29b0:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    29b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    29b8:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    29bc:	3302      	adds	r3, #2
    29be:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    29c0:	f1b9 0f00 	cmp.w	r9, #0
    29c4:	d024      	beq.n	2a10 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    29c6:	aa04      	add	r2, sp, #16
    29c8:	441a      	add	r2, r3
    29ca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    29ce:	3301      	adds	r3, #1
    29d0:	a904      	add	r1, sp, #16
    29d2:	440b      	add	r3, r1
    29d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    29d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    29dc:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    29e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    29e4:	b004      	add	sp, #16
    29e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    29ea:	2300      	movs	r3, #0
    29ec:	e7a2      	b.n	2934 <readMeasurement+0x28>
    29ee:	2200      	movs	r2, #0
    29f0:	e7a4      	b.n	293c <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    29f2:	2300      	movs	r3, #0
    29f4:	e7ab      	b.n	294e <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    29f6:	2300      	movs	r3, #0
    29f8:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    29fc:	2301      	movs	r3, #1
    29fe:	e7bc      	b.n	297a <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    2a00:	2200      	movs	r2, #0
    2a02:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    2a06:	e7c9      	b.n	299c <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    2a08:	2200      	movs	r2, #0
    2a0a:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    2a0e:	e7d7      	b.n	29c0 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    2a10:	2300      	movs	r3, #0
    2a12:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    2a16:	e7e3      	b.n	29e0 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    2a18:	20ff      	movs	r0, #255	; 0xff
    2a1a:	e7e3      	b.n	29e4 <readMeasurement+0xd8>
    2a1c:	20000364 	.word	0x20000364
    2a20:	00000ac5 	.word	0x00000ac5
    2a24:	000026a9 	.word	0x000026a9

00002a28 <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    2a28:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    2a2a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    2a2c:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    2a30:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    2a34:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    2a36:	f3c1 1147 	ubfx	r1, r1, #5, #8
    2a3a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    2a3e:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    2a42:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    2a46:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    2a48:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    2a4a:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    2a4e:	2a0c      	cmp	r2, #12
    2a50:	f000 809d 	beq.w	2b8e <convertRaw+0x166>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    2a54:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    2a58:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    2a5c:	3302      	adds	r3, #2
    2a5e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2a62:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    2a66:	2c00      	cmp	r4, #0
    2a68:	f000 8096 	beq.w	2b98 <convertRaw+0x170>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2a6c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2a70:	ee06 3a90 	vmov	s13, r3
    2a74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    2a78:	eddf 7acb 	vldr	s15, [pc, #812]	; 2da8 <convertRaw+0x380>
    2a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    2a80:	ee65 6a26 	vmul.f32	s13, s10, s13
    2a84:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    2a88:	2201      	movs	r2, #1
    2a8a:	fa02 f101 	lsl.w	r1, r2, r1
    2a8e:	ee07 1a90 	vmov	s15, r1
    2a92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    2a96:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2a9a:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    2a9e:	2c00      	cmp	r4, #0
    2aa0:	f000 80ca 	beq.w	2c38 <convertRaw+0x210>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2aa4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2aa8:	ee07 3a10 	vmov	s14, r3
    2aac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2ab0:	eddf 7abd 	vldr	s15, [pc, #756]	; 2da8 <convertRaw+0x380>
    2ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
    2ab8:	ee25 7a07 	vmul.f32	s14, s10, s14
    2abc:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    2ac0:	2301      	movs	r3, #1
    2ac2:	40b3      	lsls	r3, r6
    2ac4:	ee07 3a90 	vmov	s15, r3
    2ac8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2acc:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2ad0:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    2ad4:	2c00      	cmp	r4, #0
    2ad6:	f000 80fd 	beq.w	2cd4 <convertRaw+0x2ac>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2ada:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2ade:	ee07 3a90 	vmov	s15, r3
    2ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ae6:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 2da8 <convertRaw+0x380>
    2aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2aee:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2af2:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    2af6:	2301      	movs	r3, #1
    2af8:	fa03 f505 	lsl.w	r5, r3, r5
    2afc:	ee07 5a10 	vmov	s14, r5
    2b00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2b04:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2b08:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    2b0c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2b10:	ee07 3a90 	vmov	s15, r3
    2b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b18:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 2dac <convertRaw+0x384>
    2b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2b20:	eddf 6aa3 	vldr	s13, [pc, #652]	; 2db0 <convertRaw+0x388>
    2b24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2b28:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    2b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
    2b30:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    2b34:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    2b38:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 2db4 <convertRaw+0x38c>
    2b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b44:	f340 8116 	ble.w	2d74 <convertRaw+0x34c>
  {
	  hall_sensor->data.x = 50000;
    2b48:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    2b4c:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    2b50:	ed9f 7a98 	vldr	s14, [pc, #608]	; 2db4 <convertRaw+0x38c>
    2b54:	eef4 7ac7 	vcmpe.f32	s15, s14
    2b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b5c:	f340 8115 	ble.w	2d8a <convertRaw+0x362>
    {
	    hall_sensor->data.y = 50000;
    2b60:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.y < -50000)
	    {
		    hall_sensor->data.y = -50000;
	    }
    }
    if (hall_sensor->data.z > 50000)
    2b64:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
    2b68:	ed9f 7a92 	vldr	s14, [pc, #584]	; 2db4 <convertRaw+0x38c>
    2b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b74:	f300 8114 	bgt.w	2da0 <convertRaw+0x378>
    {
	    hall_sensor->data.z = 50000;
    }
    else
    {
	    if (hall_sensor->data.z < -50000)
    2b78:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 2db8 <convertRaw+0x390>
    2b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b84:	f140 810e 	bpl.w	2da4 <convertRaw+0x37c>
	    {
		    hall_sensor->data.z = -50000;
    2b88:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	    }
    }
}
    2b8c:	e10a      	b.n	2da4 <convertRaw+0x37c>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    2b8e:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    2b92:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    2b96:	e761      	b.n	2a5c <convertRaw+0x34>
    switch(res_x){
    2b98:	2903      	cmp	r1, #3
    2b9a:	d880      	bhi.n	2a9e <convertRaw+0x76>
    2b9c:	e8df f001 	tbb	[pc, r1]
    2ba0:	32180202 	.word	0x32180202
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    2ba4:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    2ba8:	ee07 3a90 	vmov	s15, r3
    2bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2bb0:	ee67 7a85 	vmul.f32	s15, s15, s10
    2bb4:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2bb8:	2301      	movs	r3, #1
    2bba:	fa03 f101 	lsl.w	r1, r3, r1
    2bbe:	ee07 1a90 	vmov	s15, r1
    2bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
    2bca:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2bce:	e766      	b.n	2a9e <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2bd0:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2bd4:	ee07 3a90 	vmov	s15, r3
    2bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2bdc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 2da8 <convertRaw+0x380>
    2be0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2be4:	ee65 7a27 	vmul.f32	s15, s10, s15
    2be8:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2bec:	2301      	movs	r3, #1
    2bee:	fa03 f101 	lsl.w	r1, r3, r1
    2bf2:	ee07 1a10 	vmov	s14, r1
    2bf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2bfe:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2c02:	e74c      	b.n	2a9e <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2c04:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2c08:	ee07 3a90 	vmov	s15, r3
    2c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c10:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 2dbc <convertRaw+0x394>
    2c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2c18:	ee65 7a27 	vmul.f32	s15, s10, s15
    2c1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2c20:	2301      	movs	r3, #1
    2c22:	fa03 f101 	lsl.w	r1, r3, r1
    2c26:	ee07 1a10 	vmov	s14, r1
    2c2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2c32:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2c36:	e732      	b.n	2a9e <convertRaw+0x76>
    switch(res_y){
    2c38:	2e03      	cmp	r6, #3
    2c3a:	f63f af4b 	bhi.w	2ad4 <convertRaw+0xac>
    2c3e:	e8df f006 	tbb	[pc, r6]
    2c42:	0202      	.short	0x0202
    2c44:	3017      	.short	0x3017
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    2c46:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    2c4a:	ee07 3a10 	vmov	s14, r3
    2c4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2c52:	ee27 7a05 	vmul.f32	s14, s14, s10
    2c56:	ee25 5a87 	vmul.f32	s10, s11, s14
    2c5a:	2301      	movs	r3, #1
    2c5c:	40b3      	lsls	r3, r6
    2c5e:	ee07 3a90 	vmov	s15, r3
    2c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2c66:	ee27 7a05 	vmul.f32	s14, s14, s10
    2c6a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2c6e:	e731      	b.n	2ad4 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2c70:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2c74:	ee07 3a10 	vmov	s14, r3
    2c78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2c7c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 2da8 <convertRaw+0x380>
    2c80:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c84:	ee25 7a07 	vmul.f32	s14, s10, s14
    2c88:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    2c8c:	2301      	movs	r3, #1
    2c8e:	40b3      	lsls	r3, r6
    2c90:	ee07 3a90 	vmov	s15, r3
    2c94:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2c98:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2c9c:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2ca0:	e718      	b.n	2ad4 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2ca2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2ca6:	ee07 3a10 	vmov	s14, r3
    2caa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2cae:	eddf 7a43 	vldr	s15, [pc, #268]	; 2dbc <convertRaw+0x394>
    2cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
    2cb6:	ee25 7a07 	vmul.f32	s14, s10, s14
    2cba:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    2cbe:	2301      	movs	r3, #1
    2cc0:	40b3      	lsls	r3, r6
    2cc2:	ee07 3a90 	vmov	s15, r3
    2cc6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2cca:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2cce:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2cd2:	e6ff      	b.n	2ad4 <convertRaw+0xac>
    switch(res_z){
    2cd4:	2d03      	cmp	r5, #3
    2cd6:	f63f af19 	bhi.w	2b0c <convertRaw+0xe4>
    2cda:	e8df f005 	tbb	[pc, r5]
    2cde:	0202      	.short	0x0202
    2ce0:	3117      	.short	0x3117
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2ce2:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2ce6:	ee07 3a90 	vmov	s15, r3
    2cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2cee:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2cf2:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2cf6:	2301      	movs	r3, #1
    2cf8:	40ab      	lsls	r3, r5
    2cfa:	ee07 3a90 	vmov	s15, r3
    2cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d02:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2d06:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2d0a:	e6ff      	b.n	2b0c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2d0c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2d10:	ee07 3a90 	vmov	s15, r3
    2d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d18:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2da8 <convertRaw+0x380>
    2d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2d20:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2d24:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2d28:	2301      	movs	r3, #1
    2d2a:	fa03 f505 	lsl.w	r5, r3, r5
    2d2e:	ee07 5a10 	vmov	s14, r5
    2d32:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2d36:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2d3a:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2d3e:	e6e5      	b.n	2b0c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2d40:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2d44:	ee07 3a90 	vmov	s15, r3
    2d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d4c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 2dbc <convertRaw+0x394>
    2d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2d54:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2d58:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2d5c:	2301      	movs	r3, #1
    2d5e:	fa03 f505 	lsl.w	r5, r3, r5
    2d62:	ee07 5a10 	vmov	s14, r5
    2d66:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2d6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2d6e:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2d72:	e6cb      	b.n	2b0c <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    2d74:	ed9f 7a10 	vldr	s14, [pc, #64]	; 2db8 <convertRaw+0x390>
    2d78:	eef4 7ac7 	vcmpe.f32	s15, s14
    2d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d80:	f57f aee4 	bpl.w	2b4c <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    2d84:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2d88:	e6e0      	b.n	2b4c <convertRaw+0x124>
	    if (hall_sensor->data.y < -50000)
    2d8a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2db8 <convertRaw+0x390>
    2d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
    2d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d96:	f57f aee5 	bpl.w	2b64 <convertRaw+0x13c>
		    hall_sensor->data.y = -50000;
    2d9a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    2d9e:	e6e1      	b.n	2b64 <convertRaw+0x13c>
	    hall_sensor->data.z = 50000;
    2da0:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
}
    2da4:	bc70      	pop	{r4, r5, r6}
    2da6:	4770      	bx	lr
    2da8:	47000000 	.word	0x47000000
    2dac:	4734a400 	.word	0x4734a400
    2db0:	4234cccd 	.word	0x4234cccd
    2db4:	47435000 	.word	0x47435000
    2db8:	c7435000 	.word	0xc7435000
    2dbc:	46800000 	.word	0x46800000

00002dc0 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    2dc0:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    2dc2:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2dc4:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    2dc8:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    2dcc:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    2dd0:	2201      	movs	r2, #1
    2dd2:	408a      	lsls	r2, r1
    2dd4:	3202      	adds	r2, #2
    2dd6:	409a      	lsls	r2, r3
    2dd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2ddc:	0193      	lsls	r3, r2, #6
    2dde:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    2de2:	23c0      	movs	r3, #192	; 0xc0
    2de4:	40a3      	lsls	r3, r4
    2de6:	3343      	adds	r3, #67	; 0x43
    2de8:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    2dea:	4b05      	ldr	r3, [pc, #20]	; (2e00 <convDelayMicro+0x40>)
    2dec:	fba3 3000 	umull	r3, r0, r3, r0
    2df0:	f3c0 104f 	ubfx	r0, r0, #5, #16
    2df4:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    2df6:	b280      	uxth	r0, r0
    2df8:	f85d 4b04 	ldr.w	r4, [sp], #4
    2dfc:	4770      	bx	lr
    2dfe:	bf00      	nop
    2e00:	51eb851f 	.word	0x51eb851f

00002e04 <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    2e04:	0900      	lsrs	r0, r0, #4
    2e06:	f080 0001 	eor.w	r0, r0, #1
}
    2e0a:	f000 0001 	and.w	r0, r0, #1
    2e0e:	4770      	bx	lr

00002e10 <writeRegister>:
{
    2e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e12:	b085      	sub	sp, #20
    2e14:	4605      	mov	r5, r0
    2e16:	460e      	mov	r6, r1
    2e18:	4617      	mov	r7, r2
    2e1a:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    2e1c:	4b12      	ldr	r3, [pc, #72]	; (2e68 <writeRegister+0x58>)
    2e1e:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2e24:	7829      	ldrb	r1, [r5, #0]
    2e26:	4811      	ldr	r0, [pc, #68]	; (2e6c <writeRegister+0x5c>)
    2e28:	4b11      	ldr	r3, [pc, #68]	; (2e70 <writeRegister+0x60>)
    2e2a:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    2e2c:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    2e2e:	aa03      	add	r2, sp, #12
    2e30:	9200      	str	r2, [sp, #0]
    2e32:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2e36:	463a      	mov	r2, r7
    2e38:	2160      	movs	r1, #96	; 0x60
    2e3a:	4620      	mov	r0, r4
    2e3c:	4c0d      	ldr	r4, [pc, #52]	; (2e74 <writeRegister+0x64>)
    2e3e:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2e40:	2800      	cmp	r0, #0
    2e42:	dd0e      	ble.n	2e62 <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    2e44:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    2e48:	4620      	mov	r0, r4
    2e4a:	4b0b      	ldr	r3, [pc, #44]	; (2e78 <writeRegister+0x68>)
    2e4c:	4798      	blx	r3
    2e4e:	b908      	cbnz	r0, 2e54 <writeRegister+0x44>
  return status;
    2e50:	4620      	mov	r0, r4
    2e52:	e007      	b.n	2e64 <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    2e54:	463a      	mov	r2, r7
    2e56:	4631      	mov	r1, r6
    2e58:	4628      	mov	r0, r5
    2e5a:	4b08      	ldr	r3, [pc, #32]	; (2e7c <writeRegister+0x6c>)
    2e5c:	4798      	blx	r3
  return status;
    2e5e:	4620      	mov	r0, r4
    2e60:	e000      	b.n	2e64 <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    2e62:	20ff      	movs	r0, #255	; 0xff
}
    2e64:	b005      	add	sp, #20
    2e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e68:	00002835 	.word	0x00002835
    2e6c:	20000364 	.word	0x20000364
    2e70:	00000ac5 	.word	0x00000ac5
    2e74:	00002775 	.word	0x00002775
    2e78:	00002e05 	.word	0x00002e05
    2e7c:	0000284b 	.word	0x0000284b

00002e80 <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    2e80:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2e84:	4770      	bx	lr
	...

00002e88 <cache_fill>:
  if (hall_sensor->cache.dirty != 0) {
    2e88:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    2e8c:	b30a      	cbz	r2, 2ed2 <cache_fill+0x4a>
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct io_descriptor *io) {
    2e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e90:	460e      	mov	r6, r1
    2e92:	4605      	mov	r5, r0
    2e94:	2400      	movs	r4, #0
    2e96:	e001      	b.n	2e9c <cache_fill+0x14>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    2e98:	3401      	adds	r4, #1
    2e9a:	b2e4      	uxtb	r4, r4
    2e9c:	2c02      	cmp	r4, #2
    2e9e:	d815      	bhi.n	2ecc <cache_fill+0x44>
      if (hall_sensor->cache.dirty & (1 << address)){
    2ea0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2ea4:	4123      	asrs	r3, r4
    2ea6:	f013 0f01 	tst.w	r3, #1
    2eaa:	d0f5      	beq.n	2e98 <cache_fill+0x10>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]), io))) {
    2eac:	f104 021c 	add.w	r2, r4, #28
    2eb0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2eb4:	4633      	mov	r3, r6
    2eb6:	3202      	adds	r2, #2
    2eb8:	4621      	mov	r1, r4
    2eba:	4628      	mov	r0, r5
    2ebc:	4f06      	ldr	r7, [pc, #24]	; (2ed8 <cache_fill+0x50>)
    2ebe:	47b8      	blx	r7
    2ec0:	4b06      	ldr	r3, [pc, #24]	; (2edc <cache_fill+0x54>)
    2ec2:	4798      	blx	r3
    2ec4:	2800      	cmp	r0, #0
    2ec6:	d0e7      	beq.n	2e98 <cache_fill+0x10>
          return STATUS_ERROR;
    2ec8:	22ff      	movs	r2, #255	; 0xff
    2eca:	e000      	b.n	2ece <cache_fill+0x46>
  return STATUS_OK;
    2ecc:	2200      	movs	r2, #0
}
    2ece:	4610      	mov	r0, r2
    2ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed2:	4610      	mov	r0, r2
    2ed4:	4770      	bx	lr
    2ed6:	bf00      	nop
    2ed8:	0000286d 	.word	0x0000286d
    2edc:	00002e81 	.word	0x00002e81

00002ee0 <startMeasurement>:
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	4606      	mov	r6, r0
    2ee4:	460c      	mov	r4, r1
    2ee6:	4615      	mov	r5, r2
  cache_fill(hall_sensor, io);
    2ee8:	4611      	mov	r1, r2
    2eea:	4b05      	ldr	r3, [pc, #20]	; (2f00 <startMeasurement+0x20>)
    2eec:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    2eee:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, io);
    2ef2:	462a      	mov	r2, r5
    2ef4:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2ef8:	4630      	mov	r0, r6
    2efa:	4b02      	ldr	r3, [pc, #8]	; (2f04 <startMeasurement+0x24>)
    2efc:	4798      	blx	r3
}
    2efe:	bd70      	pop	{r4, r5, r6, pc}
    2f00:	00002e89 	.word	0x00002e89
    2f04:	000026f1 	.word	0x000026f1

00002f08 <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    2f08:	f010 0f10 	tst.w	r0, #16
    2f0c:	d001      	beq.n	2f12 <checkStatus+0xa>
    2f0e:	20ff      	movs	r0, #255	; 0xff
    2f10:	4770      	bx	lr
    2f12:	2000      	movs	r0, #0
    2f14:	4770      	bx	lr
	...

00002f18 <setGainSel>:
{
    2f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f1c:	b082      	sub	sp, #8
    2f1e:	4607      	mov	r7, r0
    2f20:	4688      	mov	r8, r1
    2f22:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2f24:	2400      	movs	r4, #0
    2f26:	aa02      	add	r2, sp, #8
    2f28:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, io);
    2f2c:	462b      	mov	r3, r5
    2f2e:	4621      	mov	r1, r4
    2f30:	4e0f      	ldr	r6, [pc, #60]	; (2f70 <setGainSel+0x58>)
    2f32:	47b0      	blx	r6
    2f34:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), io);
    2f36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2f3e:	b212      	sxth	r2, r2
    2f40:	ea4f 1808 	mov.w	r8, r8, lsl #4
    2f44:	f008 0870 	and.w	r8, r8, #112	; 0x70
    2f48:	ea42 0208 	orr.w	r2, r2, r8
    2f4c:	462b      	mov	r3, r5
    2f4e:	b292      	uxth	r2, r2
    2f50:	4621      	mov	r1, r4
    2f52:	4638      	mov	r0, r7
    2f54:	4c07      	ldr	r4, [pc, #28]	; (2f74 <setGainSel+0x5c>)
    2f56:	47a0      	blx	r4
    2f58:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2f5a:	4630      	mov	r0, r6
    2f5c:	4d06      	ldr	r5, [pc, #24]	; (2f78 <setGainSel+0x60>)
    2f5e:	47a8      	blx	r5
    2f60:	4604      	mov	r4, r0
    2f62:	4638      	mov	r0, r7
    2f64:	47a8      	blx	r5
    2f66:	4320      	orrs	r0, r4
}
    2f68:	b2c0      	uxtb	r0, r0
    2f6a:	b002      	add	sp, #8
    2f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f70:	0000286d 	.word	0x0000286d
    2f74:	00002e11 	.word	0x00002e11
    2f78:	00002f09 	.word	0x00002f09

00002f7c <setResolution>:
{
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	b083      	sub	sp, #12
    2f80:	4605      	mov	r5, r0
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    2f82:	011b      	lsls	r3, r3, #4
    2f84:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2f88:	0092      	lsls	r2, r2, #2
    2f8a:	f002 020c 	and.w	r2, r2, #12
    2f8e:	431a      	orrs	r2, r3
    2f90:	f001 0103 	and.w	r1, r1, #3
    2f94:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    2f98:	aa02      	add	r2, sp, #8
    2f9a:	2300      	movs	r3, #0
    2f9c:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, io);
    2fa0:	9b08      	ldr	r3, [sp, #32]
    2fa2:	2102      	movs	r1, #2
    2fa4:	4e0d      	ldr	r6, [pc, #52]	; (2fdc <setResolution+0x60>)
    2fa6:	47b0      	blx	r6
    2fa8:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), io);
    2faa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2fae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2fb2:	b212      	sxth	r2, r2
    2fb4:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2fb8:	9b08      	ldr	r3, [sp, #32]
    2fba:	b292      	uxth	r2, r2
    2fbc:	2102      	movs	r1, #2
    2fbe:	4628      	mov	r0, r5
    2fc0:	4c07      	ldr	r4, [pc, #28]	; (2fe0 <setResolution+0x64>)
    2fc2:	47a0      	blx	r4
    2fc4:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2fc6:	4638      	mov	r0, r7
    2fc8:	4d06      	ldr	r5, [pc, #24]	; (2fe4 <setResolution+0x68>)
    2fca:	47a8      	blx	r5
    2fcc:	4604      	mov	r4, r0
    2fce:	4630      	mov	r0, r6
    2fd0:	47a8      	blx	r5
    2fd2:	4320      	orrs	r0, r4
}
    2fd4:	b2c0      	uxtb	r0, r0
    2fd6:	b003      	add	sp, #12
    2fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fda:	bf00      	nop
    2fdc:	0000286d 	.word	0x0000286d
    2fe0:	00002e11 	.word	0x00002e11
    2fe4:	00002f09 	.word	0x00002f09

00002fe8 <setOverSampling>:
{
    2fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fea:	b083      	sub	sp, #12
    2fec:	4607      	mov	r7, r0
    2fee:	460c      	mov	r4, r1
    2ff0:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2ff2:	aa02      	add	r2, sp, #8
    2ff4:	2300      	movs	r3, #0
    2ff6:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, io);
    2ffa:	462b      	mov	r3, r5
    2ffc:	2102      	movs	r1, #2
    2ffe:	4e0e      	ldr	r6, [pc, #56]	; (3038 <setOverSampling+0x50>)
    3000:	47b0      	blx	r6
    3002:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), io);
    3004:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3008:	f022 0203 	bic.w	r2, r2, #3
    300c:	b212      	sxth	r2, r2
    300e:	f004 0403 	and.w	r4, r4, #3
    3012:	4322      	orrs	r2, r4
    3014:	462b      	mov	r3, r5
    3016:	b292      	uxth	r2, r2
    3018:	2102      	movs	r1, #2
    301a:	4638      	mov	r0, r7
    301c:	4c07      	ldr	r4, [pc, #28]	; (303c <setOverSampling+0x54>)
    301e:	47a0      	blx	r4
    3020:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    3022:	4630      	mov	r0, r6
    3024:	4d06      	ldr	r5, [pc, #24]	; (3040 <setOverSampling+0x58>)
    3026:	47a8      	blx	r5
    3028:	4604      	mov	r4, r0
    302a:	4638      	mov	r0, r7
    302c:	47a8      	blx	r5
    302e:	4320      	orrs	r0, r4
}
    3030:	b2c0      	uxtb	r0, r0
    3032:	b003      	add	sp, #12
    3034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3036:	bf00      	nop
    3038:	0000286d 	.word	0x0000286d
    303c:	00002e11 	.word	0x00002e11
    3040:	00002f09 	.word	0x00002f09

00003044 <setDigitalFiltering>:
{
    3044:	b5f0      	push	{r4, r5, r6, r7, lr}
    3046:	b083      	sub	sp, #12
    3048:	4607      	mov	r7, r0
    304a:	460c      	mov	r4, r1
    304c:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    304e:	aa02      	add	r2, sp, #8
    3050:	2300      	movs	r3, #0
    3052:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, io);
    3056:	462b      	mov	r3, r5
    3058:	2102      	movs	r1, #2
    305a:	4e0e      	ldr	r6, [pc, #56]	; (3094 <setDigitalFiltering+0x50>)
    305c:	47b0      	blx	r6
    305e:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK),io);
    3060:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3064:	f022 021c 	bic.w	r2, r2, #28
    3068:	b212      	sxth	r2, r2
    306a:	00a4      	lsls	r4, r4, #2
    306c:	f004 041c 	and.w	r4, r4, #28
    3070:	4322      	orrs	r2, r4
    3072:	462b      	mov	r3, r5
    3074:	b292      	uxth	r2, r2
    3076:	2102      	movs	r1, #2
    3078:	4638      	mov	r0, r7
    307a:	4c07      	ldr	r4, [pc, #28]	; (3098 <setDigitalFiltering+0x54>)
    307c:	47a0      	blx	r4
    307e:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    3080:	4630      	mov	r0, r6
    3082:	4d06      	ldr	r5, [pc, #24]	; (309c <setDigitalFiltering+0x58>)
    3084:	47a8      	blx	r5
    3086:	4604      	mov	r4, r0
    3088:	4638      	mov	r0, r7
    308a:	47a8      	blx	r5
    308c:	4320      	orrs	r0, r4
}
    308e:	b2c0      	uxtb	r0, r0
    3090:	b003      	add	sp, #12
    3092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3094:	0000286d 	.word	0x0000286d
    3098:	00002e11 	.word	0x00002e11
    309c:	00002f09 	.word	0x00002f09

000030a0 <setTemperatureCompensation>:
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	b083      	sub	sp, #12
    30a4:	4606      	mov	r6, r0
    30a6:	4614      	mov	r4, r2
  uint8_t tcmp_en = enabled?1:0;
    30a8:	1c0f      	adds	r7, r1, #0
    30aa:	bf18      	it	ne
    30ac:	2701      	movne	r7, #1
  uint16_t old_val = 0;
    30ae:	aa02      	add	r2, sp, #8
    30b0:	2300      	movs	r3, #0
    30b2:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, io);
    30b6:	4623      	mov	r3, r4
    30b8:	2101      	movs	r1, #1
    30ba:	4d0d      	ldr	r5, [pc, #52]	; (30f0 <setTemperatureCompensation+0x50>)
    30bc:	47a8      	blx	r5
    30be:	4605      	mov	r5, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), io);
    30c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    30c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    30c8:	b212      	sxth	r2, r2
    30ca:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
    30ce:	4623      	mov	r3, r4
    30d0:	b292      	uxth	r2, r2
    30d2:	2101      	movs	r1, #1
    30d4:	4630      	mov	r0, r6
    30d6:	4c07      	ldr	r4, [pc, #28]	; (30f4 <setTemperatureCompensation+0x54>)
    30d8:	47a0      	blx	r4
    30da:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    30dc:	4628      	mov	r0, r5
    30de:	4d06      	ldr	r5, [pc, #24]	; (30f8 <setTemperatureCompensation+0x58>)
    30e0:	47a8      	blx	r5
    30e2:	4604      	mov	r4, r0
    30e4:	4630      	mov	r0, r6
    30e6:	47a8      	blx	r5
    30e8:	4320      	orrs	r0, r4
}
    30ea:	b2c0      	uxtb	r0, r0
    30ec:	b003      	add	sp, #12
    30ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f0:	0000286d 	.word	0x0000286d
    30f4:	00002e11 	.word	0x00002e11
    30f8:	00002f09 	.word	0x00002f09

000030fc <begin>:
{
    30fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3100:	b082      	sub	sp, #8
    3102:	4604      	mov	r4, r0
    3104:	4617      	mov	r7, r2
    3106:	461e      	mov	r6, r3
    3108:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  select_prefix(hall_sensor, order_code_last_digit);
    310a:	4b24      	ldr	r3, [pc, #144]	; (319c <begin+0xa0>)
    310c:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    310e:	f994 2001 	ldrsb.w	r2, [r4, #1]
    3112:	2f00      	cmp	r7, #0
    3114:	d13f      	bne.n	3196 <begin+0x9a>
    3116:	2300      	movs	r3, #0
    3118:	4313      	orrs	r3, r2
    311a:	2e00      	cmp	r6, #0
    311c:	bf18      	it	ne
    311e:	f043 0301 	orrne.w	r3, r3, #1
    3122:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    3124:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3128:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, io);
    312a:	4629      	mov	r1, r5
    312c:	4620      	mov	r0, r4
    312e:	4b1c      	ldr	r3, [pc, #112]	; (31a0 <begin+0xa4>)
    3130:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, io));
    3132:	4629      	mov	r1, r5
    3134:	4620      	mov	r0, r4
    3136:	4b1b      	ldr	r3, [pc, #108]	; (31a4 <begin+0xa8>)
    3138:	4798      	blx	r3
    313a:	4b1b      	ldr	r3, [pc, #108]	; (31a8 <begin+0xac>)
    313c:	4798      	blx	r3
    313e:	4681      	mov	r9, r0
  uint8_t status2 = setGainSel(hall_sensor, 3, io); //7
    3140:	462a      	mov	r2, r5
    3142:	2103      	movs	r1, #3
    3144:	4620      	mov	r0, r4
    3146:	4b19      	ldr	r3, [pc, #100]	; (31ac <begin+0xb0>)
    3148:	4798      	blx	r3
    314a:	4682      	mov	sl, r0
  uint8_t status3 = setResolution(hall_sensor, 1, 1, 1, io); //0,0,0
    314c:	9500      	str	r5, [sp, #0]
    314e:	2301      	movs	r3, #1
    3150:	461a      	mov	r2, r3
    3152:	4619      	mov	r1, r3
    3154:	4620      	mov	r0, r4
    3156:	4e16      	ldr	r6, [pc, #88]	; (31b0 <begin+0xb4>)
    3158:	47b0      	blx	r6
    315a:	4680      	mov	r8, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, io); //3
    315c:	462a      	mov	r2, r5
    315e:	2101      	movs	r1, #1
    3160:	4620      	mov	r0, r4
    3162:	4b14      	ldr	r3, [pc, #80]	; (31b4 <begin+0xb8>)
    3164:	4798      	blx	r3
    3166:	4607      	mov	r7, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, io); //7
    3168:	462a      	mov	r2, r5
    316a:	2102      	movs	r1, #2
    316c:	4620      	mov	r0, r4
    316e:	4b12      	ldr	r3, [pc, #72]	; (31b8 <begin+0xbc>)
    3170:	4798      	blx	r3
    3172:	4606      	mov	r6, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, io);//0
    3174:	462a      	mov	r2, r5
    3176:	2100      	movs	r1, #0
    3178:	4620      	mov	r0, r4
    317a:	4b10      	ldr	r3, [pc, #64]	; (31bc <begin+0xc0>)
    317c:	4798      	blx	r3
  return status1 | status2 | status3 | status4 | status5 | status6;
    317e:	ea49 090a 	orr.w	r9, r9, sl
    3182:	ea48 0809 	orr.w	r8, r8, r9
    3186:	ea47 0708 	orr.w	r7, r7, r8
    318a:	433e      	orrs	r6, r7
    318c:	4330      	orrs	r0, r6
}
    318e:	b2c0      	uxtb	r0, r0
    3190:	b002      	add	sp, #8
    3192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    3196:	2302      	movs	r3, #2
    3198:	e7be      	b.n	3118 <begin+0x1c>
    319a:	bf00      	nop
    319c:	00002681 	.word	0x00002681
    31a0:	000028fd 	.word	0x000028fd
    31a4:	000028d1 	.word	0x000028d1
    31a8:	00002f09 	.word	0x00002f09
    31ac:	00002f19 	.word	0x00002f19
    31b0:	00002f7d 	.word	0x00002f7d
    31b4:	00002fe9 	.word	0x00002fe9
    31b8:	00003045 	.word	0x00003045
    31bc:	000030a1 	.word	0x000030a1

000031c0 <setExtTrig>:
{
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	b083      	sub	sp, #12
    31c4:	4607      	mov	r7, r0
    31c6:	460c      	mov	r4, r1
    31c8:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    31ca:	aa02      	add	r2, sp, #8
    31cc:	2300      	movs	r3, #0
    31ce:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, io);
    31d2:	462b      	mov	r3, r5
    31d4:	2101      	movs	r1, #1
    31d6:	4e0f      	ldr	r6, [pc, #60]	; (3214 <setExtTrig+0x54>)
    31d8:	47b0      	blx	r6
    31da:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), io);
    31dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    31e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    31e4:	b213      	sxth	r3, r2
    31e6:	b2a2      	uxth	r2, r4
    31e8:	02d2      	lsls	r2, r2, #11
    31ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    31ee:	431a      	orrs	r2, r3
    31f0:	462b      	mov	r3, r5
    31f2:	b292      	uxth	r2, r2
    31f4:	2101      	movs	r1, #1
    31f6:	4638      	mov	r0, r7
    31f8:	4c07      	ldr	r4, [pc, #28]	; (3218 <setExtTrig+0x58>)
    31fa:	47a0      	blx	r4
    31fc:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    31fe:	4630      	mov	r0, r6
    3200:	4d06      	ldr	r5, [pc, #24]	; (321c <setExtTrig+0x5c>)
    3202:	47a8      	blx	r5
    3204:	4604      	mov	r4, r0
    3206:	4638      	mov	r0, r7
    3208:	47a8      	blx	r5
    320a:	4320      	orrs	r0, r4
}
    320c:	b2c0      	uxtb	r0, r0
    320e:	b003      	add	sp, #12
    3210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3212:	bf00      	nop
    3214:	0000286d 	.word	0x0000286d
    3218:	00002e11 	.word	0x00002e11
    321c:	00002f09 	.word	0x00002f09

00003220 <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include "math.h"


void triggerInitialize(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    3220:	b538      	push	{r3, r4, r5, lr}
    3222:	4605      	mov	r5, r0
    3224:	460c      	mov	r4, r1
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,io);
    3226:	460a      	mov	r2, r1
    3228:	2101      	movs	r1, #1
    322a:	4b04      	ldr	r3, [pc, #16]	; (323c <triggerInitialize+0x1c>)
    322c:	4798      	blx	r3
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, io);
    322e:	4622      	mov	r2, r4
    3230:	210e      	movs	r1, #14
    3232:	4628      	mov	r0, r5
    3234:	4b02      	ldr	r3, [pc, #8]	; (3240 <triggerInitialize+0x20>)
    3236:	4798      	blx	r3
    3238:	bd38      	pop	{r3, r4, r5, pc}
    323a:	bf00      	nop
    323c:	000031c1 	.word	0x000031c1
    3240:	00002ee1 	.word	0x00002ee1

00003244 <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    3244:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3246:	4c03      	ldr	r4, [pc, #12]	; (3254 <triggerSensor+0x10>)
    3248:	2540      	movs	r5, #64	; 0x40
    324a:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    324c:	4b02      	ldr	r3, [pc, #8]	; (3258 <triggerSensor+0x14>)
    324e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3250:	6165      	str	r5, [r4, #20]
    3252:	bd38      	pop	{r3, r4, r5, pc}
    3254:	41008000 	.word	0x41008000
    3258:	000009d9 	.word	0x000009d9

0000325c <triggerReadout_Prepare_Timer>:
	uint16_t delayTime = convDelayMillis(hall_sensor);
	delay_ms(delayTime); //can be optimized as clock is not that precise
};

void triggerReadout_Prepare_Timer(uint16_t pulseTime)
{
    325c:	b508      	push	{r3, lr}
	triggerSensor(pulseTime);
    325e:	4b01      	ldr	r3, [pc, #4]	; (3264 <triggerReadout_Prepare_Timer+0x8>)
    3260:	4798      	blx	r3
    3262:	bd08      	pop	{r3, pc}
    3264:	00003245 	.word	0x00003245

00003268 <triggerReadout>:
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    3268:	b538      	push	{r3, r4, r5, lr}
    326a:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , io);
    326c:	460a      	mov	r2, r1
    326e:	210e      	movs	r1, #14
    3270:	4b04      	ldr	r3, [pc, #16]	; (3284 <triggerReadout+0x1c>)
    3272:	4798      	blx	r3
    3274:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    3276:	4628      	mov	r0, r5
    3278:	4b03      	ldr	r3, [pc, #12]	; (3288 <triggerReadout+0x20>)
    327a:	4798      	blx	r3
	return checkStatus(status);
    327c:	4620      	mov	r0, r4
    327e:	4b03      	ldr	r3, [pc, #12]	; (328c <triggerReadout+0x24>)
    3280:	4798      	blx	r3
};
    3282:	bd38      	pop	{r3, r4, r5, pc}
    3284:	0000290d 	.word	0x0000290d
    3288:	00002a29 	.word	0x00002a29
    328c:	00002f09 	.word	0x00002f09

00003290 <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct io_descriptor *io)
{
    3290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3294:	b083      	sub	sp, #12
    3296:	4688      	mov	r8, r1
    3298:	4617      	mov	r7, r2
    329a:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,io);
    329c:	9911      	ldr	r1, [sp, #68]	; 0x44
    329e:	4c25      	ldr	r4, [pc, #148]	; (3334 <triggerReadoutArray+0xa4>)
    32a0:	47a0      	blx	r4
    32a2:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,io);
    32a4:	9911      	ldr	r1, [sp, #68]	; 0x44
    32a6:	4640      	mov	r0, r8
    32a8:	47a0      	blx	r4
    32aa:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,io);
    32ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    32ae:	4638      	mov	r0, r7
    32b0:	47a0      	blx	r4
    32b2:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,io);
    32b4:	9911      	ldr	r1, [sp, #68]	; 0x44
    32b6:	4630      	mov	r0, r6
    32b8:	47a0      	blx	r4
    32ba:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,io);
    32bc:	9911      	ldr	r1, [sp, #68]	; 0x44
    32be:	980c      	ldr	r0, [sp, #48]	; 0x30
    32c0:	47a0      	blx	r4
    32c2:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,io);
    32c4:	9911      	ldr	r1, [sp, #68]	; 0x44
    32c6:	980d      	ldr	r0, [sp, #52]	; 0x34
    32c8:	47a0      	blx	r4
    32ca:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,io);
    32cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    32ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    32d0:	47a0      	blx	r4
    32d2:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,io);
    32d4:	9911      	ldr	r1, [sp, #68]	; 0x44
    32d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    32d8:	47a0      	blx	r4
    32da:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,io);
    32dc:	9911      	ldr	r1, [sp, #68]	; 0x44
    32de:	9810      	ldr	r0, [sp, #64]	; 0x40
    32e0:	47a0      	blx	r4
    32e2:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    32e4:	4628      	mov	r0, r5
    32e6:	4d14      	ldr	r5, [pc, #80]	; (3338 <triggerReadoutArray+0xa8>)
    32e8:	47a8      	blx	r5
    32ea:	4604      	mov	r4, r0
    32ec:	4658      	mov	r0, fp
    32ee:	47a8      	blx	r5
    32f0:	4304      	orrs	r4, r0
    32f2:	b2e4      	uxtb	r4, r4
    32f4:	4650      	mov	r0, sl
    32f6:	47a8      	blx	r5
    32f8:	4304      	orrs	r4, r0
    32fa:	b2e4      	uxtb	r4, r4
    32fc:	4648      	mov	r0, r9
    32fe:	47a8      	blx	r5
    3300:	4304      	orrs	r4, r0
    3302:	b2e4      	uxtb	r4, r4
    3304:	4640      	mov	r0, r8
    3306:	47a8      	blx	r5
    3308:	4304      	orrs	r4, r0
    330a:	b2e4      	uxtb	r4, r4
    330c:	4638      	mov	r0, r7
    330e:	47a8      	blx	r5
    3310:	4304      	orrs	r4, r0
    3312:	b2e4      	uxtb	r4, r4
    3314:	4630      	mov	r0, r6
    3316:	47a8      	blx	r5
    3318:	4304      	orrs	r4, r0
    331a:	b2e4      	uxtb	r4, r4
    331c:	9800      	ldr	r0, [sp, #0]
    331e:	47a8      	blx	r5
    3320:	4304      	orrs	r4, r0
    3322:	b2e4      	uxtb	r4, r4
    3324:	9801      	ldr	r0, [sp, #4]
    3326:	47a8      	blx	r5
    3328:	4320      	orrs	r0, r4
};
    332a:	b2c0      	uxtb	r0, r0
    332c:	b003      	add	sp, #12
    332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3332:	bf00      	nop
    3334:	00003269 	.word	0x00003269
    3338:	00002f09 	.word	0x00002f09

0000333c <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
struct io_descriptor *io)
{
    333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3340:	b083      	sub	sp, #12
    3342:	4606      	mov	r6, r0
    3344:	468b      	mov	fp, r1
    3346:	4692      	mov	sl, r2
    3348:	4699      	mov	r9, r3
    334a:	9d11      	ldr	r5, [sp, #68]	; 0x44
	//bottom row left
	initialize(hall_sensor_1);
    334c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 343c <SensorArray_Init+0x100>
    3350:	47c0      	blx	r8
	begin(hall_sensor_1,1,0,0,false, io);
    3352:	9501      	str	r5, [sp, #4]
    3354:	2400      	movs	r4, #0
    3356:	9400      	str	r4, [sp, #0]
    3358:	4623      	mov	r3, r4
    335a:	4622      	mov	r2, r4
    335c:	2101      	movs	r1, #1
    335e:	4630      	mov	r0, r6
    3360:	4f34      	ldr	r7, [pc, #208]	; (3434 <SensorArray_Init+0xf8>)
    3362:	47b8      	blx	r7
	triggerInitialize(hall_sensor_1, io);
    3364:	4629      	mov	r1, r5
    3366:	4630      	mov	r0, r6
    3368:	4e33      	ldr	r6, [pc, #204]	; (3438 <SensorArray_Init+0xfc>)
    336a:	47b0      	blx	r6
	
	//bottom row middle
	initialize(hall_sensor_2);
    336c:	4658      	mov	r0, fp
    336e:	47c0      	blx	r8
	begin(hall_sensor_2,1,0,1,false, io);
    3370:	9501      	str	r5, [sp, #4]
    3372:	9400      	str	r4, [sp, #0]
    3374:	2301      	movs	r3, #1
    3376:	4622      	mov	r2, r4
    3378:	4619      	mov	r1, r3
    337a:	4658      	mov	r0, fp
    337c:	47b8      	blx	r7
	triggerInitialize(hall_sensor_2, io);
    337e:	4629      	mov	r1, r5
    3380:	4658      	mov	r0, fp
    3382:	47b0      	blx	r6
	
	//bottom row right
	initialize(hall_sensor_3);
    3384:	4650      	mov	r0, sl
    3386:	47c0      	blx	r8
	begin(hall_sensor_3,1,1,0,false, io);
    3388:	9501      	str	r5, [sp, #4]
    338a:	9400      	str	r4, [sp, #0]
    338c:	4623      	mov	r3, r4
    338e:	2201      	movs	r2, #1
    3390:	4611      	mov	r1, r2
    3392:	4650      	mov	r0, sl
    3394:	47b8      	blx	r7
	triggerInitialize(hall_sensor_3, io);
    3396:	4629      	mov	r1, r5
    3398:	4650      	mov	r0, sl
    339a:	47b0      	blx	r6
	
	//middle row left
	initialize(hall_sensor_4);
    339c:	4648      	mov	r0, r9
    339e:	47c0      	blx	r8
	begin(hall_sensor_4,2,0,0,false, io);
    33a0:	9501      	str	r5, [sp, #4]
    33a2:	9400      	str	r4, [sp, #0]
    33a4:	4623      	mov	r3, r4
    33a6:	4622      	mov	r2, r4
    33a8:	2102      	movs	r1, #2
    33aa:	4648      	mov	r0, r9
    33ac:	47b8      	blx	r7
	triggerInitialize(hall_sensor_4, io);
    33ae:	4629      	mov	r1, r5
    33b0:	4648      	mov	r0, r9
    33b2:	47b0      	blx	r6
	
	//middle row middle
	initialize(hall_sensor_5);
    33b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    33b6:	47c0      	blx	r8
	begin(hall_sensor_5,2,0,1,false, io);
    33b8:	9501      	str	r5, [sp, #4]
    33ba:	9400      	str	r4, [sp, #0]
    33bc:	2301      	movs	r3, #1
    33be:	4622      	mov	r2, r4
    33c0:	2102      	movs	r1, #2
    33c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    33c4:	47b8      	blx	r7
	triggerInitialize(hall_sensor_5, io);
    33c6:	4629      	mov	r1, r5
    33c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    33ca:	47b0      	blx	r6
	
	//middle row right
	initialize(hall_sensor_6);
    33cc:	980d      	ldr	r0, [sp, #52]	; 0x34
    33ce:	47c0      	blx	r8
	begin(hall_sensor_6,2,1,0,false, io);
    33d0:	9501      	str	r5, [sp, #4]
    33d2:	9400      	str	r4, [sp, #0]
    33d4:	4623      	mov	r3, r4
    33d6:	2201      	movs	r2, #1
    33d8:	2102      	movs	r1, #2
    33da:	980d      	ldr	r0, [sp, #52]	; 0x34
    33dc:	47b8      	blx	r7
	triggerInitialize(hall_sensor_6, io);
    33de:	4629      	mov	r1, r5
    33e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    33e2:	47b0      	blx	r6
	
	//top row left
	initialize(hall_sensor_7);
    33e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    33e6:	47c0      	blx	r8
	begin(hall_sensor_7,3,0,0,false, io);
    33e8:	9501      	str	r5, [sp, #4]
    33ea:	9400      	str	r4, [sp, #0]
    33ec:	4623      	mov	r3, r4
    33ee:	4622      	mov	r2, r4
    33f0:	2103      	movs	r1, #3
    33f2:	980e      	ldr	r0, [sp, #56]	; 0x38
    33f4:	47b8      	blx	r7
	triggerInitialize(hall_sensor_7, io);
    33f6:	4629      	mov	r1, r5
    33f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    33fa:	47b0      	blx	r6
	
	//top row middle
	initialize(hall_sensor_8);
    33fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    33fe:	47c0      	blx	r8
	begin(hall_sensor_8,3,0,1,false, io);
    3400:	9501      	str	r5, [sp, #4]
    3402:	9400      	str	r4, [sp, #0]
    3404:	2301      	movs	r3, #1
    3406:	4622      	mov	r2, r4
    3408:	2103      	movs	r1, #3
    340a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    340c:	47b8      	blx	r7
	triggerInitialize(hall_sensor_8, io);
    340e:	4629      	mov	r1, r5
    3410:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3412:	47b0      	blx	r6
	
	//top row right
	initialize(hall_sensor_9);
    3414:	9810      	ldr	r0, [sp, #64]	; 0x40
    3416:	47c0      	blx	r8
	begin(hall_sensor_9,3,1,0,false, io);
    3418:	9501      	str	r5, [sp, #4]
    341a:	9400      	str	r4, [sp, #0]
    341c:	4623      	mov	r3, r4
    341e:	2201      	movs	r2, #1
    3420:	2103      	movs	r1, #3
    3422:	9810      	ldr	r0, [sp, #64]	; 0x40
    3424:	47b8      	blx	r7
	triggerInitialize(hall_sensor_9, io);
    3426:	4629      	mov	r1, r5
    3428:	9810      	ldr	r0, [sp, #64]	; 0x40
    342a:	47b0      	blx	r6
}
    342c:	b003      	add	sp, #12
    342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3432:	bf00      	nop
    3434:	000030fd 	.word	0x000030fd
    3438:	00003221 	.word	0x00003221
    343c:	000027c9 	.word	0x000027c9

00003440 <mag_to_force>:

void mag_to_force(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    3440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3444:	b085      	sub	sp, #20
    3446:	4604      	mov	r4, r0
    3448:	4689      	mov	r9, r1
    344a:	4690      	mov	r8, r2
    344c:	469b      	mov	fp, r3
	
	//Convert to B_r
	sensor_row->b_r_top = (hall_sensor_top->data.x*hall_sensor_top->data.x) + (hall_sensor_top->data.y*hall_sensor_top->data.y);
    344e:	edd1 7a13 	vldr	s15, [r1, #76]	; 0x4c
    3452:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3456:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
    345a:	ee27 7a07 	vmul.f32	s14, s14, s14
    345e:	ee77 7a87 	vadd.f32	s15, s15, s14
    3462:	edc0 7a00 	vstr	s15, [r0]
	sensor_row->b_r_top = sqrt(sensor_row->b_r_top);
    3466:	4f8e      	ldr	r7, [pc, #568]	; (36a0 <mag_to_force+0x260>)
    3468:	ee17 0a90 	vmov	r0, s15
    346c:	47b8      	blx	r7
    346e:	4d8d      	ldr	r5, [pc, #564]	; (36a4 <mag_to_force+0x264>)
    3470:	47a8      	blx	r5
    3472:	f8df a23c 	ldr.w	sl, [pc, #572]	; 36b0 <mag_to_force+0x270>
    3476:	47d0      	blx	sl
    3478:	6020      	str	r0, [r4, #0]
	
	
	sensor_row->b_r_middle = (hall_sensor_middle->data.x*hall_sensor_middle->data.x) + (hall_sensor_middle->data.y*hall_sensor_middle->data.y);
    347a:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
    347e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3482:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
    3486:	ee27 7a07 	vmul.f32	s14, s14, s14
    348a:	ee77 7a87 	vadd.f32	s15, s15, s14
    348e:	edc4 7a01 	vstr	s15, [r4, #4]
	sensor_row->b_r_middle = sqrt(sensor_row->b_r_middle);
    3492:	ee17 0a90 	vmov	r0, s15
    3496:	47b8      	blx	r7
    3498:	47a8      	blx	r5
    349a:	47d0      	blx	sl
    349c:	6060      	str	r0, [r4, #4]
	
	sensor_row->b_r_bottom = (hall_sensor_bottom->data.x*hall_sensor_bottom->data.x) + (hall_sensor_bottom->data.y*hall_sensor_bottom->data.y);
    349e:	eddb 7a13 	vldr	s15, [fp, #76]	; 0x4c
    34a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
    34a6:	ed9b 7a14 	vldr	s14, [fp, #80]	; 0x50
    34aa:	ee27 7a07 	vmul.f32	s14, s14, s14
    34ae:	ee77 7a87 	vadd.f32	s15, s15, s14
    34b2:	edc4 7a02 	vstr	s15, [r4, #8]
	sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
    34b6:	ee17 0a90 	vmov	r0, s15
    34ba:	47b8      	blx	r7
    34bc:	47a8      	blx	r5
    34be:	47d0      	blx	sl
    34c0:	60a0      	str	r0, [r4, #8]
	
	sensor_row->force_z_top = 51.152 + (0.0068*sensor_row->b_r_top) + (0.0130*hall_sensor_top->data.z);
    34c2:	6820      	ldr	r0, [r4, #0]
    34c4:	47b8      	blx	r7
    34c6:	e9cd 0100 	strd	r0, r1, [sp]
    34ca:	4d77      	ldr	r5, [pc, #476]	; (36a8 <mag_to_force+0x268>)
    34cc:	a350      	add	r3, pc, #320	; (adr r3, 3610 <mag_to_force+0x1d0>)
    34ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d2:	47a8      	blx	r5
    34d4:	4e75      	ldr	r6, [pc, #468]	; (36ac <mag_to_force+0x26c>)
    34d6:	a350      	add	r3, pc, #320	; (adr r3, 3618 <mag_to_force+0x1d8>)
    34d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    34dc:	47b0      	blx	r6
    34de:	e9cd 0102 	strd	r0, r1, [sp, #8]
    34e2:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
    34e6:	47b8      	blx	r7
    34e8:	a34d      	add	r3, pc, #308	; (adr r3, 3620 <mag_to_force+0x1e0>)
    34ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    34ee:	47a8      	blx	r5
    34f0:	4602      	mov	r2, r0
    34f2:	460b      	mov	r3, r1
    34f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    34f8:	47b0      	blx	r6
    34fa:	47d0      	blx	sl
    34fc:	60e0      	str	r0, [r4, #12]
	sensor_row->force_r_top = 8.9701 + (0.0106*sensor_row->b_r_top) + (0.0026*hall_sensor_top->data.z);
    34fe:	a34a      	add	r3, pc, #296	; (adr r3, 3628 <mag_to_force+0x1e8>)
    3500:	e9d3 2300 	ldrd	r2, r3, [r3]
    3504:	e9dd 0100 	ldrd	r0, r1, [sp]
    3508:	47a8      	blx	r5
    350a:	a349      	add	r3, pc, #292	; (adr r3, 3630 <mag_to_force+0x1f0>)
    350c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3510:	47b0      	blx	r6
    3512:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3516:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
    351a:	47b8      	blx	r7
    351c:	a346      	add	r3, pc, #280	; (adr r3, 3638 <mag_to_force+0x1f8>)
    351e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3522:	47a8      	blx	r5
    3524:	4602      	mov	r2, r0
    3526:	460b      	mov	r3, r1
    3528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    352c:	47b0      	blx	r6
    352e:	47d0      	blx	sl
    3530:	61a0      	str	r0, [r4, #24]

	sensor_row->force_z_middle =-22.8835 + (0.0014*sensor_row->b_r_top) + (0.0017*hall_sensor_middle->data.z);
    3532:	a343      	add	r3, pc, #268	; (adr r3, 3640 <mag_to_force+0x200>)
    3534:	e9d3 2300 	ldrd	r2, r3, [r3]
    3538:	e9dd 0100 	ldrd	r0, r1, [sp]
    353c:	47a8      	blx	r5
    353e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 36b4 <mag_to_force+0x274>
    3542:	a341      	add	r3, pc, #260	; (adr r3, 3648 <mag_to_force+0x208>)
    3544:	e9d3 2300 	ldrd	r2, r3, [r3]
    3548:	47c8      	blx	r9
    354a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    354e:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
    3552:	47b8      	blx	r7
    3554:	a33e      	add	r3, pc, #248	; (adr r3, 3650 <mag_to_force+0x210>)
    3556:	e9d3 2300 	ldrd	r2, r3, [r3]
    355a:	47a8      	blx	r5
    355c:	4602      	mov	r2, r0
    355e:	460b      	mov	r3, r1
    3560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3564:	47b0      	blx	r6
    3566:	47d0      	blx	sl
    3568:	6120      	str	r0, [r4, #16]
	sensor_row->force_r_middle =-10.1016 + (0.0031*sensor_row->b_r_top) + (-0.0014*hall_sensor_middle->data.z);
    356a:	a33b      	add	r3, pc, #236	; (adr r3, 3658 <mag_to_force+0x218>)
    356c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3570:	e9dd 0100 	ldrd	r0, r1, [sp]
    3574:	47a8      	blx	r5
    3576:	a33a      	add	r3, pc, #232	; (adr r3, 3660 <mag_to_force+0x220>)
    3578:	e9d3 2300 	ldrd	r2, r3, [r3]
    357c:	47c8      	blx	r9
    357e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3582:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
    3586:	47b8      	blx	r7
    3588:	a337      	add	r3, pc, #220	; (adr r3, 3668 <mag_to_force+0x228>)
    358a:	e9d3 2300 	ldrd	r2, r3, [r3]
    358e:	47a8      	blx	r5
    3590:	4602      	mov	r2, r0
    3592:	460b      	mov	r3, r1
    3594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3598:	47b0      	blx	r6
    359a:	47d0      	blx	sl
    359c:	61e0      	str	r0, [r4, #28]
	
	sensor_row->force_z_bottom = 35.2728 + (-0.0130*sensor_row->b_r_top) + (0.0084*hall_sensor_bottom->data.z);
    359e:	a334      	add	r3, pc, #208	; (adr r3, 3670 <mag_to_force+0x230>)
    35a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35a4:	e9dd 0100 	ldrd	r0, r1, [sp]
    35a8:	47a8      	blx	r5
    35aa:	a333      	add	r3, pc, #204	; (adr r3, 3678 <mag_to_force+0x238>)
    35ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    35b0:	47b0      	blx	r6
    35b2:	4680      	mov	r8, r0
    35b4:	4689      	mov	r9, r1
    35b6:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
    35ba:	47b8      	blx	r7
    35bc:	a330      	add	r3, pc, #192	; (adr r3, 3680 <mag_to_force+0x240>)
    35be:	e9d3 2300 	ldrd	r2, r3, [r3]
    35c2:	47a8      	blx	r5
    35c4:	4602      	mov	r2, r0
    35c6:	460b      	mov	r3, r1
    35c8:	4640      	mov	r0, r8
    35ca:	4649      	mov	r1, r9
    35cc:	47b0      	blx	r6
    35ce:	47d0      	blx	sl
    35d0:	6160      	str	r0, [r4, #20]
	sensor_row->force_r_bottom = 9.9403 + (-0.0075*sensor_row->b_r_top) + (0.0013*hall_sensor_bottom->data.z);
    35d2:	a32d      	add	r3, pc, #180	; (adr r3, 3688 <mag_to_force+0x248>)
    35d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    35d8:	e9dd 0100 	ldrd	r0, r1, [sp]
    35dc:	47a8      	blx	r5
    35de:	a32c      	add	r3, pc, #176	; (adr r3, 3690 <mag_to_force+0x250>)
    35e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35e4:	47b0      	blx	r6
    35e6:	4680      	mov	r8, r0
    35e8:	4689      	mov	r9, r1
    35ea:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
    35ee:	47b8      	blx	r7
    35f0:	a329      	add	r3, pc, #164	; (adr r3, 3698 <mag_to_force+0x258>)
    35f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    35f6:	47a8      	blx	r5
    35f8:	4602      	mov	r2, r0
    35fa:	460b      	mov	r3, r1
    35fc:	4640      	mov	r0, r8
    35fe:	4649      	mov	r1, r9
    3600:	47b0      	blx	r6
    3602:	47d0      	blx	sl
    3604:	6220      	str	r0, [r4, #32]
	
	
    3606:	b005      	add	sp, #20
    3608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    360c:	f3af 8000 	nop.w
    3610:	19ce075f 	.word	0x19ce075f
    3614:	3f7bda51 	.word	0x3f7bda51
    3618:	bc6a7efa 	.word	0xbc6a7efa
    361c:	40499374 	.word	0x40499374
    3620:	76c8b439 	.word	0x76c8b439
    3624:	3f8a9fbe 	.word	0x3f8a9fbe
    3628:	eab367a1 	.word	0xeab367a1
    362c:	3f85b573 	.word	0x3f85b573
    3630:	f27bb2ff 	.word	0xf27bb2ff
    3634:	4021f0b0 	.word	0x4021f0b0
    3638:	5f06f694 	.word	0x5f06f694
    363c:	3f654c98 	.word	0x3f654c98
    3640:	8db8bac7 	.word	0x8db8bac7
    3644:	3f56f006 	.word	0x3f56f006
    3648:	0e560419 	.word	0x0e560419
    364c:	4036e22d 	.word	0x4036e22d
    3650:	19ce075f 	.word	0x19ce075f
    3654:	3f5bda51 	.word	0x3f5bda51
    3658:	d3c36113 	.word	0xd3c36113
    365c:	3f69652b 	.word	0x3f69652b
    3660:	ea4a8c15 	.word	0xea4a8c15
    3664:	40243404 	.word	0x40243404
    3668:	8db8bac7 	.word	0x8db8bac7
    366c:	bf56f006 	.word	0xbf56f006
    3670:	76c8b439 	.word	0x76c8b439
    3674:	bf8a9fbe 	.word	0xbf8a9fbe
    3678:	1c432ca5 	.word	0x1c432ca5
    367c:	4041a2eb 	.word	0x4041a2eb
    3680:	ea4a8c15 	.word	0xea4a8c15
    3684:	3f813404 	.word	0x3f813404
    3688:	eb851eb8 	.word	0xeb851eb8
    368c:	bf7eb851 	.word	0xbf7eb851
    3690:	0068db8c 	.word	0x0068db8c
    3694:	4023e16f 	.word	0x4023e16f
    3698:	5f06f694 	.word	0x5f06f694
    369c:	3f554c98 	.word	0x3f554c98
    36a0:	00003e55 	.word	0x00003e55
    36a4:	00003955 	.word	0x00003955
    36a8:	00003efd 	.word	0x00003efd
    36ac:	00003b99 	.word	0x00003b99
    36b0:	0000445d 	.word	0x0000445d
    36b4:	00003b95 	.word	0x00003b95

000036b8 <RS>:
#include "math.h"
#include <Tactile_Sensor/neural_spikes.h>

void RS(struct fneuron_t *neuron) {
	// create a "regular spiking" floating point neuron
	neuron->a = 0.02;
    36b8:	4b07      	ldr	r3, [pc, #28]	; (36d8 <RS+0x20>)
    36ba:	6003      	str	r3, [r0, #0]
	neuron->b = 0.2;
    36bc:	4b07      	ldr	r3, [pc, #28]	; (36dc <RS+0x24>)
    36be:	6043      	str	r3, [r0, #4]
	neuron->c = -65;
    36c0:	4b07      	ldr	r3, [pc, #28]	; (36e0 <RS+0x28>)
    36c2:	6083      	str	r3, [r0, #8]
	neuron->d = 6;
    36c4:	4b07      	ldr	r3, [pc, #28]	; (36e4 <RS+0x2c>)
    36c6:	60c3      	str	r3, [r0, #12]
	neuron->potential = neuron->recovery = 0;
    36c8:	2300      	movs	r3, #0
    36ca:	6143      	str	r3, [r0, #20]
    36cc:	6103      	str	r3, [r0, #16]
	neuron->timestep_neuron = 1; // junan recommendation 0.05, bigger timesteps till 1.5 is fine (see paper) 
    36ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    36d2:	61c3      	str	r3, [r0, #28]
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop
    36d8:	3ca3d70a 	.word	0x3ca3d70a
    36dc:	3e4ccccd 	.word	0x3e4ccccd
    36e0:	c2820000 	.word	0xc2820000
    36e4:	40c00000 	.word	0x40c00000

000036e8 <force_parameters>:
}

void force_parameters (struct fneuron_t *neuron) {
	// initiate parameters for normal and shear force
	// parameters normal force
	neuron->beta = 0;
    36e8:	2300      	movs	r3, #0
    36ea:	6303      	str	r3, [r0, #48]	; 0x30
	neuron->k_s	= 0.333; //0.0000003
    36ec:	4a05      	ldr	r2, [pc, #20]	; (3704 <force_parameters+0x1c>)
    36ee:	6342      	str	r2, [r0, #52]	; 0x34
	neuron->k_d = 0;//0.003
    36f0:	6383      	str	r3, [r0, #56]	; 0x38
	neuron-> normal_force_past = 0; 
    36f2:	6283      	str	r3, [r0, #40]	; 0x28
	// parameters shear force
	neuron->theta = 0;
    36f4:	63c3      	str	r3, [r0, #60]	; 0x3c
	neuron->r_s = 2.5;
    36f6:	4a04      	ldr	r2, [pc, #16]	; (3708 <force_parameters+0x20>)
    36f8:	6402      	str	r2, [r0, #64]	; 0x40
	neuron->r_d = 0;
    36fa:	6443      	str	r3, [r0, #68]	; 0x44
	neuron-> shear_force_past = 0; 
    36fc:	62c3      	str	r3, [r0, #44]	; 0x2c
	neuron->timestep_force = 10; 
    36fe:	4b03      	ldr	r3, [pc, #12]	; (370c <force_parameters+0x24>)
    3700:	6483      	str	r3, [r0, #72]	; 0x48
    3702:	4770      	bx	lr
    3704:	3eaa7efa 	.word	0x3eaa7efa
    3708:	40200000 	.word	0x40200000
    370c:	41200000 	.word	0x41200000

00003710 <calc_current_normal_force>:
}

void calc_current_normal_force(struct fneuron_t *neuron, float force_z){
    3710:	ee07 1a90 	vmov	s15, r1
	neuron->normal_force = force_z;
    3714:	6201      	str	r1, [r0, #32]
	neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    3716:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    371a:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    371e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3722:	ee37 7a26 	vadd.f32	s14, s14, s13
    3726:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->normal_force_past = neuron->normal_force;
    372a:	6281      	str	r1, [r0, #40]	; 0x28
    372c:	4770      	bx	lr

0000372e <calc_current_shear_force>:
}

void calc_current_shear_force(struct fneuron_t *neuron,float force_r){//(fneuron_t *neuron, bool start, float force_x, float force_y
    372e:	ee07 1a90 	vmov	s15, r1
	
	neuron->shear_force = force_r;
    3732:	6241      	str	r1, [r0, #36]	; 0x24
	neuron->cell_current = neuron->theta + (neuron->r_s * neuron->shear_force);
    3734:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    3738:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    373c:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3740:	ee37 7a26 	vadd.f32	s14, s14, s13
    3744:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->shear_force_past = neuron->shear_force;
    3748:	62c1      	str	r1, [r0, #44]	; 0x2c
    374a:	4770      	bx	lr
    374c:	0000      	movs	r0, r0
	...

00003750 <step_f>:
	
}

void step_f(struct fneuron_t *neuron, float synapse, float ms) {
    3750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3754:	ed2d 8b04 	vpush	{d8-d9}
    3758:	b082      	sub	sp, #8
	// step a neuron through ms milliseconds with synapse input
	//   if you don't have a good reason to do otherwise, keep ms between 0.1
	//   and 1.0
	if (neuron->potential >= 30) {
    375a:	ed90 8a04 	vldr	s16, [r0, #16]
    375e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    3762:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    376a:	da6c      	bge.n	3846 <step_f+0xf6>
    376c:	ee08 2a90 	vmov	s17, r2
    3770:	468a      	mov	sl, r1
    3772:	4604      	mov	r4, r0
		neuron->potential = neuron->c;
		neuron->recovery += neuron->d;
		return;
	}
	float v = neuron->potential;
	float u = neuron->recovery;
    3774:	ed90 9a05 	vldr	s18, [r0, #20]
	neuron->potential = v + ms * (0.04 * v * v + 5 * v + 140 - u + synapse);
    3778:	4d3b      	ldr	r5, [pc, #236]	; (3868 <step_f+0x118>)
    377a:	ee18 0a10 	vmov	r0, s16
    377e:	47a8      	blx	r5
    3780:	4680      	mov	r8, r0
    3782:	4689      	mov	r9, r1
    3784:	4f39      	ldr	r7, [pc, #228]	; (386c <step_f+0x11c>)
    3786:	a336      	add	r3, pc, #216	; (adr r3, 3860 <step_f+0x110>)
    3788:	e9d3 2300 	ldrd	r2, r3, [r3]
    378c:	47b8      	blx	r7
    378e:	4602      	mov	r2, r0
    3790:	460b      	mov	r3, r1
    3792:	e9cd 8900 	strd	r8, r9, [sp]
    3796:	4640      	mov	r0, r8
    3798:	4649      	mov	r1, r9
    379a:	47b8      	blx	r7
    379c:	4680      	mov	r8, r0
    379e:	4689      	mov	r9, r1
    37a0:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    37a4:	ee68 7a27 	vmul.f32	s15, s16, s15
    37a8:	ee17 0a90 	vmov	r0, s15
    37ac:	47a8      	blx	r5
    37ae:	4e30      	ldr	r6, [pc, #192]	; (3870 <step_f+0x120>)
    37b0:	4602      	mov	r2, r0
    37b2:	460b      	mov	r3, r1
    37b4:	4640      	mov	r0, r8
    37b6:	4649      	mov	r1, r9
    37b8:	47b0      	blx	r6
    37ba:	2200      	movs	r2, #0
    37bc:	4b2d      	ldr	r3, [pc, #180]	; (3874 <step_f+0x124>)
    37be:	47b0      	blx	r6
    37c0:	4680      	mov	r8, r0
    37c2:	4689      	mov	r9, r1
    37c4:	ee19 0a10 	vmov	r0, s18
    37c8:	47a8      	blx	r5
    37ca:	4602      	mov	r2, r0
    37cc:	460b      	mov	r3, r1
    37ce:	4640      	mov	r0, r8
    37d0:	4649      	mov	r1, r9
    37d2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 387c <step_f+0x12c>
    37d6:	47c0      	blx	r8
    37d8:	4680      	mov	r8, r0
    37da:	4689      	mov	r9, r1
    37dc:	4650      	mov	r0, sl
    37de:	47a8      	blx	r5
    37e0:	4642      	mov	r2, r8
    37e2:	464b      	mov	r3, r9
    37e4:	47b0      	blx	r6
    37e6:	4680      	mov	r8, r0
    37e8:	4689      	mov	r9, r1
    37ea:	ee18 0a90 	vmov	r0, s17
    37ee:	47a8      	blx	r5
    37f0:	4642      	mov	r2, r8
    37f2:	464b      	mov	r3, r9
    37f4:	47b8      	blx	r7
    37f6:	4602      	mov	r2, r0
    37f8:	460b      	mov	r3, r1
    37fa:	e9dd 0100 	ldrd	r0, r1, [sp]
    37fe:	47b0      	blx	r6
    3800:	4b1d      	ldr	r3, [pc, #116]	; (3878 <step_f+0x128>)
    3802:	4798      	blx	r3
    3804:	ee07 0a90 	vmov	s15, r0
    3808:	6120      	str	r0, [r4, #16]
	if (neuron -> potential > 30) {
    380a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    380e:	eef4 7ac7 	vcmpe.f32	s15, s14
    3812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3816:	dd01      	ble.n	381c <step_f+0xcc>
		neuron -> potential = 30;
    3818:	ed84 7a04 	vstr	s14, [r4, #16]
	}
	neuron->recovery = u + ms * (neuron->a * (neuron->b * v - u));
    381c:	edd4 7a00 	vldr	s15, [r4]
    3820:	ed94 7a01 	vldr	s14, [r4, #4]
    3824:	ee28 8a07 	vmul.f32	s16, s16, s14
    3828:	ee38 8a49 	vsub.f32	s16, s16, s18
    382c:	ee27 8a88 	vmul.f32	s16, s15, s16
    3830:	ee68 8a88 	vmul.f32	s17, s17, s16
    3834:	ee79 8a28 	vadd.f32	s17, s18, s17
    3838:	edc4 8a05 	vstr	s17, [r4, #20]
	return;
}
    383c:	b002      	add	sp, #8
    383e:	ecbd 8b04 	vpop	{d8-d9}
    3842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		neuron->potential = neuron->c;
    3846:	6883      	ldr	r3, [r0, #8]
    3848:	6103      	str	r3, [r0, #16]
		neuron->recovery += neuron->d;
    384a:	ed90 7a03 	vldr	s14, [r0, #12]
    384e:	edd0 7a05 	vldr	s15, [r0, #20]
    3852:	ee77 7a87 	vadd.f32	s15, s15, s14
    3856:	edc0 7a05 	vstr	s15, [r0, #20]
		return;
    385a:	e7ef      	b.n	383c <step_f+0xec>
    385c:	f3af 8000 	nop.w
    3860:	47ae147b 	.word	0x47ae147b
    3864:	3fa47ae1 	.word	0x3fa47ae1
    3868:	00003e55 	.word	0x00003e55
    386c:	00003efd 	.word	0x00003efd
    3870:	00003b99 	.word	0x00003b99
    3874:	40618000 	.word	0x40618000
    3878:	0000445d 	.word	0x0000445d
    387c:	00003b95 	.word	0x00003b95

00003880 <neuron_init>:

void neuron_init(struct fneuron_t *neuron1_normal, struct fneuron_t *neuron1_shear, struct fneuron_t *neuron2_normal, struct fneuron_t *neuron2_shear, struct fneuron_t *neuron3_normal, struct fneuron_t *neuron3_shear){
    3880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3884:	4604      	mov	r4, r0
    3886:	4688      	mov	r8, r1
    3888:	4617      	mov	r7, r2
    388a:	461e      	mov	r6, r3
	
	RS(neuron1_normal);
    388c:	4d0d      	ldr	r5, [pc, #52]	; (38c4 <neuron_init+0x44>)
    388e:	47a8      	blx	r5
	force_parameters(neuron1_normal);
    3890:	4620      	mov	r0, r4
    3892:	4c0d      	ldr	r4, [pc, #52]	; (38c8 <neuron_init+0x48>)
    3894:	47a0      	blx	r4
	
	RS(neuron1_shear);
    3896:	4640      	mov	r0, r8
    3898:	47a8      	blx	r5
	force_parameters(neuron1_shear);
    389a:	4640      	mov	r0, r8
    389c:	47a0      	blx	r4
	
	
	RS(neuron2_normal);
    389e:	4638      	mov	r0, r7
    38a0:	47a8      	blx	r5
	force_parameters(neuron2_normal);
    38a2:	4638      	mov	r0, r7
    38a4:	47a0      	blx	r4
	
	RS(neuron2_shear);
    38a6:	4630      	mov	r0, r6
    38a8:	47a8      	blx	r5
	force_parameters(neuron2_shear);
    38aa:	4630      	mov	r0, r6
    38ac:	47a0      	blx	r4
	
	
	RS(neuron3_normal);
    38ae:	9806      	ldr	r0, [sp, #24]
    38b0:	47a8      	blx	r5
	force_parameters(neuron3_normal);
    38b2:	9806      	ldr	r0, [sp, #24]
    38b4:	47a0      	blx	r4
	
	RS(neuron3_shear);
    38b6:	9807      	ldr	r0, [sp, #28]
    38b8:	47a8      	blx	r5
	force_parameters(neuron3_shear);
    38ba:	9807      	ldr	r0, [sp, #28]
    38bc:	47a0      	blx	r4
    38be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38c2:	bf00      	nop
    38c4:	000036b9 	.word	0x000036b9
    38c8:	000036e9 	.word	0x000036e9

000038cc <neuron_calc>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}

void neuron_calc(struct sensorRow_Values *sensor_row, struct fneuron_t *neuron1_normal, struct fneuron_t *neuron1_shear, struct fneuron_t *neuron2_normal, struct fneuron_t *neuron2_shear, struct fneuron_t *neuron3_normal, struct fneuron_t *neuron3_shear){
    38cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d0:	4605      	mov	r5, r0
    38d2:	460c      	mov	r4, r1
    38d4:	4691      	mov	r9, r2
    38d6:	4698      	mov	r8, r3
    38d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    38da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	
	calc_current_normal_force(neuron1_normal,sensor_row->force_z_top);
    38dc:	68c1      	ldr	r1, [r0, #12]
    38de:	4620      	mov	r0, r4
    38e0:	f8df b068 	ldr.w	fp, [pc, #104]	; 394c <neuron_calc+0x80>
    38e4:	47d8      	blx	fp
	calc_current_shear_force(neuron1_shear,sensor_row->force_r_top);
    38e6:	69a9      	ldr	r1, [r5, #24]
    38e8:	4648      	mov	r0, r9
    38ea:	f8df a064 	ldr.w	sl, [pc, #100]	; 3950 <neuron_calc+0x84>
    38ee:	47d0      	blx	sl
	step_f(neuron1_normal, neuron1_normal->cell_current, neuron1_normal->timestep_neuron);
    38f0:	69e2      	ldr	r2, [r4, #28]
    38f2:	69a1      	ldr	r1, [r4, #24]
    38f4:	4620      	mov	r0, r4
    38f6:	4c14      	ldr	r4, [pc, #80]	; (3948 <neuron_calc+0x7c>)
    38f8:	47a0      	blx	r4
	step_f(neuron1_shear, neuron1_shear->cell_current, neuron1_shear->timestep_neuron);
    38fa:	f8d9 201c 	ldr.w	r2, [r9, #28]
    38fe:	f8d9 1018 	ldr.w	r1, [r9, #24]
    3902:	4648      	mov	r0, r9
    3904:	47a0      	blx	r4
	
	calc_current_normal_force(neuron2_normal,sensor_row->force_z_middle);
    3906:	6929      	ldr	r1, [r5, #16]
    3908:	4640      	mov	r0, r8
    390a:	47d8      	blx	fp
	calc_current_shear_force(neuron2_shear,sensor_row->force_r_middle);
    390c:	69e9      	ldr	r1, [r5, #28]
    390e:	4638      	mov	r0, r7
    3910:	47d0      	blx	sl
	step_f(neuron2_normal, neuron2_normal->cell_current, neuron2_normal->timestep_neuron);
    3912:	f8d8 201c 	ldr.w	r2, [r8, #28]
    3916:	f8d8 1018 	ldr.w	r1, [r8, #24]
    391a:	4640      	mov	r0, r8
    391c:	47a0      	blx	r4
	step_f(neuron2_shear, neuron2_shear->cell_current, neuron2_shear->timestep_neuron);
    391e:	69fa      	ldr	r2, [r7, #28]
    3920:	69b9      	ldr	r1, [r7, #24]
    3922:	4638      	mov	r0, r7
    3924:	47a0      	blx	r4
	
	calc_current_normal_force(neuron3_normal,sensor_row->force_z_bottom);
    3926:	6969      	ldr	r1, [r5, #20]
    3928:	4630      	mov	r0, r6
    392a:	47d8      	blx	fp
	calc_current_shear_force(neuron3_shear,sensor_row->force_r_bottom);
    392c:	6a29      	ldr	r1, [r5, #32]
    392e:	980c      	ldr	r0, [sp, #48]	; 0x30
    3930:	47d0      	blx	sl
	step_f(neuron3_normal, neuron3_normal->cell_current, neuron3_normal->timestep_neuron);
    3932:	69f2      	ldr	r2, [r6, #28]
    3934:	69b1      	ldr	r1, [r6, #24]
    3936:	4630      	mov	r0, r6
    3938:	47a0      	blx	r4
	step_f(neuron3_shear, neuron3_shear->cell_current, neuron3_shear->timestep_neuron);
    393a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    393c:	69da      	ldr	r2, [r3, #28]
    393e:	6999      	ldr	r1, [r3, #24]
    3940:	4618      	mov	r0, r3
    3942:	47a0      	blx	r4
    3944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3948:	00003751 	.word	0x00003751
    394c:	00003711 	.word	0x00003711
    3950:	0000372f 	.word	0x0000372f

00003954 <sqrt>:
    3954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3958:	b08b      	sub	sp, #44	; 0x2c
    395a:	4604      	mov	r4, r0
    395c:	460d      	mov	r5, r1
    395e:	f000 f857 	bl	3a10 <__ieee754_sqrt>
    3962:	4b29      	ldr	r3, [pc, #164]	; (3a08 <sqrt+0xb4>)
    3964:	f993 a000 	ldrsb.w	sl, [r3]
    3968:	f1ba 3fff 	cmp.w	sl, #4294967295
    396c:	4606      	mov	r6, r0
    396e:	460f      	mov	r7, r1
    3970:	d012      	beq.n	3998 <sqrt+0x44>
    3972:	4622      	mov	r2, r4
    3974:	462b      	mov	r3, r5
    3976:	4620      	mov	r0, r4
    3978:	4629      	mov	r1, r5
    397a:	f000 fd59 	bl	4430 <__aeabi_dcmpun>
    397e:	4683      	mov	fp, r0
    3980:	b950      	cbnz	r0, 3998 <sqrt+0x44>
    3982:	f04f 0800 	mov.w	r8, #0
    3986:	f04f 0900 	mov.w	r9, #0
    398a:	4642      	mov	r2, r8
    398c:	464b      	mov	r3, r9
    398e:	4620      	mov	r0, r4
    3990:	4629      	mov	r1, r5
    3992:	f000 fd25 	bl	43e0 <__aeabi_dcmplt>
    3996:	b920      	cbnz	r0, 39a2 <sqrt+0x4e>
    3998:	4630      	mov	r0, r6
    399a:	4639      	mov	r1, r7
    399c:	b00b      	add	sp, #44	; 0x2c
    399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39a2:	4b1a      	ldr	r3, [pc, #104]	; (3a0c <sqrt+0xb8>)
    39a4:	f8cd b020 	str.w	fp, [sp, #32]
    39a8:	2201      	movs	r2, #1
    39aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
    39ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
    39b2:	e88d 000c 	stmia.w	sp, {r2, r3}
    39b6:	f1ba 0f00 	cmp.w	sl, #0
    39ba:	d017      	beq.n	39ec <sqrt+0x98>
    39bc:	4642      	mov	r2, r8
    39be:	464b      	mov	r3, r9
    39c0:	4640      	mov	r0, r8
    39c2:	4649      	mov	r1, r9
    39c4:	f000 fbc4 	bl	4150 <__aeabi_ddiv>
    39c8:	f1ba 0f02 	cmp.w	sl, #2
    39cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    39d0:	d10e      	bne.n	39f0 <sqrt+0x9c>
    39d2:	f000 fd93 	bl	44fc <__errno>
    39d6:	2321      	movs	r3, #33	; 0x21
    39d8:	6003      	str	r3, [r0, #0]
    39da:	9b08      	ldr	r3, [sp, #32]
    39dc:	b973      	cbnz	r3, 39fc <sqrt+0xa8>
    39de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    39e2:	4630      	mov	r0, r6
    39e4:	4639      	mov	r1, r7
    39e6:	b00b      	add	sp, #44	; 0x2c
    39e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
    39f0:	4668      	mov	r0, sp
    39f2:	f000 f8c9 	bl	3b88 <matherr>
    39f6:	2800      	cmp	r0, #0
    39f8:	d1ef      	bne.n	39da <sqrt+0x86>
    39fa:	e7ea      	b.n	39d2 <sqrt+0x7e>
    39fc:	f000 fd7e 	bl	44fc <__errno>
    3a00:	9b08      	ldr	r3, [sp, #32]
    3a02:	6003      	str	r3, [r0, #0]
    3a04:	e7eb      	b.n	39de <sqrt+0x8a>
    3a06:	bf00      	nop
    3a08:	20000072 	.word	0x20000072
    3a0c:	000047c0 	.word	0x000047c0

00003a10 <__ieee754_sqrt>:
    3a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a14:	4f5b      	ldr	r7, [pc, #364]	; (3b84 <__ieee754_sqrt+0x174>)
    3a16:	438f      	bics	r7, r1
    3a18:	4605      	mov	r5, r0
    3a1a:	460c      	mov	r4, r1
    3a1c:	f000 8092 	beq.w	3b44 <__ieee754_sqrt+0x134>
    3a20:	2900      	cmp	r1, #0
    3a22:	460b      	mov	r3, r1
    3a24:	4602      	mov	r2, r0
    3a26:	dd6f      	ble.n	3b08 <__ieee754_sqrt+0xf8>
    3a28:	150f      	asrs	r7, r1, #20
    3a2a:	d07b      	beq.n	3b24 <__ieee754_sqrt+0x114>
    3a2c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    3a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3a34:	07f8      	lsls	r0, r7, #31
    3a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3a3a:	d45c      	bmi.n	3af6 <__ieee754_sqrt+0xe6>
    3a3c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    3a40:	2600      	movs	r6, #0
    3a42:	440b      	add	r3, r1
    3a44:	107f      	asrs	r7, r7, #1
    3a46:	0052      	lsls	r2, r2, #1
    3a48:	46b6      	mov	lr, r6
    3a4a:	2016      	movs	r0, #22
    3a4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    3a50:	eb0e 0401 	add.w	r4, lr, r1
    3a54:	429c      	cmp	r4, r3
    3a56:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    3a5a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3a5e:	dc03      	bgt.n	3a68 <__ieee754_sqrt+0x58>
    3a60:	1b1b      	subs	r3, r3, r4
    3a62:	eb04 0e01 	add.w	lr, r4, r1
    3a66:	440e      	add	r6, r1
    3a68:	3801      	subs	r0, #1
    3a6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3a6e:	ea4f 0151 	mov.w	r1, r1, lsr #1
    3a72:	d1ed      	bne.n	3a50 <__ieee754_sqrt+0x40>
    3a74:	4684      	mov	ip, r0
    3a76:	2420      	movs	r4, #32
    3a78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3a7c:	e009      	b.n	3a92 <__ieee754_sqrt+0x82>
    3a7e:	d020      	beq.n	3ac2 <__ieee754_sqrt+0xb2>
    3a80:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    3a84:	3c01      	subs	r4, #1
    3a86:	ea4f 0151 	mov.w	r1, r1, lsr #1
    3a8a:	442b      	add	r3, r5
    3a8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3a90:	d020      	beq.n	3ad4 <__ieee754_sqrt+0xc4>
    3a92:	4573      	cmp	r3, lr
    3a94:	eb01 050c 	add.w	r5, r1, ip
    3a98:	ddf1      	ble.n	3a7e <__ieee754_sqrt+0x6e>
    3a9a:	2d00      	cmp	r5, #0
    3a9c:	eb05 0c01 	add.w	ip, r5, r1
    3aa0:	db09      	blt.n	3ab6 <__ieee754_sqrt+0xa6>
    3aa2:	46f0      	mov	r8, lr
    3aa4:	4295      	cmp	r5, r2
    3aa6:	eba3 030e 	sub.w	r3, r3, lr
    3aaa:	d900      	bls.n	3aae <__ieee754_sqrt+0x9e>
    3aac:	3b01      	subs	r3, #1
    3aae:	1b52      	subs	r2, r2, r5
    3ab0:	4408      	add	r0, r1
    3ab2:	46c6      	mov	lr, r8
    3ab4:	e7e4      	b.n	3a80 <__ieee754_sqrt+0x70>
    3ab6:	f1bc 0f00 	cmp.w	ip, #0
    3aba:	dbf2      	blt.n	3aa2 <__ieee754_sqrt+0x92>
    3abc:	f10e 0801 	add.w	r8, lr, #1
    3ac0:	e7f0      	b.n	3aa4 <__ieee754_sqrt+0x94>
    3ac2:	4295      	cmp	r5, r2
    3ac4:	d8dc      	bhi.n	3a80 <__ieee754_sqrt+0x70>
    3ac6:	2d00      	cmp	r5, #0
    3ac8:	eb05 0c01 	add.w	ip, r5, r1
    3acc:	db44      	blt.n	3b58 <__ieee754_sqrt+0x148>
    3ace:	4698      	mov	r8, r3
    3ad0:	2300      	movs	r3, #0
    3ad2:	e7ec      	b.n	3aae <__ieee754_sqrt+0x9e>
    3ad4:	4313      	orrs	r3, r2
    3ad6:	d113      	bne.n	3b00 <__ieee754_sqrt+0xf0>
    3ad8:	0840      	lsrs	r0, r0, #1
    3ada:	1073      	asrs	r3, r6, #1
    3adc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    3ae0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3ae4:	07f2      	lsls	r2, r6, #31
    3ae6:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    3aea:	bf48      	it	mi
    3aec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    3af0:	4649      	mov	r1, r9
    3af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3af6:	005b      	lsls	r3, r3, #1
    3af8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    3afc:	0052      	lsls	r2, r2, #1
    3afe:	e79d      	b.n	3a3c <__ieee754_sqrt+0x2c>
    3b00:	1c41      	adds	r1, r0, #1
    3b02:	d02d      	beq.n	3b60 <__ieee754_sqrt+0x150>
    3b04:	3001      	adds	r0, #1
    3b06:	e7e7      	b.n	3ad8 <__ieee754_sqrt+0xc8>
    3b08:	4606      	mov	r6, r0
    3b0a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    3b0e:	433e      	orrs	r6, r7
    3b10:	d0ef      	beq.n	3af2 <__ieee754_sqrt+0xe2>
    3b12:	bb69      	cbnz	r1, 3b70 <__ieee754_sqrt+0x160>
    3b14:	460f      	mov	r7, r1
    3b16:	0ad3      	lsrs	r3, r2, #11
    3b18:	3f15      	subs	r7, #21
    3b1a:	0552      	lsls	r2, r2, #21
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d0fa      	beq.n	3b16 <__ieee754_sqrt+0x106>
    3b20:	02de      	lsls	r6, r3, #11
    3b22:	d420      	bmi.n	3b66 <__ieee754_sqrt+0x156>
    3b24:	2400      	movs	r4, #0
    3b26:	e000      	b.n	3b2a <__ieee754_sqrt+0x11a>
    3b28:	4604      	mov	r4, r0
    3b2a:	005b      	lsls	r3, r3, #1
    3b2c:	02dd      	lsls	r5, r3, #11
    3b2e:	f104 0001 	add.w	r0, r4, #1
    3b32:	d5f9      	bpl.n	3b28 <__ieee754_sqrt+0x118>
    3b34:	f1c0 0120 	rsb	r1, r0, #32
    3b38:	fa22 f101 	lsr.w	r1, r2, r1
    3b3c:	430b      	orrs	r3, r1
    3b3e:	1b3f      	subs	r7, r7, r4
    3b40:	4082      	lsls	r2, r0
    3b42:	e773      	b.n	3a2c <__ieee754_sqrt+0x1c>
    3b44:	4602      	mov	r2, r0
    3b46:	460b      	mov	r3, r1
    3b48:	f000 f9d8 	bl	3efc <__aeabi_dmul>
    3b4c:	462a      	mov	r2, r5
    3b4e:	4623      	mov	r3, r4
    3b50:	f000 f822 	bl	3b98 <__adddf3>
    3b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b58:	f1bc 0f00 	cmp.w	ip, #0
    3b5c:	daae      	bge.n	3abc <__ieee754_sqrt+0xac>
    3b5e:	e7b6      	b.n	3ace <__ieee754_sqrt+0xbe>
    3b60:	3601      	adds	r6, #1
    3b62:	4620      	mov	r0, r4
    3b64:	e7b9      	b.n	3ada <__ieee754_sqrt+0xca>
    3b66:	2000      	movs	r0, #0
    3b68:	2120      	movs	r1, #32
    3b6a:	f04f 34ff 	mov.w	r4, #4294967295
    3b6e:	e7e3      	b.n	3b38 <__ieee754_sqrt+0x128>
    3b70:	4602      	mov	r2, r0
    3b72:	460b      	mov	r3, r1
    3b74:	f000 f80e 	bl	3b94 <__aeabi_dsub>
    3b78:	4602      	mov	r2, r0
    3b7a:	460b      	mov	r3, r1
    3b7c:	f000 fae8 	bl	4150 <__aeabi_ddiv>
    3b80:	e7b7      	b.n	3af2 <__ieee754_sqrt+0xe2>
    3b82:	bf00      	nop
    3b84:	7ff00000 	.word	0x7ff00000

00003b88 <matherr>:
    3b88:	2000      	movs	r0, #0
    3b8a:	4770      	bx	lr

00003b8c <__aeabi_drsub>:
    3b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3b90:	e002      	b.n	3b98 <__adddf3>
    3b92:	bf00      	nop

00003b94 <__aeabi_dsub>:
    3b94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003b98 <__adddf3>:
    3b98:	b530      	push	{r4, r5, lr}
    3b9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3b9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3ba2:	ea94 0f05 	teq	r4, r5
    3ba6:	bf08      	it	eq
    3ba8:	ea90 0f02 	teqeq	r0, r2
    3bac:	bf1f      	itttt	ne
    3bae:	ea54 0c00 	orrsne.w	ip, r4, r0
    3bb2:	ea55 0c02 	orrsne.w	ip, r5, r2
    3bb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3bba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3bbe:	f000 80e2 	beq.w	3d86 <__adddf3+0x1ee>
    3bc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3bc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3bca:	bfb8      	it	lt
    3bcc:	426d      	neglt	r5, r5
    3bce:	dd0c      	ble.n	3bea <__adddf3+0x52>
    3bd0:	442c      	add	r4, r5
    3bd2:	ea80 0202 	eor.w	r2, r0, r2
    3bd6:	ea81 0303 	eor.w	r3, r1, r3
    3bda:	ea82 0000 	eor.w	r0, r2, r0
    3bde:	ea83 0101 	eor.w	r1, r3, r1
    3be2:	ea80 0202 	eor.w	r2, r0, r2
    3be6:	ea81 0303 	eor.w	r3, r1, r3
    3bea:	2d36      	cmp	r5, #54	; 0x36
    3bec:	bf88      	it	hi
    3bee:	bd30      	pophi	{r4, r5, pc}
    3bf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3bf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3bf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3bfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3c00:	d002      	beq.n	3c08 <__adddf3+0x70>
    3c02:	4240      	negs	r0, r0
    3c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3c08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3c0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3c10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3c14:	d002      	beq.n	3c1c <__adddf3+0x84>
    3c16:	4252      	negs	r2, r2
    3c18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3c1c:	ea94 0f05 	teq	r4, r5
    3c20:	f000 80a7 	beq.w	3d72 <__adddf3+0x1da>
    3c24:	f1a4 0401 	sub.w	r4, r4, #1
    3c28:	f1d5 0e20 	rsbs	lr, r5, #32
    3c2c:	db0d      	blt.n	3c4a <__adddf3+0xb2>
    3c2e:	fa02 fc0e 	lsl.w	ip, r2, lr
    3c32:	fa22 f205 	lsr.w	r2, r2, r5
    3c36:	1880      	adds	r0, r0, r2
    3c38:	f141 0100 	adc.w	r1, r1, #0
    3c3c:	fa03 f20e 	lsl.w	r2, r3, lr
    3c40:	1880      	adds	r0, r0, r2
    3c42:	fa43 f305 	asr.w	r3, r3, r5
    3c46:	4159      	adcs	r1, r3
    3c48:	e00e      	b.n	3c68 <__adddf3+0xd0>
    3c4a:	f1a5 0520 	sub.w	r5, r5, #32
    3c4e:	f10e 0e20 	add.w	lr, lr, #32
    3c52:	2a01      	cmp	r2, #1
    3c54:	fa03 fc0e 	lsl.w	ip, r3, lr
    3c58:	bf28      	it	cs
    3c5a:	f04c 0c02 	orrcs.w	ip, ip, #2
    3c5e:	fa43 f305 	asr.w	r3, r3, r5
    3c62:	18c0      	adds	r0, r0, r3
    3c64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3c6c:	d507      	bpl.n	3c7e <__adddf3+0xe6>
    3c6e:	f04f 0e00 	mov.w	lr, #0
    3c72:	f1dc 0c00 	rsbs	ip, ip, #0
    3c76:	eb7e 0000 	sbcs.w	r0, lr, r0
    3c7a:	eb6e 0101 	sbc.w	r1, lr, r1
    3c7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3c82:	d31b      	bcc.n	3cbc <__adddf3+0x124>
    3c84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3c88:	d30c      	bcc.n	3ca4 <__adddf3+0x10c>
    3c8a:	0849      	lsrs	r1, r1, #1
    3c8c:	ea5f 0030 	movs.w	r0, r0, rrx
    3c90:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3c94:	f104 0401 	add.w	r4, r4, #1
    3c98:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3c9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3ca0:	f080 809a 	bcs.w	3dd8 <__adddf3+0x240>
    3ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3ca8:	bf08      	it	eq
    3caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3cae:	f150 0000 	adcs.w	r0, r0, #0
    3cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3cb6:	ea41 0105 	orr.w	r1, r1, r5
    3cba:	bd30      	pop	{r4, r5, pc}
    3cbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3cc0:	4140      	adcs	r0, r0
    3cc2:	eb41 0101 	adc.w	r1, r1, r1
    3cc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3cca:	f1a4 0401 	sub.w	r4, r4, #1
    3cce:	d1e9      	bne.n	3ca4 <__adddf3+0x10c>
    3cd0:	f091 0f00 	teq	r1, #0
    3cd4:	bf04      	itt	eq
    3cd6:	4601      	moveq	r1, r0
    3cd8:	2000      	moveq	r0, #0
    3cda:	fab1 f381 	clz	r3, r1
    3cde:	bf08      	it	eq
    3ce0:	3320      	addeq	r3, #32
    3ce2:	f1a3 030b 	sub.w	r3, r3, #11
    3ce6:	f1b3 0220 	subs.w	r2, r3, #32
    3cea:	da0c      	bge.n	3d06 <__adddf3+0x16e>
    3cec:	320c      	adds	r2, #12
    3cee:	dd08      	ble.n	3d02 <__adddf3+0x16a>
    3cf0:	f102 0c14 	add.w	ip, r2, #20
    3cf4:	f1c2 020c 	rsb	r2, r2, #12
    3cf8:	fa01 f00c 	lsl.w	r0, r1, ip
    3cfc:	fa21 f102 	lsr.w	r1, r1, r2
    3d00:	e00c      	b.n	3d1c <__adddf3+0x184>
    3d02:	f102 0214 	add.w	r2, r2, #20
    3d06:	bfd8      	it	le
    3d08:	f1c2 0c20 	rsble	ip, r2, #32
    3d0c:	fa01 f102 	lsl.w	r1, r1, r2
    3d10:	fa20 fc0c 	lsr.w	ip, r0, ip
    3d14:	bfdc      	itt	le
    3d16:	ea41 010c 	orrle.w	r1, r1, ip
    3d1a:	4090      	lslle	r0, r2
    3d1c:	1ae4      	subs	r4, r4, r3
    3d1e:	bfa2      	ittt	ge
    3d20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    3d24:	4329      	orrge	r1, r5
    3d26:	bd30      	popge	{r4, r5, pc}
    3d28:	ea6f 0404 	mvn.w	r4, r4
    3d2c:	3c1f      	subs	r4, #31
    3d2e:	da1c      	bge.n	3d6a <__adddf3+0x1d2>
    3d30:	340c      	adds	r4, #12
    3d32:	dc0e      	bgt.n	3d52 <__adddf3+0x1ba>
    3d34:	f104 0414 	add.w	r4, r4, #20
    3d38:	f1c4 0220 	rsb	r2, r4, #32
    3d3c:	fa20 f004 	lsr.w	r0, r0, r4
    3d40:	fa01 f302 	lsl.w	r3, r1, r2
    3d44:	ea40 0003 	orr.w	r0, r0, r3
    3d48:	fa21 f304 	lsr.w	r3, r1, r4
    3d4c:	ea45 0103 	orr.w	r1, r5, r3
    3d50:	bd30      	pop	{r4, r5, pc}
    3d52:	f1c4 040c 	rsb	r4, r4, #12
    3d56:	f1c4 0220 	rsb	r2, r4, #32
    3d5a:	fa20 f002 	lsr.w	r0, r0, r2
    3d5e:	fa01 f304 	lsl.w	r3, r1, r4
    3d62:	ea40 0003 	orr.w	r0, r0, r3
    3d66:	4629      	mov	r1, r5
    3d68:	bd30      	pop	{r4, r5, pc}
    3d6a:	fa21 f004 	lsr.w	r0, r1, r4
    3d6e:	4629      	mov	r1, r5
    3d70:	bd30      	pop	{r4, r5, pc}
    3d72:	f094 0f00 	teq	r4, #0
    3d76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3d7a:	bf06      	itte	eq
    3d7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3d80:	3401      	addeq	r4, #1
    3d82:	3d01      	subne	r5, #1
    3d84:	e74e      	b.n	3c24 <__adddf3+0x8c>
    3d86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3d8a:	bf18      	it	ne
    3d8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3d90:	d029      	beq.n	3de6 <__adddf3+0x24e>
    3d92:	ea94 0f05 	teq	r4, r5
    3d96:	bf08      	it	eq
    3d98:	ea90 0f02 	teqeq	r0, r2
    3d9c:	d005      	beq.n	3daa <__adddf3+0x212>
    3d9e:	ea54 0c00 	orrs.w	ip, r4, r0
    3da2:	bf04      	itt	eq
    3da4:	4619      	moveq	r1, r3
    3da6:	4610      	moveq	r0, r2
    3da8:	bd30      	pop	{r4, r5, pc}
    3daa:	ea91 0f03 	teq	r1, r3
    3dae:	bf1e      	ittt	ne
    3db0:	2100      	movne	r1, #0
    3db2:	2000      	movne	r0, #0
    3db4:	bd30      	popne	{r4, r5, pc}
    3db6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3dba:	d105      	bne.n	3dc8 <__adddf3+0x230>
    3dbc:	0040      	lsls	r0, r0, #1
    3dbe:	4149      	adcs	r1, r1
    3dc0:	bf28      	it	cs
    3dc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3dc6:	bd30      	pop	{r4, r5, pc}
    3dc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3dcc:	bf3c      	itt	cc
    3dce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3dd2:	bd30      	popcc	{r4, r5, pc}
    3dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3dd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3ddc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3de0:	f04f 0000 	mov.w	r0, #0
    3de4:	bd30      	pop	{r4, r5, pc}
    3de6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3dea:	bf1a      	itte	ne
    3dec:	4619      	movne	r1, r3
    3dee:	4610      	movne	r0, r2
    3df0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3df4:	bf1c      	itt	ne
    3df6:	460b      	movne	r3, r1
    3df8:	4602      	movne	r2, r0
    3dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3dfe:	bf06      	itte	eq
    3e00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3e04:	ea91 0f03 	teqeq	r1, r3
    3e08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3e0c:	bd30      	pop	{r4, r5, pc}
    3e0e:	bf00      	nop

00003e10 <__aeabi_ui2d>:
    3e10:	f090 0f00 	teq	r0, #0
    3e14:	bf04      	itt	eq
    3e16:	2100      	moveq	r1, #0
    3e18:	4770      	bxeq	lr
    3e1a:	b530      	push	{r4, r5, lr}
    3e1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3e20:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3e24:	f04f 0500 	mov.w	r5, #0
    3e28:	f04f 0100 	mov.w	r1, #0
    3e2c:	e750      	b.n	3cd0 <__adddf3+0x138>
    3e2e:	bf00      	nop

00003e30 <__aeabi_i2d>:
    3e30:	f090 0f00 	teq	r0, #0
    3e34:	bf04      	itt	eq
    3e36:	2100      	moveq	r1, #0
    3e38:	4770      	bxeq	lr
    3e3a:	b530      	push	{r4, r5, lr}
    3e3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3e40:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3e44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3e48:	bf48      	it	mi
    3e4a:	4240      	negmi	r0, r0
    3e4c:	f04f 0100 	mov.w	r1, #0
    3e50:	e73e      	b.n	3cd0 <__adddf3+0x138>
    3e52:	bf00      	nop

00003e54 <__aeabi_f2d>:
    3e54:	0042      	lsls	r2, r0, #1
    3e56:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3e5a:	ea4f 0131 	mov.w	r1, r1, rrx
    3e5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3e62:	bf1f      	itttt	ne
    3e64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3e6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3e70:	4770      	bxne	lr
    3e72:	f092 0f00 	teq	r2, #0
    3e76:	bf14      	ite	ne
    3e78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3e7c:	4770      	bxeq	lr
    3e7e:	b530      	push	{r4, r5, lr}
    3e80:	f44f 7460 	mov.w	r4, #896	; 0x380
    3e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3e88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3e8c:	e720      	b.n	3cd0 <__adddf3+0x138>
    3e8e:	bf00      	nop

00003e90 <__aeabi_ul2d>:
    3e90:	ea50 0201 	orrs.w	r2, r0, r1
    3e94:	bf08      	it	eq
    3e96:	4770      	bxeq	lr
    3e98:	b530      	push	{r4, r5, lr}
    3e9a:	f04f 0500 	mov.w	r5, #0
    3e9e:	e00a      	b.n	3eb6 <__aeabi_l2d+0x16>

00003ea0 <__aeabi_l2d>:
    3ea0:	ea50 0201 	orrs.w	r2, r0, r1
    3ea4:	bf08      	it	eq
    3ea6:	4770      	bxeq	lr
    3ea8:	b530      	push	{r4, r5, lr}
    3eaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3eae:	d502      	bpl.n	3eb6 <__aeabi_l2d+0x16>
    3eb0:	4240      	negs	r0, r0
    3eb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3eb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3eba:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3ebe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3ec2:	f43f aedc 	beq.w	3c7e <__adddf3+0xe6>
    3ec6:	f04f 0203 	mov.w	r2, #3
    3eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3ece:	bf18      	it	ne
    3ed0:	3203      	addne	r2, #3
    3ed2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3ed6:	bf18      	it	ne
    3ed8:	3203      	addne	r2, #3
    3eda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3ede:	f1c2 0320 	rsb	r3, r2, #32
    3ee2:	fa00 fc03 	lsl.w	ip, r0, r3
    3ee6:	fa20 f002 	lsr.w	r0, r0, r2
    3eea:	fa01 fe03 	lsl.w	lr, r1, r3
    3eee:	ea40 000e 	orr.w	r0, r0, lr
    3ef2:	fa21 f102 	lsr.w	r1, r1, r2
    3ef6:	4414      	add	r4, r2
    3ef8:	e6c1      	b.n	3c7e <__adddf3+0xe6>
    3efa:	bf00      	nop

00003efc <__aeabi_dmul>:
    3efc:	b570      	push	{r4, r5, r6, lr}
    3efe:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3f02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3f06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3f0a:	bf1d      	ittte	ne
    3f0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3f10:	ea94 0f0c 	teqne	r4, ip
    3f14:	ea95 0f0c 	teqne	r5, ip
    3f18:	f000 f8de 	bleq	40d8 <__aeabi_dmul+0x1dc>
    3f1c:	442c      	add	r4, r5
    3f1e:	ea81 0603 	eor.w	r6, r1, r3
    3f22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3f26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3f2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3f2e:	bf18      	it	ne
    3f30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3f3c:	d038      	beq.n	3fb0 <__aeabi_dmul+0xb4>
    3f3e:	fba0 ce02 	umull	ip, lr, r0, r2
    3f42:	f04f 0500 	mov.w	r5, #0
    3f46:	fbe1 e502 	umlal	lr, r5, r1, r2
    3f4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3f4e:	fbe0 e503 	umlal	lr, r5, r0, r3
    3f52:	f04f 0600 	mov.w	r6, #0
    3f56:	fbe1 5603 	umlal	r5, r6, r1, r3
    3f5a:	f09c 0f00 	teq	ip, #0
    3f5e:	bf18      	it	ne
    3f60:	f04e 0e01 	orrne.w	lr, lr, #1
    3f64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3f68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3f6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3f70:	d204      	bcs.n	3f7c <__aeabi_dmul+0x80>
    3f72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3f76:	416d      	adcs	r5, r5
    3f78:	eb46 0606 	adc.w	r6, r6, r6
    3f7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3f80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3f84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3f88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3f8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3f90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3f94:	bf88      	it	hi
    3f96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3f9a:	d81e      	bhi.n	3fda <__aeabi_dmul+0xde>
    3f9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3fa0:	bf08      	it	eq
    3fa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3fa6:	f150 0000 	adcs.w	r0, r0, #0
    3faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3fae:	bd70      	pop	{r4, r5, r6, pc}
    3fb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3fb4:	ea46 0101 	orr.w	r1, r6, r1
    3fb8:	ea40 0002 	orr.w	r0, r0, r2
    3fbc:	ea81 0103 	eor.w	r1, r1, r3
    3fc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3fc4:	bfc2      	ittt	gt
    3fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
    3fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3fce:	bd70      	popgt	{r4, r5, r6, pc}
    3fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3fd4:	f04f 0e00 	mov.w	lr, #0
    3fd8:	3c01      	subs	r4, #1
    3fda:	f300 80ab 	bgt.w	4134 <__aeabi_dmul+0x238>
    3fde:	f114 0f36 	cmn.w	r4, #54	; 0x36
    3fe2:	bfde      	ittt	le
    3fe4:	2000      	movle	r0, #0
    3fe6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3fea:	bd70      	pople	{r4, r5, r6, pc}
    3fec:	f1c4 0400 	rsb	r4, r4, #0
    3ff0:	3c20      	subs	r4, #32
    3ff2:	da35      	bge.n	4060 <__aeabi_dmul+0x164>
    3ff4:	340c      	adds	r4, #12
    3ff6:	dc1b      	bgt.n	4030 <__aeabi_dmul+0x134>
    3ff8:	f104 0414 	add.w	r4, r4, #20
    3ffc:	f1c4 0520 	rsb	r5, r4, #32
    4000:	fa00 f305 	lsl.w	r3, r0, r5
    4004:	fa20 f004 	lsr.w	r0, r0, r4
    4008:	fa01 f205 	lsl.w	r2, r1, r5
    400c:	ea40 0002 	orr.w	r0, r0, r2
    4010:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    401c:	fa21 f604 	lsr.w	r6, r1, r4
    4020:	eb42 0106 	adc.w	r1, r2, r6
    4024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4028:	bf08      	it	eq
    402a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    402e:	bd70      	pop	{r4, r5, r6, pc}
    4030:	f1c4 040c 	rsb	r4, r4, #12
    4034:	f1c4 0520 	rsb	r5, r4, #32
    4038:	fa00 f304 	lsl.w	r3, r0, r4
    403c:	fa20 f005 	lsr.w	r0, r0, r5
    4040:	fa01 f204 	lsl.w	r2, r1, r4
    4044:	ea40 0002 	orr.w	r0, r0, r2
    4048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    404c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4050:	f141 0100 	adc.w	r1, r1, #0
    4054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4058:	bf08      	it	eq
    405a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    405e:	bd70      	pop	{r4, r5, r6, pc}
    4060:	f1c4 0520 	rsb	r5, r4, #32
    4064:	fa00 f205 	lsl.w	r2, r0, r5
    4068:	ea4e 0e02 	orr.w	lr, lr, r2
    406c:	fa20 f304 	lsr.w	r3, r0, r4
    4070:	fa01 f205 	lsl.w	r2, r1, r5
    4074:	ea43 0302 	orr.w	r3, r3, r2
    4078:	fa21 f004 	lsr.w	r0, r1, r4
    407c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4080:	fa21 f204 	lsr.w	r2, r1, r4
    4084:	ea20 0002 	bic.w	r0, r0, r2
    4088:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    408c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4090:	bf08      	it	eq
    4092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4096:	bd70      	pop	{r4, r5, r6, pc}
    4098:	f094 0f00 	teq	r4, #0
    409c:	d10f      	bne.n	40be <__aeabi_dmul+0x1c2>
    409e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    40a2:	0040      	lsls	r0, r0, #1
    40a4:	eb41 0101 	adc.w	r1, r1, r1
    40a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    40ac:	bf08      	it	eq
    40ae:	3c01      	subeq	r4, #1
    40b0:	d0f7      	beq.n	40a2 <__aeabi_dmul+0x1a6>
    40b2:	ea41 0106 	orr.w	r1, r1, r6
    40b6:	f095 0f00 	teq	r5, #0
    40ba:	bf18      	it	ne
    40bc:	4770      	bxne	lr
    40be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    40c2:	0052      	lsls	r2, r2, #1
    40c4:	eb43 0303 	adc.w	r3, r3, r3
    40c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    40cc:	bf08      	it	eq
    40ce:	3d01      	subeq	r5, #1
    40d0:	d0f7      	beq.n	40c2 <__aeabi_dmul+0x1c6>
    40d2:	ea43 0306 	orr.w	r3, r3, r6
    40d6:	4770      	bx	lr
    40d8:	ea94 0f0c 	teq	r4, ip
    40dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    40e0:	bf18      	it	ne
    40e2:	ea95 0f0c 	teqne	r5, ip
    40e6:	d00c      	beq.n	4102 <__aeabi_dmul+0x206>
    40e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    40ec:	bf18      	it	ne
    40ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    40f2:	d1d1      	bne.n	4098 <__aeabi_dmul+0x19c>
    40f4:	ea81 0103 	eor.w	r1, r1, r3
    40f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    40fc:	f04f 0000 	mov.w	r0, #0
    4100:	bd70      	pop	{r4, r5, r6, pc}
    4102:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4106:	bf06      	itte	eq
    4108:	4610      	moveq	r0, r2
    410a:	4619      	moveq	r1, r3
    410c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4110:	d019      	beq.n	4146 <__aeabi_dmul+0x24a>
    4112:	ea94 0f0c 	teq	r4, ip
    4116:	d102      	bne.n	411e <__aeabi_dmul+0x222>
    4118:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    411c:	d113      	bne.n	4146 <__aeabi_dmul+0x24a>
    411e:	ea95 0f0c 	teq	r5, ip
    4122:	d105      	bne.n	4130 <__aeabi_dmul+0x234>
    4124:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4128:	bf1c      	itt	ne
    412a:	4610      	movne	r0, r2
    412c:	4619      	movne	r1, r3
    412e:	d10a      	bne.n	4146 <__aeabi_dmul+0x24a>
    4130:	ea81 0103 	eor.w	r1, r1, r3
    4134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4138:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    413c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4140:	f04f 0000 	mov.w	r0, #0
    4144:	bd70      	pop	{r4, r5, r6, pc}
    4146:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    414a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    414e:	bd70      	pop	{r4, r5, r6, pc}

00004150 <__aeabi_ddiv>:
    4150:	b570      	push	{r4, r5, r6, lr}
    4152:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    415a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    415e:	bf1d      	ittte	ne
    4160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4164:	ea94 0f0c 	teqne	r4, ip
    4168:	ea95 0f0c 	teqne	r5, ip
    416c:	f000 f8a7 	bleq	42be <__aeabi_ddiv+0x16e>
    4170:	eba4 0405 	sub.w	r4, r4, r5
    4174:	ea81 0e03 	eor.w	lr, r1, r3
    4178:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    417c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4180:	f000 8088 	beq.w	4294 <__aeabi_ddiv+0x144>
    4184:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4188:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    418c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4190:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4194:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4198:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    419c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    41a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    41a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    41a8:	429d      	cmp	r5, r3
    41aa:	bf08      	it	eq
    41ac:	4296      	cmpeq	r6, r2
    41ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    41b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    41b6:	d202      	bcs.n	41be <__aeabi_ddiv+0x6e>
    41b8:	085b      	lsrs	r3, r3, #1
    41ba:	ea4f 0232 	mov.w	r2, r2, rrx
    41be:	1ab6      	subs	r6, r6, r2
    41c0:	eb65 0503 	sbc.w	r5, r5, r3
    41c4:	085b      	lsrs	r3, r3, #1
    41c6:	ea4f 0232 	mov.w	r2, r2, rrx
    41ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    41ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    41d2:	ebb6 0e02 	subs.w	lr, r6, r2
    41d6:	eb75 0e03 	sbcs.w	lr, r5, r3
    41da:	bf22      	ittt	cs
    41dc:	1ab6      	subcs	r6, r6, r2
    41de:	4675      	movcs	r5, lr
    41e0:	ea40 000c 	orrcs.w	r0, r0, ip
    41e4:	085b      	lsrs	r3, r3, #1
    41e6:	ea4f 0232 	mov.w	r2, r2, rrx
    41ea:	ebb6 0e02 	subs.w	lr, r6, r2
    41ee:	eb75 0e03 	sbcs.w	lr, r5, r3
    41f2:	bf22      	ittt	cs
    41f4:	1ab6      	subcs	r6, r6, r2
    41f6:	4675      	movcs	r5, lr
    41f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    41fc:	085b      	lsrs	r3, r3, #1
    41fe:	ea4f 0232 	mov.w	r2, r2, rrx
    4202:	ebb6 0e02 	subs.w	lr, r6, r2
    4206:	eb75 0e03 	sbcs.w	lr, r5, r3
    420a:	bf22      	ittt	cs
    420c:	1ab6      	subcs	r6, r6, r2
    420e:	4675      	movcs	r5, lr
    4210:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4214:	085b      	lsrs	r3, r3, #1
    4216:	ea4f 0232 	mov.w	r2, r2, rrx
    421a:	ebb6 0e02 	subs.w	lr, r6, r2
    421e:	eb75 0e03 	sbcs.w	lr, r5, r3
    4222:	bf22      	ittt	cs
    4224:	1ab6      	subcs	r6, r6, r2
    4226:	4675      	movcs	r5, lr
    4228:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    422c:	ea55 0e06 	orrs.w	lr, r5, r6
    4230:	d018      	beq.n	4264 <__aeabi_ddiv+0x114>
    4232:	ea4f 1505 	mov.w	r5, r5, lsl #4
    4236:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    423a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    423e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4242:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    4246:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    424a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    424e:	d1c0      	bne.n	41d2 <__aeabi_ddiv+0x82>
    4250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4254:	d10b      	bne.n	426e <__aeabi_ddiv+0x11e>
    4256:	ea41 0100 	orr.w	r1, r1, r0
    425a:	f04f 0000 	mov.w	r0, #0
    425e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4262:	e7b6      	b.n	41d2 <__aeabi_ddiv+0x82>
    4264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4268:	bf04      	itt	eq
    426a:	4301      	orreq	r1, r0
    426c:	2000      	moveq	r0, #0
    426e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4272:	bf88      	it	hi
    4274:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4278:	f63f aeaf 	bhi.w	3fda <__aeabi_dmul+0xde>
    427c:	ebb5 0c03 	subs.w	ip, r5, r3
    4280:	bf04      	itt	eq
    4282:	ebb6 0c02 	subseq.w	ip, r6, r2
    4286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    428a:	f150 0000 	adcs.w	r0, r0, #0
    428e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4292:	bd70      	pop	{r4, r5, r6, pc}
    4294:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4298:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    429c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    42a0:	bfc2      	ittt	gt
    42a2:	ebd4 050c 	rsbsgt	r5, r4, ip
    42a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    42aa:	bd70      	popgt	{r4, r5, r6, pc}
    42ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    42b0:	f04f 0e00 	mov.w	lr, #0
    42b4:	3c01      	subs	r4, #1
    42b6:	e690      	b.n	3fda <__aeabi_dmul+0xde>
    42b8:	ea45 0e06 	orr.w	lr, r5, r6
    42bc:	e68d      	b.n	3fda <__aeabi_dmul+0xde>
    42be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    42c2:	ea94 0f0c 	teq	r4, ip
    42c6:	bf08      	it	eq
    42c8:	ea95 0f0c 	teqeq	r5, ip
    42cc:	f43f af3b 	beq.w	4146 <__aeabi_dmul+0x24a>
    42d0:	ea94 0f0c 	teq	r4, ip
    42d4:	d10a      	bne.n	42ec <__aeabi_ddiv+0x19c>
    42d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    42da:	f47f af34 	bne.w	4146 <__aeabi_dmul+0x24a>
    42de:	ea95 0f0c 	teq	r5, ip
    42e2:	f47f af25 	bne.w	4130 <__aeabi_dmul+0x234>
    42e6:	4610      	mov	r0, r2
    42e8:	4619      	mov	r1, r3
    42ea:	e72c      	b.n	4146 <__aeabi_dmul+0x24a>
    42ec:	ea95 0f0c 	teq	r5, ip
    42f0:	d106      	bne.n	4300 <__aeabi_ddiv+0x1b0>
    42f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    42f6:	f43f aefd 	beq.w	40f4 <__aeabi_dmul+0x1f8>
    42fa:	4610      	mov	r0, r2
    42fc:	4619      	mov	r1, r3
    42fe:	e722      	b.n	4146 <__aeabi_dmul+0x24a>
    4300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4304:	bf18      	it	ne
    4306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    430a:	f47f aec5 	bne.w	4098 <__aeabi_dmul+0x19c>
    430e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4312:	f47f af0d 	bne.w	4130 <__aeabi_dmul+0x234>
    4316:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    431a:	f47f aeeb 	bne.w	40f4 <__aeabi_dmul+0x1f8>
    431e:	e712      	b.n	4146 <__aeabi_dmul+0x24a>

00004320 <__gedf2>:
    4320:	f04f 3cff 	mov.w	ip, #4294967295
    4324:	e006      	b.n	4334 <__cmpdf2+0x4>
    4326:	bf00      	nop

00004328 <__ledf2>:
    4328:	f04f 0c01 	mov.w	ip, #1
    432c:	e002      	b.n	4334 <__cmpdf2+0x4>
    432e:	bf00      	nop

00004330 <__cmpdf2>:
    4330:	f04f 0c01 	mov.w	ip, #1
    4334:	f84d cd04 	str.w	ip, [sp, #-4]!
    4338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    433c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4340:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4344:	bf18      	it	ne
    4346:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    434a:	d01b      	beq.n	4384 <__cmpdf2+0x54>
    434c:	b001      	add	sp, #4
    434e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    4352:	bf0c      	ite	eq
    4354:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    4358:	ea91 0f03 	teqne	r1, r3
    435c:	bf02      	ittt	eq
    435e:	ea90 0f02 	teqeq	r0, r2
    4362:	2000      	moveq	r0, #0
    4364:	4770      	bxeq	lr
    4366:	f110 0f00 	cmn.w	r0, #0
    436a:	ea91 0f03 	teq	r1, r3
    436e:	bf58      	it	pl
    4370:	4299      	cmppl	r1, r3
    4372:	bf08      	it	eq
    4374:	4290      	cmpeq	r0, r2
    4376:	bf2c      	ite	cs
    4378:	17d8      	asrcs	r0, r3, #31
    437a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    437e:	f040 0001 	orr.w	r0, r0, #1
    4382:	4770      	bx	lr
    4384:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    438c:	d102      	bne.n	4394 <__cmpdf2+0x64>
    438e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4392:	d107      	bne.n	43a4 <__cmpdf2+0x74>
    4394:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    439c:	d1d6      	bne.n	434c <__cmpdf2+0x1c>
    439e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    43a2:	d0d3      	beq.n	434c <__cmpdf2+0x1c>
    43a4:	f85d 0b04 	ldr.w	r0, [sp], #4
    43a8:	4770      	bx	lr
    43aa:	bf00      	nop

000043ac <__aeabi_cdrcmple>:
    43ac:	4684      	mov	ip, r0
    43ae:	4610      	mov	r0, r2
    43b0:	4662      	mov	r2, ip
    43b2:	468c      	mov	ip, r1
    43b4:	4619      	mov	r1, r3
    43b6:	4663      	mov	r3, ip
    43b8:	e000      	b.n	43bc <__aeabi_cdcmpeq>
    43ba:	bf00      	nop

000043bc <__aeabi_cdcmpeq>:
    43bc:	b501      	push	{r0, lr}
    43be:	f7ff ffb7 	bl	4330 <__cmpdf2>
    43c2:	2800      	cmp	r0, #0
    43c4:	bf48      	it	mi
    43c6:	f110 0f00 	cmnmi.w	r0, #0
    43ca:	bd01      	pop	{r0, pc}

000043cc <__aeabi_dcmpeq>:
    43cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    43d0:	f7ff fff4 	bl	43bc <__aeabi_cdcmpeq>
    43d4:	bf0c      	ite	eq
    43d6:	2001      	moveq	r0, #1
    43d8:	2000      	movne	r0, #0
    43da:	f85d fb08 	ldr.w	pc, [sp], #8
    43de:	bf00      	nop

000043e0 <__aeabi_dcmplt>:
    43e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    43e4:	f7ff ffea 	bl	43bc <__aeabi_cdcmpeq>
    43e8:	bf34      	ite	cc
    43ea:	2001      	movcc	r0, #1
    43ec:	2000      	movcs	r0, #0
    43ee:	f85d fb08 	ldr.w	pc, [sp], #8
    43f2:	bf00      	nop

000043f4 <__aeabi_dcmple>:
    43f4:	f84d ed08 	str.w	lr, [sp, #-8]!
    43f8:	f7ff ffe0 	bl	43bc <__aeabi_cdcmpeq>
    43fc:	bf94      	ite	ls
    43fe:	2001      	movls	r0, #1
    4400:	2000      	movhi	r0, #0
    4402:	f85d fb08 	ldr.w	pc, [sp], #8
    4406:	bf00      	nop

00004408 <__aeabi_dcmpge>:
    4408:	f84d ed08 	str.w	lr, [sp, #-8]!
    440c:	f7ff ffce 	bl	43ac <__aeabi_cdrcmple>
    4410:	bf94      	ite	ls
    4412:	2001      	movls	r0, #1
    4414:	2000      	movhi	r0, #0
    4416:	f85d fb08 	ldr.w	pc, [sp], #8
    441a:	bf00      	nop

0000441c <__aeabi_dcmpgt>:
    441c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4420:	f7ff ffc4 	bl	43ac <__aeabi_cdrcmple>
    4424:	bf34      	ite	cc
    4426:	2001      	movcc	r0, #1
    4428:	2000      	movcs	r0, #0
    442a:	f85d fb08 	ldr.w	pc, [sp], #8
    442e:	bf00      	nop

00004430 <__aeabi_dcmpun>:
    4430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4438:	d102      	bne.n	4440 <__aeabi_dcmpun+0x10>
    443a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    443e:	d10a      	bne.n	4456 <__aeabi_dcmpun+0x26>
    4440:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4448:	d102      	bne.n	4450 <__aeabi_dcmpun+0x20>
    444a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    444e:	d102      	bne.n	4456 <__aeabi_dcmpun+0x26>
    4450:	f04f 0000 	mov.w	r0, #0
    4454:	4770      	bx	lr
    4456:	f04f 0001 	mov.w	r0, #1
    445a:	4770      	bx	lr

0000445c <__aeabi_d2f>:
    445c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4460:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4464:	bf24      	itt	cs
    4466:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    446a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    446e:	d90d      	bls.n	448c <__aeabi_d2f+0x30>
    4470:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4474:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4478:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    447c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4480:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4484:	bf08      	it	eq
    4486:	f020 0001 	biceq.w	r0, r0, #1
    448a:	4770      	bx	lr
    448c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4490:	d121      	bne.n	44d6 <__aeabi_d2f+0x7a>
    4492:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4496:	bfbc      	itt	lt
    4498:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    449c:	4770      	bxlt	lr
    449e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    44a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    44a6:	f1c2 0218 	rsb	r2, r2, #24
    44aa:	f1c2 0c20 	rsb	ip, r2, #32
    44ae:	fa10 f30c 	lsls.w	r3, r0, ip
    44b2:	fa20 f002 	lsr.w	r0, r0, r2
    44b6:	bf18      	it	ne
    44b8:	f040 0001 	orrne.w	r0, r0, #1
    44bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    44c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    44c4:	fa03 fc0c 	lsl.w	ip, r3, ip
    44c8:	ea40 000c 	orr.w	r0, r0, ip
    44cc:	fa23 f302 	lsr.w	r3, r3, r2
    44d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    44d4:	e7cc      	b.n	4470 <__aeabi_d2f+0x14>
    44d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    44da:	d107      	bne.n	44ec <__aeabi_d2f+0x90>
    44dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    44e0:	bf1e      	ittt	ne
    44e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    44e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    44ea:	4770      	bxne	lr
    44ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    44f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    44f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    44f8:	4770      	bx	lr
    44fa:	bf00      	nop

000044fc <__errno>:
    44fc:	4b01      	ldr	r3, [pc, #4]	; (4504 <__errno+0x8>)
    44fe:	6818      	ldr	r0, [r3, #0]
    4500:	4770      	bx	lr
    4502:	bf00      	nop
    4504:	20000074 	.word	0x20000074

00004508 <__libc_init_array>:
    4508:	b570      	push	{r4, r5, r6, lr}
    450a:	4e0d      	ldr	r6, [pc, #52]	; (4540 <__libc_init_array+0x38>)
    450c:	4c0d      	ldr	r4, [pc, #52]	; (4544 <__libc_init_array+0x3c>)
    450e:	1ba4      	subs	r4, r4, r6
    4510:	10a4      	asrs	r4, r4, #2
    4512:	2500      	movs	r5, #0
    4514:	42a5      	cmp	r5, r4
    4516:	d109      	bne.n	452c <__libc_init_array+0x24>
    4518:	4e0b      	ldr	r6, [pc, #44]	; (4548 <__libc_init_array+0x40>)
    451a:	4c0c      	ldr	r4, [pc, #48]	; (454c <__libc_init_array+0x44>)
    451c:	f000 f984 	bl	4828 <_init>
    4520:	1ba4      	subs	r4, r4, r6
    4522:	10a4      	asrs	r4, r4, #2
    4524:	2500      	movs	r5, #0
    4526:	42a5      	cmp	r5, r4
    4528:	d105      	bne.n	4536 <__libc_init_array+0x2e>
    452a:	bd70      	pop	{r4, r5, r6, pc}
    452c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4530:	4798      	blx	r3
    4532:	3501      	adds	r5, #1
    4534:	e7ee      	b.n	4514 <__libc_init_array+0xc>
    4536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    453a:	4798      	blx	r3
    453c:	3501      	adds	r5, #1
    453e:	e7f2      	b.n	4526 <__libc_init_array+0x1e>
    4540:	00004834 	.word	0x00004834
    4544:	00004834 	.word	0x00004834
    4548:	00004834 	.word	0x00004834
    454c:	00004838 	.word	0x00004838

00004550 <dummy_register>:
    4550:	20000008                                ... 

00004554 <abort_fifo_start>:
    4554:	20000012                                ... 

00004558 <wr_pdram_start>:
    4558:	2000004e                                N.. 

0000455c <cf_pdram_start>:
    455c:	20000038                                8.. 

00004560 <rd_pdram_start>:
    4560:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    4570:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    4580:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    4590:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    45a0:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..
    45b0:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    45c0:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    45d0:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    45e0:	2e747369 00000063                       ist.c...

000045e8 <_cfgs>:
    45e8:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    46e8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    46f8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00004708 <_usarts>:
	...

00004720 <_i2cms>:
    4720:	00000003 70200014 00000100 00000093     ...... p........
    4730:	00d70000 05f5e100                       ........

00004738 <_i2css>:
	...

00004748 <sercomspi_regs>:
    4748:	0030000c 00020000 00000000 01ff0004     ..0.............
    4758:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4768:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    4778:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    4788:	42001400 42001800 43001400 43001800     ...B...B...C...C

00004798 <_tcs>:
    4798:	006e0003 00000308 00000000 000004e2     ..n.............
    47a8:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    47b8:	63745f6c 0000632e 74727173 00000000     l_tc.c..sqrt....

000047c8 <__sf_fake_stderr>:
	...

000047e8 <__sf_fake_stdin>:
	...

00004808 <__sf_fake_stdout>:
	...

00004828 <_init>:
    4828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    482a:	bf00      	nop
    482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    482e:	bc08      	pop	{r3}
    4830:	469e      	mov	lr, r3
    4832:	4770      	bx	lr

00004834 <__init_array_start>:
    4834:	00000289 	.word	0x00000289

00004838 <_fini>:
    4838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    483a:	bf00      	nop
    483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    483e:	bc08      	pop	{r3}
    4840:	469e      	mov	lr, r3
    4842:	4770      	bx	lr

00004844 <__fini_array_start>:
    4844:	00000265 	.word	0x00000265
