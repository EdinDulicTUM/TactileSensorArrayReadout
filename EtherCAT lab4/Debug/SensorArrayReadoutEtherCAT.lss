
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009cb8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000154  20000000  00009cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020154  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020154  2**0
                  CONTENTS
  4 .bss          00002d3c  20000160  00009e20  00020160  2**4
                  ALLOC
  5 .stack        00010004  20002e9c  0000cb5c  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
  8 .debug_info   00030fd9  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003888  00000000  00000000  000511b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011527  00000000  00000000  00054a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d68  00000000  00000000  00065f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e58  00000000  00000000  00066ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034d20  00000000  00000000  00067b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015da2  00000000  00000000  0009c843  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001222e5  00000000  00000000  000b25e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002a94  00000000  00000000  001d48cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 2e 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	61 10 00 00 6d 10 00 00 79 10 00 00 85 10 00 00     a...m...y.......
      cc:	91 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	6d 11 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     m...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 f9 26 00 00 dd 02 00 00 dd 02 00 00     .....&..........
     204:	dd 02 00 00 f5 07 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	00009cb8 	.word	0x00009cb8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00009cb8 	.word	0x00009cb8
     2c4:	20000164 	.word	0x20000164
     2c8:	00009cb8 	.word	0x00009cb8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000601 	.word	0x00000601

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00009cb8 	.word	0x00009cb8
     340:	20000154 	.word	0x20000154
     344:	20000160 	.word	0x20000160
     348:	20002e9c 	.word	0x20002e9c
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	000099c9 	.word	0x000099c9
     358:	000023a1 	.word	0x000023a1

0000035c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     372:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     382:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
	I2C_0_PORT_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	200003d0 	.word	0x200003d0
     400:	00000b01 	.word	0x00000b01
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     46e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     472:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SPI_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
	SPI_0_PORT_init();
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	200003a0 	.word	0x200003a0
     514:	00000c35 	.word	0x00000c35
     518:	00000409 	.word	0x00000409

0000051c <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     51c:	4b16      	ldr	r3, [pc, #88]	; (578 <I2C_1_PORT_init+0x5c>)
     51e:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     522:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     526:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     52e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     53e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     542:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     54e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     552:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     576:	4770      	bx	lr
     578:	41008000 	.word	0x41008000

0000057c <I2C_1_CLOCK_init>:
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <I2C_1_CLOCK_init+0x1c>)
     57e:	2240      	movs	r2, #64	; 0x40
     580:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     584:	2243      	movs	r2, #67	; 0x43
     586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     58a:	4a04      	ldr	r2, [pc, #16]	; (59c <I2C_1_CLOCK_init+0x20>)
     58c:	6a13      	ldr	r3, [r2, #32]
     58e:	f043 0308 	orr.w	r3, r3, #8
     592:	6213      	str	r3, [r2, #32]
     594:	4770      	bx	lr
     596:	bf00      	nop
     598:	40001c00 	.word	0x40001c00
     59c:	40000800 	.word	0x40000800

000005a0 <I2C_1_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void I2C_1_init(void)
{
     5a0:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     5a2:	4b04      	ldr	r3, [pc, #16]	; (5b4 <I2C_1_init+0x14>)
     5a4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_1, SERCOM7);
     5a6:	4904      	ldr	r1, [pc, #16]	; (5b8 <I2C_1_init+0x18>)
     5a8:	4804      	ldr	r0, [pc, #16]	; (5bc <I2C_1_init+0x1c>)
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <I2C_1_init+0x20>)
     5ac:	4798      	blx	r3
	I2C_1_PORT_init();
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <I2C_1_init+0x24>)
     5b0:	4798      	blx	r3
     5b2:	bd08      	pop	{r3, pc}
     5b4:	0000057d 	.word	0x0000057d
     5b8:	43000c00 	.word	0x43000c00
     5bc:	20000380 	.word	0x20000380
     5c0:	00000b01 	.word	0x00000b01
     5c4:	0000051d 	.word	0x0000051d

000005c8 <TIMER_1_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5c8:	4a04      	ldr	r2, [pc, #16]	; (5dc <TIMER_1_CLOCK_init+0x14>)
     5ca:	6993      	ldr	r3, [r2, #24]
     5cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5d0:	6193      	str	r3, [r2, #24]
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	4b02      	ldr	r3, [pc, #8]	; (5e0 <TIMER_1_CLOCK_init+0x18>)
     5d6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     5da:	4770      	bx	lr
     5dc:	40000800 	.word	0x40000800
     5e0:	40001c00 	.word	0x40001c00

000005e4 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     5e4:	4a04      	ldr	r2, [pc, #16]	; (5f8 <TIMER_0_CLOCK_init+0x14>)
     5e6:	6a13      	ldr	r3, [r2, #32]
     5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     5ec:	6213      	str	r3, [r2, #32]
     5ee:	2240      	movs	r2, #64	; 0x40
     5f0:	4b02      	ldr	r3, [pc, #8]	; (5fc <TIMER_0_CLOCK_init+0x18>)
     5f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     5f6:	4770      	bx	lr
     5f8:	40000800 	.word	0x40000800
     5fc:	40001c00 	.word	0x40001c00

00000600 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     600:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     602:	4b19      	ldr	r3, [pc, #100]	; (668 <system_init+0x68>)
     604:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     606:	4b19      	ldr	r3, [pc, #100]	; (66c <system_init+0x6c>)
     608:	2240      	movs	r2, #64	; 0x40
     60a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     60e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     612:	629a      	str	r2, [r3, #40]	; 0x28
     614:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     618:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     61e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     626:	2201      	movs	r2, #1
     628:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     634:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     638:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     644:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     648:	4b09      	ldr	r3, [pc, #36]	; (670 <system_init+0x70>)
     64a:	4798      	blx	r3

	SPI_0_init();
     64c:	4b09      	ldr	r3, [pc, #36]	; (674 <system_init+0x74>)
     64e:	4798      	blx	r3

	I2C_1_init();
     650:	4b09      	ldr	r3, [pc, #36]	; (678 <system_init+0x78>)
     652:	4798      	blx	r3

	TIMER_1_CLOCK_init();
     654:	4b09      	ldr	r3, [pc, #36]	; (67c <system_init+0x7c>)
     656:	4798      	blx	r3

	TIMER_1_init();
     658:	4b09      	ldr	r3, [pc, #36]	; (680 <system_init+0x80>)
     65a:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     65c:	4b09      	ldr	r3, [pc, #36]	; (684 <system_init+0x84>)
     65e:	4798      	blx	r3

	TIMER_0_init();
     660:	4b09      	ldr	r3, [pc, #36]	; (688 <system_init+0x88>)
     662:	4798      	blx	r3
     664:	bd08      	pop	{r3, pc}
     666:	bf00      	nop
     668:	00000d21 	.word	0x00000d21
     66c:	41008000 	.word	0x41008000
     670:	000003e1 	.word	0x000003e1
     674:	000004f5 	.word	0x000004f5
     678:	000005a1 	.word	0x000005a1
     67c:	000005c9 	.word	0x000005c9
     680:	00001d99 	.word	0x00001d99
     684:	000005e5 	.word	0x000005e5
     688:	00001e5d 	.word	0x00001e5d

0000068c <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     68c:	2201      	movs	r2, #1
     68e:	4b11      	ldr	r3, [pc, #68]	; (6d4 <LAN9252_rx_susp+0x48>)
     690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     694:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     698:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     69a:	68da      	ldr	r2, [r3, #12]
     69c:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <LAN9252_rx_susp+0x4c>)
     69e:	429a      	cmp	r2, r3
     6a0:	d00d      	beq.n	6be <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     6a2:	4b0e      	ldr	r3, [pc, #56]	; (6dc <LAN9252_rx_susp+0x50>)
     6a4:	2202      	movs	r2, #2
     6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6aa:	2001      	movs	r0, #1
     6ac:	4909      	ldr	r1, [pc, #36]	; (6d4 <LAN9252_rx_susp+0x48>)
     6ae:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     6b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     6b6:	2200      	movs	r2, #0
     6b8:	4b09      	ldr	r3, [pc, #36]	; (6e0 <LAN9252_rx_susp+0x54>)
     6ba:	701a      	strb	r2, [r3, #0]
     6bc:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     6be:	2301      	movs	r3, #1
     6c0:	4a07      	ldr	r2, [pc, #28]	; (6e0 <LAN9252_rx_susp+0x54>)
     6c2:	7013      	strb	r3, [r2, #0]
		row_change_possible = true; // for readout of array of wearable tactile sensor
     6c4:	4a07      	ldr	r2, [pc, #28]	; (6e4 <LAN9252_rx_susp+0x58>)
     6c6:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     6c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     6cc:	4b06      	ldr	r3, [pc, #24]	; (6e8 <LAN9252_rx_susp+0x5c>)
     6ce:	60da      	str	r2, [r3, #12]
     6d0:	4770      	bx	lr
     6d2:	bf00      	nop
     6d4:	41008000 	.word	0x41008000
     6d8:	20000578 	.word	0x20000578
     6dc:	4100a000 	.word	0x4100a000
     6e0:	20000588 	.word	0x20000588
     6e4:	20000540 	.word	0x20000540
     6e8:	e000e100 	.word	0xe000e100

000006ec <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     6ec:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     6ee:	880c      	ldrh	r4, [r1, #0]
     6f0:	b2a4      	uxth	r4, r4
     6f2:	f044 0401 	orr.w	r4, r4, #1
     6f6:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6f8:	880c      	ldrh	r4, [r1, #0]
     6fa:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     6fc:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     700:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     702:	880c      	ldrh	r4, [r1, #0]
     704:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     706:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     70a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     70e:	00ed      	lsls	r5, r5, #3
     710:	f005 0518 	and.w	r5, r5, #24
     714:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     716:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     718:	880c      	ldrh	r4, [r1, #0]
     71a:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     71c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     720:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     722:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     724:	2803      	cmp	r0, #3
     726:	d814      	bhi.n	752 <setup_transfer_descriptor+0x66>
     728:	e8df f000 	tbb	[pc, r0]
     72c:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     730:	8808      	ldrh	r0, [r1, #0]
     732:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     734:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     738:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     73a:	8808      	ldrh	r0, [r1, #0]
     73c:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     73e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     742:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     744:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     746:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     748:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     74a:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     74c:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     74e:	4a26      	ldr	r2, [pc, #152]	; (7e8 <setup_transfer_descriptor+0xfc>)
     750:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     752:	880a      	ldrh	r2, [r1, #0]
     754:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     75a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     75c:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     75e:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     760:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     764:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     766:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     768:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     76a:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     76c:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     76e:	9b02      	ldr	r3, [sp, #8]
     770:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     772:	bc30      	pop	{r4, r5}
     774:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     776:	880a      	ldrh	r2, [r1, #0]
     778:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     77e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     780:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     782:	880a      	ldrh	r2, [r1, #0]
     784:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     78a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     78c:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     78e:	4a17      	ldr	r2, [pc, #92]	; (7ec <setup_transfer_descriptor+0x100>)
     790:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     792:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     794:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     796:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     798:	4a13      	ldr	r2, [pc, #76]	; (7e8 <setup_transfer_descriptor+0xfc>)
     79a:	608a      	str	r2, [r1, #8]
     79c:	e7d9      	b.n	752 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     79e:	8808      	ldrh	r0, [r1, #0]
     7a0:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     7a2:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     7a6:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7a8:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7aa:	8808      	ldrh	r0, [r1, #0]
     7ac:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     7ae:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7b2:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     7b4:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     7b6:	480c      	ldr	r0, [pc, #48]	; (7e8 <setup_transfer_descriptor+0xfc>)
     7b8:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     7ba:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     7bc:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     7be:	608a      	str	r2, [r1, #8]
     7c0:	e7c7      	b.n	752 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7c2:	880a      	ldrh	r2, [r1, #0]
     7c4:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     7c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     7ca:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7cc:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     7ce:	880a      	ldrh	r2, [r1, #0]
     7d0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     7d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     7d6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     7d8:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     7da:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     7dc:	4a02      	ldr	r2, [pc, #8]	; (7e8 <setup_transfer_descriptor+0xfc>)
     7de:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     7e0:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     7e2:	4a03      	ldr	r2, [pc, #12]	; (7f0 <setup_transfer_descriptor+0x104>)
     7e4:	608a      	str	r2, [r1, #8]
     7e6:	e7b4      	b.n	752 <setup_transfer_descriptor+0x66>
     7e8:	43000428 	.word	0x43000428
     7ec:	00009a10 	.word	0x00009a10
     7f0:	20000440 	.word	0x20000440

000007f4 <TC7_Handler>:
void TC7_Handler(void){
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     7f8:	4a16      	ldr	r2, [pc, #88]	; (854 <TC7_Handler+0x60>)
     7fa:	7a93      	ldrb	r3, [r2, #10]
     7fc:	f043 0301 	orr.w	r3, r3, #1
     800:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     802:	2201      	movs	r2, #1
     804:	4b14      	ldr	r3, [pc, #80]	; (858 <TC7_Handler+0x64>)
     806:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     808:	4b14      	ldr	r3, [pc, #80]	; (85c <TC7_Handler+0x68>)
     80a:	781b      	ldrb	r3, [r3, #0]
     80c:	b183      	cbz	r3, 830 <TC7_Handler+0x3c>
		volatile int i=0;
     80e:	2300      	movs	r3, #0
     810:	9301      	str	r3, [sp, #4]
     812:	4611      	mov	r1, r2
     814:	4a12      	ldr	r2, [pc, #72]	; (860 <TC7_Handler+0x6c>)
     816:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     81a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     81e:	2102      	movs	r1, #2
     820:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     824:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     828:	4a0c      	ldr	r2, [pc, #48]	; (85c <TC7_Handler+0x68>)
     82a:	7013      	strb	r3, [r2, #0]
	};
     82c:	b003      	add	sp, #12
     82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <TC7_Handler+0x6c>)
     832:	2501      	movs	r5, #1
     834:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     838:	4e08      	ldr	r6, [pc, #32]	; (85c <TC7_Handler+0x68>)
     83a:	2400      	movs	r4, #0
     83c:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83e:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     842:	4621      	mov	r1, r4
     844:	4620      	mov	r0, r4
     846:	4f07      	ldr	r7, [pc, #28]	; (864 <TC7_Handler+0x70>)
     848:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     84a:	4621      	mov	r1, r4
     84c:	4628      	mov	r0, r5
     84e:	47b8      	blx	r7
		tx_ethercat_done = false;
     850:	7034      	strb	r4, [r6, #0]
	};
     852:	e7eb      	b.n	82c <TC7_Handler+0x38>
     854:	43001800 	.word	0x43001800
     858:	20000541 	.word	0x20000541
     85c:	20000588 	.word	0x20000588
     860:	41008000 	.word	0x41008000
     864:	00001015 	.word	0x00001015

00000868 <configure_ethercat_dma_descriptors>:
{
     868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     86c:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     86e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a28 <configure_ethercat_dma_descriptors+0x1c0>
     872:	4f61      	ldr	r7, [pc, #388]	; (9f8 <configure_ethercat_dma_descriptors+0x190>)
     874:	2602      	movs	r6, #2
     876:	9601      	str	r6, [sp, #4]
     878:	f8df 91b0 	ldr.w	r9, [pc, #432]	; a2c <configure_ethercat_dma_descriptors+0x1c4>
     87c:	f8cd 9000 	str.w	r9, [sp]
     880:	2313      	movs	r3, #19
     882:	f8d8 2004 	ldr.w	r2, [r8, #4]
     886:	4639      	mov	r1, r7
     888:	2000      	movs	r0, #0
     88a:	4d5c      	ldr	r5, [pc, #368]	; (9fc <configure_ethercat_dma_descriptors+0x194>)
     88c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     88e:	f8d8 b008 	ldr.w	fp, [r8, #8]
     892:	9601      	str	r6, [sp, #4]
     894:	4c5a      	ldr	r4, [pc, #360]	; (a00 <configure_ethercat_dma_descriptors+0x198>)
     896:	9400      	str	r4, [sp, #0]
     898:	2343      	movs	r3, #67	; 0x43
     89a:	465a      	mov	r2, fp
     89c:	4649      	mov	r1, r9
     89e:	2000      	movs	r0, #0
     8a0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     8a2:	4b58      	ldr	r3, [pc, #352]	; (a04 <configure_ethercat_dma_descriptors+0x19c>)
     8a4:	681a      	ldr	r2, [r3, #0]
     8a6:	f8df 9188 	ldr.w	r9, [pc, #392]	; a30 <configure_ethercat_dma_descriptors+0x1c8>
     8aa:	9601      	str	r6, [sp, #4]
     8ac:	f8cd 9000 	str.w	r9, [sp]
     8b0:	230b      	movs	r3, #11
     8b2:	4621      	mov	r1, r4
     8b4:	2000      	movs	r0, #0
     8b6:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     8b8:	2400      	movs	r4, #0
     8ba:	9401      	str	r4, [sp, #4]
     8bc:	f8df a174 	ldr.w	sl, [pc, #372]	; a34 <configure_ethercat_dma_descriptors+0x1cc>
     8c0:	f8cd a000 	str.w	sl, [sp]
     8c4:	2303      	movs	r3, #3
     8c6:	465a      	mov	r2, fp
     8c8:	4649      	mov	r1, r9
     8ca:	4620      	mov	r0, r4
     8cc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     8ce:	9601      	str	r6, [sp, #4]
     8d0:	f8df b164 	ldr.w	fp, [pc, #356]	; a38 <configure_ethercat_dma_descriptors+0x1d0>
     8d4:	f8cd b000 	str.w	fp, [sp]
     8d8:	2340      	movs	r3, #64	; 0x40
     8da:	4a4b      	ldr	r2, [pc, #300]	; (a08 <configure_ethercat_dma_descriptors+0x1a0>)
     8dc:	4651      	mov	r1, sl
     8de:	4620      	mov	r0, r4
     8e0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     8e2:	9601      	str	r6, [sp, #4]
     8e4:	f8df a154 	ldr.w	sl, [pc, #340]	; a3c <configure_ethercat_dma_descriptors+0x1d4>
     8e8:	f8cd a000 	str.w	sl, [sp]
     8ec:	2313      	movs	r3, #19
     8ee:	f8d8 200c 	ldr.w	r2, [r8, #12]
     8f2:	4659      	mov	r1, fp
     8f4:	4620      	mov	r0, r4
     8f6:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     8f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
     8fc:	9401      	str	r4, [sp, #4]
     8fe:	f8df 8140 	ldr.w	r8, [pc, #320]	; a40 <configure_ethercat_dma_descriptors+0x1d8>
     902:	f8cd 8000 	str.w	r8, [sp]
     906:	2303      	movs	r3, #3
     908:	4651      	mov	r1, sl
     90a:	4620      	mov	r0, r4
     90c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     90e:	9601      	str	r6, [sp, #4]
     910:	f8cd 9000 	str.w	r9, [sp]
     914:	2340      	movs	r3, #64	; 0x40
     916:	4622      	mov	r2, r4
     918:	4641      	mov	r1, r8
     91a:	4630      	mov	r0, r6
     91c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     91e:	f8df 8124 	ldr.w	r8, [pc, #292]	; a44 <configure_ethercat_dma_descriptors+0x1dc>
     922:	9601      	str	r6, [sp, #4]
     924:	f8df 9120 	ldr.w	r9, [pc, #288]	; a48 <configure_ethercat_dma_descriptors+0x1e0>
     928:	f8cd 9000 	str.w	r9, [sp]
     92c:	2313      	movs	r3, #19
     92e:	4622      	mov	r2, r4
     930:	4641      	mov	r1, r8
     932:	2003      	movs	r0, #3
     934:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     936:	9601      	str	r6, [sp, #4]
     938:	f8df a110 	ldr.w	sl, [pc, #272]	; a4c <configure_ethercat_dma_descriptors+0x1e4>
     93c:	f8cd a000 	str.w	sl, [sp]
     940:	2343      	movs	r3, #67	; 0x43
     942:	4622      	mov	r2, r4
     944:	4649      	mov	r1, r9
     946:	2003      	movs	r0, #3
     948:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     94a:	f8df 9104 	ldr.w	r9, [pc, #260]	; a50 <configure_ethercat_dma_descriptors+0x1e8>
     94e:	9601      	str	r6, [sp, #4]
     950:	f8cd 9000 	str.w	r9, [sp]
     954:	230b      	movs	r3, #11
     956:	4622      	mov	r2, r4
     958:	4651      	mov	r1, sl
     95a:	2003      	movs	r0, #3
     95c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     95e:	9601      	str	r6, [sp, #4]
     960:	f8df a0f0 	ldr.w	sl, [pc, #240]	; a54 <configure_ethercat_dma_descriptors+0x1ec>
     964:	f8cd a000 	str.w	sl, [sp]
     968:	2343      	movs	r3, #67	; 0x43
     96a:	4622      	mov	r2, r4
     96c:	4649      	mov	r1, r9
     96e:	2003      	movs	r0, #3
     970:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     972:	9601      	str	r6, [sp, #4]
     974:	f8df b0e0 	ldr.w	fp, [pc, #224]	; a58 <configure_ethercat_dma_descriptors+0x1f0>
     978:	f8cd b000 	str.w	fp, [sp]
     97c:	2313      	movs	r3, #19
     97e:	4622      	mov	r2, r4
     980:	4651      	mov	r1, sl
     982:	2003      	movs	r0, #3
     984:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     986:	9401      	str	r4, [sp, #4]
     988:	f8df a0d0 	ldr.w	sl, [pc, #208]	; a5c <configure_ethercat_dma_descriptors+0x1f4>
     98c:	f8cd a000 	str.w	sl, [sp]
     990:	2303      	movs	r3, #3
     992:	4622      	mov	r2, r4
     994:	4659      	mov	r1, fp
     996:	4618      	mov	r0, r3
     998:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     99a:	9601      	str	r6, [sp, #4]
     99c:	f8cd 9000 	str.w	r9, [sp]
     9a0:	2340      	movs	r3, #64	; 0x40
     9a2:	4a19      	ldr	r2, [pc, #100]	; (a08 <configure_ethercat_dma_descriptors+0x1a0>)
     9a4:	441a      	add	r2, r3
     9a6:	4651      	mov	r1, sl
     9a8:	2001      	movs	r0, #1
     9aa:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     9ac:	4d17      	ldr	r5, [pc, #92]	; (a0c <configure_ethercat_dma_descriptors+0x1a4>)
     9ae:	4a18      	ldr	r2, [pc, #96]	; (a10 <configure_ethercat_dma_descriptors+0x1a8>)
     9b0:	4631      	mov	r1, r6
     9b2:	4628      	mov	r0, r5
     9b4:	4b17      	ldr	r3, [pc, #92]	; (a14 <configure_ethercat_dma_descriptors+0x1ac>)
     9b6:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
     9bc:	9300      	str	r3, [sp, #0]
     9be:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     9c2:	4620      	mov	r0, r4
     9c4:	4e14      	ldr	r6, [pc, #80]	; (a18 <configure_ethercat_dma_descriptors+0x1b0>)
     9c6:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	9300      	str	r3, [sp, #0]
     9cc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     9d0:	2001      	movs	r0, #1
     9d2:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     9d4:	4628      	mov	r0, r5
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <configure_ethercat_dma_descriptors+0x1b4>)
     9d8:	4798      	blx	r3
     9da:	2601      	movs	r6, #1
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <configure_ethercat_dma_descriptors+0x1b8>)
     9de:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     9e2:	4621      	mov	r1, r4
     9e4:	4620      	mov	r0, r4
     9e6:	4d0f      	ldr	r5, [pc, #60]	; (a24 <configure_ethercat_dma_descriptors+0x1bc>)
     9e8:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     9ea:	4621      	mov	r1, r4
     9ec:	4630      	mov	r0, r6
     9ee:	47a8      	blx	r5
}
     9f0:	b003      	add	sp, #12
     9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9f6:	bf00      	nop
     9f8:	20000530 	.word	0x20000530
     9fc:	000006ed 	.word	0x000006ed
     a00:	20000558 	.word	0x20000558
     a04:	20000000 	.word	0x20000000
     a08:	20000480 	.word	0x20000480
     a0c:	200003a0 	.word	0x200003a0
     a10:	0000068d 	.word	0x0000068d
     a14:	00000ca9 	.word	0x00000ca9
     a18:	0000109d 	.word	0x0000109d
     a1c:	00000c81 	.word	0x00000c81
     a20:	41008000 	.word	0x41008000
     a24:	00001015 	.word	0x00001015
     a28:	00009a10 	.word	0x00009a10
     a2c:	20000460 	.word	0x20000460
     a30:	20000410 	.word	0x20000410
     a34:	20000430 	.word	0x20000430
     a38:	20000520 	.word	0x20000520
     a3c:	20000568 	.word	0x20000568
     a40:	20000420 	.word	0x20000420
     a44:	20000470 	.word	0x20000470
     a48:	20000500 	.word	0x20000500
     a4c:	20000510 	.word	0x20000510
     a50:	20000578 	.word	0x20000578
     a54:	200003f0 	.word	0x200003f0
     a58:	20000400 	.word	0x20000400
     a5c:	20000548 	.word	0x20000548

00000a60 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     a60:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <delay_us+0x14>)
     a64:	681c      	ldr	r4, [r3, #0]
     a66:	4b04      	ldr	r3, [pc, #16]	; (a78 <delay_us+0x18>)
     a68:	4798      	blx	r3
     a6a:	4601      	mov	r1, r0
     a6c:	4620      	mov	r0, r4
     a6e:	4b03      	ldr	r3, [pc, #12]	; (a7c <delay_us+0x1c>)
     a70:	4798      	blx	r3
     a72:	bd10      	pop	{r4, pc}
     a74:	2000017c 	.word	0x2000017c
     a78:	00000ce1 	.word	0x00000ce1
     a7c:	00000d19 	.word	0x00000d19

00000a80 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     a80:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     a82:	4b04      	ldr	r3, [pc, #16]	; (a94 <delay_ms+0x14>)
     a84:	681c      	ldr	r4, [r3, #0]
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <delay_ms+0x18>)
     a88:	4798      	blx	r3
     a8a:	4601      	mov	r1, r0
     a8c:	4620      	mov	r0, r4
     a8e:	4b03      	ldr	r3, [pc, #12]	; (a9c <delay_ms+0x1c>)
     a90:	4798      	blx	r3
     a92:	bd10      	pop	{r4, pc}
     a94:	2000017c 	.word	0x2000017c
     a98:	00000cf9 	.word	0x00000cf9
     a9c:	00000d19 	.word	0x00000d19

00000aa0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     aa0:	b510      	push	{r4, lr}
     aa2:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     aa4:	8903      	ldrh	r3, [r0, #8]
     aa6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     aaa:	4614      	mov	r4, r2
     aac:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     ab2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     ab6:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ab8:	a901      	add	r1, sp, #4
     aba:	3814      	subs	r0, #20
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <i2c_m_sync_write+0x2c>)
     abe:	4798      	blx	r3

	if (ret) {
     ac0:	b910      	cbnz	r0, ac8 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     ac2:	4620      	mov	r0, r4
     ac4:	b004      	add	sp, #16
     ac6:	bd10      	pop	{r4, pc}
		return ret;
     ac8:	4604      	mov	r4, r0
     aca:	e7fa      	b.n	ac2 <i2c_m_sync_write+0x22>
     acc:	000017a1 	.word	0x000017a1

00000ad0 <i2c_m_sync_read>:
{
     ad0:	b510      	push	{r4, lr}
     ad2:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     ad4:	8903      	ldrh	r3, [r0, #8]
     ad6:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     ada:	4614      	mov	r4, r2
     adc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     ade:	f248 0301 	movw	r3, #32769	; 0x8001
     ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     ae6:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     ae8:	a901      	add	r1, sp, #4
     aea:	3814      	subs	r0, #20
     aec:	4b03      	ldr	r3, [pc, #12]	; (afc <i2c_m_sync_read+0x2c>)
     aee:	4798      	blx	r3
	if (ret) {
     af0:	b910      	cbnz	r0, af8 <i2c_m_sync_read+0x28>
}
     af2:	4620      	mov	r0, r4
     af4:	b004      	add	sp, #16
     af6:	bd10      	pop	{r4, pc}
		return ret;
     af8:	4604      	mov	r4, r0
     afa:	e7fa      	b.n	af2 <i2c_m_sync_read+0x22>
     afc:	000017a1 	.word	0x000017a1

00000b00 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     b00:	b538      	push	{r3, r4, r5, lr}
     b02:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     b04:	4604      	mov	r4, r0
     b06:	225e      	movs	r2, #94	; 0x5e
     b08:	4908      	ldr	r1, [pc, #32]	; (b2c <i2c_m_sync_init+0x2c>)
     b0a:	3000      	adds	r0, #0
     b0c:	bf18      	it	ne
     b0e:	2001      	movne	r0, #1
     b10:	4b07      	ldr	r3, [pc, #28]	; (b30 <i2c_m_sync_init+0x30>)
     b12:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     b14:	4629      	mov	r1, r5
     b16:	4620      	mov	r0, r4
     b18:	4b06      	ldr	r3, [pc, #24]	; (b34 <i2c_m_sync_init+0x34>)
     b1a:	4798      	blx	r3
	if (init_status) {
     b1c:	4603      	mov	r3, r0
     b1e:	b918      	cbnz	r0, b28 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     b20:	4a05      	ldr	r2, [pc, #20]	; (b38 <i2c_m_sync_init+0x38>)
     b22:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     b24:	4a05      	ldr	r2, [pc, #20]	; (b3c <i2c_m_sync_init+0x3c>)
     b26:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     b28:	4618      	mov	r0, r3
     b2a:	bd38      	pop	{r3, r4, r5, pc}
     b2c:	00009a24 	.word	0x00009a24
     b30:	00000cd9 	.word	0x00000cd9
     b34:	000016f9 	.word	0x000016f9
     b38:	00000ad1 	.word	0x00000ad1
     b3c:	00000aa1 	.word	0x00000aa1

00000b40 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     b40:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     b42:	4b01      	ldr	r3, [pc, #4]	; (b48 <i2c_m_sync_enable+0x8>)
     b44:	4798      	blx	r3
}
     b46:	bd08      	pop	{r3, pc}
     b48:	00001729 	.word	0x00001729

00000b4c <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     b4c:	f3c1 0109 	ubfx	r1, r1, #0, #10
     b50:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     b54:	430a      	orrs	r2, r1
     b56:	8382      	strh	r2, [r0, #28]
}
     b58:	4610      	mov	r0, r2
     b5a:	4770      	bx	lr

00000b5c <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     b5c:	3014      	adds	r0, #20
     b5e:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     b60:	2000      	movs	r0, #0
     b62:	4770      	bx	lr

00000b64 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	460d      	mov	r5, r1
     b68:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b6a:	4604      	mov	r4, r0
     b6c:	b168      	cbz	r0, b8a <io_write+0x26>
     b6e:	b151      	cbz	r1, b86 <io_write+0x22>
     b70:	2001      	movs	r0, #1
     b72:	2234      	movs	r2, #52	; 0x34
     b74:	4906      	ldr	r1, [pc, #24]	; (b90 <io_write+0x2c>)
     b76:	4b07      	ldr	r3, [pc, #28]	; (b94 <io_write+0x30>)
     b78:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b7a:	6823      	ldr	r3, [r4, #0]
     b7c:	4632      	mov	r2, r6
     b7e:	4629      	mov	r1, r5
     b80:	4620      	mov	r0, r4
     b82:	4798      	blx	r3
}
     b84:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b86:	2000      	movs	r0, #0
     b88:	e7f3      	b.n	b72 <io_write+0xe>
     b8a:	2000      	movs	r0, #0
     b8c:	e7f1      	b.n	b72 <io_write+0xe>
     b8e:	bf00      	nop
     b90:	00009a40 	.word	0x00009a40
     b94:	00000cd9 	.word	0x00000cd9

00000b98 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b98:	b570      	push	{r4, r5, r6, lr}
     b9a:	460d      	mov	r5, r1
     b9c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b9e:	4604      	mov	r4, r0
     ba0:	b168      	cbz	r0, bbe <io_read+0x26>
     ba2:	b151      	cbz	r1, bba <io_read+0x22>
     ba4:	2001      	movs	r0, #1
     ba6:	223d      	movs	r2, #61	; 0x3d
     ba8:	4906      	ldr	r1, [pc, #24]	; (bc4 <io_read+0x2c>)
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <io_read+0x30>)
     bac:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     bae:	6863      	ldr	r3, [r4, #4]
     bb0:	4632      	mov	r2, r6
     bb2:	4629      	mov	r1, r5
     bb4:	4620      	mov	r0, r4
     bb6:	4798      	blx	r3
}
     bb8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     bba:	2000      	movs	r0, #0
     bbc:	e7f3      	b.n	ba6 <io_read+0xe>
     bbe:	2000      	movs	r0, #0
     bc0:	e7f1      	b.n	ba6 <io_read+0xe>
     bc2:	bf00      	nop
     bc4:	00009a40 	.word	0x00009a40
     bc8:	00000cd9 	.word	0x00000cd9

00000bcc <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
     bce:	460d      	mov	r5, r1
     bd0:	4616      	mov	r6, r2
	ASSERT(io);
     bd2:	4604      	mov	r4, r0
     bd4:	2298      	movs	r2, #152	; 0x98
     bd6:	4907      	ldr	r1, [pc, #28]	; (bf4 <_spi_m_dma_io_write+0x28>)
     bd8:	3000      	adds	r0, #0
     bda:	bf18      	it	ne
     bdc:	2001      	movne	r0, #1
     bde:	4b06      	ldr	r3, [pc, #24]	; (bf8 <_spi_m_dma_io_write+0x2c>)
     be0:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     be2:	4633      	mov	r3, r6
     be4:	2200      	movs	r2, #0
     be6:	4629      	mov	r1, r5
     be8:	f1a4 0020 	sub.w	r0, r4, #32
     bec:	4c03      	ldr	r4, [pc, #12]	; (bfc <_spi_m_dma_io_write+0x30>)
     bee:	47a0      	blx	r4
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
     bf2:	bf00      	nop
     bf4:	00009a54 	.word	0x00009a54
     bf8:	00000cd9 	.word	0x00000cd9
     bfc:	00001c85 	.word	0x00001c85

00000c00 <_spi_m_dma_io_read>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	460d      	mov	r5, r1
     c04:	4616      	mov	r6, r2
	ASSERT(io);
     c06:	4604      	mov	r4, r0
     c08:	2281      	movs	r2, #129	; 0x81
     c0a:	4907      	ldr	r1, [pc, #28]	; (c28 <_spi_m_dma_io_read+0x28>)
     c0c:	3000      	adds	r0, #0
     c0e:	bf18      	it	ne
     c10:	2001      	movne	r0, #1
     c12:	4b06      	ldr	r3, [pc, #24]	; (c2c <_spi_m_dma_io_read+0x2c>)
     c14:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     c16:	4633      	mov	r3, r6
     c18:	462a      	mov	r2, r5
     c1a:	2100      	movs	r1, #0
     c1c:	f1a4 0020 	sub.w	r0, r4, #32
     c20:	4c03      	ldr	r4, [pc, #12]	; (c30 <_spi_m_dma_io_read+0x30>)
     c22:	47a0      	blx	r4
}
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	bf00      	nop
     c28:	00009a54 	.word	0x00009a54
     c2c:	00000cd9 	.word	0x00000cd9
     c30:	00001c85 	.word	0x00001c85

00000c34 <spi_m_dma_init>:
{
     c34:	b538      	push	{r3, r4, r5, lr}
     c36:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     c38:	4605      	mov	r5, r0
     c3a:	b1a8      	cbz	r0, c68 <spi_m_dma_init+0x34>
     c3c:	b191      	cbz	r1, c64 <spi_m_dma_init+0x30>
     c3e:	2001      	movs	r0, #1
     c40:	223b      	movs	r2, #59	; 0x3b
     c42:	490a      	ldr	r1, [pc, #40]	; (c6c <spi_m_dma_init+0x38>)
     c44:	4b0a      	ldr	r3, [pc, #40]	; (c70 <spi_m_dma_init+0x3c>)
     c46:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c48:	4628      	mov	r0, r5
     c4a:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     c4e:	4621      	mov	r1, r4
     c50:	4b08      	ldr	r3, [pc, #32]	; (c74 <spi_m_dma_init+0x40>)
     c52:	4798      	blx	r3
	if (rc) {
     c54:	4603      	mov	r3, r0
     c56:	b918      	cbnz	r0, c60 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     c58:	4a07      	ldr	r2, [pc, #28]	; (c78 <spi_m_dma_init+0x44>)
     c5a:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     c5c:	4a07      	ldr	r2, [pc, #28]	; (c7c <spi_m_dma_init+0x48>)
     c5e:	626a      	str	r2, [r5, #36]	; 0x24
}
     c60:	4618      	mov	r0, r3
     c62:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     c64:	2000      	movs	r0, #0
     c66:	e7eb      	b.n	c40 <spi_m_dma_init+0xc>
     c68:	2000      	movs	r0, #0
     c6a:	e7e9      	b.n	c40 <spi_m_dma_init+0xc>
     c6c:	00009a54 	.word	0x00009a54
     c70:	00000cd9 	.word	0x00000cd9
     c74:	00001a51 	.word	0x00001a51
     c78:	00000c01 	.word	0x00000c01
     c7c:	00000bcd 	.word	0x00000bcd

00000c80 <spi_m_dma_enable>:
{
     c80:	b510      	push	{r4, lr}
	ASSERT(spi);
     c82:	4604      	mov	r4, r0
     c84:	2251      	movs	r2, #81	; 0x51
     c86:	4905      	ldr	r1, [pc, #20]	; (c9c <spi_m_dma_enable+0x1c>)
     c88:	3000      	adds	r0, #0
     c8a:	bf18      	it	ne
     c8c:	2001      	movne	r0, #1
     c8e:	4b04      	ldr	r3, [pc, #16]	; (ca0 <spi_m_dma_enable+0x20>)
     c90:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     c92:	1d20      	adds	r0, r4, #4
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <spi_m_dma_enable+0x24>)
     c96:	4798      	blx	r3
     c98:	bd10      	pop	{r4, pc}
     c9a:	bf00      	nop
     c9c:	00009a54 	.word	0x00009a54
     ca0:	00000cd9 	.word	0x00000cd9
     ca4:	00001bcd 	.word	0x00001bcd

00000ca8 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
     caa:	460d      	mov	r5, r1
     cac:	4616      	mov	r6, r2
	ASSERT(spi);
     cae:	4604      	mov	r4, r0
     cb0:	22a8      	movs	r2, #168	; 0xa8
     cb2:	4906      	ldr	r1, [pc, #24]	; (ccc <spi_m_dma_register_callback+0x24>)
     cb4:	3000      	adds	r0, #0
     cb6:	bf18      	it	ne
     cb8:	2001      	movne	r0, #1
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <spi_m_dma_register_callback+0x28>)
     cbc:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     cbe:	4632      	mov	r2, r6
     cc0:	4629      	mov	r1, r5
     cc2:	1d20      	adds	r0, r4, #4
     cc4:	4b03      	ldr	r3, [pc, #12]	; (cd4 <spi_m_dma_register_callback+0x2c>)
     cc6:	4798      	blx	r3
     cc8:	bd70      	pop	{r4, r5, r6, pc}
     cca:	bf00      	nop
     ccc:	00009a54 	.word	0x00009a54
     cd0:	00000cd9 	.word	0x00000cd9
     cd4:	00001c01 	.word	0x00001c01

00000cd8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     cd8:	b900      	cbnz	r0, cdc <assert+0x4>
		__asm("BKPT #0");
     cda:	be00      	bkpt	0x0000
     cdc:	4770      	bx	lr
	...

00000ce0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     ce0:	2364      	movs	r3, #100	; 0x64
     ce2:	fb03 f000 	mul.w	r0, r3, r0
     ce6:	3002      	adds	r0, #2
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <_get_cycles_for_us+0x14>)
     cea:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     cee:	0840      	lsrs	r0, r0, #1
     cf0:	4770      	bx	lr
     cf2:	bf00      	nop
     cf4:	aaaaaaab 	.word	0xaaaaaaab

00000cf8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     cf8:	2364      	movs	r3, #100	; 0x64
     cfa:	fb03 f300 	mul.w	r3, r3, r0
     cfe:	3302      	adds	r3, #2
     d00:	4804      	ldr	r0, [pc, #16]	; (d14 <_get_cycles_for_ms+0x1c>)
     d02:	fba0 2303 	umull	r2, r3, r0, r3
     d06:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d0c:	fb00 f003 	mul.w	r0, r0, r3
     d10:	4770      	bx	lr
     d12:	bf00      	nop
     d14:	aaaaaaab 	.word	0xaaaaaaab

00000d18 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     d18:	3901      	subs	r1, #1
     d1a:	d8fd      	bhi.n	d18 <_delay_cycles>
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop

00000d20 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d20:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     d22:	4a0d      	ldr	r2, [pc, #52]	; (d58 <_init_chip+0x38>)
     d24:	8813      	ldrh	r3, [r2, #0]
     d26:	b29b      	uxth	r3, r3
     d28:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     d2c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     d2e:	4b0b      	ldr	r3, [pc, #44]	; (d5c <_init_chip+0x3c>)
     d30:	4798      	blx	r3
	_oscctrl_init_sources();
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <_init_chip+0x40>)
     d34:	4798      	blx	r3
	_mclk_init();
     d36:	4b0b      	ldr	r3, [pc, #44]	; (d64 <_init_chip+0x44>)
     d38:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <_init_chip+0x48>)
     d3c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d3e:	f640 70ff 	movw	r0, #4095	; 0xfff
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <_init_chip+0x4c>)
     d44:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     d46:	4a0a      	ldr	r2, [pc, #40]	; (d70 <_init_chip+0x50>)
     d48:	6913      	ldr	r3, [r2, #16]
     d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     d4e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     d50:	4b08      	ldr	r3, [pc, #32]	; (d74 <_init_chip+0x54>)
     d52:	4798      	blx	r3
     d54:	bd08      	pop	{r3, pc}
     d56:	bf00      	nop
     d58:	41004000 	.word	0x41004000
     d5c:	000010f9 	.word	0x000010f9
     d60:	0000110d 	.word	0x0000110d
     d64:	000010ed 	.word	0x000010ed
     d68:	00001129 	.word	0x00001129
     d6c:	000010c9 	.word	0x000010c9
     d70:	40000800 	.word	0x40000800
     d74:	00000df9 	.word	0x00000df9

00000d78 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     d78:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d7a:	4a1d      	ldr	r2, [pc, #116]	; (df0 <_dmac_handler+0x78>)
     d7c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     d7e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     d82:	481c      	ldr	r0, [pc, #112]	; (df4 <_dmac_handler+0x7c>)
     d84:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d88:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     d8a:	f412 7f80 	tst.w	r2, #256	; 0x100
     d8e:	d10a      	bne.n	da6 <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d90:	4a17      	ldr	r2, [pc, #92]	; (df0 <_dmac_handler+0x78>)
     d92:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     d94:	f412 7f00 	tst.w	r2, #512	; 0x200
     d98:	d110      	bne.n	dbc <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     d9a:	4a15      	ldr	r2, [pc, #84]	; (df0 <_dmac_handler+0x78>)
     d9c:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     d9e:	f412 6f80 	tst.w	r2, #1024	; 0x400
     da2:	d117      	bne.n	dd4 <_dmac_handler+0x5c>
     da4:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     da6:	011b      	lsls	r3, r3, #4
     da8:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     db0:	2101      	movs	r1, #1
     db2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     db6:	6843      	ldr	r3, [r0, #4]
     db8:	4798      	blx	r3
     dba:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     dbc:	011b      	lsls	r3, r3, #4
     dbe:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dc2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     dc6:	2102      	movs	r1, #2
     dc8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     dcc:	4a09      	ldr	r2, [pc, #36]	; (df4 <_dmac_handler+0x7c>)
     dce:	58d3      	ldr	r3, [r2, r3]
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     dd4:	011b      	lsls	r3, r3, #4
     dd6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     dda:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     dde:	2104      	movs	r1, #4
     de0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     de4:	4a03      	ldr	r2, [pc, #12]	; (df4 <_dmac_handler+0x7c>)
     de6:	4413      	add	r3, r2
     de8:	689b      	ldr	r3, [r3, #8]
     dea:	4798      	blx	r3
	}
}
     dec:	e7da      	b.n	da4 <_dmac_handler+0x2c>
     dee:	bf00      	nop
     df0:	4100a000 	.word	0x4100a000
     df4:	20000180 	.word	0x20000180

00000df8 <_dma_init>:
{
     df8:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     dfa:	4a3d      	ldr	r2, [pc, #244]	; (ef0 <_dma_init+0xf8>)
     dfc:	8813      	ldrh	r3, [r2, #0]
     dfe:	b29b      	uxth	r3, r3
     e00:	f023 0302 	bic.w	r3, r3, #2
     e04:	b29b      	uxth	r3, r3
     e06:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     e08:	8853      	ldrh	r3, [r2, #2]
     e0a:	b29b      	uxth	r3, r3
     e0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     e10:	b29b      	uxth	r3, r3
     e12:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     e14:	8813      	ldrh	r3, [r2, #0]
     e16:	b29b      	uxth	r3, r3
     e18:	f043 0301 	orr.w	r3, r3, #1
     e1c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     e1e:	4b34      	ldr	r3, [pc, #208]	; (ef0 <_dma_init+0xf8>)
     e20:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     e22:	f013 0f01 	tst.w	r3, #1
     e26:	d1fa      	bne.n	e1e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     e28:	4a31      	ldr	r2, [pc, #196]	; (ef0 <_dma_init+0xf8>)
     e2a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     e2e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     e30:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     e32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
     e36:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     e3a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     e3c:	2300      	movs	r3, #0
     e3e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     e40:	492c      	ldr	r1, [pc, #176]	; (ef4 <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     e42:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     e44:	492c      	ldr	r1, [pc, #176]	; (ef8 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
     e46:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
     e48:	e016      	b.n	e78 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     e4a:	4a2c      	ldr	r2, [pc, #176]	; (efc <_dma_init+0x104>)
     e4c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     e50:	4c27      	ldr	r4, [pc, #156]	; (ef0 <_dma_init+0xf8>)
     e52:	1d19      	adds	r1, r3, #4
     e54:	0109      	lsls	r1, r1, #4
     e56:	1860      	adds	r0, r4, r1
     e58:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     e5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e5e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     e60:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     e62:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     e64:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     e66:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     e68:	4922      	ldr	r1, [pc, #136]	; (ef4 <_dma_init+0xfc>)
     e6a:	011a      	lsls	r2, r3, #4
     e6c:	1888      	adds	r0, r1, r2
     e6e:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     e70:	2200      	movs	r2, #0
     e72:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
     e74:	3301      	adds	r3, #1
     e76:	b2db      	uxtb	r3, r3
     e78:	2b1f      	cmp	r3, #31
     e7a:	d9e6      	bls.n	e4a <_dma_init+0x52>
     e7c:	2300      	movs	r3, #0
     e7e:	e00a      	b.n	e96 <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     e80:	f103 011f 	add.w	r1, r3, #31
     e84:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e86:	2a00      	cmp	r2, #0
     e88:	da10      	bge.n	eac <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e8a:	2a00      	cmp	r2, #0
     e8c:	da1c      	bge.n	ec8 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     e8e:	2a00      	cmp	r2, #0
     e90:	da24      	bge.n	edc <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
     e92:	3301      	adds	r3, #1
     e94:	b2db      	uxtb	r3, r3
     e96:	2b04      	cmp	r3, #4
     e98:	d9f2      	bls.n	e80 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     e9a:	4a15      	ldr	r2, [pc, #84]	; (ef0 <_dma_init+0xf8>)
     e9c:	8813      	ldrh	r3, [r2, #0]
     e9e:	b29b      	uxth	r3, r3
     ea0:	f043 0302 	orr.w	r3, r3, #2
     ea4:	8013      	strh	r3, [r2, #0]
}
     ea6:	2000      	movs	r0, #0
     ea8:	bc30      	pop	{r4, r5}
     eaa:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eac:	0950      	lsrs	r0, r2, #5
     eae:	f001 051f 	and.w	r5, r1, #31
     eb2:	2401      	movs	r4, #1
     eb4:	40ac      	lsls	r4, r5
     eb6:	3020      	adds	r0, #32
     eb8:	4d11      	ldr	r5, [pc, #68]	; (f00 <_dma_init+0x108>)
     eba:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ec2:	f3bf 8f6f 	isb	sy
     ec6:	e7e0      	b.n	e8a <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec8:	0950      	lsrs	r0, r2, #5
     eca:	f001 051f 	and.w	r5, r1, #31
     ece:	2401      	movs	r4, #1
     ed0:	40ac      	lsls	r4, r5
     ed2:	3060      	adds	r0, #96	; 0x60
     ed4:	4d0a      	ldr	r5, [pc, #40]	; (f00 <_dma_init+0x108>)
     ed6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     eda:	e7d8      	b.n	e8e <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     edc:	0952      	lsrs	r2, r2, #5
     ede:	f001 011f 	and.w	r1, r1, #31
     ee2:	2001      	movs	r0, #1
     ee4:	fa00 f101 	lsl.w	r1, r0, r1
     ee8:	4805      	ldr	r0, [pc, #20]	; (f00 <_dma_init+0x108>)
     eea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     eee:	e7d0      	b.n	e92 <_dma_init+0x9a>
     ef0:	4100a000 	.word	0x4100a000
     ef4:	20000590 	.word	0x20000590
     ef8:	20000790 	.word	0x20000790
     efc:	00009a70 	.word	0x00009a70
     f00:	e000e100 	.word	0xe000e100

00000f04 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     f04:	b991      	cbnz	r1, f2c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     f06:	b942      	cbnz	r2, f1a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     f08:	0100      	lsls	r0, r0, #4
     f0a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f0e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f12:	2302      	movs	r3, #2
     f14:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     f18:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     f1a:	0100      	lsls	r0, r0, #4
     f1c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f20:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f24:	2302      	movs	r3, #2
     f26:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     f2a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     f2c:	2901      	cmp	r1, #1
     f2e:	d002      	beq.n	f36 <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
     f30:	2902      	cmp	r1, #2
     f32:	d012      	beq.n	f5a <_dma_set_irq_state+0x56>
     f34:	4770      	bx	lr
	if (value == 0x0) {
     f36:	b93a      	cbnz	r2, f48 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     f38:	0100      	lsls	r0, r0, #4
     f3a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f3e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f42:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     f46:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     f48:	0100      	lsls	r0, r0, #4
     f4a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f4e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f52:	2301      	movs	r3, #1
     f54:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     f58:	4770      	bx	lr
	if (value == 0x0) {
     f5a:	b142      	cbz	r2, f6e <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
     f5c:	0100      	lsls	r0, r0, #4
     f5e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f62:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f66:	2304      	movs	r3, #4
     f68:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     f6c:	e7e2      	b.n	f34 <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
     f6e:	0100      	lsls	r0, r0, #4
     f70:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     f74:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     f78:	2304      	movs	r3, #4
     f7a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     f7e:	4770      	bx	lr

00000f80 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     f80:	4b02      	ldr	r3, [pc, #8]	; (f8c <_dma_set_destination_address+0xc>)
     f82:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f86:	6081      	str	r1, [r0, #8]
}
     f88:	2000      	movs	r0, #0
     f8a:	4770      	bx	lr
     f8c:	20000590 	.word	0x20000590

00000f90 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     f90:	4b02      	ldr	r3, [pc, #8]	; (f9c <_dma_set_source_address+0xc>)
     f92:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f96:	6041      	str	r1, [r0, #4]
}
     f98:	2000      	movs	r0, #0
     f9a:	4770      	bx	lr
     f9c:	20000590 	.word	0x20000590

00000fa0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fa0:	4a05      	ldr	r2, [pc, #20]	; (fb8 <_dma_srcinc_enable+0x18>)
     fa2:	0100      	lsls	r0, r0, #4
     fa4:	5a13      	ldrh	r3, [r2, r0]
     fa6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     fac:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     fb0:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     fb2:	5211      	strh	r1, [r2, r0]
}
     fb4:	2000      	movs	r0, #0
     fb6:	4770      	bx	lr
     fb8:	20000590 	.word	0x20000590

00000fbc <_dma_set_data_amount>:
{
     fbc:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     fbe:	4c14      	ldr	r4, [pc, #80]	; (1010 <_dma_set_data_amount+0x54>)
     fc0:	0102      	lsls	r2, r0, #4
     fc2:	18a3      	adds	r3, r4, r2
     fc4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fc6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     fc8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fcc:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     fce:	f412 6f00 	tst.w	r2, #2048	; 0x800
     fd2:	d006      	beq.n	fe2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     fd4:	fa01 f403 	lsl.w	r4, r1, r3
     fd8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     fda:	4a0d      	ldr	r2, [pc, #52]	; (1010 <_dma_set_data_amount+0x54>)
     fdc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     fe0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     fe2:	4c0b      	ldr	r4, [pc, #44]	; (1010 <_dma_set_data_amount+0x54>)
     fe4:	0102      	lsls	r2, r0, #4
     fe6:	18a5      	adds	r5, r4, r2
     fe8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     fea:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     fec:	f412 6f80 	tst.w	r2, #1024	; 0x400
     ff0:	d005      	beq.n	ffe <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     ff2:	fa01 f303 	lsl.w	r3, r1, r3
     ff6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     ff8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     ffc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     ffe:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <_dma_set_data_amount+0x54>)
    1002:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1006:	8041      	strh	r1, [r0, #2]
}
    1008:	2000      	movs	r0, #0
    100a:	bc30      	pop	{r4, r5}
    100c:	4770      	bx	lr
    100e:	bf00      	nop
    1010:	20000590 	.word	0x20000590

00001014 <_dma_enable_transaction>:
{
    1014:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1016:	4c0c      	ldr	r4, [pc, #48]	; (1048 <_dma_enable_transaction+0x34>)
    1018:	0102      	lsls	r2, r0, #4
    101a:	5aa3      	ldrh	r3, [r4, r2]
    101c:	b29b      	uxth	r3, r3
    101e:	f043 0301 	orr.w	r3, r3, #1
    1022:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1024:	4c09      	ldr	r4, [pc, #36]	; (104c <_dma_enable_transaction+0x38>)
    1026:	1d03      	adds	r3, r0, #4
    1028:	011b      	lsls	r3, r3, #4
    102a:	58e2      	ldr	r2, [r4, r3]
    102c:	f042 0202 	orr.w	r2, r2, #2
    1030:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1032:	b129      	cbz	r1, 1040 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1034:	2301      	movs	r3, #1
    1036:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    103a:	6922      	ldr	r2, [r4, #16]
    103c:	4310      	orrs	r0, r2
    103e:	6120      	str	r0, [r4, #16]
}
    1040:	2000      	movs	r0, #0
    1042:	f85d 4b04 	ldr.w	r4, [sp], #4
    1046:	4770      	bx	lr
    1048:	20000590 	.word	0x20000590
    104c:	4100a000 	.word	0x4100a000

00001050 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1050:	4b02      	ldr	r3, [pc, #8]	; (105c <_dma_get_channel_resource+0xc>)
    1052:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    1056:	6001      	str	r1, [r0, #0]
}
    1058:	2000      	movs	r0, #0
    105a:	4770      	bx	lr
    105c:	20000180 	.word	0x20000180

00001060 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1060:	b508      	push	{r3, lr}
	_dmac_handler();
    1062:	4b01      	ldr	r3, [pc, #4]	; (1068 <DMAC_0_Handler+0x8>)
    1064:	4798      	blx	r3
    1066:	bd08      	pop	{r3, pc}
    1068:	00000d79 	.word	0x00000d79

0000106c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    106c:	b508      	push	{r3, lr}
	_dmac_handler();
    106e:	4b01      	ldr	r3, [pc, #4]	; (1074 <DMAC_1_Handler+0x8>)
    1070:	4798      	blx	r3
    1072:	bd08      	pop	{r3, pc}
    1074:	00000d79 	.word	0x00000d79

00001078 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1078:	b508      	push	{r3, lr}
	_dmac_handler();
    107a:	4b01      	ldr	r3, [pc, #4]	; (1080 <DMAC_2_Handler+0x8>)
    107c:	4798      	blx	r3
    107e:	bd08      	pop	{r3, pc}
    1080:	00000d79 	.word	0x00000d79

00001084 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1084:	b508      	push	{r3, lr}
	_dmac_handler();
    1086:	4b01      	ldr	r3, [pc, #4]	; (108c <DMAC_3_Handler+0x8>)
    1088:	4798      	blx	r3
    108a:	bd08      	pop	{r3, pc}
    108c:	00000d79 	.word	0x00000d79

00001090 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1090:	b508      	push	{r3, lr}
	_dmac_handler();
    1092:	4b01      	ldr	r3, [pc, #4]	; (1098 <DMAC_4_Handler+0x8>)
    1094:	4798      	blx	r3
    1096:	bd08      	pop	{r3, pc}
    1098:	00000d79 	.word	0x00000d79

0000109c <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
    109c:	b084      	sub	sp, #16
    109e:	b470      	push	{r4, r5, r6}
    10a0:	b085      	sub	sp, #20
    10a2:	4606      	mov	r6, r0
    10a4:	a809      	add	r0, sp, #36	; 0x24
    10a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    10aa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    10ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
    10b0:	4d04      	ldr	r5, [pc, #16]	; (10c4 <_dma_set_descriptor+0x28>)
    10b2:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    10b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    10ba:	b005      	add	sp, #20
    10bc:	bc70      	pop	{r4, r5, r6}
    10be:	b004      	add	sp, #16
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop
    10c4:	20000590 	.word	0x20000590

000010c8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10c8:	f010 0f01 	tst.w	r0, #1
    10cc:	d008      	beq.n	10e0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10ce:	4a05      	ldr	r2, [pc, #20]	; (10e4 <_gclk_init_generators_by_fref+0x1c>)
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_gclk_init_generators_by_fref+0x20>)
    10d2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_gclk_init_generators_by_fref+0x20>)
    10d6:	685a      	ldr	r2, [r3, #4]
    10d8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    10dc:	421a      	tst	r2, r3
    10de:	d1f9      	bne.n	10d4 <_gclk_init_generators_by_fref+0xc>
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop
    10e4:	00010108 	.word	0x00010108
    10e8:	40001c00 	.word	0x40001c00

000010ec <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10ec:	2201      	movs	r2, #1
    10ee:	4b01      	ldr	r3, [pc, #4]	; (10f4 <_mclk_init+0x8>)
    10f0:	715a      	strb	r2, [r3, #5]
    10f2:	4770      	bx	lr
    10f4:	40000800 	.word	0x40000800

000010f8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10f8:	4b03      	ldr	r3, [pc, #12]	; (1108 <_osc32kctrl_init_sources+0x10>)
    10fa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10fc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1100:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1102:	2201      	movs	r2, #1
    1104:	741a      	strb	r2, [r3, #16]
    1106:	4770      	bx	lr
    1108:	40001400 	.word	0x40001400

0000110c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    110c:	4a04      	ldr	r2, [pc, #16]	; (1120 <_oscctrl_init_sources+0x14>)
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <_oscctrl_init_sources+0x18>)
    1110:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1112:	4b04      	ldr	r3, [pc, #16]	; (1124 <_oscctrl_init_sources+0x18>)
    1114:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1116:	f013 0f02 	tst.w	r3, #2
    111a:	d0fa      	beq.n	1112 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    111c:	4770      	bx	lr
    111e:	bf00      	nop
    1120:	03002606 	.word	0x03002606
    1124:	40001000 	.word	0x40001000

00001128 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1128:	2231      	movs	r2, #49	; 0x31
    112a:	4b0e      	ldr	r3, [pc, #56]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    112c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    112e:	4b0d      	ldr	r3, [pc, #52]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1132:	f013 0f06 	tst.w	r3, #6
    1136:	d1fa      	bne.n	112e <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1138:	4b0a      	ldr	r3, [pc, #40]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    113a:	4a0b      	ldr	r2, [pc, #44]	; (1168 <_oscctrl_init_referenced_generators+0x40>)
    113c:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    113e:	2202      	movs	r2, #2
    1140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1144:	4b07      	ldr	r3, [pc, #28]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1148:	f013 0f02 	tst.w	r3, #2
    114c:	d1fa      	bne.n	1144 <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    1150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1152:	f013 0f01 	tst.w	r3, #1
    1156:	d104      	bne.n	1162 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <_oscctrl_init_referenced_generators+0x3c>)
    115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    115c:	f013 0f02 	tst.w	r3, #2
    1160:	d0f5      	beq.n	114e <_oscctrl_init_referenced_generators+0x26>
    1162:	4770      	bx	lr
    1164:	40001000 	.word	0x40001000
    1168:	00020060 	.word	0x00020060

0000116c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    116c:	b500      	push	{lr}
    116e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1170:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <RAMECC_Handler+0x3c>)
    1172:	789b      	ldrb	r3, [r3, #2]
    1174:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1176:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1178:	9b01      	ldr	r3, [sp, #4]
    117a:	f013 0f02 	tst.w	r3, #2
    117e:	d006      	beq.n	118e <RAMECC_Handler+0x22>
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <RAMECC_Handler+0x40>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	b11b      	cbz	r3, 118e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1186:	4a08      	ldr	r2, [pc, #32]	; (11a8 <RAMECC_Handler+0x3c>)
    1188:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    118a:	4798      	blx	r3
    118c:	e009      	b.n	11a2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    118e:	9b01      	ldr	r3, [sp, #4]
    1190:	f013 0f01 	tst.w	r3, #1
    1194:	d005      	beq.n	11a2 <RAMECC_Handler+0x36>
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <RAMECC_Handler+0x40>)
    1198:	685b      	ldr	r3, [r3, #4]
    119a:	b113      	cbz	r3, 11a2 <RAMECC_Handler+0x36>
    119c:	4a02      	ldr	r2, [pc, #8]	; (11a8 <RAMECC_Handler+0x3c>)
    119e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    11a0:	4798      	blx	r3
	} else {
		return;
	}
}
    11a2:	b003      	add	sp, #12
    11a4:	f85d fb04 	ldr.w	pc, [sp], #4
    11a8:	41020000 	.word	0x41020000
    11ac:	20000990 	.word	0x20000990

000011b0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    11b0:	b470      	push	{r4, r5, r6}
    11b2:	b089      	sub	sp, #36	; 0x24
    11b4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    11b6:	466c      	mov	r4, sp
    11b8:	4d0c      	ldr	r5, [pc, #48]	; (11ec <_sercom_get_hardware_index+0x3c>)
    11ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    11be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    11c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11c6:	2000      	movs	r0, #0
    11c8:	2807      	cmp	r0, #7
    11ca:	d80a      	bhi.n	11e2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    11cc:	ab08      	add	r3, sp, #32
    11ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    11d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
    11d6:	42b3      	cmp	r3, r6
    11d8:	d001      	beq.n	11de <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11da:	3001      	adds	r0, #1
    11dc:	e7f4      	b.n	11c8 <_sercom_get_hardware_index+0x18>
			return i;
    11de:	b2c0      	uxtb	r0, r0
    11e0:	e000      	b.n	11e4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    11e2:	2000      	movs	r0, #0
}
    11e4:	b009      	add	sp, #36	; 0x24
    11e6:	bc70      	pop	{r4, r5, r6}
    11e8:	4770      	bx	lr
    11ea:	bf00      	nop
    11ec:	00009b70 	.word	0x00009b70

000011f0 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    11f0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    11f2:	f013 0f01 	tst.w	r3, #1
    11f6:	d109      	bne.n	120c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    11f8:	6803      	ldr	r3, [r0, #0]
    11fa:	f043 0302 	orr.w	r3, r3, #2
    11fe:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1200:	69c3      	ldr	r3, [r0, #28]
    1202:	f013 0f03 	tst.w	r3, #3
    1206:	d1fb      	bne.n	1200 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1208:	2000      	movs	r0, #0
    120a:	4770      	bx	lr
		return ERR_BUSY;
    120c:	f06f 0003 	mvn.w	r0, #3
}
    1210:	4770      	bx	lr

00001212 <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1212:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1214:	f013 0f04 	tst.w	r3, #4
    1218:	d109      	bne.n	122e <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    121a:	6843      	ldr	r3, [r0, #4]
    121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1220:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1222:	69c3      	ldr	r3, [r0, #28]
    1224:	f013 0f17 	tst.w	r3, #23
    1228:	d1fb      	bne.n	1222 <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    122a:	2000      	movs	r0, #0
    122c:	4770      	bx	lr
		return ERR_BUSY;
    122e:	f06f 0003 	mvn.w	r0, #3
}
    1232:	4770      	bx	lr

00001234 <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1234:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1236:	f013 0f04 	tst.w	r3, #4
    123a:	d109      	bne.n	1250 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    123c:	6843      	ldr	r3, [r0, #4]
    123e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    1242:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1244:	69c3      	ldr	r3, [r0, #28]
    1246:	f013 0f17 	tst.w	r3, #23
    124a:	d1fb      	bne.n	1244 <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    124c:	2000      	movs	r0, #0
    124e:	4770      	bx	lr
		return ERR_BUSY;
    1250:	f06f 0003 	mvn.w	r0, #3
}
    1254:	4770      	bx	lr

00001256 <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    1256:	3028      	adds	r0, #40	; 0x28
    1258:	4770      	bx	lr

0000125a <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    125a:	3028      	adds	r0, #40	; 0x28
    125c:	4770      	bx	lr
	...

00001260 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    1260:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1262:	4b04      	ldr	r3, [pc, #16]	; (1274 <_spi_get_tx_dma_channel+0x14>)
    1264:	4798      	blx	r3

	switch (index) {
    1266:	2805      	cmp	r0, #5
    1268:	d001      	beq.n	126e <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    126a:	2000      	movs	r0, #0
    126c:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    126e:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    1270:	bd08      	pop	{r3, pc}
    1272:	bf00      	nop
    1274:	000011b1 	.word	0x000011b1

00001278 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    1278:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <_spi_is_rx_dma_channel_enabled+0x14>)
    127c:	4798      	blx	r3

	switch (index) {
    127e:	2805      	cmp	r0, #5
    1280:	d001      	beq.n	1286 <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    1282:	2000      	movs	r0, #0
    1284:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    1286:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    1288:	bd08      	pop	{r3, pc}
    128a:	bf00      	nop
    128c:	000011b1 	.word	0x000011b1

00001290 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    1290:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <_spi_get_rx_dma_channel+0x20>)
    1294:	4798      	blx	r3

	switch (index) {
    1296:	2807      	cmp	r0, #7
    1298:	d807      	bhi.n	12aa <_spi_get_rx_dma_channel+0x1a>
    129a:	e8df f000 	tbb	[pc, r0]
    129e:	0404      	.short	0x0404
    12a0:	06040404 	.word	0x06040404
    12a4:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    12a6:	2001      	movs	r0, #1
    12a8:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    12aa:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    12ac:	bd08      	pop	{r3, pc}
    12ae:	bf00      	nop
    12b0:	000011b1 	.word	0x000011b1

000012b4 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    12b4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12b6:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    12b8:	689b      	ldr	r3, [r3, #8]
    12ba:	b103      	cbz	r3, 12be <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    12bc:	4798      	blx	r3
    12be:	bd08      	pop	{r3, pc}

000012c0 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    12c0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12c2:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    12c4:	68db      	ldr	r3, [r3, #12]
    12c6:	b103      	cbz	r3, 12ca <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    12c8:	4798      	blx	r3
    12ca:	bd08      	pop	{r3, pc}

000012cc <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    12cc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12ce:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    12d0:	685b      	ldr	r3, [r3, #4]
    12d2:	b103      	cbz	r3, 12d6 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    12d4:	4798      	blx	r3
    12d6:	bd08      	pop	{r3, pc}

000012d8 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    12d8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    12da:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    12dc:	691b      	ldr	r3, [r3, #16]
    12de:	b103      	cbz	r3, 12e2 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    12e0:	4798      	blx	r3
    12e2:	bd08      	pop	{r3, pc}

000012e4 <_get_i2cm_index>:
{
    12e4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    12e6:	4b0e      	ldr	r3, [pc, #56]	; (1320 <_get_i2cm_index+0x3c>)
    12e8:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    12ea:	2300      	movs	r3, #0
    12ec:	2b01      	cmp	r3, #1
    12ee:	d80d      	bhi.n	130c <_get_i2cm_index+0x28>
		if (_i2cms[i].number == sercom_offset) {
    12f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    12f4:	00d1      	lsls	r1, r2, #3
    12f6:	4a0b      	ldr	r2, [pc, #44]	; (1324 <_get_i2cm_index+0x40>)
    12f8:	440a      	add	r2, r1
    12fa:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    12fe:	4290      	cmp	r0, r2
    1300:	d002      	beq.n	1308 <_get_i2cm_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1302:	3301      	adds	r3, #1
    1304:	b2db      	uxtb	r3, r3
    1306:	e7f1      	b.n	12ec <_get_i2cm_index+0x8>
			return i;
    1308:	b258      	sxtb	r0, r3
    130a:	bd08      	pop	{r3, pc}
	ASSERT(false);
    130c:	f240 32a7 	movw	r2, #935	; 0x3a7
    1310:	4905      	ldr	r1, [pc, #20]	; (1328 <_get_i2cm_index+0x44>)
    1312:	2000      	movs	r0, #0
    1314:	4b05      	ldr	r3, [pc, #20]	; (132c <_get_i2cm_index+0x48>)
    1316:	4798      	blx	r3
	return -1;
    1318:	f04f 30ff 	mov.w	r0, #4294967295
}
    131c:	bd08      	pop	{r3, pc}
    131e:	bf00      	nop
    1320:	000011b1 	.word	0x000011b1
    1324:	00009b70 	.word	0x00009b70
    1328:	00009bfc 	.word	0x00009bfc
    132c:	00000cd9 	.word	0x00000cd9

00001330 <_i2c_m_sync_init_impl>:
{
    1330:	b538      	push	{r3, r4, r5, lr}
    1332:	4605      	mov	r5, r0
    1334:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1336:	4608      	mov	r0, r1
    1338:	4b33      	ldr	r3, [pc, #204]	; (1408 <_i2c_m_sync_init_impl+0xd8>)
    133a:	4798      	blx	r3
    133c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    133e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1340:	f013 0f01 	tst.w	r3, #1
    1344:	d122      	bne.n	138c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1346:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    134a:	00da      	lsls	r2, r3, #3
    134c:	4b2f      	ldr	r3, [pc, #188]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    134e:	4413      	add	r3, r2
    1350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1352:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1356:	69e3      	ldr	r3, [r4, #28]
    1358:	f013 0f03 	tst.w	r3, #3
    135c:	d1fb      	bne.n	1356 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    135e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1360:	f013 0f02 	tst.w	r3, #2
    1364:	d00b      	beq.n	137e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1366:	6823      	ldr	r3, [r4, #0]
    1368:	f023 0302 	bic.w	r3, r3, #2
    136c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    136e:	69e3      	ldr	r3, [r4, #28]
    1370:	f013 0f03 	tst.w	r3, #3
    1374:	d1fb      	bne.n	136e <_i2c_m_sync_init_impl+0x3e>
    1376:	69e3      	ldr	r3, [r4, #28]
    1378:	f013 0f02 	tst.w	r3, #2
    137c:	d1fb      	bne.n	1376 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    137e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1382:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1384:	69e3      	ldr	r3, [r4, #28]
    1386:	f013 0f03 	tst.w	r3, #3
    138a:	d1fb      	bne.n	1384 <_i2c_m_sync_init_impl+0x54>
    138c:	69e3      	ldr	r3, [r4, #28]
    138e:	f013 0f01 	tst.w	r3, #1
    1392:	d1fb      	bne.n	138c <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1394:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1398:	00da      	lsls	r2, r3, #3
    139a:	4b1c      	ldr	r3, [pc, #112]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    139c:	4413      	add	r3, r2
    139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    13a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	f013 0f03 	tst.w	r3, #3
    13a8:	d1fb      	bne.n	13a2 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    13aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    13ae:	00da      	lsls	r2, r3, #3
    13b0:	4b16      	ldr	r3, [pc, #88]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13b2:	4413      	add	r3, r2
    13b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    13b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13b8:	69e3      	ldr	r3, [r4, #28]
    13ba:	f013 0f04 	tst.w	r3, #4
    13be:	d1fb      	bne.n	13b8 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    13c0:	0042      	lsls	r2, r0, #1
    13c2:	4402      	add	r2, r0
    13c4:	00d1      	lsls	r1, r2, #3
    13c6:	4b11      	ldr	r3, [pc, #68]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13c8:	440b      	add	r3, r1
    13ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    13cc:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    13ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    13d2:	f003 0303 	and.w	r3, r3, #3
    13d6:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    13d8:	2b01      	cmp	r3, #1
    13da:	bf94      	ite	ls
    13dc:	2300      	movls	r3, #0
    13de:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    13e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    13e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    13e6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    13ea:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13ec:	69e3      	ldr	r3, [r4, #28]
    13ee:	f013 0f04 	tst.w	r3, #4
    13f2:	d1fb      	bne.n	13ec <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    13f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    13f8:	00c2      	lsls	r2, r0, #3
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <_i2c_m_sync_init_impl+0xdc>)
    13fc:	4413      	add	r3, r2
    13fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1402:	81eb      	strh	r3, [r5, #14]
}
    1404:	2000      	movs	r0, #0
    1406:	bd38      	pop	{r3, r4, r5, pc}
    1408:	000012e5 	.word	0x000012e5
    140c:	00009b70 	.word	0x00009b70

00001410 <_sercom_i2c_sync_send_address>:
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1414:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1416:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1418:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    141c:	f240 52a6 	movw	r2, #1446	; 0x5a6
    1420:	4999      	ldr	r1, [pc, #612]	; (1688 <_sercom_i2c_sync_send_address+0x278>)
    1422:	3000      	adds	r0, #0
    1424:	bf18      	it	ne
    1426:	2001      	movne	r0, #1
    1428:	4b98      	ldr	r3, [pc, #608]	; (168c <_sercom_i2c_sync_send_address+0x27c>)
    142a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    142c:	686b      	ldr	r3, [r5, #4]
    142e:	2b01      	cmp	r3, #1
    1430:	d057      	beq.n	14e2 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1432:	6863      	ldr	r3, [r4, #4]
    1434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1438:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143a:	69e3      	ldr	r3, [r4, #28]
    143c:	f013 0f04 	tst.w	r3, #4
    1440:	d1fb      	bne.n	143a <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1442:	882b      	ldrh	r3, [r5, #0]
    1444:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1448:	d056      	beq.n	14f8 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    144a:	886a      	ldrh	r2, [r5, #2]
    144c:	f012 0f01 	tst.w	r2, #1
    1450:	d004      	beq.n	145c <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1452:	886a      	ldrh	r2, [r5, #2]
    1454:	b292      	uxth	r2, r2
    1456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    145a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    145c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1460:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1464:	69e3      	ldr	r3, [r4, #28]
    1466:	f013 0f04 	tst.w	r3, #4
    146a:	d1fb      	bne.n	1464 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    146c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1472:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1478:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    147a:	69e3      	ldr	r3, [r4, #28]
    147c:	f013 0f04 	tst.w	r3, #4
    1480:	d1fb      	bne.n	147a <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    1482:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1484:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1488:	7e33      	ldrb	r3, [r6, #24]
    148a:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    148c:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    148e:	1e51      	subs	r1, r2, #1
    1490:	b11a      	cbz	r2, 149a <_sercom_i2c_sync_send_address+0x8a>
    1492:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1494:	f013 0f03 	tst.w	r3, #3
    1498:	d0f6      	beq.n	1488 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    149a:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    149c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14a0:	69e3      	ldr	r3, [r4, #28]
    14a2:	f013 0f04 	tst.w	r3, #4
    14a6:	d1fb      	bne.n	14a0 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    14a8:	8b63      	ldrh	r3, [r4, #26]
    14aa:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    14ac:	f010 0f01 	tst.w	r0, #1
    14b0:	f000 809c 	beq.w	15ec <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    14b4:	f013 0f02 	tst.w	r3, #2
    14b8:	d032      	beq.n	1520 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    14ba:	2201      	movs	r2, #1
    14bc:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    14be:	886a      	ldrh	r2, [r5, #2]
    14c0:	b292      	uxth	r2, r2
    14c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    14c6:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    14c8:	886a      	ldrh	r2, [r5, #2]
    14ca:	b292      	uxth	r2, r2
    14cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    14d0:	b292      	uxth	r2, r2
    14d2:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    14d4:	f013 0f01 	tst.w	r3, #1
    14d8:	f000 80d1 	beq.w	167e <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    14dc:	f06f 0004 	mvn.w	r0, #4
    14e0:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    14e2:	2e00      	cmp	r6, #0
    14e4:	d0a5      	beq.n	1432 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14e6:	6863      	ldr	r3, [r4, #4]
    14e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    14ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14ee:	69e3      	ldr	r3, [r4, #28]
    14f0:	f013 0f04 	tst.w	r3, #4
    14f4:	d1fb      	bne.n	14ee <_sercom_i2c_sync_send_address+0xde>
    14f6:	e7a4      	b.n	1442 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    14f8:	005b      	lsls	r3, r3, #1
    14fa:	b2db      	uxtb	r3, r3
    14fc:	886a      	ldrh	r2, [r5, #2]
    14fe:	f002 0201 	and.w	r2, r2, #1
    1502:	431a      	orrs	r2, r3
    1504:	69e3      	ldr	r3, [r4, #28]
    1506:	f013 0f04 	tst.w	r3, #4
    150a:	d1fb      	bne.n	1504 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    150c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1512:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1514:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1516:	69e3      	ldr	r3, [r4, #28]
    1518:	f013 0f04 	tst.w	r3, #4
    151c:	d1fb      	bne.n	1516 <_sercom_i2c_sync_send_address+0x106>
    151e:	e7b0      	b.n	1482 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1520:	f013 0f04 	tst.w	r3, #4
    1524:	d11f      	bne.n	1566 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    1526:	886b      	ldrh	r3, [r5, #2]
    1528:	f413 6f80 	tst.w	r3, #1024	; 0x400
    152c:	d039      	beq.n	15a2 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    152e:	882b      	ldrh	r3, [r5, #0]
    1530:	121b      	asrs	r3, r3, #8
    1532:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1534:	f003 0206 	and.w	r2, r3, #6
    1538:	69e3      	ldr	r3, [r4, #28]
    153a:	f013 0f04 	tst.w	r3, #4
    153e:	d1fb      	bne.n	1538 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1540:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1546:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1548:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    154c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    154e:	69e3      	ldr	r3, [r4, #28]
    1550:	f013 0f04 	tst.w	r3, #4
    1554:	d1fb      	bne.n	154e <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    1556:	886b      	ldrh	r3, [r5, #2]
    1558:	b29b      	uxth	r3, r3
    155a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    155e:	b29b      	uxth	r3, r3
    1560:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1562:	2000      	movs	r0, #0
    1564:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    1566:	686b      	ldr	r3, [r5, #4]
    1568:	2b00      	cmp	r3, #0
    156a:	dd04      	ble.n	1576 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    156c:	886b      	ldrh	r3, [r5, #2]
    156e:	b29b      	uxth	r3, r3
    1570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1574:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1576:	886b      	ldrh	r3, [r5, #2]
    1578:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    157c:	d108      	bne.n	1590 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    157e:	886b      	ldrh	r3, [r5, #2]
    1580:	b29b      	uxth	r3, r3
    1582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1586:	b29b      	uxth	r3, r3
    1588:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    158a:	f06f 0001 	mvn.w	r0, #1
    158e:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1590:	6863      	ldr	r3, [r4, #4]
    1592:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1596:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1598:	69e3      	ldr	r3, [r4, #28]
    159a:	f013 0f04 	tst.w	r3, #4
    159e:	d1fb      	bne.n	1598 <_sercom_i2c_sync_send_address+0x188>
    15a0:	e7ed      	b.n	157e <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    15a2:	6868      	ldr	r0, [r5, #4]
    15a4:	b998      	cbnz	r0, 15ce <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    15a6:	886b      	ldrh	r3, [r5, #2]
    15a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15ac:	d106      	bne.n	15bc <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    15ae:	886b      	ldrh	r3, [r5, #2]
    15b0:	b29b      	uxth	r3, r3
    15b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    15b6:	b29b      	uxth	r3, r3
    15b8:	806b      	strh	r3, [r5, #2]
    15ba:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15bc:	6863      	ldr	r3, [r4, #4]
    15be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15c2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15c4:	69e3      	ldr	r3, [r4, #28]
    15c6:	f013 0f04 	tst.w	r3, #4
    15ca:	d1fb      	bne.n	15c4 <_sercom_i2c_sync_send_address+0x1b4>
    15cc:	e7ef      	b.n	15ae <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15ce:	68ab      	ldr	r3, [r5, #8]
    15d0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15d2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	f013 0f04 	tst.w	r3, #4
    15da:	d1fb      	bne.n	15d4 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    15dc:	68ab      	ldr	r3, [r5, #8]
    15de:	3301      	adds	r3, #1
    15e0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    15e2:	686b      	ldr	r3, [r5, #4]
    15e4:	3b01      	subs	r3, #1
    15e6:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    15e8:	2000      	movs	r0, #0
    15ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    15ec:	f010 0f02 	tst.w	r0, #2
    15f0:	d048      	beq.n	1684 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    15f2:	6869      	ldr	r1, [r5, #4]
    15f4:	2900      	cmp	r1, #0
    15f6:	d03d      	beq.n	1674 <_sercom_i2c_sync_send_address+0x264>
    15f8:	f013 0f04 	tst.w	r3, #4
    15fc:	d13a      	bne.n	1674 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    15fe:	3901      	subs	r1, #1
    1600:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1602:	b901      	cbnz	r1, 1606 <_sercom_i2c_sync_send_address+0x1f6>
    1604:	b1e2      	cbz	r2, 1640 <_sercom_i2c_sync_send_address+0x230>
    1606:	2901      	cmp	r1, #1
    1608:	d018      	beq.n	163c <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    160a:	686b      	ldr	r3, [r5, #4]
    160c:	b94b      	cbnz	r3, 1622 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    160e:	886b      	ldrh	r3, [r5, #2]
    1610:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1614:	d11d      	bne.n	1652 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    1616:	886b      	ldrh	r3, [r5, #2]
    1618:	b29b      	uxth	r3, r3
    161a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    161e:	b29b      	uxth	r3, r3
    1620:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1622:	68aa      	ldr	r2, [r5, #8]
    1624:	1c53      	adds	r3, r2, #1
    1626:	60ab      	str	r3, [r5, #8]
    1628:	69e3      	ldr	r3, [r4, #28]
    162a:	f013 0f04 	tst.w	r3, #4
    162e:	d1fb      	bne.n	1628 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1632:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1634:	2302      	movs	r3, #2
    1636:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1638:	2000      	movs	r0, #0
    163a:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    163c:	2a00      	cmp	r2, #0
    163e:	d0e4      	beq.n	160a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1640:	6863      	ldr	r3, [r4, #4]
    1642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1646:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1648:	69e3      	ldr	r3, [r4, #28]
    164a:	f013 0f04 	tst.w	r3, #4
    164e:	d1fb      	bne.n	1648 <_sercom_i2c_sync_send_address+0x238>
    1650:	e7db      	b.n	160a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1652:	6863      	ldr	r3, [r4, #4]
    1654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1658:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    165a:	69e3      	ldr	r3, [r4, #28]
    165c:	f013 0f04 	tst.w	r3, #4
    1660:	d1fb      	bne.n	165a <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1662:	6863      	ldr	r3, [r4, #4]
    1664:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1668:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    166a:	69e3      	ldr	r3, [r4, #28]
    166c:	f013 0f04 	tst.w	r3, #4
    1670:	d1fb      	bne.n	166a <_sercom_i2c_sync_send_address+0x25a>
    1672:	e7d0      	b.n	1616 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1674:	2302      	movs	r3, #2
    1676:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1678:	f06f 0001 	mvn.w	r0, #1
    167c:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    167e:	f06f 0003 	mvn.w	r0, #3
    1682:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    1684:	2000      	movs	r0, #0
}
    1686:	bd70      	pop	{r4, r5, r6, pc}
    1688:	00009bfc 	.word	0x00009bfc
    168c:	00000cd9 	.word	0x00000cd9

00001690 <_spi_m_dma_rx_enable>:
{
    1690:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1692:	4604      	mov	r4, r0
    1694:	b168      	cbz	r0, 16b2 <_spi_m_dma_rx_enable+0x22>
    1696:	6803      	ldr	r3, [r0, #0]
    1698:	b14b      	cbz	r3, 16ae <_spi_m_dma_rx_enable+0x1e>
    169a:	2001      	movs	r0, #1
    169c:	f640 32fe 	movw	r2, #3070	; 0xbfe
    16a0:	4905      	ldr	r1, [pc, #20]	; (16b8 <_spi_m_dma_rx_enable+0x28>)
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <_spi_m_dma_rx_enable+0x2c>)
    16a4:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    16a6:	6820      	ldr	r0, [r4, #0]
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <_spi_m_dma_rx_enable+0x30>)
    16aa:	4798      	blx	r3
}
    16ac:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    16ae:	2000      	movs	r0, #0
    16b0:	e7f4      	b.n	169c <_spi_m_dma_rx_enable+0xc>
    16b2:	2000      	movs	r0, #0
    16b4:	e7f2      	b.n	169c <_spi_m_dma_rx_enable+0xc>
    16b6:	bf00      	nop
    16b8:	00009bfc 	.word	0x00009bfc
    16bc:	00000cd9 	.word	0x00000cd9
    16c0:	00001213 	.word	0x00001213

000016c4 <_spi_m_dma_rx_disable>:
{
    16c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    16c6:	4604      	mov	r4, r0
    16c8:	b168      	cbz	r0, 16e6 <_spi_m_dma_rx_disable+0x22>
    16ca:	6803      	ldr	r3, [r0, #0]
    16cc:	b14b      	cbz	r3, 16e2 <_spi_m_dma_rx_disable+0x1e>
    16ce:	2001      	movs	r0, #1
    16d0:	f640 4205 	movw	r2, #3077	; 0xc05
    16d4:	4905      	ldr	r1, [pc, #20]	; (16ec <_spi_m_dma_rx_disable+0x28>)
    16d6:	4b06      	ldr	r3, [pc, #24]	; (16f0 <_spi_m_dma_rx_disable+0x2c>)
    16d8:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    16da:	6820      	ldr	r0, [r4, #0]
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <_spi_m_dma_rx_disable+0x30>)
    16de:	4798      	blx	r3
}
    16e0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    16e2:	2000      	movs	r0, #0
    16e4:	e7f4      	b.n	16d0 <_spi_m_dma_rx_disable+0xc>
    16e6:	2000      	movs	r0, #0
    16e8:	e7f2      	b.n	16d0 <_spi_m_dma_rx_disable+0xc>
    16ea:	bf00      	nop
    16ec:	00009bfc 	.word	0x00009bfc
    16f0:	00000cd9 	.word	0x00000cd9
    16f4:	00001235 	.word	0x00001235

000016f8 <_i2c_m_sync_init>:
{
    16f8:	b538      	push	{r3, r4, r5, lr}
    16fa:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    16fc:	4604      	mov	r4, r0
    16fe:	f240 5219 	movw	r2, #1305	; 0x519
    1702:	4906      	ldr	r1, [pc, #24]	; (171c <_i2c_m_sync_init+0x24>)
    1704:	3000      	adds	r0, #0
    1706:	bf18      	it	ne
    1708:	2001      	movne	r0, #1
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <_i2c_m_sync_init+0x28>)
    170c:	4798      	blx	r3
	i2c_dev->hw = hw;
    170e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1710:	4629      	mov	r1, r5
    1712:	4620      	mov	r0, r4
    1714:	4b03      	ldr	r3, [pc, #12]	; (1724 <_i2c_m_sync_init+0x2c>)
    1716:	4798      	blx	r3
}
    1718:	bd38      	pop	{r3, r4, r5, pc}
    171a:	bf00      	nop
    171c:	00009bfc 	.word	0x00009bfc
    1720:	00000cd9 	.word	0x00000cd9
    1724:	00001331 	.word	0x00001331

00001728 <_i2c_m_sync_enable>:
{
    1728:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    172a:	4e1b      	ldr	r6, [pc, #108]	; (1798 <_i2c_m_sync_enable+0x70>)
    172c:	4604      	mov	r4, r0
    172e:	f240 5236 	movw	r2, #1334	; 0x536
    1732:	4631      	mov	r1, r6
    1734:	3000      	adds	r0, #0
    1736:	bf18      	it	ne
    1738:	2001      	movne	r0, #1
    173a:	4d18      	ldr	r5, [pc, #96]	; (179c <_i2c_m_sync_enable+0x74>)
    173c:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    173e:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1740:	f240 6206 	movw	r2, #1542	; 0x606
    1744:	4631      	mov	r1, r6
    1746:	1c20      	adds	r0, r4, #0
    1748:	bf18      	it	ne
    174a:	2001      	movne	r0, #1
    174c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	f043 0302 	orr.w	r3, r3, #2
    1754:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1756:	69e3      	ldr	r3, [r4, #28]
    1758:	f013 0f03 	tst.w	r3, #3
    175c:	d1fb      	bne.n	1756 <_i2c_m_sync_enable+0x2e>
    175e:	2104      	movs	r1, #4
    1760:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1764:	69e3      	ldr	r3, [r4, #28]
    1766:	f013 0f04 	tst.w	r3, #4
    176a:	d1fb      	bne.n	1764 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    176c:	8b63      	ldrh	r3, [r4, #26]
    176e:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1772:	2b01      	cmp	r3, #1
    1774:	d00b      	beq.n	178e <_i2c_m_sync_enable+0x66>
		timeout--;
    1776:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    1778:	2a00      	cmp	r2, #0
    177a:	dcf3      	bgt.n	1764 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    177c:	3901      	subs	r1, #1
    177e:	d008      	beq.n	1792 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1780:	2310      	movs	r3, #16
    1782:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1784:	69e3      	ldr	r3, [r4, #28]
    1786:	f013 0f04 	tst.w	r3, #4
    178a:	d1fb      	bne.n	1784 <_i2c_m_sync_enable+0x5c>
    178c:	e7e8      	b.n	1760 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    178e:	2000      	movs	r0, #0
    1790:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1792:	f06f 0005 	mvn.w	r0, #5
}
    1796:	bd70      	pop	{r4, r5, r6, pc}
    1798:	00009bfc 	.word	0x00009bfc
    179c:	00000cd9 	.word	0x00000cd9

000017a0 <_i2c_m_sync_transfer>:
{
    17a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17a4:	4605      	mov	r5, r0
    17a6:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    17a8:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    17aa:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1a4c <_i2c_m_sync_transfer+0x2ac>
    17ae:	f240 52d1 	movw	r2, #1489	; 0x5d1
    17b2:	4641      	mov	r1, r8
    17b4:	3000      	adds	r0, #0
    17b6:	bf18      	it	ne
    17b8:	2001      	movne	r0, #1
    17ba:	4fa2      	ldr	r7, [pc, #648]	; (1a44 <_i2c_m_sync_transfer+0x2a4>)
    17bc:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    17be:	6928      	ldr	r0, [r5, #16]
    17c0:	f240 52d2 	movw	r2, #1490	; 0x5d2
    17c4:	4641      	mov	r1, r8
    17c6:	3000      	adds	r0, #0
    17c8:	bf18      	it	ne
    17ca:	2001      	movne	r0, #1
    17cc:	47b8      	blx	r7
	ASSERT(msg);
    17ce:	f240 52d3 	movw	r2, #1491	; 0x5d3
    17d2:	4641      	mov	r1, r8
    17d4:	1c30      	adds	r0, r6, #0
    17d6:	bf18      	it	ne
    17d8:	2001      	movne	r0, #1
    17da:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    17dc:	886b      	ldrh	r3, [r5, #2]
    17de:	f413 7f80 	tst.w	r3, #256	; 0x100
    17e2:	f040 812a 	bne.w	1a3a <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    17e6:	8873      	ldrh	r3, [r6, #2]
    17e8:	b29b      	uxth	r3, r3
    17ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17ee:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    17f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    17f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    17f8:	6863      	ldr	r3, [r4, #4]
    17fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1800:	69e3      	ldr	r3, [r4, #28]
    1802:	f013 0f04 	tst.w	r3, #4
    1806:	d1fb      	bne.n	1800 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1808:	4628      	mov	r0, r5
    180a:	4b8f      	ldr	r3, [pc, #572]	; (1a48 <_i2c_m_sync_transfer+0x2a8>)
    180c:	4798      	blx	r3
	if (ret) {
    180e:	4603      	mov	r3, r0
    1810:	2800      	cmp	r0, #0
    1812:	f000 80b0 	beq.w	1976 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1816:	886a      	ldrh	r2, [r5, #2]
    1818:	b292      	uxth	r2, r2
    181a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    181e:	b292      	uxth	r2, r2
    1820:	806a      	strh	r2, [r5, #2]
		return ret;
    1822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1826:	f06f 0004 	mvn.w	r0, #4
    182a:	e0b7      	b.n	199c <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    182c:	8873      	ldrh	r3, [r6, #2]
    182e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1832:	d107      	bne.n	1844 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1834:	886b      	ldrh	r3, [r5, #2]
    1836:	b29b      	uxth	r3, r3
    1838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    183c:	b29b      	uxth	r3, r3
    183e:	806b      	strh	r3, [r5, #2]
			return ret;
    1840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1844:	6863      	ldr	r3, [r4, #4]
    1846:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    184a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184c:	69e3      	ldr	r3, [r4, #28]
    184e:	f013 0f04 	tst.w	r3, #4
    1852:	d1fb      	bne.n	184c <_i2c_m_sync_transfer+0xac>
    1854:	e7ee      	b.n	1834 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1856:	f013 0f04 	tst.w	r3, #4
    185a:	d11f      	bne.n	189c <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    185c:	886b      	ldrh	r3, [r5, #2]
    185e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1862:	d039      	beq.n	18d8 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1864:	882b      	ldrh	r3, [r5, #0]
    1866:	121b      	asrs	r3, r3, #8
    1868:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    186a:	f003 0206 	and.w	r2, r3, #6
    186e:	69e3      	ldr	r3, [r4, #28]
    1870:	f013 0f04 	tst.w	r3, #4
    1874:	d1fb      	bne.n	186e <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1876:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    187c:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    187e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1882:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1884:	69e3      	ldr	r3, [r4, #28]
    1886:	f013 0f04 	tst.w	r3, #4
    188a:	d1fb      	bne.n	1884 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    188c:	886b      	ldrh	r3, [r5, #2]
    188e:	b29b      	uxth	r3, r3
    1890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1894:	b29b      	uxth	r3, r3
    1896:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1898:	2000      	movs	r0, #0
    189a:	e06b      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    189c:	686b      	ldr	r3, [r5, #4]
    189e:	2b00      	cmp	r3, #0
    18a0:	dd04      	ble.n	18ac <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    18a2:	886b      	ldrh	r3, [r5, #2]
    18a4:	b29b      	uxth	r3, r3
    18a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    18aa:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    18ac:	886b      	ldrh	r3, [r5, #2]
    18ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18b2:	d108      	bne.n	18c6 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    18b4:	886b      	ldrh	r3, [r5, #2]
    18b6:	b29b      	uxth	r3, r3
    18b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18bc:	b29b      	uxth	r3, r3
    18be:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    18c0:	f06f 0001 	mvn.w	r0, #1
    18c4:	e056      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18c6:	6863      	ldr	r3, [r4, #4]
    18c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    18cc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18ce:	69e3      	ldr	r3, [r4, #28]
    18d0:	f013 0f04 	tst.w	r3, #4
    18d4:	d1fb      	bne.n	18ce <_i2c_m_sync_transfer+0x12e>
    18d6:	e7ed      	b.n	18b4 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    18d8:	6868      	ldr	r0, [r5, #4]
    18da:	b998      	cbnz	r0, 1904 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    18dc:	886b      	ldrh	r3, [r5, #2]
    18de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18e2:	d106      	bne.n	18f2 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    18e4:	886b      	ldrh	r3, [r5, #2]
    18e6:	b29b      	uxth	r3, r3
    18e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18ec:	b29b      	uxth	r3, r3
    18ee:	806b      	strh	r3, [r5, #2]
    18f0:	e040      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    18f2:	6863      	ldr	r3, [r4, #4]
    18f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    18f8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18fa:	69e3      	ldr	r3, [r4, #28]
    18fc:	f013 0f04 	tst.w	r3, #4
    1900:	d1fb      	bne.n	18fa <_i2c_m_sync_transfer+0x15a>
    1902:	e7ef      	b.n	18e4 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1904:	68ab      	ldr	r3, [r5, #8]
    1906:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1908:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    190a:	69e3      	ldr	r3, [r4, #28]
    190c:	f013 0f04 	tst.w	r3, #4
    1910:	d1fb      	bne.n	190a <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1912:	68ab      	ldr	r3, [r5, #8]
    1914:	3301      	adds	r3, #1
    1916:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1918:	686b      	ldr	r3, [r5, #4]
    191a:	3b01      	subs	r3, #1
    191c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    191e:	2000      	movs	r0, #0
    1920:	e028      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1922:	f017 0f02 	tst.w	r7, #2
    1926:	f000 8083 	beq.w	1a30 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    192a:	6869      	ldr	r1, [r5, #4]
    192c:	2900      	cmp	r1, #0
    192e:	d077      	beq.n	1a20 <_i2c_m_sync_transfer+0x280>
    1930:	f013 0f04 	tst.w	r3, #4
    1934:	d174      	bne.n	1a20 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1936:	3901      	subs	r1, #1
    1938:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    193a:	b909      	cbnz	r1, 1940 <_i2c_m_sync_transfer+0x1a0>
    193c:	2a00      	cmp	r2, #0
    193e:	d055      	beq.n	19ec <_i2c_m_sync_transfer+0x24c>
    1940:	2901      	cmp	r1, #1
    1942:	d051      	beq.n	19e8 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1944:	686b      	ldr	r3, [r5, #4]
    1946:	b94b      	cbnz	r3, 195c <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1948:	886b      	ldrh	r3, [r5, #2]
    194a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    194e:	d156      	bne.n	19fe <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1950:	886b      	ldrh	r3, [r5, #2]
    1952:	b29b      	uxth	r3, r3
    1954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1958:	b29b      	uxth	r3, r3
    195a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    195c:	68aa      	ldr	r2, [r5, #8]
    195e:	1c53      	adds	r3, r2, #1
    1960:	60ab      	str	r3, [r5, #8]
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	f013 0f04 	tst.w	r3, #4
    1968:	d1fb      	bne.n	1962 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    196a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    196c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    196e:	2302      	movs	r3, #2
    1970:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1972:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    1974:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1976:	886a      	ldrh	r2, [r5, #2]
    1978:	f412 7f80 	tst.w	r2, #256	; 0x100
    197c:	d05a      	beq.n	1a34 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    197e:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    1980:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1984:	7e03      	ldrb	r3, [r0, #24]
    1986:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1988:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    198a:	1e51      	subs	r1, r2, #1
    198c:	2a00      	cmp	r2, #0
    198e:	f43f af4a 	beq.w	1826 <_i2c_m_sync_transfer+0x86>
    1992:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1994:	f013 0f03 	tst.w	r3, #3
    1998:	d0f4      	beq.n	1984 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    199a:	2000      	movs	r0, #0
		if (ret) {
    199c:	2800      	cmp	r0, #0
    199e:	f47f af45 	bne.w	182c <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    19a2:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    19a4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19a8:	69e3      	ldr	r3, [r4, #28]
    19aa:	f013 0f04 	tst.w	r3, #4
    19ae:	d1fb      	bne.n	19a8 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    19b0:	8b63      	ldrh	r3, [r4, #26]
    19b2:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    19b4:	f017 0f01 	tst.w	r7, #1
    19b8:	d0b3      	beq.n	1922 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    19ba:	f013 0f02 	tst.w	r3, #2
    19be:	f43f af4a 	beq.w	1856 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    19c2:	2201      	movs	r2, #1
    19c4:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    19c6:	886a      	ldrh	r2, [r5, #2]
    19c8:	b292      	uxth	r2, r2
    19ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    19ce:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    19d0:	886a      	ldrh	r2, [r5, #2]
    19d2:	b292      	uxth	r2, r2
    19d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    19d8:	b292      	uxth	r2, r2
    19da:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    19dc:	f013 0f01 	tst.w	r3, #1
    19e0:	d023      	beq.n	1a2a <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    19e2:	f06f 0004 	mvn.w	r0, #4
    19e6:	e7c5      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    19e8:	2a00      	cmp	r2, #0
    19ea:	d0ab      	beq.n	1944 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19ec:	6863      	ldr	r3, [r4, #4]
    19ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    19f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19f4:	69e3      	ldr	r3, [r4, #28]
    19f6:	f013 0f04 	tst.w	r3, #4
    19fa:	d1fb      	bne.n	19f4 <_i2c_m_sync_transfer+0x254>
    19fc:	e7a2      	b.n	1944 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    19fe:	6863      	ldr	r3, [r4, #4]
    1a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1a04:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f04 	tst.w	r3, #4
    1a0c:	d1fb      	bne.n	1a06 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1a0e:	6863      	ldr	r3, [r4, #4]
    1a10:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1a14:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a16:	69e3      	ldr	r3, [r4, #28]
    1a18:	f013 0f04 	tst.w	r3, #4
    1a1c:	d1fb      	bne.n	1a16 <_i2c_m_sync_transfer+0x276>
    1a1e:	e797      	b.n	1950 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1a20:	2302      	movs	r3, #2
    1a22:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1a24:	f06f 0001 	mvn.w	r0, #1
    1a28:	e7a4      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    1a2a:	f06f 0003 	mvn.w	r0, #3
    1a2e:	e7a1      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1a30:	2000      	movs	r0, #0
    1a32:	e79f      	b.n	1974 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1a34:	4618      	mov	r0, r3
    1a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    1a3a:	f06f 0005 	mvn.w	r0, #5
}
    1a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a42:	bf00      	nop
    1a44:	00000cd9 	.word	0x00000cd9
    1a48:	00001411 	.word	0x00001411
    1a4c:	00009bfc 	.word	0x00009bfc

00001a50 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	4605      	mov	r5, r0
    1a54:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1a56:	4608      	mov	r0, r1
    1a58:	4b50      	ldr	r3, [pc, #320]	; (1b9c <_spi_m_dma_init+0x14c>)
    1a5a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a5c:	2300      	movs	r3, #0
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d072      	beq.n	1b48 <_spi_m_dma_init+0xf8>
	return NULL;
    1a62:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1a64:	2d00      	cmp	r5, #0
    1a66:	d07b      	beq.n	1b60 <_spi_m_dma_init+0x110>
    1a68:	2c00      	cmp	r4, #0
    1a6a:	d077      	beq.n	1b5c <_spi_m_dma_init+0x10c>
    1a6c:	2001      	movs	r0, #1
    1a6e:	f640 42b3 	movw	r2, #3251	; 0xcb3
    1a72:	494b      	ldr	r1, [pc, #300]	; (1ba0 <_spi_m_dma_init+0x150>)
    1a74:	4b4b      	ldr	r3, [pc, #300]	; (1ba4 <_spi_m_dma_init+0x154>)
    1a76:	4798      	blx	r3

	if (regs == NULL) {
    1a78:	2e00      	cmp	r6, #0
    1a7a:	f000 808b 	beq.w	1b94 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1a7e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1a80:	f013 0f01 	tst.w	r3, #1
    1a84:	d11d      	bne.n	1ac2 <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1a86:	6833      	ldr	r3, [r6, #0]
    1a88:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a8c:	69e3      	ldr	r3, [r4, #28]
    1a8e:	f013 0f03 	tst.w	r3, #3
    1a92:	d1fb      	bne.n	1a8c <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1a94:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1a96:	f013 0f02 	tst.w	r3, #2
    1a9a:	d00b      	beq.n	1ab4 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1a9c:	6823      	ldr	r3, [r4, #0]
    1a9e:	f023 0302 	bic.w	r3, r3, #2
    1aa2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aa4:	69e3      	ldr	r3, [r4, #28]
    1aa6:	f013 0f03 	tst.w	r3, #3
    1aaa:	d1fb      	bne.n	1aa4 <_spi_m_dma_init+0x54>
    1aac:	69e3      	ldr	r3, [r4, #28]
    1aae:	f013 0f02 	tst.w	r3, #2
    1ab2:	d1fb      	bne.n	1aac <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1ab4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ab8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aba:	69e3      	ldr	r3, [r4, #28]
    1abc:	f013 0f03 	tst.w	r3, #3
    1ac0:	d1fb      	bne.n	1aba <_spi_m_dma_init+0x6a>
    1ac2:	69e3      	ldr	r3, [r4, #28]
    1ac4:	f013 0f01 	tst.w	r3, #1
    1ac8:	d1fb      	bne.n	1ac2 <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1aca:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1acc:	2c00      	cmp	r4, #0
    1ace:	d04b      	beq.n	1b68 <_spi_m_dma_init+0x118>
    1ad0:	2e00      	cmp	r6, #0
    1ad2:	d047      	beq.n	1b64 <_spi_m_dma_init+0x114>
    1ad4:	2001      	movs	r0, #1
    1ad6:	f640 120a 	movw	r2, #2314	; 0x90a
    1ada:	4931      	ldr	r1, [pc, #196]	; (1ba0 <_spi_m_dma_init+0x150>)
    1adc:	4b31      	ldr	r3, [pc, #196]	; (1ba4 <_spi_m_dma_init+0x154>)
    1ade:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ae0:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1ae2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1ae6:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1aea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aec:	69e3      	ldr	r3, [r4, #28]
    1aee:	f013 0f03 	tst.w	r3, #3
    1af2:	d1fb      	bne.n	1aec <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1af4:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1af6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1afa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1b02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b04:	69e3      	ldr	r3, [r4, #28]
    1b06:	f013 0f17 	tst.w	r3, #23
    1b0a:	d1fb      	bne.n	1b04 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1b0c:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1b0e:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1b10:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1b16:	4620      	mov	r0, r4
    1b18:	4b23      	ldr	r3, [pc, #140]	; (1ba8 <_spi_m_dma_init+0x158>)
    1b1a:	4798      	blx	r3
    1b1c:	bb30      	cbnz	r0, 1b6c <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1b1e:	4620      	mov	r0, r4
    1b20:	4b22      	ldr	r3, [pc, #136]	; (1bac <_spi_m_dma_init+0x15c>)
    1b22:	4798      	blx	r3
    1b24:	4601      	mov	r1, r0
    1b26:	f105 001c 	add.w	r0, r5, #28
    1b2a:	4b21      	ldr	r3, [pc, #132]	; (1bb0 <_spi_m_dma_init+0x160>)
    1b2c:	4798      	blx	r3
	dev->resource->back                 = dev;
    1b2e:	69eb      	ldr	r3, [r5, #28]
    1b30:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1b32:	69eb      	ldr	r3, [r5, #28]
    1b34:	4a1f      	ldr	r2, [pc, #124]	; (1bb4 <_spi_m_dma_init+0x164>)
    1b36:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1b38:	69eb      	ldr	r3, [r5, #28]
    1b3a:	4a1f      	ldr	r2, [pc, #124]	; (1bb8 <_spi_m_dma_init+0x168>)
    1b3c:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1b3e:	69eb      	ldr	r3, [r5, #28]
    1b40:	4a1e      	ldr	r2, [pc, #120]	; (1bbc <_spi_m_dma_init+0x16c>)
    1b42:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1b44:	2000      	movs	r0, #0
    1b46:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1b48:	2805      	cmp	r0, #5
    1b4a:	d002      	beq.n	1b52 <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1b4c:	3301      	adds	r3, #1
    1b4e:	b2db      	uxtb	r3, r3
    1b50:	e785      	b.n	1a5e <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1b52:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1b56:	4b1a      	ldr	r3, [pc, #104]	; (1bc0 <_spi_m_dma_init+0x170>)
    1b58:	441e      	add	r6, r3
    1b5a:	e783      	b.n	1a64 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1b5c:	2000      	movs	r0, #0
    1b5e:	e786      	b.n	1a6e <_spi_m_dma_init+0x1e>
    1b60:	2000      	movs	r0, #0
    1b62:	e784      	b.n	1a6e <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1b64:	2000      	movs	r0, #0
    1b66:	e7b6      	b.n	1ad6 <_spi_m_dma_init+0x86>
    1b68:	2000      	movs	r0, #0
    1b6a:	e7b4      	b.n	1ad6 <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1b6c:	4620      	mov	r0, r4
    1b6e:	4b15      	ldr	r3, [pc, #84]	; (1bc4 <_spi_m_dma_init+0x174>)
    1b70:	4798      	blx	r3
    1b72:	4601      	mov	r1, r0
    1b74:	f105 001c 	add.w	r0, r5, #28
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <_spi_m_dma_init+0x160>)
    1b7a:	4798      	blx	r3
		dev->resource->back                 = dev;
    1b7c:	69eb      	ldr	r3, [r5, #28]
    1b7e:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1b80:	69eb      	ldr	r3, [r5, #28]
    1b82:	4a11      	ldr	r2, [pc, #68]	; (1bc8 <_spi_m_dma_init+0x178>)
    1b84:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1b86:	69eb      	ldr	r3, [r5, #28]
    1b88:	4a0b      	ldr	r2, [pc, #44]	; (1bb8 <_spi_m_dma_init+0x168>)
    1b8a:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1b8c:	69eb      	ldr	r3, [r5, #28]
    1b8e:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <_spi_m_dma_init+0x16c>)
    1b90:	609a      	str	r2, [r3, #8]
    1b92:	e7c4      	b.n	1b1e <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1b94:	f06f 000c 	mvn.w	r0, #12
}
    1b98:	bd70      	pop	{r4, r5, r6, pc}
    1b9a:	bf00      	nop
    1b9c:	000011b1 	.word	0x000011b1
    1ba0:	00009bfc 	.word	0x00009bfc
    1ba4:	00000cd9 	.word	0x00000cd9
    1ba8:	00001279 	.word	0x00001279
    1bac:	00001261 	.word	0x00001261
    1bb0:	00001051 	.word	0x00001051
    1bb4:	000012cd 	.word	0x000012cd
    1bb8:	000012d9 	.word	0x000012d9
    1bbc:	000012c1 	.word	0x000012c1
    1bc0:	00009be8 	.word	0x00009be8
    1bc4:	00001291 	.word	0x00001291
    1bc8:	000012b5 	.word	0x000012b5

00001bcc <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1bcc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1bce:	4604      	mov	r4, r0
    1bd0:	b168      	cbz	r0, 1bee <_spi_m_dma_enable+0x22>
    1bd2:	6803      	ldr	r3, [r0, #0]
    1bd4:	b14b      	cbz	r3, 1bea <_spi_m_dma_enable+0x1e>
    1bd6:	2001      	movs	r0, #1
    1bd8:	f640 42e1 	movw	r2, #3297	; 0xce1
    1bdc:	4905      	ldr	r1, [pc, #20]	; (1bf4 <_spi_m_dma_enable+0x28>)
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <_spi_m_dma_enable+0x2c>)
    1be0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1be2:	6820      	ldr	r0, [r4, #0]
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <_spi_m_dma_enable+0x30>)
    1be6:	4798      	blx	r3
}
    1be8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1bea:	2000      	movs	r0, #0
    1bec:	e7f4      	b.n	1bd8 <_spi_m_dma_enable+0xc>
    1bee:	2000      	movs	r0, #0
    1bf0:	e7f2      	b.n	1bd8 <_spi_m_dma_enable+0xc>
    1bf2:	bf00      	nop
    1bf4:	00009bfc 	.word	0x00009bfc
    1bf8:	00000cd9 	.word	0x00000cd9
    1bfc:	000011f1 	.word	0x000011f1

00001c00 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	4605      	mov	r5, r0
    1c04:	4614      	mov	r4, r2
	switch (type) {
    1c06:	2903      	cmp	r1, #3
    1c08:	d835      	bhi.n	1c76 <_spi_m_dma_register_callback+0x76>
    1c0a:	e8df f001 	tbb	[pc, r1]
    1c0e:	0d02      	.short	0x0d02
    1c10:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1c12:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1c14:	6800      	ldr	r0, [r0, #0]
    1c16:	4b18      	ldr	r3, [pc, #96]	; (1c78 <_spi_m_dma_register_callback+0x78>)
    1c18:	4798      	blx	r3
    1c1a:	1c22      	adds	r2, r4, #0
    1c1c:	bf18      	it	ne
    1c1e:	2201      	movne	r2, #1
    1c20:	2100      	movs	r1, #0
    1c22:	4b16      	ldr	r3, [pc, #88]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c24:	4798      	blx	r3
		break;
    1c26:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1c28:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1c2a:	6800      	ldr	r0, [r0, #0]
    1c2c:	4b14      	ldr	r3, [pc, #80]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c2e:	4798      	blx	r3
    1c30:	1c22      	adds	r2, r4, #0
    1c32:	bf18      	it	ne
    1c34:	2201      	movne	r2, #1
    1c36:	2100      	movs	r1, #0
    1c38:	4b10      	ldr	r3, [pc, #64]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c3a:	4798      	blx	r3
		break;
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1c3e:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1c40:	6800      	ldr	r0, [r0, #0]
    1c42:	4b0f      	ldr	r3, [pc, #60]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c44:	4798      	blx	r3
    1c46:	3400      	adds	r4, #0
    1c48:	bf18      	it	ne
    1c4a:	2401      	movne	r4, #1
    1c4c:	4622      	mov	r2, r4
    1c4e:	2101      	movs	r1, #1
    1c50:	4e0a      	ldr	r6, [pc, #40]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c52:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1c54:	6828      	ldr	r0, [r5, #0]
    1c56:	4b08      	ldr	r3, [pc, #32]	; (1c78 <_spi_m_dma_register_callback+0x78>)
    1c58:	4798      	blx	r3
    1c5a:	4622      	mov	r2, r4
    1c5c:	2101      	movs	r1, #1
    1c5e:	47b0      	blx	r6
		break;
    1c60:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1c62:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1c64:	6800      	ldr	r0, [r0, #0]
    1c66:	4b06      	ldr	r3, [pc, #24]	; (1c80 <_spi_m_dma_register_callback+0x80>)
    1c68:	4798      	blx	r3
    1c6a:	1c22      	adds	r2, r4, #0
    1c6c:	bf18      	it	ne
    1c6e:	2201      	movne	r2, #1
    1c70:	2102      	movs	r1, #2
    1c72:	4b02      	ldr	r3, [pc, #8]	; (1c7c <_spi_m_dma_register_callback+0x7c>)
    1c74:	4798      	blx	r3
    1c76:	bd70      	pop	{r4, r5, r6, pc}
    1c78:	00001261 	.word	0x00001261
    1c7c:	00000f05 	.word	0x00000f05
    1c80:	00001291 	.word	0x00001291

00001c84 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c88:	4605      	mov	r5, r0
    1c8a:	4689      	mov	r9, r1
    1c8c:	4690      	mov	r8, r2
    1c8e:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1c90:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1c92:	4620      	mov	r0, r4
    1c94:	4b33      	ldr	r3, [pc, #204]	; (1d64 <_spi_m_dma_transfer+0xe0>)
    1c96:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c98:	2300      	movs	r3, #0
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d03f      	beq.n	1d1e <_spi_m_dma_transfer+0x9a>
	return NULL;
    1c9e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1ca2:	4620      	mov	r0, r4
    1ca4:	4b30      	ldr	r3, [pc, #192]	; (1d68 <_spi_m_dma_transfer+0xe4>)
    1ca6:	4798      	blx	r3
    1ca8:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1caa:	4620      	mov	r0, r4
    1cac:	4b2f      	ldr	r3, [pc, #188]	; (1d6c <_spi_m_dma_transfer+0xe8>)
    1cae:	4798      	blx	r3
    1cb0:	4604      	mov	r4, r0

	if (rxbuf) {
    1cb2:	f1b8 0f00 	cmp.w	r8, #0
    1cb6:	d03c      	beq.n	1d32 <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1cb8:	4628      	mov	r0, r5
    1cba:	4b2d      	ldr	r3, [pc, #180]	; (1d70 <_spi_m_dma_transfer+0xec>)
    1cbc:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1cbe:	6828      	ldr	r0, [r5, #0]
    1cc0:	4b2c      	ldr	r3, [pc, #176]	; (1d74 <_spi_m_dma_transfer+0xf0>)
    1cc2:	4798      	blx	r3
    1cc4:	4601      	mov	r1, r0
    1cc6:	4630      	mov	r0, r6
    1cc8:	4b2b      	ldr	r3, [pc, #172]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1cca:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1ccc:	4641      	mov	r1, r8
    1cce:	4630      	mov	r0, r6
    1cd0:	4b2a      	ldr	r3, [pc, #168]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1cd2:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1cd4:	4639      	mov	r1, r7
    1cd6:	4630      	mov	r0, r6
    1cd8:	4b29      	ldr	r3, [pc, #164]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1cda:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1cdc:	2100      	movs	r1, #0
    1cde:	4630      	mov	r0, r6
    1ce0:	4b28      	ldr	r3, [pc, #160]	; (1d84 <_spi_m_dma_transfer+0x100>)
    1ce2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1ce4:	f1b9 0f00 	cmp.w	r9, #0
    1ce8:	d027      	beq.n	1d3a <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1cea:	4649      	mov	r1, r9
    1cec:	4620      	mov	r0, r4
    1cee:	4b22      	ldr	r3, [pc, #136]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1cf0:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1cf2:	6828      	ldr	r0, [r5, #0]
    1cf4:	4b24      	ldr	r3, [pc, #144]	; (1d88 <_spi_m_dma_transfer+0x104>)
    1cf6:	4798      	blx	r3
    1cf8:	4601      	mov	r1, r0
    1cfa:	4620      	mov	r0, r4
    1cfc:	4b1f      	ldr	r3, [pc, #124]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1cfe:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1d00:	2101      	movs	r1, #1
    1d02:	4620      	mov	r0, r4
    1d04:	4b21      	ldr	r3, [pc, #132]	; (1d8c <_spi_m_dma_transfer+0x108>)
    1d06:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1d08:	4639      	mov	r1, r7
    1d0a:	4620      	mov	r0, r4
    1d0c:	4b1c      	ldr	r3, [pc, #112]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1d0e:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1d10:	2100      	movs	r1, #0
    1d12:	4620      	mov	r0, r4
    1d14:	4b1b      	ldr	r3, [pc, #108]	; (1d84 <_spi_m_dma_transfer+0x100>)
    1d16:	4798      	blx	r3

	return ERR_NONE;
}
    1d18:	2000      	movs	r0, #0
    1d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1d1e:	2805      	cmp	r0, #5
    1d20:	d002      	beq.n	1d28 <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1d22:	3301      	adds	r3, #1
    1d24:	b2db      	uxtb	r3, r3
    1d26:	e7b8      	b.n	1c9a <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1d28:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1d2c:	4b18      	ldr	r3, [pc, #96]	; (1d90 <_spi_m_dma_transfer+0x10c>)
    1d2e:	449a      	add	sl, r3
    1d30:	e7b7      	b.n	1ca2 <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1d32:	4628      	mov	r0, r5
    1d34:	4b17      	ldr	r3, [pc, #92]	; (1d94 <_spi_m_dma_transfer+0x110>)
    1d36:	4798      	blx	r3
    1d38:	e7d4      	b.n	1ce4 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1d3a:	f10a 010e 	add.w	r1, sl, #14
    1d3e:	4620      	mov	r0, r4
    1d40:	4b0d      	ldr	r3, [pc, #52]	; (1d78 <_spi_m_dma_transfer+0xf4>)
    1d42:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1d44:	6828      	ldr	r0, [r5, #0]
    1d46:	4b10      	ldr	r3, [pc, #64]	; (1d88 <_spi_m_dma_transfer+0x104>)
    1d48:	4798      	blx	r3
    1d4a:	4601      	mov	r1, r0
    1d4c:	4620      	mov	r0, r4
    1d4e:	4b0b      	ldr	r3, [pc, #44]	; (1d7c <_spi_m_dma_transfer+0xf8>)
    1d50:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1d52:	2100      	movs	r1, #0
    1d54:	4620      	mov	r0, r4
    1d56:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <_spi_m_dma_transfer+0x108>)
    1d58:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1d5a:	4639      	mov	r1, r7
    1d5c:	4620      	mov	r0, r4
    1d5e:	4b08      	ldr	r3, [pc, #32]	; (1d80 <_spi_m_dma_transfer+0xfc>)
    1d60:	4798      	blx	r3
    1d62:	e7d5      	b.n	1d10 <_spi_m_dma_transfer+0x8c>
    1d64:	000011b1 	.word	0x000011b1
    1d68:	00001291 	.word	0x00001291
    1d6c:	00001261 	.word	0x00001261
    1d70:	00001691 	.word	0x00001691
    1d74:	00001257 	.word	0x00001257
    1d78:	00000f91 	.word	0x00000f91
    1d7c:	00000f81 	.word	0x00000f81
    1d80:	00000fbd 	.word	0x00000fbd
    1d84:	00001015 	.word	0x00001015
    1d88:	0000125b 	.word	0x0000125b
    1d8c:	00000fa1 	.word	0x00000fa1
    1d90:	00009be8 	.word	0x00009be8
    1d94:	000016c5 	.word	0x000016c5

00001d98 <TIMER_1_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d98:	4b2f      	ldr	r3, [pc, #188]	; (1e58 <TIMER_1_init+0xc0>)
    1d9a:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tc_is_syncing(TC3, TC_SYNCBUSY_SWRST)) {
    1d9c:	f013 0f01 	tst.w	r3, #1
    1da0:	d120      	bne.n	1de4 <TIMER_1_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1da2:	4b2d      	ldr	r3, [pc, #180]	; (1e58 <TIMER_1_init+0xc0>)
    1da4:	691b      	ldr	r3, [r3, #16]
    1da6:	f013 0f03 	tst.w	r3, #3
    1daa:	d1fa      	bne.n	1da2 <TIMER_1_init+0xa>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1dac:	4b2a      	ldr	r3, [pc, #168]	; (1e58 <TIMER_1_init+0xc0>)
    1dae:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    1db0:	f013 0f02 	tst.w	r3, #2
    1db4:	d00e      	beq.n	1dd4 <TIMER_1_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1db6:	4a28      	ldr	r2, [pc, #160]	; (1e58 <TIMER_1_init+0xc0>)
    1db8:	6813      	ldr	r3, [r2, #0]
    1dba:	f023 0302 	bic.w	r3, r3, #2
    1dbe:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dc0:	4b25      	ldr	r3, [pc, #148]	; (1e58 <TIMER_1_init+0xc0>)
    1dc2:	691b      	ldr	r3, [r3, #16]
    1dc4:	f013 0f03 	tst.w	r3, #3
    1dc8:	d1fa      	bne.n	1dc0 <TIMER_1_init+0x28>
    1dca:	4b23      	ldr	r3, [pc, #140]	; (1e58 <TIMER_1_init+0xc0>)
    1dcc:	691b      	ldr	r3, [r3, #16]
    1dce:	f013 0f02 	tst.w	r3, #2
    1dd2:	d1fa      	bne.n	1dca <TIMER_1_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dd4:	2201      	movs	r2, #1
    1dd6:	4b20      	ldr	r3, [pc, #128]	; (1e58 <TIMER_1_init+0xc0>)
    1dd8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dda:	4b1f      	ldr	r3, [pc, #124]	; (1e58 <TIMER_1_init+0xc0>)
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	f013 0f03 	tst.w	r3, #3
    1de2:	d1fa      	bne.n	1dda <TIMER_1_init+0x42>
    1de4:	4b1c      	ldr	r3, [pc, #112]	; (1e58 <TIMER_1_init+0xc0>)
    1de6:	691b      	ldr	r3, [r3, #16]
    1de8:	f013 0f01 	tst.w	r3, #1
    1dec:	d1fa      	bne.n	1de4 <TIMER_1_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1df2:	4b19      	ldr	r3, [pc, #100]	; (1e58 <TIMER_1_init+0xc0>)
    1df4:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1df6:	4b18      	ldr	r3, [pc, #96]	; (1e58 <TIMER_1_init+0xc0>)
    1df8:	691b      	ldr	r3, [r3, #16]
    1dfa:	f013 0f03 	tst.w	r3, #3
    1dfe:	d1fa      	bne.n	1df6 <TIMER_1_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1e00:	4b15      	ldr	r3, [pc, #84]	; (1e58 <TIMER_1_init+0xc0>)
    1e02:	2200      	movs	r2, #0
    1e04:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1e06:	22ff      	movs	r2, #255	; 0xff
    1e08:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e0a:	2201      	movs	r2, #1
    1e0c:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e0e:	f643 5208 	movw	r2, #15624	; 0x3d08
    1e12:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e14:	4b10      	ldr	r3, [pc, #64]	; (1e58 <TIMER_1_init+0xc0>)
    1e16:	691b      	ldr	r3, [r3, #16]
    1e18:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e1c:	d1fa      	bne.n	1e14 <TIMER_1_init+0x7c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e1e:	f641 0269 	movw	r2, #6249	; 0x1869
    1e22:	4b0d      	ldr	r3, [pc, #52]	; (1e58 <TIMER_1_init+0xc0>)
    1e24:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e26:	4b0c      	ldr	r3, [pc, #48]	; (1e58 <TIMER_1_init+0xc0>)
    1e28:	691b      	ldr	r3, [r3, #16]
    1e2a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e2e:	d1fa      	bne.n	1e26 <TIMER_1_init+0x8e>
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1e30:	4b09      	ldr	r3, [pc, #36]	; (1e58 <TIMER_1_init+0xc0>)
    1e32:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e36:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1e38:	2221      	movs	r2, #33	; 0x21
    1e3a:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1e3c:	22de      	movs	r2, #222	; 0xde
    1e3e:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e40:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1e42:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1e46:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <TIMER_1_init+0xc0>)
    1e4a:	691b      	ldr	r3, [r3, #16]
    1e4c:	f013 0f03 	tst.w	r3, #3
    1e50:	d1fa      	bne.n	1e48 <TIMER_1_init+0xb0>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e52:	2000      	movs	r0, #0
    1e54:	4770      	bx	lr
    1e56:	bf00      	nop
    1e58:	4101c000 	.word	0x4101c000

00001e5c <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1e5c:	4b29      	ldr	r3, [pc, #164]	; (1f04 <TIMER_0_init+0xa8>)
    1e5e:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    1e60:	f013 0f01 	tst.w	r3, #1
    1e64:	d120      	bne.n	1ea8 <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e66:	4b27      	ldr	r3, [pc, #156]	; (1f04 <TIMER_0_init+0xa8>)
    1e68:	691b      	ldr	r3, [r3, #16]
    1e6a:	f013 0f03 	tst.w	r3, #3
    1e6e:	d1fa      	bne.n	1e66 <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e70:	4b24      	ldr	r3, [pc, #144]	; (1f04 <TIMER_0_init+0xa8>)
    1e72:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    1e74:	f013 0f02 	tst.w	r3, #2
    1e78:	d00e      	beq.n	1e98 <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1e7a:	4a22      	ldr	r2, [pc, #136]	; (1f04 <TIMER_0_init+0xa8>)
    1e7c:	6813      	ldr	r3, [r2, #0]
    1e7e:	f023 0302 	bic.w	r3, r3, #2
    1e82:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e84:	4b1f      	ldr	r3, [pc, #124]	; (1f04 <TIMER_0_init+0xa8>)
    1e86:	691b      	ldr	r3, [r3, #16]
    1e88:	f013 0f03 	tst.w	r3, #3
    1e8c:	d1fa      	bne.n	1e84 <TIMER_0_init+0x28>
    1e8e:	4b1d      	ldr	r3, [pc, #116]	; (1f04 <TIMER_0_init+0xa8>)
    1e90:	691b      	ldr	r3, [r3, #16]
    1e92:	f013 0f02 	tst.w	r3, #2
    1e96:	d1fa      	bne.n	1e8e <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1e98:	2201      	movs	r2, #1
    1e9a:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <TIMER_0_init+0xa8>)
    1e9c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e9e:	4b19      	ldr	r3, [pc, #100]	; (1f04 <TIMER_0_init+0xa8>)
    1ea0:	691b      	ldr	r3, [r3, #16]
    1ea2:	f013 0f03 	tst.w	r3, #3
    1ea6:	d1fa      	bne.n	1e9e <TIMER_0_init+0x42>
    1ea8:	4b16      	ldr	r3, [pc, #88]	; (1f04 <TIMER_0_init+0xa8>)
    1eaa:	691b      	ldr	r3, [r3, #16]
    1eac:	f013 0f01 	tst.w	r3, #1
    1eb0:	d1fa      	bne.n	1ea8 <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1eb6:	4b13      	ldr	r3, [pc, #76]	; (1f04 <TIMER_0_init+0xa8>)
    1eb8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <TIMER_0_init+0xa8>)
    1ebc:	691b      	ldr	r3, [r3, #16]
    1ebe:	f013 0f03 	tst.w	r3, #3
    1ec2:	d1fa      	bne.n	1eba <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1ec4:	4b0f      	ldr	r3, [pc, #60]	; (1f04 <TIMER_0_init+0xa8>)
    1ec6:	2200      	movs	r2, #0
    1ec8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1eca:	22ff      	movs	r2, #255	; 0xff
    1ecc:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1ece:	2201      	movs	r2, #1
    1ed0:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1ed2:	f641 0269 	movw	r2, #6249	; 0x1869
    1ed6:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ed8:	4b0a      	ldr	r3, [pc, #40]	; (1f04 <TIMER_0_init+0xa8>)
    1eda:	691b      	ldr	r3, [r3, #16]
    1edc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ee0:	d1fa      	bne.n	1ed8 <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1ee2:	4b08      	ldr	r3, [pc, #32]	; (1f04 <TIMER_0_init+0xa8>)
    1ee4:	2201      	movs	r2, #1
    1ee6:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1ee8:	22fe      	movs	r2, #254	; 0xfe
    1eea:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1eec:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1eee:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1ef2:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <TIMER_0_init+0xa8>)
    1ef6:	691b      	ldr	r3, [r3, #16]
    1ef8:	f013 0f03 	tst.w	r3, #3
    1efc:	d1fa      	bne.n	1ef4 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1efe:	2000      	movs	r0, #0
    1f00:	4770      	bx	lr
    1f02:	bf00      	nop
    1f04:	43001800 	.word	0x43001800

00001f08 <SensorRowUpdate>:
volatile BLDC_ECAT_OUT*  BLDC_OUT =&ram_buffer[ram_wr_start];
volatile BLDC_ECAT_IN*  BLDC_IN =&ram_buffer[ram_rd_start];


void SensorRowUpdate(struct sensor_array *sensor_array_use, uint8_t row_select, uint8_t output_mode_select_magnet, uint8_t output_mode_select_neural) // rewrite to accept struct of any sensor array + update any row in array!!!!!
{
    1f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f0c:	4604      	mov	r4, r0
    1f0e:	460d      	mov	r5, r1
    1f10:	4617      	mov	r7, r2
    1f12:	461e      	mov	r6, r3
	switch(row_select){
    1f14:	2902      	cmp	r1, #2
    1f16:	f000 80bb 	beq.w	2090 <SensorRowUpdate+0x188>
    1f1a:	2903      	cmp	r1, #3
    1f1c:	f000 8176 	beq.w	220c <SensorRowUpdate+0x304>
    1f20:	2901      	cmp	r1, #1
    1f22:	d001      	beq.n	1f28 <SensorRowUpdate+0x20>
    1f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		case 1: ;
			
			update_struct_values(&(sensor_array_use->sensorRow_Values_Left), &(sensor_array_use->sensor7), &(sensor_array_use->sensor4), &(sensor_array_use->sensor1));
    1f28:	f500 7846 	add.w	r8, r0, #792	; 0x318
    1f2c:	4603      	mov	r3, r0
    1f2e:	f500 7284 	add.w	r2, r0, #264	; 0x108
    1f32:	f500 7104 	add.w	r1, r0, #528	; 0x210
    1f36:	4640      	mov	r0, r8
    1f38:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2200 <SensorRowUpdate+0x2f8>
    1f3c:	47c8      	blx	r9
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Left), &(sensor_array_use->parameters_array));
    1f3e:	f204 4214 	addw	r2, r4, #1044	; 0x414
    1f42:	4641      	mov	r1, r8
    1f44:	4628      	mov	r0, r5
    1f46:	4bac      	ldr	r3, [pc, #688]	; (21f8 <SensorRowUpdate+0x2f0>)
    1f48:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Left), &(sensor_array_use->neuron_pair_1_top), &(sensor_array_use->neuron_pair_1_middle), &(sensor_array_use->neuron_pair_1_bottom));
    1f4a:	f604 4984 	addw	r9, r4, #3204	; 0xc84
    1f4e:	f604 5a24 	addw	sl, r4, #3364	; 0xd24
    1f52:	f604 5bc4 	addw	fp, r4, #3524	; 0xdc4
    1f56:	465b      	mov	r3, fp
    1f58:	4652      	mov	r2, sl
    1f5a:	4649      	mov	r1, r9
    1f5c:	4640      	mov	r0, r8
    1f5e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 2204 <SensorRowUpdate+0x2fc>
    1f62:	47c0      	blx	r8
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Left), &(sensor_array_use->neuron_pair_1_top), &(sensor_array_use->neuron_pair_1_middle), &(sensor_array_use->neuron_pair_1_bottom));
    1f64:	465b      	mov	r3, fp
    1f66:	4652      	mov	r2, sl
    1f68:	4649      	mov	r1, r9
    1f6a:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
    1f6e:	3004      	adds	r0, #4
    1f70:	f8df 8294 	ldr.w	r8, [pc, #660]	; 2208 <SensorRowUpdate+0x300>
    1f74:	47c0      	blx	r8
			
			switch(output_mode_select_magnet){
    1f76:	2f01      	cmp	r7, #1
    1f78:	d016      	beq.n	1fa8 <SensorRowUpdate+0xa0>
    1f7a:	2f02      	cmp	r7, #2
    1f7c:	d033      	beq.n	1fe6 <SensorRowUpdate+0xde>
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Left.force_z_bottom;
					break;
			
			}
			
			switch(output_mode_select_neural){
    1f7e:	2e01      	cmp	r6, #1
    1f80:	d050      	beq.n	2024 <SensorRowUpdate+0x11c>
    1f82:	2e02      	cmp	r6, #2
    1f84:	d063      	beq.n	204e <SensorRowUpdate+0x146>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Left.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Left.neuron_bottom_shear;
				break;
			}
			
			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3); 
    1f86:	4b9d      	ldr	r3, [pc, #628]	; (21fc <SensorRowUpdate+0x2f4>)
    1f88:	681a      	ldr	r2, [r3, #0]
    1f8a:	f241 236c 	movw	r3, #4716	; 0x126c
    1f8e:	5ce3      	ldrb	r3, [r4, r3]
    1f90:	3b01      	subs	r3, #1
    1f92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1f96:	442b      	add	r3, r5
    1f98:	ee07 3a90 	vmov	s15, r3
    1f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1fa0:	edc2 7a08 	vstr	s15, [r2, #32]
			break;
    1fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Left.b_x_top; //data7,8,9
    1fa8:	4b94      	ldr	r3, [pc, #592]	; (21fc <SensorRowUpdate+0x2f4>)
    1faa:	681a      	ldr	r2, [r3, #0]
    1fac:	f8d4 1318 	ldr.w	r1, [r4, #792]	; 0x318
    1fb0:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Left.b_y_top;
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
    1fb8:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Left.b_z_top;
    1fba:	f8d4 2330 	ldr.w	r2, [r4, #816]	; 0x330
    1fbe:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Left.b_x_middle; //data4,5,6
    1fc0:	f8d4 231c 	ldr.w	r2, [r4, #796]	; 0x31c
    1fc4:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Left.b_y_middle;
    1fc6:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
    1fca:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Left.b_z_middle;
    1fcc:	f8d4 2334 	ldr.w	r2, [r4, #820]	; 0x334
    1fd0:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Left.b_x_bottom; //data1,2,3
    1fd2:	f8d4 2320 	ldr.w	r2, [r4, #800]	; 0x320
    1fd6:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Left.b_y_bottom;
    1fd8:	f8d4 232c 	ldr.w	r2, [r4, #812]	; 0x32c
    1fdc:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Left.b_z_bottom;
    1fde:	f8d4 2338 	ldr.w	r2, [r4, #824]	; 0x338
    1fe2:	635a      	str	r2, [r3, #52]	; 0x34
					break;
    1fe4:	e7cb      	b.n	1f7e <SensorRowUpdate+0x76>
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Left.force_x_top; //data7,8,9
    1fe6:	4b85      	ldr	r3, [pc, #532]	; (21fc <SensorRowUpdate+0x2f4>)
    1fe8:	681a      	ldr	r2, [r3, #0]
    1fea:	f8d4 133c 	ldr.w	r1, [r4, #828]	; 0x33c
    1fee:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Left.force_y_top;
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
    1ff6:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Left.force_z_top;
    1ff8:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
    1ffc:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Left.force_x_middle; //data4,5,6
    1ffe:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
    2002:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Left.force_y_middle;
    2004:	f8d4 234c 	ldr.w	r2, [r4, #844]	; 0x34c
    2008:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Left.force_z_middle;
    200a:	f8d4 2358 	ldr.w	r2, [r4, #856]	; 0x358
    200e:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Left.force_x_bottom; //data1,2,3
    2010:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
    2014:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Left.force_y_bottom;
    2016:	f8d4 2350 	ldr.w	r2, [r4, #848]	; 0x350
    201a:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Left.force_z_bottom;
    201c:	f8d4 235c 	ldr.w	r2, [r4, #860]	; 0x35c
    2020:	635a      	str	r2, [r3, #52]	; 0x34
					break;
    2022:	e7ac      	b.n	1f7e <SensorRowUpdate+0x76>
					BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Left.force_z_top;
    2024:	4b75      	ldr	r3, [pc, #468]	; (21fc <SensorRowUpdate+0x2f4>)
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
    202c:	60da      	str	r2, [r3, #12]
					BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Left.force_r_top;
    202e:	f8d4 2360 	ldr.w	r2, [r4, #864]	; 0x360
    2032:	611a      	str	r2, [r3, #16]
					BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Left.force_z_middle;
    2034:	f8d4 2358 	ldr.w	r2, [r4, #856]	; 0x358
    2038:	625a      	str	r2, [r3, #36]	; 0x24
					BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Left.force_r_middle;
    203a:	f8d4 2364 	ldr.w	r2, [r4, #868]	; 0x364
    203e:	629a      	str	r2, [r3, #40]	; 0x28
					BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Left.force_z_bottom;
    2040:	f8d4 235c 	ldr.w	r2, [r4, #860]	; 0x35c
    2044:	639a      	str	r2, [r3, #56]	; 0x38
					BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Left.force_r_bottom;
    2046:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    204a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    204c:	e79b      	b.n	1f86 <SensorRowUpdate+0x7e>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Left.neuron_top_normal;
    204e:	4b6b      	ldr	r3, [pc, #428]	; (21fc <SensorRowUpdate+0x2f4>)
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    2056:	3204      	adds	r2, #4
    2058:	6812      	ldr	r2, [r2, #0]
    205a:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Left.neuron_top_shear;
    205c:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    2060:	3208      	adds	r2, #8
    2062:	6812      	ldr	r2, [r2, #0]
    2064:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Left.neuron_middle_normal;
    2066:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    206a:	320c      	adds	r2, #12
    206c:	6812      	ldr	r2, [r2, #0]
    206e:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Left.neuron_middle_shear;
    2070:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    2074:	3210      	adds	r2, #16
    2076:	6812      	ldr	r2, [r2, #0]
    2078:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Left.neuron_bottom_normal;
    207a:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    207e:	3214      	adds	r2, #20
    2080:	6812      	ldr	r2, [r2, #0]
    2082:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Left.neuron_bottom_shear;
    2084:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    2088:	3218      	adds	r2, #24
    208a:	6812      	ldr	r2, [r2, #0]
    208c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    208e:	e77a      	b.n	1f86 <SensorRowUpdate+0x7e>
		
		case 2: ;
			update_struct_values(&(sensor_array_use->sensorRow_Values_Middle), &(sensor_array_use->sensor8), &(sensor_array_use->sensor5), &(sensor_array_use->sensor2));
    2090:	f500 785b 	add.w	r8, r0, #876	; 0x36c
    2094:	f100 0358 	add.w	r3, r0, #88	; 0x58
    2098:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    209c:	f500 711a 	add.w	r1, r0, #616	; 0x268
    20a0:	4640      	mov	r0, r8
    20a2:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2200 <SensorRowUpdate+0x2f8>
    20a6:	47c8      	blx	r9
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Middle),&(sensor_array_use->parameters_array));
    20a8:	f204 4214 	addw	r2, r4, #1044	; 0x414
    20ac:	4641      	mov	r1, r8
    20ae:	4628      	mov	r0, r5
    20b0:	4b51      	ldr	r3, [pc, #324]	; (21f8 <SensorRowUpdate+0x2f0>)
    20b2:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Middle), &(sensor_array_use->neuron_pair_2_top), &(sensor_array_use->neuron_pair_2_middle), &(sensor_array_use->neuron_pair_2_bottom));
    20b4:	f604 6964 	addw	r9, r4, #3684	; 0xe64
    20b8:	f604 7a04 	addw	sl, r4, #3844	; 0xf04
    20bc:	f604 7ba4 	addw	fp, r4, #4004	; 0xfa4
    20c0:	465b      	mov	r3, fp
    20c2:	4652      	mov	r2, sl
    20c4:	4649      	mov	r1, r9
    20c6:	4640      	mov	r0, r8
    20c8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2204 <SensorRowUpdate+0x2fc>
    20cc:	47c0      	blx	r8
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Middle), &(sensor_array_use->neuron_pair_2_top), &(sensor_array_use->neuron_pair_2_middle), &(sensor_array_use->neuron_pair_2_bottom));
    20ce:	465b      	mov	r3, fp
    20d0:	4652      	mov	r2, sl
    20d2:	4649      	mov	r1, r9
    20d4:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
    20d8:	301c      	adds	r0, #28
    20da:	f8df 812c 	ldr.w	r8, [pc, #300]	; 2208 <SensorRowUpdate+0x300>
    20de:	47c0      	blx	r8
			
			switch(output_mode_select_magnet){
    20e0:	2f01      	cmp	r7, #1
    20e2:	d016      	beq.n	2112 <SensorRowUpdate+0x20a>
    20e4:	2f02      	cmp	r7, #2
    20e6:	d033      	beq.n	2150 <SensorRowUpdate+0x248>
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Middle.force_y_bottom;
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Middle.force_z_bottom;		
					break;		
			}
			
			switch(output_mode_select_neural){
    20e8:	2e01      	cmp	r6, #1
    20ea:	d050      	beq.n	218e <SensorRowUpdate+0x286>
    20ec:	2e02      	cmp	r6, #2
    20ee:	d063      	beq.n	21b8 <SensorRowUpdate+0x2b0>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_shear;
				break;
			}
		
			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3);
    20f0:	4b42      	ldr	r3, [pc, #264]	; (21fc <SensorRowUpdate+0x2f4>)
    20f2:	681a      	ldr	r2, [r3, #0]
    20f4:	f241 236c 	movw	r3, #4716	; 0x126c
    20f8:	5ce3      	ldrb	r3, [r4, r3]
    20fa:	3b01      	subs	r3, #1
    20fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2100:	442b      	add	r3, r5
    2102:	ee07 3a90 	vmov	s15, r3
    2106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    210a:	edc2 7a08 	vstr	s15, [r2, #32]
			break;
    210e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Middle.b_x_top; //data7,8,9
    2112:	4b3a      	ldr	r3, [pc, #232]	; (21fc <SensorRowUpdate+0x2f4>)
    2114:	681a      	ldr	r2, [r3, #0]
    2116:	f8d4 136c 	ldr.w	r1, [r4, #876]	; 0x36c
    211a:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Middle.b_y_top;
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
    2122:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Middle.b_z_top;
    2124:	f8d4 2384 	ldr.w	r2, [r4, #900]	; 0x384
    2128:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Middle.b_x_middle; //data4,5,6
    212a:	f8d4 2370 	ldr.w	r2, [r4, #880]	; 0x370
    212e:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Middle.b_y_middle;
    2130:	f8d4 237c 	ldr.w	r2, [r4, #892]	; 0x37c
    2134:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Middle.b_z_middle;
    2136:	f8d4 2388 	ldr.w	r2, [r4, #904]	; 0x388
    213a:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Middle.b_x_bottom; //data1,2,3
    213c:	f8d4 2374 	ldr.w	r2, [r4, #884]	; 0x374
    2140:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Middle.b_y_bottom;
    2142:	f8d4 2380 	ldr.w	r2, [r4, #896]	; 0x380
    2146:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Middle.b_z_bottom;
    2148:	f8d4 238c 	ldr.w	r2, [r4, #908]	; 0x38c
    214c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
    214e:	e7cb      	b.n	20e8 <SensorRowUpdate+0x1e0>
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Middle.force_x_top; //data7,8,9
    2150:	4b2a      	ldr	r3, [pc, #168]	; (21fc <SensorRowUpdate+0x2f4>)
    2152:	681a      	ldr	r2, [r3, #0]
    2154:	f8d4 1390 	ldr.w	r1, [r4, #912]	; 0x390
    2158:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Middle.force_y_top;
    215a:	681b      	ldr	r3, [r3, #0]
    215c:	f8d4 239c 	ldr.w	r2, [r4, #924]	; 0x39c
    2160:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Middle.force_z_top;
    2162:	f8d4 23a8 	ldr.w	r2, [r4, #936]	; 0x3a8
    2166:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Middle.force_x_middle; //data4,5,6
    2168:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
    216c:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Middle.force_y_middle;
    216e:	f8d4 23a0 	ldr.w	r2, [r4, #928]	; 0x3a0
    2172:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Middle.force_z_middle;
    2174:	f8d4 23ac 	ldr.w	r2, [r4, #940]	; 0x3ac
    2178:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Middle.force_x_bottom; //data1,2,3
    217a:	f8d4 2398 	ldr.w	r2, [r4, #920]	; 0x398
    217e:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Middle.force_y_bottom;
    2180:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    2184:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Middle.force_z_bottom;		
    2186:	f8d4 23b0 	ldr.w	r2, [r4, #944]	; 0x3b0
    218a:	635a      	str	r2, [r3, #52]	; 0x34
					break;		
    218c:	e7ac      	b.n	20e8 <SensorRowUpdate+0x1e0>
				BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Middle.force_z_top;
    218e:	4b1b      	ldr	r3, [pc, #108]	; (21fc <SensorRowUpdate+0x2f4>)
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	f8d4 23a8 	ldr.w	r2, [r4, #936]	; 0x3a8
    2196:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Middle.force_r_top;
    2198:	f8d4 23b4 	ldr.w	r2, [r4, #948]	; 0x3b4
    219c:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Middle.force_z_middle;
    219e:	f8d4 23ac 	ldr.w	r2, [r4, #940]	; 0x3ac
    21a2:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Middle.force_r_middle;
    21a4:	f8d4 23b8 	ldr.w	r2, [r4, #952]	; 0x3b8
    21a8:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Middle.force_z_bottom;
    21aa:	f8d4 23b0 	ldr.w	r2, [r4, #944]	; 0x3b0
    21ae:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Middle.force_r_bottom;
    21b0:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
    21b4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    21b6:	e79b      	b.n	20f0 <SensorRowUpdate+0x1e8>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Middle.neuron_top_normal;
    21b8:	4b10      	ldr	r3, [pc, #64]	; (21fc <SensorRowUpdate+0x2f4>)
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	f504 5291 	add.w	r2, r4, #4640	; 0x1220
    21c0:	321c      	adds	r2, #28
    21c2:	6812      	ldr	r2, [r2, #0]
    21c4:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Middle.neuron_top_shear;
    21c6:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    21ca:	6812      	ldr	r2, [r2, #0]
    21cc:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Middle.neuron_middle_normal;
    21ce:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    21d2:	3204      	adds	r2, #4
    21d4:	6812      	ldr	r2, [r2, #0]
    21d6:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Middle.neuron_middle_shear;
    21d8:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    21dc:	3208      	adds	r2, #8
    21de:	6812      	ldr	r2, [r2, #0]
    21e0:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_normal;
    21e2:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    21e6:	320c      	adds	r2, #12
    21e8:	6812      	ldr	r2, [r2, #0]
    21ea:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Middle.neuron_bottom_shear;
    21ec:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    21f0:	3210      	adds	r2, #16
    21f2:	6812      	ldr	r2, [r2, #0]
    21f4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    21f6:	e77b      	b.n	20f0 <SensorRowUpdate+0x1e8>
    21f8:	000066a1 	.word	0x000066a1
    21fc:	20000074 	.word	0x20000074
    2200:	0000649d 	.word	0x0000649d
    2204:	00007d71 	.word	0x00007d71
    2208:	00007e29 	.word	0x00007e29
			
		case 3: ;
			update_struct_values(&(sensor_array_use->sensorRow_Values_Right), &(sensor_array_use->sensor9), &(sensor_array_use->sensor6), &(sensor_array_use->sensor3));
    220c:	f500 7870 	add.w	r8, r0, #960	; 0x3c0
    2210:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    2214:	f500 72dc 	add.w	r2, r0, #440	; 0x1b8
    2218:	f500 7130 	add.w	r1, r0, #704	; 0x2c0
    221c:	4640      	mov	r0, r8
    221e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 2394 <SensorRowUpdate+0x48c>
    2222:	47c8      	blx	r9
			mag_to_force(row_select, &(sensor_array_use->sensorRow_Values_Right), &(sensor_array_use->parameters_array));
    2224:	f204 4214 	addw	r2, r4, #1044	; 0x414
    2228:	4641      	mov	r1, r8
    222a:	4628      	mov	r0, r5
    222c:	4b57      	ldr	r3, [pc, #348]	; (238c <SensorRowUpdate+0x484>)
    222e:	4798      	blx	r3
			neuron_calc_row(&(sensor_array_use->sensorRow_Values_Right), &(sensor_array_use->neuron_pair_3_top), &(sensor_array_use->neuron_pair_3_middle), &(sensor_array_use->neuron_pair_3_bottom));
    2230:	f504 5982 	add.w	r9, r4, #4160	; 0x1040
    2234:	f109 0904 	add.w	r9, r9, #4
    2238:	f504 5a87 	add.w	sl, r4, #4320	; 0x10e0
    223c:	f10a 0a04 	add.w	sl, sl, #4
    2240:	f504 5b8c 	add.w	fp, r4, #4480	; 0x1180
    2244:	f10b 0b04 	add.w	fp, fp, #4
    2248:	465b      	mov	r3, fp
    224a:	4652      	mov	r2, sl
    224c:	4649      	mov	r1, r9
    224e:	4640      	mov	r0, r8
    2250:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2398 <SensorRowUpdate+0x490>
    2254:	47c0      	blx	r8
			update_struct_values_neural(&(sensor_array_use->neuronRow_Values_Right), &(sensor_array_use->neuron_pair_3_top), &(sensor_array_use->neuron_pair_3_middle), &(sensor_array_use->neuron_pair_3_bottom));
    2256:	465b      	mov	r3, fp
    2258:	4652      	mov	r2, sl
    225a:	4649      	mov	r1, r9
    225c:	f504 5092 	add.w	r0, r4, #4672	; 0x1240
    2260:	3014      	adds	r0, #20
    2262:	f8df 8138 	ldr.w	r8, [pc, #312]	; 239c <SensorRowUpdate+0x494>
    2266:	47c0      	blx	r8
			
			switch(output_mode_select_magnet){
    2268:	2f01      	cmp	r7, #1
    226a:	d015      	beq.n	2298 <SensorRowUpdate+0x390>
    226c:	2f02      	cmp	r7, #2
    226e:	d032      	beq.n	22d6 <SensorRowUpdate+0x3ce>
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Right.force_y_bottom;
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Right.force_z_bottom;
					break;
			}
			
			switch(output_mode_select_neural){
    2270:	2e01      	cmp	r6, #1
    2272:	d051      	beq.n	2318 <SensorRowUpdate+0x410>
    2274:	2e02      	cmp	r6, #2
    2276:	d069      	beq.n	234c <SensorRowUpdate+0x444>
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Right.neuron_bottom_normal;
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Right.neuron_bottom_shear;
				break;
			}

			BLDC_OUT->hall_middle_temp = row_select + ((sensor_array_use->array_number-1)*3); 
    2278:	4b45      	ldr	r3, [pc, #276]	; (2390 <SensorRowUpdate+0x488>)
    227a:	681a      	ldr	r2, [r3, #0]
    227c:	f241 236c 	movw	r3, #4716	; 0x126c
    2280:	5ce3      	ldrb	r3, [r4, r3]
    2282:	3b01      	subs	r3, #1
    2284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2288:	441d      	add	r5, r3
    228a:	ee07 5a90 	vmov	s15, r5
    228e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2292:	edc2 7a08 	vstr	s15, [r2, #32]
			break;
		}
};
    2296:	e645      	b.n	1f24 <SensorRowUpdate+0x1c>
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Right.b_x_top; //data7,8,9
    2298:	4b3d      	ldr	r3, [pc, #244]	; (2390 <SensorRowUpdate+0x488>)
    229a:	681a      	ldr	r2, [r3, #0]
    229c:	f8d4 13c0 	ldr.w	r1, [r4, #960]	; 0x3c0
    22a0:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Right.b_y_top;
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
    22a8:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Right.b_z_top;
    22aa:	f8d4 23d8 	ldr.w	r2, [r4, #984]	; 0x3d8
    22ae:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Right.b_x_middle; //data4,5,6
    22b0:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
    22b4:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Right.b_y_middle;
    22b6:	f8d4 23d0 	ldr.w	r2, [r4, #976]	; 0x3d0
    22ba:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Right.b_z_middle;
    22bc:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    22c0:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Right.b_x_bottom; //data1,2,3
    22c2:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
    22c6:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Right.b_y_bottom;
    22c8:	f8d4 23d4 	ldr.w	r2, [r4, #980]	; 0x3d4
    22cc:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Right.b_z_bottom;
    22ce:	f8d4 23e0 	ldr.w	r2, [r4, #992]	; 0x3e0
    22d2:	635a      	str	r2, [r3, #52]	; 0x34
					break;
    22d4:	e7cc      	b.n	2270 <SensorRowUpdate+0x368>
					BLDC_OUT->hall_top_x = sensor_array_use->sensorRow_Values_Right.force_x_top; //data7,8,9
    22d6:	4b2e      	ldr	r3, [pc, #184]	; (2390 <SensorRowUpdate+0x488>)
    22d8:	681a      	ldr	r2, [r3, #0]
    22da:	f8d4 13e4 	ldr.w	r1, [r4, #996]	; 0x3e4
    22de:	6011      	str	r1, [r2, #0]
					BLDC_OUT->hall_top_y = sensor_array_use->sensorRow_Values_Right.force_y_top;
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	f8d4 23f0 	ldr.w	r2, [r4, #1008]	; 0x3f0
    22e6:	605a      	str	r2, [r3, #4]
					BLDC_OUT->hall_top_z = sensor_array_use->sensorRow_Values_Right.force_z_top;
    22e8:	f8d4 23fc 	ldr.w	r2, [r4, #1020]	; 0x3fc
    22ec:	609a      	str	r2, [r3, #8]
					BLDC_OUT->hall_middle_x = sensor_array_use->sensorRow_Values_Right.force_x_middle; //data4,5,6
    22ee:	f8d4 23e8 	ldr.w	r2, [r4, #1000]	; 0x3e8
    22f2:	615a      	str	r2, [r3, #20]
					BLDC_OUT->hall_middle_y = sensor_array_use->sensorRow_Values_Right.force_y_middle;
    22f4:	f8d4 23f4 	ldr.w	r2, [r4, #1012]	; 0x3f4
    22f8:	619a      	str	r2, [r3, #24]
					BLDC_OUT->hall_middle_z = sensor_array_use->sensorRow_Values_Right.force_z_middle;
    22fa:	f504 6280 	add.w	r2, r4, #1024	; 0x400
    22fe:	6812      	ldr	r2, [r2, #0]
    2300:	61da      	str	r2, [r3, #28]
					BLDC_OUT->hall_bottom_x = sensor_array_use->sensorRow_Values_Right.force_x_bottom; //data1,2,3
    2302:	f8d4 23ec 	ldr.w	r2, [r4, #1004]	; 0x3ec
    2306:	62da      	str	r2, [r3, #44]	; 0x2c
					BLDC_OUT->hall_bottom_y = sensor_array_use->sensorRow_Values_Right.force_y_bottom;
    2308:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
    230c:	631a      	str	r2, [r3, #48]	; 0x30
					BLDC_OUT->hall_bottom_z = sensor_array_use->sensorRow_Values_Right.force_z_bottom;
    230e:	f204 4204 	addw	r2, r4, #1028	; 0x404
    2312:	6812      	ldr	r2, [r2, #0]
    2314:	635a      	str	r2, [r3, #52]	; 0x34
					break;
    2316:	e7ab      	b.n	2270 <SensorRowUpdate+0x368>
				BLDC_OUT->neuron_top_normal = sensor_array_use->sensorRow_Values_Right.force_z_top;
    2318:	4b1d      	ldr	r3, [pc, #116]	; (2390 <SensorRowUpdate+0x488>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	f8d4 23fc 	ldr.w	r2, [r4, #1020]	; 0x3fc
    2320:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->sensorRow_Values_Right.force_r_top;
    2322:	f504 6281 	add.w	r2, r4, #1032	; 0x408
    2326:	6812      	ldr	r2, [r2, #0]
    2328:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->sensorRow_Values_Right.force_z_middle;
    232a:	f504 6280 	add.w	r2, r4, #1024	; 0x400
    232e:	6812      	ldr	r2, [r2, #0]
    2330:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->sensorRow_Values_Right.force_r_middle;
    2332:	f204 420c 	addw	r2, r4, #1036	; 0x40c
    2336:	6812      	ldr	r2, [r2, #0]
    2338:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->sensorRow_Values_Right.force_z_bottom;
    233a:	f204 4204 	addw	r2, r4, #1028	; 0x404
    233e:	6812      	ldr	r2, [r2, #0]
    2340:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->sensorRow_Values_Right.force_r_bottom;
    2342:	f504 6282 	add.w	r2, r4, #1040	; 0x410
    2346:	6812      	ldr	r2, [r2, #0]
    2348:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    234a:	e795      	b.n	2278 <SensorRowUpdate+0x370>
				BLDC_OUT->neuron_top_normal = sensor_array_use->neuronRow_Values_Right.neuron_top_normal;
    234c:	4b10      	ldr	r3, [pc, #64]	; (2390 <SensorRowUpdate+0x488>)
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    2354:	3214      	adds	r2, #20
    2356:	6812      	ldr	r2, [r2, #0]
    2358:	60da      	str	r2, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensor_array_use->neuronRow_Values_Right.neuron_top_shear;
    235a:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    235e:	3218      	adds	r2, #24
    2360:	6812      	ldr	r2, [r2, #0]
    2362:	611a      	str	r2, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensor_array_use->neuronRow_Values_Right.neuron_middle_normal;
    2364:	f504 5292 	add.w	r2, r4, #4672	; 0x1240
    2368:	321c      	adds	r2, #28
    236a:	6812      	ldr	r2, [r2, #0]
    236c:	625a      	str	r2, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensor_array_use->neuronRow_Values_Right.neuron_middle_shear;
    236e:	f504 5293 	add.w	r2, r4, #4704	; 0x1260
    2372:	6812      	ldr	r2, [r2, #0]
    2374:	629a      	str	r2, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensor_array_use->neuronRow_Values_Right.neuron_bottom_normal;
    2376:	f504 5293 	add.w	r2, r4, #4704	; 0x1260
    237a:	3204      	adds	r2, #4
    237c:	6812      	ldr	r2, [r2, #0]
    237e:	639a      	str	r2, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensor_array_use->neuronRow_Values_Right.neuron_bottom_shear;
    2380:	f504 5293 	add.w	r2, r4, #4704	; 0x1260
    2384:	3208      	adds	r2, #8
    2386:	6812      	ldr	r2, [r2, #0]
    2388:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    238a:	e775      	b.n	2278 <SensorRowUpdate+0x370>
    238c:	000066a1 	.word	0x000066a1
    2390:	20000074 	.word	0x20000074
    2394:	0000649d 	.word	0x0000649d
    2398:	00007d71 	.word	0x00007d71
    239c:	00007e29 	.word	0x00007e29

000023a0 <main>:


int main(void)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b088      	sub	sp, #32
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    23a4:	4ba3      	ldr	r3, [pc, #652]	; (2634 <main+0x294>)
    23a6:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    23a8:	4ba3      	ldr	r3, [pc, #652]	; (2638 <main+0x298>)
    23aa:	4798      	blx	r3
	
	//Initialize I2C communication
	
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    23ac:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 26ac <main+0x30c>
    23b0:	4ea2      	ldr	r6, [pc, #648]	; (263c <main+0x29c>)
    23b2:	4641      	mov	r1, r8
    23b4:	4630      	mov	r0, r6
    23b6:	4fa2      	ldr	r7, [pc, #648]	; (2640 <main+0x2a0>)
    23b8:	47b8      	blx	r7
	i2c_m_sync_enable(&I2C_0);
    23ba:	4630      	mov	r0, r6
    23bc:	4ca1      	ldr	r4, [pc, #644]	; (2644 <main+0x2a4>)
    23be:	47a0      	blx	r4
	
	
	i2c_m_sync_get_io_descriptor(&I2C_1, &bmx_io_2);
    23c0:	4da1      	ldr	r5, [pc, #644]	; (2648 <main+0x2a8>)
    23c2:	49a2      	ldr	r1, [pc, #648]	; (264c <main+0x2ac>)
    23c4:	4628      	mov	r0, r5
    23c6:	47b8      	blx	r7
	i2c_m_sync_enable(&I2C_1);
    23c8:	4628      	mov	r0, r5
    23ca:	47a0      	blx	r4
    23cc:	2240      	movs	r2, #64	; 0x40
    23ce:	4ba0      	ldr	r3, [pc, #640]	; (2650 <main+0x2b0>)
    23d0:	615a      	str	r2, [r3, #20]
	
	//Reset TRG Pin
	gpio_set_pin_level(TRG,false);

	//Initialize Readout Variables
	new_data = false;
    23d2:	2300      	movs	r3, #0
    23d4:	4a9f      	ldr	r2, [pc, #636]	; (2654 <main+0x2b4>)
    23d6:	7013      	strb	r3, [r2, #0]
	triggered = false;
    23d8:	4a9f      	ldr	r2, [pc, #636]	; (2658 <main+0x2b8>)
    23da:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    23dc:	4a9f      	ldr	r2, [pc, #636]	; (265c <main+0x2bc>)
    23de:	7013      	strb	r3, [r2, #0]
	data_sent = false;
    23e0:	4a9f      	ldr	r2, [pc, #636]	; (2660 <main+0x2c0>)
    23e2:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&(sensor_array_1.sensor9));
    23e4:	4d9f      	ldr	r5, [pc, #636]	; (2664 <main+0x2c4>)
    23e6:	4628      	mov	r0, r5
    23e8:	4b9f      	ldr	r3, [pc, #636]	; (2668 <main+0x2c8>)
    23ea:	4798      	blx	r3
    23ec:	4b9f      	ldr	r3, [pc, #636]	; (266c <main+0x2cc>)
    23ee:	8018      	strh	r0, [r3, #0]
	selected_row = 1; //1 = left, 2 = middle, 3 = right
    23f0:	2301      	movs	r3, #1
    23f2:	4a9f      	ldr	r2, [pc, #636]	; (2670 <main+0x2d0>)
    23f4:	7013      	strb	r3, [r2, #0]
	selected_array = 1; 
    23f6:	4a9f      	ldr	r2, [pc, #636]	; (2674 <main+0x2d4>)
    23f8:	7013      	strb	r3, [r2, #0]
	
	// User Input
	selected_output_mode_neural = 1; //1 = Force, 2 = Neural Spikes
    23fa:	4a9f      	ldr	r2, [pc, #636]	; (2678 <main+0x2d8>)
    23fc:	7013      	strb	r3, [r2, #0]
	selected_output_mode_magnet = 1; //1 = Magnet, 2 = Force
    23fe:	4a9f      	ldr	r2, [pc, #636]	; (267c <main+0x2dc>)
    2400:	7013      	strb	r3, [r2, #0]
	number_of_arrays = 2; // how many arrays you want to read out at the same time - implementation necessairy!
    2402:	4f9f      	ldr	r7, [pc, #636]	; (2680 <main+0x2e0>)
    2404:	2202      	movs	r2, #2
    2406:	703a      	strb	r2, [r7, #0]
	
	
	// Initialize Sensor Array
	
	sensor_array_1.array_number = 1;
    2408:	f5a5 7430 	sub.w	r4, r5, #704	; 0x2c0
    240c:	f885 3fac 	strb.w	r3, [r5, #4012]	; 0xfac
	SensorArray_Init(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
    2410:	f8d8 3000 	ldr.w	r3, [r8]
    2414:	9306      	str	r3, [sp, #24]
    2416:	9605      	str	r6, [sp, #20]
    2418:	9504      	str	r5, [sp, #16]
    241a:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    241e:	9303      	str	r3, [sp, #12]
    2420:	f1a5 03b0 	sub.w	r3, r5, #176	; 0xb0
    2424:	9302      	str	r3, [sp, #8]
    2426:	f5a5 7384 	sub.w	r3, r5, #264	; 0x108
    242a:	9301      	str	r3, [sp, #4]
    242c:	f5a5 73b0 	sub.w	r3, r5, #352	; 0x160
    2430:	9300      	str	r3, [sp, #0]
    2432:	f5a5 73dc 	sub.w	r3, r5, #440	; 0x1b8
    2436:	f5a5 7204 	sub.w	r2, r5, #528	; 0x210
    243a:	f5a5 711a 	sub.w	r1, r5, #616	; 0x268
    243e:	4620      	mov	r0, r4
    2440:	4e90      	ldr	r6, [pc, #576]	; (2684 <main+0x2e4>)
    2442:	47b0      	blx	r6
					 &(sensor_array_1.sensor4),&(sensor_array_1.sensor5),&(sensor_array_1.sensor6),
					 &(sensor_array_1.sensor7),&(sensor_array_1.sensor8),&(sensor_array_1.sensor9), &I2C_0, bmx_io);
	initialize_calibration_parameters(&(sensor_array_1.parameters_array), sensor_array_1.array_number);
    2444:	f895 1fac 	ldrb.w	r1, [r5, #4012]	; 0xfac
    2448:	f505 70aa 	add.w	r0, r5, #340	; 0x154
    244c:	4b8e      	ldr	r3, [pc, #568]	; (2688 <main+0x2e8>)
    244e:	4798      	blx	r3
	neuron_init_array(&(sensor_array_1.neuron_pair_1_top), &(sensor_array_1.neuron_pair_1_middle), &(sensor_array_1.neuron_pair_1_bottom),
    2450:	f605 63c4 	addw	r3, r5, #3780	; 0xec4
    2454:	9304      	str	r3, [sp, #16]
    2456:	3ba0      	subs	r3, #160	; 0xa0
    2458:	9303      	str	r3, [sp, #12]
    245a:	3ba0      	subs	r3, #160	; 0xa0
    245c:	9302      	str	r3, [sp, #8]
    245e:	f605 43e4 	addw	r3, r5, #3300	; 0xce4
    2462:	9301      	str	r3, [sp, #4]
    2464:	f605 4344 	addw	r3, r5, #3140	; 0xc44
    2468:	9300      	str	r3, [sp, #0]
    246a:	f605 33a4 	addw	r3, r5, #2980	; 0xba4
    246e:	f605 3204 	addw	r2, r5, #2820	; 0xb04
    2472:	f605 2164 	addw	r1, r5, #2660	; 0xa64
    2476:	f605 10c4 	addw	r0, r5, #2500	; 0x9c4
    247a:	4c84      	ldr	r4, [pc, #528]	; (268c <main+0x2ec>)
    247c:	47a0      	blx	r4
					  &(sensor_array_1.neuron_pair_2_top), &(sensor_array_1.neuron_pair_2_middle), &(sensor_array_1.neuron_pair_2_bottom), 
					  &(sensor_array_1.neuron_pair_3_top), &(sensor_array_1.neuron_pair_3_middle), &(sensor_array_1.neuron_pair_3_bottom));
	delay_ms(10);
    247e:	200a      	movs	r0, #10
    2480:	4b83      	ldr	r3, [pc, #524]	; (2690 <main+0x2f0>)
    2482:	4798      	blx	r3
	
	if (number_of_arrays == 2)
    2484:	783b      	ldrb	r3, [r7, #0]
    2486:	2b02      	cmp	r3, #2
    2488:	d052      	beq.n	2530 <main+0x190>
		initialize_calibration_parameters(&(sensor_array_2.parameters_array), sensor_array_2.array_number);
		neuron_init_array(&(sensor_array_2.neuron_pair_1_top), &(sensor_array_2.neuron_pair_1_middle), &(sensor_array_2.neuron_pair_1_bottom),
						  &(sensor_array_2.neuron_pair_2_top), &(sensor_array_2.neuron_pair_2_middle), &(sensor_array_2.neuron_pair_2_bottom),
						  &(sensor_array_2.neuron_pair_3_top), &(sensor_array_2.neuron_pair_3_middle), &(sensor_array_2.neuron_pair_3_bottom));
	}
	delay_ms(10);
    248a:	200a      	movs	r0, #10
    248c:	4b80      	ldr	r3, [pc, #512]	; (2690 <main+0x2f0>)
    248e:	4798      	blx	r3
    2490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2494:	4b7f      	ldr	r3, [pc, #508]	; (2694 <main+0x2f4>)
    2496:	60da      	str	r2, [r3, #12]
	/* Replace with your application code */
	 
	while (1) 
	{
		
		if (triggered == false)	
    2498:	4b6f      	ldr	r3, [pc, #444]	; (2658 <main+0x2b8>)
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	2b00      	cmp	r3, #0
    249e:	f000 8083 	beq.w	25a8 <main+0x208>
			triggerSensor(50);
			triggered = true;
			data_readout = false;
		}
		
		if(new_data == true && data_readout == false)
    24a2:	4b6c      	ldr	r3, [pc, #432]	; (2654 <main+0x2b4>)
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	b193      	cbz	r3, 24ce <main+0x12e>
    24a8:	4b6c      	ldr	r3, [pc, #432]	; (265c <main+0x2bc>)
    24aa:	781b      	ldrb	r3, [r3, #0]
    24ac:	b97b      	cbnz	r3, 24ce <main+0x12e>
		{	
			//Needs to be rewritten to change between sensor arrays !!!!!!
			if (selected_array == 1)
    24ae:	4b71      	ldr	r3, [pc, #452]	; (2674 <main+0x2d4>)
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	2b01      	cmp	r3, #1
    24b4:	f000 8082 	beq.w	25bc <main+0x21c>
			{
				triggerReadoutArray(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
									&(sensor_array_1.sensor4),&(sensor_array_1.sensor5),&(sensor_array_1.sensor6),
									&(sensor_array_1.sensor7),&(sensor_array_1.sensor8),&(sensor_array_1.sensor9), &I2C_0, bmx_io);
			}
			if (selected_array == 2)
    24b8:	4b6e      	ldr	r3, [pc, #440]	; (2674 <main+0x2d4>)
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	2b02      	cmp	r3, #2
    24be:	f000 809b 	beq.w	25f8 <main+0x258>
				triggerReadoutArray(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
									&(sensor_array_2.sensor4),&(sensor_array_2.sensor5),&(sensor_array_2.sensor6),
									&(sensor_array_2.sensor7),&(sensor_array_2.sensor8),&(sensor_array_2.sensor9), &I2C_1, bmx_io_2);
			}
		
			new_data = false; 
    24c2:	2200      	movs	r2, #0
    24c4:	4b63      	ldr	r3, [pc, #396]	; (2654 <main+0x2b4>)
    24c6:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    24c8:	2201      	movs	r2, #1
    24ca:	4b64      	ldr	r3, [pc, #400]	; (265c <main+0x2bc>)
    24cc:	701a      	strb	r2, [r3, #0]
		}
		
		if(data_readout == true && row_change_possible == true && data_sent == false)
    24ce:	4b63      	ldr	r3, [pc, #396]	; (265c <main+0x2bc>)
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d0e0      	beq.n	2498 <main+0xf8>
    24d6:	4b70      	ldr	r3, [pc, #448]	; (2698 <main+0x2f8>)
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d0dc      	beq.n	2498 <main+0xf8>
    24de:	4b60      	ldr	r3, [pc, #384]	; (2660 <main+0x2c0>)
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d1d8      	bne.n	2498 <main+0xf8>
		{
			if (selected_array == 1)
    24e6:	4b63      	ldr	r3, [pc, #396]	; (2674 <main+0x2d4>)
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2b01      	cmp	r3, #1
    24ec:	f000 80e4 	beq.w	26b8 <main+0x318>
			{
				SensorRowUpdate(&sensor_array_1, selected_row, selected_output_mode_magnet, selected_output_mode_neural);		
				//delay_ms(2);
			}
			if (selected_array == 2)
    24f0:	4b60      	ldr	r3, [pc, #384]	; (2674 <main+0x2d4>)
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	2b02      	cmp	r3, #2
    24f6:	f000 80e9 	beq.w	26cc <main+0x32c>
			{
				SensorRowUpdate(&sensor_array_2, selected_row, selected_output_mode_magnet, selected_output_mode_neural);	
				//delay_ms(2);
			}
			selected_row++;	
    24fa:	4a5d      	ldr	r2, [pc, #372]	; (2670 <main+0x2d0>)
    24fc:	7813      	ldrb	r3, [r2, #0]
    24fe:	3301      	adds	r3, #1
    2500:	b2db      	uxtb	r3, r3
    2502:	7013      	strb	r3, [r2, #0]
			row_change_possible == false;
    2504:	4a64      	ldr	r2, [pc, #400]	; (2698 <main+0x2f8>)
    2506:	7812      	ldrb	r2, [r2, #0]
			if (selected_row == 4)
    2508:	2b04      	cmp	r3, #4
    250a:	d1c5      	bne.n	2498 <main+0xf8>
			{
				selected_row = 1;
    250c:	2201      	movs	r2, #1
    250e:	4b58      	ldr	r3, [pc, #352]	; (2670 <main+0x2d0>)
    2510:	701a      	strb	r2, [r3, #0]
				selected_array++;
    2512:	4958      	ldr	r1, [pc, #352]	; (2674 <main+0x2d4>)
    2514:	780b      	ldrb	r3, [r1, #0]
    2516:	4413      	add	r3, r2
    2518:	b2db      	uxtb	r3, r3
    251a:	700b      	strb	r3, [r1, #0]
				data_sent = true;
    251c:	4950      	ldr	r1, [pc, #320]	; (2660 <main+0x2c0>)
    251e:	700a      	strb	r2, [r1, #0]
				if (selected_array > number_of_arrays)
    2520:	4a57      	ldr	r2, [pc, #348]	; (2680 <main+0x2e0>)
    2522:	7812      	ldrb	r2, [r2, #0]
    2524:	4293      	cmp	r3, r2
    2526:	d9b7      	bls.n	2498 <main+0xf8>
				 {
					 selected_array = 1;
    2528:	2201      	movs	r2, #1
    252a:	4b52      	ldr	r3, [pc, #328]	; (2674 <main+0x2d4>)
    252c:	701a      	strb	r2, [r3, #0]
    252e:	e7b3      	b.n	2498 <main+0xf8>
		sensor_array_2.array_number = 2;
    2530:	4c5a      	ldr	r4, [pc, #360]	; (269c <main+0x2fc>)
    2532:	f241 256c 	movw	r5, #4716	; 0x126c
    2536:	5563      	strb	r3, [r4, r5]
		SensorArray_Init(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
    2538:	4b44      	ldr	r3, [pc, #272]	; (264c <main+0x2ac>)
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	9306      	str	r3, [sp, #24]
    253e:	4b42      	ldr	r3, [pc, #264]	; (2648 <main+0x2a8>)
    2540:	9305      	str	r3, [sp, #20]
    2542:	f504 7330 	add.w	r3, r4, #704	; 0x2c0
    2546:	9304      	str	r3, [sp, #16]
    2548:	f504 731a 	add.w	r3, r4, #616	; 0x268
    254c:	9303      	str	r3, [sp, #12]
    254e:	f504 7304 	add.w	r3, r4, #528	; 0x210
    2552:	9302      	str	r3, [sp, #8]
    2554:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
    2558:	9301      	str	r3, [sp, #4]
    255a:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    255e:	9300      	str	r3, [sp, #0]
    2560:	f504 7384 	add.w	r3, r4, #264	; 0x108
    2564:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    2568:	f104 0158 	add.w	r1, r4, #88	; 0x58
    256c:	4620      	mov	r0, r4
    256e:	47b0      	blx	r6
		initialize_calibration_parameters(&(sensor_array_2.parameters_array), sensor_array_2.array_number);
    2570:	5d61      	ldrb	r1, [r4, r5]
    2572:	f204 4014 	addw	r0, r4, #1044	; 0x414
    2576:	4b44      	ldr	r3, [pc, #272]	; (2688 <main+0x2e8>)
    2578:	4798      	blx	r3
		neuron_init_array(&(sensor_array_2.neuron_pair_1_top), &(sensor_array_2.neuron_pair_1_middle), &(sensor_array_2.neuron_pair_1_bottom),
    257a:	4b49      	ldr	r3, [pc, #292]	; (26a0 <main+0x300>)
    257c:	9304      	str	r3, [sp, #16]
    257e:	3ba0      	subs	r3, #160	; 0xa0
    2580:	9303      	str	r3, [sp, #12]
    2582:	3ba0      	subs	r3, #160	; 0xa0
    2584:	9302      	str	r3, [sp, #8]
    2586:	f604 73a4 	addw	r3, r4, #4004	; 0xfa4
    258a:	9301      	str	r3, [sp, #4]
    258c:	f604 7304 	addw	r3, r4, #3844	; 0xf04
    2590:	9300      	str	r3, [sp, #0]
    2592:	f604 6364 	addw	r3, r4, #3684	; 0xe64
    2596:	f604 52c4 	addw	r2, r4, #3524	; 0xdc4
    259a:	f604 5124 	addw	r1, r4, #3364	; 0xd24
    259e:	f604 4084 	addw	r0, r4, #3204	; 0xc84
    25a2:	4c3a      	ldr	r4, [pc, #232]	; (268c <main+0x2ec>)
    25a4:	47a0      	blx	r4
    25a6:	e770      	b.n	248a <main+0xea>
			triggerSensor(50);
    25a8:	2032      	movs	r0, #50	; 0x32
    25aa:	4b3e      	ldr	r3, [pc, #248]	; (26a4 <main+0x304>)
    25ac:	4798      	blx	r3
			triggered = true;
    25ae:	2201      	movs	r2, #1
    25b0:	4b29      	ldr	r3, [pc, #164]	; (2658 <main+0x2b8>)
    25b2:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    25b4:	2200      	movs	r2, #0
    25b6:	4b29      	ldr	r3, [pc, #164]	; (265c <main+0x2bc>)
    25b8:	701a      	strb	r2, [r3, #0]
    25ba:	e772      	b.n	24a2 <main+0x102>
				triggerReadoutArray(&(sensor_array_1.sensor1),&(sensor_array_1.sensor2),&(sensor_array_1.sensor3),
    25bc:	493a      	ldr	r1, [pc, #232]	; (26a8 <main+0x308>)
    25be:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
    25c2:	4b3a      	ldr	r3, [pc, #232]	; (26ac <main+0x30c>)
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	9306      	str	r3, [sp, #24]
    25c8:	4b1c      	ldr	r3, [pc, #112]	; (263c <main+0x29c>)
    25ca:	9305      	str	r3, [sp, #20]
    25cc:	f500 7330 	add.w	r3, r0, #704	; 0x2c0
    25d0:	9304      	str	r3, [sp, #16]
    25d2:	f500 731a 	add.w	r3, r0, #616	; 0x268
    25d6:	9303      	str	r3, [sp, #12]
    25d8:	f500 7304 	add.w	r3, r0, #528	; 0x210
    25dc:	9302      	str	r3, [sp, #8]
    25de:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
    25e2:	9301      	str	r3, [sp, #4]
    25e4:	f500 73b0 	add.w	r3, r0, #352	; 0x160
    25e8:	9300      	str	r3, [sp, #0]
    25ea:	460b      	mov	r3, r1
    25ec:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    25f0:	39b0      	subs	r1, #176	; 0xb0
    25f2:	4c2f      	ldr	r4, [pc, #188]	; (26b0 <main+0x310>)
    25f4:	47a0      	blx	r4
    25f6:	e75f      	b.n	24b8 <main+0x118>
				triggerReadoutArray(&(sensor_array_2.sensor1),&(sensor_array_2.sensor2),&(sensor_array_2.sensor3),
    25f8:	492e      	ldr	r1, [pc, #184]	; (26b4 <main+0x314>)
    25fa:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
    25fe:	4b13      	ldr	r3, [pc, #76]	; (264c <main+0x2ac>)
    2600:	681b      	ldr	r3, [r3, #0]
    2602:	9306      	str	r3, [sp, #24]
    2604:	4b10      	ldr	r3, [pc, #64]	; (2648 <main+0x2a8>)
    2606:	9305      	str	r3, [sp, #20]
    2608:	f500 7330 	add.w	r3, r0, #704	; 0x2c0
    260c:	9304      	str	r3, [sp, #16]
    260e:	f500 731a 	add.w	r3, r0, #616	; 0x268
    2612:	9303      	str	r3, [sp, #12]
    2614:	f500 7304 	add.w	r3, r0, #528	; 0x210
    2618:	9302      	str	r3, [sp, #8]
    261a:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
    261e:	9301      	str	r3, [sp, #4]
    2620:	f500 73b0 	add.w	r3, r0, #352	; 0x160
    2624:	9300      	str	r3, [sp, #0]
    2626:	460b      	mov	r3, r1
    2628:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    262c:	39b0      	subs	r1, #176	; 0xb0
    262e:	4c20      	ldr	r4, [pc, #128]	; (26b0 <main+0x310>)
    2630:	47a0      	blx	r4
    2632:	e746      	b.n	24c2 <main+0x122>
    2634:	000002d1 	.word	0x000002d1
    2638:	00000869 	.word	0x00000869
    263c:	200003d0 	.word	0x200003d0
    2640:	00000b5d 	.word	0x00000b5d
    2644:	00000b41 	.word	0x00000b41
    2648:	20000380 	.word	0x20000380
    264c:	20001c20 	.word	0x20001c20
    2650:	41008000 	.word	0x41008000
    2654:	20001c14 	.word	0x20001c14
    2658:	20001c28 	.word	0x20001c28
    265c:	20001c1d 	.word	0x20001c1d
    2660:	20001c25 	.word	0x20001c25
    2664:	20001eec 	.word	0x20001eec
    2668:	00005d55 	.word	0x00005d55
    266c:	20001c26 	.word	0x20001c26
    2670:	200009a1 	.word	0x200009a1
    2674:	20001c29 	.word	0x20001c29
    2678:	200009a0 	.word	0x200009a0
    267c:	20001c15 	.word	0x20001c15
    2680:	20001c24 	.word	0x20001c24
    2684:	0000633d 	.word	0x0000633d
    2688:	00002749 	.word	0x00002749
    268c:	00007d51 	.word	0x00007d51
    2690:	00000a81 	.word	0x00000a81
    2694:	e000e100 	.word	0xe000e100
    2698:	20000540 	.word	0x20000540
    269c:	200009a4 	.word	0x200009a4
    26a0:	20001b28 	.word	0x20001b28
    26a4:	0000623d 	.word	0x0000623d
    26a8:	20001d34 	.word	0x20001d34
    26ac:	20001c18 	.word	0x20001c18
    26b0:	00006281 	.word	0x00006281
    26b4:	20000aac 	.word	0x20000aac
				SensorRowUpdate(&sensor_array_1, selected_row, selected_output_mode_magnet, selected_output_mode_neural);		
    26b8:	4b09      	ldr	r3, [pc, #36]	; (26e0 <main+0x340>)
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	4a09      	ldr	r2, [pc, #36]	; (26e4 <main+0x344>)
    26be:	7812      	ldrb	r2, [r2, #0]
    26c0:	4909      	ldr	r1, [pc, #36]	; (26e8 <main+0x348>)
    26c2:	7809      	ldrb	r1, [r1, #0]
    26c4:	4809      	ldr	r0, [pc, #36]	; (26ec <main+0x34c>)
    26c6:	4c0a      	ldr	r4, [pc, #40]	; (26f0 <main+0x350>)
    26c8:	47a0      	blx	r4
    26ca:	e711      	b.n	24f0 <main+0x150>
				SensorRowUpdate(&sensor_array_2, selected_row, selected_output_mode_magnet, selected_output_mode_neural);	
    26cc:	4b04      	ldr	r3, [pc, #16]	; (26e0 <main+0x340>)
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	4a04      	ldr	r2, [pc, #16]	; (26e4 <main+0x344>)
    26d2:	7812      	ldrb	r2, [r2, #0]
    26d4:	4904      	ldr	r1, [pc, #16]	; (26e8 <main+0x348>)
    26d6:	7809      	ldrb	r1, [r1, #0]
    26d8:	4806      	ldr	r0, [pc, #24]	; (26f4 <main+0x354>)
    26da:	4c05      	ldr	r4, [pc, #20]	; (26f0 <main+0x350>)
    26dc:	47a0      	blx	r4
    26de:	e70c      	b.n	24fa <main+0x15a>
    26e0:	200009a0 	.word	0x200009a0
    26e4:	20001c15 	.word	0x20001c15
    26e8:	200009a1 	.word	0x200009a1
    26ec:	20001c2c 	.word	0x20001c2c
    26f0:	00001f09 	.word	0x00001f09
    26f4:	200009a4 	.word	0x200009a4

000026f8 <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    26f8:	4b0f      	ldr	r3, [pc, #60]	; (2738 <TC3_Handler+0x40>)
    26fa:	7a9b      	ldrb	r3, [r3, #10]
    26fc:	f013 0f01 	tst.w	r3, #1
    2700:	d110      	bne.n	2724 <TC3_Handler+0x2c>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    2702:	4b0d      	ldr	r3, [pc, #52]	; (2738 <TC3_Handler+0x40>)
    2704:	7a9b      	ldrb	r3, [r3, #10]
    2706:	f013 0f20 	tst.w	r3, #32
    270a:	d00a      	beq.n	2722 <TC3_Handler+0x2a>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    270c:	4a0a      	ldr	r2, [pc, #40]	; (2738 <TC3_Handler+0x40>)
    270e:	7a93      	ldrb	r3, [r2, #10]
    2710:	f043 0320 	orr.w	r3, r3, #32
    2714:	7293      	strb	r3, [r2, #10]
		new_data = true;
    2716:	2201      	movs	r2, #1
    2718:	4b08      	ldr	r3, [pc, #32]	; (273c <TC3_Handler+0x44>)
    271a:	701a      	strb	r2, [r3, #0]
		data_sent = false;
    271c:	2200      	movs	r2, #0
    271e:	4b08      	ldr	r3, [pc, #32]	; (2740 <TC3_Handler+0x48>)
    2720:	701a      	strb	r2, [r3, #0]
    2722:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    2724:	4a04      	ldr	r2, [pc, #16]	; (2738 <TC3_Handler+0x40>)
    2726:	7a93      	ldrb	r3, [r2, #10]
    2728:	f043 0301 	orr.w	r3, r3, #1
    272c:	7293      	strb	r3, [r2, #10]
		triggered = false;
    272e:	2200      	movs	r2, #0
    2730:	4b04      	ldr	r3, [pc, #16]	; (2744 <TC3_Handler+0x4c>)
    2732:	701a      	strb	r2, [r3, #0]
    2734:	4770      	bx	lr
    2736:	bf00      	nop
    2738:	4101c000 	.word	0x4101c000
    273c:	20001c14 	.word	0x20001c14
    2740:	20001c25 	.word	0x20001c25
    2744:	20001c28 	.word	0x20001c28

00002748 <initialize_calibration_parameters>:
#include <Melexis/Calibration_Parameters.h>


void initialize_calibration_parameters(struct function_Parameters *parameters_array, uint8_t array_select)
{
	switch(array_select){
    2748:	2901      	cmp	r1, #1
    274a:	d003      	beq.n	2754 <initialize_calibration_parameters+0xc>
    274c:	2902      	cmp	r1, #2
    274e:	f001 83a3 	beq.w	3e98 <initialize_calibration_parameters+0x1750>
    2752:	4770      	bx	lr
{
    2754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		case 1: ;
			// SensorArray 1 Parameters - Sensor Number 4 --------------------------------------------------------------------------------
			// SensorArray 1 Left Row - Top Sensor - X Direction 
			parameters_array->sensor_topLeft[0][0] = 1.25276464352330e-13;
    2758:	eddf 4ad9 	vldr	s9, [pc, #868]	; 2ac0 <initialize_calibration_parameters+0x378>
    275c:	edc0 4a00 	vstr	s9, [r0]
			parameters_array->sensor_topLeft[1][0] = 3.90599677451257e-14;
    2760:	ed9f 5ad8 	vldr	s10, [pc, #864]	; 2ac4 <initialize_calibration_parameters+0x37c>
    2764:	ed80 5a03 	vstr	s10, [r0, #12]
			parameters_array->sensor_topLeft[2][0] = 1.75715117218414e-13;
    2768:	eddf 5ad7 	vldr	s11, [pc, #860]	; 2ac8 <initialize_calibration_parameters+0x380>
    276c:	edc0 5a06 	vstr	s11, [r0, #24]
			parameters_array->sensor_topLeft[3][0] = -6.19789719357561e-09;
    2770:	ed9f 6ad6 	vldr	s12, [pc, #856]	; 2acc <initialize_calibration_parameters+0x384>
    2774:	ed80 6a09 	vstr	s12, [r0, #36]	; 0x24
			parameters_array->sensor_topLeft[4][0] = 4.67971922447968e-13;
    2778:	eddf 6ad5 	vldr	s13, [pc, #852]	; 2ad0 <initialize_calibration_parameters+0x388>
    277c:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
			parameters_array->sensor_topLeft[5][0] = -3.41594654231982e-13;
    2780:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 2ad4 <initialize_calibration_parameters+0x38c>
    2784:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
			parameters_array->sensor_topLeft[6][0] = -4.90684153867589e-09;
    2788:	eddf 7ad3 	vldr	s15, [pc, #844]	; 2ad8 <initialize_calibration_parameters+0x390>
    278c:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
			parameters_array->sensor_topLeft[7][0] = -1.22482665990801e-13;
    2790:	f8df b4e8 	ldr.w	fp, [pc, #1256]	; 2c7c <initialize_calibration_parameters+0x534>
    2794:	f8c0 b054 	str.w	fp, [r0, #84]	; 0x54
			parameters_array->sensor_topLeft[8][0] = -1.51378486695813e-08;
    2798:	f8df a4e4 	ldr.w	sl, [pc, #1252]	; 2c80 <initialize_calibration_parameters+0x538>
    279c:	f8c0 a060 	str.w	sl, [r0, #96]	; 0x60
			parameters_array->sensor_topLeft[9][0] = -0.000479270826019068;
    27a0:	f8df 94e0 	ldr.w	r9, [pc, #1248]	; 2c84 <initialize_calibration_parameters+0x53c>
    27a4:	f8c0 906c 	str.w	r9, [r0, #108]	; 0x6c
			parameters_array->sensor_topLeft[10][0] = -6.97649646602250e-14;
    27a8:	f8df 84dc 	ldr.w	r8, [pc, #1244]	; 2c88 <initialize_calibration_parameters+0x540>
    27ac:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			parameters_array->sensor_topLeft[11][0] = -4.03553595657184e-13;
    27b0:	f8df c4d8 	ldr.w	ip, [pc, #1240]	; 2c8c <initialize_calibration_parameters+0x544>
    27b4:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
			parameters_array->sensor_topLeft[12][0] = -1.46030586989790e-08;
    27b8:	f8df e4d4 	ldr.w	lr, [pc, #1236]	; 2c90 <initialize_calibration_parameters+0x548>
    27bc:	f8c0 e090 	str.w	lr, [r0, #144]	; 0x90
			parameters_array->sensor_topLeft[13][0] = -2.92753443970443e-13;
    27c0:	4fc6      	ldr	r7, [pc, #792]	; (2adc <initialize_calibration_parameters+0x394>)
    27c2:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
			parameters_array->sensor_topLeft[14][0] = -1.09307012051624e-08;
    27c6:	4ec6      	ldr	r6, [pc, #792]	; (2ae0 <initialize_calibration_parameters+0x398>)
    27c8:	f8c0 60a8 	str.w	r6, [r0, #168]	; 0xa8
			parameters_array->sensor_topLeft[15][0] = -9.17187720498957e-05;
    27cc:	4dc5      	ldr	r5, [pc, #788]	; (2ae4 <initialize_calibration_parameters+0x39c>)
    27ce:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
			parameters_array->sensor_topLeft[16][0] = 8.33105284283181e-14;
    27d2:	4cc5      	ldr	r4, [pc, #788]	; (2ae8 <initialize_calibration_parameters+0x3a0>)
    27d4:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
			parameters_array->sensor_topLeft[17][0] = 3.11489406258029e-09;
    27d8:	49c4      	ldr	r1, [pc, #784]	; (2aec <initialize_calibration_parameters+0x3a4>)
    27da:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
			parameters_array->sensor_topLeft[18][0] = 0.000103086901986412;
    27de:	4ac4      	ldr	r2, [pc, #784]	; (2af0 <initialize_calibration_parameters+0x3a8>)
    27e0:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
			parameters_array->sensor_topLeft[19][0] = 0.848337455230125;
    27e4:	4bc3      	ldr	r3, [pc, #780]	; (2af4 <initialize_calibration_parameters+0x3ac>)
    27e6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
			
			// SensorArray 1 Left Row - Middle Sensor - X Direction 
			parameters_array->sensor_middleLeft[0][0] = -2.02041591394221e-13;
    27ea:	ed9f 4ac3 	vldr	s8, [pc, #780]	; 2af8 <initialize_calibration_parameters+0x3b0>
    27ee:	ed80 4a3c 	vstr	s8, [r0, #240]	; 0xf0
			parameters_array->sensor_middleLeft[1][0] = 2.30103679975263e-14;
    27f2:	ed9f 4ac2 	vldr	s8, [pc, #776]	; 2afc <initialize_calibration_parameters+0x3b4>
    27f6:	ed80 4a3f 	vstr	s8, [r0, #252]	; 0xfc
			parameters_array->sensor_middleLeft[2][0] = -2.23048253714814e-13;
    27fa:	ed9f 4ac1 	vldr	s8, [pc, #772]	; 2b00 <initialize_calibration_parameters+0x3b8>
    27fe:	ed80 4a42 	vstr	s8, [r0, #264]	; 0x108
			parameters_array->sensor_middleLeft[3][0] = -3.71090244452286e-09;
    2802:	ed9f 4ac0 	vldr	s8, [pc, #768]	; 2b04 <initialize_calibration_parameters+0x3bc>
    2806:	ed80 4a45 	vstr	s8, [r0, #276]	; 0x114
			parameters_array->sensor_middleLeft[4][0] = 5.20762735285505e-13;
    280a:	ed9f 4abf 	vldr	s8, [pc, #764]	; 2b08 <initialize_calibration_parameters+0x3c0>
    280e:	ed80 4a48 	vstr	s8, [r0, #288]	; 0x120
			parameters_array->sensor_middleLeft[5][0] = -8.53101864297645e-14	;
    2812:	ed9f 4abe 	vldr	s8, [pc, #760]	; 2b0c <initialize_calibration_parameters+0x3c4>
    2816:	ed80 4a4b 	vstr	s8, [r0, #300]	; 0x12c
			parameters_array->sensor_middleLeft[6][0] = -9.89126137560679e-10;
    281a:	ed9f 4abd 	vldr	s8, [pc, #756]	; 2b10 <initialize_calibration_parameters+0x3c8>
    281e:	ed80 4a4e 	vstr	s8, [r0, #312]	; 0x138
			parameters_array->sensor_middleLeft[7][0] = -1.64366166904235e-13;
    2822:	ed9f 4abc 	vldr	s8, [pc, #752]	; 2b14 <initialize_calibration_parameters+0x3cc>
    2826:	ed80 4a51 	vstr	s8, [r0, #324]	; 0x144
			parameters_array->sensor_middleLeft[8][0] = -1.73872806804545e-08;
    282a:	ed9f 4abb 	vldr	s8, [pc, #748]	; 2b18 <initialize_calibration_parameters+0x3d0>
    282e:	ed80 4a54 	vstr	s8, [r0, #336]	; 0x150
			parameters_array->sensor_middleLeft[9][0] = -0.000509813398624398;
    2832:	ed9f 4aba 	vldr	s8, [pc, #744]	; 2b1c <initialize_calibration_parameters+0x3d4>
    2836:	ed80 4a57 	vstr	s8, [r0, #348]	; 0x15c
			parameters_array->sensor_middleLeft[10][0] = -3.45899440928606e-14;
    283a:	ed9f 4ab9 	vldr	s8, [pc, #740]	; 2b20 <initialize_calibration_parameters+0x3d8>
    283e:	ed80 4a5a 	vstr	s8, [r0, #360]	; 0x168
			parameters_array->sensor_middleLeft[11][0] = 1.90950394241020e-13;
    2842:	ed9f 4ab8 	vldr	s8, [pc, #736]	; 2b24 <initialize_calibration_parameters+0x3dc>
    2846:	ed80 4a5d 	vstr	s8, [r0, #372]	; 0x174
			parameters_array->sensor_middleLeft[12][0] = 1.27645558311751e-09;
    284a:	ed9f 4ab7 	vldr	s8, [pc, #732]	; 2b28 <initialize_calibration_parameters+0x3e0>
    284e:	ed80 4a60 	vstr	s8, [r0, #384]	; 0x180
			parameters_array->sensor_middleLeft[13][0] = -9.24884883383531e-14;
    2852:	ed9f 4ab6 	vldr	s8, [pc, #728]	; 2b2c <initialize_calibration_parameters+0x3e4>
    2856:	ed80 4a63 	vstr	s8, [r0, #396]	; 0x18c
			parameters_array->sensor_middleLeft[14][0] = -2.92959871573016e-09;
    285a:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 2b30 <initialize_calibration_parameters+0x3e8>
    285e:	ed80 4a66 	vstr	s8, [r0, #408]	; 0x198
			parameters_array->sensor_middleLeft[15][0] = -1.68070580501177e-05;
    2862:	ed9f 4ab4 	vldr	s8, [pc, #720]	; 2b34 <initialize_calibration_parameters+0x3ec>
    2866:	ed80 4a69 	vstr	s8, [r0, #420]	; 0x1a4
			parameters_array->sensor_middleLeft[16][0] = -8.68586957962114e-15;
    286a:	ed9f 4ab3 	vldr	s8, [pc, #716]	; 2b38 <initialize_calibration_parameters+0x3f0>
    286e:	ed80 4a6c 	vstr	s8, [r0, #432]	; 0x1b0
			parameters_array->sensor_middleLeft[17][0] = -1.48388032075104e-09;
    2872:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 2b3c <initialize_calibration_parameters+0x3f4>
    2876:	ed80 4a6f 	vstr	s8, [r0, #444]	; 0x1bc
			parameters_array->sensor_middleLeft[18][0] = -2.61448655750350e-05;
    287a:	ed9f 4ab1 	vldr	s8, [pc, #708]	; 2b40 <initialize_calibration_parameters+0x3f8>
    287e:	ed80 4a72 	vstr	s8, [r0, #456]	; 0x1c8
			parameters_array->sensor_middleLeft[19][0] = 0.163951345864922;
    2882:	ed9f 4ab0 	vldr	s8, [pc, #704]	; 2b44 <initialize_calibration_parameters+0x3fc>
    2886:	ed80 4a75 	vstr	s8, [r0, #468]	; 0x1d4

			// SensorArray 1 Left Row - Bottom Sensor - X Direction 
			parameters_array->sensor_bottomLeft[0][0] = 1.94106185292460e-13;
    288a:	ed9f 4aaf 	vldr	s8, [pc, #700]	; 2b48 <initialize_calibration_parameters+0x400>
    288e:	ed80 4a78 	vstr	s8, [r0, #480]	; 0x1e0
			parameters_array->sensor_bottomLeft[1][0] = 1.41932895373573e-13;
    2892:	ed9f 4aae 	vldr	s8, [pc, #696]	; 2b4c <initialize_calibration_parameters+0x404>
    2896:	ed80 4a7b 	vstr	s8, [r0, #492]	; 0x1ec
			parameters_array->sensor_bottomLeft[2][0] = -2.19643463581156e-13;
    289a:	ed9f 4aad 	vldr	s8, [pc, #692]	; 2b50 <initialize_calibration_parameters+0x408>
    289e:	ed80 4a7e 	vstr	s8, [r0, #504]	; 0x1f8
			parameters_array->sensor_bottomLeft[3][0] = 9.10235993106918e-10;
    28a2:	ed9f 4aac 	vldr	s8, [pc, #688]	; 2b54 <initialize_calibration_parameters+0x40c>
    28a6:	ed80 4a81 	vstr	s8, [r0, #516]	; 0x204
			parameters_array->sensor_bottomLeft[4][0] = 5.18940076663233e-13;
    28aa:	ed9f 4aab 	vldr	s8, [pc, #684]	; 2b58 <initialize_calibration_parameters+0x410>
    28ae:	ed80 4a84 	vstr	s8, [r0, #528]	; 0x210
			parameters_array->sensor_bottomLeft[5][0] = -4.42786669597697e-13;
    28b2:	ed9f 4aaa 	vldr	s8, [pc, #680]	; 2b5c <initialize_calibration_parameters+0x414>
    28b6:	ed80 4a87 	vstr	s8, [r0, #540]	; 0x21c
			parameters_array->sensor_bottomLeft[6][0] = -8.18777954037397e-09;
    28ba:	ed9f 4aa9 	vldr	s8, [pc, #676]	; 2b60 <initialize_calibration_parameters+0x418>
    28be:	ed80 4a8a 	vstr	s8, [r0, #552]	; 0x228
			parameters_array->sensor_bottomLeft[7][0] = -1.04908059217805e-13;
    28c2:	ed9f 4aa8 	vldr	s8, [pc, #672]	; 2b64 <initialize_calibration_parameters+0x41c>
    28c6:	ed80 4a8d 	vstr	s8, [r0, #564]	; 0x234
			parameters_array->sensor_bottomLeft[8][0] = -1.36854662000252e-08;
    28ca:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 2b68 <initialize_calibration_parameters+0x420>
    28ce:	ed80 4a90 	vstr	s8, [r0, #576]	; 0x240
			parameters_array->sensor_bottomLeft[9][0] = -0.000467782919124426;
    28d2:	ed9f 4aa6 	vldr	s8, [pc, #664]	; 2b6c <initialize_calibration_parameters+0x424>
    28d6:	ed80 4a93 	vstr	s8, [r0, #588]	; 0x24c
			parameters_array->sensor_bottomLeft[10][0] = 2.22441335752011e-14;
    28da:	ed9f 4aa5 	vldr	s8, [pc, #660]	; 2b70 <initialize_calibration_parameters+0x428>
    28de:	ed80 4a96 	vstr	s8, [r0, #600]	; 0x258
			parameters_array->sensor_bottomLeft[11][0] = 1.88757246135066e-13;
    28e2:	ed9f 4aa4 	vldr	s8, [pc, #656]	; 2b74 <initialize_calibration_parameters+0x42c>
    28e6:	ed80 4a99 	vstr	s8, [r0, #612]	; 0x264
			parameters_array->sensor_bottomLeft[12][0] = 6.84334606428272e-09;
    28ea:	ed9f 4aa3 	vldr	s8, [pc, #652]	; 2b78 <initialize_calibration_parameters+0x430>
    28ee:	ed80 4a9c 	vstr	s8, [r0, #624]	; 0x270
			parameters_array->sensor_bottomLeft[13][0] = 2.83214499447420e-13;
    28f2:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 2b7c <initialize_calibration_parameters+0x434>
    28f6:	ed80 4a9f 	vstr	s8, [r0, #636]	; 0x27c
			parameters_array->sensor_bottomLeft[14][0] = 1.08243302343709e-08;
    28fa:	ed9f 4aa1 	vldr	s8, [pc, #644]	; 2b80 <initialize_calibration_parameters+0x438>
    28fe:	ed80 4aa2 	vstr	s8, [r0, #648]	; 0x288
			parameters_array->sensor_bottomLeft[15][0] = 0.000101897642072940;
    2902:	ed9f 4aa0 	vldr	s8, [pc, #640]	; 2b84 <initialize_calibration_parameters+0x43c>
    2906:	ed80 4aa5 	vstr	s8, [r0, #660]	; 0x294
			parameters_array->sensor_bottomLeft[16][0] = -2.04000410555316e-13;
    290a:	ed9f 4a9f 	vldr	s8, [pc, #636]	; 2b88 <initialize_calibration_parameters+0x440>
    290e:	ed80 4aa8 	vstr	s8, [r0, #672]	; 0x2a0
			parameters_array->sensor_bottomLeft[17][0] = -1.10885952445752e-08;
    2912:	ed9f 4a9e 	vldr	s8, [pc, #632]	; 2b8c <initialize_calibration_parameters+0x444>
    2916:	ed80 4aab 	vstr	s8, [r0, #684]	; 0x2ac
			parameters_array->sensor_bottomLeft[18][0] = -0.000235938951237971;
    291a:	ed9f 4a9d 	vldr	s8, [pc, #628]	; 2b90 <initialize_calibration_parameters+0x448>
    291e:	ed80 4aae 	vstr	s8, [r0, #696]	; 0x2b8
			parameters_array->sensor_bottomLeft[19][0] = -1.48368297705417;
    2922:	ed9f 4a9c 	vldr	s8, [pc, #624]	; 2b94 <initialize_calibration_parameters+0x44c>
    2926:	ed80 4ab1 	vstr	s8, [r0, #708]	; 0x2c4

			// SensorArray 1 Left Row - Top Sensor - Y Direction 
			parameters_array->sensor_topLeft[0][1] = 1.25276464352330e-13;
    292a:	edc0 4a01 	vstr	s9, [r0, #4]
			parameters_array->sensor_topLeft[1][1] = 3.90599677451257e-14;
    292e:	ed80 5a04 	vstr	s10, [r0, #16]
			parameters_array->sensor_topLeft[2][1] = 1.75715117218414e-13;
    2932:	edc0 5a07 	vstr	s11, [r0, #28]
			parameters_array->sensor_topLeft[3][1] = -6.19789719357561e-09;
    2936:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
			parameters_array->sensor_topLeft[4][1] = 4.67971922447968e-13;
    293a:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
			parameters_array->sensor_topLeft[5][1] = -3.41594654231982e-13;
    293e:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
			parameters_array->sensor_topLeft[6][1] = -4.90684153867589e-09;
    2942:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
			parameters_array->sensor_topLeft[7][1] = -1.22482665990801e-13;
    2946:	f8c0 b058 	str.w	fp, [r0, #88]	; 0x58
			parameters_array->sensor_topLeft[8][1] = -1.51378486695813e-08;
    294a:	f8c0 a064 	str.w	sl, [r0, #100]	; 0x64
			parameters_array->sensor_topLeft[9][1] = -0.000479270826019068;
    294e:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
			parameters_array->sensor_topLeft[10][1] = -6.97649646602250e-14;
    2952:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			parameters_array->sensor_topLeft[11][1] = -4.03553595657184e-13;
    2956:	f8c0 c088 	str.w	ip, [r0, #136]	; 0x88
			parameters_array->sensor_topLeft[12][1] = -1.46030586989790e-08;
    295a:	f8c0 e094 	str.w	lr, [r0, #148]	; 0x94
			parameters_array->sensor_topLeft[13][1] = -2.92753443970443e-13;
    295e:	f8c0 70a0 	str.w	r7, [r0, #160]	; 0xa0
			parameters_array->sensor_topLeft[14][1] = -1.09307012051624e-08;
    2962:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
			parameters_array->sensor_topLeft[15][1] = -9.17187720498957e-05;
    2966:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
			parameters_array->sensor_topLeft[16][1] = 8.33105284283181e-14;
    296a:	f8c0 40c4 	str.w	r4, [r0, #196]	; 0xc4
			parameters_array->sensor_topLeft[17][1] = 3.11489406258029e-09;
    296e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
			parameters_array->sensor_topLeft[18][1] = 0.000103086901986412;
    2972:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
			parameters_array->sensor_topLeft[19][1] = 0.848337455230125;
    2976:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
			
			// SensorArray 1 Left Row - Middle Sensor - Y Direction 
			parameters_array->sensor_middleLeft[0][1] = 2.53730078109932e-13;
    297a:	4b87      	ldr	r3, [pc, #540]	; (2b98 <initialize_calibration_parameters+0x450>)
    297c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
			parameters_array->sensor_middleLeft[1][1] = 6.60722884883581e-13;
    2980:	4b86      	ldr	r3, [pc, #536]	; (2b9c <initialize_calibration_parameters+0x454>)
    2982:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
			parameters_array->sensor_middleLeft[2][1] = -5.04857107094855e-13;
    2986:	4b86      	ldr	r3, [pc, #536]	; (2ba0 <initialize_calibration_parameters+0x458>)
    2988:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
			parameters_array->sensor_middleLeft[3][1] = -4.89642323764466e-09;
    298c:	4b85      	ldr	r3, [pc, #532]	; (2ba4 <initialize_calibration_parameters+0x45c>)
    298e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
			parameters_array->sensor_middleLeft[4][1] = 1.65812350514254e-13;
    2992:	4b85      	ldr	r3, [pc, #532]	; (2ba8 <initialize_calibration_parameters+0x460>)
    2994:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			parameters_array->sensor_middleLeft[5][1] = 6.62699007040621e-13;
    2998:	4b84      	ldr	r3, [pc, #528]	; (2bac <initialize_calibration_parameters+0x464>)
    299a:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			parameters_array->sensor_middleLeft[6][1] = 8.63037457077357e-09;
    299e:	4b84      	ldr	r3, [pc, #528]	; (2bb0 <initialize_calibration_parameters+0x468>)
    29a0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
			parameters_array->sensor_middleLeft[7][1] = -5.56658347236268e-14;
    29a4:	4b83      	ldr	r3, [pc, #524]	; (2bb4 <initialize_calibration_parameters+0x46c>)
    29a6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
			parameters_array->sensor_middleLeft[8][1] = -2.57858180526061e-10;
    29aa:	4b83      	ldr	r3, [pc, #524]	; (2bb8 <initialize_calibration_parameters+0x470>)
    29ac:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
			parameters_array->sensor_middleLeft[9][1] = 4.18608962845497e-06;
    29b0:	4b82      	ldr	r3, [pc, #520]	; (2bbc <initialize_calibration_parameters+0x474>)
    29b2:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
			parameters_array->sensor_middleLeft[10][1] = -1.81989254543360e-14;
    29b6:	4b82      	ldr	r3, [pc, #520]	; (2bc0 <initialize_calibration_parameters+0x478>)
    29b8:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
			parameters_array->sensor_middleLeft[11][1] = -1.36009830837230e-13;
    29bc:	4b81      	ldr	r3, [pc, #516]	; (2bc4 <initialize_calibration_parameters+0x47c>)
    29be:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
			parameters_array->sensor_middleLeft[12][1] = -1.01125127055913e-12;
    29c2:	4b81      	ldr	r3, [pc, #516]	; (2bc8 <initialize_calibration_parameters+0x480>)
    29c4:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
			parameters_array->sensor_middleLeft[13][1] = -7.61628001430015e-14;
    29c8:	4b80      	ldr	r3, [pc, #512]	; (2bcc <initialize_calibration_parameters+0x484>)
    29ca:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
			parameters_array->sensor_middleLeft[14][1] = -1.88399075499996e-08;
    29ce:	4b80      	ldr	r3, [pc, #512]	; (2bd0 <initialize_calibration_parameters+0x488>)
    29d0:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			parameters_array->sensor_middleLeft[15][1] = -0.000520197416675857;
    29d4:	4b7f      	ldr	r3, [pc, #508]	; (2bd4 <initialize_calibration_parameters+0x48c>)
    29d6:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
			parameters_array->sensor_middleLeft[16][1] = -3.72174233979599e-13;
    29da:	4b7f      	ldr	r3, [pc, #508]	; (2bd8 <initialize_calibration_parameters+0x490>)
    29dc:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
			parameters_array->sensor_middleLeft[17][1] = -1.55167181160463e-08;
    29e0:	4b7e      	ldr	r3, [pc, #504]	; (2bdc <initialize_calibration_parameters+0x494>)
    29e2:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
			parameters_array->sensor_middleLeft[18][1] = -0.000229822985205763;
    29e6:	4b7e      	ldr	r3, [pc, #504]	; (2be0 <initialize_calibration_parameters+0x498>)
    29e8:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
			parameters_array->sensor_middleLeft[19][1] = -1.09021045027509;
    29ec:	4b7d      	ldr	r3, [pc, #500]	; (2be4 <initialize_calibration_parameters+0x49c>)
    29ee:	f8c0 31d8 	str.w	r3, [r0, #472]	; 0x1d8
			
			// SensorArray 1 Left Row - Bottom Sensor - Y Direction 
			parameters_array->sensor_bottomLeft[0][1] = 4.31840328224511e-13;
    29f2:	4b7d      	ldr	r3, [pc, #500]	; (2be8 <initialize_calibration_parameters+0x4a0>)
    29f4:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
			parameters_array->sensor_bottomLeft[1][1] = 4.93858086496804e-13;
    29f8:	4b7c      	ldr	r3, [pc, #496]	; (2bec <initialize_calibration_parameters+0x4a4>)
    29fa:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
			parameters_array->sensor_bottomLeft[2][1] = 1.91400540474537e-14;
    29fe:	4b7c      	ldr	r3, [pc, #496]	; (2bf0 <initialize_calibration_parameters+0x4a8>)
    2a00:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
			parameters_array->sensor_bottomLeft[3][1] = 1.58830633213099e-09;
    2a04:	4b7b      	ldr	r3, [pc, #492]	; (2bf4 <initialize_calibration_parameters+0x4ac>)
    2a06:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
			parameters_array->sensor_bottomLeft[4][1] = 1.50711030618265e-14;
    2a0a:	4b7b      	ldr	r3, [pc, #492]	; (2bf8 <initialize_calibration_parameters+0x4b0>)
    2a0c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
			parameters_array->sensor_bottomLeft[5][1] = 6.14284511402242e-13;
    2a10:	4b7a      	ldr	r3, [pc, #488]	; (2bfc <initialize_calibration_parameters+0x4b4>)
    2a12:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
			parameters_array->sensor_bottomLeft[6][1] = 9.13532223482444e-09;
    2a16:	4b7a      	ldr	r3, [pc, #488]	; (2c00 <initialize_calibration_parameters+0x4b8>)
    2a18:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
			parameters_array->sensor_bottomLeft[7][1] = 1.51087871875397e-14;
    2a1c:	4b79      	ldr	r3, [pc, #484]	; (2c04 <initialize_calibration_parameters+0x4bc>)
    2a1e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
			parameters_array->sensor_bottomLeft[8][1] = -5.71827801205314e-10;
    2a22:	4b79      	ldr	r3, [pc, #484]	; (2c08 <initialize_calibration_parameters+0x4c0>)
    2a24:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
			parameters_array->sensor_bottomLeft[9][1] = -2.45966853496243e-05;
    2a28:	4b78      	ldr	r3, [pc, #480]	; (2c0c <initialize_calibration_parameters+0x4c4>)
    2a2a:	f8c0 3250 	str.w	r3, [r0, #592]	; 0x250
			parameters_array->sensor_bottomLeft[10][1] = -1.66212803038651e-13;
    2a2e:	4b78      	ldr	r3, [pc, #480]	; (2c10 <initialize_calibration_parameters+0x4c8>)
    2a30:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
			parameters_array->sensor_bottomLeft[11][1] = 8.79307929989398e-15;
    2a34:	4b77      	ldr	r3, [pc, #476]	; (2c14 <initialize_calibration_parameters+0x4cc>)
    2a36:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
			parameters_array->sensor_bottomLeft[12][1] = 3.40664661050576e-09;
    2a3a:	4b77      	ldr	r3, [pc, #476]	; (2c18 <initialize_calibration_parameters+0x4d0>)
    2a3c:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
			parameters_array->sensor_bottomLeft[13][1] = -2.38096980784775e-13;
    2a40:	4b76      	ldr	r3, [pc, #472]	; (2c1c <initialize_calibration_parameters+0x4d4>)
    2a42:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
			parameters_array->sensor_bottomLeft[14][1] = -2.48489558078509e-08;
    2a46:	4b76      	ldr	r3, [pc, #472]	; (2c20 <initialize_calibration_parameters+0x4d8>)
    2a48:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
			parameters_array->sensor_bottomLeft[15][1] = -0.000582439296353274;
    2a4c:	4b75      	ldr	r3, [pc, #468]	; (2c24 <initialize_calibration_parameters+0x4dc>)
    2a4e:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
			parameters_array->sensor_bottomLeft[16][1] = -1.21847336403809e-13;
    2a52:	4b75      	ldr	r3, [pc, #468]	; (2c28 <initialize_calibration_parameters+0x4e0>)
    2a54:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
			parameters_array->sensor_bottomLeft[17][1] = -4.37111919003833e-09;
    2a58:	4b74      	ldr	r3, [pc, #464]	; (2c2c <initialize_calibration_parameters+0x4e4>)
    2a5a:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
			parameters_array->sensor_bottomLeft[18][1] = -6.28535384708850e-05;
    2a5e:	4b74      	ldr	r3, [pc, #464]	; (2c30 <initialize_calibration_parameters+0x4e8>)
    2a60:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
			parameters_array->sensor_bottomLeft[19][1] = -0.157464689500466;
    2a64:	4b73      	ldr	r3, [pc, #460]	; (2c34 <initialize_calibration_parameters+0x4ec>)
    2a66:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8

			// SensorArray 1 Left Row - Top Sensor - Z Direction
			parameters_array->sensor_topLeft[0][2] = 1.08952279965549e-12;
    2a6a:	4b73      	ldr	r3, [pc, #460]	; (2c38 <initialize_calibration_parameters+0x4f0>)
    2a6c:	6083      	str	r3, [r0, #8]
			parameters_array->sensor_topLeft[1][2] = -9.78382452742249e-14;
    2a6e:	4b73      	ldr	r3, [pc, #460]	; (2c3c <initialize_calibration_parameters+0x4f4>)
    2a70:	6143      	str	r3, [r0, #20]
			parameters_array->sensor_topLeft[2][2] = 5.01999455381403e-12;
    2a72:	4b73      	ldr	r3, [pc, #460]	; (2c40 <initialize_calibration_parameters+0x4f8>)
    2a74:	6203      	str	r3, [r0, #32]
			parameters_array->sensor_topLeft[3][2] = 1.92247859623603e-07;
    2a76:	4b73      	ldr	r3, [pc, #460]	; (2c44 <initialize_calibration_parameters+0x4fc>)
    2a78:	62c3      	str	r3, [r0, #44]	; 0x2c
			parameters_array->sensor_topLeft[4][2] = -7.17173154321311e-13;
    2a7a:	4b73      	ldr	r3, [pc, #460]	; (2c48 <initialize_calibration_parameters+0x500>)
    2a7c:	6383      	str	r3, [r0, #56]	; 0x38
			parameters_array->sensor_topLeft[5][2] = 9.73551099592821e-13;
    2a7e:	4b73      	ldr	r3, [pc, #460]	; (2c4c <initialize_calibration_parameters+0x504>)
    2a80:	6443      	str	r3, [r0, #68]	; 0x44
			parameters_array->sensor_topLeft[6][2] = 1.74089622010683e-08;
    2a82:	4b73      	ldr	r3, [pc, #460]	; (2c50 <initialize_calibration_parameters+0x508>)
    2a84:	6503      	str	r3, [r0, #80]	; 0x50
			parameters_array->sensor_topLeft[7][2] = -6.74568221354830e-15;
    2a86:	4b73      	ldr	r3, [pc, #460]	; (2c54 <initialize_calibration_parameters+0x50c>)
    2a88:	65c3      	str	r3, [r0, #92]	; 0x5c
			parameters_array->sensor_topLeft[8][2] = -4.61452737815286e-09;
    2a8a:	4b73      	ldr	r3, [pc, #460]	; (2c58 <initialize_calibration_parameters+0x510>)
    2a8c:	6683      	str	r3, [r0, #104]	; 0x68
			parameters_array->sensor_topLeft[9][2] = -0.000149961193505933;
    2a8e:	4b73      	ldr	r3, [pc, #460]	; (2c5c <initialize_calibration_parameters+0x514>)
    2a90:	6743      	str	r3, [r0, #116]	; 0x74
			parameters_array->sensor_topLeft[10][2] = -4.31801251034167e-13;
    2a92:	4b73      	ldr	r3, [pc, #460]	; (2c60 <initialize_calibration_parameters+0x518>)
    2a94:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			parameters_array->sensor_topLeft[11][2] = 4.67487808568481e-12;
    2a98:	4b72      	ldr	r3, [pc, #456]	; (2c64 <initialize_calibration_parameters+0x51c>)
    2a9a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
			parameters_array->sensor_topLeft[12][2] = 1.86154985434309e-07;
    2a9e:	4b72      	ldr	r3, [pc, #456]	; (2c68 <initialize_calibration_parameters+0x520>)
    2aa0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
			parameters_array->sensor_topLeft[13][2] = 2.17353898683215e-12;
    2aa4:	4b71      	ldr	r3, [pc, #452]	; (2c6c <initialize_calibration_parameters+0x524>)
    2aa6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
			parameters_array->sensor_topLeft[14][2] = 8.04034072660032e-08;
    2aaa:	4b71      	ldr	r3, [pc, #452]	; (2c70 <initialize_calibration_parameters+0x528>)
    2aac:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
			parameters_array->sensor_topLeft[15][2] = 0.000724772323886507;
    2ab0:	4b70      	ldr	r3, [pc, #448]	; (2c74 <initialize_calibration_parameters+0x52c>)
    2ab2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
			parameters_array->sensor_topLeft[16][2] = 2.04045460234050e-12;
    2ab6:	4b70      	ldr	r3, [pc, #448]	; (2c78 <initialize_calibration_parameters+0x530>)
    2ab8:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
    2abc:	e0ea      	b.n	2c94 <initialize_calibration_parameters+0x54c>
    2abe:	bf00      	nop
    2ac0:	2a0d0c7c 	.word	0x2a0d0c7c
    2ac4:	292fe914 	.word	0x292fe914
    2ac8:	2a45d66f 	.word	0x2a45d66f
    2acc:	b1d4f548 	.word	0xb1d4f548
    2ad0:	2b03b8ee 	.word	0x2b03b8ee
    2ad4:	aac04cfa 	.word	0xaac04cfa
    2ad8:	b1a89909 	.word	0xb1a89909
    2adc:	aaa4ce38 	.word	0xaaa4ce38
    2ae0:	b23bc9bb 	.word	0xb23bc9bb
    2ae4:	b8c05924 	.word	0xb8c05924
    2ae8:	29bb9940 	.word	0x29bb9940
    2aec:	31560dcc 	.word	0x31560dcc
    2af0:	38d8305c 	.word	0x38d8305c
    2af4:	3f592ca5 	.word	0x3f592ca5
    2af8:	aa637a86 	.word	0xaa637a86
    2afc:	28cf424c 	.word	0x28cf424c
    2b00:	aa7b2148 	.word	0xaa7b2148
    2b04:	b17f02e3 	.word	0xb17f02e3
    2b08:	2b1294e9 	.word	0x2b1294e9
    2b0c:	a9c019f9 	.word	0xa9c019f9
    2b10:	b087f1c8 	.word	0xb087f1c8
    2b14:	aa390f52 	.word	0xaa390f52
    2b18:	b2955b09 	.word	0xb2955b09
    2b1c:	ba05a4ff 	.word	0xba05a4ff
    2b20:	a91bc77e 	.word	0xa91bc77e
    2b24:	2a56fdb4 	.word	0x2a56fdb4
    2b28:	30af6f4a 	.word	0x30af6f4a
    2b2c:	a9d043fc 	.word	0xa9d043fc
    2b30:	b149520c 	.word	0xb149520c
    2b34:	b78cfce2 	.word	0xb78cfce2
    2b38:	a81c7881 	.word	0xa81c7881
    2b3c:	b0cbf166 	.word	0xb0cbf166
    2b40:	b7db51ac 	.word	0xb7db51ac
    2b44:	3e27e2dd 	.word	0x3e27e2dd
    2b48:	2a5a8b4c 	.word	0x2a5a8b4c
    2b4c:	2a1fcd5f 	.word	0x2a1fcd5f
    2b50:	aa774beb 	.word	0xaa774beb
    2b54:	307a342a 	.word	0x307a342a
    2b58:	2b121193 	.word	0x2b121193
    2b5c:	aaf94449 	.word	0xaaf94449
    2b60:	b20caa3c 	.word	0xb20caa3c
    2b64:	a9ec3b61 	.word	0xa9ec3b61
    2b68:	b26b1d51 	.word	0xb26b1d51
    2b6c:	b9f540c3 	.word	0xb9f540c3
    2b70:	28c85b7b 	.word	0x28c85b7b
    2b74:	2a548592 	.word	0x2a548592
    2b78:	31eb22b5 	.word	0x31eb22b5
    2b7c:	2a9f6f83 	.word	0x2a9f6f83
    2b80:	3239f5e8 	.word	0x3239f5e8
    2b84:	38d5b1e1 	.word	0x38d5b1e1
    2b88:	aa65af1d 	.word	0xaa65af1d
    2b8c:	b23e8028 	.word	0xb23e8028
    2b90:	b9776661 	.word	0xb9776661
    2b94:	bfbde953 	.word	0xbfbde953
    2b98:	2a8ed65c 	.word	0x2a8ed65c
    2b9c:	2b39fa1a 	.word	0x2b39fa1a
    2ba0:	ab0e1aca 	.word	0xab0e1aca
    2ba4:	b1a83d65 	.word	0xb1a83d65
    2ba8:	2a3ab028 	.word	0x2a3ab028
    2bac:	2b3a887f 	.word	0x2b3a887f
    2bb0:	321444ca 	.word	0x321444ca
    2bb4:	a97ab257 	.word	0xa97ab257
    2bb8:	af8dc250 	.word	0xaf8dc250
    2bbc:	368c763c 	.word	0x368c763c
    2bc0:	a8a3ebdd 	.word	0xa8a3ebdd
    2bc4:	aa19222a 	.word	0xaa19222a
    2bc8:	ab8e522b 	.word	0xab8e522b
    2bcc:	a9ab80dd 	.word	0xa9ab80dd
    2bd0:	b2a1d565 	.word	0xb2a1d565
    2bd4:	ba085ddc 	.word	0xba085ddc
    2bd8:	aad183f6 	.word	0xaad183f6
    2bdc:	b28549a0 	.word	0xb28549a0
    2be0:	b970fca3 	.word	0xb970fca3
    2be4:	bf8b8c04 	.word	0xbf8b8c04
    2be8:	2af31ac0 	.word	0x2af31ac0
    2bec:	2b0b023a 	.word	0x2b0b023a
    2bf0:	28ac65f6 	.word	0x28ac65f6
    2bf4:	30da4b90 	.word	0x30da4b90
    2bf8:	2887bf99 	.word	0x2887bf99
    2bfc:	2b2ce7dd 	.word	0x2b2ce7dd
    2c00:	321cf192 	.word	0x321cf192
    2c04:	2888167e 	.word	0x2888167e
    2c08:	b01d2ece 	.word	0xb01d2ece
    2c0c:	b7ce54fb 	.word	0xb7ce54fb
    2c10:	aa3b2394 	.word	0xaa3b2394
    2c14:	281e66ec 	.word	0x281e66ec
    2c18:	316a1a5c 	.word	0x316a1a5c
    2c1c:	aa860964 	.word	0xaa860964
    2c20:	b2d5736f 	.word	0xb2d5736f
    2c24:	ba18aed7 	.word	0xba18aed7
    2c28:	aa09301b 	.word	0xaa09301b
    2c2c:	b19630c5 	.word	0xb19630c5
    2c30:	b883d03d 	.word	0xb883d03d
    2c34:	be213e6c 	.word	0xbe213e6c
    2c38:	2b995632 	.word	0x2b995632
    2c3c:	a9dc4fe9 	.word	0xa9dc4fe9
    2c40:	2cb0a017 	.word	0x2cb0a017
    2c44:	344e6cb0 	.word	0x344e6cb0
    2c48:	ab49ddc6 	.word	0xab49ddc6
    2c4c:	2b8903e0 	.word	0x2b8903e0
    2c50:	32958ab6 	.word	0x32958ab6
    2c54:	a7f309f0 	.word	0xa7f309f0
    2c58:	b19e8dd0 	.word	0xb19e8dd0
    2c5c:	b91d3ee7 	.word	0xb91d3ee7
    2c60:	aaf3151e 	.word	0xaaf3151e
    2c64:	2ca47b8f 	.word	0x2ca47b8f
    2c68:	3447e1e5 	.word	0x3447e1e5
    2c6c:	2c18f2ff 	.word	0x2c18f2ff
    2c70:	33acaa3e 	.word	0x33acaa3e
    2c74:	3a3dfea6 	.word	0x3a3dfea6
    2c78:	2c0f9590 	.word	0x2c0f9590
    2c7c:	aa09e73a 	.word	0xaa09e73a
    2c80:	b282087b 	.word	0xb282087b
    2c84:	b9fb46a4 	.word	0xb9fb46a4
    2c88:	a99d18c4 	.word	0xa99d18c4
    2c8c:	aae32e34 	.word	0xaae32e34
    2c90:	b27ae0ee 	.word	0xb27ae0ee
			parameters_array->sensor_topLeft[17][2] = 1.18143639269362e-07;
    2c94:	4bb6      	ldr	r3, [pc, #728]	; (2f70 <initialize_calibration_parameters+0x828>)
    2c96:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
			parameters_array->sensor_topLeft[18][2] = 0.00123673262706410;
    2c9a:	4bb6      	ldr	r3, [pc, #728]	; (2f74 <initialize_calibration_parameters+0x82c>)
    2c9c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
			parameters_array->sensor_topLeft[19][2] = 2.72006952506292;
    2ca0:	4bb5      	ldr	r3, [pc, #724]	; (2f78 <initialize_calibration_parameters+0x830>)
    2ca2:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
			
			// SensorArray 1 Left Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleLeft[0][2] = 2.47445827351136e-13;
    2ca6:	4bb5      	ldr	r3, [pc, #724]	; (2f7c <initialize_calibration_parameters+0x834>)
    2ca8:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
			parameters_array->sensor_middleLeft[1][2] = 1.86913367230467e-13;
    2cac:	4bb4      	ldr	r3, [pc, #720]	; (2f80 <initialize_calibration_parameters+0x838>)
    2cae:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
			parameters_array->sensor_middleLeft[2][2] = 5.69436765562210e-12;
    2cb2:	4bb4      	ldr	r3, [pc, #720]	; (2f84 <initialize_calibration_parameters+0x83c>)
    2cb4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
			parameters_array->sensor_middleLeft[3][2] = 2.08003168017841e-07;
    2cb8:	4bb3      	ldr	r3, [pc, #716]	; (2f88 <initialize_calibration_parameters+0x840>)
    2cba:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
			parameters_array->sensor_middleLeft[4][2] = 2.55639221209814e-13;
    2cbe:	4bb3      	ldr	r3, [pc, #716]	; (2f8c <initialize_calibration_parameters+0x844>)
    2cc0:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
			parameters_array->sensor_middleLeft[5][2] = -1.03805686237307e-12;
    2cc4:	4bb2      	ldr	r3, [pc, #712]	; (2f90 <initialize_calibration_parameters+0x848>)
    2cc6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
			parameters_array->sensor_middleLeft[6][2] = -1.91112083324539e-08;
    2cca:	4bb2      	ldr	r3, [pc, #712]	; (2f94 <initialize_calibration_parameters+0x84c>)
    2ccc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
			parameters_array->sensor_middleLeft[7][2] = -2.04033853852490e-13;
    2cd0:	4bb1      	ldr	r3, [pc, #708]	; (2f98 <initialize_calibration_parameters+0x850>)
    2cd2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
			parameters_array->sensor_middleLeft[8][2] = -1.26348392258338e-08;
    2cd6:	4bb1      	ldr	r3, [pc, #708]	; (2f9c <initialize_calibration_parameters+0x854>)
    2cd8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
			parameters_array->sensor_middleLeft[9][2] = -0.000241004591326337;
    2cdc:	4bb0      	ldr	r3, [pc, #704]	; (2fa0 <initialize_calibration_parameters+0x858>)
    2cde:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
			parameters_array->sensor_middleLeft[10][2] = -5.75616308706831e-13;
    2ce2:	4bb0      	ldr	r3, [pc, #704]	; (2fa4 <initialize_calibration_parameters+0x85c>)
    2ce4:	f8c0 3170 	str.w	r3, [r0, #368]	; 0x170
			parameters_array->sensor_middleLeft[11][2] = 3.02199957330102e-12;
    2ce8:	4baf      	ldr	r3, [pc, #700]	; (2fa8 <initialize_calibration_parameters+0x860>)
    2cea:	f8c0 317c 	str.w	r3, [r0, #380]	; 0x17c
			parameters_array->sensor_middleLeft[12][2] = 1.67944594781800e-07;
    2cee:	4baf      	ldr	r3, [pc, #700]	; (2fac <initialize_calibration_parameters+0x864>)
    2cf0:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
			parameters_array->sensor_middleLeft[13][2] = 1.21511709662635e-12;
    2cf4:	4bae      	ldr	r3, [pc, #696]	; (2fb0 <initialize_calibration_parameters+0x868>)
    2cf6:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
			parameters_array->sensor_middleLeft[14][2] = 4.83469945993984e-08;
    2cfa:	4bae      	ldr	r3, [pc, #696]	; (2fb4 <initialize_calibration_parameters+0x86c>)
    2cfc:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
			parameters_array->sensor_middleLeft[15][2] = 0.000416117443869195;
    2d00:	4bad      	ldr	r3, [pc, #692]	; (2fb8 <initialize_calibration_parameters+0x870>)
    2d02:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
			parameters_array->sensor_middleLeft[16][2] = 2.50563690053829e-12;
    2d06:	4bad      	ldr	r3, [pc, #692]	; (2fbc <initialize_calibration_parameters+0x874>)
    2d08:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
			parameters_array->sensor_middleLeft[17][2] = 1.42690090701721e-07;
    2d0c:	4bac      	ldr	r3, [pc, #688]	; (2fc0 <initialize_calibration_parameters+0x878>)
    2d0e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			parameters_array->sensor_middleLeft[18][2] = 0.00159050451603903;
    2d12:	4bac      	ldr	r3, [pc, #688]	; (2fc4 <initialize_calibration_parameters+0x87c>)
    2d14:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
			parameters_array->sensor_middleLeft[19][2 ]= 4.30838480287426;
    2d18:	4bab      	ldr	r3, [pc, #684]	; (2fc8 <initialize_calibration_parameters+0x880>)
    2d1a:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
			
			// SensorArray 1 Left Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomLeft[0][2] = -1.22026948576594e-13;
    2d1e:	4bab      	ldr	r3, [pc, #684]	; (2fcc <initialize_calibration_parameters+0x884>)
    2d20:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
			parameters_array->sensor_bottomLeft[1][2] = 6.92109211319232e-13;
    2d24:	4baa      	ldr	r3, [pc, #680]	; (2fd0 <initialize_calibration_parameters+0x888>)
    2d26:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
			parameters_array->sensor_bottomLeft[2][2] = 4.53709672132938e-12;
    2d2a:	4baa      	ldr	r3, [pc, #680]	; (2fd4 <initialize_calibration_parameters+0x88c>)
    2d2c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
			parameters_array->sensor_bottomLeft[3][2] = 1.75691221417336e-07;
    2d30:	4ba9      	ldr	r3, [pc, #676]	; (2fd8 <initialize_calibration_parameters+0x890>)
    2d32:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
			parameters_array->sensor_bottomLeft[4][2] = 2.05853888091656e-12;
    2d36:	4ba9      	ldr	r3, [pc, #676]	; (2fdc <initialize_calibration_parameters+0x894>)
    2d38:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
			parameters_array->sensor_bottomLeft[5][2] = -1.51154240473708e-12;
    2d3c:	4ba8      	ldr	r3, [pc, #672]	; (2fe0 <initialize_calibration_parameters+0x898>)
    2d3e:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
			parameters_array->sensor_bottomLeft[6][2] = -3.28581158050416e-08;
    2d42:	4ba8      	ldr	r3, [pc, #672]	; (2fe4 <initialize_calibration_parameters+0x89c>)
    2d44:	f8c0 3230 	str.w	r3, [r0, #560]	; 0x230
			parameters_array->sensor_bottomLeft[7][2] = 1.58162930148036e-12;
    2d48:	4ba7      	ldr	r3, [pc, #668]	; (2fe8 <initialize_calibration_parameters+0x8a0>)
    2d4a:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
			parameters_array->sensor_bottomLeft[8][2] = 5.84259585518410e-08;
    2d4e:	4ba7      	ldr	r3, [pc, #668]	; (2fec <initialize_calibration_parameters+0x8a4>)
    2d50:	f8c0 3248 	str.w	r3, [r0, #584]	; 0x248
			parameters_array->sensor_bottomLeft[9][2] = 0.000574021932326809;
    2d54:	4ba6      	ldr	r3, [pc, #664]	; (2ff0 <initialize_calibration_parameters+0x8a8>)
    2d56:	f8c0 3254 	str.w	r3, [r0, #596]	; 0x254
			parameters_array->sensor_bottomLeft[10][2] = -2.61503721435232e-13;
    2d5a:	4ba6      	ldr	r3, [pc, #664]	; (2ff4 <initialize_calibration_parameters+0x8ac>)
    2d5c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
			parameters_array->sensor_bottomLeft[11][2] = 2.45787836233694e-12;
    2d60:	4ba5      	ldr	r3, [pc, #660]	; (2ff8 <initialize_calibration_parameters+0x8b0>)
    2d62:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c
			parameters_array->sensor_bottomLeft[12][2] = 1.39154838139716e-07;
    2d66:	4ba5      	ldr	r3, [pc, #660]	; (2ffc <initialize_calibration_parameters+0x8b4>)
    2d68:	f8c0 3278 	str.w	r3, [r0, #632]	; 0x278
			parameters_array->sensor_bottomLeft[13][2] = 1.58237795450006e-12;
    2d6c:	4ba4      	ldr	r3, [pc, #656]	; (3000 <initialize_calibration_parameters+0x8b8>)
    2d6e:	f8c0 3284 	str.w	r3, [r0, #644]	; 0x284
			parameters_array->sensor_bottomLeft[14][2] = 6.67428749409587e-08;
    2d72:	4ba4      	ldr	r3, [pc, #656]	; (3004 <initialize_calibration_parameters+0x8bc>)
    2d74:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
			parameters_array->sensor_bottomLeft[15][2] = 0.000654406114895380;
    2d78:	4ba3      	ldr	r3, [pc, #652]	; (3008 <initialize_calibration_parameters+0x8c0>)
    2d7a:	f8c0 329c 	str.w	r3, [r0, #668]	; 0x29c
			parameters_array->sensor_bottomLeft[16][2] = 1.19491351710700e-12;
    2d7e:	4ba3      	ldr	r3, [pc, #652]	; (300c <initialize_calibration_parameters+0x8c4>)
    2d80:	f8c0 32a8 	str.w	r3, [r0, #680]	; 0x2a8
			parameters_array->sensor_bottomLeft[17][2] = 7.02920063584498e-08;
    2d84:	4ba2      	ldr	r3, [pc, #648]	; (3010 <initialize_calibration_parameters+0x8c8>)
    2d86:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
			parameters_array->sensor_bottomLeft[18][2] = 0.000404822844731237;
    2d8a:	4ba2      	ldr	r3, [pc, #648]	; (3014 <initialize_calibration_parameters+0x8cc>)
    2d8c:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
			parameters_array->sensor_bottomLeft[19][2] = -2.35368052541171;
    2d90:	4ba1      	ldr	r3, [pc, #644]	; (3018 <initialize_calibration_parameters+0x8d0>)
    2d92:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

			// SensorArray 1 Middle Row - Top Sensor - X Direction
			parameters_array->sensor_topMiddle[0][0] = 1.02854918946006e-12;
    2d96:	4ba1      	ldr	r3, [pc, #644]	; (301c <initialize_calibration_parameters+0x8d4>)
    2d98:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0
			parameters_array->sensor_topMiddle[1][0] = 1.52797666322582e-12;
    2d9c:	4ba0      	ldr	r3, [pc, #640]	; (3020 <initialize_calibration_parameters+0x8d8>)
    2d9e:	f8c0 32dc 	str.w	r3, [r0, #732]	; 0x2dc
			parameters_array->sensor_topMiddle[2][0] = 3.51492073863149e-13;
    2da2:	4ba0      	ldr	r3, [pc, #640]	; (3024 <initialize_calibration_parameters+0x8dc>)
    2da4:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
			parameters_array->sensor_topMiddle[3][0] = -8.45332694302957e-09;
    2da8:	4b9f      	ldr	r3, [pc, #636]	; (3028 <initialize_calibration_parameters+0x8e0>)
    2daa:	f8c0 32f4 	str.w	r3, [r0, #756]	; 0x2f4
			parameters_array->sensor_topMiddle[4][0] = 2.35427757394128e-141;
    2dae:	2300      	movs	r3, #0
    2db0:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
			parameters_array->sensor_topMiddle[5][0] = 4.37845090131627e-13;
    2db4:	4b9d      	ldr	r3, [pc, #628]	; (302c <initialize_calibration_parameters+0x8e4>)
    2db6:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
			parameters_array->sensor_topMiddle[6][0] = 9.59225611272234e-09;
    2dba:	4b9d      	ldr	r3, [pc, #628]	; (3030 <initialize_calibration_parameters+0x8e8>)
    2dbc:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
			parameters_array->sensor_topMiddle[7][0] = -5.47593276536740e-13;
    2dc0:	4b9c      	ldr	r3, [pc, #624]	; (3034 <initialize_calibration_parameters+0x8ec>)
    2dc2:	f8c0 3324 	str.w	r3, [r0, #804]	; 0x324
			parameters_array->sensor_topMiddle[8][0] = -3.11279885488603e-08;
    2dc6:	4b9c      	ldr	r3, [pc, #624]	; (3038 <initialize_calibration_parameters+0x8f0>)
    2dc8:	f8c0 3330 	str.w	r3, [r0, #816]	; 0x330
			parameters_array->sensor_topMiddle[9][0] = -0.000691504049290309;
    2dcc:	4b9b      	ldr	r3, [pc, #620]	; (303c <initialize_calibration_parameters+0x8f4>)
    2dce:	f8c0 333c 	str.w	r3, [r0, #828]	; 0x33c
			parameters_array->sensor_topMiddle[10][0] = 1.46845652135683e-12;
    2dd2:	4b9b      	ldr	r3, [pc, #620]	; (3040 <initialize_calibration_parameters+0x8f8>)
    2dd4:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
			parameters_array->sensor_topMiddle[11][0] = -1.04441929339939e-13;
    2dd8:	4b9a      	ldr	r3, [pc, #616]	; (3044 <initialize_calibration_parameters+0x8fc>)
    2dda:	f8c0 3354 	str.w	r3, [r0, #852]	; 0x354
			parameters_array->sensor_topMiddle[12][0] = -9.29840097125406e-09;
    2dde:	4b9a      	ldr	r3, [pc, #616]	; (3048 <initialize_calibration_parameters+0x900>)
    2de0:	f8c0 3360 	str.w	r3, [r0, #864]	; 0x360
			parameters_array->sensor_topMiddle[13][0] = 1.04601629784661e-13;
    2de4:	4b99      	ldr	r3, [pc, #612]	; (304c <initialize_calibration_parameters+0x904>)
    2de6:	f8c0 336c 	str.w	r3, [r0, #876]	; 0x36c
			parameters_array->sensor_topMiddle[14][0] = -1.01788370243564e-09;
    2dea:	4b99      	ldr	r3, [pc, #612]	; (3050 <initialize_calibration_parameters+0x908>)
    2dec:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
			parameters_array->sensor_topMiddle[15][0] = -4.06410595963716e-05;
    2df0:	4b98      	ldr	r3, [pc, #608]	; (3054 <initialize_calibration_parameters+0x90c>)
    2df2:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
			parameters_array->sensor_topMiddle[16][0] = -4.94414482108941e-13;
    2df6:	4b98      	ldr	r3, [pc, #608]	; (3058 <initialize_calibration_parameters+0x910>)
    2df8:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
			parameters_array->sensor_topMiddle[17][0] = -3.58762894713167e-08;
    2dfc:	4b97      	ldr	r3, [pc, #604]	; (305c <initialize_calibration_parameters+0x914>)
    2dfe:	f8c0 339c 	str.w	r3, [r0, #924]	; 0x39c
			parameters_array->sensor_topMiddle[18][0] = -0.000664187977533756;
    2e02:	4b97      	ldr	r3, [pc, #604]	; (3060 <initialize_calibration_parameters+0x918>)
    2e04:	f8c0 33a8 	str.w	r3, [r0, #936]	; 0x3a8
			parameters_array->sensor_topMiddle[19][0] = -3.22143367645218;
    2e08:	4b96      	ldr	r3, [pc, #600]	; (3064 <initialize_calibration_parameters+0x91c>)
    2e0a:	f8c0 33b4 	str.w	r3, [r0, #948]	; 0x3b4
			
			// SensorArray 1 Middle Row - Middle Sensor - X Direction
			parameters_array->sensor_middleMiddle[0][0] = -2.54752315629205e-14;
    2e0e:	4b96      	ldr	r3, [pc, #600]	; (3068 <initialize_calibration_parameters+0x920>)
    2e10:	f8c0 33c0 	str.w	r3, [r0, #960]	; 0x3c0
			parameters_array->sensor_middleMiddle[1][0] = 7.63401657663545e-14;
    2e14:	4b95      	ldr	r3, [pc, #596]	; (306c <initialize_calibration_parameters+0x924>)
    2e16:	f8c0 33cc 	str.w	r3, [r0, #972]	; 0x3cc
			parameters_array->sensor_middleMiddle[2][0] = -3.32946980552996e-13;
    2e1a:	4b95      	ldr	r3, [pc, #596]	; (3070 <initialize_calibration_parameters+0x928>)
    2e1c:	f8c0 33d8 	str.w	r3, [r0, #984]	; 0x3d8
			parameters_array->sensor_middleMiddle[3][0] = -7.92103607712918e-09;
    2e20:	4b94      	ldr	r3, [pc, #592]	; (3074 <initialize_calibration_parameters+0x92c>)
    2e22:	f8c0 33e4 	str.w	r3, [r0, #996]	; 0x3e4
			parameters_array->sensor_middleMiddle[4][0] = 6.99325583558563e-13;
    2e26:	4b94      	ldr	r3, [pc, #592]	; (3078 <initialize_calibration_parameters+0x930>)
    2e28:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
			parameters_array->sensor_middleMiddle[5][0] = 5.58882575735533e-13;
    2e2c:	4b93      	ldr	r3, [pc, #588]	; (307c <initialize_calibration_parameters+0x934>)
    2e2e:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
			parameters_array->sensor_middleMiddle[6][0] = 1.35529419123151e-08;
    2e32:	f500 6381 	add.w	r3, r0, #1032	; 0x408
    2e36:	4a92      	ldr	r2, [pc, #584]	; (3080 <initialize_calibration_parameters+0x938>)
    2e38:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][0] = 7.93324551903647e-14;
    2e3a:	f200 4314 	addw	r3, r0, #1044	; 0x414
    2e3e:	4a91      	ldr	r2, [pc, #580]	; (3084 <initialize_calibration_parameters+0x93c>)
    2e40:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][0] = -1.10706709466510e-08;
    2e42:	f500 6384 	add.w	r3, r0, #1056	; 0x420
    2e46:	4a90      	ldr	r2, [pc, #576]	; (3088 <initialize_calibration_parameters+0x940>)
    2e48:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][0] = -0.000536150630518398;
    2e4a:	f200 432c 	addw	r3, r0, #1068	; 0x42c
    2e4e:	4a8f      	ldr	r2, [pc, #572]	; (308c <initialize_calibration_parameters+0x944>)
    2e50:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][0] = 1.95606465127978e-13;
    2e52:	f500 6387 	add.w	r3, r0, #1080	; 0x438
    2e56:	4a8e      	ldr	r2, [pc, #568]	; (3090 <initialize_calibration_parameters+0x948>)
    2e58:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][0] = 7.17023621475737e-14;
    2e5a:	f200 4344 	addw	r3, r0, #1092	; 0x444
    2e5e:	4a8d      	ldr	r2, [pc, #564]	; (3094 <initialize_calibration_parameters+0x94c>)
    2e60:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][0] = -7.59142638137181e-10;
    2e62:	f500 638a 	add.w	r3, r0, #1104	; 0x450
    2e66:	4a8c      	ldr	r2, [pc, #560]	; (3098 <initialize_calibration_parameters+0x950>)
    2e68:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][0] = 6.79751259414843e-14;
    2e6a:	f200 435c 	addw	r3, r0, #1116	; 0x45c
    2e6e:	4a8b      	ldr	r2, [pc, #556]	; (309c <initialize_calibration_parameters+0x954>)
    2e70:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][0] = 2.16877034648468e-09;
    2e72:	f500 638d 	add.w	r3, r0, #1128	; 0x468
    2e76:	4a8a      	ldr	r2, [pc, #552]	; (30a0 <initialize_calibration_parameters+0x958>)
    2e78:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][0] = 2.41015469789614e-05;
    2e7a:	f200 4374 	addw	r3, r0, #1140	; 0x474
    2e7e:	4a89      	ldr	r2, [pc, #548]	; (30a4 <initialize_calibration_parameters+0x95c>)
    2e80:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][0] = -8.49114330496904e-15;
    2e82:	f500 6390 	add.w	r3, r0, #1152	; 0x480
    2e86:	4a88      	ldr	r2, [pc, #544]	; (30a8 <initialize_calibration_parameters+0x960>)
    2e88:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][0] = -2.29764606682051e-09;
    2e8a:	f200 438c 	addw	r3, r0, #1164	; 0x48c
    2e8e:	4a87      	ldr	r2, [pc, #540]	; (30ac <initialize_calibration_parameters+0x964>)
    2e90:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][0] = -4.81108579493505e-05;
    2e92:	f500 6393 	add.w	r3, r0, #1176	; 0x498
    2e96:	4a86      	ldr	r2, [pc, #536]	; (30b0 <initialize_calibration_parameters+0x968>)
    2e98:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][0] = -0.0360907026899464;
    2e9a:	f200 43a4 	addw	r3, r0, #1188	; 0x4a4
    2e9e:	4a85      	ldr	r2, [pc, #532]	; (30b4 <initialize_calibration_parameters+0x96c>)
    2ea0:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Middle Row - Bottom Sensor - X Direction
			parameters_array->sensor_bottomMiddle[0][0] = 1.30592194562420e-12;
    2ea2:	f500 6396 	add.w	r3, r0, #1200	; 0x4b0
    2ea6:	4a84      	ldr	r2, [pc, #528]	; (30b8 <initialize_calibration_parameters+0x970>)
    2ea8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][0] = -4.70570803600770e-13;
    2eaa:	f200 43bc 	addw	r3, r0, #1212	; 0x4bc
    2eae:	4a83      	ldr	r2, [pc, #524]	; (30bc <initialize_calibration_parameters+0x974>)
    2eb0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][0] = 4.19629144620383e-14;
    2eb2:	f500 6399 	add.w	r3, r0, #1224	; 0x4c8
    2eb6:	4a82      	ldr	r2, [pc, #520]	; (30c0 <initialize_calibration_parameters+0x978>)
    2eb8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][0] = 3.13198965923290e-09;
    2eba:	f200 43d4 	addw	r3, r0, #1236	; 0x4d4
    2ebe:	4a81      	ldr	r2, [pc, #516]	; (30c4 <initialize_calibration_parameters+0x97c>)
    2ec0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][0] = 2.35384503433769e-13;
    2ec2:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
    2ec6:	4a80      	ldr	r2, [pc, #512]	; (30c8 <initialize_calibration_parameters+0x980>)
    2ec8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][0] = 1.73898290285410e-13;
    2eca:	f200 43ec 	addw	r3, r0, #1260	; 0x4ec
    2ece:	4a7f      	ldr	r2, [pc, #508]	; (30cc <initialize_calibration_parameters+0x984>)
    2ed0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[6][0] = 5.30128456805481e-09;
    2ed2:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
    2ed6:	4a7e      	ldr	r2, [pc, #504]	; (30d0 <initialize_calibration_parameters+0x988>)
    2ed8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][0] = -3.64567286934684e-13;
    2eda:	f200 5304 	addw	r3, r0, #1284	; 0x504
    2ede:	4a7d      	ldr	r2, [pc, #500]	; (30d4 <initialize_calibration_parameters+0x98c>)
    2ee0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][0] = -2.53780488472188e-08;
    2ee2:	f500 63a2 	add.w	r3, r0, #1296	; 0x510
    2ee6:	4a7c      	ldr	r2, [pc, #496]	; (30d8 <initialize_calibration_parameters+0x990>)
    2ee8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][0] = -0.000644137042935365;
    2eea:	f200 531c 	addw	r3, r0, #1308	; 0x51c
    2eee:	4a7b      	ldr	r2, [pc, #492]	; (30dc <initialize_calibration_parameters+0x994>)
    2ef0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][0] = -1.74318471948367e-13;
    2ef2:	f500 63a5 	add.w	r3, r0, #1320	; 0x528
    2ef6:	4a7a      	ldr	r2, [pc, #488]	; (30e0 <initialize_calibration_parameters+0x998>)
    2ef8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][0] = 8.93852801213209e-13;
    2efa:	f200 5334 	addw	r3, r0, #1332	; 0x534
    2efe:	4a79      	ldr	r2, [pc, #484]	; (30e4 <initialize_calibration_parameters+0x99c>)
    2f00:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][0] = 2.74688048428889e-08;
    2f02:	f500 63a8 	add.w	r3, r0, #1344	; 0x540
    2f06:	4a78      	ldr	r2, [pc, #480]	; (30e8 <initialize_calibration_parameters+0x9a0>)
    2f08:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][0] = -1.63537290192526e-13;
    2f0a:	f200 534c 	addw	r3, r0, #1356	; 0x54c
    2f0e:	4a77      	ldr	r2, [pc, #476]	; (30ec <initialize_calibration_parameters+0x9a4>)
    2f10:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][0] = -3.52204564228463e-09;
    2f12:	f500 63ab 	add.w	r3, r0, #1368	; 0x558
    2f16:	4a76      	ldr	r2, [pc, #472]	; (30f0 <initialize_calibration_parameters+0x9a8>)
    2f18:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][0] = 3.68817385064927e-06;
    2f1a:	f200 5364 	addw	r3, r0, #1380	; 0x564
    2f1e:	4a75      	ldr	r2, [pc, #468]	; (30f4 <initialize_calibration_parameters+0x9ac>)
    2f20:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][0] = 3.64964149839857e-14;
    2f22:	f500 63ae 	add.w	r3, r0, #1392	; 0x570
    2f26:	4a74      	ldr	r2, [pc, #464]	; (30f8 <initialize_calibration_parameters+0x9b0>)
    2f28:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][0] = 4.18956411871844e-09;
    2f2a:	f200 537c 	addw	r3, r0, #1404	; 0x57c
    2f2e:	4a73      	ldr	r2, [pc, #460]	; (30fc <initialize_calibration_parameters+0x9b4>)
    2f30:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[18][0] = -5.06492278620579e-07;
    2f32:	f500 63b1 	add.w	r3, r0, #1416	; 0x588
    2f36:	4a72      	ldr	r2, [pc, #456]	; (3100 <initialize_calibration_parameters+0x9b8>)
    2f38:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][0] = -0.323730194191146;
    2f3a:	f200 5394 	addw	r3, r0, #1428	; 0x594
    2f3e:	4a71      	ldr	r2, [pc, #452]	; (3104 <initialize_calibration_parameters+0x9bc>)
    2f40:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Middle Row - Top Sensor - Y Direction
			parameters_array->sensor_topMiddle[0][1] = -6.45009050644189e-13;
    2f42:	4b71      	ldr	r3, [pc, #452]	; (3108 <initialize_calibration_parameters+0x9c0>)
    2f44:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
			parameters_array->sensor_topMiddle[1][1] = 8.56420116659700e-13;
    2f48:	4b70      	ldr	r3, [pc, #448]	; (310c <initialize_calibration_parameters+0x9c4>)
    2f4a:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
			parameters_array->sensor_topMiddle[2][1] = -1.10537706365247e-12;
    2f4e:	4b70      	ldr	r3, [pc, #448]	; (3110 <initialize_calibration_parameters+0x9c8>)
    2f50:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
			parameters_array->sensor_topMiddle[3][1] = -2.62299693784769e-08;
    2f54:	4b6f      	ldr	r3, [pc, #444]	; (3114 <initialize_calibration_parameters+0x9cc>)
    2f56:	f8c0 32f8 	str.w	r3, [r0, #760]	; 0x2f8
			parameters_array->sensor_topMiddle[4][1] = -7.21992827210774e-13;
    2f5a:	4b6f      	ldr	r3, [pc, #444]	; (3118 <initialize_calibration_parameters+0x9d0>)
    2f5c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
			parameters_array->sensor_topMiddle[5][1] = 6.31119071600235e-14;
    2f60:	4b6e      	ldr	r3, [pc, #440]	; (311c <initialize_calibration_parameters+0x9d4>)
    2f62:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
			parameters_array->sensor_topMiddle[6][1] = -2.41808511731862e-09;
    2f66:	4b6e      	ldr	r3, [pc, #440]	; (3120 <initialize_calibration_parameters+0x9d8>)
    2f68:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
    2f6c:	e0da      	b.n	3124 <initialize_calibration_parameters+0x9dc>
    2f6e:	bf00      	nop
    2f70:	33fdb627 	.word	0x33fdb627
    2f74:	3aa219dc 	.word	0x3aa219dc
    2f78:	402e159e 	.word	0x402e159e
    2f7c:	2a8b4cb4 	.word	0x2a8b4cb4
    2f80:	2a52721c 	.word	0x2a52721c
    2f84:	2cc85a4e 	.word	0x2cc85a4e
    2f88:	345f577a 	.word	0x345f577a
    2f8c:	2a8fe97f 	.word	0x2a8fe97f
    2f90:	ab9217f1 	.word	0xab9217f1
    2f94:	b2a429fe 	.word	0xb2a429fe
    2f98:	aa65b8c1 	.word	0xaa65b8c1
    2f9c:	b259109c 	.word	0xb259109c
    2fa0:	b97cb62d 	.word	0xb97cb62d
    2fa4:	ab220587 	.word	0xab220587
    2fa8:	2c54a781 	.word	0x2c54a781
    2fac:	34345442 	.word	0x34345442
    2fb0:	2bab0335 	.word	0x2bab0335
    2fb4:	334fa615 	.word	0x334fa615
    2fb8:	39da2a57 	.word	0x39da2a57
    2fbc:	2c30518b 	.word	0x2c30518b
    2fc0:	3419365a 	.word	0x3419365a
    2fc4:	3ad0787a 	.word	0x3ad0787a
    2fc8:	4089de4a 	.word	0x4089de4a
    2fcc:	aa0963e0 	.word	0xaa0963e0
    2fd0:	2b42cfb9 	.word	0x2b42cfb9
    2fd4:	2c9fa289 	.word	0x2c9fa289
    2fd8:	343ca5a3 	.word	0x343ca5a3
    2fdc:	2c10db57 	.word	0x2c10db57
    2fe0:	abd4bb0e 	.word	0xabd4bb0e
    2fe4:	b30d1fe1 	.word	0xb30d1fe1
    2fe8:	2bde9833 	.word	0x2bde9833
    2fec:	337af005 	.word	0x337af005
    2ff0:	3a1679f6 	.word	0x3a1679f6
    2ff4:	aa9336a8 	.word	0xaa9336a8
    2ff8:	2c2cf533 	.word	0x2c2cf533
    2ffc:	34156a97 	.word	0x34156a97
    3000:	2bdeb32d 	.word	0x2bdeb32d
    3004:	338f5449 	.word	0x338f5449
    3008:	3a2b8c73 	.word	0x3a2b8c73
    300c:	2ba82b4c 	.word	0x2ba82b4c
    3010:	3396f370 	.word	0x3396f370
    3014:	39d43e67 	.word	0x39d43e67
    3018:	c016a2b4 	.word	0xc016a2b4
    301c:	2b90c164 	.word	0x2b90c164
    3020:	2bd70b29 	.word	0x2bd70b29
    3024:	2ac5df59 	.word	0x2ac5df59
    3028:	b2113a20 	.word	0xb2113a20
    302c:	2af67c21 	.word	0x2af67c21
    3030:	3224cb30 	.word	0x3224cb30
    3034:	ab1a2241 	.word	0xab1a2241
    3038:	b305b196 	.word	0xb305b196
    303c:	ba35460d 	.word	0xba35460d
    3040:	2bceaab9 	.word	0x2bceaab9
    3044:	a9eb2eac 	.word	0xa9eb2eac
    3048:	b21fbecd 	.word	0xb21fbecd
    304c:	29eb8abc 	.word	0x29eb8abc
    3050:	b08be599 	.word	0xb08be599
    3054:	b82a7601 	.word	0xb82a7601
    3058:	ab0b2a51 	.word	0xab0b2a51
    305c:	b31a1666 	.word	0xb31a1666
    3060:	ba2e1ce7 	.word	0xba2e1ce7
    3064:	c04e2bf8 	.word	0xc04e2bf8
    3068:	a8e575e2 	.word	0xa8e575e2
    306c:	29abe71c 	.word	0x29abe71c
    3070:	aabb6eb7 	.word	0xaabb6eb7
    3074:	b2081516 	.word	0xb2081516
    3078:	2b44d7b8 	.word	0x2b44d7b8
    307c:	2b1d4fbc 	.word	0x2b1d4fbc
    3080:	3268d678 	.word	0x3268d678
    3084:	29b2a40c 	.word	0x29b2a40c
    3088:	b23e3153 	.word	0xb23e3153
    308c:	ba0c8c76 	.word	0xba0c8c76
    3090:	2a5c3bba 	.word	0x2a5c3bba
    3094:	29a17599 	.word	0x29a17599
    3098:	b050abea 	.word	0xb050abea
    309c:	299910fe 	.word	0x299910fe
    30a0:	31150969 	.word	0x31150969
    30a4:	37ca2dae 	.word	0x37ca2dae
    30a8:	a818f67d 	.word	0xa818f67d
    30ac:	b11de49e 	.word	0xb11de49e
    30b0:	b849caa4 	.word	0xb849caa4
    30b4:	bd13d3d8 	.word	0xbd13d3d8
    30b8:	2bb7cacc 	.word	0x2bb7cacc
    30bc:	ab047433 	.word	0xab047433
    30c0:	293cfbf2 	.word	0x293cfbf2
    30c4:	31573a8b 	.word	0x31573a8b
    30c8:	2a84827b 	.word	0x2a84827b
    30cc:	2a43cac5 	.word	0x2a43cac5
    30d0:	31b62698 	.word	0x31b62698
    30d4:	aacd3baf 	.word	0xaacd3baf
    30d8:	b2d9feeb 	.word	0xb2d9feeb
    30dc:	ba28db4e 	.word	0xba28db4e
    30e0:	aa4443e1 	.word	0xaa4443e1
    30e4:	2b7b98e2 	.word	0x2b7b98e2
    30e8:	32ebf48a 	.word	0x32ebf48a
    30ec:	aa38206a 	.word	0xaa38206a
    30f0:	b172087b 	.word	0xb172087b
    30f4:	36778258 	.word	0x36778258
    30f8:	29245d80 	.word	0x29245d80
    30fc:	318ff3cc 	.word	0x318ff3cc
    3100:	b507f5e2 	.word	0xb507f5e2
    3104:	bea5bff7 	.word	0xbea5bff7
    3108:	ab358dcd 	.word	0xab358dcd
    310c:	2b710f93 	.word	0x2b710f93
    3110:	ab9b9168 	.word	0xab9b9168
    3114:	b2e15050 	.word	0xb2e15050
    3118:	ab4b3911 	.word	0xab4b3911
    311c:	298e1d8a 	.word	0x298e1d8a
    3120:	b1262b67 	.word	0xb1262b67
			parameters_array->sensor_topMiddle[7][1] = 4.92633301719305e-13;
    3124:	4bb0      	ldr	r3, [pc, #704]	; (33e8 <initialize_calibration_parameters+0xca0>)
    3126:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
			parameters_array->sensor_topMiddle[8][1] = 2.12110771522549e-08;
    312a:	4bb0      	ldr	r3, [pc, #704]	; (33ec <initialize_calibration_parameters+0xca4>)
    312c:	f8c0 3334 	str.w	r3, [r0, #820]	; 0x334
			parameters_array->sensor_topMiddle[9][1] = 0.000239924652341243;
    3130:	4baf      	ldr	r3, [pc, #700]	; (33f0 <initialize_calibration_parameters+0xca8>)
    3132:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
			parameters_array->sensor_topMiddle[10][1] = 5.92922718778950e-13;
    3136:	4baf      	ldr	r3, [pc, #700]	; (33f4 <initialize_calibration_parameters+0xcac>)
    3138:	f8c0 334c 	str.w	r3, [r0, #844]	; 0x34c
			parameters_array->sensor_topMiddle[11][1] = -9.87618832235080e-13;
    313c:	4bae      	ldr	r3, [pc, #696]	; (33f8 <initialize_calibration_parameters+0xcb0>)
    313e:	f8c0 3358 	str.w	r3, [r0, #856]	; 0x358
			parameters_array->sensor_topMiddle[12][1] = -2.54445352985294e-08;
    3142:	4bae      	ldr	r3, [pc, #696]	; (33fc <initialize_calibration_parameters+0xcb4>)
    3144:	f8c0 3364 	str.w	r3, [r0, #868]	; 0x364
			parameters_array->sensor_topMiddle[13][1] = -6.33158667412956e-13;
    3148:	4bad      	ldr	r3, [pc, #692]	; (3400 <initialize_calibration_parameters+0xcb8>)
    314a:	f8c0 3370 	str.w	r3, [r0, #880]	; 0x370
			parameters_array->sensor_topMiddle[14][1] = -4.61289773271452e-08;
    314e:	4bad      	ldr	r3, [pc, #692]	; (3404 <initialize_calibration_parameters+0xcbc>)
    3150:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
			parameters_array->sensor_topMiddle[15][1] = -0.000990013312368747;
    3154:	4bac      	ldr	r3, [pc, #688]	; (3408 <initialize_calibration_parameters+0xcc0>)
    3156:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
			parameters_array->sensor_topMiddle[16][1] = 1.97110853286696e-13;
    315a:	4bac      	ldr	r3, [pc, #688]	; (340c <initialize_calibration_parameters+0xcc4>)
    315c:	f8c0 3394 	str.w	r3, [r0, #916]	; 0x394
			parameters_array->sensor_topMiddle[17][1] = 1.33167991198687e-08;
    3160:	4bab      	ldr	r3, [pc, #684]	; (3410 <initialize_calibration_parameters+0xcc8>)
    3162:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
			parameters_array->sensor_topMiddle[18][1] = 0.000331446507341279;
    3166:	4bab      	ldr	r3, [pc, #684]	; (3414 <initialize_calibration_parameters+0xccc>)
    3168:	f8c0 33ac 	str.w	r3, [r0, #940]	; 0x3ac
			parameters_array->sensor_topMiddle[19][1] = 2.04016205731674;
    316c:	4baa      	ldr	r3, [pc, #680]	; (3418 <initialize_calibration_parameters+0xcd0>)
    316e:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
			
			// SensorArray 1 Middle Row - Middle Sensor - Y Direction
			parameters_array->sensor_middleMiddle[0][1] = 1.45377112442212e-14;
    3172:	4baa      	ldr	r3, [pc, #680]	; (341c <initialize_calibration_parameters+0xcd4>)
    3174:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
			parameters_array->sensor_middleMiddle[1][1] = 1.29403507914965e-12;
    3178:	4ba9      	ldr	r3, [pc, #676]	; (3420 <initialize_calibration_parameters+0xcd8>)
    317a:	f8c0 33d0 	str.w	r3, [r0, #976]	; 0x3d0
			parameters_array->sensor_middleMiddle[2][1] = 9.40368966826124e-14;
    317e:	4ba9      	ldr	r3, [pc, #676]	; (3424 <initialize_calibration_parameters+0xcdc>)
    3180:	f8c0 33dc 	str.w	r3, [r0, #988]	; 0x3dc
			parameters_array->sensor_middleMiddle[3][1] = -6.01823570434061e-10;
    3184:	4ba8      	ldr	r3, [pc, #672]	; (3428 <initialize_calibration_parameters+0xce0>)
    3186:	f8c0 33e8 	str.w	r3, [r0, #1000]	; 0x3e8
			parameters_array->sensor_middleMiddle[4][1] = 9.24808627371751e-16;
    318a:	4ba8      	ldr	r3, [pc, #672]	; (342c <initialize_calibration_parameters+0xce4>)
    318c:	f8c0 33f4 	str.w	r3, [r0, #1012]	; 0x3f4
			parameters_array->sensor_middleMiddle[5][1] = -2.03447507480317e-13;
    3190:	f500 6380 	add.w	r3, r0, #1024	; 0x400
    3194:	4aa6      	ldr	r2, [pc, #664]	; (3430 <initialize_calibration_parameters+0xce8>)
    3196:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[6][1] = -4.97699891378412e-09;
    3198:	f200 430c 	addw	r3, r0, #1036	; 0x40c
    319c:	4aa5      	ldr	r2, [pc, #660]	; (3434 <initialize_calibration_parameters+0xcec>)
    319e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][1] = -3.82340595133973e-13;
    31a0:	f500 6383 	add.w	r3, r0, #1048	; 0x418
    31a4:	4aa4      	ldr	r2, [pc, #656]	; (3438 <initialize_calibration_parameters+0xcf0>)
    31a6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][1] = -1.29627763630168e-08;
    31a8:	f200 4324 	addw	r3, r0, #1060	; 0x424
    31ac:	4aa3      	ldr	r2, [pc, #652]	; (343c <initialize_calibration_parameters+0xcf4>)
    31ae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][1] = -0.000103356540013733;
    31b0:	f500 6386 	add.w	r3, r0, #1072	; 0x430
    31b4:	4aa2      	ldr	r2, [pc, #648]	; (3440 <initialize_calibration_parameters+0xcf8>)
    31b6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][1] = 8.21800519823719e-13;
    31b8:	f200 433c 	addw	r3, r0, #1084	; 0x43c
    31bc:	4aa1      	ldr	r2, [pc, #644]	; (3444 <initialize_calibration_parameters+0xcfc>)
    31be:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][1] = -9.17470779684042e-14;
    31c0:	f500 6389 	add.w	r3, r0, #1096	; 0x448
    31c4:	4aa0      	ldr	r2, [pc, #640]	; (3448 <initialize_calibration_parameters+0xd00>)
    31c6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][1] = -6.84744500585344e-09;
    31c8:	f200 4354 	addw	r3, r0, #1108	; 0x454
    31cc:	4a9f      	ldr	r2, [pc, #636]	; (344c <initialize_calibration_parameters+0xd04>)
    31ce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][1] = -1.90910758349836e-13;
    31d0:	f500 638c 	add.w	r3, r0, #1120	; 0x460
    31d4:	4a9e      	ldr	r2, [pc, #632]	; (3450 <initialize_calibration_parameters+0xd08>)
    31d6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][1] = -2.55107394637301e-08;
    31d8:	f200 436c 	addw	r3, r0, #1132	; 0x46c
    31dc:	4a9d      	ldr	r2, [pc, #628]	; (3454 <initialize_calibration_parameters+0xd0c>)
    31de:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][1] = -0.000715797349964284;
    31e0:	f500 638f 	add.w	r3, r0, #1144	; 0x478
    31e4:	4a9c      	ldr	r2, [pc, #624]	; (3458 <initialize_calibration_parameters+0xd10>)
    31e6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][1] = 6.26731527250649e-14;
    31e8:	f200 4384 	addw	r3, r0, #1156	; 0x484
    31ec:	4a9b      	ldr	r2, [pc, #620]	; (345c <initialize_calibration_parameters+0xd14>)
    31ee:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][1] = 4.43934339226496e-09;
    31f0:	f500 6392 	add.w	r3, r0, #1168	; 0x490
    31f4:	4a9a      	ldr	r2, [pc, #616]	; (3460 <initialize_calibration_parameters+0xd18>)
    31f6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][1] = 0.000115837630373123;
    31f8:	f200 439c 	addw	r3, r0, #1180	; 0x49c
    31fc:	4a99      	ldr	r2, [pc, #612]	; (3464 <initialize_calibration_parameters+0xd1c>)
    31fe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][1] = 0.435197462873514;
    3200:	f500 6395 	add.w	r3, r0, #1192	; 0x4a8
    3204:	4a98      	ldr	r2, [pc, #608]	; (3468 <initialize_calibration_parameters+0xd20>)
    3206:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Middle Row - Bottom Sensor - Y Direction
			parameters_array->sensor_bottomMiddle[0][1] = 5.34368431957729e-14;
    3208:	f200 43b4 	addw	r3, r0, #1204	; 0x4b4
    320c:	4a97      	ldr	r2, [pc, #604]	; (346c <initialize_calibration_parameters+0xd24>)
    320e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][1] = 1.32838241905495e-12;
    3210:	f500 6398 	add.w	r3, r0, #1216	; 0x4c0
    3214:	4a96      	ldr	r2, [pc, #600]	; (3470 <initialize_calibration_parameters+0xd28>)
    3216:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][1] = 1.86900901495481e-13;
    3218:	f200 43cc 	addw	r3, r0, #1228	; 0x4cc
    321c:	4a95      	ldr	r2, [pc, #596]	; (3474 <initialize_calibration_parameters+0xd2c>)
    321e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][1] = 6.38376916657335e-09;
    3220:	f500 639b 	add.w	r3, r0, #1240	; 0x4d8
    3224:	4a94      	ldr	r2, [pc, #592]	; (3478 <initialize_calibration_parameters+0xd30>)
    3226:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][1] = -3.09318566975874e-13;
    3228:	f200 43e4 	addw	r3, r0, #1252	; 0x4e4
    322c:	4a93      	ldr	r2, [pc, #588]	; (347c <initialize_calibration_parameters+0xd34>)
    322e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][1] = 1.36180153563080e-13;
    3230:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
    3234:	4a92      	ldr	r2, [pc, #584]	; (3480 <initialize_calibration_parameters+0xd38>)
    3236:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[6][1] = -2.07145721460530e-09;
    3238:	f200 43fc 	addw	r3, r0, #1276	; 0x4fc
    323c:	4a91      	ldr	r2, [pc, #580]	; (3484 <initialize_calibration_parameters+0xd3c>)
    323e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][1] = -2.88667185588367e-14;
    3240:	f500 63a1 	add.w	r3, r0, #1288	; 0x508
    3244:	4a90      	ldr	r2, [pc, #576]	; (3488 <initialize_calibration_parameters+0xd40>)
    3246:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][1] = -2.51766180117673e-09;
    3248:	f200 5314 	addw	r3, r0, #1300	; 0x514
    324c:	4a8f      	ldr	r2, [pc, #572]	; (348c <initialize_calibration_parameters+0xd44>)
    324e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][1] = -4.85574658632464e-05;
    3250:	f500 63a4 	add.w	r3, r0, #1312	; 0x520
    3254:	4a8e      	ldr	r2, [pc, #568]	; (3490 <initialize_calibration_parameters+0xd48>)
    3256:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][1] = 3.28430152450687e-13;
    3258:	f200 532c 	addw	r3, r0, #1324	; 0x52c
    325c:	4a8d      	ldr	r2, [pc, #564]	; (3494 <initialize_calibration_parameters+0xd4c>)
    325e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][1] = 6.95953728085800e-13;
    3260:	f500 63a7 	add.w	r3, r0, #1336	; 0x538
    3264:	4a8c      	ldr	r2, [pc, #560]	; (3498 <initialize_calibration_parameters+0xd50>)
    3266:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][1] = 1.18953467429566e-08;
    3268:	f200 5344 	addw	r3, r0, #1348	; 0x544
    326c:	4a8b      	ldr	r2, [pc, #556]	; (349c <initialize_calibration_parameters+0xd54>)
    326e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][1] = 1.16692907623104e-14;
    3270:	f500 63aa 	add.w	r3, r0, #1360	; 0x550
    3274:	4a8a      	ldr	r2, [pc, #552]	; (34a0 <initialize_calibration_parameters+0xd58>)
    3276:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][1] = -2.20791177784033e-08;
    3278:	f200 535c 	addw	r3, r0, #1372	; 0x55c
    327c:	4a89      	ldr	r2, [pc, #548]	; (34a4 <initialize_calibration_parameters+0xd5c>)
    327e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][1] = -0.000726654451123241;
    3280:	f500 63ad 	add.w	r3, r0, #1384	; 0x568
    3284:	4a88      	ldr	r2, [pc, #544]	; (34a8 <initialize_calibration_parameters+0xd60>)
    3286:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][1] = -6.62876746407006e-15;
    3288:	f200 5374 	addw	r3, r0, #1396	; 0x574
    328c:	4a87      	ldr	r2, [pc, #540]	; (34ac <initialize_calibration_parameters+0xd64>)
    328e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][1] = 1.86997928523264e-09;
    3290:	f500 63b0 	add.w	r3, r0, #1408	; 0x580
    3294:	4a86      	ldr	r2, [pc, #536]	; (34b0 <initialize_calibration_parameters+0xd68>)
    3296:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[18][1] = 4.33542819767401e-05;
    3298:	f200 538c 	addw	r3, r0, #1420	; 0x58c
    329c:	4a85      	ldr	r2, [pc, #532]	; (34b4 <initialize_calibration_parameters+0xd6c>)
    329e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][1] = 0.0796609498379593;
    32a0:	f500 63b3 	add.w	r3, r0, #1432	; 0x598
    32a4:	4a84      	ldr	r2, [pc, #528]	; (34b8 <initialize_calibration_parameters+0xd70>)
    32a6:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Middle Row - Top Sensor - Z Direction
			parameters_array->sensor_topMiddle[0][2] = -4.34059778331485e-12;
    32a8:	4b84      	ldr	r3, [pc, #528]	; (34bc <initialize_calibration_parameters+0xd74>)
    32aa:	f8c0 32d8 	str.w	r3, [r0, #728]	; 0x2d8
			parameters_array->sensor_topMiddle[1][2] = -8.28926662948232e-12;
    32ae:	4b84      	ldr	r3, [pc, #528]	; (34c0 <initialize_calibration_parameters+0xd78>)
    32b0:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
			parameters_array->sensor_topMiddle[2][2] = 1.72123959911660e-12;
    32b4:	4b83      	ldr	r3, [pc, #524]	; (34c4 <initialize_calibration_parameters+0xd7c>)
    32b6:	f8c0 32f0 	str.w	r3, [r0, #752]	; 0x2f0
			parameters_array->sensor_topMiddle[3][2] = 1.47520524975115e-07;
    32ba:	4b83      	ldr	r3, [pc, #524]	; (34c8 <initialize_calibration_parameters+0xd80>)
    32bc:	f8c0 32fc 	str.w	r3, [r0, #764]	; 0x2fc
			parameters_array->sensor_topMiddle[4][2] = -8.48978421854969e-13;
    32c0:	4b82      	ldr	r3, [pc, #520]	; (34cc <initialize_calibration_parameters+0xd84>)
    32c2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
			parameters_array->sensor_topMiddle[5][2] = -5.83546950527499e-13;
    32c6:	4b82      	ldr	r3, [pc, #520]	; (34d0 <initialize_calibration_parameters+0xd88>)
    32c8:	f8c0 3314 	str.w	r3, [r0, #788]	; 0x314
			parameters_array->sensor_topMiddle[6][2] = -1.83028453210665e-08;
    32cc:	4b81      	ldr	r3, [pc, #516]	; (34d4 <initialize_calibration_parameters+0xd8c>)
    32ce:	f8c0 3320 	str.w	r3, [r0, #800]	; 0x320
			parameters_array->sensor_topMiddle[7][2] = -7.82409020627138e-13;
    32d2:	4b81      	ldr	r3, [pc, #516]	; (34d8 <initialize_calibration_parameters+0xd90>)
    32d4:	f8c0 332c 	str.w	r3, [r0, #812]	; 0x32c
			parameters_array->sensor_topMiddle[8][2] = -3.68553316747688e-08;
    32d8:	4b80      	ldr	r3, [pc, #512]	; (34dc <initialize_calibration_parameters+0xd94>)
    32da:	f8c0 3338 	str.w	r3, [r0, #824]	; 0x338
			parameters_array->sensor_topMiddle[9][2] = -0.000618934016732565;
    32de:	4b80      	ldr	r3, [pc, #512]	; (34e0 <initialize_calibration_parameters+0xd98>)
    32e0:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
			parameters_array->sensor_topMiddle[10][2] = -8.74315884581597e-12;
    32e4:	4b7f      	ldr	r3, [pc, #508]	; (34e4 <initialize_calibration_parameters+0xd9c>)
    32e6:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
			parameters_array->sensor_topMiddle[11][2] = 3.94757509292997e-12;
    32ea:	4b7f      	ldr	r3, [pc, #508]	; (34e8 <initialize_calibration_parameters+0xda0>)
    32ec:	f8c0 335c 	str.w	r3, [r0, #860]	; 0x35c
			parameters_array->sensor_topMiddle[12][2] = 1.63437591830056e-07;
    32f0:	4b7e      	ldr	r3, [pc, #504]	; (34ec <initialize_calibration_parameters+0xda4>)
    32f2:	f8c0 3368 	str.w	r3, [r0, #872]	; 0x368
			parameters_array->sensor_topMiddle[13][2] = 2.72457818478633e-12;
    32f6:	4b7e      	ldr	r3, [pc, #504]	; (34f0 <initialize_calibration_parameters+0xda8>)
    32f8:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
			parameters_array->sensor_topMiddle[14][2] = 1.45721649649190e-07;
    32fc:	4b7d      	ldr	r3, [pc, #500]	; (34f4 <initialize_calibration_parameters+0xdac>)
    32fe:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
			parameters_array->sensor_topMiddle[15][2] = 0.00172149693312811;
    3302:	4b7d      	ldr	r3, [pc, #500]	; (34f8 <initialize_calibration_parameters+0xdb0>)
    3304:	f8c0 338c 	str.w	r3, [r0, #908]	; 0x38c
			parameters_array->sensor_topMiddle[16][2] = 4.63093934315086e-12;
    3308:	4b7c      	ldr	r3, [pc, #496]	; (34fc <initialize_calibration_parameters+0xdb4>)
    330a:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
			parameters_array->sensor_topMiddle[17][2] = 3.26019049903700e-07;
    330e:	4b7c      	ldr	r3, [pc, #496]	; (3500 <initialize_calibration_parameters+0xdb8>)
    3310:	f8c0 33a4 	str.w	r3, [r0, #932]	; 0x3a4
			parameters_array->sensor_topMiddle[18][2] = 0.00602162243960280;
    3314:	4b7b      	ldr	r3, [pc, #492]	; (3504 <initialize_calibration_parameters+0xdbc>)
    3316:	f8c0 33b0 	str.w	r3, [r0, #944]	; 0x3b0
			parameters_array->sensor_topMiddle[19][2] = 33.5583928131851;
    331a:	4b7b      	ldr	r3, [pc, #492]	; (3508 <initialize_calibration_parameters+0xdc0>)
    331c:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
			
			// SensorArray 1 Middle Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleMiddle[0][2] = 1.57273197569308e-12;
    3320:	4b7a      	ldr	r3, [pc, #488]	; (350c <initialize_calibration_parameters+0xdc4>)
    3322:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
			parameters_array->sensor_middleMiddle[1][2] = -5.76873742514755e-12;
    3326:	4b7a      	ldr	r3, [pc, #488]	; (3510 <initialize_calibration_parameters+0xdc8>)
    3328:	f8c0 33d4 	str.w	r3, [r0, #980]	; 0x3d4
			parameters_array->sensor_middleMiddle[2][2] = 7.09536485779555e-12;
    332c:	4b79      	ldr	r3, [pc, #484]	; (3514 <initialize_calibration_parameters+0xdcc>)
    332e:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
			parameters_array->sensor_middleMiddle[3][2] = 2.83459797251988e-07;
    3332:	4b79      	ldr	r3, [pc, #484]	; (3518 <initialize_calibration_parameters+0xdd0>)
    3334:	f8c0 33ec 	str.w	r3, [r0, #1004]	; 0x3ec
			parameters_array->sensor_middleMiddle[4][2] = 2.12785391775773e-12;
    3338:	4b78      	ldr	r3, [pc, #480]	; (351c <initialize_calibration_parameters+0xdd4>)
    333a:	f8c0 33f8 	str.w	r3, [r0, #1016]	; 0x3f8
			parameters_array->sensor_middleMiddle[5][2] = 3.78923113914669e-13;
    333e:	f200 4304 	addw	r3, r0, #1028	; 0x404
    3342:	4a77      	ldr	r2, [pc, #476]	; (3520 <initialize_calibration_parameters+0xdd8>)
    3344:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[6][2] = 1.77970473123980e-08;
    3346:	f500 6382 	add.w	r3, r0, #1040	; 0x410
    334a:	4a76      	ldr	r2, [pc, #472]	; (3524 <initialize_calibration_parameters+0xddc>)
    334c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][2] = 2.15056331407762e-13;
    334e:	f200 431c 	addw	r3, r0, #1052	; 0x41c
    3352:	4a75      	ldr	r2, [pc, #468]	; (3528 <initialize_calibration_parameters+0xde0>)
    3354:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][2] = -8.67389663366030e-10;
    3356:	f500 6385 	add.w	r3, r0, #1064	; 0x428
    335a:	4a74      	ldr	r2, [pc, #464]	; (352c <initialize_calibration_parameters+0xde4>)
    335c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][2] = -0.000111456339891880;
    335e:	f200 4334 	addw	r3, r0, #1076	; 0x434
    3362:	4a73      	ldr	r2, [pc, #460]	; (3530 <initialize_calibration_parameters+0xde8>)
    3364:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][2] = -7.37653638819061e-12;
    3366:	f500 6388 	add.w	r3, r0, #1088	; 0x440
    336a:	4a72      	ldr	r2, [pc, #456]	; (3534 <initialize_calibration_parameters+0xdec>)
    336c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][2] = 6.37705693528412e-12;
    336e:	f200 434c 	addw	r3, r0, #1100	; 0x44c
    3372:	4a71      	ldr	r2, [pc, #452]	; (3538 <initialize_calibration_parameters+0xdf0>)
    3374:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][2] = 2.46263348365865e-07;
    3376:	f500 638b 	add.w	r3, r0, #1112	; 0x458
    337a:	4a70      	ldr	r2, [pc, #448]	; (353c <initialize_calibration_parameters+0xdf4>)
    337c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][2] = 1.74828073823045e-12;
    337e:	f200 4364 	addw	r3, r0, #1124	; 0x464
    3382:	4a6f      	ldr	r2, [pc, #444]	; (3540 <initialize_calibration_parameters+0xdf8>)
    3384:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][2] = 8.76593584912443e-08;
    3386:	f500 638e 	add.w	r3, r0, #1136	; 0x470
    338a:	4a6e      	ldr	r2, [pc, #440]	; (3544 <initialize_calibration_parameters+0xdfc>)
    338c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][2] = 0.000946108187868384;
    338e:	f200 437c 	addw	r3, r0, #1148	; 0x47c
    3392:	4a6d      	ldr	r2, [pc, #436]	; (3548 <initialize_calibration_parameters+0xe00>)
    3394:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][2] = 5.98155348042942e-12;
    3396:	f500 6391 	add.w	r3, r0, #1160	; 0x488
    339a:	4a6c      	ldr	r2, [pc, #432]	; (354c <initialize_calibration_parameters+0xe04>)
    339c:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][2] = 3.51778821138236e-07;
    339e:	f200 4394 	addw	r3, r0, #1172	; 0x494
    33a2:	4a6b      	ldr	r2, [pc, #428]	; (3550 <initialize_calibration_parameters+0xe08>)
    33a4:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][2] = 0.00521529619664764;
    33a6:	f500 6394 	add.w	r3, r0, #1184	; 0x4a0
    33aa:	4a6a      	ldr	r2, [pc, #424]	; (3554 <initialize_calibration_parameters+0xe0c>)
    33ac:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][2] = 22.7730727715328;
    33ae:	f200 43ac 	addw	r3, r0, #1196	; 0x4ac
    33b2:	4a69      	ldr	r2, [pc, #420]	; (3558 <initialize_calibration_parameters+0xe10>)
    33b4:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Middle Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomMiddle[0][2] = -4.21166029076380e-14;
    33b6:	f500 6397 	add.w	r3, r0, #1208	; 0x4b8
    33ba:	4a68      	ldr	r2, [pc, #416]	; (355c <initialize_calibration_parameters+0xe14>)
    33bc:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][2] = -4.80466271592484e-13;
    33be:	f200 43c4 	addw	r3, r0, #1220	; 0x4c4
    33c2:	4a67      	ldr	r2, [pc, #412]	; (3560 <initialize_calibration_parameters+0xe18>)
    33c4:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][2] = 8.80575863579533e-12;
    33c6:	f500 639a 	add.w	r3, r0, #1232	; 0x4d0
    33ca:	4a66      	ldr	r2, [pc, #408]	; (3564 <initialize_calibration_parameters+0xe1c>)
    33cc:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][2] = 2.93023661046751e-07;
    33ce:	f200 43dc 	addw	r3, r0, #1244	; 0x4dc
    33d2:	4a65      	ldr	r2, [pc, #404]	; (3568 <initialize_calibration_parameters+0xe20>)
    33d4:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][2] = 2.83063706038443e-12;
    33d6:	f500 639d 	add.w	r3, r0, #1256	; 0x4e8
    33da:	4a64      	ldr	r2, [pc, #400]	; (356c <initialize_calibration_parameters+0xe24>)
    33dc:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][2] = -2.14993890752431e-12;
    33de:	f200 43f4 	addw	r3, r0, #1268	; 0x4f4
    33e2:	4a63      	ldr	r2, [pc, #396]	; (3570 <initialize_calibration_parameters+0xe28>)
    33e4:	601a      	str	r2, [r3, #0]
    33e6:	e0c5      	b.n	3574 <initialize_calibration_parameters+0xe2c>
    33e8:	2b0aa9f8 	.word	0x2b0aa9f8
    33ec:	32b633a7 	.word	0x32b633a7
    33f0:	397b9449 	.word	0x397b9449
    33f4:	2b26e496 	.word	0x2b26e496
    33f8:	ab8afeb8 	.word	0xab8afeb8
    33fc:	b2da9120 	.word	0xb2da9120
    3400:	ab3237e4 	.word	0xab3237e4
    3404:	b3461f59 	.word	0xb3461f59
    3408:	ba81c356 	.word	0xba81c356
    340c:	2a5ded56 	.word	0x2a5ded56
    3410:	3264c7e7 	.word	0x3264c7e7
    3414:	39adc5ff 	.word	0x39adc5ff
    3418:	40029204 	.word	0x40029204
    341c:	2882f1ae 	.word	0x2882f1ae
    3420:	2bb61e87 	.word	0x2bb61e87
    3424:	29d3c095 	.word	0x29d3c095
    3428:	b0256d92 	.word	0xb0256d92
    342c:	2685476b 	.word	0x2685476b
    3430:	aa650fc0 	.word	0xaa650fc0
    3434:	b1ab0225 	.word	0xb1ab0225
    3438:	aad73d16 	.word	0xaad73d16
    343c:	b25eb2e5 	.word	0xb25eb2e5
    3440:	b8d8c11f 	.word	0xb8d8c11f
    3444:	2b6750f8 	.word	0x2b6750f8
    3448:	a9ce9897 	.word	0xa9ce9897
    344c:	b1eb46c3 	.word	0xb1eb46c3
    3450:	aa56f248 	.word	0xaa56f248
    3454:	b2db22b6 	.word	0xb2db22b6
    3458:	ba3ba459 	.word	0xba3ba459
    345c:	298d209d 	.word	0x298d209d
    3460:	319888e1 	.word	0x319888e1
    3464:	38f2eddb 	.word	0x38f2eddb
    3468:	3eded234 	.word	0x3eded234
    346c:	2970a87c 	.word	0x2970a87c
    3470:	2bbaf405 	.word	0x2bbaf405
    3474:	2a526e84 	.word	0x2a526e84
    3478:	31db583a 	.word	0x31db583a
    347c:	aaae2181 	.word	0xaaae2181
    3480:	2a195342 	.word	0x2a195342
    3484:	b10e5976 	.word	0xb10e5976
    3488:	a9020110 	.word	0xa9020110
    348c:	b12d032d 	.word	0xb12d032d
    3490:	b84baa2f 	.word	0xb84baa2f
    3494:	2ab8e3c6 	.word	0x2ab8e3c6
    3498:	2b43e4c0 	.word	0x2b43e4c0
    349c:	324c5c4a 	.word	0x324c5c4a
    34a0:	2852371b 	.word	0x2852371b
    34a4:	b2bda87e 	.word	0xb2bda87e
    34a8:	ba3e7cf4 	.word	0xba3e7cf4
    34ac:	a7eed397 	.word	0xa7eed397
    34b0:	31008106 	.word	0x31008106
    34b4:	3835d74e 	.word	0x3835d74e
    34b8:	3da32548 	.word	0x3da32548
    34bc:	ac98b8a1 	.word	0xac98b8a1
    34c0:	ad11d38a 	.word	0xad11d38a
    34c4:	2bf23e31 	.word	0x2bf23e31
    34c8:	341e6622 	.word	0x341e6622
    34cc:	ab6ef758 	.word	0xab6ef758
    34d0:	ab2440fd 	.word	0xab2440fd
    34d4:	b29d3862 	.word	0xb29d3862
    34d8:	ab5c3a83 	.word	0xab5c3a83
    34dc:	b31e4ade 	.word	0xb31e4ade
    34e0:	ba223ff5 	.word	0xba223ff5
    34e4:	ad19cfb0 	.word	0xad19cfb0
    34e8:	2c8ae498 	.word	0x2c8ae498
    34ec:	342f7d62 	.word	0x342f7d62
    34f0:	2c3fb9a3 	.word	0x2c3fb9a3
    34f4:	341c77a9 	.word	0x341c77a9
    34f8:	3ae1a3da 	.word	0x3ae1a3da
    34fc:	2ca2efcb 	.word	0x2ca2efcb
    3500:	34af07b8 	.word	0x34af07b8
    3504:	3bc55108 	.word	0x3bc55108
    3508:	42063bcb 	.word	0x42063bcb
    350c:	2bdd57a4 	.word	0x2bdd57a4
    3510:	accaf82b 	.word	0xaccaf82b
    3514:	2cf9a55d 	.word	0x2cf9a55d
    3518:	34982e6b 	.word	0x34982e6b
    351c:	2c15bc02 	.word	0x2c15bc02
    3520:	2ad55093 	.word	0x2ad55093
    3524:	3298e01f 	.word	0x3298e01f
    3528:	2a7221c4 	.word	0x2a7221c4
    352c:	b06e6d1f 	.word	0xb06e6d1f
    3530:	b8e9bdab 	.word	0xb8e9bdab
    3534:	ad01c4f7 	.word	0xad01c4f7
    3538:	2ce05f6c 	.word	0x2ce05f6c
    353c:	3484362d 	.word	0x3484362d
    3540:	2bf60c74 	.word	0x2bf60c74
    3544:	33bc3f3e 	.word	0x33bc3f3e
    3548:	3a78043f 	.word	0x3a78043f
    354c:	2cd2750b 	.word	0x2cd2750b
    3550:	34bcdc1d 	.word	0x34bcdc1d
    3554:	3baae513 	.word	0x3baae513
    3558:	41b62f41 	.word	0x41b62f41
    355c:	a93dad23 	.word	0xa93dad23
    3560:	ab073d3e 	.word	0xab073d3e
    3564:	2d1ae99c 	.word	0x2d1ae99c
    3568:	349d50de 	.word	0x349d50de
    356c:	2c473039 	.word	0x2c473039
    3570:	ac1749db 	.word	0xac1749db
			parameters_array->sensor_bottomMiddle[6][2] = -3.26167533554450e-08;
    3574:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
    3578:	4aa9      	ldr	r2, [pc, #676]	; (3820 <initialize_calibration_parameters+0x10d8>)
    357a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][2] = -2.51996487506808e-12;
    357c:	f200 530c 	addw	r3, r0, #1292	; 0x50c
    3580:	4aa8      	ldr	r2, [pc, #672]	; (3824 <initialize_calibration_parameters+0x10dc>)
    3582:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][2] = -9.60970850993524e-08;
    3584:	f500 63a3 	add.w	r3, r0, #1304	; 0x518
    3588:	4aa7      	ldr	r2, [pc, #668]	; (3828 <initialize_calibration_parameters+0x10e0>)
    358a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][2] = -0.000815073530498954;
    358c:	f200 5324 	addw	r3, r0, #1316	; 0x524
    3590:	4aa6      	ldr	r2, [pc, #664]	; (382c <initialize_calibration_parameters+0x10e4>)
    3592:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][2] = -7.17494693946772e-13;
    3594:	f500 63a6 	add.w	r3, r0, #1328	; 0x530
    3598:	4aa5      	ldr	r2, [pc, #660]	; (3830 <initialize_calibration_parameters+0x10e8>)
    359a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][2] = 5.80378090036415e-12;
    359c:	f200 533c 	addw	r3, r0, #1340	; 0x53c
    35a0:	4aa4      	ldr	r2, [pc, #656]	; (3834 <initialize_calibration_parameters+0x10ec>)
    35a2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][2] = 2.45088961359385e-07;
    35a4:	f500 63a9 	add.w	r3, r0, #1352	; 0x548
    35a8:	4aa3      	ldr	r2, [pc, #652]	; (3838 <initialize_calibration_parameters+0x10f0>)
    35aa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][2] = 1.60216212782832e-12;
    35ac:	f200 5354 	addw	r3, r0, #1364	; 0x554
    35b0:	4aa2      	ldr	r2, [pc, #648]	; (383c <initialize_calibration_parameters+0x10f4>)
    35b2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][2] = 7.21100594776548e-08;
    35b4:	f500 63ac 	add.w	r3, r0, #1376	; 0x560
    35b8:	4aa1      	ldr	r2, [pc, #644]	; (3840 <initialize_calibration_parameters+0x10f8>)
    35ba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][2] = 0.000701947694550010;
    35bc:	f200 536c 	addw	r3, r0, #1388	; 0x56c
    35c0:	4aa0      	ldr	r2, [pc, #640]	; (3844 <initialize_calibration_parameters+0x10fc>)
    35c2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][2] = 5.90965560269534e-12;
    35c4:	f500 63af 	add.w	r3, r0, #1400	; 0x578
    35c8:	4a9f      	ldr	r2, [pc, #636]	; (3848 <initialize_calibration_parameters+0x1100>)
    35ca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][2] = 3.41166608751763e-07;
    35cc:	f200 5384 	addw	r3, r0, #1412	; 0x584
    35d0:	4a9e      	ldr	r2, [pc, #632]	; (384c <initialize_calibration_parameters+0x1104>)
    35d2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[18][2] = 0.00502593009743136;
    35d4:	f500 63b2 	add.w	r3, r0, #1424	; 0x590
    35d8:	4a9d      	ldr	r2, [pc, #628]	; (3850 <initialize_calibration_parameters+0x1108>)
    35da:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][2] = 21.6372994547832;
    35dc:	f200 539c 	addw	r3, r0, #1436	; 0x59c
    35e0:	4a9c      	ldr	r2, [pc, #624]	; (3854 <initialize_calibration_parameters+0x110c>)
    35e2:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Right Row - Top Sensor - X Direction
			parameters_array->sensor_topRight[0][0] = -2.43668497543815e-14;
    35e4:	f500 63b4 	add.w	r3, r0, #1440	; 0x5a0
    35e8:	4a9b      	ldr	r2, [pc, #620]	; (3858 <initialize_calibration_parameters+0x1110>)
    35ea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][0] = 6.13717546611491e-16;
    35ec:	f200 53ac 	addw	r3, r0, #1452	; 0x5ac
    35f0:	4a9a      	ldr	r2, [pc, #616]	; (385c <initialize_calibration_parameters+0x1114>)
    35f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][0] = 1.03358843969485e-13;
    35f4:	f500 63b7 	add.w	r3, r0, #1464	; 0x5b8
    35f8:	4a99      	ldr	r2, [pc, #612]	; (3860 <initialize_calibration_parameters+0x1118>)
    35fa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][0] = -2.04636808637742e-09;
    35fc:	f200 53c4 	addw	r3, r0, #1476	; 0x5c4
    3600:	4a98      	ldr	r2, [pc, #608]	; (3864 <initialize_calibration_parameters+0x111c>)
    3602:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[4][0] = 1.73943014890202e-13;
    3604:	f500 63ba 	add.w	r3, r0, #1488	; 0x5d0
    3608:	4a97      	ldr	r2, [pc, #604]	; (3868 <initialize_calibration_parameters+0x1120>)
    360a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][0] = -1.82038277977881e-14;
    360c:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
    3610:	4a96      	ldr	r2, [pc, #600]	; (386c <initialize_calibration_parameters+0x1124>)
    3612:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][0] = 4.32529251234876e-10;
    3614:	f500 63bd 	add.w	r3, r0, #1512	; 0x5e8
    3618:	4a95      	ldr	r2, [pc, #596]	; (3870 <initialize_calibration_parameters+0x1128>)
    361a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][0] = -1.79793548184054e-13;
    361c:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
    3620:	4a94      	ldr	r2, [pc, #592]	; (3874 <initialize_calibration_parameters+0x112c>)
    3622:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][0] = -1.50403976499442e-08;
    3624:	f500 63c0 	add.w	r3, r0, #1536	; 0x600
    3628:	4a93      	ldr	r2, [pc, #588]	; (3878 <initialize_calibration_parameters+0x1130>)
    362a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][0] = -0.000448043189516041;
    362c:	f200 630c 	addw	r3, r0, #1548	; 0x60c
    3630:	4a92      	ldr	r2, [pc, #584]	; (387c <initialize_calibration_parameters+0x1134>)
    3632:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][0] = 2.08983136523989e-13;
    3634:	f500 63c3 	add.w	r3, r0, #1560	; 0x618
    3638:	4a91      	ldr	r2, [pc, #580]	; (3880 <initialize_calibration_parameters+0x1138>)
    363a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[11][0] = 2.22311534408228e-13;
    363c:	f200 6324 	addw	r3, r0, #1572	; 0x624
    3640:	4a90      	ldr	r2, [pc, #576]	; (3884 <initialize_calibration_parameters+0x113c>)
    3642:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][0] = 2.24635967017730e-09;
    3644:	f500 63c6 	add.w	r3, r0, #1584	; 0x630
    3648:	4a8f      	ldr	r2, [pc, #572]	; (3888 <initialize_calibration_parameters+0x1140>)
    364a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][0] = 3.32681250248999e-13;
    364c:	f200 633c 	addw	r3, r0, #1596	; 0x63c
    3650:	4a8e      	ldr	r2, [pc, #568]	; (388c <initialize_calibration_parameters+0x1144>)
    3652:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][0] = 1.62899027542700e-08;
    3654:	f500 63c9 	add.w	r3, r0, #1608	; 0x648
    3658:	4a8d      	ldr	r2, [pc, #564]	; (3890 <initialize_calibration_parameters+0x1148>)
    365a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][0] = 0.000196270588314552;
    365c:	f200 6354 	addw	r3, r0, #1620	; 0x654
    3660:	4a8c      	ldr	r2, [pc, #560]	; (3894 <initialize_calibration_parameters+0x114c>)
    3662:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][0] = 5.30211528500676e-14;
    3664:	f500 63cc 	add.w	r3, r0, #1632	; 0x660
    3668:	4a8b      	ldr	r2, [pc, #556]	; (3898 <initialize_calibration_parameters+0x1150>)
    366a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][0] = 3.36890456603529e-09;
    366c:	f200 636c 	addw	r3, r0, #1644	; 0x66c
    3670:	4a8a      	ldr	r2, [pc, #552]	; (389c <initialize_calibration_parameters+0x1154>)
    3672:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][0] = 0.000116789928617111;
    3674:	f500 63cf 	add.w	r3, r0, #1656	; 0x678
    3678:	4a89      	ldr	r2, [pc, #548]	; (38a0 <initialize_calibration_parameters+0x1158>)
    367a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][0] = 1.38535964610313;
    367c:	f200 6384 	addw	r3, r0, #1668	; 0x684
    3680:	4a88      	ldr	r2, [pc, #544]	; (38a4 <initialize_calibration_parameters+0x115c>)
    3682:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Middle Sensor - X Direction
			parameters_array->sensor_middleRight[0][0] = -1.90081466112523e-13;
    3684:	f500 63d2 	add.w	r3, r0, #1680	; 0x690
    3688:	4a87      	ldr	r2, [pc, #540]	; (38a8 <initialize_calibration_parameters+0x1160>)
    368a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][0] = 4.04495955845589e-14;
    368c:	f200 639c 	addw	r3, r0, #1692	; 0x69c
    3690:	4a86      	ldr	r2, [pc, #536]	; (38ac <initialize_calibration_parameters+0x1164>)
    3692:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][0] = -2.03723295746516e-13;
    3694:	f500 63d5 	add.w	r3, r0, #1704	; 0x6a8
    3698:	4a85      	ldr	r2, [pc, #532]	; (38b0 <initialize_calibration_parameters+0x1168>)
    369a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][0] = -2.31800468137932e-09;
    369c:	f200 63b4 	addw	r3, r0, #1716	; 0x6b4
    36a0:	4a84      	ldr	r2, [pc, #528]	; (38b4 <initialize_calibration_parameters+0x116c>)
    36a2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][0] = 3.86318506627538e-13;
    36a4:	f500 63d8 	add.w	r3, r0, #1728	; 0x6c0
    36a8:	4a83      	ldr	r2, [pc, #524]	; (38b8 <initialize_calibration_parameters+0x1170>)
    36aa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][0] = -9.54639031741575e-14;
    36ac:	f200 63cc 	addw	r3, r0, #1740	; 0x6cc
    36b0:	4a82      	ldr	r2, [pc, #520]	; (38bc <initialize_calibration_parameters+0x1174>)
    36b2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][0] = -1.22621346706447e-09;
    36b4:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
    36b8:	4a81      	ldr	r2, [pc, #516]	; (38c0 <initialize_calibration_parameters+0x1178>)
    36ba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][0] = -1.85122516323814e-13;
    36bc:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
    36c0:	4a80      	ldr	r2, [pc, #512]	; (38c4 <initialize_calibration_parameters+0x117c>)
    36c2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][0] = -1.66054636612272e-08;
    36c4:	f500 63de 	add.w	r3, r0, #1776	; 0x6f0
    36c8:	4a7f      	ldr	r2, [pc, #508]	; (38c8 <initialize_calibration_parameters+0x1180>)
    36ca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[9][0] = -0.000509051224854555;
    36cc:	f200 63fc 	addw	r3, r0, #1788	; 0x6fc
    36d0:	4a7e      	ldr	r2, [pc, #504]	; (38cc <initialize_calibration_parameters+0x1184>)
    36d2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][0] = 9.42884088477775e-14;
    36d4:	f500 63e1 	add.w	r3, r0, #1800	; 0x708
    36d8:	4a7d      	ldr	r2, [pc, #500]	; (38d0 <initialize_calibration_parameters+0x1188>)
    36da:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][0] = 1.46977758739611e-13;
    36dc:	f200 7314 	addw	r3, r0, #1812	; 0x714
    36e0:	4a7c      	ldr	r2, [pc, #496]	; (38d4 <initialize_calibration_parameters+0x118c>)
    36e2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][0] = 2.20674299767647e-09;
    36e4:	f500 63e4 	add.w	r3, r0, #1824	; 0x720
    36e8:	4a7b      	ldr	r2, [pc, #492]	; (38d8 <initialize_calibration_parameters+0x1190>)
    36ea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][0] = 8.39335963679815e-14;
    36ec:	f200 732c 	addw	r3, r0, #1836	; 0x72c
    36f0:	4a7a      	ldr	r2, [pc, #488]	; (38dc <initialize_calibration_parameters+0x1194>)
    36f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][0] = 3.88963106349803e-09;
    36f4:	f500 63e7 	add.w	r3, r0, #1848	; 0x738
    36f8:	4a79      	ldr	r2, [pc, #484]	; (38e0 <initialize_calibration_parameters+0x1198>)
    36fa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][0] = 4.67084495082223e-05;
    36fc:	f200 7344 	addw	r3, r0, #1860	; 0x744
    3700:	4a78      	ldr	r2, [pc, #480]	; (38e4 <initialize_calibration_parameters+0x119c>)
    3702:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[16][0] = 6.90542598286528e-15;
    3704:	f500 63ea 	add.w	r3, r0, #1872	; 0x750
    3708:	4a77      	ldr	r2, [pc, #476]	; (38e8 <initialize_calibration_parameters+0x11a0>)
    370a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][0] = -4.75757960369790e-11;
    370c:	f200 735c 	addw	r3, r0, #1884	; 0x75c
    3710:	4a76      	ldr	r2, [pc, #472]	; (38ec <initialize_calibration_parameters+0x11a4>)
    3712:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][0] = -3.63499619694511e-06;
    3714:	f500 63ed 	add.w	r3, r0, #1896	; 0x768
    3718:	4a75      	ldr	r2, [pc, #468]	; (38f0 <initialize_calibration_parameters+0x11a8>)
    371a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][0] = 0.263163436953243;
    371c:	f200 7374 	addw	r3, r0, #1908	; 0x774
    3720:	4a74      	ldr	r2, [pc, #464]	; (38f4 <initialize_calibration_parameters+0x11ac>)
    3722:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Bottom Sensor - X Direction
			parameters_array->sensor_bottomRight[0][0] = 3.80270119375568e-13;
    3724:	f500 63f0 	add.w	r3, r0, #1920	; 0x780
    3728:	4a73      	ldr	r2, [pc, #460]	; (38f8 <initialize_calibration_parameters+0x11b0>)
    372a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][0] = -2.92607350700572e-13;
    372c:	f200 738c 	addw	r3, r0, #1932	; 0x78c
    3730:	4a72      	ldr	r2, [pc, #456]	; (38fc <initialize_calibration_parameters+0x11b4>)
    3732:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][0] = -1.70735147510383e-13;
    3734:	f500 63f3 	add.w	r3, r0, #1944	; 0x798
    3738:	4a71      	ldr	r2, [pc, #452]	; (3900 <initialize_calibration_parameters+0x11b8>)
    373a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][0] = -2.27095279403895e-09;
    373c:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
    3740:	4a70      	ldr	r2, [pc, #448]	; (3904 <initialize_calibration_parameters+0x11bc>)
    3742:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][0] = 4.56754396587587e-13;
    3744:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
    3748:	4a6f      	ldr	r2, [pc, #444]	; (3908 <initialize_calibration_parameters+0x11c0>)
    374a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][0] = 5.59448316533098e-13;
    374c:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
    3750:	4a6e      	ldr	r2, [pc, #440]	; (390c <initialize_calibration_parameters+0x11c4>)
    3752:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][0] = 1.47942091237365e-08;
    3754:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
    3758:	4a6d      	ldr	r2, [pc, #436]	; (3910 <initialize_calibration_parameters+0x11c8>)
    375a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][0] = 2.65186820810408e-14;
    375c:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
    3760:	4a6c      	ldr	r2, [pc, #432]	; (3914 <initialize_calibration_parameters+0x11cc>)
    3762:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][0] = -3.38357485715913e-09;
    3764:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
    3768:	4a6b      	ldr	r2, [pc, #428]	; (3918 <initialize_calibration_parameters+0x11d0>)
    376a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][0] = -0.000292727979558325;
    376c:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
    3770:	4a6a      	ldr	r2, [pc, #424]	; (391c <initialize_calibration_parameters+0x11d4>)
    3772:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][0] = -1.05577837990654e-13;
    3774:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
    3778:	4a69      	ldr	r2, [pc, #420]	; (3920 <initialize_calibration_parameters+0x11d8>)
    377a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][0] = 4.70850269572787e-14;
    377c:	f600 0304 	addw	r3, r0, #2052	; 0x804
    3780:	4a68      	ldr	r2, [pc, #416]	; (3924 <initialize_calibration_parameters+0x11dc>)
    3782:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][0] = 3.87553982571327e-09;
    3784:	f500 6301 	add.w	r3, r0, #2064	; 0x810
    3788:	4a67      	ldr	r2, [pc, #412]	; (3928 <initialize_calibration_parameters+0x11e0>)
    378a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][0] = -2.85459708705033e-13;
    378c:	f600 031c 	addw	r3, r0, #2076	; 0x81c
    3790:	4a66      	ldr	r2, [pc, #408]	; (392c <initialize_calibration_parameters+0x11e4>)
    3792:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][0] = -1.40844938701582e-08;
    3794:	f600 0328 	addw	r3, r0, #2088	; 0x828
    3798:	4a65      	ldr	r2, [pc, #404]	; (3930 <initialize_calibration_parameters+0x11e8>)
    379a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][0] = -0.000162857074598991;
    379c:	f600 0334 	addw	r3, r0, #2100	; 0x834
    37a0:	4a64      	ldr	r2, [pc, #400]	; (3934 <initialize_calibration_parameters+0x11ec>)
    37a2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][0] = -1.48092894675720e-13;
    37a4:	f500 6304 	add.w	r3, r0, #2112	; 0x840
    37a8:	4a63      	ldr	r2, [pc, #396]	; (3938 <initialize_calibration_parameters+0x11f0>)
    37aa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][0] = -1.03075292349942e-08;
    37ac:	f600 034c 	addw	r3, r0, #2124	; 0x84c
    37b0:	4a62      	ldr	r2, [pc, #392]	; (393c <initialize_calibration_parameters+0x11f4>)
    37b2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][0] = -0.000291562949749085;
    37b4:	f600 0358 	addw	r3, r0, #2136	; 0x858
    37b8:	4a61      	ldr	r2, [pc, #388]	; (3940 <initialize_calibration_parameters+0x11f8>)
    37ba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][0] = -2.22811747458834;
    37bc:	f600 0364 	addw	r3, r0, #2148	; 0x864
    37c0:	4a60      	ldr	r2, [pc, #384]	; (3944 <initialize_calibration_parameters+0x11fc>)
    37c2:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Right Row - Top Sensor - Y Direction
			parameters_array->sensor_topRight[0][1] = 1.10855967490004e-13;
    37c4:	f200 53a4 	addw	r3, r0, #1444	; 0x5a4
    37c8:	4a5f      	ldr	r2, [pc, #380]	; (3948 <initialize_calibration_parameters+0x1200>)
    37ca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][1] = 3.59180166078246e-13;
    37cc:	f500 63b6 	add.w	r3, r0, #1456	; 0x5b0
    37d0:	4a5e      	ldr	r2, [pc, #376]	; (394c <initialize_calibration_parameters+0x1204>)
    37d2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][1] = -4.36642995844398e-14;
    37d4:	f200 53bc 	addw	r3, r0, #1468	; 0x5bc
    37d8:	4a5d      	ldr	r2, [pc, #372]	; (3950 <initialize_calibration_parameters+0x1208>)
    37da:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][1] = -1.65884788455611e-09;
    37dc:	f500 63b9 	add.w	r3, r0, #1480	; 0x5c8
    37e0:	4a5c      	ldr	r2, [pc, #368]	; (3954 <initialize_calibration_parameters+0x120c>)
    37e2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[4][1] = 1.73523767514391e-13;
    37e4:	f200 53d4 	addw	r3, r0, #1492	; 0x5d4
    37e8:	4a5b      	ldr	r2, [pc, #364]	; (3958 <initialize_calibration_parameters+0x1210>)
    37ea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][1] = 7.02150752392464e-14;
    37ec:	f500 63bc 	add.w	r3, r0, #1504	; 0x5e0
    37f0:	4a5a      	ldr	r2, [pc, #360]	; (395c <initialize_calibration_parameters+0x1214>)
    37f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][1] = 1.36147620348589e-09;
    37f4:	f200 53ec 	addw	r3, r0, #1516	; 0x5ec
    37f8:	4a59      	ldr	r2, [pc, #356]	; (3960 <initialize_calibration_parameters+0x1218>)
    37fa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][1] = -8.72222457257068e-15;
    37fc:	f500 63bf 	add.w	r3, r0, #1528	; 0x5f8
    3800:	4a58      	ldr	r2, [pc, #352]	; (3964 <initialize_calibration_parameters+0x121c>)
    3802:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][1] = -3.72413505526020e-10;
    3804:	f200 6304 	addw	r3, r0, #1540	; 0x604
    3808:	4a57      	ldr	r2, [pc, #348]	; (3968 <initialize_calibration_parameters+0x1220>)
    380a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][1] = -5.83739785948097e-06;
    380c:	f500 63c2 	add.w	r3, r0, #1552	; 0x610
    3810:	4a56      	ldr	r2, [pc, #344]	; (396c <initialize_calibration_parameters+0x1224>)
    3812:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][1] = 3.31352896556555e-14;
    3814:	f200 631c 	addw	r3, r0, #1564	; 0x61c
    3818:	4a55      	ldr	r2, [pc, #340]	; (3970 <initialize_calibration_parameters+0x1228>)
    381a:	601a      	str	r2, [r3, #0]
    381c:	e0aa      	b.n	3974 <initialize_calibration_parameters+0x122c>
    381e:	bf00      	nop
    3820:	b30c1680 	.word	0xb30c1680
    3824:	ac3153a7 	.word	0xac3153a7
    3828:	b3ce5dee 	.word	0xb3ce5dee
    382c:	ba55aaa9 	.word	0xba55aaa9
    3830:	ab49f4f1 	.word	0xab49f4f1
    3834:	2ccc33d0 	.word	0x2ccc33d0
    3838:	348394c5 	.word	0x348394c5
    383c:	2be17bf9 	.word	0x2be17bf9
    3840:	339adaed 	.word	0x339adaed
    3844:	3a3802ea 	.word	0x3a3802ea
    3848:	2ccfed72 	.word	0x2ccfed72
    384c:	34b72995 	.word	0x34b72995
    3850:	3ba4b08f 	.word	0x3ba4b08f
    3854:	41ad1930 	.word	0x41ad1930
    3858:	a8db7a21 	.word	0xa8db7a21
    385c:	2630e45d 	.word	0x2630e45d
    3860:	29e8be51 	.word	0x29e8be51
    3864:	b10ca017 	.word	0xb10ca017
    3868:	2a43d7a9 	.word	0x2a43d7a9
    386c:	a8a3f72b 	.word	0xa8a3f72b
    3870:	2fedc915 	.word	0x2fedc915
    3874:	aa4a6df6 	.word	0xaa4a6df6
    3878:	b281322f 	.word	0xb281322f
    387c:	b9eae757 	.word	0xb9eae757
    3880:	2a6b4b4a 	.word	0x2a6b4b4a
    3884:	2a7a4cf0 	.word	0x2a7a4cf0
    3888:	311a5e61 	.word	0x311a5e61
    388c:	2abb486c 	.word	0x2abb486c
    3890:	328bede0 	.word	0x328bede0
    3894:	394dcdfc 	.word	0x394dcdfc
    3898:	296ec93a 	.word	0x296ec93a
    389c:	31678265 	.word	0x31678265
    38a0:	38f4ed1e 	.word	0x38f4ed1e
    38a4:	3fb15377 	.word	0x3fb15377
    38a8:	aa560341 	.word	0xaa560341
    38ac:	29362b35 	.word	0x29362b35
    38b0:	aa655f3e 	.word	0xaa655f3e
    38b4:	b11f4ac5 	.word	0xb11f4ac5
    38b8:	2ad97a5d 	.word	0x2ad97a5d
    38bc:	a9d6f732 	.word	0xa9d6f732
    38c0:	b0a8878d 	.word	0xb0a8878d
    38c4:	aa506def 	.word	0xaa506def
    38c8:	b28ea3cd 	.word	0xb28ea3cd
    38cc:	ba0571d9 	.word	0xba0571d9
    38d0:	29d45191 	.word	0x29d45191
    38d4:	2a257b74 	.word	0x2a257b74
    38d8:	3117a56f 	.word	0x3117a56f
    38dc:	29bd006d 	.word	0x29bd006d
    38e0:	3185a58f 	.word	0x3185a58f
    38e4:	3843e8d1 	.word	0x3843e8d1
    38e8:	27f8cb50 	.word	0x27f8cb50
    38ec:	ae513d96 	.word	0xae513d96
    38f0:	b673f0c2 	.word	0xb673f0c2
    38f4:	3e86bd5c 	.word	0x3e86bd5c
    38f8:	2ad612b3 	.word	0x2ad612b3
    38fc:	aaa4b92a 	.word	0xaaa4b92a
    3900:	aa403b0e 	.word	0xaa403b0e
    3904:	b11c0f06 	.word	0xb11c0f06
    3908:	2b00909f 	.word	0x2b00909f
    390c:	2b1d7880 	.word	0x2b1d7880
    3910:	327e299f 	.word	0x327e299f
    3914:	28eedbeb 	.word	0x28eedbeb
    3918:	b168847a 	.word	0xb168847a
    391c:	b9997949 	.word	0xb9997949
    3920:	a9edbd7b 	.word	0xa9edbd7b
    3924:	29540d57 	.word	0x29540d57
    3928:	3185299c 	.word	0x3185299c
    392c:	aaa0b314 	.word	0xaaa0b314
    3930:	b271f842 	.word	0xb271f842
    3934:	b92ac49d 	.word	0xb92ac49d
    3938:	aa26bcdf 	.word	0xaa26bcdf
    393c:	b23114fe 	.word	0xb23114fe
    3940:	b998dceb 	.word	0xb998dceb
    3944:	c00e997a 	.word	0xc00e997a
    3948:	29f9a01d 	.word	0x29f9a01d
    394c:	2aca3351 	.word	0x2aca3351
    3950:	a944a583 	.word	0xa944a583
    3954:	b0e3fd85 	.word	0xb0e3fd85
    3958:	2a435ed2 	.word	0x2a435ed2
    395c:	299e1c3c 	.word	0x299e1c3c
    3960:	30bb1eaf 	.word	0x30bb1eaf
    3964:	a81d2029 	.word	0xa81d2029
    3968:	afccbc8b 	.word	0xafccbc8b
    396c:	b6c3dede 	.word	0xb6c3dede
    3970:	29153a63 	.word	0x29153a63
			parameters_array->sensor_topRight[11][1] = 3.32169719460827e-14;
    3974:	f500 63c5 	add.w	r3, r0, #1576	; 0x628
    3978:	4aa9      	ldr	r2, [pc, #676]	; (3c20 <initialize_calibration_parameters+0x14d8>)
    397a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][1] = -2.58710291323132e-09;
    397c:	f200 6334 	addw	r3, r0, #1588	; 0x634
    3980:	4aa8      	ldr	r2, [pc, #672]	; (3c24 <initialize_calibration_parameters+0x14dc>)
    3982:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][1] = -2.58670389947629e-13;
    3984:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
    3988:	4aa7      	ldr	r2, [pc, #668]	; (3c28 <initialize_calibration_parameters+0x14e0>)
    398a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][1] = -2.03404893219443e-08;
    398c:	f200 634c 	addw	r3, r0, #1612	; 0x64c
    3990:	4aa6      	ldr	r2, [pc, #664]	; (3c2c <initialize_calibration_parameters+0x14e4>)
    3992:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][1] = -0.000511635514302768;
    3994:	f500 63cb 	add.w	r3, r0, #1624	; 0x658
    3998:	4aa5      	ldr	r2, [pc, #660]	; (3c30 <initialize_calibration_parameters+0x14e8>)
    399a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][1] = 9.61644115019498e-14;
    399c:	f200 6364 	addw	r3, r0, #1636	; 0x664
    39a0:	4aa4      	ldr	r2, [pc, #656]	; (3c34 <initialize_calibration_parameters+0x14ec>)
    39a2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][1] = 6.18003096063301e-09;
    39a4:	f500 63ce 	add.w	r3, r0, #1648	; 0x670
    39a8:	4aa3      	ldr	r2, [pc, #652]	; (3c38 <initialize_calibration_parameters+0x14f0>)
    39aa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][1] = 0.000141905262441292;
    39ac:	f200 637c 	addw	r3, r0, #1660	; 0x67c
    39b0:	4aa2      	ldr	r2, [pc, #648]	; (3c3c <initialize_calibration_parameters+0x14f4>)
    39b2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][1] = 0.970799758392682;
    39b4:	f500 63d1 	add.w	r3, r0, #1672	; 0x688
    39b8:	4aa1      	ldr	r2, [pc, #644]	; (3c40 <initialize_calibration_parameters+0x14f8>)
    39ba:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Middle Sensor - Y Direction
			parameters_array->sensor_middleRight[0][1] = 4.00066022534234e-14;
    39bc:	f200 6394 	addw	r3, r0, #1684	; 0x694
    39c0:	4aa0      	ldr	r2, [pc, #640]	; (3c44 <initialize_calibration_parameters+0x14fc>)
    39c2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][1] = 4.63645522083018e-13;
    39c4:	f500 63d4 	add.w	r3, r0, #1696	; 0x6a0
    39c8:	4a9f      	ldr	r2, [pc, #636]	; (3c48 <initialize_calibration_parameters+0x1500>)
    39ca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][1] = 3.12316325608424e-13;
    39cc:	f200 63ac 	addw	r3, r0, #1708	; 0x6ac
    39d0:	4a9e      	ldr	r2, [pc, #632]	; (3c4c <initialize_calibration_parameters+0x1504>)
    39d2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][1] = 4.06259816007320e-09;
    39d4:	f500 63d7 	add.w	r3, r0, #1720	; 0x6b8
    39d8:	4a9d      	ldr	r2, [pc, #628]	; (3c50 <initialize_calibration_parameters+0x1508>)
    39da:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][1] = -1.89123325484569e-13;
    39dc:	f200 63c4 	addw	r3, r0, #1732	; 0x6c4
    39e0:	4a9c      	ldr	r2, [pc, #624]	; (3c54 <initialize_calibration_parameters+0x150c>)
    39e2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][1] = 4.74514075236477e-13;
    39e4:	f500 63da 	add.w	r3, r0, #1744	; 0x6d0
    39e8:	4a9b      	ldr	r2, [pc, #620]	; (3c58 <initialize_calibration_parameters+0x1510>)
    39ea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][1] = 8.11948683097446e-09;
    39ec:	f200 63dc 	addw	r3, r0, #1756	; 0x6dc
    39f0:	4a9a      	ldr	r2, [pc, #616]	; (3c5c <initialize_calibration_parameters+0x1514>)
    39f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][1] = -2.13704953077906e-13;
    39f4:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
    39f8:	4a99      	ldr	r2, [pc, #612]	; (3c60 <initialize_calibration_parameters+0x1518>)
    39fa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][1] = -7.61037763701267e-09;
    39fc:	f200 63f4 	addw	r3, r0, #1780	; 0x6f4
    3a00:	4a98      	ldr	r2, [pc, #608]	; (3c64 <initialize_calibration_parameters+0x151c>)
    3a02:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[9][1] = -7.11696846222789e-05;
    3a04:	f500 63e0 	add.w	r3, r0, #1792	; 0x700
    3a08:	4a97      	ldr	r2, [pc, #604]	; (3c68 <initialize_calibration_parameters+0x1520>)
    3a0a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][1] = 1.37900797711326e-13;
    3a0c:	f200 730c 	addw	r3, r0, #1804	; 0x70c
    3a10:	4a96      	ldr	r2, [pc, #600]	; (3c6c <initialize_calibration_parameters+0x1524>)
    3a12:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][1] = 5.83382624155489e-13;
    3a14:	f500 63e3 	add.w	r3, r0, #1816	; 0x718
    3a18:	4a95      	ldr	r2, [pc, #596]	; (3c70 <initialize_calibration_parameters+0x1528>)
    3a1a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][1] = 7.89057407527139e-09;
    3a1c:	f200 7324 	addw	r3, r0, #1828	; 0x724
    3a20:	4a94      	ldr	r2, [pc, #592]	; (3c74 <initialize_calibration_parameters+0x152c>)
    3a22:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][1] = -2.12996683059050e-13;
    3a24:	f500 63e6 	add.w	r3, r0, #1840	; 0x730
    3a28:	4a93      	ldr	r2, [pc, #588]	; (3c78 <initialize_calibration_parameters+0x1530>)
    3a2a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][1] = -2.13378797397057e-08;
    3a2c:	f200 733c 	addw	r3, r0, #1852	; 0x73c
    3a30:	4a92      	ldr	r2, [pc, #584]	; (3c7c <initialize_calibration_parameters+0x1534>)
    3a32:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][1] = -0.000535563319582853;
    3a34:	f500 63e9 	add.w	r3, r0, #1864	; 0x748
    3a38:	4a91      	ldr	r2, [pc, #580]	; (3c80 <initialize_calibration_parameters+0x1538>)
    3a3a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[16][1] = 1.45383817206026e-13;
    3a3c:	f200 7354 	addw	r3, r0, #1876	; 0x754
    3a40:	4a90      	ldr	r2, [pc, #576]	; (3c84 <initialize_calibration_parameters+0x153c>)
    3a42:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][1] = 7.07858247605955e-09;
    3a44:	f500 63ec 	add.w	r3, r0, #1888	; 0x760
    3a48:	4a8f      	ldr	r2, [pc, #572]	; (3c88 <initialize_calibration_parameters+0x1540>)
    3a4a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][1] = 0.000112818636905433;
    3a4c:	f200 736c 	addw	r3, r0, #1900	; 0x76c
    3a50:	4a8e      	ldr	r2, [pc, #568]	; (3c8c <initialize_calibration_parameters+0x1544>)
    3a52:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][1] = 0.620557897571275;
    3a54:	f500 63ef 	add.w	r3, r0, #1912	; 0x778
    3a58:	4a8d      	ldr	r2, [pc, #564]	; (3c90 <initialize_calibration_parameters+0x1548>)
    3a5a:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Bottom Sensor - Y Direction
			parameters_array->sensor_bottomRight[0][1] = -1.15454345771136e-13;
    3a5c:	f200 7384 	addw	r3, r0, #1924	; 0x784
    3a60:	4a8c      	ldr	r2, [pc, #560]	; (3c94 <initialize_calibration_parameters+0x154c>)
    3a62:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][1] = 2.26887060437289e-13;
    3a64:	f500 63f2 	add.w	r3, r0, #1936	; 0x790
    3a68:	4a8b      	ldr	r2, [pc, #556]	; (3c98 <initialize_calibration_parameters+0x1550>)
    3a6a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][1] = 3.96170159465907e-14;
    3a6c:	f200 739c 	addw	r3, r0, #1948	; 0x79c
    3a70:	4a8a      	ldr	r2, [pc, #552]	; (3c9c <initialize_calibration_parameters+0x1554>)
    3a72:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][1] = 5.87979052371661e-10;
    3a74:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
    3a78:	4a89      	ldr	r2, [pc, #548]	; (3ca0 <initialize_calibration_parameters+0x1558>)
    3a7a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][1] = -2.00491316324410e-13;
    3a7c:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
    3a80:	4a88      	ldr	r2, [pc, #544]	; (3ca4 <initialize_calibration_parameters+0x155c>)
    3a82:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][1] = 3.58454041282622e-13;
    3a84:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
    3a88:	4a87      	ldr	r2, [pc, #540]	; (3ca8 <initialize_calibration_parameters+0x1560>)
    3a8a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][1] = 8.05943315137272e-09;
    3a8c:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
    3a90:	4a86      	ldr	r2, [pc, #536]	; (3cac <initialize_calibration_parameters+0x1564>)
    3a92:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][1] = -9.54228366856918e-14;
    3a94:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
    3a98:	4a85      	ldr	r2, [pc, #532]	; (3cb0 <initialize_calibration_parameters+0x1568>)
    3a9a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][1] = -3.61305556292458e-09;
    3a9c:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
    3aa0:	4a84      	ldr	r2, [pc, #528]	; (3cb4 <initialize_calibration_parameters+0x156c>)
    3aa2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][1] = -3.38470650926924e-05;
    3aa4:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
    3aa8:	4a83      	ldr	r2, [pc, #524]	; (3cb8 <initialize_calibration_parameters+0x1570>)
    3aaa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][1] = -4.90030825725158e-15;
    3aac:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
    3ab0:	4a82      	ldr	r2, [pc, #520]	; (3cbc <initialize_calibration_parameters+0x1574>)
    3ab2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][1] = 8.08837369399183e-14;
    3ab4:	f600 0308 	addw	r3, r0, #2056	; 0x808
    3ab8:	4a81      	ldr	r2, [pc, #516]	; (3cc0 <initialize_calibration_parameters+0x1578>)
    3aba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][1] = -1.24092843075473e-09;
    3abc:	f600 0314 	addw	r3, r0, #2068	; 0x814
    3ac0:	4a80      	ldr	r2, [pc, #512]	; (3cc4 <initialize_calibration_parameters+0x157c>)
    3ac2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][1] = -2.12841538289245e-13;
    3ac4:	f500 6302 	add.w	r3, r0, #2080	; 0x820
    3ac8:	4a7f      	ldr	r2, [pc, #508]	; (3cc8 <initialize_calibration_parameters+0x1580>)
    3aca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][1] = -2.06735626109968e-08;
    3acc:	f600 032c 	addw	r3, r0, #2092	; 0x82c
    3ad0:	4a7e      	ldr	r2, [pc, #504]	; (3ccc <initialize_calibration_parameters+0x1584>)
    3ad2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][1] = -0.000532931211208284;
    3ad4:	f600 0338 	addw	r3, r0, #2104	; 0x838
    3ad8:	4a7d      	ldr	r2, [pc, #500]	; (3cd0 <initialize_calibration_parameters+0x1588>)
    3ada:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][1] = 2.16231295238863e-14;
    3adc:	f600 0344 	addw	r3, r0, #2116	; 0x844
    3ae0:	4a7c      	ldr	r2, [pc, #496]	; (3cd4 <initialize_calibration_parameters+0x158c>)
    3ae2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][1] = 2.08353609795385e-09;
    3ae4:	f500 6305 	add.w	r3, r0, #2128	; 0x850
    3ae8:	4a7b      	ldr	r2, [pc, #492]	; (3cd8 <initialize_calibration_parameters+0x1590>)
    3aea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][1] = 6.11123139956793e-05;
    3aec:	f600 035c 	addw	r3, r0, #2140	; 0x85c
    3af0:	4a7a      	ldr	r2, [pc, #488]	; (3cdc <initialize_calibration_parameters+0x1594>)
    3af2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][1] = 0.425798086182633;
    3af4:	f600 0368 	addw	r3, r0, #2152	; 0x868
    3af8:	4a79      	ldr	r2, [pc, #484]	; (3ce0 <initialize_calibration_parameters+0x1598>)
    3afa:	601a      	str	r2, [r3, #0]

			// SensorArray 1 Right Row - Top Sensor - Z Direction
			parameters_array->sensor_topRight[0][2] = 1.68240875948887e-13;
    3afc:	f500 63b5 	add.w	r3, r0, #1448	; 0x5a8
    3b00:	4a78      	ldr	r2, [pc, #480]	; (3ce4 <initialize_calibration_parameters+0x159c>)
    3b02:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][2] = -1.09198783659024e-13;
    3b04:	f200 53b4 	addw	r3, r0, #1460	; 0x5b4
    3b08:	4a77      	ldr	r2, [pc, #476]	; (3ce8 <initialize_calibration_parameters+0x15a0>)
    3b0a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][2] = 1.80040433490446e-12;
    3b0c:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
    3b10:	4a76      	ldr	r2, [pc, #472]	; (3cec <initialize_calibration_parameters+0x15a4>)
    3b12:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][2] = 9.80053052767661e-08;
    3b14:	f200 53cc 	addw	r3, r0, #1484	; 0x5cc
    3b18:	4a75      	ldr	r2, [pc, #468]	; (3cf0 <initialize_calibration_parameters+0x15a8>)
    3b1a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[4][2] = -5.51786738650371e-13;
    3b1c:	f500 63bb 	add.w	r3, r0, #1496	; 0x5d8
    3b20:	4a74      	ldr	r2, [pc, #464]	; (3cf4 <initialize_calibration_parameters+0x15ac>)
    3b22:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][2] = -4.01657613883611e-13;
    3b24:	f200 53e4 	addw	r3, r0, #1508	; 0x5e4
    3b28:	4a73      	ldr	r2, [pc, #460]	; (3cf8 <initialize_calibration_parameters+0x15b0>)
    3b2a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][2] = -9.92489051469349e-09;
    3b2c:	f500 63be 	add.w	r3, r0, #1520	; 0x5f0
    3b30:	4a72      	ldr	r2, [pc, #456]	; (3cfc <initialize_calibration_parameters+0x15b4>)
    3b32:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][2] = -1.50357103846653e-13;
    3b34:	f200 53fc 	addw	r3, r0, #1532	; 0x5fc
    3b38:	4a71      	ldr	r2, [pc, #452]	; (3d00 <initialize_calibration_parameters+0x15b8>)
    3b3a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][2] = -1.01994917536433e-08;
    3b3c:	f500 63c1 	add.w	r3, r0, #1544	; 0x608
    3b40:	4a70      	ldr	r2, [pc, #448]	; (3d04 <initialize_calibration_parameters+0x15bc>)
    3b42:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][2] = -0.000213933309782119;
    3b44:	f200 6314 	addw	r3, r0, #1556	; 0x614
    3b48:	4a6f      	ldr	r2, [pc, #444]	; (3d08 <initialize_calibration_parameters+0x15c0>)
    3b4a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][2] = -7.86053371208593e-13;
    3b4c:	f500 63c4 	add.w	r3, r0, #1568	; 0x620
    3b50:	4a6e      	ldr	r2, [pc, #440]	; (3d0c <initialize_calibration_parameters+0x15c4>)
    3b52:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[11][2] = -1.64713418671397e-13;
    3b54:	f200 632c 	addw	r3, r0, #1580	; 0x62c
    3b58:	4a6d      	ldr	r2, [pc, #436]	; (3d10 <initialize_calibration_parameters+0x15c8>)
    3b5a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][2] = 4.95963448409192e-08;
    3b5c:	f500 63c7 	add.w	r3, r0, #1592	; 0x638
    3b60:	4a6c      	ldr	r2, [pc, #432]	; (3d14 <initialize_calibration_parameters+0x15cc>)
    3b62:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][2] = -9.98014710276376e-13;
    3b64:	f200 6344 	addw	r3, r0, #1604	; 0x644
    3b68:	4a6b      	ldr	r2, [pc, #428]	; (3d18 <initialize_calibration_parameters+0x15d0>)
    3b6a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][2] = -5.35786372126596e-08;
    3b6c:	f500 63ca 	add.w	r3, r0, #1616	; 0x650
    3b70:	4a6a      	ldr	r2, [pc, #424]	; (3d1c <initialize_calibration_parameters+0x15d4>)
    3b72:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][2] = -0.000753449309693780;
    3b74:	f200 635c 	addw	r3, r0, #1628	; 0x65c
    3b78:	4a69      	ldr	r2, [pc, #420]	; (3d20 <initialize_calibration_parameters+0x15d8>)
    3b7a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][2] = 3.03119063292843e-13;
    3b7c:	f500 63cd 	add.w	r3, r0, #1640	; 0x668
    3b80:	4a68      	ldr	r2, [pc, #416]	; (3d24 <initialize_calibration_parameters+0x15dc>)
    3b82:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][2] = 2.81315055253996e-08;
    3b84:	f200 6374 	addw	r3, r0, #1652	; 0x674
    3b88:	4a67      	ldr	r2, [pc, #412]	; (3d28 <initialize_calibration_parameters+0x15e0>)
    3b8a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][2] = 9.53264831069041e-05;
    3b8c:	f500 63d0 	add.w	r3, r0, #1664	; 0x680
    3b90:	4a66      	ldr	r2, [pc, #408]	; (3d2c <initialize_calibration_parameters+0x15e4>)
    3b92:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][2] = -3.50997029964378;
    3b94:	f200 638c 	addw	r3, r0, #1676	; 0x68c
    3b98:	4a65      	ldr	r2, [pc, #404]	; (3d30 <initialize_calibration_parameters+0x15e8>)
    3b9a:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleRight[0][2] = -1.02952253870651e-13;
    3b9c:	f500 63d3 	add.w	r3, r0, #1688	; 0x698
    3ba0:	4a64      	ldr	r2, [pc, #400]	; (3d34 <initialize_calibration_parameters+0x15ec>)
    3ba2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][2] = 4.42255879999486e-13;
    3ba4:	f200 63a4 	addw	r3, r0, #1700	; 0x6a4
    3ba8:	4a63      	ldr	r2, [pc, #396]	; (3d38 <initialize_calibration_parameters+0x15f0>)
    3baa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][2] = 3.97624123593428e-12;
    3bac:	f500 63d6 	add.w	r3, r0, #1712	; 0x6b0
    3bb0:	4a62      	ldr	r2, [pc, #392]	; (3d3c <initialize_calibration_parameters+0x15f4>)
    3bb2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][2] = 1.68724950150810e-07;
    3bb4:	f200 63bc 	addw	r3, r0, #1724	; 0x6bc
    3bb8:	4a61      	ldr	r2, [pc, #388]	; (3d40 <initialize_calibration_parameters+0x15f8>)
    3bba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][2] = 8.61944861087471e-13;
    3bbc:	f500 63d9 	add.w	r3, r0, #1736	; 0x6c8
    3bc0:	4a60      	ldr	r2, [pc, #384]	; (3d44 <initialize_calibration_parameters+0x15fc>)
    3bc2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][2] = 3.58731099563620e-13;
    3bc4:	f200 63d4 	addw	r3, r0, #1748	; 0x6d4
    3bc8:	4a5f      	ldr	r2, [pc, #380]	; (3d48 <initialize_calibration_parameters+0x1600>)
    3bca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][2] = 8.71631429041871e-09;
    3bcc:	f500 63dc 	add.w	r3, r0, #1760	; 0x6e0
    3bd0:	4a5e      	ldr	r2, [pc, #376]	; (3d4c <initialize_calibration_parameters+0x1604>)
    3bd2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][2] = -1.44064088763364e-13;
    3bd4:	f200 63ec 	addw	r3, r0, #1772	; 0x6ec
    3bd8:	4a5d      	ldr	r2, [pc, #372]	; (3d50 <initialize_calibration_parameters+0x1608>)
    3bda:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][2] = -1.17904864945100e-08;
    3bdc:	f500 63df 	add.w	r3, r0, #1784	; 0x6f8
    3be0:	4a5c      	ldr	r2, [pc, #368]	; (3d54 <initialize_calibration_parameters+0x160c>)
    3be2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[9][2] = -0.000174270572965120;
    3be4:	f200 7304 	addw	r3, r0, #1796	; 0x704
    3be8:	4a5b      	ldr	r2, [pc, #364]	; (3d58 <initialize_calibration_parameters+0x1610>)
    3bea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][2] = -2.82549859834078e-13;
    3bec:	f500 63e2 	add.w	r3, r0, #1808	; 0x710
    3bf0:	4a5a      	ldr	r2, [pc, #360]	; (3d5c <initialize_calibration_parameters+0x1614>)
    3bf2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][2] = 1.26835666803744e-12;
    3bf4:	f200 731c 	addw	r3, r0, #1820	; 0x71c
    3bf8:	4a59      	ldr	r2, [pc, #356]	; (3d60 <initialize_calibration_parameters+0x1618>)
    3bfa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][2] = 1.15513110231312e-07;
    3bfc:	f500 63e5 	add.w	r3, r0, #1832	; 0x728
    3c00:	4a58      	ldr	r2, [pc, #352]	; (3d64 <initialize_calibration_parameters+0x161c>)
    3c02:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][2] = -1.29894474624870e-12;
    3c04:	f200 7334 	addw	r3, r0, #1844	; 0x734
    3c08:	4a57      	ldr	r2, [pc, #348]	; (3d68 <initialize_calibration_parameters+0x1620>)
    3c0a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][2] = -5.31623601769691e-08;
    3c0c:	f500 63e8 	add.w	r3, r0, #1856	; 0x740
    3c10:	4a56      	ldr	r2, [pc, #344]	; (3d6c <initialize_calibration_parameters+0x1624>)
    3c12:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][2] = -0.000568981575774752;
    3c14:	f200 734c 	addw	r3, r0, #1868	; 0x74c
    3c18:	4a55      	ldr	r2, [pc, #340]	; (3d70 <initialize_calibration_parameters+0x1628>)
    3c1a:	601a      	str	r2, [r3, #0]
    3c1c:	e0aa      	b.n	3d74 <initialize_calibration_parameters+0x162c>
    3c1e:	bf00      	nop
    3c20:	29159890 	.word	0x29159890
    3c24:	b131c8cc 	.word	0xb131c8cc
    3c28:	aa919e55 	.word	0xaa919e55
    3c2c:	b2aeb936 	.word	0xb2aeb936
    3c30:	ba061f47 	.word	0xba061f47
    3c34:	29d88b02 	.word	0x29d88b02
    3c38:	31d45821 	.word	0x31d45821
    3c3c:	3914cc67 	.word	0x3914cc67
    3c40:	3f788655 	.word	0x3f788655
    3c44:	29342c79 	.word	0x29342c79
    3c48:	2b02812e 	.word	0x2b02812e
    3c4c:	2aafd187 	.word	0x2aafd187
    3c50:	318b96fe 	.word	0x318b96fe
    3c54:	aa54ef16 	.word	0xaa54ef16
    3c58:	2b059058 	.word	0x2b059058
    3c5c:	320b7de1 	.word	0x320b7de1
    3c60:	aa709c42 	.word	0xaa709c42
    3c64:	b202becb 	.word	0xb202becb
    3c68:	b89540ef 	.word	0xb89540ef
    3c6c:	2a1b4333 	.word	0x2a1b4333
    3c70:	2b243526 	.word	0x2b243526
    3c74:	32078f1d 	.word	0x32078f1d
    3c78:	aa6fd01d 	.word	0xaa6fd01d
    3c7c:	b2b74a7e 	.word	0xb2b74a7e
    3c80:	ba0c650c 	.word	0xba0c650c
    3c84:	2a23b008 	.word	0x2a23b008
    3c88:	31f337df 	.word	0x31f337df
    3c8c:	38ec990b 	.word	0x38ec990b
    3c90:	3f1edce2 	.word	0x3f1edce2
    3c94:	aa01fd73 	.word	0xaa01fd73
    3c98:	2a7f73be 	.word	0x2a7f73be
    3c9c:	29326b4f 	.word	0x29326b4f
    3ca0:	30219f59 	.word	0x30219f59
    3ca4:	aa61bbb0 	.word	0xaa61bbb0
    3ca8:	2ac9caac 	.word	0x2ac9caac
    3cac:	320a75c3 	.word	0x320a75c3
    3cb0:	a9d6df85 	.word	0xa9d6df85
    3cb4:	b178498c 	.word	0xb178498c
    3cb8:	b80df702 	.word	0xb80df702
    3cbc:	a7b08d5e 	.word	0xa7b08d5e
    3cc0:	29b6224d 	.word	0x29b6224d
    3cc4:	b0aa8d4a 	.word	0xb0aa8d4a
    3cc8:	aa6fa366 	.word	0xaa6fa366
    3ccc:	b2b195a5 	.word	0xb2b195a5
    3cd0:	ba0bb468 	.word	0xba0bb468
    3cd4:	28c2c38b 	.word	0x28c2c38b
    3cd8:	310f2df4 	.word	0x310f2df4
    3cdc:	3880296c 	.word	0x3880296c
    3ce0:	3eda0235 	.word	0x3eda0235
    3ce4:	2a3d6c22 	.word	0x2a3d6c22
    3ce8:	a9f5e4d0 	.word	0xa9f5e4d0
    3cec:	2bfd6267 	.word	0x2bfd6267
    3cf0:	33d276fd 	.word	0x33d276fd
    3cf4:	ab1b506d 	.word	0xab1b506d
    3cf8:	aae21cf6 	.word	0xaae21cf6
    3cfc:	b22a8221 	.word	0xb22a8221
    3d00:	aa29497c 	.word	0xaa29497c
    3d04:	b22f39d7 	.word	0xb22f39d7
    3d08:	b9605349 	.word	0xb9605349
    3d0c:	ab5d411d 	.word	0xab5d411d
    3d10:	aa397369 	.word	0xaa397369
    3d14:	335503c2 	.word	0x335503c2
    3d18:	ab8c7545 	.word	0xab8c7545
    3d1c:	b3661e56 	.word	0xb3661e56
    3d20:	ba458321 	.word	0xba458321
    3d24:	2aaaa410 	.word	0x2aaaa410
    3d28:	32f1a5d6 	.word	0x32f1a5d6
    3d2c:	38c7ea04 	.word	0x38c7ea04
    3d30:	c060a35a 	.word	0xc060a35a
    3d34:	a9e7d3ef 	.word	0xa9e7d3ef
    3d38:	2af8f7ca 	.word	0x2af8f7ca
    3d3c:	2c8be6cc 	.word	0x2c8be6cc
    3d40:	34352ac3 	.word	0x34352ac3
    3d44:	2b729dac 	.word	0x2b729dac
    3d48:	2ac9f29a 	.word	0x2ac9f29a
    3d4c:	3215bec1 	.word	0x3215bec1
    3d50:	aa2233a6 	.word	0xaa2233a6
    3d54:	b24a8f1c 	.word	0xb24a8f1c
    3d58:	b936bc67 	.word	0xb936bc67
    3d5c:	aa9f0fba 	.word	0xaa9f0fba
    3d60:	2bb2815d 	.word	0x2bb2815d
    3d64:	33f81001 	.word	0x33f81001
    3d68:	abb6cf6b 	.word	0xabb6cf6b
    3d6c:	b36454a2 	.word	0xb36454a2
    3d70:	ba1527b5 	.word	0xba1527b5
			parameters_array->sensor_middleRight[16][2] = 1.32966689376809e-12;
    3d74:	f500 63eb 	add.w	r3, r0, #1880	; 0x758
    3d78:	4a2f      	ldr	r2, [pc, #188]	; (3e38 <initialize_calibration_parameters+0x16f0>)
    3d7a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][2] = 8.84295915374750e-08;
    3d7c:	f200 7364 	addw	r3, r0, #1892	; 0x764
    3d80:	4a2e      	ldr	r2, [pc, #184]	; (3e3c <initialize_calibration_parameters+0x16f4>)
    3d82:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][2] = 0.00103404886728369;
    3d84:	f500 63ee 	add.w	r3, r0, #1904	; 0x770
    3d88:	4a2d      	ldr	r2, [pc, #180]	; (3e40 <initialize_calibration_parameters+0x16f8>)
    3d8a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][2] = 2.46348893355434;
    3d8c:	f200 737c 	addw	r3, r0, #1916	; 0x77c
    3d90:	4a2c      	ldr	r2, [pc, #176]	; (3e44 <initialize_calibration_parameters+0x16fc>)
    3d92:	601a      	str	r2, [r3, #0]
			
			// SensorArray 1 Right Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomRight[0][2] = 7.96527932724247e-13;
    3d94:	f500 63f1 	add.w	r3, r0, #1928	; 0x788
    3d98:	4a2b      	ldr	r2, [pc, #172]	; (3e48 <initialize_calibration_parameters+0x1700>)
    3d9a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][2] = -1.11853442320427e-12;
    3d9c:	f200 7394 	addw	r3, r0, #1940	; 0x794
    3da0:	4a2a      	ldr	r2, [pc, #168]	; (3e4c <initialize_calibration_parameters+0x1704>)
    3da2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][2] = 1.14624197162136e-12;
    3da4:	f500 63f4 	add.w	r3, r0, #1952	; 0x7a0
    3da8:	4a29      	ldr	r2, [pc, #164]	; (3e50 <initialize_calibration_parameters+0x1708>)
    3daa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][2] = 7.90510981038764e-08;
    3dac:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
    3db0:	4a28      	ldr	r2, [pc, #160]	; (3e54 <initialize_calibration_parameters+0x170c>)
    3db2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][2] = 3.09269005342465e-12;
    3db4:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
    3db8:	4a27      	ldr	r2, [pc, #156]	; (3e58 <initialize_calibration_parameters+0x1710>)
    3dba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][2] = 3.12703927750509e-12;
    3dbc:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
    3dc0:	4a26      	ldr	r2, [pc, #152]	; (3e5c <initialize_calibration_parameters+0x1714>)
    3dc2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][2] = 8.25230374115939e-08;
    3dc4:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
    3dc8:	4a25      	ldr	r2, [pc, #148]	; (3e60 <initialize_calibration_parameters+0x1718>)
    3dca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][2] = 1.79262789124560e-12;
    3dcc:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
    3dd0:	4a24      	ldr	r2, [pc, #144]	; (3e64 <initialize_calibration_parameters+0x171c>)
    3dd2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][2] = 8.75185332811439e-08;
    3dd4:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
    3dd8:	4a23      	ldr	r2, [pc, #140]	; (3e68 <initialize_calibration_parameters+0x1720>)
    3dda:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][2] = 0.00109865143165812;
    3ddc:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
    3de0:	4a22      	ldr	r2, [pc, #136]	; (3e6c <initialize_calibration_parameters+0x1724>)
    3de2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][2] = -9.29066481960488e-13;
    3de4:	f500 6300 	add.w	r3, r0, #2048	; 0x800
    3de8:	4a21      	ldr	r2, [pc, #132]	; (3e70 <initialize_calibration_parameters+0x1728>)
    3dea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][2] = 7.94444185683472e-14;
    3dec:	f600 030c 	addw	r3, r0, #2060	; 0x80c
    3df0:	4a20      	ldr	r2, [pc, #128]	; (3e74 <initialize_calibration_parameters+0x172c>)
    3df2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][2] = 5.10199740656176e-08;
    3df4:	f600 0318 	addw	r3, r0, #2072	; 0x818
    3df8:	4a1f      	ldr	r2, [pc, #124]	; (3e78 <initialize_calibration_parameters+0x1730>)
    3dfa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][2] = -1.64028598918562e-12;
    3dfc:	f600 0324 	addw	r3, r0, #2084	; 0x824
    3e00:	4a1e      	ldr	r2, [pc, #120]	; (3e7c <initialize_calibration_parameters+0x1734>)
    3e02:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][2] = -8.87360980132996e-08;
    3e04:	f500 6303 	add.w	r3, r0, #2096	; 0x830
    3e08:	4a1d      	ldr	r2, [pc, #116]	; (3e80 <initialize_calibration_parameters+0x1738>)
    3e0a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][2] = -0.00120582598281044;
    3e0c:	f600 033c 	addw	r3, r0, #2108	; 0x83c
    3e10:	4a1c      	ldr	r2, [pc, #112]	; (3e84 <initialize_calibration_parameters+0x173c>)
    3e12:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][2] = 4.53474577621201e-13;
    3e14:	f600 0348 	addw	r3, r0, #2120	; 0x848
    3e18:	4a1b      	ldr	r2, [pc, #108]	; (3e88 <initialize_calibration_parameters+0x1740>)
    3e1a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][2] = 2.93661901213720e-08;
    3e1c:	f600 0354 	addw	r3, r0, #2132	; 0x854
    3e20:	4a1a      	ldr	r2, [pc, #104]	; (3e8c <initialize_calibration_parameters+0x1744>)
    3e22:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][2] = -0.000119403883600779;
    3e24:	f500 6306 	add.w	r3, r0, #2144	; 0x860
    3e28:	4a19      	ldr	r2, [pc, #100]	; (3e90 <initialize_calibration_parameters+0x1748>)
    3e2a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][2] = -6.73364038418712;
    3e2c:	f600 006c 	addw	r0, r0, #2156	; 0x86c
    3e30:	4b18      	ldr	r3, [pc, #96]	; (3e94 <initialize_calibration_parameters+0x174c>)
    3e32:	6003      	str	r3, [r0, #0]
			break;
    3e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e38:	2bbb224c 	.word	0x2bbb224c
    3e3c:	33bde6af 	.word	0x33bde6af
    3e40:	3a8788ec 	.word	0x3a8788ec
    3e44:	401da9cd 	.word	0x401da9cd
    3e48:	2b6033e3 	.word	0x2b6033e3
    3e4c:	ab9d6b73 	.word	0xab9d6b73
    3e50:	2ba151b8 	.word	0x2ba151b8
    3e54:	33a9c2cd 	.word	0x33a9c2cd
    3e58:	2c59a0f3 	.word	0x2c59a0f3
    3e5c:	2c5c0bbb 	.word	0x2c5c0bbb
    3e60:	33b13785 	.word	0x33b13785
    3e64:	2bfc4a3a 	.word	0x2bfc4a3a
    3e68:	33bbf1d3 	.word	0x33bbf1d3
    3e6c:	3a9000a0 	.word	0x3a9000a0
    3e70:	ab82c126 	.word	0xab82c126
    3e74:	29b2e497 	.word	0x29b2e497
    3e78:	335b210e 	.word	0x335b210e
    3e7c:	abe6d988 	.word	0xabe6d988
    3e80:	b3be8f30 	.word	0xb3be8f30
    3e84:	ba9e0cce 	.word	0xba9e0cce
    3e88:	2aff4893 	.word	0x2aff4893
    3e8c:	32fc40ef 	.word	0x32fc40ef
    3e90:	b8fa6879 	.word	0xb8fa6879
    3e94:	c0d779fb 	.word	0xc0d779fb
	
	case 2: ;
			// SensorArray 2 Parameters - Sensor Number 5 --------------------------------------------------------------------------------
			
			// Left Row - Top Sensor - X Direction
			parameters_array->sensor_topLeft[0][0] = -3.3654e-13;
    3e98:	4bb0      	ldr	r3, [pc, #704]	; (415c <initialize_calibration_parameters+0x1a14>)
    3e9a:	6003      	str	r3, [r0, #0]
			parameters_array->sensor_topLeft[1][0] = 6.1604e-13;
    3e9c:	4bb0      	ldr	r3, [pc, #704]	; (4160 <initialize_calibration_parameters+0x1a18>)
    3e9e:	60c3      	str	r3, [r0, #12]
			parameters_array->sensor_topLeft[2][0] = 3.6358e-13;
    3ea0:	4bb0      	ldr	r3, [pc, #704]	; (4164 <initialize_calibration_parameters+0x1a1c>)
    3ea2:	6183      	str	r3, [r0, #24]
			parameters_array->sensor_topLeft[3][0] = -8.0157e-09;
    3ea4:	4bb0      	ldr	r3, [pc, #704]	; (4168 <initialize_calibration_parameters+0x1a20>)
    3ea6:	6243      	str	r3, [r0, #36]	; 0x24
			parameters_array->sensor_topLeft[4][0] = -3.8624e-13;
    3ea8:	4bb0      	ldr	r3, [pc, #704]	; (416c <initialize_calibration_parameters+0x1a24>)
    3eaa:	6303      	str	r3, [r0, #48]	; 0x30
			parameters_array->sensor_topLeft[5][0] = -1.098e-12;
    3eac:	4bb0      	ldr	r3, [pc, #704]	; (4170 <initialize_calibration_parameters+0x1a28>)
    3eae:	63c3      	str	r3, [r0, #60]	; 0x3c
			parameters_array->sensor_topLeft[6][0] = -1.4167e-08;
    3eb0:	4bb0      	ldr	r3, [pc, #704]	; (4174 <initialize_calibration_parameters+0x1a2c>)
    3eb2:	6483      	str	r3, [r0, #72]	; 0x48
			parameters_array->sensor_topLeft[7][0] = -1.2404e-12;
    3eb4:	4bb0      	ldr	r3, [pc, #704]	; (4178 <initialize_calibration_parameters+0x1a30>)
    3eb6:	6543      	str	r3, [r0, #84]	; 0x54
			parameters_array->sensor_topLeft[8][0] = -5.7108e-08;
    3eb8:	4bb0      	ldr	r3, [pc, #704]	; (417c <initialize_calibration_parameters+0x1a34>)
    3eba:	6603      	str	r3, [r0, #96]	; 0x60
			parameters_array->sensor_topLeft[9][0] = -0.00087238;
    3ebc:	4bb0      	ldr	r3, [pc, #704]	; (4180 <initialize_calibration_parameters+0x1a38>)
    3ebe:	66c3      	str	r3, [r0, #108]	; 0x6c
			parameters_array->sensor_topLeft[10][0] = 1.7824e-12;
    3ec0:	4bb0      	ldr	r3, [pc, #704]	; (4184 <initialize_calibration_parameters+0x1a3c>)
    3ec2:	6783      	str	r3, [r0, #120]	; 0x78
			parameters_array->sensor_topLeft[11][0] = 9.2529e-13;
    3ec4:	4bb0      	ldr	r3, [pc, #704]	; (4188 <initialize_calibration_parameters+0x1a40>)
    3ec6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
			parameters_array->sensor_topLeft[12][0] = 7.1362e-09;
    3eca:	4bb0      	ldr	r3, [pc, #704]	; (418c <initialize_calibration_parameters+0x1a44>)
    3ecc:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
			parameters_array->sensor_topLeft[13][0] = 1.492e-12;
    3ed0:	4baf      	ldr	r3, [pc, #700]	; (4190 <initialize_calibration_parameters+0x1a48>)
    3ed2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
			parameters_array->sensor_topLeft[14][0] = 4.4869e-08;
    3ed6:	4baf      	ldr	r3, [pc, #700]	; (4194 <initialize_calibration_parameters+0x1a4c>)
    3ed8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
			parameters_array->sensor_topLeft[15][0] = 0.00034805;
    3edc:	4bae      	ldr	r3, [pc, #696]	; (4198 <initialize_calibration_parameters+0x1a50>)
    3ede:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
			parameters_array->sensor_topLeft[16][0] = 3.8618e-13;
    3ee2:	4bae      	ldr	r3, [pc, #696]	; (419c <initialize_calibration_parameters+0x1a54>)
    3ee4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
			parameters_array->sensor_topLeft[17][0] = 1.6756e-08;
    3ee8:	4bad      	ldr	r3, [pc, #692]	; (41a0 <initialize_calibration_parameters+0x1a58>)
    3eea:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
			parameters_array->sensor_topLeft[18][0] = 0.00033829;
    3eee:	4bad      	ldr	r3, [pc, #692]	; (41a4 <initialize_calibration_parameters+0x1a5c>)
    3ef0:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
			parameters_array->sensor_topLeft[19][0] = 2.4612;
    3ef4:	4bac      	ldr	r3, [pc, #688]	; (41a8 <initialize_calibration_parameters+0x1a60>)
    3ef6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
			
			// Left Row - Middle Sensor - X Direction
			parameters_array->sensor_middleLeft[0][0] = -6.0068e-14;
    3efa:	4bac      	ldr	r3, [pc, #688]	; (41ac <initialize_calibration_parameters+0x1a64>)
    3efc:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
			parameters_array->sensor_middleLeft[1][0] = 7.1668e-14;
    3f00:	4bab      	ldr	r3, [pc, #684]	; (41b0 <initialize_calibration_parameters+0x1a68>)
    3f02:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
			parameters_array->sensor_middleLeft[2][0] = -2.1854e-13;
    3f06:	4bab      	ldr	r3, [pc, #684]	; (41b4 <initialize_calibration_parameters+0x1a6c>)
    3f08:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
			parameters_array->sensor_middleLeft[3][0] = -3.998e-09;
    3f0c:	4baa      	ldr	r3, [pc, #680]	; (41b8 <initialize_calibration_parameters+0x1a70>)
    3f0e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
			parameters_array->sensor_middleLeft[4][0] = -3.6955e-14;
    3f12:	4baa      	ldr	r3, [pc, #680]	; (41bc <initialize_calibration_parameters+0x1a74>)
    3f14:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
			parameters_array->sensor_middleLeft[5][0] = 1.4329e-13;
    3f18:	4ba9      	ldr	r3, [pc, #676]	; (41c0 <initialize_calibration_parameters+0x1a78>)
    3f1a:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			parameters_array->sensor_middleLeft[6][0] = 2.9031e-09;
    3f1e:	4ba9      	ldr	r3, [pc, #676]	; (41c4 <initialize_calibration_parameters+0x1a7c>)
    3f20:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
			parameters_array->sensor_middleLeft[7][0] = -4.3931e-13;
    3f24:	4ba8      	ldr	r3, [pc, #672]	; (41c8 <initialize_calibration_parameters+0x1a80>)
    3f26:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
			parameters_array->sensor_middleLeft[8][0] = -2.7037e-08;
    3f2a:	4ba8      	ldr	r3, [pc, #672]	; (41cc <initialize_calibration_parameters+0x1a84>)
    3f2c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
			parameters_array->sensor_middleLeft[9][0] = -0.00058807;
    3f30:	4ba7      	ldr	r3, [pc, #668]	; (41d0 <initialize_calibration_parameters+0x1a88>)
    3f32:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
			parameters_array->sensor_middleLeft[10][0] = 2.4361e-13;
    3f36:	4ba7      	ldr	r3, [pc, #668]	; (41d4 <initialize_calibration_parameters+0x1a8c>)
    3f38:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
			parameters_array->sensor_middleLeft[11][0] = -1.9465e-13;
    3f3c:	4ba6      	ldr	r3, [pc, #664]	; (41d8 <initialize_calibration_parameters+0x1a90>)
    3f3e:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
			parameters_array->sensor_middleLeft[12][0] = -2.6875e-09;
    3f42:	4ba6      	ldr	r3, [pc, #664]	; (41dc <initialize_calibration_parameters+0x1a94>)
    3f44:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
			parameters_array->sensor_middleLeft[13][0] = 1.5804e-14;
    3f48:	4ba5      	ldr	r3, [pc, #660]	; (41e0 <initialize_calibration_parameters+0x1a98>)
    3f4a:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
			parameters_array->sensor_middleLeft[14][0] = -1.5105e-09;
    3f4e:	4ba5      	ldr	r3, [pc, #660]	; (41e4 <initialize_calibration_parameters+0x1a9c>)
    3f50:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
			parameters_array->sensor_middleLeft[15][0] = -2.6443e-05;
    3f54:	4ba4      	ldr	r3, [pc, #656]	; (41e8 <initialize_calibration_parameters+0x1aa0>)
    3f56:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
			parameters_array->sensor_middleLeft[16][0] = -9.8312e-14;
    3f5a:	4ba4      	ldr	r3, [pc, #656]	; (41ec <initialize_calibration_parameters+0x1aa4>)
    3f5c:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			parameters_array->sensor_middleLeft[17][0] = -6.1003e-09;
    3f60:	4ba3      	ldr	r3, [pc, #652]	; (41f0 <initialize_calibration_parameters+0x1aa8>)
    3f62:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			parameters_array->sensor_middleLeft[18][0] = -0.00010666;
    3f66:	4ba3      	ldr	r3, [pc, #652]	; (41f4 <initialize_calibration_parameters+0x1aac>)
    3f68:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
			parameters_array->sensor_middleLeft[19][0] = -0.18678;
    3f6c:	4ba2      	ldr	r3, [pc, #648]	; (41f8 <initialize_calibration_parameters+0x1ab0>)
    3f6e:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			
			// Left Row - Bottom Sensor - X Direction
			parameters_array->sensor_bottomLeft[0][0] = 7.8197e-13;
    3f72:	4ba2      	ldr	r3, [pc, #648]	; (41fc <initialize_calibration_parameters+0x1ab4>)
    3f74:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
			parameters_array->sensor_bottomLeft[1][0] = -3.7121e-13;
    3f78:	4ba1      	ldr	r3, [pc, #644]	; (4200 <initialize_calibration_parameters+0x1ab8>)
    3f7a:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
			parameters_array->sensor_bottomLeft[2][0] = -7.7578e-16;
    3f7e:	4ba1      	ldr	r3, [pc, #644]	; (4204 <initialize_calibration_parameters+0x1abc>)
    3f80:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
			parameters_array->sensor_bottomLeft[3][0] = 4.6519e-09;
    3f84:	4ba0      	ldr	r3, [pc, #640]	; (4208 <initialize_calibration_parameters+0x1ac0>)
    3f86:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
			parameters_array->sensor_bottomLeft[4][0] = 8.6011e-13;
    3f8a:	4ba0      	ldr	r3, [pc, #640]	; (420c <initialize_calibration_parameters+0x1ac4>)
    3f8c:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
			parameters_array->sensor_bottomLeft[5][0] = 1.1279e-13;
    3f90:	4b9f      	ldr	r3, [pc, #636]	; (4210 <initialize_calibration_parameters+0x1ac8>)
    3f92:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
			parameters_array->sensor_bottomLeft[6][0] = 6.7167e-09;
    3f96:	4b9f      	ldr	r3, [pc, #636]	; (4214 <initialize_calibration_parameters+0x1acc>)
    3f98:	f8c0 3228 	str.w	r3, [r0, #552]	; 0x228
			parameters_array->sensor_bottomLeft[7][0] = -7.7415e-13;
    3f9c:	4b9e      	ldr	r3, [pc, #632]	; (4218 <initialize_calibration_parameters+0x1ad0>)
    3f9e:	f8c0 3234 	str.w	r3, [r0, #564]	; 0x234
			parameters_array->sensor_bottomLeft[8][0] = -3.7369e-08;
    3fa2:	4b9e      	ldr	r3, [pc, #632]	; (421c <initialize_calibration_parameters+0x1ad4>)
    3fa4:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
			parameters_array->sensor_bottomLeft[9][0] = -0.00067286;
    3fa8:	4b9d      	ldr	r3, [pc, #628]	; (4220 <initialize_calibration_parameters+0x1ad8>)
    3faa:	f8c0 324c 	str.w	r3, [r0, #588]	; 0x24c
			parameters_array->sensor_bottomLeft[10][0] = -6.3676e-13;
    3fae:	4b9d      	ldr	r3, [pc, #628]	; (4224 <initialize_calibration_parameters+0x1adc>)
    3fb0:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
			parameters_array->sensor_bottomLeft[11][0] = 6.0188e-14;
    3fb4:	4b9c      	ldr	r3, [pc, #624]	; (4228 <initialize_calibration_parameters+0x1ae0>)
    3fb6:	f8c0 3264 	str.w	r3, [r0, #612]	; 0x264
			parameters_array->sensor_bottomLeft[12][0] = 4.3922e-09;
    3fba:	4b9c      	ldr	r3, [pc, #624]	; (422c <initialize_calibration_parameters+0x1ae4>)
    3fbc:	f8c0 3270 	str.w	r3, [r0, #624]	; 0x270
			parameters_array->sensor_bottomLeft[13][0] = -4.809e-13;
    3fc0:	4b9b      	ldr	r3, [pc, #620]	; (4230 <initialize_calibration_parameters+0x1ae8>)
    3fc2:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
			parameters_array->sensor_bottomLeft[14][0] = -1.3363e-08;
    3fc6:	4b9b      	ldr	r3, [pc, #620]	; (4234 <initialize_calibration_parameters+0x1aec>)
    3fc8:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
			parameters_array->sensor_bottomLeft[15][0] = -0.00010474;
    3fcc:	4b9a      	ldr	r3, [pc, #616]	; (4238 <initialize_calibration_parameters+0x1af0>)
    3fce:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
			parameters_array->sensor_bottomLeft[16][0] = -1.4955e-13;
    3fd2:	4b9a      	ldr	r3, [pc, #616]	; (423c <initialize_calibration_parameters+0x1af4>)
    3fd4:	f8c0 32a0 	str.w	r3, [r0, #672]	; 0x2a0
			parameters_array->sensor_bottomLeft[17][0] = -7.345e-09;
    3fd8:	4b99      	ldr	r3, [pc, #612]	; (4240 <initialize_calibration_parameters+0x1af8>)
    3fda:	f8c0 32ac 	str.w	r3, [r0, #684]	; 0x2ac
			parameters_array->sensor_bottomLeft[18][0] = -0.00016335;
    3fde:	4b99      	ldr	r3, [pc, #612]	; (4244 <initialize_calibration_parameters+0x1afc>)
    3fe0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
			parameters_array->sensor_bottomLeft[19][0] = -0.76893;
    3fe4:	4b98      	ldr	r3, [pc, #608]	; (4248 <initialize_calibration_parameters+0x1b00>)
    3fe6:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
			
			// Left Row - Top Sensor - Y Direction
			parameters_array->sensor_topLeft[0][1] = -2.1351e-13;
    3fea:	4b98      	ldr	r3, [pc, #608]	; (424c <initialize_calibration_parameters+0x1b04>)
    3fec:	6043      	str	r3, [r0, #4]
			parameters_array->sensor_topLeft[1][1] = 5.7772e-13;
    3fee:	4b98      	ldr	r3, [pc, #608]	; (4250 <initialize_calibration_parameters+0x1b08>)
    3ff0:	6103      	str	r3, [r0, #16]
			parameters_array->sensor_topLeft[2][1] = -1.9106e-12;
    3ff2:	4b98      	ldr	r3, [pc, #608]	; (4254 <initialize_calibration_parameters+0x1b0c>)
    3ff4:	61c3      	str	r3, [r0, #28]
			parameters_array->sensor_topLeft[3][1] = -3.2308e-08;
    3ff6:	4b98      	ldr	r3, [pc, #608]	; (4258 <initialize_calibration_parameters+0x1b10>)
    3ff8:	6283      	str	r3, [r0, #40]	; 0x28
			parameters_array->sensor_topLeft[4][1] = 3.1745e-13;
    3ffa:	4b98      	ldr	r3, [pc, #608]	; (425c <initialize_calibration_parameters+0x1b14>)
    3ffc:	6343      	str	r3, [r0, #52]	; 0x34
			parameters_array->sensor_topLeft[5][1] = -8.8881e-14;
    3ffe:	4b98      	ldr	r3, [pc, #608]	; (4260 <initialize_calibration_parameters+0x1b18>)
    4000:	6403      	str	r3, [r0, #64]	; 0x40
			parameters_array->sensor_topLeft[6][1] = 1.6155e-09;
    4002:	4b98      	ldr	r3, [pc, #608]	; (4264 <initialize_calibration_parameters+0x1b1c>)
    4004:	64c3      	str	r3, [r0, #76]	; 0x4c
			parameters_array->sensor_topLeft[7][1] = 3.3894e-13;
    4006:	4b98      	ldr	r3, [pc, #608]	; (4268 <initialize_calibration_parameters+0x1b20>)
    4008:	6583      	str	r3, [r0, #88]	; 0x58
			parameters_array->sensor_topLeft[8][1] = 1.5917e-08;
    400a:	4b98      	ldr	r3, [pc, #608]	; (426c <initialize_calibration_parameters+0x1b24>)
    400c:	6643      	str	r3, [r0, #100]	; 0x64
			parameters_array->sensor_topLeft[9][1] = 0.00019244;
    400e:	4b98      	ldr	r3, [pc, #608]	; (4270 <initialize_calibration_parameters+0x1b28>)
    4010:	6703      	str	r3, [r0, #112]	; 0x70
			parameters_array->sensor_topLeft[10][1] = -1.1295e-12;
    4012:	4b98      	ldr	r3, [pc, #608]	; (4274 <initialize_calibration_parameters+0x1b2c>)
    4014:	67c3      	str	r3, [r0, #124]	; 0x7c
			parameters_array->sensor_topLeft[11][1] = -1.8218e-12;
    4016:	4b98      	ldr	r3, [pc, #608]	; (4278 <initialize_calibration_parameters+0x1b30>)
    4018:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
			parameters_array->sensor_topLeft[12][1] = -4.5426e-08;
    401c:	4b97      	ldr	r3, [pc, #604]	; (427c <initialize_calibration_parameters+0x1b34>)
    401e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
			parameters_array->sensor_topLeft[13][1] = -6.0186e-13;
    4022:	4b97      	ldr	r3, [pc, #604]	; (4280 <initialize_calibration_parameters+0x1b38>)
    4024:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
			parameters_array->sensor_topLeft[14][1] = -3.839e-08;
    4028:	4b96      	ldr	r3, [pc, #600]	; (4284 <initialize_calibration_parameters+0x1b3c>)
    402a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
			parameters_array->sensor_topLeft[15][1] = -0.00074844;
    402e:	4b96      	ldr	r3, [pc, #600]	; (4288 <initialize_calibration_parameters+0x1b40>)
    4030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
			parameters_array->sensor_topLeft[16][1] = 7.9606e-13;
    4034:	4b95      	ldr	r3, [pc, #596]	; (428c <initialize_calibration_parameters+0x1b44>)
    4036:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
			parameters_array->sensor_topLeft[17][1] = 3.902e-08;
    403a:	4b95      	ldr	r3, [pc, #596]	; (4290 <initialize_calibration_parameters+0x1b48>)
    403c:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
			parameters_array->sensor_topLeft[18][1] = 0.00068041;
    4040:	4b94      	ldr	r3, [pc, #592]	; (4294 <initialize_calibration_parameters+0x1b4c>)
    4042:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
			parameters_array->sensor_topLeft[19][1] = 3.581;
    4046:	4b94      	ldr	r3, [pc, #592]	; (4298 <initialize_calibration_parameters+0x1b50>)
    4048:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
			
			// Left Row - Middle Sensor - Y Direction
			parameters_array->sensor_middleLeft[0][1] = 4.2505e-13;
    404c:	4b93      	ldr	r3, [pc, #588]	; (429c <initialize_calibration_parameters+0x1b54>)
    404e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
			parameters_array->sensor_middleLeft[1][1] = 1.0153e-13;
    4052:	4b93      	ldr	r3, [pc, #588]	; (42a0 <initialize_calibration_parameters+0x1b58>)
    4054:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
			parameters_array->sensor_middleLeft[2][1] = -7.6803e-13;
    4058:	4b92      	ldr	r3, [pc, #584]	; (42a4 <initialize_calibration_parameters+0x1b5c>)
    405a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
			parameters_array->sensor_middleLeft[3][1] = -2.3348e-08;
    405e:	4b92      	ldr	r3, [pc, #584]	; (42a8 <initialize_calibration_parameters+0x1b60>)
    4060:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
			parameters_array->sensor_middleLeft[4][1] = 1.4112e-13;
    4064:	4b91      	ldr	r3, [pc, #580]	; (42ac <initialize_calibration_parameters+0x1b64>)
    4066:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			parameters_array->sensor_middleLeft[5][1] = -1.0874e-13;
    406a:	4b91      	ldr	r3, [pc, #580]	; (42b0 <initialize_calibration_parameters+0x1b68>)
    406c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			parameters_array->sensor_middleLeft[6][1] = -7.813e-10;
    4070:	4b90      	ldr	r3, [pc, #576]	; (42b4 <initialize_calibration_parameters+0x1b6c>)
    4072:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
			parameters_array->sensor_middleLeft[7][1] = -2.076e-13;
    4076:	4b90      	ldr	r3, [pc, #576]	; (42b8 <initialize_calibration_parameters+0x1b70>)
    4078:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
			parameters_array->sensor_middleLeft[8][1] = -5.8722e-09;
    407c:	4b8f      	ldr	r3, [pc, #572]	; (42bc <initialize_calibration_parameters+0x1b74>)
    407e:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
			parameters_array->sensor_middleLeft[9][1] = -2.8981e-05;
    4082:	4b8f      	ldr	r3, [pc, #572]	; (42c0 <initialize_calibration_parameters+0x1b78>)
    4084:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
			parameters_array->sensor_middleLeft[10][1] = -3.1084e-13;
    4088:	4b8e      	ldr	r3, [pc, #568]	; (42c4 <initialize_calibration_parameters+0x1b7c>)
    408a:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
			parameters_array->sensor_middleLeft[11][1] = -1.038e-12;
    408e:	4b8e      	ldr	r3, [pc, #568]	; (42c8 <initialize_calibration_parameters+0x1b80>)
    4090:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
			parameters_array->sensor_middleLeft[12][1] = -3.283e-08;
    4094:	4b8d      	ldr	r3, [pc, #564]	; (42cc <initialize_calibration_parameters+0x1b84>)
    4096:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
			parameters_array->sensor_middleLeft[13][1] = -3.4386e-13;
    409a:	4b8d      	ldr	r3, [pc, #564]	; (42d0 <initialize_calibration_parameters+0x1b88>)
    409c:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
			parameters_array->sensor_middleLeft[14][1] = -2.3997e-08;
    40a0:	4b8c      	ldr	r3, [pc, #560]	; (42d4 <initialize_calibration_parameters+0x1b8c>)
    40a2:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			parameters_array->sensor_middleLeft[15][1] = -0.00057184;
    40a6:	4b8c      	ldr	r3, [pc, #560]	; (42d8 <initialize_calibration_parameters+0x1b90>)
    40a8:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
			parameters_array->sensor_middleLeft[16][1] = 6.9295e-14;
    40ac:	4b8b      	ldr	r3, [pc, #556]	; (42dc <initialize_calibration_parameters+0x1b94>)
    40ae:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
			parameters_array->sensor_middleLeft[17][1] = 5.8418e-09;
    40b2:	4b8b      	ldr	r3, [pc, #556]	; (42e0 <initialize_calibration_parameters+0x1b98>)
    40b4:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
			parameters_array->sensor_middleLeft[18][1] = 0.00021431;
    40b8:	4b8a      	ldr	r3, [pc, #552]	; (42e4 <initialize_calibration_parameters+0x1b9c>)
    40ba:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
			parameters_array->sensor_middleLeft[19][1] = 1.4814;
    40be:	4b8a      	ldr	r3, [pc, #552]	; (42e8 <initialize_calibration_parameters+0x1ba0>)
    40c0:	f8c0 31d8 	str.w	r3, [r0, #472]	; 0x1d8
			
			// Left Row - Bottom Sensor - Y Direction
			parameters_array->sensor_bottomLeft[0][1] = 8.2731e-13;
    40c4:	4b89      	ldr	r3, [pc, #548]	; (42ec <initialize_calibration_parameters+0x1ba4>)
    40c6:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
			parameters_array->sensor_bottomLeft[1][1] = 5.5088e-13;
    40ca:	4b89      	ldr	r3, [pc, #548]	; (42f0 <initialize_calibration_parameters+0x1ba8>)
    40cc:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
			parameters_array->sensor_bottomLeft[2][1] = -4.1505e-13;
    40d0:	4b88      	ldr	r3, [pc, #544]	; (42f4 <initialize_calibration_parameters+0x1bac>)
    40d2:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
			parameters_array->sensor_bottomLeft[3][1] = -1.7702e-08;
    40d6:	4b88      	ldr	r3, [pc, #544]	; (42f8 <initialize_calibration_parameters+0x1bb0>)
    40d8:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
			parameters_array->sensor_bottomLeft[4][1] = 9.9289e-13;
    40dc:	4b87      	ldr	r3, [pc, #540]	; (42fc <initialize_calibration_parameters+0x1bb4>)
    40de:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
			parameters_array->sensor_bottomLeft[5][1] = 5.079e-13;
    40e2:	4b87      	ldr	r3, [pc, #540]	; (4300 <initialize_calibration_parameters+0x1bb8>)
    40e4:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
			parameters_array->sensor_bottomLeft[6][1] = 7.4927e-09;
    40e8:	4b86      	ldr	r3, [pc, #536]	; (4304 <initialize_calibration_parameters+0x1bbc>)
    40ea:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
			parameters_array->sensor_bottomLeft[7][1] = -5.7872e-13;
    40ee:	4b86      	ldr	r3, [pc, #536]	; (4308 <initialize_calibration_parameters+0x1bc0>)
    40f0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
			parameters_array->sensor_bottomLeft[8][1] = -1.9242e-08;
    40f4:	4b85      	ldr	r3, [pc, #532]	; (430c <initialize_calibration_parameters+0x1bc4>)
    40f6:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
			parameters_array->sensor_bottomLeft[9][1] = -0.00016144;
    40fa:	4b85      	ldr	r3, [pc, #532]	; (4310 <initialize_calibration_parameters+0x1bc8>)
    40fc:	f8c0 3250 	str.w	r3, [r0, #592]	; 0x250
			parameters_array->sensor_bottomLeft[10][1] = -4.16e-14;
    4100:	4b84      	ldr	r3, [pc, #528]	; (4314 <initialize_calibration_parameters+0x1bcc>)
    4102:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
			parameters_array->sensor_bottomLeft[11][1] = -1.1141e-12;
    4106:	4b84      	ldr	r3, [pc, #528]	; (4318 <initialize_calibration_parameters+0x1bd0>)
    4108:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
			parameters_array->sensor_bottomLeft[12][1] = -3.0544e-08;
    410c:	4b83      	ldr	r3, [pc, #524]	; (431c <initialize_calibration_parameters+0x1bd4>)
    410e:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
			parameters_array->sensor_bottomLeft[13][1] = -8.8814e-13;
    4112:	4b83      	ldr	r3, [pc, #524]	; (4320 <initialize_calibration_parameters+0x1bd8>)
    4114:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
			parameters_array->sensor_bottomLeft[14][1] = -4.2215e-08;
    4118:	4b82      	ldr	r3, [pc, #520]	; (4324 <initialize_calibration_parameters+0x1bdc>)
    411a:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
			parameters_array->sensor_bottomLeft[15][1] = -0.00070078;
    411e:	4b82      	ldr	r3, [pc, #520]	; (4328 <initialize_calibration_parameters+0x1be0>)
    4120:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
			parameters_array->sensor_bottomLeft[16][1] = 9.1167e-14;
    4124:	4b81      	ldr	r3, [pc, #516]	; (432c <initialize_calibration_parameters+0x1be4>)
    4126:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
			parameters_array->sensor_bottomLeft[17][1] = 8.1666e-09;
    412a:	4b81      	ldr	r3, [pc, #516]	; (4330 <initialize_calibration_parameters+0x1be8>)
    412c:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
			parameters_array->sensor_bottomLeft[18][1] = 0.0002326;
    4130:	4b80      	ldr	r3, [pc, #512]	; (4334 <initialize_calibration_parameters+0x1bec>)
    4132:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
			parameters_array->sensor_bottomLeft[19][1] = 1.488;
    4136:	4b80      	ldr	r3, [pc, #512]	; (4338 <initialize_calibration_parameters+0x1bf0>)
    4138:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
			
			// Left Row - Top Sensor - Z Direction
			parameters_array->sensor_topLeft[0][2] = 2.7224e-12;
    413c:	4b7f      	ldr	r3, [pc, #508]	; (433c <initialize_calibration_parameters+0x1bf4>)
    413e:	6083      	str	r3, [r0, #8]
			parameters_array->sensor_topLeft[1][2] = -5.5958e-12;
    4140:	4b7f      	ldr	r3, [pc, #508]	; (4340 <initialize_calibration_parameters+0x1bf8>)
    4142:	6143      	str	r3, [r0, #20]
			parameters_array->sensor_topLeft[2][2] = 9.2778e-12;
    4144:	4b7f      	ldr	r3, [pc, #508]	; (4344 <initialize_calibration_parameters+0x1bfc>)
    4146:	6203      	str	r3, [r0, #32]
			parameters_array->sensor_topLeft[3][2] = 3.0986e-07;
    4148:	4b7f      	ldr	r3, [pc, #508]	; (4348 <initialize_calibration_parameters+0x1c00>)
    414a:	62c3      	str	r3, [r0, #44]	; 0x2c
			parameters_array->sensor_topLeft[4][2] = -2.5363e-12;
    414c:	4b7f      	ldr	r3, [pc, #508]	; (434c <initialize_calibration_parameters+0x1c04>)
    414e:	6383      	str	r3, [r0, #56]	; 0x38
			parameters_array->sensor_topLeft[5][2] = -2.0213e-12;
    4150:	4b7f      	ldr	r3, [pc, #508]	; (4350 <initialize_calibration_parameters+0x1c08>)
    4152:	6443      	str	r3, [r0, #68]	; 0x44
			parameters_array->sensor_topLeft[6][2] = -4.2912e-08;
    4154:	4b7f      	ldr	r3, [pc, #508]	; (4354 <initialize_calibration_parameters+0x1c0c>)
    4156:	6503      	str	r3, [r0, #80]	; 0x50
    4158:	e0fe      	b.n	4358 <initialize_calibration_parameters+0x1c10>
    415a:	bf00      	nop
    415c:	aabd7487 	.word	0xaabd7487
    4160:	2b2d665c 	.word	0x2b2d665c
    4164:	2accad66 	.word	0x2accad66
    4168:	b209b56c 	.word	0xb209b56c
    416c:	aad96f0d 	.word	0xaad96f0d
    4170:	ab9a879e 	.word	0xab9a879e
    4174:	b2736320 	.word	0xb2736320
    4178:	abae921f 	.word	0xabae921f
    417c:	b37546e9 	.word	0xb37546e9
    4180:	ba64b06e 	.word	0xba64b06e
    4184:	2bfad9ba 	.word	0x2bfad9ba
    4188:	2b823916 	.word	0x2b823916
    418c:	31f532ae 	.word	0x31f532ae
    4190:	2bd1faf7 	.word	0x2bd1faf7
    4194:	3340b5fd 	.word	0x3340b5fd
    4198:	39b67a7b 	.word	0x39b67a7b
    419c:	2ad96667 	.word	0x2ad96667
    41a0:	328feed5 	.word	0x328feed5
    41a4:	39b15c84 	.word	0x39b15c84
    41a8:	401d844d 	.word	0x401d844d
    41ac:	a98742d8 	.word	0xa98742d8
    41b0:	29a161ca 	.word	0x29a161ca
    41b4:	aa760dde 	.word	0xaa760dde
    41b8:	b1895ec8 	.word	0xb1895ec8
    41bc:	a9266e37 	.word	0xa9266e37
    41c0:	2a215488 	.word	0x2a215488
    41c4:	31477fe0 	.word	0x31477fe0
    41c8:	aaf74f3e 	.word	0xaaf74f3e
    41cc:	b2e83efe 	.word	0xb2e83efe
    41d0:	ba1a28b6 	.word	0xba1a28b6
    41d4:	2a8923e7 	.word	0x2a8923e7
    41d8:	aa5b280b 	.word	0xaa5b280b
    41dc:	b138af00 	.word	0xb138af00
    41e0:	288e598b 	.word	0x288e598b
    41e4:	b0cf99fe 	.word	0xb0cf99fe
    41e8:	b7ddd1e9 	.word	0xb7ddd1e9
    41ec:	a9dd6102 	.word	0xa9dd6102
    41f0:	b1d19ace 	.word	0xb1d19ace
    41f4:	b8dfaea7 	.word	0xb8dfaea7
    41f8:	be3f4342 	.word	0xbe3f4342
    41fc:	2b5c1ae0 	.word	0x2b5c1ae0
    4200:	aad0f900 	.word	0xaad0f900
    4204:	a65f9a76 	.word	0xa65f9a76
    4208:	319fd68c 	.word	0x319fd68c
    420c:	2b721975 	.word	0x2b721975
    4210:	29fdfb02 	.word	0x29fdfb02
    4214:	31e6c8b8 	.word	0x31e6c8b8
    4218:	ab59e763 	.word	0xab59e763
    421c:	b3207fa6 	.word	0xb3207fa6
    4220:	ba3062df 	.word	0xba3062df
    4224:	ab333b65 	.word	0xab333b65
    4228:	29878805 	.word	0x29878805
    422c:	3196ea33 	.word	0x3196ea33
    4230:	ab075c7f 	.word	0xab075c7f
    4234:	b2659318 	.word	0xb2659318
    4238:	b8dba7dc 	.word	0xb8dba7dc
    423c:	aa2860da 	.word	0xaa2860da
    4240:	b1fc5f4e 	.word	0xb1fc5f4e
    4244:	b92b48ef 	.word	0xb92b48ef
    4248:	bf44d899 	.word	0xbf44d899
    424c:	aa706411 	.word	0xaa706411
    4250:	2b229d1d 	.word	0x2b229d1d
    4254:	ac06724f 	.word	0xac06724f
    4258:	b30ac306 	.word	0xb30ac306
    425c:	2ab2b55e 	.word	0x2ab2b55e
    4260:	a9c82468 	.word	0xa9c82468
    4264:	30de085a 	.word	0x30de085a
    4268:	2abece67 	.word	0x2abece67
    426c:	3288b9da 	.word	0x3288b9da
    4270:	3949c9b8 	.word	0x3949c9b8
    4274:	ab9ef687 	.word	0xab9ef687
    4278:	ac0032a2 	.word	0xac0032a2
    427c:	b3431a6a 	.word	0xb3431a6a
    4280:	ab296895 	.word	0xab296895
    4284:	b324e240 	.word	0xb324e240
    4288:	ba4432f5 	.word	0xba4432f5
    428c:	2b60122b 	.word	0x2b60122b
    4290:	332796f2 	.word	0x332796f2
    4294:	3a325d8b 	.word	0x3a325d8b
    4298:	40652f1b 	.word	0x40652f1b
    429c:	2aef4829 	.word	0x2aef4829
    42a0:	29e4a00f 	.word	0x29e4a00f
    42a4:	ab582e65 	.word	0xab582e65
    42a8:	b2c88ecc 	.word	0xb2c88ecc
    42ac:	2a1ee312 	.word	0x2a1ee312
    42b0:	a9f4dc58 	.word	0xa9f4dc58
    42b4:	b056c31a 	.word	0xb056c31a
    42b8:	aa69bca0 	.word	0xaa69bca0
    42bc:	b1c9c46b 	.word	0xb1c9c46b
    42c0:	b7f31c39 	.word	0xb7f31c39
    42c4:	aaaefcc4 	.word	0xaaaefcc4
    42c8:	ab9215e4 	.word	0xab9215e4
    42cc:	b30d00f7 	.word	0xb30d00f7
    42d0:	aac19373 	.word	0xaac19373
    42d4:	b2ce21f6 	.word	0xb2ce21f6
    42d8:	ba15e788 	.word	0xba15e788
    42dc:	299c09d9 	.word	0x299c09d9
    42e0:	31c8b904 	.word	0x31c8b904
    42e4:	3960b867 	.word	0x3960b867
    42e8:	3fbd9e84 	.word	0x3fbd9e84
    42ec:	2b68ddf8 	.word	0x2b68ddf8
    42f0:	2b1b0f16 	.word	0x2b1b0f16
    42f4:	aae9a702 	.word	0xaae9a702
    42f8:	b2980f1c 	.word	0xb2980f1c
    42fc:	2b8bbca2 	.word	0x2b8bbca2
    4300:	2b0ef60d 	.word	0x2b0ef60d
    4304:	3200b93e 	.word	0x3200b93e
    4308:	ab22e52c 	.word	0xab22e52c
    430c:	b2a5499b 	.word	0xb2a5499b
    4310:	b9294838 	.word	0xb9294838
    4314:	a93b5989 	.word	0xa93b5989
    4318:	ab9ccbaf 	.word	0xab9ccbaf
    431c:	b3032f7c 	.word	0xb3032f7c
    4320:	ab79fd3b 	.word	0xab79fd3b
    4324:	b3354fe2 	.word	0xb3354fe2
    4328:	ba37b48d 	.word	0xba37b48d
    432c:	29cd4a33 	.word	0x29cd4a33
    4330:	320c4d16 	.word	0x320c4d16
    4334:	3973e616 	.word	0x3973e616
    4338:	3fbe76c9 	.word	0x3fbe76c9
    433c:	2c3f9266 	.word	0x2c3f9266
    4340:	acc4e27c 	.word	0xacc4e27c
    4344:	2d23377f 	.word	0x2d23377f
    4348:	34a65ad6 	.word	0x34a65ad6
    434c:	ac3279eb 	.word	0xac3279eb
    4350:	ac0e3c81 	.word	0xac0e3c81
    4354:	b3384e3e 	.word	0xb3384e3e
			parameters_array->sensor_topLeft[7][2] = -2.6257e-12;
    4358:	4bb5      	ldr	r3, [pc, #724]	; (4630 <initialize_calibration_parameters+0x1ee8>)
    435a:	65c3      	str	r3, [r0, #92]	; 0x5c
			parameters_array->sensor_topLeft[8][2] = -1.0312e-07;
    435c:	4bb5      	ldr	r3, [pc, #724]	; (4634 <initialize_calibration_parameters+0x1eec>)
    435e:	6683      	str	r3, [r0, #104]	; 0x68
			parameters_array->sensor_topLeft[9][2] = -0.0011977;
    4360:	4bb5      	ldr	r3, [pc, #724]	; (4638 <initialize_calibration_parameters+0x1ef0>)
    4362:	6743      	str	r3, [r0, #116]	; 0x74
			parameters_array->sensor_topLeft[10][2] = -1.3032e-11;
    4364:	4bb5      	ldr	r3, [pc, #724]	; (463c <initialize_calibration_parameters+0x1ef4>)
    4366:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			parameters_array->sensor_topLeft[11][2] = 4.5005e-12;
    436a:	4bb5      	ldr	r3, [pc, #724]	; (4640 <initialize_calibration_parameters+0x1ef8>)
    436c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
			parameters_array->sensor_topLeft[12][2] = 2.1907e-07;
    4370:	4bb4      	ldr	r3, [pc, #720]	; (4644 <initialize_calibration_parameters+0x1efc>)
    4372:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
			parameters_array->sensor_topLeft[13][2] = -5.5463e-12;
    4376:	4bb4      	ldr	r3, [pc, #720]	; (4648 <initialize_calibration_parameters+0x1f00>)
    4378:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
			parameters_array->sensor_topLeft[14][2] = -1.5953e-07;
    437c:	4bb3      	ldr	r3, [pc, #716]	; (464c <initialize_calibration_parameters+0x1f04>)
    437e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
			parameters_array->sensor_topLeft[15][2] = -0.0013807;
    4382:	4bb3      	ldr	r3, [pc, #716]	; (4650 <initialize_calibration_parameters+0x1f08>)
    4384:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
			parameters_array->sensor_topLeft[16][2] = 8.6442e-13;
    4388:	4bb2      	ldr	r3, [pc, #712]	; (4654 <initialize_calibration_parameters+0x1f0c>)
    438a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
			parameters_array->sensor_topLeft[17][2] = 5.8621e-08;
    438e:	4bb2      	ldr	r3, [pc, #712]	; (4658 <initialize_calibration_parameters+0x1f10>)
    4390:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
			parameters_array->sensor_topLeft[18][2] = -0.00029767;
    4394:	4bb1      	ldr	r3, [pc, #708]	; (465c <initialize_calibration_parameters+0x1f14>)
    4396:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
			parameters_array->sensor_topLeft[19][2] = -7.7834;
    439a:	4bb1      	ldr	r3, [pc, #708]	; (4660 <initialize_calibration_parameters+0x1f18>)
    439c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
			
			// Left Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleLeft[0][2] = -8.3115e-13;
    43a0:	4bb0      	ldr	r3, [pc, #704]	; (4664 <initialize_calibration_parameters+0x1f1c>)
    43a2:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
			parameters_array->sensor_middleLeft[1][2] = -5.6817e-13;
    43a6:	4bb0      	ldr	r3, [pc, #704]	; (4668 <initialize_calibration_parameters+0x1f20>)
    43a8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
			parameters_array->sensor_middleLeft[2][2] = 6.1338e-12;
    43ac:	4baf      	ldr	r3, [pc, #700]	; (466c <initialize_calibration_parameters+0x1f24>)
    43ae:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
			parameters_array->sensor_middleLeft[3][2] = 2.0253e-07;
    43b2:	4baf      	ldr	r3, [pc, #700]	; (4670 <initialize_calibration_parameters+0x1f28>)
    43b4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
			parameters_array->sensor_middleLeft[4][2] = 1.8705e-13;
    43b8:	4bae      	ldr	r3, [pc, #696]	; (4674 <initialize_calibration_parameters+0x1f2c>)
    43ba:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
			parameters_array->sensor_middleLeft[5][2] = -2.3822e-12;
    43be:	4bae      	ldr	r3, [pc, #696]	; (4678 <initialize_calibration_parameters+0x1f30>)
    43c0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
			parameters_array->sensor_middleLeft[6][2] = -4.3156e-08;
    43c4:	4bad      	ldr	r3, [pc, #692]	; (467c <initialize_calibration_parameters+0x1f34>)
    43c6:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
			parameters_array->sensor_middleLeft[7][2] = 2.5883e-13;
    43ca:	4bad      	ldr	r3, [pc, #692]	; (4680 <initialize_calibration_parameters+0x1f38>)
    43cc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
			parameters_array->sensor_middleLeft[8][2] = -1.1166e-08;
    43d0:	4bac      	ldr	r3, [pc, #688]	; (4684 <initialize_calibration_parameters+0x1f3c>)
    43d2:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
			parameters_array->sensor_middleLeft[9][2] = -0.00027164;
    43d6:	4bac      	ldr	r3, [pc, #688]	; (4688 <initialize_calibration_parameters+0x1f40>)
    43d8:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
			parameters_array->sensor_middleLeft[10][2] = -3.2929e-12;
    43dc:	4bab      	ldr	r3, [pc, #684]	; (468c <initialize_calibration_parameters+0x1f44>)
    43de:	f8c0 3170 	str.w	r3, [r0, #368]	; 0x170
			parameters_array->sensor_middleLeft[11][2] = 9.3982e-12;
    43e2:	4bab      	ldr	r3, [pc, #684]	; (4690 <initialize_calibration_parameters+0x1f48>)
    43e4:	f8c0 317c 	str.w	r3, [r0, #380]	; 0x17c
			parameters_array->sensor_middleLeft[12][2] = 2.2857e-07;
    43e8:	4baa      	ldr	r3, [pc, #680]	; (4694 <initialize_calibration_parameters+0x1f4c>)
    43ea:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
			parameters_array->sensor_middleLeft[13][2] = -2.5981e-13;
    43ee:	4baa      	ldr	r3, [pc, #680]	; (4698 <initialize_calibration_parameters+0x1f50>)
    43f0:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
			parameters_array->sensor_middleLeft[14][2] = 2.8851e-08;
    43f4:	4ba9      	ldr	r3, [pc, #676]	; (469c <initialize_calibration_parameters+0x1f54>)
    43f6:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
			parameters_array->sensor_middleLeft[15][2] = 0.00038278;
    43fa:	4ba9      	ldr	r3, [pc, #676]	; (46a0 <initialize_calibration_parameters+0x1f58>)
    43fc:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
			parameters_array->sensor_middleLeft[16][2] = 2.0614e-12;
    4400:	4ba8      	ldr	r3, [pc, #672]	; (46a4 <initialize_calibration_parameters+0x1f5c>)
    4402:	f8c0 31b8 	str.w	r3, [r0, #440]	; 0x1b8
			parameters_array->sensor_middleLeft[17][2] = 1.1735e-07;
    4406:	4ba8      	ldr	r3, [pc, #672]	; (46a8 <initialize_calibration_parameters+0x1f60>)
    4408:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			parameters_array->sensor_middleLeft[18][2] = 0.00133;
    440c:	4ba7      	ldr	r3, [pc, #668]	; (46ac <initialize_calibration_parameters+0x1f64>)
    440e:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
			parameters_array->sensor_middleLeft[19][2] = 3.2646;
    4412:	4ba7      	ldr	r3, [pc, #668]	; (46b0 <initialize_calibration_parameters+0x1f68>)
    4414:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
			
			// Left Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomLeft[0][2] = -1.7987e-12;
    4418:	4ba6      	ldr	r3, [pc, #664]	; (46b4 <initialize_calibration_parameters+0x1f6c>)
    441a:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
			parameters_array->sensor_bottomLeft[1][2] = -2.1666e-12;
    441e:	4ba6      	ldr	r3, [pc, #664]	; (46b8 <initialize_calibration_parameters+0x1f70>)
    4420:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
			parameters_array->sensor_bottomLeft[2][2] = 8.7117e-12;
    4424:	4ba5      	ldr	r3, [pc, #660]	; (46bc <initialize_calibration_parameters+0x1f74>)
    4426:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
			parameters_array->sensor_bottomLeft[3][2] = 2.691e-07;
    442a:	4ba5      	ldr	r3, [pc, #660]	; (46c0 <initialize_calibration_parameters+0x1f78>)
    442c:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
			parameters_array->sensor_bottomLeft[4][2] = 1.3946e-12;
    4430:	4ba4      	ldr	r3, [pc, #656]	; (46c4 <initialize_calibration_parameters+0x1f7c>)
    4432:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
			parameters_array->sensor_bottomLeft[5][2] = -2.4585e-12;
    4436:	4ba4      	ldr	r3, [pc, #656]	; (46c8 <initialize_calibration_parameters+0x1f80>)
    4438:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
			parameters_array->sensor_bottomLeft[6][2] = -2.2618e-08;
    443c:	4ba3      	ldr	r3, [pc, #652]	; (46cc <initialize_calibration_parameters+0x1f84>)
    443e:	f8c0 3230 	str.w	r3, [r0, #560]	; 0x230
			parameters_array->sensor_bottomLeft[7][2] = 2.1715e-12;
    4442:	4ba3      	ldr	r3, [pc, #652]	; (46d0 <initialize_calibration_parameters+0x1f88>)
    4444:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
			parameters_array->sensor_bottomLeft[8][2] = 6.4464e-08;
    4448:	4ba2      	ldr	r3, [pc, #648]	; (46d4 <initialize_calibration_parameters+0x1f8c>)
    444a:	f8c0 3248 	str.w	r3, [r0, #584]	; 0x248
			parameters_array->sensor_bottomLeft[9][2] = 0.00054296;
    444e:	4ba2      	ldr	r3, [pc, #648]	; (46d8 <initialize_calibration_parameters+0x1f90>)
    4450:	f8c0 3254 	str.w	r3, [r0, #596]	; 0x254
			parameters_array->sensor_bottomLeft[10][2] = -5.8062e-12;
    4454:	4ba1      	ldr	r3, [pc, #644]	; (46dc <initialize_calibration_parameters+0x1f94>)
    4456:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
			parameters_array->sensor_bottomLeft[11][2] = 1.225e-11;
    445a:	4ba1      	ldr	r3, [pc, #644]	; (46e0 <initialize_calibration_parameters+0x1f98>)
    445c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c
			parameters_array->sensor_bottomLeft[12][2] = 2.9656e-07;
    4460:	4ba0      	ldr	r3, [pc, #640]	; (46e4 <initialize_calibration_parameters+0x1f9c>)
    4462:	f8c0 3278 	str.w	r3, [r0, #632]	; 0x278
			parameters_array->sensor_bottomLeft[13][2] = -8.9767e-14;
    4466:	4ba0      	ldr	r3, [pc, #640]	; (46e8 <initialize_calibration_parameters+0x1fa0>)
    4468:	f8c0 3284 	str.w	r3, [r0, #644]	; 0x284
			parameters_array->sensor_bottomLeft[14][2] = 7.811e-09;
    446c:	4b9f      	ldr	r3, [pc, #636]	; (46ec <initialize_calibration_parameters+0x1fa4>)
    446e:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
			parameters_array->sensor_bottomLeft[15][2] = -6.922e-05;
    4472:	4b9f      	ldr	r3, [pc, #636]	; (46f0 <initialize_calibration_parameters+0x1fa8>)
    4474:	f8c0 329c 	str.w	r3, [r0, #668]	; 0x29c
			parameters_array->sensor_bottomLeft[16][2] = 3.7346e-12;
    4478:	4b9e      	ldr	r3, [pc, #632]	; (46f4 <initialize_calibration_parameters+0x1fac>)
    447a:	f8c0 32a8 	str.w	r3, [r0, #680]	; 0x2a8
			parameters_array->sensor_bottomLeft[17][2] = 1.6516e-07;
    447e:	4b9e      	ldr	r3, [pc, #632]	; (46f8 <initialize_calibration_parameters+0x1fb0>)
    4480:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
			parameters_array->sensor_bottomLeft[18][2] = 0.0013217;
    4484:	4b9d      	ldr	r3, [pc, #628]	; (46fc <initialize_calibration_parameters+0x1fb4>)
    4486:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
			parameters_array->sensor_bottomLeft[19][2] = 1.5238;
    448a:	4b9d      	ldr	r3, [pc, #628]	; (4700 <initialize_calibration_parameters+0x1fb8>)
    448c:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

			// Middle Row - Top Sensor - X Direction
			parameters_array->sensor_topMiddle[0][0] = 1.4542e-14;
    4490:	4b9c      	ldr	r3, [pc, #624]	; (4704 <initialize_calibration_parameters+0x1fbc>)
    4492:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0
			parameters_array->sensor_topMiddle[1][0] = 1.7616e-13;
    4496:	4b9c      	ldr	r3, [pc, #624]	; (4708 <initialize_calibration_parameters+0x1fc0>)
    4498:	f8c0 32dc 	str.w	r3, [r0, #732]	; 0x2dc
			parameters_array->sensor_topMiddle[2][0] = 1.2985e-13;
    449c:	4b9b      	ldr	r3, [pc, #620]	; (470c <initialize_calibration_parameters+0x1fc4>)
    449e:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
			parameters_array->sensor_topMiddle[3][0] = -1.3105e-08;
    44a2:	4b9b      	ldr	r3, [pc, #620]	; (4710 <initialize_calibration_parameters+0x1fc8>)
    44a4:	f8c0 32f4 	str.w	r3, [r0, #756]	; 0x2f4
			parameters_array->sensor_topMiddle[4][0] = 4.6868e-13;
    44a8:	4b9a      	ldr	r3, [pc, #616]	; (4714 <initialize_calibration_parameters+0x1fcc>)
    44aa:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
			parameters_array->sensor_topMiddle[5][0] = -1.0831e-13;
    44ae:	4b9a      	ldr	r3, [pc, #616]	; (4718 <initialize_calibration_parameters+0x1fd0>)
    44b0:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
			parameters_array->sensor_topMiddle[6][0] = 3.2315e-11;
    44b4:	4b99      	ldr	r3, [pc, #612]	; (471c <initialize_calibration_parameters+0x1fd4>)
    44b6:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
			parameters_array->sensor_topMiddle[7][0] = -1.085e-13;
    44ba:	4b99      	ldr	r3, [pc, #612]	; (4720 <initialize_calibration_parameters+0x1fd8>)
    44bc:	f8c0 3324 	str.w	r3, [r0, #804]	; 0x324
			parameters_array->sensor_topMiddle[8][0] = -1.7895e-08;
    44c0:	4b98      	ldr	r3, [pc, #608]	; (4724 <initialize_calibration_parameters+0x1fdc>)
    44c2:	f8c0 3330 	str.w	r3, [r0, #816]	; 0x330
			parameters_array->sensor_topMiddle[9][0] = -0.00060645;
    44c6:	4b98      	ldr	r3, [pc, #608]	; (4728 <initialize_calibration_parameters+0x1fe0>)
    44c8:	f8c0 333c 	str.w	r3, [r0, #828]	; 0x33c
			parameters_array->sensor_topMiddle[10][0] = 1.8039e-13;
    44cc:	4b97      	ldr	r3, [pc, #604]	; (472c <initialize_calibration_parameters+0x1fe4>)
    44ce:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
			parameters_array->sensor_topMiddle[11][0] = -3.862e-13;
    44d2:	4b97      	ldr	r3, [pc, #604]	; (4730 <initialize_calibration_parameters+0x1fe8>)
    44d4:	f8c0 3354 	str.w	r3, [r0, #852]	; 0x354
			parameters_array->sensor_topMiddle[12][0] = -2.0943e-08;
    44d8:	4b96      	ldr	r3, [pc, #600]	; (4734 <initialize_calibration_parameters+0x1fec>)
    44da:	f8c0 3360 	str.w	r3, [r0, #864]	; 0x360
			parameters_array->sensor_topMiddle[13][0] = 2.895e-13;
    44de:	4b96      	ldr	r3, [pc, #600]	; (4738 <initialize_calibration_parameters+0x1ff0>)
    44e0:	f8c0 336c 	str.w	r3, [r0, #876]	; 0x36c
			parameters_array->sensor_topMiddle[14][0] = 8.2119e-09;
    44e4:	4b95      	ldr	r3, [pc, #596]	; (473c <initialize_calibration_parameters+0x1ff4>)
    44e6:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
			parameters_array->sensor_topMiddle[15][0] = 4.1202e-05;
    44ea:	4b95      	ldr	r3, [pc, #596]	; (4740 <initialize_calibration_parameters+0x1ff8>)
    44ec:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
			parameters_array->sensor_topMiddle[16][0] = 3.2678e-13;
    44f0:	4b94      	ldr	r3, [pc, #592]	; (4744 <initialize_calibration_parameters+0x1ffc>)
    44f2:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
			parameters_array->sensor_topMiddle[17][0] = 1.435e-08;
    44f6:	4b94      	ldr	r3, [pc, #592]	; (4748 <initialize_calibration_parameters+0x2000>)
    44f8:	f8c0 339c 	str.w	r3, [r0, #924]	; 0x39c
			parameters_array->sensor_topMiddle[18][0] = 0.00033588;
    44fc:	4b93      	ldr	r3, [pc, #588]	; (474c <initialize_calibration_parameters+0x2004>)
    44fe:	f8c0 33a8 	str.w	r3, [r0, #936]	; 0x3a8
			parameters_array->sensor_topMiddle[19][0] = 3.141;
    4502:	4b93      	ldr	r3, [pc, #588]	; (4750 <initialize_calibration_parameters+0x2008>)
    4504:	f8c0 33b4 	str.w	r3, [r0, #948]	; 0x3b4
			
			// Middle Row - Middle Sensor - X Direction
			parameters_array->sensor_middleMiddle[0][0] = 9.0918e-15;
    4508:	4b92      	ldr	r3, [pc, #584]	; (4754 <initialize_calibration_parameters+0x200c>)
    450a:	f8c0 33c0 	str.w	r3, [r0, #960]	; 0x3c0
			parameters_array->sensor_middleMiddle[1][0] = -5.6618e-14;
    450e:	4b92      	ldr	r3, [pc, #584]	; (4758 <initialize_calibration_parameters+0x2010>)
    4510:	f8c0 33cc 	str.w	r3, [r0, #972]	; 0x3cc
			parameters_array->sensor_middleMiddle[2][0] = -4.6523e-13;
    4514:	4b91      	ldr	r3, [pc, #580]	; (475c <initialize_calibration_parameters+0x2014>)
    4516:	f8c0 33d8 	str.w	r3, [r0, #984]	; 0x3d8
			parameters_array->sensor_middleMiddle[3][0] = -1.1194e-08;
    451a:	4b91      	ldr	r3, [pc, #580]	; (4760 <initialize_calibration_parameters+0x2018>)
    451c:	f8c0 33e4 	str.w	r3, [r0, #996]	; 0x3e4
			parameters_array->sensor_middleMiddle[4][0] = 3.546e-13;
    4520:	4b90      	ldr	r3, [pc, #576]	; (4764 <initialize_calibration_parameters+0x201c>)
    4522:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
			parameters_array->sensor_middleMiddle[5][0] = 4.08e-13;
    4526:	4b90      	ldr	r3, [pc, #576]	; (4768 <initialize_calibration_parameters+0x2020>)
    4528:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
			parameters_array->sensor_middleMiddle[6][0] = 1.003e-08;
    452c:	f500 6381 	add.w	r3, r0, #1032	; 0x408
    4530:	4a8e      	ldr	r2, [pc, #568]	; (476c <initialize_calibration_parameters+0x2024>)
    4532:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][0] = 9.3891e-13;
    4534:	f200 4314 	addw	r3, r0, #1044	; 0x414
    4538:	4a8d      	ldr	r2, [pc, #564]	; (4770 <initialize_calibration_parameters+0x2028>)
    453a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][0] = 2.714e-08;
    453c:	f500 6384 	add.w	r3, r0, #1056	; 0x420
    4540:	4a8c      	ldr	r2, [pc, #560]	; (4774 <initialize_calibration_parameters+0x202c>)
    4542:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][0] = -0.00013624;
    4544:	f200 432c 	addw	r3, r0, #1068	; 0x42c
    4548:	4a8b      	ldr	r2, [pc, #556]	; (4778 <initialize_calibration_parameters+0x2030>)
    454a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][0] = 6.6559e-14;
    454c:	f500 6387 	add.w	r3, r0, #1080	; 0x438
    4550:	4a8a      	ldr	r2, [pc, #552]	; (477c <initialize_calibration_parameters+0x2034>)
    4552:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][0] = 6.1834e-14;
    4554:	f200 4344 	addw	r3, r0, #1092	; 0x444
    4558:	4a89      	ldr	r2, [pc, #548]	; (4780 <initialize_calibration_parameters+0x2038>)
    455a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][0] = -9.0512e-10;
    455c:	f500 638a 	add.w	r3, r0, #1104	; 0x450
    4560:	4a88      	ldr	r2, [pc, #544]	; (4784 <initialize_calibration_parameters+0x203c>)
    4562:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][0] = 2.0388e-13;
    4564:	f200 435c 	addw	r3, r0, #1116	; 0x45c
    4568:	4a87      	ldr	r2, [pc, #540]	; (4788 <initialize_calibration_parameters+0x2040>)
    456a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][0] = 8.0628e-09;
    456c:	f500 638d 	add.w	r3, r0, #1128	; 0x468
    4570:	4a86      	ldr	r2, [pc, #536]	; (478c <initialize_calibration_parameters+0x2044>)
    4572:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][0] = 6.9898e-05;
    4574:	f200 4374 	addw	r3, r0, #1140	; 0x474
    4578:	4a85      	ldr	r2, [pc, #532]	; (4790 <initialize_calibration_parameters+0x2048>)
    457a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][0] = -7.4716e-14;
    457c:	f500 6390 	add.w	r3, r0, #1152	; 0x480
    4580:	4a84      	ldr	r2, [pc, #528]	; (4794 <initialize_calibration_parameters+0x204c>)
    4582:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][0] = -4.9519e-09;
    4584:	f200 438c 	addw	r3, r0, #1164	; 0x48c
    4588:	4a83      	ldr	r2, [pc, #524]	; (4798 <initialize_calibration_parameters+0x2050>)
    458a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][0] = -8.2339e-05;
    458c:	f500 6393 	add.w	r3, r0, #1176	; 0x498
    4590:	4a82      	ldr	r2, [pc, #520]	; (479c <initialize_calibration_parameters+0x2054>)
    4592:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][0] = -0.30209;
    4594:	f200 43a4 	addw	r3, r0, #1188	; 0x4a4
    4598:	4a81      	ldr	r2, [pc, #516]	; (47a0 <initialize_calibration_parameters+0x2058>)
    459a:	601a      	str	r2, [r3, #0]
			
			// Middle Row - Bottom Sensor - X Direction
			parameters_array->sensor_bottomMiddle[0][0] = 7.7186e-13;
    459c:	f500 6396 	add.w	r3, r0, #1200	; 0x4b0
    45a0:	4a80      	ldr	r2, [pc, #512]	; (47a4 <initialize_calibration_parameters+0x205c>)
    45a2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][0] = -8.5597e-13;
    45a4:	f200 43bc 	addw	r3, r0, #1212	; 0x4bc
    45a8:	4a7f      	ldr	r2, [pc, #508]	; (47a8 <initialize_calibration_parameters+0x2060>)
    45aa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][0] = -9.3751e-13;
    45ac:	f500 6399 	add.w	r3, r0, #1224	; 0x4c8
    45b0:	4a7e      	ldr	r2, [pc, #504]	; (47ac <initialize_calibration_parameters+0x2064>)
    45b2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][0] = -9.5949e-09;
    45b4:	f200 43d4 	addw	r3, r0, #1236	; 0x4d4
    45b8:	4a7d      	ldr	r2, [pc, #500]	; (47b0 <initialize_calibration_parameters+0x2068>)
    45ba:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][0] = 6.9725e-13;
    45bc:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
    45c0:	4a7c      	ldr	r2, [pc, #496]	; (47b4 <initialize_calibration_parameters+0x206c>)
    45c2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][0] = 4.9223e-13;
    45c4:	f200 43ec 	addw	r3, r0, #1260	; 0x4ec
    45c8:	4a7b      	ldr	r2, [pc, #492]	; (47b8 <initialize_calibration_parameters+0x2070>)
    45ca:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[6][0] = 1.4475e-08;
    45cc:	f500 639f 	add.w	r3, r0, #1272	; 0x4f8
    45d0:	4a7a      	ldr	r2, [pc, #488]	; (47bc <initialize_calibration_parameters+0x2074>)
    45d2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][0] = 1.7549e-13;
    45d4:	f200 5304 	addw	r3, r0, #1284	; 0x504
    45d8:	4a79      	ldr	r2, [pc, #484]	; (47c0 <initialize_calibration_parameters+0x2078>)
    45da:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][0] = -4.0638e-09;
    45dc:	f500 63a2 	add.w	r3, r0, #1296	; 0x510
    45e0:	4a78      	ldr	r2, [pc, #480]	; (47c4 <initialize_calibration_parameters+0x207c>)
    45e2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][0] = -0.0004795;
    45e4:	f200 531c 	addw	r3, r0, #1308	; 0x51c
    45e8:	4a77      	ldr	r2, [pc, #476]	; (47c8 <initialize_calibration_parameters+0x2080>)
    45ea:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][0] = -2.6917e-13;
    45ec:	f500 63a5 	add.w	r3, r0, #1320	; 0x528
    45f0:	4a76      	ldr	r2, [pc, #472]	; (47cc <initialize_calibration_parameters+0x2084>)
    45f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][0] = 6.6346e-13;
    45f4:	f200 5334 	addw	r3, r0, #1332	; 0x534
    45f8:	4a75      	ldr	r2, [pc, #468]	; (47d0 <initialize_calibration_parameters+0x2088>)
    45fa:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][0] = 1.9815e-08;
    45fc:	f500 63a8 	add.w	r3, r0, #1344	; 0x540
    4600:	4a74      	ldr	r2, [pc, #464]	; (47d4 <initialize_calibration_parameters+0x208c>)
    4602:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][0] = 1.1668e-13;
    4604:	f200 534c 	addw	r3, r0, #1356	; 0x54c
    4608:	4a73      	ldr	r2, [pc, #460]	; (47d8 <initialize_calibration_parameters+0x2090>)
    460a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][0] = 7.4294e-09;
    460c:	f500 63ab 	add.w	r3, r0, #1368	; 0x558
    4610:	4a72      	ldr	r2, [pc, #456]	; (47dc <initialize_calibration_parameters+0x2094>)
    4612:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][0] = 8.4735e-05;
    4614:	f200 5364 	addw	r3, r0, #1380	; 0x564
    4618:	4a71      	ldr	r2, [pc, #452]	; (47e0 <initialize_calibration_parameters+0x2098>)
    461a:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][0] = 1.5025e-13;
    461c:	f500 63ae 	add.w	r3, r0, #1392	; 0x570
    4620:	4a70      	ldr	r2, [pc, #448]	; (47e4 <initialize_calibration_parameters+0x209c>)
    4622:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][0] = 8.9557e-09;
    4624:	f200 537c 	addw	r3, r0, #1404	; 0x57c
    4628:	4a6f      	ldr	r2, [pc, #444]	; (47e8 <initialize_calibration_parameters+0x20a0>)
    462a:	601a      	str	r2, [r3, #0]
    462c:	e0de      	b.n	47ec <initialize_calibration_parameters+0x20a4>
    462e:	bf00      	nop
    4630:	ac38c468 	.word	0xac38c468
    4634:	b3dd72d2 	.word	0xb3dd72d2
    4638:	ba9cfc25 	.word	0xba9cfc25
    463c:	ad6542e9 	.word	0xad6542e9
    4640:	2c9e58e6 	.word	0x2c9e58e6
    4644:	346b3981 	.word	0x346b3981
    4648:	acc324a1 	.word	0xacc324a1
    464c:	b42b4b46 	.word	0xb42b4b46
    4650:	bab4f89b 	.word	0xbab4f89b
    4654:	2b735007 	.word	0x2b735007
    4658:	337bc679 	.word	0x337bc679
    465c:	b99c1097 	.word	0xb99c1097
    4660:	c0f9119d 	.word	0xc0f9119d
    4664:	ab69f2ab 	.word	0xab69f2ab
    4668:	ab1fecf7 	.word	0xab1fecf7
    466c:	2cd7d05c 	.word	0x2cd7d05c
    4670:	34597706 	.word	0x34597706
    4674:	2a52997e 	.word	0x2a52997e
    4678:	ac27a1e6 	.word	0xac27a1e6
    467c:	b3395a86 	.word	0xb3395a86
    4680:	2a91b556 	.word	0x2a91b556
    4684:	b23fd496 	.word	0xb23fd496
    4688:	b98e6ae7 	.word	0xb98e6ae7
    468c:	ac67b79d 	.word	0xac67b79d
    4690:	2d2555bb 	.word	0x2d2555bb
    4694:	34756cd8 	.word	0x34756cd8
    4698:	aa924291 	.word	0xaa924291
    469c:	32f7d405 	.word	0x32f7d405
    46a0:	39c8afdd 	.word	0x39c8afdd
    46a4:	2c110ee2 	.word	0x2c110ee2
    46a8:	33fc01d8 	.word	0x33fc01d8
    46ac:	3aae5365 	.word	0x3aae5365
    46b0:	4050ef35 	.word	0x4050ef35
    46b4:	abfd24ff 	.word	0xabfd24ff
    46b8:	ac1875ff 	.word	0xac1875ff
    46bc:	2d194202 	.word	0x2d194202
    46c0:	349078d3 	.word	0x349078d3
    46c4:	2bc445c3 	.word	0x2bc445c3
    46c8:	ac2d0066 	.word	0xac2d0066
    46cc:	b2c24982 	.word	0xb2c24982
    46d0:	2c18ce44 	.word	0x2c18ce44
    46d4:	338a6f75 	.word	0x338a6f75
    46d8:	3a0e556e 	.word	0x3a0e556e
    46dc:	accc499a 	.word	0xaccc499a
    46e0:	2d578118 	.word	0x2d578118
    46e4:	349f36e5 	.word	0x349f36e5
    46e8:	a9ca2327 	.word	0xa9ca2327
    46ec:	32063124 	.word	0x32063124
    46f0:	b8912a34 	.word	0xb8912a34
    46f4:	2c836649 	.word	0x2c836649
    46f8:	343156d6 	.word	0x343156d6
    46fc:	3aad3ce5 	.word	0x3aad3ce5
    4700:	3fc30be1 	.word	0x3fc30be1
    4704:	2882fb92 	.word	0x2882fb92
    4708:	2a4656aa 	.word	0x2a4656aa
    470c:	2a1232b7 	.word	0x2a1232b7
    4710:	b2612466 	.word	0xb2612466
    4714:	2b03ebf4 	.word	0x2b03ebf4
    4718:	a9f3e477 	.word	0xa9f3e477
    471c:	2e0e1f75 	.word	0x2e0e1f75
    4720:	a9f451fe 	.word	0xa9f451fe
    4724:	b299b785 	.word	0xb299b785
    4728:	ba1efa2c 	.word	0xba1efa2c
    472c:	2a4b19e1 	.word	0x2a4b19e1
    4730:	aad96949 	.word	0xaad96949
    4734:	b2b3e625 	.word	0xb2b3e625
    4738:	2aa2f959 	.word	0x2aa2f959
    473c:	320d1451 	.word	0x320d1451
    4740:	382cd050 	.word	0x382cd050
    4744:	2ab7f5f6 	.word	0x2ab7f5f6
    4748:	327687f8 	.word	0x327687f8
    474c:	39b0190d 	.word	0x39b0190d
    4750:	40490625 	.word	0x40490625
    4754:	2823c887 	.word	0x2823c887
    4758:	a97efc1c 	.word	0xa97efc1c
    475c:	ab02f35b 	.word	0xab02f35b
    4760:	b2404fbc 	.word	0xb2404fbc
    4764:	2ac79f3f 	.word	0x2ac79f3f
    4768:	2ae5aeff 	.word	0x2ae5aeff
    476c:	322c5068 	.word	0x322c5068
    4770:	2b8423cc 	.word	0x2b8423cc
    4774:	32e9217e 	.word	0x32e9217e
    4778:	b90edba6 	.word	0xb90edba6
    477c:	2995e0a7 	.word	0x2995e0a7
    4780:	298b3ce0 	.word	0x298b3ce0
    4784:	b078cc28 	.word	0xb078cc28
    4788:	2a658c69 	.word	0x2a658c69
    478c:	320a8492 	.word	0x320a8492
    4790:	38929634 	.word	0x38929634
    4794:	a9a83ed7 	.word	0xa9a83ed7
    4798:	b1aa255f 	.word	0xb1aa255f
    479c:	b8acad6a 	.word	0xb8acad6a
    47a0:	be9aab8a 	.word	0xbe9aab8a
    47a4:	2b594260 	.word	0x2b594260
    47a8:	ab70ef24 	.word	0xab70ef24
    47ac:	ab83f15c 	.word	0xab83f15c
    47b0:	b224d6d1 	.word	0xb224d6d1
    47b4:	2b444228 	.word	0x2b444228
    47b8:	2b0a8ce9 	.word	0x2b0a8ce9
    47bc:	3278adb9 	.word	0x3278adb9
    47c0:	2a45958c 	.word	0x2a45958c
    47c4:	b18ba190 	.word	0xb18ba190
    47c8:	b9fb6567 	.word	0xb9fb6567
    47cc:	aa97877c 	.word	0xaa97877c
    47d0:	2b3abf55 	.word	0x2b3abf55
    47d4:	32aa35a5 	.word	0x32aa35a5
    47d8:	2a035eb8 	.word	0x2a035eb8
    47dc:	31ff45b2 	.word	0x31ff45b2
    47e0:	38b1b3c2 	.word	0x38b1b3c2
    47e4:	2a292a9d 	.word	0x2a292a9d
    47e8:	3219db96 	.word	0x3219db96
			parameters_array->sensor_bottomMiddle[18][0] = 8.3084e-05;
    47ec:	f500 63b1 	add.w	r3, r0, #1416	; 0x588
    47f0:	4ab1      	ldr	r2, [pc, #708]	; (4ab8 <initialize_calibration_parameters+0x2370>)
    47f2:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][0] = -0.093546;
    47f4:	f200 5394 	addw	r3, r0, #1428	; 0x594
    47f8:	4ab0      	ldr	r2, [pc, #704]	; (4abc <initialize_calibration_parameters+0x2374>)
    47fa:	601a      	str	r2, [r3, #0]
			
			// Middle Row - Top Sensor - Y Direction
			parameters_array->sensor_topMiddle[0][1] = 3.3742e-14;
    47fc:	4bb0      	ldr	r3, [pc, #704]	; (4ac0 <initialize_calibration_parameters+0x2378>)
    47fe:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
			parameters_array->sensor_topMiddle[1][1] = 1.1601e-12;
    4802:	4bb0      	ldr	r3, [pc, #704]	; (4ac4 <initialize_calibration_parameters+0x237c>)
    4804:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
			parameters_array->sensor_topMiddle[2][1] = -1.0923e-12;
    4808:	4baf      	ldr	r3, [pc, #700]	; (4ac8 <initialize_calibration_parameters+0x2380>)
    480a:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
			parameters_array->sensor_topMiddle[3][1] = -1.323e-08;
    480e:	4baf      	ldr	r3, [pc, #700]	; (4acc <initialize_calibration_parameters+0x2384>)
    4810:	f8c0 32f8 	str.w	r3, [r0, #760]	; 0x2f8
			parameters_array->sensor_topMiddle[4][1] = 4.911e-13;
    4814:	4bae      	ldr	r3, [pc, #696]	; (4ad0 <initialize_calibration_parameters+0x2388>)
    4816:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
			parameters_array->sensor_topMiddle[5][1] = 6.2781e-13;
    481a:	4bae      	ldr	r3, [pc, #696]	; (4ad4 <initialize_calibration_parameters+0x238c>)
    481c:	f8c0 3310 	str.w	r3, [r0, #784]	; 0x310
			parameters_array->sensor_topMiddle[6][1] = 1.1465e-08;
    4820:	4bad      	ldr	r3, [pc, #692]	; (4ad8 <initialize_calibration_parameters+0x2390>)
    4822:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
			parameters_array->sensor_topMiddle[7][1] = 4.1809e-13;
    4826:	4bad      	ldr	r3, [pc, #692]	; (4adc <initialize_calibration_parameters+0x2394>)
    4828:	f8c0 3328 	str.w	r3, [r0, #808]	; 0x328
			parameters_array->sensor_topMiddle[8][1] = 1.81e-08;
    482c:	4bac      	ldr	r3, [pc, #688]	; (4ae0 <initialize_calibration_parameters+0x2398>)
    482e:	f8c0 3334 	str.w	r3, [r0, #820]	; 0x334
			parameters_array->sensor_topMiddle[9][1] = 0.00020261;
    4832:	4bac      	ldr	r3, [pc, #688]	; (4ae4 <initialize_calibration_parameters+0x239c>)
    4834:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
			parameters_array->sensor_topMiddle[10][1] = 2.3256e-13;
    4838:	4bab      	ldr	r3, [pc, #684]	; (4ae8 <initialize_calibration_parameters+0x23a0>)
    483a:	f8c0 334c 	str.w	r3, [r0, #844]	; 0x34c
			parameters_array->sensor_topMiddle[11][1] = -9.8691e-13;
    483e:	4bab      	ldr	r3, [pc, #684]	; (4aec <initialize_calibration_parameters+0x23a4>)
    4840:	f8c0 3358 	str.w	r3, [r0, #856]	; 0x358
			parameters_array->sensor_topMiddle[12][1] = -1.9165e-08;
    4844:	4baa      	ldr	r3, [pc, #680]	; (4af0 <initialize_calibration_parameters+0x23a8>)
    4846:	f8c0 3364 	str.w	r3, [r0, #868]	; 0x364
			parameters_array->sensor_topMiddle[13][1] = -1.8865e-12;
    484a:	4baa      	ldr	r3, [pc, #680]	; (4af4 <initialize_calibration_parameters+0x23ac>)
    484c:	f8c0 3370 	str.w	r3, [r0, #880]	; 0x370
			parameters_array->sensor_topMiddle[14][1] = -8.9896e-08;
    4850:	4ba9      	ldr	r3, [pc, #676]	; (4af8 <initialize_calibration_parameters+0x23b0>)
    4852:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
			parameters_array->sensor_topMiddle[15][1] = -0.0013533;
    4856:	4ba9      	ldr	r3, [pc, #676]	; (4afc <initialize_calibration_parameters+0x23b4>)
    4858:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
			parameters_array->sensor_topMiddle[16][1] = -8.594e-13;
    485c:	4ba8      	ldr	r3, [pc, #672]	; (4b00 <initialize_calibration_parameters+0x23b8>)
    485e:	f8c0 3394 	str.w	r3, [r0, #916]	; 0x394
			parameters_array->sensor_topMiddle[17][1] = -4.3163e-08;
    4862:	4ba8      	ldr	r3, [pc, #672]	; (4b04 <initialize_calibration_parameters+0x23bc>)
    4864:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
			parameters_array->sensor_topMiddle[18][1] = -0.00074675;
    4868:	4ba7      	ldr	r3, [pc, #668]	; (4b08 <initialize_calibration_parameters+0x23c0>)
    486a:	f8c0 33ac 	str.w	r3, [r0, #940]	; 0x3ac
			parameters_array->sensor_topMiddle[19][1] = -4.9353;
    486e:	4ba7      	ldr	r3, [pc, #668]	; (4b0c <initialize_calibration_parameters+0x23c4>)
    4870:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
			
			// Middle Row - Middle Sensor - Y Direction
			parameters_array->sensor_middleMiddle[0][1] = 2.0119e-13;
    4874:	4ba6      	ldr	r3, [pc, #664]	; (4b10 <initialize_calibration_parameters+0x23c8>)
    4876:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
			parameters_array->sensor_middleMiddle[1][1] = 7.8794e-13;
    487a:	4ba6      	ldr	r3, [pc, #664]	; (4b14 <initialize_calibration_parameters+0x23cc>)
    487c:	f8c0 33d0 	str.w	r3, [r0, #976]	; 0x3d0
			parameters_array->sensor_middleMiddle[2][1] = -4.5428e-13;
    4880:	4ba5      	ldr	r3, [pc, #660]	; (4b18 <initialize_calibration_parameters+0x23d0>)
    4882:	f8c0 33dc 	str.w	r3, [r0, #988]	; 0x3dc
			parameters_array->sensor_middleMiddle[3][1] = -7.2556e-09;
    4886:	4ba5      	ldr	r3, [pc, #660]	; (4b1c <initialize_calibration_parameters+0x23d4>)
    4888:	f8c0 33e8 	str.w	r3, [r0, #1000]	; 0x3e8
			parameters_array->sensor_middleMiddle[4][1] = 2.0195e-13;
    488c:	4ba4      	ldr	r3, [pc, #656]	; (4b20 <initialize_calibration_parameters+0x23d8>)
    488e:	f8c0 33f4 	str.w	r3, [r0, #1012]	; 0x3f4
			parameters_array->sensor_middleMiddle[5][1] = 1.9829e-13;
    4892:	f500 6380 	add.w	r3, r0, #1024	; 0x400
    4896:	4aa3      	ldr	r2, [pc, #652]	; (4b24 <initialize_calibration_parameters+0x23dc>)
    4898:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[6][1] = 2.9341e-09;
    489a:	f200 430c 	addw	r3, r0, #1036	; 0x40c
    489e:	4aa2      	ldr	r2, [pc, #648]	; (4b28 <initialize_calibration_parameters+0x23e0>)
    48a0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][1] = -2.9958e-14;
    48a2:	f500 6383 	add.w	r3, r0, #1048	; 0x418
    48a6:	4aa1      	ldr	r2, [pc, #644]	; (4b2c <initialize_calibration_parameters+0x23e4>)
    48a8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][1] = 8.8113e-10;
    48aa:	f200 4324 	addw	r3, r0, #1060	; 0x424
    48ae:	4aa0      	ldr	r2, [pc, #640]	; (4b30 <initialize_calibration_parameters+0x23e8>)
    48b0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][1] = 3.196e-05;
    48b2:	f500 6386 	add.w	r3, r0, #1072	; 0x430
    48b6:	4a9f      	ldr	r2, [pc, #636]	; (4b34 <initialize_calibration_parameters+0x23ec>)
    48b8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][1] = 3.091e-13;
    48ba:	f200 433c 	addw	r3, r0, #1084	; 0x43c
    48be:	4a9e      	ldr	r2, [pc, #632]	; (4b38 <initialize_calibration_parameters+0x23f0>)
    48c0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][1] = 3.5815e-13;
    48c2:	f500 6389 	add.w	r3, r0, #1096	; 0x448
    48c6:	4a9d      	ldr	r2, [pc, #628]	; (4b3c <initialize_calibration_parameters+0x23f4>)
    48c8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][1] = 5.4199e-09;
    48ca:	f200 4354 	addw	r3, r0, #1108	; 0x454
    48ce:	4a9c      	ldr	r2, [pc, #624]	; (4b40 <initialize_calibration_parameters+0x23f8>)
    48d0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][1] = 2.4513e-13;
    48d2:	f500 638c 	add.w	r3, r0, #1120	; 0x460
    48d6:	4a9b      	ldr	r2, [pc, #620]	; (4b44 <initialize_calibration_parameters+0x23fc>)
    48d8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][1] = -4.1127e-09;
    48da:	f200 436c 	addw	r3, r0, #1132	; 0x46c
    48de:	4a9a      	ldr	r2, [pc, #616]	; (4b48 <initialize_calibration_parameters+0x2400>)
    48e0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][1] = -0.00048554;
    48e2:	f500 638f 	add.w	r3, r0, #1144	; 0x478
    48e6:	4a99      	ldr	r2, [pc, #612]	; (4b4c <initialize_calibration_parameters+0x2404>)
    48e8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][1] = -4.3127e-13;
    48ea:	f200 4384 	addw	r3, r0, #1156	; 0x484
    48ee:	4a98      	ldr	r2, [pc, #608]	; (4b50 <initialize_calibration_parameters+0x2408>)
    48f0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][1] = -2.2224e-08;
    48f2:	f500 6392 	add.w	r3, r0, #1168	; 0x490
    48f6:	4a97      	ldr	r2, [pc, #604]	; (4b54 <initialize_calibration_parameters+0x240c>)
    48f8:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][1] = -0.00037796;
    48fa:	f200 439c 	addw	r3, r0, #1180	; 0x49c
    48fe:	4a96      	ldr	r2, [pc, #600]	; (4b58 <initialize_calibration_parameters+0x2410>)
    4900:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][1] = -2.4643;
    4902:	f500 6395 	add.w	r3, r0, #1192	; 0x4a8
    4906:	4a95      	ldr	r2, [pc, #596]	; (4b5c <initialize_calibration_parameters+0x2414>)
    4908:	601a      	str	r2, [r3, #0]
			
			// Middle Row - Bottom Sensor - Y Direction
			parameters_array->sensor_bottomMiddle[0][1] = 2.9364e-13;
    490a:	f200 43b4 	addw	r3, r0, #1204	; 0x4b4
    490e:	4a94      	ldr	r2, [pc, #592]	; (4b60 <initialize_calibration_parameters+0x2418>)
    4910:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][1] = 1.1026e-12;
    4912:	f500 6398 	add.w	r3, r0, #1216	; 0x4c0
    4916:	4a93      	ldr	r2, [pc, #588]	; (4b64 <initialize_calibration_parameters+0x241c>)
    4918:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][1] = -3.6898e-13;
    491a:	f200 43cc 	addw	r3, r0, #1228	; 0x4cc
    491e:	4a92      	ldr	r2, [pc, #584]	; (4b68 <initialize_calibration_parameters+0x2420>)
    4920:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][1] = -7.2282e-09;
    4922:	f500 639b 	add.w	r3, r0, #1240	; 0x4d8
    4926:	4a91      	ldr	r2, [pc, #580]	; (4b6c <initialize_calibration_parameters+0x2424>)
    4928:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][1] = 4.1011e-13;
    492a:	f200 43e4 	addw	r3, r0, #1252	; 0x4e4
    492e:	4a90      	ldr	r2, [pc, #576]	; (4b70 <initialize_calibration_parameters+0x2428>)
    4930:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][1] = 4.2921e-13;
    4932:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
    4936:	4a8f      	ldr	r2, [pc, #572]	; (4b74 <initialize_calibration_parameters+0x242c>)
    4938:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[6][1] = 6.2458e-09;
    493a:	f200 43fc 	addw	r3, r0, #1276	; 0x4fc
    493e:	4a8e      	ldr	r2, [pc, #568]	; (4b78 <initialize_calibration_parameters+0x2430>)
    4940:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][1] = -5.4906e-13;
    4942:	f500 63a1 	add.w	r3, r0, #1288	; 0x508
    4946:	4a8d      	ldr	r2, [pc, #564]	; (4b7c <initialize_calibration_parameters+0x2434>)
    4948:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][1] = -1.7559e-08;
    494a:	f200 5314 	addw	r3, r0, #1300	; 0x514
    494e:	4a8c      	ldr	r2, [pc, #560]	; (4b80 <initialize_calibration_parameters+0x2438>)
    4950:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][1] = -0.00014269;
    4952:	f500 63a4 	add.w	r3, r0, #1312	; 0x520
    4956:	4a8b      	ldr	r2, [pc, #556]	; (4b84 <initialize_calibration_parameters+0x243c>)
    4958:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][1] = 5.8558e-13;
    495a:	f200 532c 	addw	r3, r0, #1324	; 0x52c
    495e:	4a8a      	ldr	r2, [pc, #552]	; (4b88 <initialize_calibration_parameters+0x2440>)
    4960:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][1] = 5.8006e-13;
    4962:	f500 63a7 	add.w	r3, r0, #1336	; 0x538
    4966:	4a89      	ldr	r2, [pc, #548]	; (4b8c <initialize_calibration_parameters+0x2444>)
    4968:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][1] = 4.2472e-09;
    496a:	f200 5344 	addw	r3, r0, #1348	; 0x544
    496e:	4a88      	ldr	r2, [pc, #544]	; (4b90 <initialize_calibration_parameters+0x2448>)
    4970:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][1] = -2.1712e-13;
    4972:	f500 63aa 	add.w	r3, r0, #1360	; 0x550
    4976:	4a87      	ldr	r2, [pc, #540]	; (4b94 <initialize_calibration_parameters+0x244c>)
    4978:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][1] = -2.4832e-08;
    497a:	f200 535c 	addw	r3, r0, #1372	; 0x55c
    497e:	4a86      	ldr	r2, [pc, #536]	; (4b98 <initialize_calibration_parameters+0x2450>)
    4980:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][1] = -0.00074643;
    4982:	f500 63ad 	add.w	r3, r0, #1384	; 0x568
    4986:	4a85      	ldr	r2, [pc, #532]	; (4b9c <initialize_calibration_parameters+0x2454>)
    4988:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][1] = 7.5229e-14;
    498a:	f200 5374 	addw	r3, r0, #1396	; 0x574
    498e:	4a84      	ldr	r2, [pc, #528]	; (4ba0 <initialize_calibration_parameters+0x2458>)
    4990:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][1] = 9.6192e-09;
    4992:	f500 63b0 	add.w	r3, r0, #1408	; 0x580
    4996:	4a83      	ldr	r2, [pc, #524]	; (4ba4 <initialize_calibration_parameters+0x245c>)
    4998:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[18][1] = 0.00027362;
    499a:	f200 538c 	addw	r3, r0, #1420	; 0x58c
    499e:	4a82      	ldr	r2, [pc, #520]	; (4ba8 <initialize_calibration_parameters+0x2460>)
    49a0:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][1] = 1.431;
    49a2:	f500 63b3 	add.w	r3, r0, #1432	; 0x598
    49a6:	4a81      	ldr	r2, [pc, #516]	; (4bac <initialize_calibration_parameters+0x2464>)
    49a8:	601a      	str	r2, [r3, #0]
			
			// Middle Row - Top Sensor - Z Direction
			parameters_array->sensor_topMiddle[0][2] = 1.2057e-12;
    49aa:	4b81      	ldr	r3, [pc, #516]	; (4bb0 <initialize_calibration_parameters+0x2468>)
    49ac:	f8c0 32d8 	str.w	r3, [r0, #728]	; 0x2d8
			parameters_array->sensor_topMiddle[1][2] = -5.1782e-13;
    49b0:	4b80      	ldr	r3, [pc, #512]	; (4bb4 <initialize_calibration_parameters+0x246c>)
    49b2:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
			parameters_array->sensor_topMiddle[2][2] = 5.7e-12;
    49b6:	4b80      	ldr	r3, [pc, #512]	; (4bb8 <initialize_calibration_parameters+0x2470>)
    49b8:	f8c0 32f0 	str.w	r3, [r0, #752]	; 0x2f0
			parameters_array->sensor_topMiddle[3][2] = 2.4912e-07;
    49bc:	4b7f      	ldr	r3, [pc, #508]	; (4bbc <initialize_calibration_parameters+0x2474>)
    49be:	f8c0 32fc 	str.w	r3, [r0, #764]	; 0x2fc
			parameters_array->sensor_topMiddle[4][2] = -3.7341e-13;
    49c2:	4b7f      	ldr	r3, [pc, #508]	; (4bc0 <initialize_calibration_parameters+0x2478>)
    49c4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
			parameters_array->sensor_topMiddle[5][2] = -3.0215e-12;
    49c8:	4b7e      	ldr	r3, [pc, #504]	; (4bc4 <initialize_calibration_parameters+0x247c>)
    49ca:	f8c0 3314 	str.w	r3, [r0, #788]	; 0x314
			parameters_array->sensor_topMiddle[6][2] = -5.6807e-08;
    49ce:	4b7e      	ldr	r3, [pc, #504]	; (4bc8 <initialize_calibration_parameters+0x2480>)
    49d0:	f8c0 3320 	str.w	r3, [r0, #800]	; 0x320
			parameters_array->sensor_topMiddle[7][2] = -4.1355e-12;
    49d4:	4b7d      	ldr	r3, [pc, #500]	; (4bcc <initialize_calibration_parameters+0x2484>)
    49d6:	f8c0 332c 	str.w	r3, [r0, #812]	; 0x32c
			parameters_array->sensor_topMiddle[8][2] = -1.688e-07;
    49da:	4b7d      	ldr	r3, [pc, #500]	; (4bd0 <initialize_calibration_parameters+0x2488>)
    49dc:	f8c0 3338 	str.w	r3, [r0, #824]	; 0x338
			parameters_array->sensor_topMiddle[9][2] = -0.0017701;
    49e0:	4b7c      	ldr	r3, [pc, #496]	; (4bd4 <initialize_calibration_parameters+0x248c>)
    49e2:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
			parameters_array->sensor_topMiddle[10][2] = -1.3381e-12;
    49e6:	4b7c      	ldr	r3, [pc, #496]	; (4bd8 <initialize_calibration_parameters+0x2490>)
    49e8:	f8c0 3350 	str.w	r3, [r0, #848]	; 0x350
			parameters_array->sensor_topMiddle[11][2] = 5.0261e-12;
    49ec:	4b7b      	ldr	r3, [pc, #492]	; (4bdc <initialize_calibration_parameters+0x2494>)
    49ee:	f8c0 335c 	str.w	r3, [r0, #860]	; 0x35c
			parameters_array->sensor_topMiddle[12][2] = 2.4089e-07;
    49f2:	4b7b      	ldr	r3, [pc, #492]	; (4be0 <initialize_calibration_parameters+0x2498>)
    49f4:	f8c0 3368 	str.w	r3, [r0, #872]	; 0x368
			parameters_array->sensor_topMiddle[13][2] = 3.7926e-12;
    49f8:	4b7a      	ldr	r3, [pc, #488]	; (4be4 <initialize_calibration_parameters+0x249c>)
    49fa:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
			parameters_array->sensor_topMiddle[14][2] = 1.4422e-07;
    49fe:	4b7a      	ldr	r3, [pc, #488]	; (4be8 <initialize_calibration_parameters+0x24a0>)
    4a00:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
			parameters_array->sensor_topMiddle[15][2] = 0.0014306;
    4a04:	4b79      	ldr	r3, [pc, #484]	; (4bec <initialize_calibration_parameters+0x24a4>)
    4a06:	f8c0 338c 	str.w	r3, [r0, #908]	; 0x38c
			parameters_array->sensor_topMiddle[16][2] = 4.3318e-12;
    4a0a:	4b79      	ldr	r3, [pc, #484]	; (4bf0 <initialize_calibration_parameters+0x24a8>)
    4a0c:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
			parameters_array->sensor_topMiddle[17][2] = 2.5689e-07;
    4a10:	4b78      	ldr	r3, [pc, #480]	; (4bf4 <initialize_calibration_parameters+0x24ac>)
    4a12:	f8c0 33a4 	str.w	r3, [r0, #932]	; 0x3a4
			parameters_array->sensor_topMiddle[18][2] = 0.0035516;
    4a16:	4b78      	ldr	r3, [pc, #480]	; (4bf8 <initialize_calibration_parameters+0x24b0>)
    4a18:	f8c0 33b0 	str.w	r3, [r0, #944]	; 0x3b0
			parameters_array->sensor_topMiddle[19][2] = 13.585;
    4a1c:	4b77      	ldr	r3, [pc, #476]	; (4bfc <initialize_calibration_parameters+0x24b4>)
    4a1e:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
			
			// Middle Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleMiddle[0][2] = 8.1277e-13;
    4a22:	4b77      	ldr	r3, [pc, #476]	; (4c00 <initialize_calibration_parameters+0x24b8>)
    4a24:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
			parameters_array->sensor_middleMiddle[1][2] = -4.0372e-13;
    4a28:	4b76      	ldr	r3, [pc, #472]	; (4c04 <initialize_calibration_parameters+0x24bc>)
    4a2a:	f8c0 33d4 	str.w	r3, [r0, #980]	; 0x3d4
			parameters_array->sensor_middleMiddle[2][2] = 5.7087e-12;
    4a2e:	4b76      	ldr	r3, [pc, #472]	; (4c08 <initialize_calibration_parameters+0x24c0>)
    4a30:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
			parameters_array->sensor_middleMiddle[3][2] = 2.3577e-07;
    4a34:	4b75      	ldr	r3, [pc, #468]	; (4c0c <initialize_calibration_parameters+0x24c4>)
    4a36:	f8c0 33ec 	str.w	r3, [r0, #1004]	; 0x3ec
			parameters_array->sensor_middleMiddle[4][2] = 1.4837e-13;
    4a3a:	4b75      	ldr	r3, [pc, #468]	; (4c10 <initialize_calibration_parameters+0x24c8>)
    4a3c:	f8c0 33f8 	str.w	r3, [r0, #1016]	; 0x3f8
			parameters_array->sensor_middleMiddle[5][2] = -9.0903e-13;
    4a40:	f200 4304 	addw	r3, r0, #1028	; 0x404
    4a44:	4a73      	ldr	r2, [pc, #460]	; (4c14 <initialize_calibration_parameters+0x24cc>)
    4a46:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[6][2] = -1.9015e-08;
    4a48:	f500 6382 	add.w	r3, r0, #1040	; 0x410
    4a4c:	4a72      	ldr	r2, [pc, #456]	; (4c18 <initialize_calibration_parameters+0x24d0>)
    4a4e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[7][2] = -8.9299e-13;
    4a50:	f200 431c 	addw	r3, r0, #1052	; 0x41c
    4a54:	4a71      	ldr	r2, [pc, #452]	; (4c1c <initialize_calibration_parameters+0x24d4>)
    4a56:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[8][2] = -4.1848e-08;
    4a58:	f500 6385 	add.w	r3, r0, #1064	; 0x428
    4a5c:	4a70      	ldr	r2, [pc, #448]	; (4c20 <initialize_calibration_parameters+0x24d8>)
    4a5e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[9][2] = -0.00046429;
    4a60:	f200 4334 	addw	r3, r0, #1076	; 0x434
    4a64:	4a6f      	ldr	r2, [pc, #444]	; (4c24 <initialize_calibration_parameters+0x24dc>)
    4a66:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[10][2] = -2.0779e-12;
    4a68:	f500 6388 	add.w	r3, r0, #1088	; 0x440
    4a6c:	4a6e      	ldr	r2, [pc, #440]	; (4c28 <initialize_calibration_parameters+0x24e0>)
    4a6e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[11][2] = 3.1529e-12;
    4a70:	f200 434c 	addw	r3, r0, #1100	; 0x44c
    4a74:	4a6d      	ldr	r2, [pc, #436]	; (4c2c <initialize_calibration_parameters+0x24e4>)
    4a76:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[12][2] = 1.8465e-07;
    4a78:	f500 638b 	add.w	r3, r0, #1112	; 0x458
    4a7c:	4a6c      	ldr	r2, [pc, #432]	; (4c30 <initialize_calibration_parameters+0x24e8>)
    4a7e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[13][2] = 3.3886e-12;
    4a80:	f200 4364 	addw	r3, r0, #1124	; 0x464
    4a84:	4a6b      	ldr	r2, [pc, #428]	; (4c34 <initialize_calibration_parameters+0x24ec>)
    4a86:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[14][2] = 1.4347e-07;
    4a88:	f500 638e 	add.w	r3, r0, #1136	; 0x470
    4a8c:	4a6a      	ldr	r2, [pc, #424]	; (4c38 <initialize_calibration_parameters+0x24f0>)
    4a8e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[15][2] = 0.0015501;
    4a90:	f200 437c 	addw	r3, r0, #1148	; 0x47c
    4a94:	4a69      	ldr	r2, [pc, #420]	; (4c3c <initialize_calibration_parameters+0x24f4>)
    4a96:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[16][2] = 7.1965e-12;
    4a98:	f500 6391 	add.w	r3, r0, #1160	; 0x488
    4a9c:	4a68      	ldr	r2, [pc, #416]	; (4c40 <initialize_calibration_parameters+0x24f8>)
    4a9e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[17][2] = 4.5064e-07;
    4aa0:	f200 4394 	addw	r3, r0, #1172	; 0x494
    4aa4:	4a67      	ldr	r2, [pc, #412]	; (4c44 <initialize_calibration_parameters+0x24fc>)
    4aa6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[18][2] = 0.0079557;
    4aa8:	f500 6394 	add.w	r3, r0, #1184	; 0x4a0
    4aac:	4a66      	ldr	r2, [pc, #408]	; (4c48 <initialize_calibration_parameters+0x2500>)
    4aae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleMiddle[19][2] = 43.2311;
    4ab0:	f200 43ac 	addw	r3, r0, #1196	; 0x4ac
    4ab4:	e0ca      	b.n	4c4c <initialize_calibration_parameters+0x2504>
    4ab6:	bf00      	nop
    4ab8:	38ae3d62 	.word	0x38ae3d62
    4abc:	bdbf950c 	.word	0xbdbf950c
    4ac0:	2917f5e1 	.word	0x2917f5e1
    4ac4:	2ba34502 	.word	0x2ba34502
    4ac8:	ab99ba41 	.word	0xab99ba41
    4acc:	b2634a28 	.word	0xb2634a28
    4ad0:	2b0a3b7c 	.word	0x2b0a3b7c
    4ad4:	2b30b67a 	.word	0x2b30b67a
    4ad8:	3244f79a 	.word	0x3244f79a
    4adc:	2aeb5d1e 	.word	0x2aeb5d1e
    4ae0:	329b7a52 	.word	0x329b7a52
    4ae4:	395473b5 	.word	0x395473b5
    4ae8:	2a82eb6e 	.word	0x2a82eb6e
    4aec:	ab8ae52e 	.word	0xab8ae52e
    4af0:	b2a4a048 	.word	0xb2a4a048
    4af4:	ac04c02a 	.word	0xac04c02a
    4af8:	b3c10cd9 	.word	0xb3c10cd9
    4afc:	bab16136 	.word	0xbab16136
    4b00:	ab71e64c 	.word	0xab71e64c
    4b04:	b3396238 	.word	0xb3396238
    4b08:	ba43c18b 	.word	0xba43c18b
    4b0c:	c09dedfa 	.word	0xc09dedfa
    4b10:	2a628512 	.word	0x2a628512
    4b14:	2b5dc910 	.word	0x2b5dc910
    4b18:	aaffbca6 	.word	0xaaffbca6
    4b1c:	b1f94cef 	.word	0xb1f94cef
    4b20:	2a636020 	.word	0x2a636020
    4b24:	2a5f4134 	.word	0x2a5f4134
    4b28:	3149a13c 	.word	0x3149a13c
    4b2c:	a906eb39 	.word	0xa906eb39
    4b30:	30723403 	.word	0x30723403
    4b34:	38060cca 	.word	0x38060cca
    4b38:	2aae0201 	.word	0x2aae0201
    4b3c:	2ac99edb 	.word	0x2ac99edb
    4b40:	31ba39f2 	.word	0x31ba39f2
    4b44:	2a89fef5 	.word	0x2a89fef5
    4b48:	b18d4fb1 	.word	0xb18d4fb1
    4b4c:	b9fe9013 	.word	0xb9fe9013
    4b50:	aaf2c88f 	.word	0xaaf2c88f
    4b54:	b2bee718 	.word	0xb2bee718
    4b58:	b9c628ef 	.word	0xb9c628ef
    4b5c:	c01db717 	.word	0xc01db717
    4b60:	2aa54dfc 	.word	0x2aa54dfc
    4b64:	2b9b2d5a 	.word	0x2b9b2d5a
    4b68:	aacfb79f 	.word	0xaacfb79f
    4b6c:	b1f85beb 	.word	0xb1f85beb
    4b70:	2ae6df14 	.word	0x2ae6df14
    4b74:	2af19fae 	.word	0x2af19fae
    4b78:	31d69aa3 	.word	0x31d69aa3
    4b7c:	ab1a8bf1 	.word	0xab1a8bf1
    4b80:	b296d4a6 	.word	0xb296d4a6
    4b84:	b9159f0e 	.word	0xb9159f0e
    4b88:	2b24d37c 	.word	0x2b24d37c
    4b8c:	2b2345ba 	.word	0x2b2345ba
    4b90:	3191eec4 	.word	0x3191eec4
    4b94:	aa747494 	.word	0xaa747494
    4b98:	b2d54e25 	.word	0xb2d54e25
    4b9c:	ba43ac12 	.word	0xba43ac12
    4ba0:	29a96691 	.word	0x29a96691
    4ba4:	322541b0 	.word	0x322541b0
    4ba8:	398f74a8 	.word	0x398f74a8
    4bac:	3fb72b02 	.word	0x3fb72b02
    4bb0:	2ba9afec 	.word	0x2ba9afec
    4bb4:	ab11c0dd 	.word	0xab11c0dd
    4bb8:	2cc88d09 	.word	0x2cc88d09
    4bbc:	3485becb 	.word	0x3485becb
    4bc0:	aad2360d 	.word	0xaad2360d
    4bc4:	ac549e81 	.word	0xac549e81
    4bc8:	b373fbf5 	.word	0xb373fbf5
    4bcc:	ac918146 	.word	0xac918146
    4bd0:	b4353f64 	.word	0xb4353f64
    4bd4:	bae802b3 	.word	0xbae802b3
    4bd8:	abbc5222 	.word	0xabbc5222
    4bdc:	2cb0d716 	.word	0x2cb0d716
    4be0:	348153ab 	.word	0x348153ab
    4be4:	2c8570b4 	.word	0x2c8570b4
    4be8:	341adae4 	.word	0x341adae4
    4bec:	3abb82f8 	.word	0x3abb82f8
    4bf0:	2c986963 	.word	0x2c986963
    4bf4:	3489eab1 	.word	0x3489eab1
    4bf8:	3b68c1f6 	.word	0x3b68c1f6
    4bfc:	41595c29 	.word	0x41595c29
    4c00:	2b64c640 	.word	0x2b64c640
    4c04:	aae3462f 	.word	0xaae3462f
    4c08:	2cc8db66 	.word	0x2cc8db66
    4c0c:	347d27f7 	.word	0x347d27f7
    4c10:	2a270cbe 	.word	0x2a270cbe
    4c14:	ab7fde84 	.word	0xab7fde84
    4c18:	b2a3566d 	.word	0xb2a3566d
    4c1c:	ab7b5ab6 	.word	0xab7b5ab6
    4c20:	b333bc5d 	.word	0xb333bc5d
    4c24:	b9f36bf3 	.word	0xb9f36bf3
    4c28:	ac12381e 	.word	0xac12381e
    4c2c:	2c5ddd99 	.word	0x2c5ddd99
    4c30:	34464435 	.word	0x34464435
    4c34:	2c6e7397 	.word	0x2c6e7397
    4c38:	341a0cbc 	.word	0x341a0cbc
    4c3c:	3acb2cba 	.word	0x3acb2cba
    4c40:	2cfd344f 	.word	0x2cfd344f
    4c44:	34f1ef7d 	.word	0x34f1ef7d
    4c48:	3c0258a0 	.word	0x3c0258a0
    4c4c:	4aa9      	ldr	r2, [pc, #676]	; (4ef4 <initialize_calibration_parameters+0x27ac>)
    4c4e:	601a      	str	r2, [r3, #0]
			
			// Middle Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomMiddle[0][2] = 9.1857e-13;
    4c50:	f500 6397 	add.w	r3, r0, #1208	; 0x4b8
    4c54:	4aa8      	ldr	r2, [pc, #672]	; (4ef8 <initialize_calibration_parameters+0x27b0>)
    4c56:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[1][2] = -9.9918e-13;
    4c58:	f200 43c4 	addw	r3, r0, #1220	; 0x4c4
    4c5c:	4aa7      	ldr	r2, [pc, #668]	; (4efc <initialize_calibration_parameters+0x27b4>)
    4c5e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[2][2] = 6.4304e-12;
    4c60:	f500 639a 	add.w	r3, r0, #1232	; 0x4d0
    4c64:	4aa6      	ldr	r2, [pc, #664]	; (4f00 <initialize_calibration_parameters+0x27b8>)
    4c66:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[3][2] = 2.4853e-07;
    4c68:	f200 43dc 	addw	r3, r0, #1244	; 0x4dc
    4c6c:	4aa5      	ldr	r2, [pc, #660]	; (4f04 <initialize_calibration_parameters+0x27bc>)
    4c6e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[4][2] = 3.4895e-13;
    4c70:	f500 639d 	add.w	r3, r0, #1256	; 0x4e8
    4c74:	4aa4      	ldr	r2, [pc, #656]	; (4f08 <initialize_calibration_parameters+0x27c0>)
    4c76:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[5][2] = -3.2999e-12;
    4c78:	f200 43f4 	addw	r3, r0, #1268	; 0x4f4
    4c7c:	4aa3      	ldr	r2, [pc, #652]	; (4f0c <initialize_calibration_parameters+0x27c4>)
    4c7e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[6][2] = -5.0759e-08;
    4c80:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
    4c84:	4aa2      	ldr	r2, [pc, #648]	; (4f10 <initialize_calibration_parameters+0x27c8>)
    4c86:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[7][2] = -5.339e-13;
    4c88:	f200 530c 	addw	r3, r0, #1292	; 0x50c
    4c8c:	4aa1      	ldr	r2, [pc, #644]	; (4f14 <initialize_calibration_parameters+0x27cc>)
    4c8e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[8][2] = -1.5182e-08;
    4c90:	f500 63a3 	add.w	r3, r0, #1304	; 0x518
    4c94:	4aa0      	ldr	r2, [pc, #640]	; (4f18 <initialize_calibration_parameters+0x27d0>)
    4c96:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[9][2] = -1.6583e-05;
    4c98:	f200 5324 	addw	r3, r0, #1316	; 0x524
    4c9c:	4a9f      	ldr	r2, [pc, #636]	; (4f1c <initialize_calibration_parameters+0x27d4>)
    4c9e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[10][2] = -2.9456e-12;
    4ca0:	f500 63a6 	add.w	r3, r0, #1328	; 0x530
    4ca4:	4a9e      	ldr	r2, [pc, #632]	; (4f20 <initialize_calibration_parameters+0x27d8>)
    4ca6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[11][2] = 1.0694e-11;
    4ca8:	f200 533c 	addw	r3, r0, #1340	; 0x53c
    4cac:	4a9d      	ldr	r2, [pc, #628]	; (4f24 <initialize_calibration_parameters+0x27dc>)
    4cae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[12][2] = 3.2707e-07;
    4cb0:	f500 63a9 	add.w	r3, r0, #1352	; 0x548
    4cb4:	4a9c      	ldr	r2, [pc, #624]	; (4f28 <initialize_calibration_parameters+0x27e0>)
    4cb6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[13][2] = 1.074e-11;
    4cb8:	f200 5354 	addw	r3, r0, #1364	; 0x554
    4cbc:	4a9b      	ldr	r2, [pc, #620]	; (4f2c <initialize_calibration_parameters+0x27e4>)
    4cbe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[14][2] = 4.0572e-07;
    4cc0:	f500 63ac 	add.w	r3, r0, #1376	; 0x560
    4cc4:	4a9a      	ldr	r2, [pc, #616]	; (4f30 <initialize_calibration_parameters+0x27e8>)
    4cc6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[15][2] = 0.0037579;
    4cc8:	f200 536c 	addw	r3, r0, #1388	; 0x56c
    4ccc:	4a99      	ldr	r2, [pc, #612]	; (4f34 <initialize_calibration_parameters+0x27ec>)
    4cce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[16][2] = 8.2514e-12;
    4cd0:	f500 63af 	add.w	r3, r0, #1400	; 0x578
    4cd4:	4a98      	ldr	r2, [pc, #608]	; (4f38 <initialize_calibration_parameters+0x27f0>)
    4cd6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[17][2] = 4.7051e-07;
    4cd8:	f200 5384 	addw	r3, r0, #1412	; 0x584
    4cdc:	4a97      	ldr	r2, [pc, #604]	; (4f3c <initialize_calibration_parameters+0x27f4>)
    4cde:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[18][2] = 0.007387;
    4ce0:	f500 63b2 	add.w	r3, r0, #1424	; 0x590
    4ce4:	4a96      	ldr	r2, [pc, #600]	; (4f40 <initialize_calibration_parameters+0x27f8>)
    4ce6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomMiddle[19][2] = 35.4177;
    4ce8:	f200 539c 	addw	r3, r0, #1436	; 0x59c
    4cec:	4a95      	ldr	r2, [pc, #596]	; (4f44 <initialize_calibration_parameters+0x27fc>)
    4cee:	601a      	str	r2, [r3, #0]
			
			// Right Row - Top Sensor - X Direction
			parameters_array->sensor_topRight[0][0] = 1.21e-13;
    4cf0:	f500 63b4 	add.w	r3, r0, #1440	; 0x5a0
    4cf4:	4a94      	ldr	r2, [pc, #592]	; (4f48 <initialize_calibration_parameters+0x2800>)
    4cf6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][0] = 1.6095e-13;
    4cf8:	f200 53ac 	addw	r3, r0, #1452	; 0x5ac
    4cfc:	4a93      	ldr	r2, [pc, #588]	; (4f4c <initialize_calibration_parameters+0x2804>)
    4cfe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][0] = 1.0992e-13;
    4d00:	f500 63b7 	add.w	r3, r0, #1464	; 0x5b8
    4d04:	4a92      	ldr	r2, [pc, #584]	; (4f50 <initialize_calibration_parameters+0x2808>)
    4d06:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][0] = -2.3867e-09;
    4d08:	f200 53c4 	addw	r3, r0, #1476	; 0x5c4
    4d0c:	4a91      	ldr	r2, [pc, #580]	; (4f54 <initialize_calibration_parameters+0x280c>)
    4d0e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[4][0] = 4.1094e-13;
    4d10:	f500 63ba 	add.w	r3, r0, #1488	; 0x5d0
    4d14:	4a90      	ldr	r2, [pc, #576]	; (4f58 <initialize_calibration_parameters+0x2810>)
    4d16:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][0] = 4.3393e-13;
    4d18:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
    4d1c:	4a8f      	ldr	r2, [pc, #572]	; (4f5c <initialize_calibration_parameters+0x2814>)
    4d1e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][0] = 1.2647e-08;
    4d20:	f500 63bd 	add.w	r3, r0, #1512	; 0x5e8
    4d24:	4a8e      	ldr	r2, [pc, #568]	; (4f60 <initialize_calibration_parameters+0x2818>)
    4d26:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][0] = -1.1173e-13;
    4d28:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
    4d2c:	4a8d      	ldr	r2, [pc, #564]	; (4f64 <initialize_calibration_parameters+0x281c>)
    4d2e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][0] = -8.1155e-09;
    4d30:	f500 63c0 	add.w	r3, r0, #1536	; 0x600
    4d34:	4a8c      	ldr	r2, [pc, #560]	; (4f68 <initialize_calibration_parameters+0x2820>)
    4d36:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][0] = -0.00030878;
    4d38:	f200 630c 	addw	r3, r0, #1548	; 0x60c
    4d3c:	4a8b      	ldr	r2, [pc, #556]	; (4f6c <initialize_calibration_parameters+0x2824>)
    4d3e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][0] = 3.1179e-13;
    4d40:	f500 63c3 	add.w	r3, r0, #1560	; 0x618
    4d44:	4a8a      	ldr	r2, [pc, #552]	; (4f70 <initialize_calibration_parameters+0x2828>)
    4d46:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[11][0] = 2.7247e-13;
    4d48:	f200 6324 	addw	r3, r0, #1572	; 0x624
    4d4c:	4a89      	ldr	r2, [pc, #548]	; (4f74 <initialize_calibration_parameters+0x282c>)
    4d4e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][0] = 4.4004e-09;
    4d50:	f500 63c6 	add.w	r3, r0, #1584	; 0x630
    4d54:	4a88      	ldr	r2, [pc, #544]	; (4f78 <initialize_calibration_parameters+0x2830>)
    4d56:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][0] = 4.0099e-13;
    4d58:	f200 633c 	addw	r3, r0, #1596	; 0x63c
    4d5c:	4a87      	ldr	r2, [pc, #540]	; (4f7c <initialize_calibration_parameters+0x2834>)
    4d5e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][0] = 2.0887e-08;
    4d60:	f500 63c9 	add.w	r3, r0, #1608	; 0x648
    4d64:	4a86      	ldr	r2, [pc, #536]	; (4f80 <initialize_calibration_parameters+0x2838>)
    4d66:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][0] = 0.0002716;
    4d68:	f200 6354 	addw	r3, r0, #1620	; 0x654
    4d6c:	4a85      	ldr	r2, [pc, #532]	; (4f84 <initialize_calibration_parameters+0x283c>)
    4d6e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][0] = 7.2245e-14;
    4d70:	f500 63cc 	add.w	r3, r0, #1632	; 0x660
    4d74:	4a84      	ldr	r2, [pc, #528]	; (4f88 <initialize_calibration_parameters+0x2840>)
    4d76:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][0] = 5.4979e-09;
    4d78:	f200 636c 	addw	r3, r0, #1644	; 0x66c
    4d7c:	4a83      	ldr	r2, [pc, #524]	; (4f8c <initialize_calibration_parameters+0x2844>)
    4d7e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][0] = 0.00020405;
    4d80:	f500 63cf 	add.w	r3, r0, #1656	; 0x678
    4d84:	4a82      	ldr	r2, [pc, #520]	; (4f90 <initialize_calibration_parameters+0x2848>)
    4d86:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][0] = 1.9167;
    4d88:	f200 6384 	addw	r3, r0, #1668	; 0x684
    4d8c:	4a81      	ldr	r2, [pc, #516]	; (4f94 <initialize_calibration_parameters+0x284c>)
    4d8e:	601a      	str	r2, [r3, #0]
			
			// Right Row - Middle Sensor - X Direction
			parameters_array->sensor_middleRight[0][0] = -1.9934e-13;
    4d90:	f500 63d2 	add.w	r3, r0, #1680	; 0x690
    4d94:	4a80      	ldr	r2, [pc, #512]	; (4f98 <initialize_calibration_parameters+0x2850>)
    4d96:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][0] = -2.7223e-13;
    4d98:	f200 639c 	addw	r3, r0, #1692	; 0x69c
    4d9c:	4a7f      	ldr	r2, [pc, #508]	; (4f9c <initialize_calibration_parameters+0x2854>)
    4d9e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][0] = -2.0995e-13;
    4da0:	f500 63d5 	add.w	r3, r0, #1704	; 0x6a8
    4da4:	4a7e      	ldr	r2, [pc, #504]	; (4fa0 <initialize_calibration_parameters+0x2858>)
    4da6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][0] = -3.6907e-09;
    4da8:	f200 63b4 	addw	r3, r0, #1716	; 0x6b4
    4dac:	4a7d      	ldr	r2, [pc, #500]	; (4fa4 <initialize_calibration_parameters+0x285c>)
    4dae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][0] = 7.1491e-14;
    4db0:	f500 63d8 	add.w	r3, r0, #1728	; 0x6c0
    4db4:	4a7c      	ldr	r2, [pc, #496]	; (4fa8 <initialize_calibration_parameters+0x2860>)
    4db6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][0] = 4.205e-13;
    4db8:	f200 63cc 	addw	r3, r0, #1740	; 0x6cc
    4dbc:	4a7b      	ldr	r2, [pc, #492]	; (4fac <initialize_calibration_parameters+0x2864>)
    4dbe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][0] = 1.1738e-08;
    4dc0:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
    4dc4:	4a7a      	ldr	r2, [pc, #488]	; (4fb0 <initialize_calibration_parameters+0x2868>)
    4dc6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][0] = -1.878e-13;
    4dc8:	f200 63e4 	addw	r3, r0, #1764	; 0x6e4
    4dcc:	4a79      	ldr	r2, [pc, #484]	; (4fb4 <initialize_calibration_parameters+0x286c>)
    4dce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][0] = -1.3315e-08;
    4dd0:	f500 63de 	add.w	r3, r0, #1776	; 0x6f0
    4dd4:	4a78      	ldr	r2, [pc, #480]	; (4fb8 <initialize_calibration_parameters+0x2870>)
    4dd6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[9][0] = -0.00040059;
    4dd8:	f200 63fc 	addw	r3, r0, #1788	; 0x6fc
    4ddc:	4a77      	ldr	r2, [pc, #476]	; (4fbc <initialize_calibration_parameters+0x2874>)
    4dde:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][0] = -1.6446e-13;
    4de0:	f500 63e1 	add.w	r3, r0, #1800	; 0x708
    4de4:	4a76      	ldr	r2, [pc, #472]	; (4fc0 <initialize_calibration_parameters+0x2878>)
    4de6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][0] = -2.8917e-13;
    4de8:	f200 7314 	addw	r3, r0, #1812	; 0x714
    4dec:	4a75      	ldr	r2, [pc, #468]	; (4fc4 <initialize_calibration_parameters+0x287c>)
    4dee:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][0] = -6.5851e-09;
    4df0:	f500 63e4 	add.w	r3, r0, #1824	; 0x720
    4df4:	4a74      	ldr	r2, [pc, #464]	; (4fc8 <initialize_calibration_parameters+0x2880>)
    4df6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][0] = -1.8023e-13;
    4df8:	f200 732c 	addw	r3, r0, #1836	; 0x72c
    4dfc:	4a73      	ldr	r2, [pc, #460]	; (4fcc <initialize_calibration_parameters+0x2884>)
    4dfe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][0] = -9.4981e-09;
    4e00:	f500 63e7 	add.w	r3, r0, #1848	; 0x738
    4e04:	4a72      	ldr	r2, [pc, #456]	; (4fd0 <initialize_calibration_parameters+0x2888>)
    4e06:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][0] = -0.00011737;
    4e08:	f200 7344 	addw	r3, r0, #1860	; 0x744
    4e0c:	4a71      	ldr	r2, [pc, #452]	; (4fd4 <initialize_calibration_parameters+0x288c>)
    4e0e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[16][0] = -9.9548e-14;
    4e10:	f500 63ea 	add.w	r3, r0, #1872	; 0x750
    4e14:	4a70      	ldr	r2, [pc, #448]	; (4fd8 <initialize_calibration_parameters+0x2890>)
    4e16:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][0] = -6.8385e-09;
    4e18:	f200 735c 	addw	r3, r0, #1884	; 0x75c
    4e1c:	4a6f      	ldr	r2, [pc, #444]	; (4fdc <initialize_calibration_parameters+0x2894>)
    4e1e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][0] = -0.00015646;
    4e20:	f500 63ed 	add.w	r3, r0, #1896	; 0x768
    4e24:	4a6e      	ldr	r2, [pc, #440]	; (4fe0 <initialize_calibration_parameters+0x2898>)
    4e26:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][0] = -1.0232;
    4e28:	f200 7374 	addw	r3, r0, #1908	; 0x774
    4e2c:	4a6d      	ldr	r2, [pc, #436]	; (4fe4 <initialize_calibration_parameters+0x289c>)
    4e2e:	601a      	str	r2, [r3, #0]
			
			// Right Row - Bottom Sensor - X Direction
			parameters_array->sensor_bottomRight[0][0] = -7.1071e-16;
    4e30:	f500 63f0 	add.w	r3, r0, #1920	; 0x780
    4e34:	4a6c      	ldr	r2, [pc, #432]	; (4fe8 <initialize_calibration_parameters+0x28a0>)
    4e36:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][0] = -7.1388e-14;
    4e38:	f200 738c 	addw	r3, r0, #1932	; 0x78c
    4e3c:	4a6b      	ldr	r2, [pc, #428]	; (4fec <initialize_calibration_parameters+0x28a4>)
    4e3e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][0] = -1.9277e-14;
    4e40:	f500 63f3 	add.w	r3, r0, #1944	; 0x798
    4e44:	4a6a      	ldr	r2, [pc, #424]	; (4ff0 <initialize_calibration_parameters+0x28a8>)
    4e46:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][0] = 4.0829e-09;
    4e48:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
    4e4c:	4a69      	ldr	r2, [pc, #420]	; (4ff4 <initialize_calibration_parameters+0x28ac>)
    4e4e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][0] = 5.4959e-13;
    4e50:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
    4e54:	4a68      	ldr	r2, [pc, #416]	; (4ff8 <initialize_calibration_parameters+0x28b0>)
    4e56:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][0] = 8.4372e-15;
    4e58:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
    4e5c:	4a67      	ldr	r2, [pc, #412]	; (4ffc <initialize_calibration_parameters+0x28b4>)
    4e5e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][0] = 2.5161e-09;
    4e60:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
    4e64:	4a66      	ldr	r2, [pc, #408]	; (5000 <initialize_calibration_parameters+0x28b8>)
    4e66:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][0] = -5.3587e-13;
    4e68:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
    4e6c:	4a65      	ldr	r2, [pc, #404]	; (5004 <initialize_calibration_parameters+0x28bc>)
    4e6e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][0] = -3.1284e-08;
    4e70:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
    4e74:	4a64      	ldr	r2, [pc, #400]	; (5008 <initialize_calibration_parameters+0x28c0>)
    4e76:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][0] = -0.00064719;
    4e78:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
    4e7c:	4a63      	ldr	r2, [pc, #396]	; (500c <initialize_calibration_parameters+0x28c4>)
    4e7e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][0] = -3.2155e-13;
    4e80:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
    4e84:	4a62      	ldr	r2, [pc, #392]	; (5010 <initialize_calibration_parameters+0x28c8>)
    4e86:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][0] = -1.0247e-12;
    4e88:	f600 0304 	addw	r3, r0, #2052	; 0x804
    4e8c:	4a61      	ldr	r2, [pc, #388]	; (5014 <initialize_calibration_parameters+0x28cc>)
    4e8e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][0] = -1.9576e-08;
    4e90:	f500 6301 	add.w	r3, r0, #2064	; 0x810
    4e94:	4a60      	ldr	r2, [pc, #384]	; (5018 <initialize_calibration_parameters+0x28d0>)
    4e96:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][0] = -1.1334e-12;
    4e98:	f600 031c 	addw	r3, r0, #2076	; 0x81c
    4e9c:	4a5f      	ldr	r2, [pc, #380]	; (501c <initialize_calibration_parameters+0x28d4>)
    4e9e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][0] = -5.0296e-08;
    4ea0:	f600 0328 	addw	r3, r0, #2088	; 0x828
    4ea4:	4a5e      	ldr	r2, [pc, #376]	; (5020 <initialize_calibration_parameters+0x28d8>)
    4ea6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][0] = -0.00055893;
    4ea8:	f600 0334 	addw	r3, r0, #2100	; 0x834
    4eac:	4a5d      	ldr	r2, [pc, #372]	; (5024 <initialize_calibration_parameters+0x28dc>)
    4eae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][0] = -3.3555e-13;
    4eb0:	f500 6304 	add.w	r3, r0, #2112	; 0x840
    4eb4:	4a5c      	ldr	r2, [pc, #368]	; (5028 <initialize_calibration_parameters+0x28e0>)
    4eb6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][0] = -2.1683e-08;
    4eb8:	f600 034c 	addw	r3, r0, #2124	; 0x84c
    4ebc:	4a5b      	ldr	r2, [pc, #364]	; (502c <initialize_calibration_parameters+0x28e4>)
    4ebe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][0] = -0.00049719;
    4ec0:	f600 0358 	addw	r3, r0, #2136	; 0x858
    4ec4:	4a5a      	ldr	r2, [pc, #360]	; (5030 <initialize_calibration_parameters+0x28e8>)
    4ec6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][0] = -3.8332;
    4ec8:	f600 0364 	addw	r3, r0, #2148	; 0x864
    4ecc:	4a59      	ldr	r2, [pc, #356]	; (5034 <initialize_calibration_parameters+0x28ec>)
    4ece:	601a      	str	r2, [r3, #0]
			
			// Right Row - Top Sensor - Y Direction
			parameters_array->sensor_topRight[0][1] = 1.5966e-13;
    4ed0:	f200 53a4 	addw	r3, r0, #1444	; 0x5a4
    4ed4:	4a58      	ldr	r2, [pc, #352]	; (5038 <initialize_calibration_parameters+0x28f0>)
    4ed6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][1] = 3.8594e-13;
    4ed8:	f500 63b6 	add.w	r3, r0, #1456	; 0x5b0
    4edc:	4a57      	ldr	r2, [pc, #348]	; (503c <initialize_calibration_parameters+0x28f4>)
    4ede:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][1] = -6.4163e-14;
    4ee0:	f200 53bc 	addw	r3, r0, #1468	; 0x5bc
    4ee4:	4a56      	ldr	r2, [pc, #344]	; (5040 <initialize_calibration_parameters+0x28f8>)
    4ee6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][1] = -5.6278e-10;
    4ee8:	f500 63b9 	add.w	r3, r0, #1480	; 0x5c8
    4eec:	4a55      	ldr	r2, [pc, #340]	; (5044 <initialize_calibration_parameters+0x28fc>)
    4eee:	601a      	str	r2, [r3, #0]
    4ef0:	e0aa      	b.n	5048 <initialize_calibration_parameters+0x2900>
    4ef2:	bf00      	nop
    4ef4:	422ceca5 	.word	0x422ceca5
    4ef8:	2b8146f9 	.word	0x2b8146f9
    4efc:	ab8c9f41 	.word	0xab8c9f41
    4f00:	2ce23fe5 	.word	0x2ce23fe5
    4f04:	34856db4 	.word	0x34856db4
    4f08:	2ac470ff 	.word	0x2ac470ff
    4f0c:	ac6835b7 	.word	0xac6835b7
    4f10:	b35a021c 	.word	0xb35a021c
    4f14:	ab16478d 	.word	0xab16478d
    4f18:	b2826992 	.word	0xb2826992
    4f1c:	b78b1bb9 	.word	0xb78b1bb9
    4f20:	ac4f4736 	.word	0xac4f4736
    4f24:	2d3c217f 	.word	0x2d3c217f
    4f28:	34af9829 	.word	0x34af9829
    4f2c:	2d3cf0a9 	.word	0x2d3cf0a9
    4f30:	34d9d1bb 	.word	0x34d9d1bb
    4f34:	3b76471a 	.word	0x3b76471a
    4f38:	2d112901 	.word	0x2d112901
    4f3c:	34fc9a67 	.word	0x34fc9a67
    4f40:	3bf20ea6 	.word	0x3bf20ea6
    4f44:	420dabba 	.word	0x420dabba
    4f48:	2a083be0 	.word	0x2a083be0
    4f4c:	2a3536ae 	.word	0x2a3536ae
    4f50:	29f78491 	.word	0x29f78491
    4f54:	b1240345 	.word	0xb1240345
    4f58:	2ae756b2 	.word	0x2ae756b2
    4f5c:	2af447e7 	.word	0x2af447e7
    4f60:	32594618 	.word	0x32594618
    4f64:	a9fb97f6 	.word	0xa9fb97f6
    4f68:	b20b6c59 	.word	0xb20b6c59
    4f6c:	b9a1e3c0 	.word	0xb9a1e3c0
    4f70:	2aaf85ad 	.word	0x2aaf85ad
    4f74:	2a996311 	.word	0x2a996311
    4f78:	31973254 	.word	0x31973254
    4f7c:	2ae1bcc0 	.word	0x2ae1bcc0
    4f80:	32b36b00 	.word	0x32b36b00
    4f84:	398e6589 	.word	0x398e6589
    4f88:	29a2ae68 	.word	0x29a2ae68
    4f8c:	31bce80a 	.word	0x31bce80a
    4f90:	3955f641 	.word	0x3955f641
    4f94:	3ff5566d 	.word	0x3ff5566d
    4f98:	aa606fd8 	.word	0xaa606fd8
    4f9c:	aa99407a 	.word	0xaa99407a
    4fa0:	aa6c61f8 	.word	0xaa6c61f8
    4fa4:	b17d9f7b 	.word	0xb17d9f7b
    4fa8:	29a0fbc1 	.word	0x29a0fbc1
    4fac:	2aecb870 	.word	0x2aecb870
    4fb0:	3249a845 	.word	0x3249a845
    4fb4:	aa5371aa 	.word	0xaa5371aa
    4fb8:	b264bffd 	.word	0xb264bffd
    4fbc:	b9d20648 	.word	0xb9d20648
    4fc0:	aa392a5e 	.word	0xaa392a5e
    4fc4:	aaa2c9ca 	.word	0xaaa2c9ca
    4fc8:	b1e24327 	.word	0xb1e24327
    4fcc:	aa4aebc3 	.word	0xaa4aebc3
    4fd0:	b2232d16 	.word	0xb2232d16
    4fd4:	b8f6248a 	.word	0xb8f6248a
    4fd8:	a9e02984 	.word	0xa9e02984
    4fdc:	b1eaf815 	.word	0xb1eaf815
    4fe0:	b9240f69 	.word	0xb9240f69
    4fe4:	bf82f838 	.word	0xbf82f838
    4fe8:	a64cd924 	.word	0xa64cd924
    4fec:	a9a0c061 	.word	0xa9a0c061
    4ff0:	a8ada1bc 	.word	0xa8ada1bc
    4ff4:	318c4991 	.word	0x318c4991
    4ff8:	2b1ab222 	.word	0x2b1ab222
    4ffc:	2817fdb8 	.word	0x2817fdb8
    5000:	312ce7b3 	.word	0x312ce7b3
    5004:	ab16d581 	.word	0xab16d581
    5008:	b3065d1f 	.word	0xb3065d1f
    500c:	ba29a830 	.word	0xba29a830
    5010:	aab5043d 	.word	0xaab5043d
    5014:	ab9036b5 	.word	0xab9036b5
    5018:	b2a82814 	.word	0xb2a82814
    501c:	ab9f830a 	.word	0xab9f830a
    5020:	b3580509 	.word	0xb3580509
    5024:	ba128528 	.word	0xba128528
    5028:	aabce5da 	.word	0xaabce5da
    502c:	b2ba416c 	.word	0xb2ba416c
    5030:	ba0255db 	.word	0xba0255db
    5034:	c0755326 	.word	0xc0755326
    5038:	2a33c2dd 	.word	0x2a33c2dd
    503c:	2ad943d1 	.word	0x2ad943d1
    5040:	a9907b74 	.word	0xa9907b74
    5044:	b01ab21f 	.word	0xb01ab21f
			parameters_array->sensor_topRight[4][1] = 3.0139e-13;
    5048:	f200 53d4 	addw	r3, r0, #1492	; 0x5d4
    504c:	4aa9      	ldr	r2, [pc, #676]	; (52f4 <initialize_calibration_parameters+0x2bac>)
    504e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][1] = -1.5559e-13;
    5050:	f500 63bc 	add.w	r3, r0, #1504	; 0x5e0
    5054:	4aa8      	ldr	r2, [pc, #672]	; (52f8 <initialize_calibration_parameters+0x2bb0>)
    5056:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][1] = -1.8009e-09;
    5058:	f200 53ec 	addw	r3, r0, #1516	; 0x5ec
    505c:	4aa7      	ldr	r2, [pc, #668]	; (52fc <initialize_calibration_parameters+0x2bb4>)
    505e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][1] = 1.2098e-13;
    5060:	f500 63bf 	add.w	r3, r0, #1528	; 0x5f8
    5064:	4aa6      	ldr	r2, [pc, #664]	; (5300 <initialize_calibration_parameters+0x2bb8>)
    5066:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][1] = 4.6134e-09;
    5068:	f200 6304 	addw	r3, r0, #1540	; 0x604
    506c:	4aa5      	ldr	r2, [pc, #660]	; (5304 <initialize_calibration_parameters+0x2bbc>)
    506e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][1] = 5.4361e-05;
    5070:	f500 63c2 	add.w	r3, r0, #1552	; 0x610
    5074:	4aa4      	ldr	r2, [pc, #656]	; (5308 <initialize_calibration_parameters+0x2bc0>)
    5076:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][1] = 3.3802e-14;
    5078:	f200 631c 	addw	r3, r0, #1564	; 0x61c
    507c:	4aa3      	ldr	r2, [pc, #652]	; (530c <initialize_calibration_parameters+0x2bc4>)
    507e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[11][1] = -3.8683e-14;
    5080:	f500 63c5 	add.w	r3, r0, #1576	; 0x628
    5084:	4aa2      	ldr	r2, [pc, #648]	; (5310 <initialize_calibration_parameters+0x2bc8>)
    5086:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][1] = -4.8227e-09;
    5088:	f200 6334 	addw	r3, r0, #1588	; 0x634
    508c:	4aa1      	ldr	r2, [pc, #644]	; (5314 <initialize_calibration_parameters+0x2bcc>)
    508e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][1] = -2.3842e-13;
    5090:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
    5094:	4aa0      	ldr	r2, [pc, #640]	; (5318 <initialize_calibration_parameters+0x2bd0>)
    5096:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][1] = -1.9041e-08;
    5098:	f200 634c 	addw	r3, r0, #1612	; 0x64c
    509c:	4a9f      	ldr	r2, [pc, #636]	; (531c <initialize_calibration_parameters+0x2bd4>)
    509e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][1] = -0.00047867;
    50a0:	f500 63cb 	add.w	r3, r0, #1624	; 0x658
    50a4:	4a9e      	ldr	r2, [pc, #632]	; (5320 <initialize_calibration_parameters+0x2bd8>)
    50a6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][1] = 8.5124e-14;
    50a8:	f200 6364 	addw	r3, r0, #1636	; 0x664
    50ac:	4a9d      	ldr	r2, [pc, #628]	; (5324 <initialize_calibration_parameters+0x2bdc>)
    50ae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][1] = 5.0213e-09;
    50b0:	f500 63ce 	add.w	r3, r0, #1648	; 0x670
    50b4:	4a9c      	ldr	r2, [pc, #624]	; (5328 <initialize_calibration_parameters+0x2be0>)
    50b6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][1] = 0.00010413;
    50b8:	f200 637c 	addw	r3, r0, #1660	; 0x67c
    50bc:	4a9b      	ldr	r2, [pc, #620]	; (532c <initialize_calibration_parameters+0x2be4>)
    50be:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][1] = 0.41587;
    50c0:	f500 63d1 	add.w	r3, r0, #1672	; 0x688
    50c4:	4a9a      	ldr	r2, [pc, #616]	; (5330 <initialize_calibration_parameters+0x2be8>)
    50c6:	601a      	str	r2, [r3, #0]
			
			// Right Row - Middle Sensor - Y Direction
			parameters_array->sensor_middleRight[0][1] = -8.3032e-14;
    50c8:	f200 6394 	addw	r3, r0, #1684	; 0x694
    50cc:	4a99      	ldr	r2, [pc, #612]	; (5334 <initialize_calibration_parameters+0x2bec>)
    50ce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][1] = 1.0194e-12;
    50d0:	f500 63d4 	add.w	r3, r0, #1696	; 0x6a0
    50d4:	4a98      	ldr	r2, [pc, #608]	; (5338 <initialize_calibration_parameters+0x2bf0>)
    50d6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][1] = 1.5667e-13;
    50d8:	f200 63ac 	addw	r3, r0, #1708	; 0x6ac
    50dc:	4a97      	ldr	r2, [pc, #604]	; (533c <initialize_calibration_parameters+0x2bf4>)
    50de:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][1] = 1.3802e-09;
    50e0:	f500 63d7 	add.w	r3, r0, #1720	; 0x6b8
    50e4:	4a96      	ldr	r2, [pc, #600]	; (5340 <initialize_calibration_parameters+0x2bf8>)
    50e6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][1] = -8.1018e-13;
    50e8:	f200 63c4 	addw	r3, r0, #1732	; 0x6c4
    50ec:	4a95      	ldr	r2, [pc, #596]	; (5344 <initialize_calibration_parameters+0x2bfc>)
    50ee:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][1] = -6.6029e-13;
    50f0:	f500 63da 	add.w	r3, r0, #1744	; 0x6d0
    50f4:	4a94      	ldr	r2, [pc, #592]	; (5348 <initialize_calibration_parameters+0x2c00>)
    50f6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][1] = -2.0348e-08;
    50f8:	f200 63dc 	addw	r3, r0, #1756	; 0x6dc
    50fc:	4a93      	ldr	r2, [pc, #588]	; (534c <initialize_calibration_parameters+0x2c04>)
    50fe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][1] = -3.5124e-13;
    5100:	f500 63dd 	add.w	r3, r0, #1768	; 0x6e8
    5104:	4a92      	ldr	r2, [pc, #584]	; (5350 <initialize_calibration_parameters+0x2c08>)
    5106:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][1] = -1.5476e-08;
    5108:	f200 63f4 	addw	r3, r0, #1780	; 0x6f4
    510c:	4a91      	ldr	r2, [pc, #580]	; (5354 <initialize_calibration_parameters+0x2c0c>)
    510e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[9][1] = -0.00017337;
    5110:	f500 63e0 	add.w	r3, r0, #1792	; 0x700
    5114:	4a90      	ldr	r2, [pc, #576]	; (5358 <initialize_calibration_parameters+0x2c10>)
    5116:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][1] = 1.683e-12;
    5118:	f200 730c 	addw	r3, r0, #1804	; 0x70c
    511c:	4a8f      	ldr	r2, [pc, #572]	; (535c <initialize_calibration_parameters+0x2c14>)
    511e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][1] = 1.0864e-12;
    5120:	f500 63e3 	add.w	r3, r0, #1816	; 0x718
    5124:	4a8e      	ldr	r2, [pc, #568]	; (5360 <initialize_calibration_parameters+0x2c18>)
    5126:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][1] = 3.3073e-08;
    5128:	f200 7324 	addw	r3, r0, #1828	; 0x724
    512c:	4a8d      	ldr	r2, [pc, #564]	; (5364 <initialize_calibration_parameters+0x2c1c>)
    512e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][1] = 2.9774e-13;
    5130:	f500 63e6 	add.w	r3, r0, #1840	; 0x730
    5134:	4a8c      	ldr	r2, [pc, #560]	; (5368 <initialize_calibration_parameters+0x2c20>)
    5136:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][1] = 1.176e-08;
    5138:	f200 733c 	addw	r3, r0, #1852	; 0x73c
    513c:	4a8b      	ldr	r2, [pc, #556]	; (536c <initialize_calibration_parameters+0x2c24>)
    513e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][1] = -3.9746e-05;
    5140:	f500 63e9 	add.w	r3, r0, #1864	; 0x748
    5144:	4a8a      	ldr	r2, [pc, #552]	; (5370 <initialize_calibration_parameters+0x2c28>)
    5146:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[16][1] = 2.4823e-13;
    5148:	f200 7354 	addw	r3, r0, #1876	; 0x754
    514c:	4a89      	ldr	r2, [pc, #548]	; (5374 <initialize_calibration_parameters+0x2c2c>)
    514e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][1] = 1.6227e-08;
    5150:	f500 63ec 	add.w	r3, r0, #1888	; 0x760
    5154:	4a88      	ldr	r2, [pc, #544]	; (5378 <initialize_calibration_parameters+0x2c30>)
    5156:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][1] = 0.00040154;
    5158:	f200 736c 	addw	r3, r0, #1900	; 0x76c
    515c:	4a87      	ldr	r2, [pc, #540]	; (537c <initialize_calibration_parameters+0x2c34>)
    515e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][1] = 2.762;
    5160:	f500 63ef 	add.w	r3, r0, #1912	; 0x778
    5164:	4a86      	ldr	r2, [pc, #536]	; (5380 <initialize_calibration_parameters+0x2c38>)
    5166:	601a      	str	r2, [r3, #0]
			
			// Right Row - Bottom Sensor - Y Direction
			parameters_array->sensor_bottomRight[0][1] = -4.3898e-14;
    5168:	f200 7384 	addw	r3, r0, #1924	; 0x784
    516c:	4a85      	ldr	r2, [pc, #532]	; (5384 <initialize_calibration_parameters+0x2c3c>)
    516e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][1] = 4.1151e-13;
    5170:	f500 63f2 	add.w	r3, r0, #1936	; 0x790
    5174:	4a84      	ldr	r2, [pc, #528]	; (5388 <initialize_calibration_parameters+0x2c40>)
    5176:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][1] = -1.3706e-13;
    5178:	f200 739c 	addw	r3, r0, #1948	; 0x79c
    517c:	4a83      	ldr	r2, [pc, #524]	; (538c <initialize_calibration_parameters+0x2c44>)
    517e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][1] = -4.0953e-09;
    5180:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
    5184:	4a82      	ldr	r2, [pc, #520]	; (5390 <initialize_calibration_parameters+0x2c48>)
    5186:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][1] = 3.1018e-13;
    5188:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
    518c:	4a81      	ldr	r2, [pc, #516]	; (5394 <initialize_calibration_parameters+0x2c4c>)
    518e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][1] = 6.1773e-13;
    5190:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
    5194:	4a80      	ldr	r2, [pc, #512]	; (5398 <initialize_calibration_parameters+0x2c50>)
    5196:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][1] = 1.4132e-08;
    5198:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
    519c:	4a7f      	ldr	r2, [pc, #508]	; (539c <initialize_calibration_parameters+0x2c54>)
    519e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][1] = -2.8896e-13;
    51a0:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
    51a4:	4a7e      	ldr	r2, [pc, #504]	; (53a0 <initialize_calibration_parameters+0x2c58>)
    51a6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][1] = -8.6098e-09;
    51a8:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
    51ac:	4a7d      	ldr	r2, [pc, #500]	; (53a4 <initialize_calibration_parameters+0x2c5c>)
    51ae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][1] = -4.2807e-05;
    51b0:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
    51b4:	4a7c      	ldr	r2, [pc, #496]	; (53a8 <initialize_calibration_parameters+0x2c60>)
    51b6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][1] = 5.1204e-14;
    51b8:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
    51bc:	4a7b      	ldr	r2, [pc, #492]	; (53ac <initialize_calibration_parameters+0x2c64>)
    51be:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][1] = -4.4582e-13;
    51c0:	f600 0308 	addw	r3, r0, #2056	; 0x808
    51c4:	4a7a      	ldr	r2, [pc, #488]	; (53b0 <initialize_calibration_parameters+0x2c68>)
    51c6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][1] = -1.6379e-08;
    51c8:	f600 0314 	addw	r3, r0, #2068	; 0x814
    51cc:	4a79      	ldr	r2, [pc, #484]	; (53b4 <initialize_calibration_parameters+0x2c6c>)
    51ce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][1] = -4.5987e-13;
    51d0:	f500 6302 	add.w	r3, r0, #2080	; 0x820
    51d4:	4a78      	ldr	r2, [pc, #480]	; (53b8 <initialize_calibration_parameters+0x2c70>)
    51d6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][1] = -3.2859e-08;
    51d8:	f600 032c 	addw	r3, r0, #2092	; 0x82c
    51dc:	4a77      	ldr	r2, [pc, #476]	; (53bc <initialize_calibration_parameters+0x2c74>)
    51de:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][1] = -0.00070892;
    51e0:	f600 0338 	addw	r3, r0, #2104	; 0x838
    51e4:	4a76      	ldr	r2, [pc, #472]	; (53c0 <initialize_calibration_parameters+0x2c78>)
    51e6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][1] = 2.6932e-13;
    51e8:	f600 0344 	addw	r3, r0, #2116	; 0x844
    51ec:	4a75      	ldr	r2, [pc, #468]	; (53c4 <initialize_calibration_parameters+0x2c7c>)
    51ee:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][1] = 1.789e-08;
    51f0:	f500 6305 	add.w	r3, r0, #2128	; 0x850
    51f4:	4a74      	ldr	r2, [pc, #464]	; (53c8 <initialize_calibration_parameters+0x2c80>)
    51f6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][1] = 0.00040507;
    51f8:	f600 035c 	addw	r3, r0, #2140	; 0x85c
    51fc:	4a73      	ldr	r2, [pc, #460]	; (53cc <initialize_calibration_parameters+0x2c84>)
    51fe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][1] = 2.7042;
    5200:	f600 0368 	addw	r3, r0, #2152	; 0x868
    5204:	4a72      	ldr	r2, [pc, #456]	; (53d0 <initialize_calibration_parameters+0x2c88>)
    5206:	601a      	str	r2, [r3, #0]
			
			// Right Row - Top Sensor - Z Direction
			parameters_array->sensor_topRight[0][2] = -2.9498e-14;
    5208:	f500 63b5 	add.w	r3, r0, #1448	; 0x5a8
    520c:	4a71      	ldr	r2, [pc, #452]	; (53d4 <initialize_calibration_parameters+0x2c8c>)
    520e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[1][2] = -8.7385e-14;
    5210:	f200 53b4 	addw	r3, r0, #1460	; 0x5b4
    5214:	4a70      	ldr	r2, [pc, #448]	; (53d8 <initialize_calibration_parameters+0x2c90>)
    5216:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[2][2] = 1.5697e-12;
    5218:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
    521c:	4a6f      	ldr	r2, [pc, #444]	; (53dc <initialize_calibration_parameters+0x2c94>)
    521e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[3][2] = 8.7272e-08;
    5220:	f200 53cc 	addw	r3, r0, #1484	; 0x5cc
    5224:	4a6e      	ldr	r2, [pc, #440]	; (53e0 <initialize_calibration_parameters+0x2c98>)
    5226:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[4][2] = -1.4037e-12;
    5228:	f500 63bb 	add.w	r3, r0, #1496	; 0x5d8
    522c:	4a6d      	ldr	r2, [pc, #436]	; (53e4 <initialize_calibration_parameters+0x2c9c>)
    522e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[5][2] = -7.3392e-13;
    5230:	f200 53e4 	addw	r3, r0, #1508	; 0x5e4
    5234:	4a6c      	ldr	r2, [pc, #432]	; (53e8 <initialize_calibration_parameters+0x2ca0>)
    5236:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[6][2] = -2.2417e-08;
    5238:	f500 63be 	add.w	r3, r0, #1520	; 0x5f0
    523c:	4a6b      	ldr	r2, [pc, #428]	; (53ec <initialize_calibration_parameters+0x2ca4>)
    523e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[7][2] = -4.0397e-13;
    5240:	f200 53fc 	addw	r3, r0, #1532	; 0x5fc
    5244:	4a6a      	ldr	r2, [pc, #424]	; (53f0 <initialize_calibration_parameters+0x2ca8>)
    5246:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[8][2] = -2.0291e-08;
    5248:	f500 63c1 	add.w	r3, r0, #1544	; 0x608
    524c:	4a69      	ldr	r2, [pc, #420]	; (53f4 <initialize_calibration_parameters+0x2cac>)
    524e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[9][2] = -0.00024858;
    5250:	f200 6314 	addw	r3, r0, #1556	; 0x614
    5254:	4a68      	ldr	r2, [pc, #416]	; (53f8 <initialize_calibration_parameters+0x2cb0>)
    5256:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[10][2] = -7.4737e-13;
    5258:	f500 63c4 	add.w	r3, r0, #1568	; 0x620
    525c:	4a67      	ldr	r2, [pc, #412]	; (53fc <initialize_calibration_parameters+0x2cb4>)
    525e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[11][2] = 6.1156e-13;
    5260:	f200 632c 	addw	r3, r0, #1580	; 0x62c
    5264:	4a66      	ldr	r2, [pc, #408]	; (5400 <initialize_calibration_parameters+0x2cb8>)
    5266:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[12][2] = 5.6451e-08;
    5268:	f500 63c7 	add.w	r3, r0, #1592	; 0x638
    526c:	4a65      	ldr	r2, [pc, #404]	; (5404 <initialize_calibration_parameters+0x2cbc>)
    526e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[13][2] = -5.6011e-13;
    5270:	f200 6344 	addw	r3, r0, #1604	; 0x644
    5274:	4a64      	ldr	r2, [pc, #400]	; (5408 <initialize_calibration_parameters+0x2cc0>)
    5276:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[14][2] = -3.5387e-08;
    5278:	f500 63ca 	add.w	r3, r0, #1616	; 0x650
    527c:	4a63      	ldr	r2, [pc, #396]	; (540c <initialize_calibration_parameters+0x2cc4>)
    527e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[15][2] = -0.00060485;
    5280:	f200 635c 	addw	r3, r0, #1628	; 0x65c
    5284:	4a62      	ldr	r2, [pc, #392]	; (5410 <initialize_calibration_parameters+0x2cc8>)
    5286:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[16][2] = 5.0835e-13;
    5288:	f500 63cd 	add.w	r3, r0, #1640	; 0x668
    528c:	4a61      	ldr	r2, [pc, #388]	; (5414 <initialize_calibration_parameters+0x2ccc>)
    528e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[17][2] = 3.9746e-08;
    5290:	f200 6374 	addw	r3, r0, #1652	; 0x674
    5294:	4a60      	ldr	r2, [pc, #384]	; (5418 <initialize_calibration_parameters+0x2cd0>)
    5296:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[18][2] = 0.00038409;
    5298:	f500 63d0 	add.w	r3, r0, #1664	; 0x680
    529c:	4a5f      	ldr	r2, [pc, #380]	; (541c <initialize_calibration_parameters+0x2cd4>)
    529e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_topRight[19][2] = -1.5029;
    52a0:	f200 638c 	addw	r3, r0, #1676	; 0x68c
    52a4:	4a5e      	ldr	r2, [pc, #376]	; (5420 <initialize_calibration_parameters+0x2cd8>)
    52a6:	601a      	str	r2, [r3, #0]
			
			// Right Row - Middle Sensor - Z Direction
			parameters_array->sensor_middleRight[0][2] = 9.1719e-13;
    52a8:	f500 63d3 	add.w	r3, r0, #1688	; 0x698
    52ac:	4a5d      	ldr	r2, [pc, #372]	; (5424 <initialize_calibration_parameters+0x2cdc>)
    52ae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[1][2] = -4.2162e-12;
    52b0:	f200 63a4 	addw	r3, r0, #1700	; 0x6a4
    52b4:	4a5c      	ldr	r2, [pc, #368]	; (5428 <initialize_calibration_parameters+0x2ce0>)
    52b6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[2][2] = 1.0315e-12;
    52b8:	f500 63d6 	add.w	r3, r0, #1712	; 0x6b0
    52bc:	4a5b      	ldr	r2, [pc, #364]	; (542c <initialize_calibration_parameters+0x2ce4>)
    52be:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[3][2] = 8.3965e-08;
    52c0:	f200 63bc 	addw	r3, r0, #1724	; 0x6bc
    52c4:	4a5a      	ldr	r2, [pc, #360]	; (5430 <initialize_calibration_parameters+0x2ce8>)
    52c6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[4][2] = 2.5743e-12;
    52c8:	f500 63d9 	add.w	r3, r0, #1736	; 0x6c8
    52cc:	4a59      	ldr	r2, [pc, #356]	; (5434 <initialize_calibration_parameters+0x2cec>)
    52ce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[5][2] = -4.4024e-13;
    52d0:	f200 63d4 	addw	r3, r0, #1748	; 0x6d4
    52d4:	4a58      	ldr	r2, [pc, #352]	; (5438 <initialize_calibration_parameters+0x2cf0>)
    52d6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[6][2] = 1.4915e-08;
    52d8:	f500 63dc 	add.w	r3, r0, #1760	; 0x6e0
    52dc:	4a57      	ldr	r2, [pc, #348]	; (543c <initialize_calibration_parameters+0x2cf4>)
    52de:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[7][2] = -2.4007e-13;
    52e0:	f200 63ec 	addw	r3, r0, #1772	; 0x6ec
    52e4:	4a56      	ldr	r2, [pc, #344]	; (5440 <initialize_calibration_parameters+0x2cf8>)
    52e6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[8][2] = -1.2519e-08;
    52e8:	f500 63df 	add.w	r3, r0, #1784	; 0x6f8
    52ec:	4a55      	ldr	r2, [pc, #340]	; (5444 <initialize_calibration_parameters+0x2cfc>)
    52ee:	601a      	str	r2, [r3, #0]
    52f0:	e0aa      	b.n	5448 <initialize_calibration_parameters+0x2d00>
    52f2:	bf00      	nop
    52f4:	2aa9aae0 	.word	0x2aa9aae0
    52f8:	aa2f2dc4 	.word	0xaa2f2dc4
    52fc:	b0f78389 	.word	0xb0f78389
    5300:	2a08361c 	.word	0x2a08361c
    5304:	319e83e5 	.word	0x319e83e5
    5308:	386401ae 	.word	0x386401ae
    530c:	29183b0d 	.word	0x29183b0d
    5310:	a92e3676 	.word	0xa92e3676
    5314:	b1a5b4eb 	.word	0xb1a5b4eb
    5318:	aa8637f1 	.word	0xaa8637f1
    531c:	b2a38f9a 	.word	0xb2a38f9a
    5320:	b9faf600 	.word	0xb9faf600
    5324:	29bfaea5 	.word	0x29bfaea5
    5328:	31ac87d2 	.word	0x31ac87d2
    532c:	38da605e 	.word	0x38da605e
    5330:	3ed4ecea 	.word	0x3ed4ecea
    5334:	a9baf8b0 	.word	0xa9baf8b0
    5338:	2b8f77c1 	.word	0x2b8f77c1
    533c:	2a30650e 	.word	0x2a30650e
    5340:	30bdb178 	.word	0x30bdb178
    5344:	ab640b9f 	.word	0xab640b9f
    5348:	ab39dae9 	.word	0xab39dae9
    534c:	b2aec9ba 	.word	0xb2aec9ba
    5350:	aac5bb05 	.word	0xaac5bb05
    5354:	b284f015 	.word	0xb284f015
    5358:	b935caa8 	.word	0xb935caa8
    535c:	2becdc77 	.word	0x2becdc77
    5360:	2b98e5af 	.word	0x2b98e5af
    5364:	330e0c26 	.word	0x330e0c26
    5368:	2aa79cdb 	.word	0x2aa79cdb
    536c:	324a0907 	.word	0x324a0907
    5370:	b826b4f1 	.word	0xb826b4f1
    5374:	2a8bbdb7 	.word	0x2a8bbdb7
    5378:	328b638d 	.word	0x328b638d
    537c:	39d285c9 	.word	0x39d285c9
    5380:	4030c49c 	.word	0x4030c49c
    5384:	a945b2f3 	.word	0xa945b2f3
    5388:	2ae7a8d7 	.word	0x2ae7a8d7
    538c:	aa1a50db 	.word	0xaa1a50db
    5390:	b18cb6a4 	.word	0xb18cb6a4
    5394:	2aae9da6 	.word	0x2aae9da6
    5398:	2b2de023 	.word	0x2b2de023
    539c:	3272c931 	.word	0x3272c931
    53a0:	aaa2ab86 	.word	0xaaa2ab86
    53a4:	b213ea4d 	.word	0xb213ea4d
    53a8:	b8338bab 	.word	0xb8338bab
    53ac:	29669a31 	.word	0x29669a31
    53b0:	aafaf96f 	.word	0xaafaf96f
    53b4:	b28cb1cd 	.word	0xb28cb1cd
    53b8:	ab017120 	.word	0xab017120
    53bc:	b30d20da 	.word	0xb30d20da
    53c0:	ba39d6d1 	.word	0xba39d6d1
    53c4:	2a979d1a 	.word	0x2a979d1a
    53c8:	3299ac87 	.word	0x3299ac87
    53cc:	39d45f93 	.word	0x39d45f93
    53d0:	402d119d 	.word	0x402d119d
    53d4:	a904d8e1 	.word	0xa904d8e1
    53d8:	a9c4c606 	.word	0xa9c4c606
    53dc:	2bdcea67 	.word	0x2bdcea67
    53e0:	33bb6a4a 	.word	0x33bb6a4a
    53e4:	abc58d9f 	.word	0xabc58d9f
    53e8:	ab4e9482 	.word	0xab4e9482
    53ec:	b2c08f81 	.word	0xb2c08f81
    53f0:	aae36a36 	.word	0xaae36a36
    53f4:	b2ae4c62 	.word	0xb2ae4c62
    53f8:	b98253d8 	.word	0xb98253d8
    53fc:	ab525daf 	.word	0xab525daf
    5400:	2b2c238b 	.word	0x2b2c238b
    5404:	33727488 	.word	0x33727488
    5408:	ab1da82e 	.word	0xab1da82e
    540c:	b317fc6b 	.word	0xb317fc6b
    5410:	ba1e8ecc 	.word	0xba1e8ecc
    5414:	2b0f167a 	.word	0x2b0f167a
    5418:	332ab530 	.word	0x332ab530
    541c:	39c95fb0 	.word	0x39c95fb0
    5420:	bfc05f07 	.word	0xbfc05f07
    5424:	2b811541 	.word	0x2b811541
    5428:	ac945827 	.word	0xac945827
    542c:	2b912bb4 	.word	0x2b912bb4
    5430:	33b4503f 	.word	0x33b4503f
    5434:	2c352677 	.word	0x2c352677
    5438:	aaf7d545 	.word	0xaaf7d545
    543c:	32801e6f 	.word	0x32801e6f
    5440:	aa8725bc 	.word	0xaa8725bc
    5444:	b2571325 	.word	0xb2571325
			parameters_array->sensor_middleRight[9][2] = -9.2642e-05;
    5448:	f200 7304 	addw	r3, r0, #1796	; 0x704
    544c:	4a3d      	ldr	r2, [pc, #244]	; (5544 <initialize_calibration_parameters+0x2dfc>)
    544e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[10][2] = -6.9661e-12;
    5450:	f500 63e2 	add.w	r3, r0, #1808	; 0x710
    5454:	4a3c      	ldr	r2, [pc, #240]	; (5548 <initialize_calibration_parameters+0x2e00>)
    5456:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[11][2] = 4.2166e-13;
    5458:	f200 731c 	addw	r3, r0, #1820	; 0x71c
    545c:	4a3b      	ldr	r2, [pc, #236]	; (554c <initialize_calibration_parameters+0x2e04>)
    545e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[12][2] = 1.7218e-08;
    5460:	f500 63e5 	add.w	r3, r0, #1832	; 0x728
    5464:	4a3a      	ldr	r2, [pc, #232]	; (5550 <initialize_calibration_parameters+0x2e08>)
    5466:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[13][2] = 2.7001e-14;
    5468:	f200 7334 	addw	r3, r0, #1844	; 0x734
    546c:	4a39      	ldr	r2, [pc, #228]	; (5554 <initialize_calibration_parameters+0x2e0c>)
    546e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[14][2] = 9.6571e-09;
    5470:	f500 63e8 	add.w	r3, r0, #1856	; 0x740
    5474:	4a38      	ldr	r2, [pc, #224]	; (5558 <initialize_calibration_parameters+0x2e10>)
    5476:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[15][2] = -8.7786e-05;
    5478:	f200 734c 	addw	r3, r0, #1868	; 0x74c
    547c:	4a37      	ldr	r2, [pc, #220]	; (555c <initialize_calibration_parameters+0x2e14>)
    547e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[16][2] = 9.4342e-13;
    5480:	f500 63eb 	add.w	r3, r0, #1880	; 0x758
    5484:	4a36      	ldr	r2, [pc, #216]	; (5560 <initialize_calibration_parameters+0x2e18>)
    5486:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[17][2] = 8.3454e-08;
    5488:	f200 7364 	addw	r3, r0, #1892	; 0x764
    548c:	4a35      	ldr	r2, [pc, #212]	; (5564 <initialize_calibration_parameters+0x2e1c>)
    548e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[18][2] = 0.0014832;
    5490:	f500 63ee 	add.w	r3, r0, #1904	; 0x770
    5494:	4a34      	ldr	r2, [pc, #208]	; (5568 <initialize_calibration_parameters+0x2e20>)
    5496:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_middleRight[19][2] = 6.6715;
    5498:	f200 737c 	addw	r3, r0, #1916	; 0x77c
    549c:	4a33      	ldr	r2, [pc, #204]	; (556c <initialize_calibration_parameters+0x2e24>)
    549e:	601a      	str	r2, [r3, #0]
			
			// Right Row - Bottom Sensor - Z Direction
			parameters_array->sensor_bottomRight[0][2] = 3.8803e-13;
    54a0:	f500 63f1 	add.w	r3, r0, #1928	; 0x788
    54a4:	4a32      	ldr	r2, [pc, #200]	; (5570 <initialize_calibration_parameters+0x2e28>)
    54a6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[1][2] = -1.9032e-12;
    54a8:	f200 7394 	addw	r3, r0, #1940	; 0x794
    54ac:	4a31      	ldr	r2, [pc, #196]	; (5574 <initialize_calibration_parameters+0x2e2c>)
    54ae:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[2][2] = 9.7867e-16;
    54b0:	f500 63f4 	add.w	r3, r0, #1952	; 0x7a0
    54b4:	4a30      	ldr	r2, [pc, #192]	; (5578 <initialize_calibration_parameters+0x2e30>)
    54b6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[3][2] = 6.7602e-08;
    54b8:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
    54bc:	4a2f      	ldr	r2, [pc, #188]	; (557c <initialize_calibration_parameters+0x2e34>)
    54be:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[4][2] = 2.6792e-12;
    54c0:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
    54c4:	4a2e      	ldr	r2, [pc, #184]	; (5580 <initialize_calibration_parameters+0x2e38>)
    54c6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[5][2] = 4.5511e-12;
    54c8:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
    54cc:	4a2d      	ldr	r2, [pc, #180]	; (5584 <initialize_calibration_parameters+0x2e3c>)
    54ce:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[6][2] = 1.0755e-07;
    54d0:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
    54d4:	4a2c      	ldr	r2, [pc, #176]	; (5588 <initialize_calibration_parameters+0x2e40>)
    54d6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[7][2] = 4.1053e-12;
    54d8:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
    54dc:	4a2b      	ldr	r2, [pc, #172]	; (558c <initialize_calibration_parameters+0x2e44>)
    54de:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[8][2] = 1.8347e-07;
    54e0:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
    54e4:	4a2a      	ldr	r2, [pc, #168]	; (5590 <initialize_calibration_parameters+0x2e48>)
    54e6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[9][2] = 0.0020743;
    54e8:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
    54ec:	4a29      	ldr	r2, [pc, #164]	; (5594 <initialize_calibration_parameters+0x2e4c>)
    54ee:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[10][2] = -4.1528e-12;
    54f0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
    54f4:	4a28      	ldr	r2, [pc, #160]	; (5598 <initialize_calibration_parameters+0x2e50>)
    54f6:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[11][2] = -5.9881e-12;
    54f8:	f600 030c 	addw	r3, r0, #2060	; 0x80c
    54fc:	4a27      	ldr	r2, [pc, #156]	; (559c <initialize_calibration_parameters+0x2e54>)
    54fe:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[12][2] = -6.6743e-08;
    5500:	f600 0318 	addw	r3, r0, #2072	; 0x818
    5504:	4a26      	ldr	r2, [pc, #152]	; (55a0 <initialize_calibration_parameters+0x2e58>)
    5506:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[13][2] = -5.9171e-12;
    5508:	f600 0324 	addw	r3, r0, #2084	; 0x824
    550c:	4a25      	ldr	r2, [pc, #148]	; (55a4 <initialize_calibration_parameters+0x2e5c>)
    550e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[14][2] = -2.7085e-07;
    5510:	f500 6303 	add.w	r3, r0, #2096	; 0x830
    5514:	4a24      	ldr	r2, [pc, #144]	; (55a8 <initialize_calibration_parameters+0x2e60>)
    5516:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[15][2] = -0.003162;
    5518:	f600 033c 	addw	r3, r0, #2108	; 0x83c
    551c:	4a23      	ldr	r2, [pc, #140]	; (55ac <initialize_calibration_parameters+0x2e64>)
    551e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[16][2] = -2.3295e-12;
    5520:	f600 0348 	addw	r3, r0, #2120	; 0x848
    5524:	4a22      	ldr	r2, [pc, #136]	; (55b0 <initialize_calibration_parameters+0x2e68>)
    5526:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[17][2] = -1.4122e-07;
    5528:	f600 0354 	addw	r3, r0, #2132	; 0x854
    552c:	4a21      	ldr	r2, [pc, #132]	; (55b4 <initialize_calibration_parameters+0x2e6c>)
    552e:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[18][2] = -0.0036344;
    5530:	f500 6306 	add.w	r3, r0, #2144	; 0x860
    5534:	4a20      	ldr	r2, [pc, #128]	; (55b8 <initialize_calibration_parameters+0x2e70>)
    5536:	601a      	str	r2, [r3, #0]
			parameters_array->sensor_bottomRight[19][2] = -30.4994;
    5538:	f600 006c 	addw	r0, r0, #2156	; 0x86c
    553c:	4b1f      	ldr	r3, [pc, #124]	; (55bc <initialize_calibration_parameters+0x2e74>)
    553e:	6003      	str	r3, [r0, #0]

			break;
			}
    5540:	4770      	bx	lr
    5542:	bf00      	nop
    5544:	b8c248cc 	.word	0xb8c248cc
    5548:	acf5190d 	.word	0xacf5190d
    554c:	2aed5f9c 	.word	0x2aed5f9c
    5550:	3293e6c8 	.word	0x3293e6c8
    5554:	28f33411 	.word	0x28f33411
    5558:	3225e860 	.word	0x3225e860
    555c:	b8b819c0 	.word	0xb8b819c0
    5560:	2b84c64a 	.word	0x2b84c64a
    5564:	33b33752 	.word	0x33b33752
    5568:	3ac267ef 	.word	0x3ac267ef
    556c:	40d57cee 	.word	0x40d57cee
    5570:	2ada7104 	.word	0x2ada7104
    5574:	ac05ed01 	.word	0xac05ed01
    5578:	268d0a8d 	.word	0x268d0a8d
    557c:	33912c98 	.word	0x33912c98
    5580:	2c3c882d 	.word	0x2c3c882d
    5584:	2ca020aa 	.word	0x2ca020aa
    5588:	33e6f63d 	.word	0x33e6f63d
    558c:	2c907141 	.word	0x2c907141
    5590:	3444ffd9 	.word	0x3444ffd9
    5594:	3b07f0fb 	.word	0x3b07f0fb
    5598:	ac921d19 	.word	0xac921d19
    559c:	acd2b003 	.word	0xacd2b003
    55a0:	b38f545a 	.word	0xb38f545a
    55a4:	acd03080 	.word	0xacd03080
    55a8:	b4916957 	.word	0xb4916957
    55ac:	bb4f398f 	.word	0xbb4f398f
    55b0:	ac23ec8b 	.word	0xac23ec8b
    55b4:	b417a242 	.word	0xb417a242
    55b8:	bb6e2f1d 	.word	0xbb6e2f1d
    55bc:	c1f3fec5 	.word	0xc1f3fec5

000055c0 <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    55c0:	3901      	subs	r1, #1
    55c2:	2903      	cmp	r1, #3
    55c4:	d805      	bhi.n	55d2 <select_prefix+0x12>
    55c6:	e8df f001 	tbb	[pc, r1]
    55ca:	0602      	.short	0x0602
    55cc:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    55ce:	230c      	movs	r3, #12
    55d0:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    55d2:	7840      	ldrb	r0, [r0, #1]
    55d4:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    55d6:	2310      	movs	r3, #16
    55d8:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    55da:	e7fa      	b.n	55d2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    55dc:	2314      	movs	r3, #20
    55de:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    55e0:	e7f7      	b.n	55d2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    55e2:	2318      	movs	r3, #24
    55e4:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    55e6:	e7f4      	b.n	55d2 <select_prefix+0x12>

000055e8 <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ea:	b083      	sub	sp, #12
    55ec:	4606      	mov	r6, r0
    55ee:	4617      	mov	r7, r2
    55f0:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    55f2:	ab02      	add	r3, sp, #8
    55f4:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    55f8:	2201      	movs	r2, #1
    55fa:	4619      	mov	r1, r3
    55fc:	4b0a      	ldr	r3, [pc, #40]	; (5628 <i2c_m_sync_cmd_write_easy+0x40>)
    55fe:	4798      	blx	r3
	if (ret != 1) {return -1;}
    5600:	2801      	cmp	r0, #1
    5602:	d10d      	bne.n	5620 <i2c_m_sync_cmd_write_easy+0x38>
    5604:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    5606:	462a      	mov	r2, r5
    5608:	4639      	mov	r1, r7
    560a:	4630      	mov	r0, r6
    560c:	4b07      	ldr	r3, [pc, #28]	; (562c <i2c_m_sync_cmd_write_easy+0x44>)
    560e:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    5610:	42a8      	cmp	r0, r5
    5612:	d102      	bne.n	561a <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    5614:	4620      	mov	r0, r4
    5616:	b003      	add	sp, #12
    5618:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    561a:	f04f 34ff 	mov.w	r4, #4294967295
    561e:	e7f9      	b.n	5614 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    5620:	f04f 34ff 	mov.w	r4, #4294967295
    5624:	e7f6      	b.n	5614 <i2c_m_sync_cmd_write_easy+0x2c>
    5626:	bf00      	nop
    5628:	00000b65 	.word	0x00000b65
    562c:	00000b99 	.word	0x00000b99

00005630 <sendCommand>:
{
    5630:	b570      	push	{r4, r5, r6, lr}
    5632:	b082      	sub	sp, #8
    5634:	460d      	mov	r5, r1
    5636:	4616      	mov	r6, r2
    5638:	461c      	mov	r4, r3
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    563a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    563e:	7801      	ldrb	r1, [r0, #0]
    5640:	4630      	mov	r0, r6
    5642:	4b08      	ldr	r3, [pc, #32]	; (5664 <sendCommand+0x34>)
    5644:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    5646:	2301      	movs	r3, #1
    5648:	aa01      	add	r2, sp, #4
    564a:	4629      	mov	r1, r5
    564c:	4620      	mov	r0, r4
    564e:	4c06      	ldr	r4, [pc, #24]	; (5668 <sendCommand+0x38>)
    5650:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    5652:	2800      	cmp	r0, #0
    5654:	dd03      	ble.n	565e <sendCommand+0x2e>
  return buffer_answer[0];
    5656:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    565a:	b002      	add	sp, #8
    565c:	bd70      	pop	{r4, r5, r6, pc}
  if (ret < 1) {return STATUS_ERROR;}
    565e:	20ff      	movs	r0, #255	; 0xff
    5660:	e7fb      	b.n	565a <sendCommand+0x2a>
    5662:	bf00      	nop
    5664:	00000b4d 	.word	0x00000b4d
    5668:	000055e9 	.word	0x000055e9

0000566c <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    566c:	b570      	push	{r4, r5, r6, lr}
    566e:	b082      	sub	sp, #8
    5670:	4605      	mov	r5, r0
    5672:	461e      	mov	r6, r3
    5674:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    5678:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    567c:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    5680:	2202      	movs	r2, #2
    5682:	a901      	add	r1, sp, #4
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <i2c_m_sync_reg_read_easy+0x40>)
    5686:	4798      	blx	r3
	if (ret != 2) {return -1;}
    5688:	2802      	cmp	r0, #2
    568a:	d10c      	bne.n	56a6 <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    568c:	4622      	mov	r2, r4
    568e:	4631      	mov	r1, r6
    5690:	4628      	mov	r0, r5
    5692:	4b07      	ldr	r3, [pc, #28]	; (56b0 <i2c_m_sync_reg_read_easy+0x44>)
    5694:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    5696:	42a0      	cmp	r0, r4
    5698:	d102      	bne.n	56a0 <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    569a:	2001      	movs	r0, #1
}
    569c:	b002      	add	sp, #8
    569e:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    56a0:	f04f 30ff 	mov.w	r0, #4294967295
    56a4:	e7fa      	b.n	569c <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    56a6:	f04f 30ff 	mov.w	r0, #4294967295
    56aa:	e7f7      	b.n	569c <i2c_m_sync_reg_read_easy+0x30>
    56ac:	00000b65 	.word	0x00000b65
    56b0:	00000b99 	.word	0x00000b99

000056b4 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    56b4:	b510      	push	{r4, lr}
    56b6:	b082      	sub	sp, #8
    56b8:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    56ba:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    56be:	0a11      	lsrs	r1, r2, #8
    56c0:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    56c4:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    56c8:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    56cc:	2204      	movs	r2, #4
    56ce:	eb0d 0102 	add.w	r1, sp, r2
    56d2:	4b09      	ldr	r3, [pc, #36]	; (56f8 <i2c_m_sync_reg_write_easy+0x44>)
    56d4:	4798      	blx	r3
	if (ret != 4) {return -1;}
    56d6:	2804      	cmp	r0, #4
    56d8:	d10b      	bne.n	56f2 <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    56da:	2201      	movs	r2, #1
    56dc:	9904      	ldr	r1, [sp, #16]
    56de:	4620      	mov	r0, r4
    56e0:	4b06      	ldr	r3, [pc, #24]	; (56fc <i2c_m_sync_reg_write_easy+0x48>)
    56e2:	4798      	blx	r3
	if (ret != 1) {return -1;}
    56e4:	2801      	cmp	r0, #1
    56e6:	d101      	bne.n	56ec <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    56e8:	b002      	add	sp, #8
    56ea:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    56ec:	f04f 30ff 	mov.w	r0, #4294967295
    56f0:	e7fa      	b.n	56e8 <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    56f2:	f04f 30ff 	mov.w	r0, #4294967295
    56f6:	e7f7      	b.n	56e8 <i2c_m_sync_reg_write_easy+0x34>
    56f8:	00000b65 	.word	0x00000b65
    56fc:	00000b99 	.word	0x00000b99

00005700 <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    5700:	2308      	movs	r3, #8
    5702:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    5706:	4770      	bx	lr

00005708 <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    5708:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    570a:	2200      	movs	r2, #0
    570c:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    570e:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    5710:	4a0e      	ldr	r2, [pc, #56]	; (574c <initialize+0x44>)
    5712:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    5714:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    5718:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    571a:	4a0d      	ldr	r2, [pc, #52]	; (5750 <initialize+0x48>)
    571c:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    571e:	4a0d      	ldr	r2, [pc, #52]	; (5754 <initialize+0x4c>)
    5720:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    5722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5726:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    5728:	4a0b      	ldr	r2, [pc, #44]	; (5758 <initialize+0x50>)
    572a:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    572c:	4a0b      	ldr	r2, [pc, #44]	; (575c <initialize+0x54>)
    572e:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    5730:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    5734:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    5736:	4a0a      	ldr	r2, [pc, #40]	; (5760 <initialize+0x58>)
    5738:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    573a:	4a0a      	ldr	r2, [pc, #40]	; (5764 <initialize+0x5c>)
    573c:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    573e:	4a0a      	ldr	r2, [pc, #40]	; (5768 <initialize+0x60>)
    5740:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    5742:	4a0a      	ldr	r2, [pc, #40]	; (576c <initialize+0x64>)
    5744:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    5746:	4b0a      	ldr	r3, [pc, #40]	; (5770 <initialize+0x68>)
    5748:	4798      	blx	r3
    574a:	bd08      	pop	{r3, pc}
    574c:	40a00000 	.word	0x40a00000
    5750:	40400000 	.word	0x40400000
    5754:	40200000 	.word	0x40200000
    5758:	3fd55555 	.word	0x3fd55555
    575c:	3faaaaab 	.word	0x3faaaaab
    5760:	3e48b439 	.word	0x3e48b439
    5764:	3ea1cac1 	.word	0x3ea1cac1
    5768:	3e19999a 	.word	0x3e19999a
    576c:	3e77ced9 	.word	0x3e77ced9
    5770:	00005701 	.word	0x00005701

00005774 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    5774:	2301      	movs	r3, #1
    5776:	fa03 f101 	lsl.w	r1, r3, r1
    577a:	f001 0108 	and.w	r1, r1, #8
    577e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    5782:	4319      	orrs	r1, r3
    5784:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    5788:	4770      	bx	lr

0000578a <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    578a:	2902      	cmp	r1, #2
    578c:	d80c      	bhi.n	57a8 <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    578e:	f101 031c 	add.w	r3, r1, #28
    5792:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    5796:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    5798:	2301      	movs	r3, #1
    579a:	408b      	lsls	r3, r1
    579c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    57a0:	ea21 0103 	bic.w	r1, r1, r3
    57a4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    57a8:	4770      	bx	lr
	...

000057ac <readRegister>:
{
    57ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ae:	b085      	sub	sp, #20
    57b0:	4604      	mov	r4, r0
    57b2:	460d      	mov	r5, r1
    57b4:	4617      	mov	r7, r2
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    57b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    57ba:	7801      	ldrb	r1, [r0, #0]
    57bc:	4618      	mov	r0, r3
    57be:	4b10      	ldr	r3, [pc, #64]	; (5800 <readRegister+0x54>)
    57c0:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    57c2:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    57c4:	2303      	movs	r3, #3
    57c6:	9300      	str	r3, [sp, #0]
    57c8:	ab03      	add	r3, sp, #12
    57ca:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    57ce:	2150      	movs	r1, #80	; 0x50
    57d0:	980a      	ldr	r0, [sp, #40]	; 0x28
    57d2:	4e0c      	ldr	r6, [pc, #48]	; (5804 <readRegister+0x58>)
    57d4:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    57d6:	2800      	cmp	r0, #0
    57d8:	dc03      	bgt.n	57e2 <readRegister+0x36>
    57da:	26ff      	movs	r6, #255	; 0xff
}
    57dc:	4630      	mov	r0, r6
    57de:	b005      	add	sp, #20
    57e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    57e2:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    57e6:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    57ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    57ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    57f2:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    57f4:	4629      	mov	r1, r5
    57f6:	4620      	mov	r0, r4
    57f8:	4b03      	ldr	r3, [pc, #12]	; (5808 <readRegister+0x5c>)
    57fa:	4798      	blx	r3
  return status;
    57fc:	e7ee      	b.n	57dc <readRegister+0x30>
    57fe:	bf00      	nop
    5800:	00000b4d 	.word	0x00000b4d
    5804:	0000566d 	.word	0x0000566d
    5808:	0000578b 	.word	0x0000578b

0000580c <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor,struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    580c:	b570      	push	{r4, r5, r6, lr}
    580e:	4604      	mov	r4, r0
    5810:	460d      	mov	r5, r1
    5812:	4616      	mov	r6, r2
  cache_invalidate(hall_sensor);
    5814:	4b06      	ldr	r3, [pc, #24]	; (5830 <reset+0x24>)
    5816:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, i2c, io);
    5818:	4633      	mov	r3, r6
    581a:	462a      	mov	r2, r5
    581c:	21f0      	movs	r1, #240	; 0xf0
    581e:	4620      	mov	r0, r4
    5820:	4c04      	ldr	r4, [pc, #16]	; (5834 <reset+0x28>)
    5822:	47a0      	blx	r4
    5824:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    5826:	2003      	movs	r0, #3
    5828:	4b03      	ldr	r3, [pc, #12]	; (5838 <reset+0x2c>)
    582a:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    582c:	4620      	mov	r0, r4
    582e:	bd70      	pop	{r4, r5, r6, pc}
    5830:	00005701 	.word	0x00005701
    5834:	00005631 	.word	0x00005631
    5838:	00000a81 	.word	0x00000a81

0000583c <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, i2c, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    583c:	b510      	push	{r4, lr}
  return sendCommand(hall_sensor, CMD_EXIT, i2c, io);
    583e:	4613      	mov	r3, r2
    5840:	460a      	mov	r2, r1
    5842:	2180      	movs	r1, #128	; 0x80
    5844:	4c01      	ldr	r4, [pc, #4]	; (584c <exit_command+0x10>)
    5846:	47a0      	blx	r4
  delay_ms(2);
}
    5848:	bd10      	pop	{r4, pc}
    584a:	bf00      	nop
    584c:	00005631 	.word	0x00005631

00005850 <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, i2c, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    5850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5854:	b084      	sub	sp, #16
    5856:	4605      	mov	r5, r0
    5858:	460c      	mov	r4, r1
    585a:	4610      	mov	r0, r2
    585c:	4698      	mov	r8, r3
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    585e:	f001 060f 	and.w	r6, r1, #15
    5862:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    5866:	f44f 6200 	mov.w	r2, #2048	; 0x800
    586a:	7829      	ldrb	r1, [r5, #0]
    586c:	4b3c      	ldr	r3, [pc, #240]	; (5960 <readMeasurement+0x110>)
    586e:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    5870:	f014 0908 	ands.w	r9, r4, #8
    5874:	d05b      	beq.n	592e <readMeasurement+0xde>
    5876:	2302      	movs	r3, #2
    5878:	f014 0a04 	ands.w	sl, r4, #4
    587c:	d059      	beq.n	5932 <readMeasurement+0xe2>
    587e:	2202      	movs	r2, #2
    5880:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    5882:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    5886:	443b      	add	r3, r7
    5888:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    588a:	f014 0401 	ands.w	r4, r4, #1
    588e:	d052      	beq.n	5936 <readMeasurement+0xe6>
    5890:	2302      	movs	r3, #2
    5892:	4413      	add	r3, r2
    5894:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    5896:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    5898:	b2db      	uxtb	r3, r3
    589a:	aa01      	add	r2, sp, #4
    589c:	4631      	mov	r1, r6
    589e:	4640      	mov	r0, r8
    58a0:	4e30      	ldr	r6, [pc, #192]	; (5964 <readMeasurement+0x114>)
    58a2:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    58a4:	2800      	cmp	r0, #0
    58a6:	dd59      	ble.n	595c <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    58a8:	2c00      	cmp	r4, #0
    58aa:	d046      	beq.n	593a <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    58ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
    58b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    58b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    58b8:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    58bc:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    58be:	2f00      	cmp	r7, #0
    58c0:	d040      	beq.n	5944 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    58c2:	aa04      	add	r2, sp, #16
    58c4:	441a      	add	r2, r3
    58c6:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    58ca:	1c59      	adds	r1, r3, #1
    58cc:	aa04      	add	r2, sp, #16
    58ce:	4411      	add	r1, r2
    58d0:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    58d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    58d8:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    58dc:	3302      	adds	r3, #2
    58de:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    58e0:	f1ba 0f00 	cmp.w	sl, #0
    58e4:	d032      	beq.n	594c <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    58e6:	aa04      	add	r2, sp, #16
    58e8:	441a      	add	r2, r3
    58ea:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    58ee:	1c59      	adds	r1, r3, #1
    58f0:	aa04      	add	r2, sp, #16
    58f2:	4411      	add	r1, r2
    58f4:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    58f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    58fc:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    5900:	3302      	adds	r3, #2
    5902:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    5904:	f1b9 0f00 	cmp.w	r9, #0
    5908:	d024      	beq.n	5954 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    590a:	aa04      	add	r2, sp, #16
    590c:	441a      	add	r2, r3
    590e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    5912:	3301      	adds	r3, #1
    5914:	a904      	add	r1, sp, #16
    5916:	440b      	add	r3, r1
    5918:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    591c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5920:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    5924:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    5928:	b004      	add	sp, #16
    592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    592e:	2300      	movs	r3, #0
    5930:	e7a2      	b.n	5878 <readMeasurement+0x28>
    5932:	2200      	movs	r2, #0
    5934:	e7a4      	b.n	5880 <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    5936:	2300      	movs	r3, #0
    5938:	e7ab      	b.n	5892 <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    593a:	2300      	movs	r3, #0
    593c:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    5940:	2301      	movs	r3, #1
    5942:	e7bc      	b.n	58be <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    5944:	2200      	movs	r2, #0
    5946:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    594a:	e7c9      	b.n	58e0 <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    594c:	2200      	movs	r2, #0
    594e:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    5952:	e7d7      	b.n	5904 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    5954:	2300      	movs	r3, #0
    5956:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    595a:	e7e3      	b.n	5924 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    595c:	20ff      	movs	r0, #255	; 0xff
    595e:	e7e3      	b.n	5928 <readMeasurement+0xd8>
    5960:	00000b4d 	.word	0x00000b4d
    5964:	000055e9 	.word	0x000055e9

00005968 <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, i2c, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    5968:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    596a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    596c:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    5970:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    5974:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    5976:	f3c1 1147 	ubfx	r1, r1, #5, #8
    597a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    597e:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    5982:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    5986:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    5988:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    598a:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    598e:	2a0c      	cmp	r2, #12
    5990:	f000 8091 	beq.w	5ab6 <convertRaw+0x14e>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    5994:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    5998:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    599c:	3302      	adds	r3, #2
    599e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    59a2:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    59a6:	2c00      	cmp	r4, #0
    59a8:	f000 808a 	beq.w	5ac0 <convertRaw+0x158>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    59ac:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    59b0:	ee06 3a90 	vmov	s13, r3
    59b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    59b8:	eddf 7ae0 	vldr	s15, [pc, #896]	; 5d3c <convertRaw+0x3d4>
    59bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
    59c0:	ee65 6a26 	vmul.f32	s13, s10, s13
    59c4:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    59c8:	2201      	movs	r2, #1
    59ca:	fa02 f101 	lsl.w	r1, r2, r1
    59ce:	ee07 1a90 	vmov	s15, r1
    59d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    59d6:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    59da:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    59de:	2c00      	cmp	r4, #0
    59e0:	f000 80d4 	beq.w	5b8c <convertRaw+0x224>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    59e4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    59e8:	ee07 3a10 	vmov	s14, r3
    59ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    59f0:	eddf 7ad2 	vldr	s15, [pc, #840]	; 5d3c <convertRaw+0x3d4>
    59f4:	ee37 7a67 	vsub.f32	s14, s14, s15
    59f8:	ee25 7a07 	vmul.f32	s14, s10, s14
    59fc:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    5a00:	2301      	movs	r3, #1
    5a02:	40b3      	lsls	r3, r6
    5a04:	ee07 3a90 	vmov	s15, r3
    5a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    5a0c:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    5a10:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    5a14:	2c00      	cmp	r4, #0
    5a16:	f000 811c 	beq.w	5c52 <convertRaw+0x2ea>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    5a1a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    5a1e:	ee07 3a90 	vmov	s15, r3
    5a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5a26:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 5d3c <convertRaw+0x3d4>
    5a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5a2e:	ee64 7aa7 	vmul.f32	s15, s9, s15
    5a32:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    5a36:	2301      	movs	r3, #1
    5a38:	fa03 f505 	lsl.w	r5, r3, r5
    5a3c:	ee07 5a10 	vmov	s14, r5
    5a40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5a44:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    5a48:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    5a4c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    5a50:	ee07 3a90 	vmov	s15, r3
    5a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5a58:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 5d40 <convertRaw+0x3d8>
    5a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5a60:	eddf 6ab8 	vldr	s13, [pc, #736]	; 5d44 <convertRaw+0x3dc>
    5a64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    5a68:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    5a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
    5a70:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    5a74:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    5a78:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 5d48 <convertRaw+0x3e0>
    5a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a84:	f340 814a 	ble.w	5d1c <convertRaw+0x3b4>
  {
	  hall_sensor->data.x = 50000;
    5a88:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    5a8c:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    5a90:	ed9f 7aad 	vldr	s14, [pc, #692]	; 5d48 <convertRaw+0x3e0>
    5a94:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a9c:	f300 8149 	bgt.w	5d32 <convertRaw+0x3ca>
    {
	    hall_sensor->data.y = 50000;
    }
    else
    {
	    if (hall_sensor->data.y < -50000)
    5aa0:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 5d4c <convertRaw+0x3e4>
    5aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
    5aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aac:	f140 8143 	bpl.w	5d36 <convertRaw+0x3ce>
	    {
		    hall_sensor->data.y = -50000;
    5ab0:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.z < -50000)
	    {
		    //hall_sensor->data.z = -50000;
	    }
    }
}
    5ab4:	e13f      	b.n	5d36 <convertRaw+0x3ce>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    5ab6:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    5aba:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    5abe:	e76d      	b.n	599c <convertRaw+0x34>
    switch(res_x){
    5ac0:	2903      	cmp	r1, #3
    5ac2:	d88c      	bhi.n	59de <convertRaw+0x76>
    5ac4:	e8df f001 	tbb	[pc, r1]
    5ac8:	482e1802 	.word	0x482e1802
		hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    5acc:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    5ad0:	ee07 3a90 	vmov	s15, r3
    5ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5ad8:	ee67 7a85 	vmul.f32	s15, s15, s10
    5adc:	ee25 7aa7 	vmul.f32	s14, s11, s15
    5ae0:	2301      	movs	r3, #1
    5ae2:	fa03 f101 	lsl.w	r1, r3, r1
    5ae6:	ee07 1a90 	vmov	s15, r1
    5aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5aee:	ee67 7a87 	vmul.f32	s15, s15, s14
    5af2:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		break;
    5af6:	e772      	b.n	59de <convertRaw+0x76>
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    5af8:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    5afc:	ee07 3a90 	vmov	s15, r3
    5b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b04:	ee67 7a85 	vmul.f32	s15, s15, s10
    5b08:	ee25 7aa7 	vmul.f32	s14, s11, s15
    5b0c:	2301      	movs	r3, #1
    5b0e:	fa03 f101 	lsl.w	r1, r3, r1
    5b12:	ee07 1a90 	vmov	s15, r1
    5b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
    5b1e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    5b22:	e75c      	b.n	59de <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    5b24:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    5b28:	ee07 3a90 	vmov	s15, r3
    5b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b30:	ed9f 7a82 	vldr	s14, [pc, #520]	; 5d3c <convertRaw+0x3d4>
    5b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5b38:	ee65 7a27 	vmul.f32	s15, s10, s15
    5b3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    5b40:	2301      	movs	r3, #1
    5b42:	fa03 f101 	lsl.w	r1, r3, r1
    5b46:	ee07 1a10 	vmov	s14, r1
    5b4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    5b52:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    5b56:	e742      	b.n	59de <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    5b58:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    5b5c:	ee07 3a90 	vmov	s15, r3
    5b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5b64:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 5d50 <convertRaw+0x3e8>
    5b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5b6c:	ee65 7a27 	vmul.f32	s15, s10, s15
    5b70:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    5b74:	2301      	movs	r3, #1
    5b76:	fa03 f101 	lsl.w	r1, r3, r1
    5b7a:	ee07 1a10 	vmov	s14, r1
    5b7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5b82:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    5b86:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    5b8a:	e728      	b.n	59de <convertRaw+0x76>
    switch(res_y){
    5b8c:	2e03      	cmp	r6, #3
    5b8e:	f63f af41 	bhi.w	5a14 <convertRaw+0xac>
    5b92:	e8df f006 	tbb	[pc, r6]
    5b96:	1702      	.short	0x1702
    5b98:	452c      	.short	0x452c
		hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    5b9a:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    5b9e:	ee07 3a10 	vmov	s14, r3
    5ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5ba6:	ee27 7a05 	vmul.f32	s14, s14, s10
    5baa:	ee25 5a87 	vmul.f32	s10, s11, s14
    5bae:	2301      	movs	r3, #1
    5bb0:	40b3      	lsls	r3, r6
    5bb2:	ee07 3a90 	vmov	s15, r3
    5bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    5bba:	ee27 7a05 	vmul.f32	s14, s14, s10
    5bbe:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
		break;
    5bc2:	e727      	b.n	5a14 <convertRaw+0xac>
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    5bc4:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    5bc8:	ee07 3a10 	vmov	s14, r3
    5bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5bd0:	ee27 7a05 	vmul.f32	s14, s14, s10
    5bd4:	ee25 5a87 	vmul.f32	s10, s11, s14
    5bd8:	2301      	movs	r3, #1
    5bda:	40b3      	lsls	r3, r6
    5bdc:	ee07 3a90 	vmov	s15, r3
    5be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    5be4:	ee27 7a05 	vmul.f32	s14, s14, s10
    5be8:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    5bec:	e712      	b.n	5a14 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    5bee:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    5bf2:	ee07 3a10 	vmov	s14, r3
    5bf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5bfa:	eddf 7a50 	vldr	s15, [pc, #320]	; 5d3c <convertRaw+0x3d4>
    5bfe:	ee37 7a67 	vsub.f32	s14, s14, s15
    5c02:	ee25 7a07 	vmul.f32	s14, s10, s14
    5c06:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    5c0a:	2301      	movs	r3, #1
    5c0c:	40b3      	lsls	r3, r6
    5c0e:	ee07 3a90 	vmov	s15, r3
    5c12:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    5c16:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    5c1a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    5c1e:	e6f9      	b.n	5a14 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    5c20:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    5c24:	ee07 3a10 	vmov	s14, r3
    5c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5c2c:	eddf 7a48 	vldr	s15, [pc, #288]	; 5d50 <convertRaw+0x3e8>
    5c30:	ee37 7a67 	vsub.f32	s14, s14, s15
    5c34:	ee25 7a07 	vmul.f32	s14, s10, s14
    5c38:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    5c3c:	2301      	movs	r3, #1
    5c3e:	40b3      	lsls	r3, r6
    5c40:	ee07 3a90 	vmov	s15, r3
    5c44:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    5c48:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    5c4c:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    5c50:	e6e0      	b.n	5a14 <convertRaw+0xac>
    switch(res_z){
    5c52:	2d03      	cmp	r5, #3
    5c54:	f63f aefa 	bhi.w	5a4c <convertRaw+0xe4>
    5c58:	e8df f005 	tbb	[pc, r5]
    5c5c:	462c1702 	.word	0x462c1702
		hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    5c60:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    5c64:	ee07 3a90 	vmov	s15, r3
    5c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5c6c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    5c70:	ee65 5aa7 	vmul.f32	s11, s11, s15
    5c74:	2301      	movs	r3, #1
    5c76:	40ab      	lsls	r3, r5
    5c78:	ee07 3a90 	vmov	s15, r3
    5c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5c80:	ee67 7aa5 	vmul.f32	s15, s15, s11
    5c84:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		break;
    5c88:	e6e0      	b.n	5a4c <convertRaw+0xe4>
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    5c8a:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    5c8e:	ee07 3a90 	vmov	s15, r3
    5c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5c96:	ee67 7aa4 	vmul.f32	s15, s15, s9
    5c9a:	ee65 5aa7 	vmul.f32	s11, s11, s15
    5c9e:	2301      	movs	r3, #1
    5ca0:	40ab      	lsls	r3, r5
    5ca2:	ee07 3a90 	vmov	s15, r3
    5ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5caa:	ee67 7aa5 	vmul.f32	s15, s15, s11
    5cae:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    5cb2:	e6cb      	b.n	5a4c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    5cb4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    5cb8:	ee07 3a90 	vmov	s15, r3
    5cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5cc0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 5d3c <convertRaw+0x3d4>
    5cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5cc8:	ee64 7aa7 	vmul.f32	s15, s9, s15
    5ccc:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    5cd0:	2301      	movs	r3, #1
    5cd2:	fa03 f505 	lsl.w	r5, r3, r5
    5cd6:	ee07 5a10 	vmov	s14, r5
    5cda:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    5cde:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    5ce2:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    5ce6:	e6b1      	b.n	5a4c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    5ce8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    5cec:	ee07 3a90 	vmov	s15, r3
    5cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5cf4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5d50 <convertRaw+0x3e8>
    5cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5cfc:	ee64 7aa7 	vmul.f32	s15, s9, s15
    5d00:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    5d04:	2301      	movs	r3, #1
    5d06:	fa03 f505 	lsl.w	r5, r3, r5
    5d0a:	ee07 5a10 	vmov	s14, r5
    5d0e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    5d12:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    5d16:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    5d1a:	e697      	b.n	5a4c <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    5d1c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5d4c <convertRaw+0x3e4>
    5d20:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d28:	f57f aeb0 	bpl.w	5a8c <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    5d2c:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    5d30:	e6ac      	b.n	5a8c <convertRaw+0x124>
	    hall_sensor->data.y = 50000;
    5d32:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
}
    5d36:	bc70      	pop	{r4, r5, r6}
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop
    5d3c:	47000000 	.word	0x47000000
    5d40:	4734a400 	.word	0x4734a400
    5d44:	4234cccd 	.word	0x4234cccd
    5d48:	47435000 	.word	0x47435000
    5d4c:	c7435000 	.word	0xc7435000
    5d50:	46800000 	.word	0x46800000

00005d54 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    5d54:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    5d56:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    5d58:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    5d5c:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    5d60:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    5d64:	2201      	movs	r2, #1
    5d66:	408a      	lsls	r2, r1
    5d68:	3202      	adds	r2, #2
    5d6a:	409a      	lsls	r2, r3
    5d6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5d70:	0193      	lsls	r3, r2, #6
    5d72:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    5d76:	23c0      	movs	r3, #192	; 0xc0
    5d78:	40a3      	lsls	r3, r4
    5d7a:	3343      	adds	r3, #67	; 0x43
    5d7c:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    5d7e:	4b05      	ldr	r3, [pc, #20]	; (5d94 <convDelayMicro+0x40>)
    5d80:	fba3 3000 	umull	r3, r0, r3, r0
    5d84:	f3c0 104f 	ubfx	r0, r0, #5, #16
    5d88:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    5d8a:	b280      	uxth	r0, r0
    5d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5d90:	4770      	bx	lr
    5d92:	bf00      	nop
    5d94:	51eb851f 	.word	0x51eb851f

00005d98 <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    5d98:	0900      	lsrs	r0, r0, #4
    5d9a:	f080 0001 	eor.w	r0, r0, #1
}
    5d9e:	f000 0001 	and.w	r0, r0, #1
    5da2:	4770      	bx	lr

00005da4 <writeRegister>:
{
    5da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5da6:	b085      	sub	sp, #20
    5da8:	4605      	mov	r5, r0
    5daa:	460e      	mov	r6, r1
    5dac:	4617      	mov	r7, r2
    5dae:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    5db0:	4b12      	ldr	r3, [pc, #72]	; (5dfc <writeRegister+0x58>)
    5db2:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(i2c, hall_sensor->I2C_address, I2C_M_SEVEN); // must be changed to accept any descriptor
    5db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5db8:	7829      	ldrb	r1, [r5, #0]
    5dba:	4620      	mov	r0, r4
    5dbc:	4b10      	ldr	r3, [pc, #64]	; (5e00 <writeRegister+0x5c>)
    5dbe:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    5dc0:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    5dc2:	aa03      	add	r2, sp, #12
    5dc4:	9200      	str	r2, [sp, #0]
    5dc6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    5dca:	463a      	mov	r2, r7
    5dcc:	2160      	movs	r1, #96	; 0x60
    5dce:	980a      	ldr	r0, [sp, #40]	; 0x28
    5dd0:	4c0c      	ldr	r4, [pc, #48]	; (5e04 <writeRegister+0x60>)
    5dd2:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    5dd4:	2800      	cmp	r0, #0
    5dd6:	dd0e      	ble.n	5df6 <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    5dd8:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    5ddc:	4620      	mov	r0, r4
    5dde:	4b0a      	ldr	r3, [pc, #40]	; (5e08 <writeRegister+0x64>)
    5de0:	4798      	blx	r3
    5de2:	b908      	cbnz	r0, 5de8 <writeRegister+0x44>
  return status;
    5de4:	4620      	mov	r0, r4
    5de6:	e007      	b.n	5df8 <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    5de8:	463a      	mov	r2, r7
    5dea:	4631      	mov	r1, r6
    5dec:	4628      	mov	r0, r5
    5dee:	4b07      	ldr	r3, [pc, #28]	; (5e0c <writeRegister+0x68>)
    5df0:	4798      	blx	r3
  return status;
    5df2:	4620      	mov	r0, r4
    5df4:	e000      	b.n	5df8 <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    5df6:	20ff      	movs	r0, #255	; 0xff
}
    5df8:	b005      	add	sp, #20
    5dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dfc:	00005775 	.word	0x00005775
    5e00:	00000b4d 	.word	0x00000b4d
    5e04:	000056b5 	.word	0x000056b5
    5e08:	00005d99 	.word	0x00005d99
    5e0c:	0000578b 	.word	0x0000578b

00005e10 <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    5e10:	f3c0 1000 	ubfx	r0, r0, #4, #1
    5e14:	4770      	bx	lr
	...

00005e18 <cache_fill>:
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io) {
    5e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e1c:	b082      	sub	sp, #8
  if (hall_sensor->cache.dirty != 0) {
    5e1e:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
    5e22:	b304      	cbz	r4, 5e66 <cache_fill+0x4e>
    5e24:	4617      	mov	r7, r2
    5e26:	4688      	mov	r8, r1
    5e28:	4605      	mov	r5, r0
    5e2a:	2400      	movs	r4, #0
    5e2c:	e001      	b.n	5e32 <cache_fill+0x1a>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    5e2e:	3401      	adds	r4, #1
    5e30:	b2e4      	uxtb	r4, r4
    5e32:	2c02      	cmp	r4, #2
    5e34:	d816      	bhi.n	5e64 <cache_fill+0x4c>
      if (hall_sensor->cache.dirty & (1 << address)){
    5e36:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    5e3a:	4123      	asrs	r3, r4
    5e3c:	f013 0f01 	tst.w	r3, #1
    5e40:	d0f5      	beq.n	5e2e <cache_fill+0x16>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]),i2c, io))) {
    5e42:	f104 021c 	add.w	r2, r4, #28
    5e46:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    5e4a:	9700      	str	r7, [sp, #0]
    5e4c:	4643      	mov	r3, r8
    5e4e:	3202      	adds	r2, #2
    5e50:	4621      	mov	r1, r4
    5e52:	4628      	mov	r0, r5
    5e54:	4e06      	ldr	r6, [pc, #24]	; (5e70 <cache_fill+0x58>)
    5e56:	47b0      	blx	r6
    5e58:	4b06      	ldr	r3, [pc, #24]	; (5e74 <cache_fill+0x5c>)
    5e5a:	4798      	blx	r3
    5e5c:	2800      	cmp	r0, #0
    5e5e:	d0e6      	beq.n	5e2e <cache_fill+0x16>
          return STATUS_ERROR;
    5e60:	24ff      	movs	r4, #255	; 0xff
    5e62:	e000      	b.n	5e66 <cache_fill+0x4e>
  return STATUS_OK;
    5e64:	2400      	movs	r4, #0
}
    5e66:	4620      	mov	r0, r4
    5e68:	b002      	add	sp, #8
    5e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e6e:	bf00      	nop
    5e70:	000057ad 	.word	0x000057ad
    5e74:	00005e11 	.word	0x00005e11

00005e78 <startMeasurement>:
{
    5e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e7a:	4607      	mov	r7, r0
    5e7c:	460c      	mov	r4, r1
    5e7e:	4615      	mov	r5, r2
    5e80:	461e      	mov	r6, r3
  cache_fill(hall_sensor, i2c, io);
    5e82:	461a      	mov	r2, r3
    5e84:	4629      	mov	r1, r5
    5e86:	4b06      	ldr	r3, [pc, #24]	; (5ea0 <startMeasurement+0x28>)
    5e88:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    5e8a:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, i2c, io);
    5e8e:	4633      	mov	r3, r6
    5e90:	462a      	mov	r2, r5
    5e92:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    5e96:	4638      	mov	r0, r7
    5e98:	4c02      	ldr	r4, [pc, #8]	; (5ea4 <startMeasurement+0x2c>)
    5e9a:	47a0      	blx	r4
}
    5e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e9e:	bf00      	nop
    5ea0:	00005e19 	.word	0x00005e19
    5ea4:	00005631 	.word	0x00005631

00005ea8 <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    5ea8:	f010 0f10 	tst.w	r0, #16
    5eac:	d001      	beq.n	5eb2 <checkStatus+0xa>
    5eae:	20ff      	movs	r0, #255	; 0xff
    5eb0:	4770      	bx	lr
    5eb2:	2000      	movs	r0, #0
    5eb4:	4770      	bx	lr
	...

00005eb8 <setGainSel>:
{
    5eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ebc:	b085      	sub	sp, #20
    5ebe:	4680      	mov	r8, r0
    5ec0:	4689      	mov	r9, r1
    5ec2:	4615      	mov	r5, r2
    5ec4:	461e      	mov	r6, r3
  uint16_t old_val = 0;
    5ec6:	2400      	movs	r4, #0
    5ec8:	aa04      	add	r2, sp, #16
    5eca:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, i2c, io);
    5ece:	9300      	str	r3, [sp, #0]
    5ed0:	462b      	mov	r3, r5
    5ed2:	4621      	mov	r1, r4
    5ed4:	4f10      	ldr	r7, [pc, #64]	; (5f18 <setGainSel+0x60>)
    5ed6:	47b8      	blx	r7
    5ed8:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), i2c, io);
    5eda:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ede:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    5ee2:	b212      	sxth	r2, r2
    5ee4:	ea4f 1909 	mov.w	r9, r9, lsl #4
    5ee8:	f009 0970 	and.w	r9, r9, #112	; 0x70
    5eec:	ea42 0209 	orr.w	r2, r2, r9
    5ef0:	9600      	str	r6, [sp, #0]
    5ef2:	462b      	mov	r3, r5
    5ef4:	b292      	uxth	r2, r2
    5ef6:	4621      	mov	r1, r4
    5ef8:	4640      	mov	r0, r8
    5efa:	4c08      	ldr	r4, [pc, #32]	; (5f1c <setGainSel+0x64>)
    5efc:	47a0      	blx	r4
    5efe:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    5f00:	4638      	mov	r0, r7
    5f02:	4d07      	ldr	r5, [pc, #28]	; (5f20 <setGainSel+0x68>)
    5f04:	47a8      	blx	r5
    5f06:	4604      	mov	r4, r0
    5f08:	4630      	mov	r0, r6
    5f0a:	47a8      	blx	r5
    5f0c:	4320      	orrs	r0, r4
}
    5f0e:	b2c0      	uxtb	r0, r0
    5f10:	b005      	add	sp, #20
    5f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f16:	bf00      	nop
    5f18:	000057ad 	.word	0x000057ad
    5f1c:	00005da5 	.word	0x00005da5
    5f20:	00005ea9 	.word	0x00005ea9

00005f24 <setResolution>:
{
    5f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f26:	b085      	sub	sp, #20
    5f28:	4606      	mov	r6, r0
    5f2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    5f2c:	011b      	lsls	r3, r3, #4
    5f2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    5f32:	0092      	lsls	r2, r2, #2
    5f34:	f002 020c 	and.w	r2, r2, #12
    5f38:	431a      	orrs	r2, r3
    5f3a:	f001 0103 	and.w	r1, r1, #3
    5f3e:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    5f42:	aa04      	add	r2, sp, #16
    5f44:	2300      	movs	r3, #0
    5f46:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, i2c, io);
    5f4a:	9500      	str	r5, [sp, #0]
    5f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f4e:	2102      	movs	r1, #2
    5f50:	4f0d      	ldr	r7, [pc, #52]	; (5f88 <setResolution+0x64>)
    5f52:	47b8      	blx	r7
    5f54:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), i2c, io);
    5f56:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5f5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    5f5e:	b212      	sxth	r2, r2
    5f60:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    5f64:	9500      	str	r5, [sp, #0]
    5f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f68:	b292      	uxth	r2, r2
    5f6a:	2102      	movs	r1, #2
    5f6c:	4630      	mov	r0, r6
    5f6e:	4c07      	ldr	r4, [pc, #28]	; (5f8c <setResolution+0x68>)
    5f70:	47a0      	blx	r4
    5f72:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    5f74:	4638      	mov	r0, r7
    5f76:	4d06      	ldr	r5, [pc, #24]	; (5f90 <setResolution+0x6c>)
    5f78:	47a8      	blx	r5
    5f7a:	4604      	mov	r4, r0
    5f7c:	4630      	mov	r0, r6
    5f7e:	47a8      	blx	r5
    5f80:	4320      	orrs	r0, r4
}
    5f82:	b2c0      	uxtb	r0, r0
    5f84:	b005      	add	sp, #20
    5f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f88:	000057ad 	.word	0x000057ad
    5f8c:	00005da5 	.word	0x00005da5
    5f90:	00005ea9 	.word	0x00005ea9

00005f94 <setOverSampling>:
{
    5f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f98:	b084      	sub	sp, #16
    5f9a:	4607      	mov	r7, r0
    5f9c:	4688      	mov	r8, r1
    5f9e:	4614      	mov	r4, r2
    5fa0:	461d      	mov	r5, r3
  uint16_t old_val = 0;
    5fa2:	aa04      	add	r2, sp, #16
    5fa4:	2300      	movs	r3, #0
    5fa6:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, i2c, io);
    5faa:	9500      	str	r5, [sp, #0]
    5fac:	4623      	mov	r3, r4
    5fae:	2102      	movs	r1, #2
    5fb0:	4e0f      	ldr	r6, [pc, #60]	; (5ff0 <setOverSampling+0x5c>)
    5fb2:	47b0      	blx	r6
    5fb4:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), i2c, io);
    5fb6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5fba:	f022 0203 	bic.w	r2, r2, #3
    5fbe:	b212      	sxth	r2, r2
    5fc0:	f008 0803 	and.w	r8, r8, #3
    5fc4:	ea42 0208 	orr.w	r2, r2, r8
    5fc8:	9500      	str	r5, [sp, #0]
    5fca:	4623      	mov	r3, r4
    5fcc:	b292      	uxth	r2, r2
    5fce:	2102      	movs	r1, #2
    5fd0:	4638      	mov	r0, r7
    5fd2:	4c08      	ldr	r4, [pc, #32]	; (5ff4 <setOverSampling+0x60>)
    5fd4:	47a0      	blx	r4
    5fd6:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    5fd8:	4630      	mov	r0, r6
    5fda:	4d07      	ldr	r5, [pc, #28]	; (5ff8 <setOverSampling+0x64>)
    5fdc:	47a8      	blx	r5
    5fde:	4604      	mov	r4, r0
    5fe0:	4638      	mov	r0, r7
    5fe2:	47a8      	blx	r5
    5fe4:	4320      	orrs	r0, r4
}
    5fe6:	b2c0      	uxtb	r0, r0
    5fe8:	b004      	add	sp, #16
    5fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fee:	bf00      	nop
    5ff0:	000057ad 	.word	0x000057ad
    5ff4:	00005da5 	.word	0x00005da5
    5ff8:	00005ea9 	.word	0x00005ea9

00005ffc <setDigitalFiltering>:
{
    5ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6000:	b084      	sub	sp, #16
    6002:	4607      	mov	r7, r0
    6004:	4688      	mov	r8, r1
    6006:	4614      	mov	r4, r2
    6008:	461d      	mov	r5, r3
  uint16_t old_val = 0;
    600a:	aa04      	add	r2, sp, #16
    600c:	2300      	movs	r3, #0
    600e:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, i2c, io);
    6012:	9500      	str	r5, [sp, #0]
    6014:	4623      	mov	r3, r4
    6016:	2102      	movs	r1, #2
    6018:	4e10      	ldr	r6, [pc, #64]	; (605c <setDigitalFiltering+0x60>)
    601a:	47b0      	blx	r6
    601c:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK), i2c, io);
    601e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6022:	f022 021c 	bic.w	r2, r2, #28
    6026:	b212      	sxth	r2, r2
    6028:	ea4f 0888 	mov.w	r8, r8, lsl #2
    602c:	f008 081c 	and.w	r8, r8, #28
    6030:	ea42 0208 	orr.w	r2, r2, r8
    6034:	9500      	str	r5, [sp, #0]
    6036:	4623      	mov	r3, r4
    6038:	b292      	uxth	r2, r2
    603a:	2102      	movs	r1, #2
    603c:	4638      	mov	r0, r7
    603e:	4c08      	ldr	r4, [pc, #32]	; (6060 <setDigitalFiltering+0x64>)
    6040:	47a0      	blx	r4
    6042:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    6044:	4630      	mov	r0, r6
    6046:	4d07      	ldr	r5, [pc, #28]	; (6064 <setDigitalFiltering+0x68>)
    6048:	47a8      	blx	r5
    604a:	4604      	mov	r4, r0
    604c:	4638      	mov	r0, r7
    604e:	47a8      	blx	r5
    6050:	4320      	orrs	r0, r4
}
    6052:	b2c0      	uxtb	r0, r0
    6054:	b004      	add	sp, #16
    6056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    605a:	bf00      	nop
    605c:	000057ad 	.word	0x000057ad
    6060:	00005da5 	.word	0x00005da5
    6064:	00005ea9 	.word	0x00005ea9

00006068 <setTemperatureCompensation>:
{
    6068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    606c:	b084      	sub	sp, #16
    606e:	4607      	mov	r7, r0
    6070:	4614      	mov	r4, r2
    6072:	461d      	mov	r5, r3
  uint8_t tcmp_en = enabled?1:0;
    6074:	f111 0800 	adds.w	r8, r1, #0
    6078:	bf18      	it	ne
    607a:	f04f 0801 	movne.w	r8, #1
  uint16_t old_val = 0;
    607e:	aa04      	add	r2, sp, #16
    6080:	2300      	movs	r3, #0
    6082:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, i2c, io);
    6086:	9500      	str	r5, [sp, #0]
    6088:	4623      	mov	r3, r4
    608a:	2101      	movs	r1, #1
    608c:	4e0e      	ldr	r6, [pc, #56]	; (60c8 <setTemperatureCompensation+0x60>)
    608e:	47b0      	blx	r6
    6090:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), i2c, io);
    6092:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    609a:	b212      	sxth	r2, r2
    609c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
    60a0:	9500      	str	r5, [sp, #0]
    60a2:	4623      	mov	r3, r4
    60a4:	b292      	uxth	r2, r2
    60a6:	2101      	movs	r1, #1
    60a8:	4638      	mov	r0, r7
    60aa:	4c08      	ldr	r4, [pc, #32]	; (60cc <setTemperatureCompensation+0x64>)
    60ac:	47a0      	blx	r4
    60ae:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    60b0:	4630      	mov	r0, r6
    60b2:	4d07      	ldr	r5, [pc, #28]	; (60d0 <setTemperatureCompensation+0x68>)
    60b4:	47a8      	blx	r5
    60b6:	4604      	mov	r4, r0
    60b8:	4638      	mov	r0, r7
    60ba:	47a8      	blx	r5
    60bc:	4320      	orrs	r0, r4
}
    60be:	b2c0      	uxtb	r0, r0
    60c0:	b004      	add	sp, #16
    60c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60c6:	bf00      	nop
    60c8:	000057ad 	.word	0x000057ad
    60cc:	00005da5 	.word	0x00005da5
    60d0:	00005ea9 	.word	0x00005ea9

000060d4 <begin>:
{
    60d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60d8:	b083      	sub	sp, #12
    60da:	4604      	mov	r4, r0
    60dc:	4690      	mov	r8, r2
    60de:	461f      	mov	r7, r3
    60e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    60e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  select_prefix(hall_sensor, order_code_last_digit);
    60e4:	4b28      	ldr	r3, [pc, #160]	; (6188 <begin+0xb4>)
    60e6:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    60e8:	f994 2001 	ldrsb.w	r2, [r4, #1]
    60ec:	f1b8 0f00 	cmp.w	r8, #0
    60f0:	d147      	bne.n	6182 <begin+0xae>
    60f2:	2300      	movs	r3, #0
    60f4:	4313      	orrs	r3, r2
    60f6:	2f00      	cmp	r7, #0
    60f8:	bf18      	it	ne
    60fa:	f043 0301 	orrne.w	r3, r3, #1
    60fe:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    6100:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    6104:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, i2c, io);
    6106:	4632      	mov	r2, r6
    6108:	4629      	mov	r1, r5
    610a:	4620      	mov	r0, r4
    610c:	4b1f      	ldr	r3, [pc, #124]	; (618c <begin+0xb8>)
    610e:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, i2c, io));
    6110:	4632      	mov	r2, r6
    6112:	4629      	mov	r1, r5
    6114:	4620      	mov	r0, r4
    6116:	4b1e      	ldr	r3, [pc, #120]	; (6190 <begin+0xbc>)
    6118:	4798      	blx	r3
    611a:	4b1e      	ldr	r3, [pc, #120]	; (6194 <begin+0xc0>)
    611c:	4798      	blx	r3
    611e:	4682      	mov	sl, r0
  uint8_t status2 = setGainSel(hall_sensor, 1, i2c, io); //7 is factory ours was 2
    6120:	4633      	mov	r3, r6
    6122:	462a      	mov	r2, r5
    6124:	2101      	movs	r1, #1
    6126:	4620      	mov	r0, r4
    6128:	4f1b      	ldr	r7, [pc, #108]	; (6198 <begin+0xc4>)
    612a:	47b8      	blx	r7
    612c:	4683      	mov	fp, r0
  uint8_t status3 = setResolution(hall_sensor, 0, 0, 0, i2c, io); //0,0,0
    612e:	9601      	str	r6, [sp, #4]
    6130:	9500      	str	r5, [sp, #0]
    6132:	2300      	movs	r3, #0
    6134:	461a      	mov	r2, r3
    6136:	4619      	mov	r1, r3
    6138:	4620      	mov	r0, r4
    613a:	4f18      	ldr	r7, [pc, #96]	; (619c <begin+0xc8>)
    613c:	47b8      	blx	r7
    613e:	4681      	mov	r9, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, i2c, io); //3
    6140:	4633      	mov	r3, r6
    6142:	462a      	mov	r2, r5
    6144:	2101      	movs	r1, #1
    6146:	4620      	mov	r0, r4
    6148:	4f15      	ldr	r7, [pc, #84]	; (61a0 <begin+0xcc>)
    614a:	47b8      	blx	r7
    614c:	4680      	mov	r8, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, i2c, io); //7
    614e:	4633      	mov	r3, r6
    6150:	462a      	mov	r2, r5
    6152:	2102      	movs	r1, #2
    6154:	4620      	mov	r0, r4
    6156:	4f13      	ldr	r7, [pc, #76]	; (61a4 <begin+0xd0>)
    6158:	47b8      	blx	r7
    615a:	4607      	mov	r7, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, i2c, io);//0
    615c:	4633      	mov	r3, r6
    615e:	462a      	mov	r2, r5
    6160:	2100      	movs	r1, #0
    6162:	4620      	mov	r0, r4
    6164:	4c10      	ldr	r4, [pc, #64]	; (61a8 <begin+0xd4>)
    6166:	47a0      	blx	r4
  return status1 | status2 | status3 | status4 | status5 | status6;
    6168:	ea4a 0a0b 	orr.w	sl, sl, fp
    616c:	ea49 090a 	orr.w	r9, r9, sl
    6170:	ea48 0809 	orr.w	r8, r8, r9
    6174:	ea47 0708 	orr.w	r7, r7, r8
    6178:	4338      	orrs	r0, r7
}
    617a:	b2c0      	uxtb	r0, r0
    617c:	b003      	add	sp, #12
    617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    6182:	2302      	movs	r3, #2
    6184:	e7b6      	b.n	60f4 <begin+0x20>
    6186:	bf00      	nop
    6188:	000055c1 	.word	0x000055c1
    618c:	0000583d 	.word	0x0000583d
    6190:	0000580d 	.word	0x0000580d
    6194:	00005ea9 	.word	0x00005ea9
    6198:	00005eb9 	.word	0x00005eb9
    619c:	00005f25 	.word	0x00005f25
    61a0:	00005f95 	.word	0x00005f95
    61a4:	00005ffd 	.word	0x00005ffd
    61a8:	00006069 	.word	0x00006069

000061ac <setExtTrig>:
{
    61ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61b0:	b084      	sub	sp, #16
    61b2:	4680      	mov	r8, r0
    61b4:	460c      	mov	r4, r1
    61b6:	4615      	mov	r5, r2
    61b8:	461e      	mov	r6, r3
  uint16_t old_val = 0;
    61ba:	aa04      	add	r2, sp, #16
    61bc:	2300      	movs	r3, #0
    61be:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, i2c, io);
    61c2:	9600      	str	r6, [sp, #0]
    61c4:	462b      	mov	r3, r5
    61c6:	2101      	movs	r1, #1
    61c8:	4f0f      	ldr	r7, [pc, #60]	; (6208 <setExtTrig+0x5c>)
    61ca:	47b8      	blx	r7
    61cc:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), i2c, io);
    61ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    61d6:	b213      	sxth	r3, r2
    61d8:	b2a2      	uxth	r2, r4
    61da:	02d2      	lsls	r2, r2, #11
    61dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    61e0:	431a      	orrs	r2, r3
    61e2:	9600      	str	r6, [sp, #0]
    61e4:	462b      	mov	r3, r5
    61e6:	b292      	uxth	r2, r2
    61e8:	2101      	movs	r1, #1
    61ea:	4640      	mov	r0, r8
    61ec:	4c07      	ldr	r4, [pc, #28]	; (620c <setExtTrig+0x60>)
    61ee:	47a0      	blx	r4
    61f0:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    61f2:	4638      	mov	r0, r7
    61f4:	4d06      	ldr	r5, [pc, #24]	; (6210 <setExtTrig+0x64>)
    61f6:	47a8      	blx	r5
    61f8:	4604      	mov	r4, r0
    61fa:	4630      	mov	r0, r6
    61fc:	47a8      	blx	r5
    61fe:	4320      	orrs	r0, r4
}
    6200:	b2c0      	uxtb	r0, r0
    6202:	b004      	add	sp, #16
    6204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6208:	000057ad 	.word	0x000057ad
    620c:	00005da5 	.word	0x00005da5
    6210:	00005ea9 	.word	0x00005ea9

00006214 <triggerInitialize>:
#include <math.h>
#include <Melexis/Calibration_Parameters.h>


void triggerInitialize(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6216:	4606      	mov	r6, r0
    6218:	460c      	mov	r4, r1
    621a:	4615      	mov	r5, r2
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,i2c,io);
    621c:	4613      	mov	r3, r2
    621e:	460a      	mov	r2, r1
    6220:	2101      	movs	r1, #1
    6222:	4f04      	ldr	r7, [pc, #16]	; (6234 <triggerInitialize+0x20>)
    6224:	47b8      	blx	r7
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, i2c, io);
    6226:	462b      	mov	r3, r5
    6228:	4622      	mov	r2, r4
    622a:	210e      	movs	r1, #14
    622c:	4630      	mov	r0, r6
    622e:	4c02      	ldr	r4, [pc, #8]	; (6238 <triggerInitialize+0x24>)
    6230:	47a0      	blx	r4
    6232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6234:	000061ad 	.word	0x000061ad
    6238:	00005e79 	.word	0x00005e79

0000623c <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    623c:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    623e:	4c03      	ldr	r4, [pc, #12]	; (624c <triggerSensor+0x10>)
    6240:	2540      	movs	r5, #64	; 0x40
    6242:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    6244:	4b02      	ldr	r3, [pc, #8]	; (6250 <triggerSensor+0x14>)
    6246:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6248:	6165      	str	r5, [r4, #20]
    624a:	bd38      	pop	{r3, r4, r5, pc}
    624c:	41008000 	.word	0x41008000
    6250:	00000a61 	.word	0x00000a61

00006254 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    6254:	b538      	push	{r3, r4, r5, lr}
    6256:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , i2c, io);
    6258:	4613      	mov	r3, r2
    625a:	460a      	mov	r2, r1
    625c:	210e      	movs	r1, #14
    625e:	4c05      	ldr	r4, [pc, #20]	; (6274 <triggerReadout+0x20>)
    6260:	47a0      	blx	r4
    6262:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    6264:	4628      	mov	r0, r5
    6266:	4b04      	ldr	r3, [pc, #16]	; (6278 <triggerReadout+0x24>)
    6268:	4798      	blx	r3
	return checkStatus(status);
    626a:	4620      	mov	r0, r4
    626c:	4b03      	ldr	r3, [pc, #12]	; (627c <triggerReadout+0x28>)
    626e:	4798      	blx	r3
};
    6270:	bd38      	pop	{r3, r4, r5, pc}
    6272:	bf00      	nop
    6274:	00005851 	.word	0x00005851
    6278:	00005969 	.word	0x00005969
    627c:	00005ea9 	.word	0x00005ea9

00006280 <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    6280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6284:	b083      	sub	sp, #12
    6286:	4688      	mov	r8, r1
    6288:	4617      	mov	r7, r2
    628a:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,i2c,io);
    628c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    628e:	9911      	ldr	r1, [sp, #68]	; 0x44
    6290:	4c28      	ldr	r4, [pc, #160]	; (6334 <triggerReadoutArray+0xb4>)
    6292:	47a0      	blx	r4
    6294:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,i2c,io);
    6296:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6298:	9911      	ldr	r1, [sp, #68]	; 0x44
    629a:	4640      	mov	r0, r8
    629c:	47a0      	blx	r4
    629e:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,i2c,io);
    62a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    62a4:	4638      	mov	r0, r7
    62a6:	47a0      	blx	r4
    62a8:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,i2c,io);
    62aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62ac:	9911      	ldr	r1, [sp, #68]	; 0x44
    62ae:	4630      	mov	r0, r6
    62b0:	47a0      	blx	r4
    62b2:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,i2c,io);
    62b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    62b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    62ba:	47a0      	blx	r4
    62bc:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,i2c,io);
    62be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62c0:	9911      	ldr	r1, [sp, #68]	; 0x44
    62c2:	980d      	ldr	r0, [sp, #52]	; 0x34
    62c4:	47a0      	blx	r4
    62c6:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,i2c,io);
    62c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62ca:	9911      	ldr	r1, [sp, #68]	; 0x44
    62cc:	980e      	ldr	r0, [sp, #56]	; 0x38
    62ce:	47a0      	blx	r4
    62d0:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,i2c,io);
    62d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62d4:	9911      	ldr	r1, [sp, #68]	; 0x44
    62d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    62d8:	47a0      	blx	r4
    62da:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,i2c,io);
    62dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    62de:	9911      	ldr	r1, [sp, #68]	; 0x44
    62e0:	9810      	ldr	r0, [sp, #64]	; 0x40
    62e2:	47a0      	blx	r4
    62e4:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    62e6:	4628      	mov	r0, r5
    62e8:	4d13      	ldr	r5, [pc, #76]	; (6338 <triggerReadoutArray+0xb8>)
    62ea:	47a8      	blx	r5
    62ec:	4604      	mov	r4, r0
    62ee:	4658      	mov	r0, fp
    62f0:	47a8      	blx	r5
    62f2:	4304      	orrs	r4, r0
    62f4:	b2e4      	uxtb	r4, r4
    62f6:	4650      	mov	r0, sl
    62f8:	47a8      	blx	r5
    62fa:	4304      	orrs	r4, r0
    62fc:	b2e4      	uxtb	r4, r4
    62fe:	4648      	mov	r0, r9
    6300:	47a8      	blx	r5
    6302:	4304      	orrs	r4, r0
    6304:	b2e4      	uxtb	r4, r4
    6306:	4640      	mov	r0, r8
    6308:	47a8      	blx	r5
    630a:	4304      	orrs	r4, r0
    630c:	b2e4      	uxtb	r4, r4
    630e:	4638      	mov	r0, r7
    6310:	47a8      	blx	r5
    6312:	4304      	orrs	r4, r0
    6314:	b2e4      	uxtb	r4, r4
    6316:	4630      	mov	r0, r6
    6318:	47a8      	blx	r5
    631a:	4304      	orrs	r4, r0
    631c:	b2e4      	uxtb	r4, r4
    631e:	9800      	ldr	r0, [sp, #0]
    6320:	47a8      	blx	r5
    6322:	4304      	orrs	r4, r0
    6324:	b2e4      	uxtb	r4, r4
    6326:	9801      	ldr	r0, [sp, #4]
    6328:	47a8      	blx	r5
    632a:	4320      	orrs	r0, r4
};
    632c:	b2c0      	uxtb	r0, r0
    632e:	b003      	add	sp, #12
    6330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6334:	00006255 	.word	0x00006255
    6338:	00005ea9 	.word	0x00005ea9

0000633c <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
					  struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
					  struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					  struct i2c_m_sync_desc *const i2c, struct io_descriptor *io)
{
    633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6340:	b087      	sub	sp, #28
    6342:	4607      	mov	r7, r0
    6344:	468b      	mov	fp, r1
    6346:	9204      	str	r2, [sp, #16]
    6348:	9305      	str	r3, [sp, #20]
    634a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    634c:	9e16      	ldr	r6, [sp, #88]	; 0x58
	//bottom row left
	initialize(hall_sensor_1);
    634e:	f8df a140 	ldr.w	sl, [pc, #320]	; 6490 <SensorArray_Init+0x154>
    6352:	47d0      	blx	sl
	begin(hall_sensor_1,1,0,0,false, i2c, io);
    6354:	9602      	str	r6, [sp, #8]
    6356:	9501      	str	r5, [sp, #4]
    6358:	2400      	movs	r4, #0
    635a:	9400      	str	r4, [sp, #0]
    635c:	4623      	mov	r3, r4
    635e:	4622      	mov	r2, r4
    6360:	2101      	movs	r1, #1
    6362:	4638      	mov	r0, r7
    6364:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6494 <SensorArray_Init+0x158>
    6368:	47c8      	blx	r9
	triggerInitialize(hall_sensor_1, i2c, io);
    636a:	4632      	mov	r2, r6
    636c:	4629      	mov	r1, r5
    636e:	4638      	mov	r0, r7
    6370:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6498 <SensorArray_Init+0x15c>
    6374:	47c0      	blx	r8
	delay_ms(5);
    6376:	2005      	movs	r0, #5
    6378:	4f44      	ldr	r7, [pc, #272]	; (648c <SensorArray_Init+0x150>)
    637a:	47b8      	blx	r7
	
	//bottom row middle
	initialize(hall_sensor_2);
    637c:	4658      	mov	r0, fp
    637e:	47d0      	blx	sl
	begin(hall_sensor_2,1,0,1,false, i2c, io);
    6380:	9602      	str	r6, [sp, #8]
    6382:	9501      	str	r5, [sp, #4]
    6384:	9400      	str	r4, [sp, #0]
    6386:	2301      	movs	r3, #1
    6388:	4622      	mov	r2, r4
    638a:	4619      	mov	r1, r3
    638c:	4658      	mov	r0, fp
    638e:	47c8      	blx	r9
	triggerInitialize(hall_sensor_2, i2c, io);
    6390:	4632      	mov	r2, r6
    6392:	4629      	mov	r1, r5
    6394:	4658      	mov	r0, fp
    6396:	47c0      	blx	r8
	delay_ms(5);
    6398:	2005      	movs	r0, #5
    639a:	47b8      	blx	r7
	
	//bottom row right
	initialize(hall_sensor_3);
    639c:	f8dd b010 	ldr.w	fp, [sp, #16]
    63a0:	4658      	mov	r0, fp
    63a2:	47d0      	blx	sl
	begin(hall_sensor_3,1,1,0,false, i2c, io);
    63a4:	9602      	str	r6, [sp, #8]
    63a6:	9501      	str	r5, [sp, #4]
    63a8:	9400      	str	r4, [sp, #0]
    63aa:	4623      	mov	r3, r4
    63ac:	2201      	movs	r2, #1
    63ae:	4611      	mov	r1, r2
    63b0:	4658      	mov	r0, fp
    63b2:	47c8      	blx	r9
	triggerInitialize(hall_sensor_3, i2c, io);
    63b4:	4632      	mov	r2, r6
    63b6:	4629      	mov	r1, r5
    63b8:	4658      	mov	r0, fp
    63ba:	47c0      	blx	r8
	delay_ms(5);
    63bc:	2005      	movs	r0, #5
    63be:	47b8      	blx	r7
	
	//middle row left
	initialize(hall_sensor_4);
    63c0:	f8dd b014 	ldr.w	fp, [sp, #20]
    63c4:	4658      	mov	r0, fp
    63c6:	47d0      	blx	sl
	begin(hall_sensor_4,2,0,0,false, i2c, io);
    63c8:	9602      	str	r6, [sp, #8]
    63ca:	9501      	str	r5, [sp, #4]
    63cc:	9400      	str	r4, [sp, #0]
    63ce:	4623      	mov	r3, r4
    63d0:	4622      	mov	r2, r4
    63d2:	2102      	movs	r1, #2
    63d4:	4658      	mov	r0, fp
    63d6:	47c8      	blx	r9
	triggerInitialize(hall_sensor_4, i2c, io);
    63d8:	4632      	mov	r2, r6
    63da:	4629      	mov	r1, r5
    63dc:	4658      	mov	r0, fp
    63de:	47c0      	blx	r8
	delay_ms(5);
    63e0:	2005      	movs	r0, #5
    63e2:	47b8      	blx	r7
	
	//middle row middle
	initialize(hall_sensor_5);
    63e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    63e6:	47d0      	blx	sl
	begin(hall_sensor_5,2,0,1,false, i2c, io);
    63e8:	9602      	str	r6, [sp, #8]
    63ea:	9501      	str	r5, [sp, #4]
    63ec:	9400      	str	r4, [sp, #0]
    63ee:	2301      	movs	r3, #1
    63f0:	4622      	mov	r2, r4
    63f2:	2102      	movs	r1, #2
    63f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    63f6:	47c8      	blx	r9
	triggerInitialize(hall_sensor_5, i2c, io);
    63f8:	4632      	mov	r2, r6
    63fa:	4629      	mov	r1, r5
    63fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    63fe:	47c0      	blx	r8
	delay_ms(5);
    6400:	2005      	movs	r0, #5
    6402:	47b8      	blx	r7
	
	//middle row right
	initialize(hall_sensor_6);
    6404:	9811      	ldr	r0, [sp, #68]	; 0x44
    6406:	47d0      	blx	sl
	begin(hall_sensor_6,2,1,0,false, i2c, io);
    6408:	9602      	str	r6, [sp, #8]
    640a:	9501      	str	r5, [sp, #4]
    640c:	9400      	str	r4, [sp, #0]
    640e:	4623      	mov	r3, r4
    6410:	2201      	movs	r2, #1
    6412:	2102      	movs	r1, #2
    6414:	9811      	ldr	r0, [sp, #68]	; 0x44
    6416:	47c8      	blx	r9
	triggerInitialize(hall_sensor_6, i2c, io);
    6418:	4632      	mov	r2, r6
    641a:	4629      	mov	r1, r5
    641c:	9811      	ldr	r0, [sp, #68]	; 0x44
    641e:	47c0      	blx	r8
	delay_ms(5);
    6420:	2005      	movs	r0, #5
    6422:	47b8      	blx	r7
	
	//top row left
	initialize(hall_sensor_7);
    6424:	9812      	ldr	r0, [sp, #72]	; 0x48
    6426:	47d0      	blx	sl
	begin(hall_sensor_7,3,0,0,false, i2c, io);
    6428:	9602      	str	r6, [sp, #8]
    642a:	9501      	str	r5, [sp, #4]
    642c:	9400      	str	r4, [sp, #0]
    642e:	4623      	mov	r3, r4
    6430:	4622      	mov	r2, r4
    6432:	2103      	movs	r1, #3
    6434:	9812      	ldr	r0, [sp, #72]	; 0x48
    6436:	47c8      	blx	r9
	triggerInitialize(hall_sensor_7, i2c, io);
    6438:	4632      	mov	r2, r6
    643a:	4629      	mov	r1, r5
    643c:	9812      	ldr	r0, [sp, #72]	; 0x48
    643e:	47c0      	blx	r8
	delay_ms(5);
    6440:	2005      	movs	r0, #5
    6442:	47b8      	blx	r7
	
	//top row middle
	initialize(hall_sensor_8);
    6444:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6446:	47d0      	blx	sl
	begin(hall_sensor_8,3,0,1,false, i2c, io);
    6448:	9602      	str	r6, [sp, #8]
    644a:	9501      	str	r5, [sp, #4]
    644c:	9400      	str	r4, [sp, #0]
    644e:	2301      	movs	r3, #1
    6450:	4622      	mov	r2, r4
    6452:	2103      	movs	r1, #3
    6454:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6456:	47c8      	blx	r9
	triggerInitialize(hall_sensor_8, i2c, io);
    6458:	4632      	mov	r2, r6
    645a:	4629      	mov	r1, r5
    645c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    645e:	47c0      	blx	r8
	delay_ms(5);
    6460:	2005      	movs	r0, #5
    6462:	47b8      	blx	r7
	
	//top row right
	initialize(hall_sensor_9);
    6464:	9814      	ldr	r0, [sp, #80]	; 0x50
    6466:	47d0      	blx	sl
	begin(hall_sensor_9,3,1,0,false, i2c, io);
    6468:	9602      	str	r6, [sp, #8]
    646a:	9501      	str	r5, [sp, #4]
    646c:	9400      	str	r4, [sp, #0]
    646e:	4623      	mov	r3, r4
    6470:	2201      	movs	r2, #1
    6472:	2103      	movs	r1, #3
    6474:	9814      	ldr	r0, [sp, #80]	; 0x50
    6476:	47c8      	blx	r9
	triggerInitialize(hall_sensor_9, i2c, io);
    6478:	4632      	mov	r2, r6
    647a:	4629      	mov	r1, r5
    647c:	9814      	ldr	r0, [sp, #80]	; 0x50
    647e:	47c0      	blx	r8
	delay_ms(5);
    6480:	2005      	movs	r0, #5
    6482:	47b8      	blx	r7
}
    6484:	b007      	add	sp, #28
    6486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    648a:	bf00      	nop
    648c:	00000a81 	.word	0x00000a81
    6490:	00005709 	.word	0x00005709
    6494:	000060d5 	.word	0x000060d5
    6498:	00006215 	.word	0x00006215

0000649c <update_struct_values>:


void update_struct_values(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    649c:	b410      	push	{r4}
		//allocate every data to corresponding struct value
		sensor_row->b_x_top = hall_sensor_top->data.x;
    649e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    64a0:	6004      	str	r4, [r0, #0]
		sensor_row->b_y_top = hall_sensor_top->data.y;
    64a2:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    64a4:	60c4      	str	r4, [r0, #12]
		sensor_row->b_z_top = hall_sensor_top->data.z;
    64a6:	6d49      	ldr	r1, [r1, #84]	; 0x54
    64a8:	6181      	str	r1, [r0, #24]
		
		sensor_row->b_x_middle = hall_sensor_middle->data.x;
    64aa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    64ac:	6041      	str	r1, [r0, #4]
		sensor_row->b_y_middle = hall_sensor_middle->data.y;
    64ae:	6d11      	ldr	r1, [r2, #80]	; 0x50
    64b0:	6101      	str	r1, [r0, #16]
		sensor_row->b_z_middle = hall_sensor_middle->data.z;
    64b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
    64b4:	61c2      	str	r2, [r0, #28]
		
		sensor_row->b_x_bottom = hall_sensor_bottom->data.x;
    64b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    64b8:	6082      	str	r2, [r0, #8]
		sensor_row->b_y_bottom = hall_sensor_bottom->data.y;
    64ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    64bc:	6142      	str	r2, [r0, #20]
		sensor_row->b_z_bottom = hall_sensor_bottom->data.z;
    64be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    64c0:	6203      	str	r3, [r0, #32]
		
		sensor_row->b_r_bottom = (sensor_row->b_x_bottom*sensor_row->b_x_bottom) + (sensor_row->b_y_bottom *sensor_row->b_y_bottom );
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
		*/
	
}
    64c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    64c6:	4770      	bx	lr

000064c8 <calibration_function>:

float calibration_function(float c1, float c2, float c3, float c4, float c5, float c6, float c7, float c8, float c9, float c10, 
						   float c11, float c12, float c13, float c14, float c15, float c16, float c17, float c18, float c19, float c20,
						   float Bx, float By, float Bz)
{
    64c8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    64cc:	ed2d 8b04 	vpush	{d8-d9}
    64d0:	ed2d bb08 	vpush	{d11-d14}
    64d4:	b084      	sub	sp, #16
    64d6:	ee0e 0a90 	vmov	s29, r0
    64da:	ee0e 1a10 	vmov	s28, r1
    64de:	ee0d 2a90 	vmov	s27, r2
    64e2:	ee0d 3a10 	vmov	s26, r3
    64e6:	ed9d ca28 	vldr	s24, [sp, #160]	; 0xa0
    64ea:	eddd 9a29 	vldr	s19, [sp, #164]	; 0xa4
    64ee:	eddd 8a2a 	vldr	s17, [sp, #168]	; 0xa8
	float result;
	float cubedBx,squaredBx;
	float cubedBy,squaredBy;
	float cubedBz,squaredBz;
	cubedBx = pow(Bx,3);
    64f2:	4c67      	ldr	r4, [pc, #412]	; (6690 <calibration_function+0x1c8>)
    64f4:	ee1c 0a10 	vmov	r0, s24
    64f8:	47a0      	blx	r4
    64fa:	e9cd 0100 	strd	r0, r1, [sp]
    64fe:	f04f 0800 	mov.w	r8, #0
    6502:	f8df 9198 	ldr.w	r9, [pc, #408]	; 669c <calibration_function+0x1d4>
    6506:	4642      	mov	r2, r8
    6508:	464b      	mov	r3, r9
    650a:	4e62      	ldr	r6, [pc, #392]	; (6694 <calibration_function+0x1cc>)
    650c:	47b0      	blx	r6
    650e:	4d62      	ldr	r5, [pc, #392]	; (6698 <calibration_function+0x1d0>)
    6510:	47a8      	blx	r5
    6512:	ee08 0a10 	vmov	s16, r0
	cubedBy = pow(By,3);
    6516:	ee19 0a90 	vmov	r0, s19
    651a:	47a0      	blx	r4
    651c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6520:	4642      	mov	r2, r8
    6522:	464b      	mov	r3, r9
    6524:	47b0      	blx	r6
    6526:	47a8      	blx	r5
    6528:	ee0b 0a90 	vmov	s23, r0
	cubedBz = pow(Bz,3);
    652c:	ee18 0a90 	vmov	r0, s17
    6530:	47a0      	blx	r4
    6532:	4682      	mov	sl, r0
    6534:	468b      	mov	fp, r1
    6536:	4642      	mov	r2, r8
    6538:	464b      	mov	r3, r9
    653a:	47b0      	blx	r6
    653c:	47a8      	blx	r5
    653e:	ee09 0a10 	vmov	s18, r0
	squaredBx = pow(Bx,2);
    6542:	f04f 0800 	mov.w	r8, #0
    6546:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    654a:	4642      	mov	r2, r8
    654c:	464b      	mov	r3, r9
    654e:	e9dd 0100 	ldrd	r0, r1, [sp]
    6552:	47b0      	blx	r6
    6554:	47a8      	blx	r5
    6556:	ee0c 0a90 	vmov	s25, r0
	squaredBy = pow(By,2);
    655a:	4642      	mov	r2, r8
    655c:	464b      	mov	r3, r9
    655e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6562:	47b0      	blx	r6
    6564:	47a8      	blx	r5
    6566:	ee0b 0a10 	vmov	s22, r0
	squaredBz = pow(Bz,2);
    656a:	4642      	mov	r2, r8
    656c:	464b      	mov	r3, r9
    656e:	4650      	mov	r0, sl
    6570:	4659      	mov	r1, fp
    6572:	47b0      	blx	r6
    6574:	47a8      	blx	r5
    6576:	ee07 0a10 	vmov	s14, r0
	result = (c1*cubedBx) + (c2*squaredBx*By) + (c3*squaredBx*Bz) + (c4*squaredBx) + (c5*Bx*squaredBy) + (c6*Bx*By*Bz) + (c7*Bx*By) + (c8*Bx*squaredBz) + (c9*Bx*Bz) + (c10*Bx) +
    657a:	ee28 8a2e 	vmul.f32	s16, s16, s29
    657e:	ee6c 7a8e 	vmul.f32	s15, s25, s28
    6582:	ee69 7aa7 	vmul.f32	s15, s19, s15
    6586:	ee78 7a27 	vadd.f32	s15, s16, s15
    658a:	ee6c daad 	vmul.f32	s27, s25, s27
    658e:	ee68 daad 	vmul.f32	s27, s17, s27
    6592:	ee77 7aad 	vadd.f32	s15, s15, s27
    6596:	ee6c ca8d 	vmul.f32	s25, s25, s26
    659a:	ee77 7aac 	vadd.f32	s15, s15, s25
    659e:	eddd 6a18 	vldr	s13, [sp, #96]	; 0x60
    65a2:	ee6c 6a26 	vmul.f32	s13, s24, s13
    65a6:	ee6b 6a26 	vmul.f32	s13, s22, s13
    65aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
    65ae:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
    65b2:	ee6c 6a26 	vmul.f32	s13, s24, s13
    65b6:	ee69 6aa6 	vmul.f32	s13, s19, s13
    65ba:	ee68 6aa6 	vmul.f32	s13, s17, s13
    65be:	ee77 7aa6 	vadd.f32	s15, s15, s13
    65c2:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
    65c6:	ee6c 6a26 	vmul.f32	s13, s24, s13
    65ca:	ee69 6aa6 	vmul.f32	s13, s19, s13
    65ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
    65d2:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
    65d6:	ee6c 6a26 	vmul.f32	s13, s24, s13
    65da:	ee67 6a26 	vmul.f32	s13, s14, s13
    65de:	ee77 7aa6 	vadd.f32	s15, s15, s13
    65e2:	eddd 6a1c 	vldr	s13, [sp, #112]	; 0x70
    65e6:	ee6c 6a26 	vmul.f32	s13, s24, s13
    65ea:	ee68 6aa6 	vmul.f32	s13, s17, s13
    65ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
    65f2:	eddd 6a1d 	vldr	s13, [sp, #116]	; 0x74
    65f6:	ee2c ca26 	vmul.f32	s24, s24, s13
    65fa:	ee77 7a8c 	vadd.f32	s15, s15, s24
			 (c11*cubedBy) + (c12*squaredBy*Bz) + (c13*squaredBy) + (c14*By*squaredBz) + (c15*By*Bz) + (c16*By) + (c17*cubedBz) + (c18*squaredBz) + (c19*Bz) + c20;
    65fe:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
    6602:	ee6b baa6 	vmul.f32	s23, s23, s13
	result = (c1*cubedBx) + (c2*squaredBx*By) + (c3*squaredBx*Bz) + (c4*squaredBx) + (c5*Bx*squaredBy) + (c6*Bx*By*Bz) + (c7*Bx*By) + (c8*Bx*squaredBz) + (c9*Bx*Bz) + (c10*Bx) +
    6606:	ee77 7aab 	vadd.f32	s15, s15, s23
			 (c11*cubedBy) + (c12*squaredBy*Bz) + (c13*squaredBy) + (c14*By*squaredBz) + (c15*By*Bz) + (c16*By) + (c17*cubedBz) + (c18*squaredBz) + (c19*Bz) + c20;
    660a:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
    660e:	ee6b 6a26 	vmul.f32	s13, s22, s13
    6612:	ee68 6aa6 	vmul.f32	s13, s17, s13
    6616:	ee77 7aa6 	vadd.f32	s15, s15, s13
    661a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
    661e:	ee2b ba26 	vmul.f32	s22, s22, s13
    6622:	ee77 7a8b 	vadd.f32	s15, s15, s22
    6626:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
    662a:	ee69 6aa6 	vmul.f32	s13, s19, s13
    662e:	ee67 6a26 	vmul.f32	s13, s14, s13
    6632:	ee77 7aa6 	vadd.f32	s15, s15, s13
    6636:	eddd 6a22 	vldr	s13, [sp, #136]	; 0x88
    663a:	ee69 6aa6 	vmul.f32	s13, s19, s13
    663e:	ee68 6aa6 	vmul.f32	s13, s17, s13
    6642:	ee77 7aa6 	vadd.f32	s15, s15, s13
    6646:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
    664a:	ee69 9aa6 	vmul.f32	s19, s19, s13
    664e:	ee77 7aa9 	vadd.f32	s15, s15, s19
    6652:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
    6656:	ee29 9a26 	vmul.f32	s18, s18, s13
    665a:	ee77 7a89 	vadd.f32	s15, s15, s18
    665e:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
    6662:	ee27 7a26 	vmul.f32	s14, s14, s13
    6666:	ee77 7a87 	vadd.f32	s15, s15, s14
    666a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
    666e:	ee68 8a87 	vmul.f32	s17, s17, s14
    6672:	ee77 7aa8 	vadd.f32	s15, s15, s17
	return result;
}
    6676:	ed9d 7a27 	vldr	s14, [sp, #156]	; 0x9c
    667a:	ee77 7a87 	vadd.f32	s15, s15, s14
    667e:	ee17 0a90 	vmov	r0, s15
    6682:	b004      	add	sp, #16
    6684:	ecbd bb08 	vpop	{d11-d14}
    6688:	ecbd 8b04 	vpop	{d8-d9}
    668c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    6690:	00009315 	.word	0x00009315
    6694:	00007e49 	.word	0x00007e49
    6698:	0000991d 	.word	0x0000991d
    669c:	40080000 	.word	0x40080000

000066a0 <mag_to_force>:

void mag_to_force(uint8_t row_select, struct sensorRow_Values *sensor_row, struct function_Parameters *parameters_array){
    66a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66a4:	b095      	sub	sp, #84	; 0x54
    66a6:	460d      	mov	r5, r1
    66a8:	4614      	mov	r4, r2
	
	switch(row_select){
    66aa:	2802      	cmp	r0, #2
    66ac:	f000 8284 	beq.w	6bb8 <mag_to_force+0x518>
    66b0:	2803      	cmp	r0, #3
    66b2:	f000 85e1 	beq.w	7278 <mag_to_force+0xbd8>
    66b6:	2801      	cmp	r0, #1
    66b8:	d002      	beq.n	66c0 <mag_to_force+0x20>
			sensor_row->force_r_bottom = (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
			break;

	}
    66ba:	b015      	add	sp, #84	; 0x54
    66bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sensor_row->force_x_top = calibration_function(parameters_array->sensor_topLeft[0][0],parameters_array->sensor_topLeft[1][0],parameters_array->sensor_topLeft[2][0],parameters_array->sensor_topLeft[3][0],parameters_array->sensor_topLeft[4][0],parameters_array->sensor_topLeft[5][0],parameters_array->sensor_topLeft[6][0],parameters_array->sensor_topLeft[7][0],parameters_array->sensor_topLeft[8][0],parameters_array->sensor_topLeft[9][0],parameters_array->sensor_topLeft[10][0],
    66c0:	698b      	ldr	r3, [r1, #24]
    66c2:	9312      	str	r3, [sp, #72]	; 0x48
    66c4:	68cb      	ldr	r3, [r1, #12]
    66c6:	9311      	str	r3, [sp, #68]	; 0x44
    66c8:	680b      	ldr	r3, [r1, #0]
    66ca:	9310      	str	r3, [sp, #64]	; 0x40
    66cc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    66d0:	930f      	str	r3, [sp, #60]	; 0x3c
    66d2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    66d6:	930e      	str	r3, [sp, #56]	; 0x38
    66d8:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
    66dc:	930d      	str	r3, [sp, #52]	; 0x34
    66de:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    66e2:	930c      	str	r3, [sp, #48]	; 0x30
    66e4:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    66e8:	930b      	str	r3, [sp, #44]	; 0x2c
    66ea:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    66ee:	930a      	str	r3, [sp, #40]	; 0x28
    66f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    66f4:	9309      	str	r3, [sp, #36]	; 0x24
    66f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    66fa:	9308      	str	r3, [sp, #32]
    66fc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
    6700:	9307      	str	r3, [sp, #28]
    6702:	6f93      	ldr	r3, [r2, #120]	; 0x78
    6704:	9306      	str	r3, [sp, #24]
    6706:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    6708:	9305      	str	r3, [sp, #20]
    670a:	6e13      	ldr	r3, [r2, #96]	; 0x60
    670c:	9304      	str	r3, [sp, #16]
    670e:	6d53      	ldr	r3, [r2, #84]	; 0x54
    6710:	9303      	str	r3, [sp, #12]
    6712:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6714:	9302      	str	r3, [sp, #8]
    6716:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6718:	9301      	str	r3, [sp, #4]
    671a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    671c:	9300      	str	r3, [sp, #0]
    671e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    6720:	6992      	ldr	r2, [r2, #24]
    6722:	68e1      	ldr	r1, [r4, #12]
    6724:	6820      	ldr	r0, [r4, #0]
    6726:	4eaf      	ldr	r6, [pc, #700]	; (69e4 <mag_to_force+0x344>)
    6728:	47b0      	blx	r6
    672a:	6268      	str	r0, [r5, #36]	; 0x24
			sensor_row->force_y_top = calibration_function(parameters_array->sensor_topLeft[0][1],parameters_array->sensor_topLeft[1][1],parameters_array->sensor_topLeft[2][1],parameters_array->sensor_topLeft[3][1],parameters_array->sensor_topLeft[4][1],parameters_array->sensor_topLeft[5][1],parameters_array->sensor_topLeft[6][1],parameters_array->sensor_topLeft[7][1],parameters_array->sensor_topLeft[8][1],parameters_array->sensor_topLeft[9][1],parameters_array->sensor_topLeft[10][1],
    672c:	69ab      	ldr	r3, [r5, #24]
    672e:	9312      	str	r3, [sp, #72]	; 0x48
    6730:	68eb      	ldr	r3, [r5, #12]
    6732:	9311      	str	r3, [sp, #68]	; 0x44
    6734:	682b      	ldr	r3, [r5, #0]
    6736:	9310      	str	r3, [sp, #64]	; 0x40
    6738:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    673c:	930f      	str	r3, [sp, #60]	; 0x3c
    673e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    6742:	930e      	str	r3, [sp, #56]	; 0x38
    6744:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    6748:	930d      	str	r3, [sp, #52]	; 0x34
    674a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    674e:	930c      	str	r3, [sp, #48]	; 0x30
    6750:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    6754:	930b      	str	r3, [sp, #44]	; 0x2c
    6756:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    675a:	930a      	str	r3, [sp, #40]	; 0x28
    675c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    6760:	9309      	str	r3, [sp, #36]	; 0x24
    6762:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6766:	9308      	str	r3, [sp, #32]
    6768:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    676c:	9307      	str	r3, [sp, #28]
    676e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    6770:	9306      	str	r3, [sp, #24]
    6772:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6774:	9305      	str	r3, [sp, #20]
    6776:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6778:	9304      	str	r3, [sp, #16]
    677a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    677c:	9303      	str	r3, [sp, #12]
    677e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6780:	9302      	str	r3, [sp, #8]
    6782:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6784:	9301      	str	r3, [sp, #4]
    6786:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6788:	9300      	str	r3, [sp, #0]
    678a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    678c:	69e2      	ldr	r2, [r4, #28]
    678e:	6921      	ldr	r1, [r4, #16]
    6790:	6860      	ldr	r0, [r4, #4]
    6792:	47b0      	blx	r6
    6794:	6328      	str	r0, [r5, #48]	; 0x30
			sensor_row->force_z_top = calibration_function(parameters_array->sensor_topLeft[0][2],parameters_array->sensor_topLeft[1][2],parameters_array->sensor_topLeft[2][2],parameters_array->sensor_topLeft[3][2],parameters_array->sensor_topLeft[4][2],parameters_array->sensor_topLeft[5][2],parameters_array->sensor_topLeft[6][2],parameters_array->sensor_topLeft[7][2],parameters_array->sensor_topLeft[8][2],parameters_array->sensor_topLeft[9][2],parameters_array->sensor_topLeft[10][2],
    6796:	69ab      	ldr	r3, [r5, #24]
    6798:	9312      	str	r3, [sp, #72]	; 0x48
    679a:	68eb      	ldr	r3, [r5, #12]
    679c:	9311      	str	r3, [sp, #68]	; 0x44
    679e:	682b      	ldr	r3, [r5, #0]
    67a0:	9310      	str	r3, [sp, #64]	; 0x40
    67a2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    67a6:	930f      	str	r3, [sp, #60]	; 0x3c
    67a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    67ac:	930e      	str	r3, [sp, #56]	; 0x38
    67ae:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    67b2:	930d      	str	r3, [sp, #52]	; 0x34
    67b4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    67b8:	930c      	str	r3, [sp, #48]	; 0x30
    67ba:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    67be:	930b      	str	r3, [sp, #44]	; 0x2c
    67c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    67c4:	930a      	str	r3, [sp, #40]	; 0x28
    67c6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    67ca:	9309      	str	r3, [sp, #36]	; 0x24
    67cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    67d0:	9308      	str	r3, [sp, #32]
    67d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    67d6:	9307      	str	r3, [sp, #28]
    67d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    67dc:	9306      	str	r3, [sp, #24]
    67de:	6f63      	ldr	r3, [r4, #116]	; 0x74
    67e0:	9305      	str	r3, [sp, #20]
    67e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    67e4:	9304      	str	r3, [sp, #16]
    67e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    67e8:	9303      	str	r3, [sp, #12]
    67ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
    67ec:	9302      	str	r3, [sp, #8]
    67ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    67f0:	9301      	str	r3, [sp, #4]
    67f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    67f4:	9300      	str	r3, [sp, #0]
    67f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    67f8:	6a22      	ldr	r2, [r4, #32]
    67fa:	6961      	ldr	r1, [r4, #20]
    67fc:	68a0      	ldr	r0, [r4, #8]
    67fe:	47b0      	blx	r6
    6800:	63e8      	str	r0, [r5, #60]	; 0x3c
			sensor_row->force_r_top = (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    6802:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
    6806:	ee67 7aa7 	vmul.f32	s15, s15, s15
    680a:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
    680e:	ee27 7a07 	vmul.f32	s14, s14, s14
    6812:	ee77 7a87 	vadd.f32	s15, s15, s14
    6816:	edc5 7a12 	vstr	s15, [r5, #72]	; 0x48
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    681a:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 69ec <mag_to_force+0x34c>
    681e:	ee17 0a90 	vmov	r0, s15
    6822:	47c8      	blx	r9
    6824:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 69f0 <mag_to_force+0x350>
    6828:	47c0      	blx	r8
    682a:	4f6f      	ldr	r7, [pc, #444]	; (69e8 <mag_to_force+0x348>)
    682c:	47b8      	blx	r7
    682e:	64a8      	str	r0, [r5, #72]	; 0x48
			sensor_row->force_x_middle = calibration_function(parameters_array->sensor_middleLeft[0][0],parameters_array->sensor_middleLeft[1][0],parameters_array->sensor_middleLeft[2][0],parameters_array->sensor_middleLeft[3][0],parameters_array->sensor_middleLeft[4][0],parameters_array->sensor_middleLeft[5][0],parameters_array->sensor_middleLeft[6][0],parameters_array->sensor_middleLeft[7][0],parameters_array->sensor_middleLeft[8][0],parameters_array->sensor_middleLeft[9][0],parameters_array->sensor_middleLeft[10][0],
    6830:	69ab      	ldr	r3, [r5, #24]
    6832:	9312      	str	r3, [sp, #72]	; 0x48
    6834:	68eb      	ldr	r3, [r5, #12]
    6836:	9311      	str	r3, [sp, #68]	; 0x44
    6838:	682b      	ldr	r3, [r5, #0]
    683a:	9310      	str	r3, [sp, #64]	; 0x40
    683c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    6840:	930f      	str	r3, [sp, #60]	; 0x3c
    6842:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    6846:	930e      	str	r3, [sp, #56]	; 0x38
    6848:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    684c:	930d      	str	r3, [sp, #52]	; 0x34
    684e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6852:	930c      	str	r3, [sp, #48]	; 0x30
    6854:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    6858:	930b      	str	r3, [sp, #44]	; 0x2c
    685a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    685e:	930a      	str	r3, [sp, #40]	; 0x28
    6860:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    6864:	9309      	str	r3, [sp, #36]	; 0x24
    6866:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    686a:	9308      	str	r3, [sp, #32]
    686c:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    6870:	9307      	str	r3, [sp, #28]
    6872:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
    6876:	9306      	str	r3, [sp, #24]
    6878:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
    687c:	9305      	str	r3, [sp, #20]
    687e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    6882:	9304      	str	r3, [sp, #16]
    6884:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    6888:	9303      	str	r3, [sp, #12]
    688a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    688e:	9302      	str	r3, [sp, #8]
    6890:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    6894:	9301      	str	r3, [sp, #4]
    6896:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    689a:	9300      	str	r3, [sp, #0]
    689c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    68a0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    68a4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    68a8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    68ac:	47b0      	blx	r6
    68ae:	62a8      	str	r0, [r5, #40]	; 0x28
			sensor_row->force_y_middle = calibration_function(parameters_array->sensor_middleLeft[0][1],parameters_array->sensor_middleLeft[1][1],parameters_array->sensor_middleLeft[2][1],parameters_array->sensor_middleLeft[3][1],parameters_array->sensor_middleLeft[4][1],parameters_array->sensor_middleLeft[5][1],parameters_array->sensor_middleLeft[6][1],parameters_array->sensor_middleLeft[7][1],parameters_array->sensor_middleLeft[8][1],parameters_array->sensor_middleLeft[9][1],parameters_array->sensor_middleLeft[10][1],
    68b0:	69ab      	ldr	r3, [r5, #24]
    68b2:	9312      	str	r3, [sp, #72]	; 0x48
    68b4:	68eb      	ldr	r3, [r5, #12]
    68b6:	9311      	str	r3, [sp, #68]	; 0x44
    68b8:	682b      	ldr	r3, [r5, #0]
    68ba:	9310      	str	r3, [sp, #64]	; 0x40
    68bc:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    68c0:	930f      	str	r3, [sp, #60]	; 0x3c
    68c2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    68c6:	930e      	str	r3, [sp, #56]	; 0x38
    68c8:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
    68cc:	930d      	str	r3, [sp, #52]	; 0x34
    68ce:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    68d2:	930c      	str	r3, [sp, #48]	; 0x30
    68d4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    68d8:	930b      	str	r3, [sp, #44]	; 0x2c
    68da:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
    68de:	930a      	str	r3, [sp, #40]	; 0x28
    68e0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    68e4:	9309      	str	r3, [sp, #36]	; 0x24
    68e6:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    68ea:	9308      	str	r3, [sp, #32]
    68ec:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    68f0:	9307      	str	r3, [sp, #28]
    68f2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    68f6:	9306      	str	r3, [sp, #24]
    68f8:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    68fc:	9305      	str	r3, [sp, #20]
    68fe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    6902:	9304      	str	r3, [sp, #16]
    6904:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    6908:	9303      	str	r3, [sp, #12]
    690a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    690e:	9302      	str	r3, [sp, #8]
    6910:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    6914:	9301      	str	r3, [sp, #4]
    6916:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    691a:	9300      	str	r3, [sp, #0]
    691c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    6920:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6924:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    6928:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    692c:	47b0      	blx	r6
    692e:	6368      	str	r0, [r5, #52]	; 0x34
			sensor_row->force_z_middle = calibration_function(parameters_array->sensor_middleLeft[0][2],parameters_array->sensor_middleLeft[1][2],parameters_array->sensor_middleLeft[2][2],parameters_array->sensor_middleLeft[3][2],parameters_array->sensor_middleLeft[4][2],parameters_array->sensor_middleLeft[5][2],parameters_array->sensor_middleLeft[6][2],parameters_array->sensor_middleLeft[7][2],parameters_array->sensor_middleLeft[8][2],parameters_array->sensor_middleLeft[9][2],parameters_array->sensor_middleLeft[10][2],
    6930:	69ab      	ldr	r3, [r5, #24]
    6932:	9312      	str	r3, [sp, #72]	; 0x48
    6934:	68eb      	ldr	r3, [r5, #12]
    6936:	9311      	str	r3, [sp, #68]	; 0x44
    6938:	682b      	ldr	r3, [r5, #0]
    693a:	9310      	str	r3, [sp, #64]	; 0x40
    693c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
    6940:	930f      	str	r3, [sp, #60]	; 0x3c
    6942:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    6946:	930e      	str	r3, [sp, #56]	; 0x38
    6948:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    694c:	930d      	str	r3, [sp, #52]	; 0x34
    694e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    6952:	930c      	str	r3, [sp, #48]	; 0x30
    6954:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
    6958:	930b      	str	r3, [sp, #44]	; 0x2c
    695a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    695e:	930a      	str	r3, [sp, #40]	; 0x28
    6960:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    6964:	9309      	str	r3, [sp, #36]	; 0x24
    6966:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
    696a:	9308      	str	r3, [sp, #32]
    696c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    6970:	9307      	str	r3, [sp, #28]
    6972:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
    6976:	9306      	str	r3, [sp, #24]
    6978:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
    697c:	9305      	str	r3, [sp, #20]
    697e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    6982:	9304      	str	r3, [sp, #16]
    6984:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    6988:	9303      	str	r3, [sp, #12]
    698a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    698e:	9302      	str	r3, [sp, #8]
    6990:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    6994:	9301      	str	r3, [sp, #4]
    6996:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    699a:	9300      	str	r3, [sp, #0]
    699c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    69a0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    69a4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    69a8:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    69ac:	47b0      	blx	r6
    69ae:	6428      	str	r0, [r5, #64]	; 0x40
			sensor_row->force_r_middle = (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    69b0:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
    69b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    69b8:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
    69bc:	ee27 7a07 	vmul.f32	s14, s14, s14
    69c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    69c4:	edc5 7a13 	vstr	s15, [r5, #76]	; 0x4c
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    69c8:	ee17 0a90 	vmov	r0, s15
    69cc:	47c8      	blx	r9
    69ce:	47c0      	blx	r8
    69d0:	47b8      	blx	r7
    69d2:	64e8      	str	r0, [r5, #76]	; 0x4c
			sensor_row->force_x_bottom = calibration_function(parameters_array->sensor_bottomLeft[0][0],parameters_array->sensor_bottomLeft[1][0],parameters_array->sensor_bottomLeft[2][0],parameters_array->sensor_bottomLeft[3][0],parameters_array->sensor_bottomLeft[4][0],parameters_array->sensor_bottomLeft[5][0],parameters_array->sensor_bottomLeft[6][0],parameters_array->sensor_bottomLeft[7][0],parameters_array->sensor_bottomLeft[8][0],parameters_array->sensor_bottomLeft[9][0],parameters_array->sensor_bottomLeft[10][0],
    69d4:	69ab      	ldr	r3, [r5, #24]
    69d6:	9312      	str	r3, [sp, #72]	; 0x48
    69d8:	68eb      	ldr	r3, [r5, #12]
    69da:	9311      	str	r3, [sp, #68]	; 0x44
    69dc:	682b      	ldr	r3, [r5, #0]
    69de:	9310      	str	r3, [sp, #64]	; 0x40
    69e0:	e008      	b.n	69f4 <mag_to_force+0x354>
    69e2:	bf00      	nop
    69e4:	000064c9 	.word	0x000064c9
    69e8:	0000991d 	.word	0x0000991d
    69ec:	00009315 	.word	0x00009315
    69f0:	00008145 	.word	0x00008145
    69f4:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
    69f8:	930f      	str	r3, [sp, #60]	; 0x3c
    69fa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
    69fe:	930e      	str	r3, [sp, #56]	; 0x38
    6a00:	f8d4 32ac 	ldr.w	r3, [r4, #684]	; 0x2ac
    6a04:	930d      	str	r3, [sp, #52]	; 0x34
    6a06:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
    6a0a:	930c      	str	r3, [sp, #48]	; 0x30
    6a0c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    6a10:	930b      	str	r3, [sp, #44]	; 0x2c
    6a12:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
    6a16:	930a      	str	r3, [sp, #40]	; 0x28
    6a18:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    6a1c:	9309      	str	r3, [sp, #36]	; 0x24
    6a1e:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
    6a22:	9308      	str	r3, [sp, #32]
    6a24:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
    6a28:	9307      	str	r3, [sp, #28]
    6a2a:	f8d4 3258 	ldr.w	r3, [r4, #600]	; 0x258
    6a2e:	9306      	str	r3, [sp, #24]
    6a30:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
    6a34:	9305      	str	r3, [sp, #20]
    6a36:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
    6a3a:	9304      	str	r3, [sp, #16]
    6a3c:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
    6a40:	9303      	str	r3, [sp, #12]
    6a42:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
    6a46:	9302      	str	r3, [sp, #8]
    6a48:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    6a4c:	9301      	str	r3, [sp, #4]
    6a4e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    6a52:	9300      	str	r3, [sp, #0]
    6a54:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    6a58:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    6a5c:	f8d4 11ec 	ldr.w	r1, [r4, #492]	; 0x1ec
    6a60:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    6a64:	47b0      	blx	r6
    6a66:	62e8      	str	r0, [r5, #44]	; 0x2c
			sensor_row->force_y_bottom = calibration_function(parameters_array->sensor_bottomLeft[0][1],parameters_array->sensor_bottomLeft[1][1],parameters_array->sensor_bottomLeft[2][1],parameters_array->sensor_bottomLeft[3][1],parameters_array->sensor_bottomLeft[4][1],parameters_array->sensor_bottomLeft[5][1],parameters_array->sensor_bottomLeft[6][1],parameters_array->sensor_bottomLeft[7][1],parameters_array->sensor_bottomLeft[8][1],parameters_array->sensor_bottomLeft[9][1],parameters_array->sensor_bottomLeft[10][1],
    6a68:	69ab      	ldr	r3, [r5, #24]
    6a6a:	9312      	str	r3, [sp, #72]	; 0x48
    6a6c:	68eb      	ldr	r3, [r5, #12]
    6a6e:	9311      	str	r3, [sp, #68]	; 0x44
    6a70:	682b      	ldr	r3, [r5, #0]
    6a72:	9310      	str	r3, [sp, #64]	; 0x40
    6a74:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
    6a78:	930f      	str	r3, [sp, #60]	; 0x3c
    6a7a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    6a7e:	930e      	str	r3, [sp, #56]	; 0x38
    6a80:	f8d4 32b0 	ldr.w	r3, [r4, #688]	; 0x2b0
    6a84:	930d      	str	r3, [sp, #52]	; 0x34
    6a86:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
    6a8a:	930c      	str	r3, [sp, #48]	; 0x30
    6a8c:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    6a90:	930b      	str	r3, [sp, #44]	; 0x2c
    6a92:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
    6a96:	930a      	str	r3, [sp, #40]	; 0x28
    6a98:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    6a9c:	9309      	str	r3, [sp, #36]	; 0x24
    6a9e:	f8d4 3274 	ldr.w	r3, [r4, #628]	; 0x274
    6aa2:	9308      	str	r3, [sp, #32]
    6aa4:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
    6aa8:	9307      	str	r3, [sp, #28]
    6aaa:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
    6aae:	9306      	str	r3, [sp, #24]
    6ab0:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    6ab4:	9305      	str	r3, [sp, #20]
    6ab6:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    6aba:	9304      	str	r3, [sp, #16]
    6abc:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    6ac0:	9303      	str	r3, [sp, #12]
    6ac2:	f8d4 322c 	ldr.w	r3, [r4, #556]	; 0x22c
    6ac6:	9302      	str	r3, [sp, #8]
    6ac8:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    6acc:	9301      	str	r3, [sp, #4]
    6ace:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
    6ad2:	9300      	str	r3, [sp, #0]
    6ad4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    6ad8:	f8d4 21fc 	ldr.w	r2, [r4, #508]	; 0x1fc
    6adc:	f8d4 11f0 	ldr.w	r1, [r4, #496]	; 0x1f0
    6ae0:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    6ae4:	47b0      	blx	r6
    6ae6:	63a8      	str	r0, [r5, #56]	; 0x38
			sensor_row->force_z_bottom = calibration_function(parameters_array->sensor_bottomLeft[0][2],parameters_array->sensor_bottomLeft[1][2],parameters_array->sensor_bottomLeft[2][2],parameters_array->sensor_bottomLeft[3][2],parameters_array->sensor_bottomLeft[4][2],parameters_array->sensor_bottomLeft[5][2],parameters_array->sensor_bottomLeft[6][2],parameters_array->sensor_bottomLeft[7][2],parameters_array->sensor_bottomLeft[8][2],parameters_array->sensor_bottomLeft[9][2],parameters_array->sensor_bottomLeft[10][2],
    6ae8:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
    6aec:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    6af0:	f8d4 11f4 	ldr.w	r1, [r4, #500]	; 0x1f4
    6af4:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
    6af8:	f8d5 e018 	ldr.w	lr, [r5, #24]
    6afc:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    6b00:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    6b04:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    6b08:	f8d5 e000 	ldr.w	lr, [r5]
    6b0c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    6b10:	f8d4 e2cc 	ldr.w	lr, [r4, #716]	; 0x2cc
    6b14:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    6b18:	f8d4 e2c0 	ldr.w	lr, [r4, #704]	; 0x2c0
    6b1c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    6b20:	f8d4 e2b4 	ldr.w	lr, [r4, #692]	; 0x2b4
    6b24:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    6b28:	f8d4 e2a8 	ldr.w	lr, [r4, #680]	; 0x2a8
    6b2c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    6b30:	f8d4 e29c 	ldr.w	lr, [r4, #668]	; 0x29c
    6b34:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    6b38:	f8d4 e290 	ldr.w	lr, [r4, #656]	; 0x290
    6b3c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    6b40:	f8d4 e284 	ldr.w	lr, [r4, #644]	; 0x284
    6b44:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    6b48:	f8d4 e278 	ldr.w	lr, [r4, #632]	; 0x278
    6b4c:	f8cd e020 	str.w	lr, [sp, #32]
    6b50:	f8d4 e26c 	ldr.w	lr, [r4, #620]	; 0x26c
    6b54:	f8cd e01c 	str.w	lr, [sp, #28]
    6b58:	f8d4 e260 	ldr.w	lr, [r4, #608]	; 0x260
    6b5c:	f8cd e018 	str.w	lr, [sp, #24]
    6b60:	f8d4 e254 	ldr.w	lr, [r4, #596]	; 0x254
    6b64:	f8cd e014 	str.w	lr, [sp, #20]
    6b68:	f8d4 e248 	ldr.w	lr, [r4, #584]	; 0x248
    6b6c:	f8cd e010 	str.w	lr, [sp, #16]
    6b70:	f8d4 e23c 	ldr.w	lr, [r4, #572]	; 0x23c
    6b74:	f8cd e00c 	str.w	lr, [sp, #12]
    6b78:	f8d4 e230 	ldr.w	lr, [r4, #560]	; 0x230
    6b7c:	f8cd e008 	str.w	lr, [sp, #8]
    6b80:	f8d4 e224 	ldr.w	lr, [r4, #548]	; 0x224
    6b84:	f8cd e004 	str.w	lr, [sp, #4]
    6b88:	f8d4 4218 	ldr.w	r4, [r4, #536]	; 0x218
    6b8c:	9400      	str	r4, [sp, #0]
    6b8e:	47b0      	blx	r6
    6b90:	6468      	str	r0, [r5, #68]	; 0x44
			sensor_row->force_r_bottom = (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    6b92:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
    6b96:	ee67 7aa7 	vmul.f32	s15, s15, s15
    6b9a:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
    6b9e:	ee27 7a07 	vmul.f32	s14, s14, s14
    6ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
    6ba6:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    6baa:	ee17 0a90 	vmov	r0, s15
    6bae:	47c8      	blx	r9
    6bb0:	47c0      	blx	r8
    6bb2:	47b8      	blx	r7
    6bb4:	6528      	str	r0, [r5, #80]	; 0x50
		break;
    6bb6:	e580      	b.n	66ba <mag_to_force+0x1a>
			sensor_row->force_x_top = calibration_function(parameters_array->sensor_topMiddle[0][0],parameters_array->sensor_topMiddle[1][0],parameters_array->sensor_topMiddle[2][0],parameters_array->sensor_topMiddle[3][0],parameters_array->sensor_topMiddle[4][0],parameters_array->sensor_topMiddle[5][0],parameters_array->sensor_topMiddle[6][0],parameters_array->sensor_topMiddle[7][0],parameters_array->sensor_topMiddle[8][0],parameters_array->sensor_topMiddle[9][0],parameters_array->sensor_topMiddle[10][0],
    6bb8:	698b      	ldr	r3, [r1, #24]
    6bba:	9312      	str	r3, [sp, #72]	; 0x48
    6bbc:	68cb      	ldr	r3, [r1, #12]
    6bbe:	9311      	str	r3, [sp, #68]	; 0x44
    6bc0:	680b      	ldr	r3, [r1, #0]
    6bc2:	9310      	str	r3, [sp, #64]	; 0x40
    6bc4:	f8d2 33b4 	ldr.w	r3, [r2, #948]	; 0x3b4
    6bc8:	930f      	str	r3, [sp, #60]	; 0x3c
    6bca:	f8d2 33a8 	ldr.w	r3, [r2, #936]	; 0x3a8
    6bce:	930e      	str	r3, [sp, #56]	; 0x38
    6bd0:	f8d2 339c 	ldr.w	r3, [r2, #924]	; 0x39c
    6bd4:	930d      	str	r3, [sp, #52]	; 0x34
    6bd6:	f8d2 3390 	ldr.w	r3, [r2, #912]	; 0x390
    6bda:	930c      	str	r3, [sp, #48]	; 0x30
    6bdc:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
    6be0:	930b      	str	r3, [sp, #44]	; 0x2c
    6be2:	f8d2 3378 	ldr.w	r3, [r2, #888]	; 0x378
    6be6:	930a      	str	r3, [sp, #40]	; 0x28
    6be8:	f8d2 336c 	ldr.w	r3, [r2, #876]	; 0x36c
    6bec:	9309      	str	r3, [sp, #36]	; 0x24
    6bee:	f8d2 3360 	ldr.w	r3, [r2, #864]	; 0x360
    6bf2:	9308      	str	r3, [sp, #32]
    6bf4:	f8d2 3354 	ldr.w	r3, [r2, #852]	; 0x354
    6bf8:	9307      	str	r3, [sp, #28]
    6bfa:	f8d2 3348 	ldr.w	r3, [r2, #840]	; 0x348
    6bfe:	9306      	str	r3, [sp, #24]
    6c00:	f8d2 333c 	ldr.w	r3, [r2, #828]	; 0x33c
    6c04:	9305      	str	r3, [sp, #20]
    6c06:	f8d2 3330 	ldr.w	r3, [r2, #816]	; 0x330
    6c0a:	9304      	str	r3, [sp, #16]
    6c0c:	f8d2 3324 	ldr.w	r3, [r2, #804]	; 0x324
    6c10:	9303      	str	r3, [sp, #12]
    6c12:	f8d2 3318 	ldr.w	r3, [r2, #792]	; 0x318
    6c16:	9302      	str	r3, [sp, #8]
    6c18:	f8d2 330c 	ldr.w	r3, [r2, #780]	; 0x30c
    6c1c:	9301      	str	r3, [sp, #4]
    6c1e:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    6c22:	9300      	str	r3, [sp, #0]
    6c24:	f8d2 32f4 	ldr.w	r3, [r2, #756]	; 0x2f4
    6c28:	f8d2 22e8 	ldr.w	r2, [r2, #744]	; 0x2e8
    6c2c:	f8d4 12dc 	ldr.w	r1, [r4, #732]	; 0x2dc
    6c30:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    6c34:	4eb0      	ldr	r6, [pc, #704]	; (6ef8 <mag_to_force+0x858>)
    6c36:	47b0      	blx	r6
    6c38:	6268      	str	r0, [r5, #36]	; 0x24
			sensor_row->force_y_top = calibration_function(parameters_array->sensor_topMiddle[0][1],parameters_array->sensor_topMiddle[1][1],parameters_array->sensor_topMiddle[2][1],parameters_array->sensor_topMiddle[3][1],parameters_array->sensor_topMiddle[4][1],parameters_array->sensor_topMiddle[5][1],parameters_array->sensor_topMiddle[6][1],parameters_array->sensor_topMiddle[7][1],parameters_array->sensor_topMiddle[8][1],parameters_array->sensor_topMiddle[9][1],parameters_array->sensor_topMiddle[10][1],
    6c3a:	69ab      	ldr	r3, [r5, #24]
    6c3c:	9312      	str	r3, [sp, #72]	; 0x48
    6c3e:	68eb      	ldr	r3, [r5, #12]
    6c40:	9311      	str	r3, [sp, #68]	; 0x44
    6c42:	682b      	ldr	r3, [r5, #0]
    6c44:	9310      	str	r3, [sp, #64]	; 0x40
    6c46:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
    6c4a:	930f      	str	r3, [sp, #60]	; 0x3c
    6c4c:	f8d4 33ac 	ldr.w	r3, [r4, #940]	; 0x3ac
    6c50:	930e      	str	r3, [sp, #56]	; 0x38
    6c52:	f8d4 33a0 	ldr.w	r3, [r4, #928]	; 0x3a0
    6c56:	930d      	str	r3, [sp, #52]	; 0x34
    6c58:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
    6c5c:	930c      	str	r3, [sp, #48]	; 0x30
    6c5e:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
    6c62:	930b      	str	r3, [sp, #44]	; 0x2c
    6c64:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
    6c68:	930a      	str	r3, [sp, #40]	; 0x28
    6c6a:	f8d4 3370 	ldr.w	r3, [r4, #880]	; 0x370
    6c6e:	9309      	str	r3, [sp, #36]	; 0x24
    6c70:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
    6c74:	9308      	str	r3, [sp, #32]
    6c76:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    6c7a:	9307      	str	r3, [sp, #28]
    6c7c:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
    6c80:	9306      	str	r3, [sp, #24]
    6c82:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    6c86:	9305      	str	r3, [sp, #20]
    6c88:	f8d4 3334 	ldr.w	r3, [r4, #820]	; 0x334
    6c8c:	9304      	str	r3, [sp, #16]
    6c8e:	f8d4 3328 	ldr.w	r3, [r4, #808]	; 0x328
    6c92:	9303      	str	r3, [sp, #12]
    6c94:	f8d4 331c 	ldr.w	r3, [r4, #796]	; 0x31c
    6c98:	9302      	str	r3, [sp, #8]
    6c9a:	f8d4 3310 	ldr.w	r3, [r4, #784]	; 0x310
    6c9e:	9301      	str	r3, [sp, #4]
    6ca0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6ca4:	9300      	str	r3, [sp, #0]
    6ca6:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    6caa:	f8d4 22ec 	ldr.w	r2, [r4, #748]	; 0x2ec
    6cae:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
    6cb2:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    6cb6:	47b0      	blx	r6
    6cb8:	6328      	str	r0, [r5, #48]	; 0x30
			sensor_row->force_z_top = calibration_function(parameters_array->sensor_topMiddle[0][2],parameters_array->sensor_topMiddle[1][2],parameters_array->sensor_topMiddle[2][2],parameters_array->sensor_topMiddle[3][2],parameters_array->sensor_topMiddle[4][2],parameters_array->sensor_topMiddle[5][2],parameters_array->sensor_topMiddle[6][2],parameters_array->sensor_topMiddle[7][2],parameters_array->sensor_topMiddle[8][2],parameters_array->sensor_topMiddle[9][2],parameters_array->sensor_topMiddle[10][2],
    6cba:	69ab      	ldr	r3, [r5, #24]
    6cbc:	9312      	str	r3, [sp, #72]	; 0x48
    6cbe:	68eb      	ldr	r3, [r5, #12]
    6cc0:	9311      	str	r3, [sp, #68]	; 0x44
    6cc2:	682b      	ldr	r3, [r5, #0]
    6cc4:	9310      	str	r3, [sp, #64]	; 0x40
    6cc6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
    6cca:	930f      	str	r3, [sp, #60]	; 0x3c
    6ccc:	f8d4 33b0 	ldr.w	r3, [r4, #944]	; 0x3b0
    6cd0:	930e      	str	r3, [sp, #56]	; 0x38
    6cd2:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
    6cd6:	930d      	str	r3, [sp, #52]	; 0x34
    6cd8:	f8d4 3398 	ldr.w	r3, [r4, #920]	; 0x398
    6cdc:	930c      	str	r3, [sp, #48]	; 0x30
    6cde:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
    6ce2:	930b      	str	r3, [sp, #44]	; 0x2c
    6ce4:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
    6ce8:	930a      	str	r3, [sp, #40]	; 0x28
    6cea:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
    6cee:	9309      	str	r3, [sp, #36]	; 0x24
    6cf0:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    6cf4:	9308      	str	r3, [sp, #32]
    6cf6:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    6cfa:	9307      	str	r3, [sp, #28]
    6cfc:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
    6d00:	9306      	str	r3, [sp, #24]
    6d02:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    6d06:	9305      	str	r3, [sp, #20]
    6d08:	f8d4 3338 	ldr.w	r3, [r4, #824]	; 0x338
    6d0c:	9304      	str	r3, [sp, #16]
    6d0e:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
    6d12:	9303      	str	r3, [sp, #12]
    6d14:	f8d4 3320 	ldr.w	r3, [r4, #800]	; 0x320
    6d18:	9302      	str	r3, [sp, #8]
    6d1a:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
    6d1e:	9301      	str	r3, [sp, #4]
    6d20:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    6d24:	9300      	str	r3, [sp, #0]
    6d26:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
    6d2a:	f8d4 22f0 	ldr.w	r2, [r4, #752]	; 0x2f0
    6d2e:	f8d4 12e4 	ldr.w	r1, [r4, #740]	; 0x2e4
    6d32:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
    6d36:	47b0      	blx	r6
    6d38:	63e8      	str	r0, [r5, #60]	; 0x3c
			sensor_row->force_r_top = (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    6d3a:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
    6d3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    6d42:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
    6d46:	ee27 7a07 	vmul.f32	s14, s14, s14
    6d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
    6d4e:	edc5 7a12 	vstr	s15, [r5, #72]	; 0x48
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    6d52:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 6f00 <mag_to_force+0x860>
    6d56:	ee17 0a90 	vmov	r0, s15
    6d5a:	47c8      	blx	r9
    6d5c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 6f04 <mag_to_force+0x864>
    6d60:	47c0      	blx	r8
    6d62:	4f66      	ldr	r7, [pc, #408]	; (6efc <mag_to_force+0x85c>)
    6d64:	47b8      	blx	r7
    6d66:	64a8      	str	r0, [r5, #72]	; 0x48
			sensor_row->force_x_middle = calibration_function(parameters_array->sensor_middleMiddle[0][0],parameters_array->sensor_middleMiddle[1][0],parameters_array->sensor_middleMiddle[2][0],parameters_array->sensor_middleMiddle[3][0],parameters_array->sensor_middleMiddle[4][0],parameters_array->sensor_middleMiddle[5][0],parameters_array->sensor_middleMiddle[6][0],parameters_array->sensor_middleMiddle[7][0],parameters_array->sensor_middleMiddle[8][0],parameters_array->sensor_middleMiddle[9][0],parameters_array->sensor_middleMiddle[10][0],
    6d68:	69ab      	ldr	r3, [r5, #24]
    6d6a:	9312      	str	r3, [sp, #72]	; 0x48
    6d6c:	68eb      	ldr	r3, [r5, #12]
    6d6e:	9311      	str	r3, [sp, #68]	; 0x44
    6d70:	682b      	ldr	r3, [r5, #0]
    6d72:	9310      	str	r3, [sp, #64]	; 0x40
    6d74:	f204 43a4 	addw	r3, r4, #1188	; 0x4a4
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	930f      	str	r3, [sp, #60]	; 0x3c
    6d7c:	f504 6393 	add.w	r3, r4, #1176	; 0x498
    6d80:	681b      	ldr	r3, [r3, #0]
    6d82:	930e      	str	r3, [sp, #56]	; 0x38
    6d84:	f204 438c 	addw	r3, r4, #1164	; 0x48c
    6d88:	681b      	ldr	r3, [r3, #0]
    6d8a:	930d      	str	r3, [sp, #52]	; 0x34
    6d8c:	f504 6390 	add.w	r3, r4, #1152	; 0x480
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	930c      	str	r3, [sp, #48]	; 0x30
    6d94:	f204 4374 	addw	r3, r4, #1140	; 0x474
    6d98:	681b      	ldr	r3, [r3, #0]
    6d9a:	930b      	str	r3, [sp, #44]	; 0x2c
    6d9c:	f504 638d 	add.w	r3, r4, #1128	; 0x468
    6da0:	681b      	ldr	r3, [r3, #0]
    6da2:	930a      	str	r3, [sp, #40]	; 0x28
    6da4:	f204 435c 	addw	r3, r4, #1116	; 0x45c
    6da8:	681b      	ldr	r3, [r3, #0]
    6daa:	9309      	str	r3, [sp, #36]	; 0x24
    6dac:	f504 638a 	add.w	r3, r4, #1104	; 0x450
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	9308      	str	r3, [sp, #32]
    6db4:	f204 4344 	addw	r3, r4, #1092	; 0x444
    6db8:	681b      	ldr	r3, [r3, #0]
    6dba:	9307      	str	r3, [sp, #28]
    6dbc:	f504 6387 	add.w	r3, r4, #1080	; 0x438
    6dc0:	681b      	ldr	r3, [r3, #0]
    6dc2:	9306      	str	r3, [sp, #24]
    6dc4:	f204 432c 	addw	r3, r4, #1068	; 0x42c
    6dc8:	681b      	ldr	r3, [r3, #0]
    6dca:	9305      	str	r3, [sp, #20]
    6dcc:	f504 6384 	add.w	r3, r4, #1056	; 0x420
    6dd0:	681b      	ldr	r3, [r3, #0]
    6dd2:	9304      	str	r3, [sp, #16]
    6dd4:	f204 4314 	addw	r3, r4, #1044	; 0x414
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	9303      	str	r3, [sp, #12]
    6ddc:	f504 6381 	add.w	r3, r4, #1032	; 0x408
    6de0:	681b      	ldr	r3, [r3, #0]
    6de2:	9302      	str	r3, [sp, #8]
    6de4:	f8d4 33fc 	ldr.w	r3, [r4, #1020]	; 0x3fc
    6de8:	9301      	str	r3, [sp, #4]
    6dea:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    6dee:	9300      	str	r3, [sp, #0]
    6df0:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
    6df4:	f8d4 23d8 	ldr.w	r2, [r4, #984]	; 0x3d8
    6df8:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
    6dfc:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
    6e00:	47b0      	blx	r6
    6e02:	62a8      	str	r0, [r5, #40]	; 0x28
			sensor_row->force_y_middle = calibration_function(parameters_array->sensor_middleMiddle[0][1],parameters_array->sensor_middleMiddle[1][1],parameters_array->sensor_middleMiddle[2][1],parameters_array->sensor_middleMiddle[3][1],parameters_array->sensor_middleMiddle[4][1],parameters_array->sensor_middleMiddle[5][1],parameters_array->sensor_middleMiddle[6][1],parameters_array->sensor_middleMiddle[7][1],parameters_array->sensor_middleMiddle[8][1],parameters_array->sensor_middleMiddle[9][1],parameters_array->sensor_middleMiddle[10][1],
    6e04:	69ab      	ldr	r3, [r5, #24]
    6e06:	9312      	str	r3, [sp, #72]	; 0x48
    6e08:	68eb      	ldr	r3, [r5, #12]
    6e0a:	9311      	str	r3, [sp, #68]	; 0x44
    6e0c:	682b      	ldr	r3, [r5, #0]
    6e0e:	9310      	str	r3, [sp, #64]	; 0x40
    6e10:	f504 6395 	add.w	r3, r4, #1192	; 0x4a8
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	930f      	str	r3, [sp, #60]	; 0x3c
    6e18:	f204 439c 	addw	r3, r4, #1180	; 0x49c
    6e1c:	681b      	ldr	r3, [r3, #0]
    6e1e:	930e      	str	r3, [sp, #56]	; 0x38
    6e20:	f504 6392 	add.w	r3, r4, #1168	; 0x490
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	930d      	str	r3, [sp, #52]	; 0x34
    6e28:	f204 4384 	addw	r3, r4, #1156	; 0x484
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	930c      	str	r3, [sp, #48]	; 0x30
    6e30:	f504 638f 	add.w	r3, r4, #1144	; 0x478
    6e34:	681b      	ldr	r3, [r3, #0]
    6e36:	930b      	str	r3, [sp, #44]	; 0x2c
    6e38:	f204 436c 	addw	r3, r4, #1132	; 0x46c
    6e3c:	681b      	ldr	r3, [r3, #0]
    6e3e:	930a      	str	r3, [sp, #40]	; 0x28
    6e40:	f504 638c 	add.w	r3, r4, #1120	; 0x460
    6e44:	681b      	ldr	r3, [r3, #0]
    6e46:	9309      	str	r3, [sp, #36]	; 0x24
    6e48:	f204 4354 	addw	r3, r4, #1108	; 0x454
    6e4c:	681b      	ldr	r3, [r3, #0]
    6e4e:	9308      	str	r3, [sp, #32]
    6e50:	f504 6389 	add.w	r3, r4, #1096	; 0x448
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	9307      	str	r3, [sp, #28]
    6e58:	f204 433c 	addw	r3, r4, #1084	; 0x43c
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	9306      	str	r3, [sp, #24]
    6e60:	f504 6386 	add.w	r3, r4, #1072	; 0x430
    6e64:	681b      	ldr	r3, [r3, #0]
    6e66:	9305      	str	r3, [sp, #20]
    6e68:	f204 4324 	addw	r3, r4, #1060	; 0x424
    6e6c:	681b      	ldr	r3, [r3, #0]
    6e6e:	9304      	str	r3, [sp, #16]
    6e70:	f504 6383 	add.w	r3, r4, #1048	; 0x418
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	9303      	str	r3, [sp, #12]
    6e78:	f204 430c 	addw	r3, r4, #1036	; 0x40c
    6e7c:	681b      	ldr	r3, [r3, #0]
    6e7e:	9302      	str	r3, [sp, #8]
    6e80:	f504 6380 	add.w	r3, r4, #1024	; 0x400
    6e84:	681b      	ldr	r3, [r3, #0]
    6e86:	9301      	str	r3, [sp, #4]
    6e88:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
    6e8c:	9300      	str	r3, [sp, #0]
    6e8e:	f8d4 33e8 	ldr.w	r3, [r4, #1000]	; 0x3e8
    6e92:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    6e96:	f8d4 13d0 	ldr.w	r1, [r4, #976]	; 0x3d0
    6e9a:	f8d4 03c4 	ldr.w	r0, [r4, #964]	; 0x3c4
    6e9e:	47b0      	blx	r6
    6ea0:	6368      	str	r0, [r5, #52]	; 0x34
			sensor_row->force_z_middle = calibration_function(parameters_array->sensor_middleMiddle[0][2],parameters_array->sensor_middleMiddle[1][2],parameters_array->sensor_middleMiddle[2][2],parameters_array->sensor_middleMiddle[3][2],parameters_array->sensor_middleMiddle[4][2],parameters_array->sensor_middleMiddle[5][2],parameters_array->sensor_middleMiddle[6][2],parameters_array->sensor_middleMiddle[7][2],parameters_array->sensor_middleMiddle[8][2],parameters_array->sensor_middleMiddle[9][2],parameters_array->sensor_middleMiddle[10][2],
    6ea2:	69ab      	ldr	r3, [r5, #24]
    6ea4:	9312      	str	r3, [sp, #72]	; 0x48
    6ea6:	68eb      	ldr	r3, [r5, #12]
    6ea8:	9311      	str	r3, [sp, #68]	; 0x44
    6eaa:	682b      	ldr	r3, [r5, #0]
    6eac:	9310      	str	r3, [sp, #64]	; 0x40
    6eae:	f204 43ac 	addw	r3, r4, #1196	; 0x4ac
    6eb2:	681b      	ldr	r3, [r3, #0]
    6eb4:	930f      	str	r3, [sp, #60]	; 0x3c
    6eb6:	f504 6394 	add.w	r3, r4, #1184	; 0x4a0
    6eba:	681b      	ldr	r3, [r3, #0]
    6ebc:	930e      	str	r3, [sp, #56]	; 0x38
    6ebe:	f204 4394 	addw	r3, r4, #1172	; 0x494
    6ec2:	681b      	ldr	r3, [r3, #0]
    6ec4:	930d      	str	r3, [sp, #52]	; 0x34
    6ec6:	f504 6391 	add.w	r3, r4, #1160	; 0x488
    6eca:	681b      	ldr	r3, [r3, #0]
    6ecc:	930c      	str	r3, [sp, #48]	; 0x30
    6ece:	f204 437c 	addw	r3, r4, #1148	; 0x47c
    6ed2:	681b      	ldr	r3, [r3, #0]
    6ed4:	930b      	str	r3, [sp, #44]	; 0x2c
    6ed6:	f504 638e 	add.w	r3, r4, #1136	; 0x470
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	930a      	str	r3, [sp, #40]	; 0x28
    6ede:	f204 4364 	addw	r3, r4, #1124	; 0x464
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	9309      	str	r3, [sp, #36]	; 0x24
    6ee6:	f504 638b 	add.w	r3, r4, #1112	; 0x458
    6eea:	681b      	ldr	r3, [r3, #0]
    6eec:	9308      	str	r3, [sp, #32]
    6eee:	f204 434c 	addw	r3, r4, #1100	; 0x44c
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	e008      	b.n	6f08 <mag_to_force+0x868>
    6ef6:	bf00      	nop
    6ef8:	000064c9 	.word	0x000064c9
    6efc:	0000991d 	.word	0x0000991d
    6f00:	00009315 	.word	0x00009315
    6f04:	00008145 	.word	0x00008145
    6f08:	9307      	str	r3, [sp, #28]
    6f0a:	f504 6388 	add.w	r3, r4, #1088	; 0x440
    6f0e:	681b      	ldr	r3, [r3, #0]
    6f10:	9306      	str	r3, [sp, #24]
    6f12:	f204 4334 	addw	r3, r4, #1076	; 0x434
    6f16:	681b      	ldr	r3, [r3, #0]
    6f18:	9305      	str	r3, [sp, #20]
    6f1a:	f504 6385 	add.w	r3, r4, #1064	; 0x428
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	9304      	str	r3, [sp, #16]
    6f22:	f204 431c 	addw	r3, r4, #1052	; 0x41c
    6f26:	681b      	ldr	r3, [r3, #0]
    6f28:	9303      	str	r3, [sp, #12]
    6f2a:	f504 6382 	add.w	r3, r4, #1040	; 0x410
    6f2e:	681b      	ldr	r3, [r3, #0]
    6f30:	9302      	str	r3, [sp, #8]
    6f32:	f204 4304 	addw	r3, r4, #1028	; 0x404
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	9301      	str	r3, [sp, #4]
    6f3a:	f8d4 33f8 	ldr.w	r3, [r4, #1016]	; 0x3f8
    6f3e:	9300      	str	r3, [sp, #0]
    6f40:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	; 0x3ec
    6f44:	f8d4 23e0 	ldr.w	r2, [r4, #992]	; 0x3e0
    6f48:	f8d4 13d4 	ldr.w	r1, [r4, #980]	; 0x3d4
    6f4c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
    6f50:	47b0      	blx	r6
    6f52:	6428      	str	r0, [r5, #64]	; 0x40
			sensor_row->force_r_middle = (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    6f54:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
    6f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
    6f5c:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
    6f60:	ee27 7a07 	vmul.f32	s14, s14, s14
    6f64:	ee77 7a87 	vadd.f32	s15, s15, s14
    6f68:	edc5 7a13 	vstr	s15, [r5, #76]	; 0x4c
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    6f6c:	ee17 0a90 	vmov	r0, s15
    6f70:	47c8      	blx	r9
    6f72:	47c0      	blx	r8
    6f74:	47b8      	blx	r7
    6f76:	64e8      	str	r0, [r5, #76]	; 0x4c
			sensor_row->force_x_bottom = calibration_function(parameters_array->sensor_bottomMiddle[0][0],parameters_array->sensor_bottomMiddle[1][0],parameters_array->sensor_bottomMiddle[2][0],parameters_array->sensor_bottomMiddle[3][0],parameters_array->sensor_bottomMiddle[4][0],parameters_array->sensor_bottomMiddle[5][0],parameters_array->sensor_bottomMiddle[6][0],parameters_array->sensor_bottomMiddle[7][0],parameters_array->sensor_bottomMiddle[8][0],parameters_array->sensor_bottomMiddle[9][0],parameters_array->sensor_bottomMiddle[10][0],
    6f78:	f204 43d4 	addw	r3, r4, #1236	; 0x4d4
    6f7c:	681b      	ldr	r3, [r3, #0]
    6f7e:	f504 6299 	add.w	r2, r4, #1224	; 0x4c8
    6f82:	6812      	ldr	r2, [r2, #0]
    6f84:	f204 41bc 	addw	r1, r4, #1212	; 0x4bc
    6f88:	6809      	ldr	r1, [r1, #0]
    6f8a:	f504 6096 	add.w	r0, r4, #1200	; 0x4b0
    6f8e:	6800      	ldr	r0, [r0, #0]
    6f90:	f8d5 e018 	ldr.w	lr, [r5, #24]
    6f94:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    6f98:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    6f9c:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    6fa0:	f8d5 e000 	ldr.w	lr, [r5]
    6fa4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    6fa8:	f204 5e94 	addw	lr, r4, #1428	; 0x594
    6fac:	f8de e000 	ldr.w	lr, [lr]
    6fb0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    6fb4:	f504 6eb1 	add.w	lr, r4, #1416	; 0x588
    6fb8:	f8de e000 	ldr.w	lr, [lr]
    6fbc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    6fc0:	f204 5e7c 	addw	lr, r4, #1404	; 0x57c
    6fc4:	f8de e000 	ldr.w	lr, [lr]
    6fc8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    6fcc:	f504 6eae 	add.w	lr, r4, #1392	; 0x570
    6fd0:	f8de e000 	ldr.w	lr, [lr]
    6fd4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    6fd8:	f204 5e64 	addw	lr, r4, #1380	; 0x564
    6fdc:	f8de e000 	ldr.w	lr, [lr]
    6fe0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    6fe4:	f504 6eab 	add.w	lr, r4, #1368	; 0x558
    6fe8:	f8de e000 	ldr.w	lr, [lr]
    6fec:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    6ff0:	f204 5e4c 	addw	lr, r4, #1356	; 0x54c
    6ff4:	f8de e000 	ldr.w	lr, [lr]
    6ff8:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    6ffc:	f504 6ea8 	add.w	lr, r4, #1344	; 0x540
    7000:	f8de e000 	ldr.w	lr, [lr]
    7004:	f8cd e020 	str.w	lr, [sp, #32]
    7008:	f204 5e34 	addw	lr, r4, #1332	; 0x534
    700c:	f8de e000 	ldr.w	lr, [lr]
    7010:	f8cd e01c 	str.w	lr, [sp, #28]
    7014:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    7018:	f8de e000 	ldr.w	lr, [lr]
    701c:	f8cd e018 	str.w	lr, [sp, #24]
    7020:	f204 5e1c 	addw	lr, r4, #1308	; 0x51c
    7024:	f8de e000 	ldr.w	lr, [lr]
    7028:	f8cd e014 	str.w	lr, [sp, #20]
    702c:	f504 6ea2 	add.w	lr, r4, #1296	; 0x510
    7030:	f8de e000 	ldr.w	lr, [lr]
    7034:	f8cd e010 	str.w	lr, [sp, #16]
    7038:	f204 5e04 	addw	lr, r4, #1284	; 0x504
    703c:	f8de e000 	ldr.w	lr, [lr]
    7040:	f8cd e00c 	str.w	lr, [sp, #12]
    7044:	f504 6e9f 	add.w	lr, r4, #1272	; 0x4f8
    7048:	f8de e000 	ldr.w	lr, [lr]
    704c:	f8cd e008 	str.w	lr, [sp, #8]
    7050:	f204 4eec 	addw	lr, r4, #1260	; 0x4ec
    7054:	f8de e000 	ldr.w	lr, [lr]
    7058:	f8cd e004 	str.w	lr, [sp, #4]
    705c:	f504 6e9c 	add.w	lr, r4, #1248	; 0x4e0
    7060:	f8de e000 	ldr.w	lr, [lr]
    7064:	f8cd e000 	str.w	lr, [sp]
    7068:	47b0      	blx	r6
    706a:	62e8      	str	r0, [r5, #44]	; 0x2c
			sensor_row->force_y_bottom = calibration_function(parameters_array->sensor_bottomMiddle[0][1],parameters_array->sensor_bottomMiddle[1][1],parameters_array->sensor_bottomMiddle[2][1],parameters_array->sensor_bottomMiddle[3][1],parameters_array->sensor_bottomMiddle[4][1],parameters_array->sensor_bottomMiddle[5][1],parameters_array->sensor_bottomMiddle[6][1],parameters_array->sensor_bottomMiddle[7][1],parameters_array->sensor_bottomMiddle[8][1],parameters_array->sensor_bottomMiddle[9][1],parameters_array->sensor_bottomMiddle[10][1],
    706c:	f504 639b 	add.w	r3, r4, #1240	; 0x4d8
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
    7076:	6812      	ldr	r2, [r2, #0]
    7078:	f504 6198 	add.w	r1, r4, #1216	; 0x4c0
    707c:	6809      	ldr	r1, [r1, #0]
    707e:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
    7082:	6800      	ldr	r0, [r0, #0]
    7084:	f8d5 e018 	ldr.w	lr, [r5, #24]
    7088:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    708c:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    7090:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    7094:	f8d5 e000 	ldr.w	lr, [r5]
    7098:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    709c:	f504 6eb3 	add.w	lr, r4, #1432	; 0x598
    70a0:	f8de e000 	ldr.w	lr, [lr]
    70a4:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    70a8:	f204 5e8c 	addw	lr, r4, #1420	; 0x58c
    70ac:	f8de e000 	ldr.w	lr, [lr]
    70b0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    70b4:	f504 6eb0 	add.w	lr, r4, #1408	; 0x580
    70b8:	f8de e000 	ldr.w	lr, [lr]
    70bc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    70c0:	f204 5e74 	addw	lr, r4, #1396	; 0x574
    70c4:	f8de e000 	ldr.w	lr, [lr]
    70c8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    70cc:	f504 6ead 	add.w	lr, r4, #1384	; 0x568
    70d0:	f8de e000 	ldr.w	lr, [lr]
    70d4:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    70d8:	f204 5e5c 	addw	lr, r4, #1372	; 0x55c
    70dc:	f8de e000 	ldr.w	lr, [lr]
    70e0:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    70e4:	f504 6eaa 	add.w	lr, r4, #1360	; 0x550
    70e8:	f8de e000 	ldr.w	lr, [lr]
    70ec:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    70f0:	f204 5e44 	addw	lr, r4, #1348	; 0x544
    70f4:	f8de e000 	ldr.w	lr, [lr]
    70f8:	f8cd e020 	str.w	lr, [sp, #32]
    70fc:	f504 6ea7 	add.w	lr, r4, #1336	; 0x538
    7100:	f8de e000 	ldr.w	lr, [lr]
    7104:	f8cd e01c 	str.w	lr, [sp, #28]
    7108:	f204 5e2c 	addw	lr, r4, #1324	; 0x52c
    710c:	f8de e000 	ldr.w	lr, [lr]
    7110:	f8cd e018 	str.w	lr, [sp, #24]
    7114:	f504 6ea4 	add.w	lr, r4, #1312	; 0x520
    7118:	f8de e000 	ldr.w	lr, [lr]
    711c:	f8cd e014 	str.w	lr, [sp, #20]
    7120:	f204 5e14 	addw	lr, r4, #1300	; 0x514
    7124:	f8de e000 	ldr.w	lr, [lr]
    7128:	f8cd e010 	str.w	lr, [sp, #16]
    712c:	f504 6ea1 	add.w	lr, r4, #1288	; 0x508
    7130:	f8de e000 	ldr.w	lr, [lr]
    7134:	f8cd e00c 	str.w	lr, [sp, #12]
    7138:	f204 4efc 	addw	lr, r4, #1276	; 0x4fc
    713c:	f8de e000 	ldr.w	lr, [lr]
    7140:	f8cd e008 	str.w	lr, [sp, #8]
    7144:	f504 6e9e 	add.w	lr, r4, #1264	; 0x4f0
    7148:	f8de e000 	ldr.w	lr, [lr]
    714c:	f8cd e004 	str.w	lr, [sp, #4]
    7150:	f204 4ee4 	addw	lr, r4, #1252	; 0x4e4
    7154:	f8de e000 	ldr.w	lr, [lr]
    7158:	f8cd e000 	str.w	lr, [sp]
    715c:	47b0      	blx	r6
    715e:	63a8      	str	r0, [r5, #56]	; 0x38
			sensor_row->force_z_bottom = calibration_function(parameters_array->sensor_bottomMiddle[0][2],parameters_array->sensor_bottomMiddle[1][2],parameters_array->sensor_bottomMiddle[2][2],parameters_array->sensor_bottomMiddle[3][2],parameters_array->sensor_bottomMiddle[4][2],parameters_array->sensor_bottomMiddle[5][2],parameters_array->sensor_bottomMiddle[6][2],parameters_array->sensor_bottomMiddle[7][2],parameters_array->sensor_bottomMiddle[8][2],parameters_array->sensor_bottomMiddle[9][2],parameters_array->sensor_bottomMiddle[10][2],
    7160:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
    7164:	681b      	ldr	r3, [r3, #0]
    7166:	f504 629a 	add.w	r2, r4, #1232	; 0x4d0
    716a:	6812      	ldr	r2, [r2, #0]
    716c:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
    7170:	6809      	ldr	r1, [r1, #0]
    7172:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
    7176:	6800      	ldr	r0, [r0, #0]
    7178:	f8d5 e018 	ldr.w	lr, [r5, #24]
    717c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    7180:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    7184:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    7188:	f8d5 e000 	ldr.w	lr, [r5]
    718c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    7190:	f204 5e9c 	addw	lr, r4, #1436	; 0x59c
    7194:	f8de e000 	ldr.w	lr, [lr]
    7198:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    719c:	f504 6eb2 	add.w	lr, r4, #1424	; 0x590
    71a0:	f8de e000 	ldr.w	lr, [lr]
    71a4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    71a8:	f204 5e84 	addw	lr, r4, #1412	; 0x584
    71ac:	f8de e000 	ldr.w	lr, [lr]
    71b0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    71b4:	f504 6eaf 	add.w	lr, r4, #1400	; 0x578
    71b8:	f8de e000 	ldr.w	lr, [lr]
    71bc:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    71c0:	f204 5e6c 	addw	lr, r4, #1388	; 0x56c
    71c4:	f8de e000 	ldr.w	lr, [lr]
    71c8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    71cc:	f504 6eac 	add.w	lr, r4, #1376	; 0x560
    71d0:	f8de e000 	ldr.w	lr, [lr]
    71d4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    71d8:	f204 5e54 	addw	lr, r4, #1364	; 0x554
    71dc:	f8de e000 	ldr.w	lr, [lr]
    71e0:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    71e4:	f504 6ea9 	add.w	lr, r4, #1352	; 0x548
    71e8:	f8de e000 	ldr.w	lr, [lr]
    71ec:	f8cd e020 	str.w	lr, [sp, #32]
    71f0:	f204 5e3c 	addw	lr, r4, #1340	; 0x53c
    71f4:	f8de e000 	ldr.w	lr, [lr]
    71f8:	f8cd e01c 	str.w	lr, [sp, #28]
    71fc:	f504 6ea6 	add.w	lr, r4, #1328	; 0x530
    7200:	f8de e000 	ldr.w	lr, [lr]
    7204:	f8cd e018 	str.w	lr, [sp, #24]
    7208:	f204 5e24 	addw	lr, r4, #1316	; 0x524
    720c:	f8de e000 	ldr.w	lr, [lr]
    7210:	f8cd e014 	str.w	lr, [sp, #20]
    7214:	f504 6ea3 	add.w	lr, r4, #1304	; 0x518
    7218:	f8de e000 	ldr.w	lr, [lr]
    721c:	f8cd e010 	str.w	lr, [sp, #16]
    7220:	f204 5e0c 	addw	lr, r4, #1292	; 0x50c
    7224:	f8de e000 	ldr.w	lr, [lr]
    7228:	f8cd e00c 	str.w	lr, [sp, #12]
    722c:	f504 6ea0 	add.w	lr, r4, #1280	; 0x500
    7230:	f8de e000 	ldr.w	lr, [lr]
    7234:	f8cd e008 	str.w	lr, [sp, #8]
    7238:	f204 4ef4 	addw	lr, r4, #1268	; 0x4f4
    723c:	f8de e000 	ldr.w	lr, [lr]
    7240:	f8cd e004 	str.w	lr, [sp, #4]
    7244:	f504 649d 	add.w	r4, r4, #1256	; 0x4e8
    7248:	6824      	ldr	r4, [r4, #0]
    724a:	9400      	str	r4, [sp, #0]
    724c:	47b0      	blx	r6
    724e:	6468      	str	r0, [r5, #68]	; 0x44
			sensor_row->force_r_bottom = (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    7250:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
    7254:	ee67 7aa7 	vmul.f32	s15, s15, s15
    7258:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
    725c:	ee27 7a07 	vmul.f32	s14, s14, s14
    7260:	ee77 7a87 	vadd.f32	s15, s15, s14
    7264:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    7268:	ee17 0a90 	vmov	r0, s15
    726c:	47c8      	blx	r9
    726e:	47c0      	blx	r8
    7270:	47b8      	blx	r7
    7272:	6528      	str	r0, [r5, #80]	; 0x50
		break;
    7274:	f7ff ba21 	b.w	66ba <mag_to_force+0x1a>
			sensor_row->force_x_top = calibration_function(parameters_array->sensor_topRight[0][0],parameters_array->sensor_topRight[1][0],parameters_array->sensor_topRight[2][0],parameters_array->sensor_topRight[3][0],parameters_array->sensor_topRight[4][0],parameters_array->sensor_topRight[5][0],parameters_array->sensor_topRight[6][0],parameters_array->sensor_topRight[7][0],parameters_array->sensor_topRight[8][0],parameters_array->sensor_topRight[9][0],parameters_array->sensor_topRight[10][0],
    7278:	f202 53c4 	addw	r3, r2, #1476	; 0x5c4
    727c:	681b      	ldr	r3, [r3, #0]
    727e:	f502 62b7 	add.w	r2, r2, #1464	; 0x5b8
    7282:	6812      	ldr	r2, [r2, #0]
    7284:	f204 51ac 	addw	r1, r4, #1452	; 0x5ac
    7288:	6809      	ldr	r1, [r1, #0]
    728a:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
    728e:	6800      	ldr	r0, [r0, #0]
    7290:	69ae      	ldr	r6, [r5, #24]
    7292:	9612      	str	r6, [sp, #72]	; 0x48
    7294:	68ee      	ldr	r6, [r5, #12]
    7296:	9611      	str	r6, [sp, #68]	; 0x44
    7298:	682e      	ldr	r6, [r5, #0]
    729a:	9610      	str	r6, [sp, #64]	; 0x40
    729c:	f204 6684 	addw	r6, r4, #1668	; 0x684
    72a0:	6836      	ldr	r6, [r6, #0]
    72a2:	960f      	str	r6, [sp, #60]	; 0x3c
    72a4:	f504 66cf 	add.w	r6, r4, #1656	; 0x678
    72a8:	6836      	ldr	r6, [r6, #0]
    72aa:	960e      	str	r6, [sp, #56]	; 0x38
    72ac:	f204 666c 	addw	r6, r4, #1644	; 0x66c
    72b0:	6836      	ldr	r6, [r6, #0]
    72b2:	960d      	str	r6, [sp, #52]	; 0x34
    72b4:	f504 66cc 	add.w	r6, r4, #1632	; 0x660
    72b8:	6836      	ldr	r6, [r6, #0]
    72ba:	960c      	str	r6, [sp, #48]	; 0x30
    72bc:	f204 6654 	addw	r6, r4, #1620	; 0x654
    72c0:	6836      	ldr	r6, [r6, #0]
    72c2:	960b      	str	r6, [sp, #44]	; 0x2c
    72c4:	f504 66c9 	add.w	r6, r4, #1608	; 0x648
    72c8:	6836      	ldr	r6, [r6, #0]
    72ca:	960a      	str	r6, [sp, #40]	; 0x28
    72cc:	f204 663c 	addw	r6, r4, #1596	; 0x63c
    72d0:	6836      	ldr	r6, [r6, #0]
    72d2:	9609      	str	r6, [sp, #36]	; 0x24
    72d4:	f504 66c6 	add.w	r6, r4, #1584	; 0x630
    72d8:	6836      	ldr	r6, [r6, #0]
    72da:	9608      	str	r6, [sp, #32]
    72dc:	f204 6624 	addw	r6, r4, #1572	; 0x624
    72e0:	6836      	ldr	r6, [r6, #0]
    72e2:	9607      	str	r6, [sp, #28]
    72e4:	f504 66c3 	add.w	r6, r4, #1560	; 0x618
    72e8:	6836      	ldr	r6, [r6, #0]
    72ea:	9606      	str	r6, [sp, #24]
    72ec:	f204 660c 	addw	r6, r4, #1548	; 0x60c
    72f0:	6836      	ldr	r6, [r6, #0]
    72f2:	9605      	str	r6, [sp, #20]
    72f4:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
    72f8:	6836      	ldr	r6, [r6, #0]
    72fa:	9604      	str	r6, [sp, #16]
    72fc:	f204 56f4 	addw	r6, r4, #1524	; 0x5f4
    7300:	6836      	ldr	r6, [r6, #0]
    7302:	9603      	str	r6, [sp, #12]
    7304:	f504 66bd 	add.w	r6, r4, #1512	; 0x5e8
    7308:	6836      	ldr	r6, [r6, #0]
    730a:	9602      	str	r6, [sp, #8]
    730c:	f204 56dc 	addw	r6, r4, #1500	; 0x5dc
    7310:	6836      	ldr	r6, [r6, #0]
    7312:	9601      	str	r6, [sp, #4]
    7314:	f504 66ba 	add.w	r6, r4, #1488	; 0x5d0
    7318:	6836      	ldr	r6, [r6, #0]
    731a:	9600      	str	r6, [sp, #0]
    731c:	4ec9      	ldr	r6, [pc, #804]	; (7644 <mag_to_force+0xfa4>)
    731e:	47b0      	blx	r6
    7320:	6268      	str	r0, [r5, #36]	; 0x24
			sensor_row->force_y_top = calibration_function(parameters_array->sensor_topRight[0][1],parameters_array->sensor_topRight[1][1],parameters_array->sensor_topRight[2][1],parameters_array->sensor_topRight[3][1],parameters_array->sensor_topRight[4][1],parameters_array->sensor_topRight[5][1],parameters_array->sensor_topRight[6][1],parameters_array->sensor_topRight[7][1],parameters_array->sensor_topRight[8][1],parameters_array->sensor_topRight[9][1],parameters_array->sensor_topRight[10][1],
    7322:	f504 63b9 	add.w	r3, r4, #1480	; 0x5c8
    7326:	681b      	ldr	r3, [r3, #0]
    7328:	f204 52bc 	addw	r2, r4, #1468	; 0x5bc
    732c:	6812      	ldr	r2, [r2, #0]
    732e:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
    7332:	6809      	ldr	r1, [r1, #0]
    7334:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
    7338:	6800      	ldr	r0, [r0, #0]
    733a:	69af      	ldr	r7, [r5, #24]
    733c:	9712      	str	r7, [sp, #72]	; 0x48
    733e:	68ef      	ldr	r7, [r5, #12]
    7340:	9711      	str	r7, [sp, #68]	; 0x44
    7342:	682f      	ldr	r7, [r5, #0]
    7344:	9710      	str	r7, [sp, #64]	; 0x40
    7346:	f504 67d1 	add.w	r7, r4, #1672	; 0x688
    734a:	683f      	ldr	r7, [r7, #0]
    734c:	970f      	str	r7, [sp, #60]	; 0x3c
    734e:	f204 677c 	addw	r7, r4, #1660	; 0x67c
    7352:	683f      	ldr	r7, [r7, #0]
    7354:	970e      	str	r7, [sp, #56]	; 0x38
    7356:	f504 67ce 	add.w	r7, r4, #1648	; 0x670
    735a:	683f      	ldr	r7, [r7, #0]
    735c:	970d      	str	r7, [sp, #52]	; 0x34
    735e:	f204 6764 	addw	r7, r4, #1636	; 0x664
    7362:	683f      	ldr	r7, [r7, #0]
    7364:	970c      	str	r7, [sp, #48]	; 0x30
    7366:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
    736a:	683f      	ldr	r7, [r7, #0]
    736c:	970b      	str	r7, [sp, #44]	; 0x2c
    736e:	f204 674c 	addw	r7, r4, #1612	; 0x64c
    7372:	683f      	ldr	r7, [r7, #0]
    7374:	970a      	str	r7, [sp, #40]	; 0x28
    7376:	f504 67c8 	add.w	r7, r4, #1600	; 0x640
    737a:	683f      	ldr	r7, [r7, #0]
    737c:	9709      	str	r7, [sp, #36]	; 0x24
    737e:	f204 6734 	addw	r7, r4, #1588	; 0x634
    7382:	683f      	ldr	r7, [r7, #0]
    7384:	9708      	str	r7, [sp, #32]
    7386:	f504 67c5 	add.w	r7, r4, #1576	; 0x628
    738a:	683f      	ldr	r7, [r7, #0]
    738c:	9707      	str	r7, [sp, #28]
    738e:	f204 671c 	addw	r7, r4, #1564	; 0x61c
    7392:	683f      	ldr	r7, [r7, #0]
    7394:	9706      	str	r7, [sp, #24]
    7396:	f504 67c2 	add.w	r7, r4, #1552	; 0x610
    739a:	683f      	ldr	r7, [r7, #0]
    739c:	9705      	str	r7, [sp, #20]
    739e:	f204 6704 	addw	r7, r4, #1540	; 0x604
    73a2:	683f      	ldr	r7, [r7, #0]
    73a4:	9704      	str	r7, [sp, #16]
    73a6:	f504 67bf 	add.w	r7, r4, #1528	; 0x5f8
    73aa:	683f      	ldr	r7, [r7, #0]
    73ac:	9703      	str	r7, [sp, #12]
    73ae:	f204 57ec 	addw	r7, r4, #1516	; 0x5ec
    73b2:	683f      	ldr	r7, [r7, #0]
    73b4:	9702      	str	r7, [sp, #8]
    73b6:	f504 67bc 	add.w	r7, r4, #1504	; 0x5e0
    73ba:	683f      	ldr	r7, [r7, #0]
    73bc:	9701      	str	r7, [sp, #4]
    73be:	f204 57d4 	addw	r7, r4, #1492	; 0x5d4
    73c2:	683f      	ldr	r7, [r7, #0]
    73c4:	9700      	str	r7, [sp, #0]
    73c6:	47b0      	blx	r6
    73c8:	6328      	str	r0, [r5, #48]	; 0x30
			sensor_row->force_z_top = calibration_function(parameters_array->sensor_topRight[0][2],parameters_array->sensor_topRight[1][2],parameters_array->sensor_topRight[2][2],parameters_array->sensor_topRight[3][2],parameters_array->sensor_topRight[4][2],parameters_array->sensor_topRight[5][2],parameters_array->sensor_topRight[6][2],parameters_array->sensor_topRight[7][2],parameters_array->sensor_topRight[8][2],parameters_array->sensor_topRight[9][2],parameters_array->sensor_topRight[10][2],
    73ca:	f204 53cc 	addw	r3, r4, #1484	; 0x5cc
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	f504 62b8 	add.w	r2, r4, #1472	; 0x5c0
    73d4:	6812      	ldr	r2, [r2, #0]
    73d6:	f204 51b4 	addw	r1, r4, #1460	; 0x5b4
    73da:	6809      	ldr	r1, [r1, #0]
    73dc:	f504 60b5 	add.w	r0, r4, #1448	; 0x5a8
    73e0:	6800      	ldr	r0, [r0, #0]
    73e2:	69af      	ldr	r7, [r5, #24]
    73e4:	9712      	str	r7, [sp, #72]	; 0x48
    73e6:	68ef      	ldr	r7, [r5, #12]
    73e8:	9711      	str	r7, [sp, #68]	; 0x44
    73ea:	682f      	ldr	r7, [r5, #0]
    73ec:	9710      	str	r7, [sp, #64]	; 0x40
    73ee:	f204 678c 	addw	r7, r4, #1676	; 0x68c
    73f2:	683f      	ldr	r7, [r7, #0]
    73f4:	970f      	str	r7, [sp, #60]	; 0x3c
    73f6:	f504 67d0 	add.w	r7, r4, #1664	; 0x680
    73fa:	683f      	ldr	r7, [r7, #0]
    73fc:	970e      	str	r7, [sp, #56]	; 0x38
    73fe:	f204 6774 	addw	r7, r4, #1652	; 0x674
    7402:	683f      	ldr	r7, [r7, #0]
    7404:	970d      	str	r7, [sp, #52]	; 0x34
    7406:	f504 67cd 	add.w	r7, r4, #1640	; 0x668
    740a:	683f      	ldr	r7, [r7, #0]
    740c:	970c      	str	r7, [sp, #48]	; 0x30
    740e:	f204 675c 	addw	r7, r4, #1628	; 0x65c
    7412:	683f      	ldr	r7, [r7, #0]
    7414:	970b      	str	r7, [sp, #44]	; 0x2c
    7416:	f504 67ca 	add.w	r7, r4, #1616	; 0x650
    741a:	683f      	ldr	r7, [r7, #0]
    741c:	970a      	str	r7, [sp, #40]	; 0x28
    741e:	f204 6744 	addw	r7, r4, #1604	; 0x644
    7422:	683f      	ldr	r7, [r7, #0]
    7424:	9709      	str	r7, [sp, #36]	; 0x24
    7426:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
    742a:	683f      	ldr	r7, [r7, #0]
    742c:	9708      	str	r7, [sp, #32]
    742e:	f204 672c 	addw	r7, r4, #1580	; 0x62c
    7432:	683f      	ldr	r7, [r7, #0]
    7434:	9707      	str	r7, [sp, #28]
    7436:	f504 67c4 	add.w	r7, r4, #1568	; 0x620
    743a:	683f      	ldr	r7, [r7, #0]
    743c:	9706      	str	r7, [sp, #24]
    743e:	f204 6714 	addw	r7, r4, #1556	; 0x614
    7442:	683f      	ldr	r7, [r7, #0]
    7444:	9705      	str	r7, [sp, #20]
    7446:	f504 67c1 	add.w	r7, r4, #1544	; 0x608
    744a:	683f      	ldr	r7, [r7, #0]
    744c:	9704      	str	r7, [sp, #16]
    744e:	f204 57fc 	addw	r7, r4, #1532	; 0x5fc
    7452:	683f      	ldr	r7, [r7, #0]
    7454:	9703      	str	r7, [sp, #12]
    7456:	f504 67be 	add.w	r7, r4, #1520	; 0x5f0
    745a:	683f      	ldr	r7, [r7, #0]
    745c:	9702      	str	r7, [sp, #8]
    745e:	f204 57e4 	addw	r7, r4, #1508	; 0x5e4
    7462:	683f      	ldr	r7, [r7, #0]
    7464:	9701      	str	r7, [sp, #4]
    7466:	f504 67bb 	add.w	r7, r4, #1496	; 0x5d8
    746a:	683f      	ldr	r7, [r7, #0]
    746c:	9700      	str	r7, [sp, #0]
    746e:	47b0      	blx	r6
    7470:	63e8      	str	r0, [r5, #60]	; 0x3c
			sensor_row->force_r_top = (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    7472:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
    7476:	ee67 7aa7 	vmul.f32	s15, s15, s15
    747a:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
    747e:	ee27 7a07 	vmul.f32	s14, s14, s14
    7482:	ee77 7a87 	vadd.f32	s15, s15, s14
    7486:	edc5 7a12 	vstr	s15, [r5, #72]	; 0x48
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    748a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 764c <mag_to_force+0xfac>
    748e:	ee17 0a90 	vmov	r0, s15
    7492:	47c8      	blx	r9
    7494:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 7650 <mag_to_force+0xfb0>
    7498:	47c0      	blx	r8
    749a:	4f6b      	ldr	r7, [pc, #428]	; (7648 <mag_to_force+0xfa8>)
    749c:	47b8      	blx	r7
    749e:	64a8      	str	r0, [r5, #72]	; 0x48
			sensor_row->force_x_middle = calibration_function(parameters_array->sensor_middleRight[0][0],parameters_array->sensor_middleRight[1][0],parameters_array->sensor_middleRight[2][0],parameters_array->sensor_middleRight[3][0],parameters_array->sensor_middleRight[4][0],parameters_array->sensor_middleRight[5][0],parameters_array->sensor_middleRight[6][0],parameters_array->sensor_middleRight[7][0],parameters_array->sensor_middleRight[8][0],parameters_array->sensor_middleRight[9][0],parameters_array->sensor_middleRight[10][0],
    74a0:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
    74a4:	681b      	ldr	r3, [r3, #0]
    74a6:	f504 62d5 	add.w	r2, r4, #1704	; 0x6a8
    74aa:	6812      	ldr	r2, [r2, #0]
    74ac:	f204 619c 	addw	r1, r4, #1692	; 0x69c
    74b0:	6809      	ldr	r1, [r1, #0]
    74b2:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
    74b6:	6800      	ldr	r0, [r0, #0]
    74b8:	f8d5 e018 	ldr.w	lr, [r5, #24]
    74bc:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    74c0:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    74c4:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    74c8:	f8d5 e000 	ldr.w	lr, [r5]
    74cc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    74d0:	f204 7e74 	addw	lr, r4, #1908	; 0x774
    74d4:	f8de e000 	ldr.w	lr, [lr]
    74d8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    74dc:	f504 6eed 	add.w	lr, r4, #1896	; 0x768
    74e0:	f8de e000 	ldr.w	lr, [lr]
    74e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    74e8:	f204 7e5c 	addw	lr, r4, #1884	; 0x75c
    74ec:	f8de e000 	ldr.w	lr, [lr]
    74f0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    74f4:	f504 6eea 	add.w	lr, r4, #1872	; 0x750
    74f8:	f8de e000 	ldr.w	lr, [lr]
    74fc:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    7500:	f204 7e44 	addw	lr, r4, #1860	; 0x744
    7504:	f8de e000 	ldr.w	lr, [lr]
    7508:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    750c:	f504 6ee7 	add.w	lr, r4, #1848	; 0x738
    7510:	f8de e000 	ldr.w	lr, [lr]
    7514:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    7518:	f204 7e2c 	addw	lr, r4, #1836	; 0x72c
    751c:	f8de e000 	ldr.w	lr, [lr]
    7520:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    7524:	f504 6ee4 	add.w	lr, r4, #1824	; 0x720
    7528:	f8de e000 	ldr.w	lr, [lr]
    752c:	f8cd e020 	str.w	lr, [sp, #32]
    7530:	f204 7e14 	addw	lr, r4, #1812	; 0x714
    7534:	f8de e000 	ldr.w	lr, [lr]
    7538:	f8cd e01c 	str.w	lr, [sp, #28]
    753c:	f504 6ee1 	add.w	lr, r4, #1800	; 0x708
    7540:	f8de e000 	ldr.w	lr, [lr]
    7544:	f8cd e018 	str.w	lr, [sp, #24]
    7548:	f204 6efc 	addw	lr, r4, #1788	; 0x6fc
    754c:	f8de e000 	ldr.w	lr, [lr]
    7550:	f8cd e014 	str.w	lr, [sp, #20]
    7554:	f504 6ede 	add.w	lr, r4, #1776	; 0x6f0
    7558:	f8de e000 	ldr.w	lr, [lr]
    755c:	f8cd e010 	str.w	lr, [sp, #16]
    7560:	f204 6ee4 	addw	lr, r4, #1764	; 0x6e4
    7564:	f8de e000 	ldr.w	lr, [lr]
    7568:	f8cd e00c 	str.w	lr, [sp, #12]
    756c:	f504 6edb 	add.w	lr, r4, #1752	; 0x6d8
    7570:	f8de e000 	ldr.w	lr, [lr]
    7574:	f8cd e008 	str.w	lr, [sp, #8]
    7578:	f204 6ecc 	addw	lr, r4, #1740	; 0x6cc
    757c:	f8de e000 	ldr.w	lr, [lr]
    7580:	f8cd e004 	str.w	lr, [sp, #4]
    7584:	f504 6ed8 	add.w	lr, r4, #1728	; 0x6c0
    7588:	f8de e000 	ldr.w	lr, [lr]
    758c:	f8cd e000 	str.w	lr, [sp]
    7590:	47b0      	blx	r6
    7592:	62a8      	str	r0, [r5, #40]	; 0x28
			sensor_row->force_y_middle = calibration_function(parameters_array->sensor_middleRight[0][1],parameters_array->sensor_middleRight[1][1],parameters_array->sensor_middleRight[2][1],parameters_array->sensor_middleRight[3][1],parameters_array->sensor_middleRight[4][1],parameters_array->sensor_middleRight[5][1],parameters_array->sensor_middleRight[6][1],parameters_array->sensor_middleRight[7][1],parameters_array->sensor_middleRight[8][1],parameters_array->sensor_middleRight[9][1],parameters_array->sensor_middleRight[10][1],
    7594:	f504 63d7 	add.w	r3, r4, #1720	; 0x6b8
    7598:	681b      	ldr	r3, [r3, #0]
    759a:	f204 62ac 	addw	r2, r4, #1708	; 0x6ac
    759e:	6812      	ldr	r2, [r2, #0]
    75a0:	f504 61d4 	add.w	r1, r4, #1696	; 0x6a0
    75a4:	6809      	ldr	r1, [r1, #0]
    75a6:	f204 6094 	addw	r0, r4, #1684	; 0x694
    75aa:	6800      	ldr	r0, [r0, #0]
    75ac:	f8d5 e018 	ldr.w	lr, [r5, #24]
    75b0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    75b4:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    75b8:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    75bc:	f8d5 e000 	ldr.w	lr, [r5]
    75c0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    75c4:	f504 6eef 	add.w	lr, r4, #1912	; 0x778
    75c8:	f8de e000 	ldr.w	lr, [lr]
    75cc:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    75d0:	f204 7e6c 	addw	lr, r4, #1900	; 0x76c
    75d4:	f8de e000 	ldr.w	lr, [lr]
    75d8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    75dc:	f504 6eec 	add.w	lr, r4, #1888	; 0x760
    75e0:	f8de e000 	ldr.w	lr, [lr]
    75e4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    75e8:	f204 7e54 	addw	lr, r4, #1876	; 0x754
    75ec:	f8de e000 	ldr.w	lr, [lr]
    75f0:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    75f4:	f504 6ee9 	add.w	lr, r4, #1864	; 0x748
    75f8:	f8de e000 	ldr.w	lr, [lr]
    75fc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7600:	f204 7e3c 	addw	lr, r4, #1852	; 0x73c
    7604:	f8de e000 	ldr.w	lr, [lr]
    7608:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    760c:	f504 6ee6 	add.w	lr, r4, #1840	; 0x730
    7610:	f8de e000 	ldr.w	lr, [lr]
    7614:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    7618:	f204 7e24 	addw	lr, r4, #1828	; 0x724
    761c:	f8de e000 	ldr.w	lr, [lr]
    7620:	f8cd e020 	str.w	lr, [sp, #32]
    7624:	f504 6ee3 	add.w	lr, r4, #1816	; 0x718
    7628:	f8de e000 	ldr.w	lr, [lr]
    762c:	f8cd e01c 	str.w	lr, [sp, #28]
    7630:	f204 7e0c 	addw	lr, r4, #1804	; 0x70c
    7634:	f8de e000 	ldr.w	lr, [lr]
    7638:	f8cd e018 	str.w	lr, [sp, #24]
    763c:	f504 6ee0 	add.w	lr, r4, #1792	; 0x700
    7640:	e008      	b.n	7654 <mag_to_force+0xfb4>
    7642:	bf00      	nop
    7644:	000064c9 	.word	0x000064c9
    7648:	0000991d 	.word	0x0000991d
    764c:	00009315 	.word	0x00009315
    7650:	00008145 	.word	0x00008145
    7654:	f8de e000 	ldr.w	lr, [lr]
    7658:	f8cd e014 	str.w	lr, [sp, #20]
    765c:	f204 6ef4 	addw	lr, r4, #1780	; 0x6f4
    7660:	f8de e000 	ldr.w	lr, [lr]
    7664:	f8cd e010 	str.w	lr, [sp, #16]
    7668:	f504 6edd 	add.w	lr, r4, #1768	; 0x6e8
    766c:	f8de e000 	ldr.w	lr, [lr]
    7670:	f8cd e00c 	str.w	lr, [sp, #12]
    7674:	f204 6edc 	addw	lr, r4, #1756	; 0x6dc
    7678:	f8de e000 	ldr.w	lr, [lr]
    767c:	f8cd e008 	str.w	lr, [sp, #8]
    7680:	f504 6eda 	add.w	lr, r4, #1744	; 0x6d0
    7684:	f8de e000 	ldr.w	lr, [lr]
    7688:	f8cd e004 	str.w	lr, [sp, #4]
    768c:	f204 6ec4 	addw	lr, r4, #1732	; 0x6c4
    7690:	f8de e000 	ldr.w	lr, [lr]
    7694:	f8cd e000 	str.w	lr, [sp]
    7698:	47b0      	blx	r6
    769a:	6368      	str	r0, [r5, #52]	; 0x34
			sensor_row->force_z_middle = calibration_function(parameters_array->sensor_middleRight[0][2],parameters_array->sensor_middleRight[1][2],parameters_array->sensor_middleRight[2][2],parameters_array->sensor_middleRight[3][2],parameters_array->sensor_middleRight[4][2],parameters_array->sensor_middleRight[5][2],parameters_array->sensor_middleRight[6][2],parameters_array->sensor_middleRight[7][2],parameters_array->sensor_middleRight[8][2],parameters_array->sensor_middleRight[9][2],parameters_array->sensor_middleRight[10][2],
    769c:	f204 63bc 	addw	r3, r4, #1724	; 0x6bc
    76a0:	681b      	ldr	r3, [r3, #0]
    76a2:	f504 62d6 	add.w	r2, r4, #1712	; 0x6b0
    76a6:	6812      	ldr	r2, [r2, #0]
    76a8:	f204 61a4 	addw	r1, r4, #1700	; 0x6a4
    76ac:	6809      	ldr	r1, [r1, #0]
    76ae:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
    76b2:	6800      	ldr	r0, [r0, #0]
    76b4:	f8d5 e018 	ldr.w	lr, [r5, #24]
    76b8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    76bc:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    76c0:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    76c4:	f8d5 e000 	ldr.w	lr, [r5]
    76c8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    76cc:	f204 7e7c 	addw	lr, r4, #1916	; 0x77c
    76d0:	f8de e000 	ldr.w	lr, [lr]
    76d4:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    76d8:	f504 6eee 	add.w	lr, r4, #1904	; 0x770
    76dc:	f8de e000 	ldr.w	lr, [lr]
    76e0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    76e4:	f204 7e64 	addw	lr, r4, #1892	; 0x764
    76e8:	f8de e000 	ldr.w	lr, [lr]
    76ec:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    76f0:	f504 6eeb 	add.w	lr, r4, #1880	; 0x758
    76f4:	f8de e000 	ldr.w	lr, [lr]
    76f8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    76fc:	f204 7e4c 	addw	lr, r4, #1868	; 0x74c
    7700:	f8de e000 	ldr.w	lr, [lr]
    7704:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7708:	f504 6ee8 	add.w	lr, r4, #1856	; 0x740
    770c:	f8de e000 	ldr.w	lr, [lr]
    7710:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    7714:	f204 7e34 	addw	lr, r4, #1844	; 0x734
    7718:	f8de e000 	ldr.w	lr, [lr]
    771c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    7720:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    7724:	f8de e000 	ldr.w	lr, [lr]
    7728:	f8cd e020 	str.w	lr, [sp, #32]
    772c:	f204 7e1c 	addw	lr, r4, #1820	; 0x71c
    7730:	f8de e000 	ldr.w	lr, [lr]
    7734:	f8cd e01c 	str.w	lr, [sp, #28]
    7738:	f504 6ee2 	add.w	lr, r4, #1808	; 0x710
    773c:	f8de e000 	ldr.w	lr, [lr]
    7740:	f8cd e018 	str.w	lr, [sp, #24]
    7744:	f204 7e04 	addw	lr, r4, #1796	; 0x704
    7748:	f8de e000 	ldr.w	lr, [lr]
    774c:	f8cd e014 	str.w	lr, [sp, #20]
    7750:	f504 6edf 	add.w	lr, r4, #1784	; 0x6f8
    7754:	f8de e000 	ldr.w	lr, [lr]
    7758:	f8cd e010 	str.w	lr, [sp, #16]
    775c:	f204 6eec 	addw	lr, r4, #1772	; 0x6ec
    7760:	f8de e000 	ldr.w	lr, [lr]
    7764:	f8cd e00c 	str.w	lr, [sp, #12]
    7768:	f504 6edc 	add.w	lr, r4, #1760	; 0x6e0
    776c:	f8de e000 	ldr.w	lr, [lr]
    7770:	f8cd e008 	str.w	lr, [sp, #8]
    7774:	f204 6ed4 	addw	lr, r4, #1748	; 0x6d4
    7778:	f8de e000 	ldr.w	lr, [lr]
    777c:	f8cd e004 	str.w	lr, [sp, #4]
    7780:	f504 6ed9 	add.w	lr, r4, #1736	; 0x6c8
    7784:	f8de e000 	ldr.w	lr, [lr]
    7788:	f8cd e000 	str.w	lr, [sp]
    778c:	47b0      	blx	r6
    778e:	6428      	str	r0, [r5, #64]	; 0x40
			sensor_row->force_r_middle = (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    7790:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
    7794:	ee67 7aa7 	vmul.f32	s15, s15, s15
    7798:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
    779c:	ee27 7a07 	vmul.f32	s14, s14, s14
    77a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    77a4:	edc5 7a13 	vstr	s15, [r5, #76]	; 0x4c
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    77a8:	ee17 0a90 	vmov	r0, s15
    77ac:	47c8      	blx	r9
    77ae:	47c0      	blx	r8
    77b0:	47b8      	blx	r7
    77b2:	64e8      	str	r0, [r5, #76]	; 0x4c
			sensor_row->force_x_bottom = calibration_function(parameters_array->sensor_bottomRight[0][0],parameters_array->sensor_bottomRight[1][0],parameters_array->sensor_bottomRight[2][0],parameters_array->sensor_bottomRight[3][0],parameters_array->sensor_bottomRight[4][0],parameters_array->sensor_bottomRight[5][0],parameters_array->sensor_bottomRight[6][0],parameters_array->sensor_bottomRight[7][0],parameters_array->sensor_bottomRight[8][0],parameters_array->sensor_bottomRight[9][0],parameters_array->sensor_bottomRight[10][0],
    77b4:	f204 73a4 	addw	r3, r4, #1956	; 0x7a4
    77b8:	681b      	ldr	r3, [r3, #0]
    77ba:	f504 62f3 	add.w	r2, r4, #1944	; 0x798
    77be:	6812      	ldr	r2, [r2, #0]
    77c0:	f204 718c 	addw	r1, r4, #1932	; 0x78c
    77c4:	6809      	ldr	r1, [r1, #0]
    77c6:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
    77ca:	6800      	ldr	r0, [r0, #0]
    77cc:	f8d5 e018 	ldr.w	lr, [r5, #24]
    77d0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    77d4:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    77d8:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    77dc:	f8d5 e000 	ldr.w	lr, [r5]
    77e0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    77e4:	f604 0e64 	addw	lr, r4, #2148	; 0x864
    77e8:	f8de e000 	ldr.w	lr, [lr]
    77ec:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    77f0:	f604 0e58 	addw	lr, r4, #2136	; 0x858
    77f4:	f8de e000 	ldr.w	lr, [lr]
    77f8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    77fc:	f604 0e4c 	addw	lr, r4, #2124	; 0x84c
    7800:	f8de e000 	ldr.w	lr, [lr]
    7804:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    7808:	f504 6e04 	add.w	lr, r4, #2112	; 0x840
    780c:	f8de e000 	ldr.w	lr, [lr]
    7810:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    7814:	f604 0e34 	addw	lr, r4, #2100	; 0x834
    7818:	f8de e000 	ldr.w	lr, [lr]
    781c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7820:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    7824:	f8de e000 	ldr.w	lr, [lr]
    7828:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    782c:	f604 0e1c 	addw	lr, r4, #2076	; 0x81c
    7830:	f8de e000 	ldr.w	lr, [lr]
    7834:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    7838:	f504 6e01 	add.w	lr, r4, #2064	; 0x810
    783c:	f8de e000 	ldr.w	lr, [lr]
    7840:	f8cd e020 	str.w	lr, [sp, #32]
    7844:	f604 0e04 	addw	lr, r4, #2052	; 0x804
    7848:	f8de e000 	ldr.w	lr, [lr]
    784c:	f8cd e01c 	str.w	lr, [sp, #28]
    7850:	f504 6eff 	add.w	lr, r4, #2040	; 0x7f8
    7854:	f8de e000 	ldr.w	lr, [lr]
    7858:	f8cd e018 	str.w	lr, [sp, #24]
    785c:	f204 7eec 	addw	lr, r4, #2028	; 0x7ec
    7860:	f8de e000 	ldr.w	lr, [lr]
    7864:	f8cd e014 	str.w	lr, [sp, #20]
    7868:	f504 6efc 	add.w	lr, r4, #2016	; 0x7e0
    786c:	f8de e000 	ldr.w	lr, [lr]
    7870:	f8cd e010 	str.w	lr, [sp, #16]
    7874:	f204 7ed4 	addw	lr, r4, #2004	; 0x7d4
    7878:	f8de e000 	ldr.w	lr, [lr]
    787c:	f8cd e00c 	str.w	lr, [sp, #12]
    7880:	f504 6ef9 	add.w	lr, r4, #1992	; 0x7c8
    7884:	f8de e000 	ldr.w	lr, [lr]
    7888:	f8cd e008 	str.w	lr, [sp, #8]
    788c:	f204 7ebc 	addw	lr, r4, #1980	; 0x7bc
    7890:	f8de e000 	ldr.w	lr, [lr]
    7894:	f8cd e004 	str.w	lr, [sp, #4]
    7898:	f504 6ef6 	add.w	lr, r4, #1968	; 0x7b0
    789c:	f8de e000 	ldr.w	lr, [lr]
    78a0:	f8cd e000 	str.w	lr, [sp]
    78a4:	47b0      	blx	r6
    78a6:	62e8      	str	r0, [r5, #44]	; 0x2c
			sensor_row->force_y_bottom = calibration_function(parameters_array->sensor_bottomRight[0][1],parameters_array->sensor_bottomRight[1][1],parameters_array->sensor_bottomRight[2][1],parameters_array->sensor_bottomRight[3][1],parameters_array->sensor_bottomRight[4][1],parameters_array->sensor_bottomRight[5][1],parameters_array->sensor_bottomRight[6][1],parameters_array->sensor_bottomRight[7][1],parameters_array->sensor_bottomRight[8][1],parameters_array->sensor_bottomRight[9][1],parameters_array->sensor_bottomRight[10][1],
    78a8:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	f204 729c 	addw	r2, r4, #1948	; 0x79c
    78b2:	6812      	ldr	r2, [r2, #0]
    78b4:	f504 61f2 	add.w	r1, r4, #1936	; 0x790
    78b8:	6809      	ldr	r1, [r1, #0]
    78ba:	f204 7084 	addw	r0, r4, #1924	; 0x784
    78be:	6800      	ldr	r0, [r0, #0]
    78c0:	f8d5 e018 	ldr.w	lr, [r5, #24]
    78c4:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    78c8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    78cc:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    78d0:	f8d5 e000 	ldr.w	lr, [r5]
    78d4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    78d8:	f604 0e68 	addw	lr, r4, #2152	; 0x868
    78dc:	f8de e000 	ldr.w	lr, [lr]
    78e0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    78e4:	f604 0e5c 	addw	lr, r4, #2140	; 0x85c
    78e8:	f8de e000 	ldr.w	lr, [lr]
    78ec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    78f0:	f504 6e05 	add.w	lr, r4, #2128	; 0x850
    78f4:	f8de e000 	ldr.w	lr, [lr]
    78f8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    78fc:	f604 0e44 	addw	lr, r4, #2116	; 0x844
    7900:	f8de e000 	ldr.w	lr, [lr]
    7904:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    7908:	f604 0e38 	addw	lr, r4, #2104	; 0x838
    790c:	f8de e000 	ldr.w	lr, [lr]
    7910:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7914:	f604 0e2c 	addw	lr, r4, #2092	; 0x82c
    7918:	f8de e000 	ldr.w	lr, [lr]
    791c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    7920:	f504 6e02 	add.w	lr, r4, #2080	; 0x820
    7924:	f8de e000 	ldr.w	lr, [lr]
    7928:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    792c:	f604 0e14 	addw	lr, r4, #2068	; 0x814
    7930:	f8de e000 	ldr.w	lr, [lr]
    7934:	f8cd e020 	str.w	lr, [sp, #32]
    7938:	f604 0e08 	addw	lr, r4, #2056	; 0x808
    793c:	f8de e000 	ldr.w	lr, [lr]
    7940:	f8cd e01c 	str.w	lr, [sp, #28]
    7944:	f204 7efc 	addw	lr, r4, #2044	; 0x7fc
    7948:	f8de e000 	ldr.w	lr, [lr]
    794c:	f8cd e018 	str.w	lr, [sp, #24]
    7950:	f504 6efe 	add.w	lr, r4, #2032	; 0x7f0
    7954:	f8de e000 	ldr.w	lr, [lr]
    7958:	f8cd e014 	str.w	lr, [sp, #20]
    795c:	f204 7ee4 	addw	lr, r4, #2020	; 0x7e4
    7960:	f8de e000 	ldr.w	lr, [lr]
    7964:	f8cd e010 	str.w	lr, [sp, #16]
    7968:	f504 6efb 	add.w	lr, r4, #2008	; 0x7d8
    796c:	f8de e000 	ldr.w	lr, [lr]
    7970:	f8cd e00c 	str.w	lr, [sp, #12]
    7974:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
    7978:	f8de e000 	ldr.w	lr, [lr]
    797c:	f8cd e008 	str.w	lr, [sp, #8]
    7980:	f504 6ef8 	add.w	lr, r4, #1984	; 0x7c0
    7984:	f8de e000 	ldr.w	lr, [lr]
    7988:	f8cd e004 	str.w	lr, [sp, #4]
    798c:	f204 7eb4 	addw	lr, r4, #1972	; 0x7b4
    7990:	f8de e000 	ldr.w	lr, [lr]
    7994:	f8cd e000 	str.w	lr, [sp]
    7998:	47b0      	blx	r6
    799a:	63a8      	str	r0, [r5, #56]	; 0x38
			sensor_row->force_z_bottom = calibration_function(parameters_array->sensor_bottomRight[0][2],parameters_array->sensor_bottomRight[1][2],parameters_array->sensor_bottomRight[2][2],parameters_array->sensor_bottomRight[3][2],parameters_array->sensor_bottomRight[4][2],parameters_array->sensor_bottomRight[5][2],parameters_array->sensor_bottomRight[6][2],parameters_array->sensor_bottomRight[7][2],parameters_array->sensor_bottomRight[8][2],parameters_array->sensor_bottomRight[9][2],parameters_array->sensor_bottomRight[10][2],
    799c:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
    79a0:	681b      	ldr	r3, [r3, #0]
    79a2:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
    79a6:	6812      	ldr	r2, [r2, #0]
    79a8:	f204 7194 	addw	r1, r4, #1940	; 0x794
    79ac:	6809      	ldr	r1, [r1, #0]
    79ae:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
    79b2:	6800      	ldr	r0, [r0, #0]
    79b4:	f8d5 e018 	ldr.w	lr, [r5, #24]
    79b8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    79bc:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    79c0:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    79c4:	f8d5 e000 	ldr.w	lr, [r5]
    79c8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    79cc:	f604 0e6c 	addw	lr, r4, #2156	; 0x86c
    79d0:	f8de e000 	ldr.w	lr, [lr]
    79d4:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    79d8:	f504 6e06 	add.w	lr, r4, #2144	; 0x860
    79dc:	f8de e000 	ldr.w	lr, [lr]
    79e0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    79e4:	f604 0e54 	addw	lr, r4, #2132	; 0x854
    79e8:	f8de e000 	ldr.w	lr, [lr]
    79ec:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    79f0:	f604 0e48 	addw	lr, r4, #2120	; 0x848
    79f4:	f8de e000 	ldr.w	lr, [lr]
    79f8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    79fc:	f604 0e3c 	addw	lr, r4, #2108	; 0x83c
    7a00:	f8de e000 	ldr.w	lr, [lr]
    7a04:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7a08:	f504 6e03 	add.w	lr, r4, #2096	; 0x830
    7a0c:	f8de e000 	ldr.w	lr, [lr]
    7a10:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    7a14:	f604 0e24 	addw	lr, r4, #2084	; 0x824
    7a18:	f8de e000 	ldr.w	lr, [lr]
    7a1c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    7a20:	f604 0e18 	addw	lr, r4, #2072	; 0x818
    7a24:	f8de e000 	ldr.w	lr, [lr]
    7a28:	f8cd e020 	str.w	lr, [sp, #32]
    7a2c:	f604 0e0c 	addw	lr, r4, #2060	; 0x80c
    7a30:	f8de e000 	ldr.w	lr, [lr]
    7a34:	f8cd e01c 	str.w	lr, [sp, #28]
    7a38:	f504 6e00 	add.w	lr, r4, #2048	; 0x800
    7a3c:	f8de e000 	ldr.w	lr, [lr]
    7a40:	f8cd e018 	str.w	lr, [sp, #24]
    7a44:	f204 7ef4 	addw	lr, r4, #2036	; 0x7f4
    7a48:	f8de e000 	ldr.w	lr, [lr]
    7a4c:	f8cd e014 	str.w	lr, [sp, #20]
    7a50:	f504 6efd 	add.w	lr, r4, #2024	; 0x7e8
    7a54:	f8de e000 	ldr.w	lr, [lr]
    7a58:	f8cd e010 	str.w	lr, [sp, #16]
    7a5c:	f204 7edc 	addw	lr, r4, #2012	; 0x7dc
    7a60:	f8de e000 	ldr.w	lr, [lr]
    7a64:	f8cd e00c 	str.w	lr, [sp, #12]
    7a68:	f504 6efa 	add.w	lr, r4, #2000	; 0x7d0
    7a6c:	f8de e000 	ldr.w	lr, [lr]
    7a70:	f8cd e008 	str.w	lr, [sp, #8]
    7a74:	f204 7ec4 	addw	lr, r4, #1988	; 0x7c4
    7a78:	f8de e000 	ldr.w	lr, [lr]
    7a7c:	f8cd e004 	str.w	lr, [sp, #4]
    7a80:	f504 64f7 	add.w	r4, r4, #1976	; 0x7b8
    7a84:	6824      	ldr	r4, [r4, #0]
    7a86:	9400      	str	r4, [sp, #0]
    7a88:	47b0      	blx	r6
    7a8a:	6468      	str	r0, [r5, #68]	; 0x44
			sensor_row->force_r_bottom = (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    7a8c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
    7a90:	ee67 7aa7 	vmul.f32	s15, s15, s15
    7a94:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
    7a98:	ee27 7a07 	vmul.f32	s14, s14, s14
    7a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
    7aa0:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    7aa4:	ee17 0a90 	vmov	r0, s15
    7aa8:	47c8      	blx	r9
    7aaa:	47c0      	blx	r8
    7aac:	47b8      	blx	r7
    7aae:	6528      	str	r0, [r5, #80]	; 0x50
    7ab0:	f7fe be03 	b.w	66ba <mag_to_force+0x1a>

00007ab4 <RS>:
#include "math.h"
#include <Tactile_Sensor/neural_spikes.h>

void RS(struct fneuron_t *neuron) {
	// create a "regular spiking" floating point neuron
	neuron->a = 0.02;
    7ab4:	4b07      	ldr	r3, [pc, #28]	; (7ad4 <RS+0x20>)
    7ab6:	6003      	str	r3, [r0, #0]
	neuron->b = 0.2;
    7ab8:	4b07      	ldr	r3, [pc, #28]	; (7ad8 <RS+0x24>)
    7aba:	6043      	str	r3, [r0, #4]
	neuron->c = -65;
    7abc:	4b07      	ldr	r3, [pc, #28]	; (7adc <RS+0x28>)
    7abe:	6083      	str	r3, [r0, #8]
	neuron->d = 6;
    7ac0:	4b07      	ldr	r3, [pc, #28]	; (7ae0 <RS+0x2c>)
    7ac2:	60c3      	str	r3, [r0, #12]
	neuron->potential = neuron->recovery = 0;
    7ac4:	2300      	movs	r3, #0
    7ac6:	6143      	str	r3, [r0, #20]
    7ac8:	6103      	str	r3, [r0, #16]
	neuron->timestep_neuron = 1; // Junan's recommendation 0.05, bigger Timesteps till 1.5 are fine (see paper) 
    7aca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    7ace:	61c3      	str	r3, [r0, #28]
    7ad0:	4770      	bx	lr
    7ad2:	bf00      	nop
    7ad4:	3ca3d70a 	.word	0x3ca3d70a
    7ad8:	3e4ccccd 	.word	0x3e4ccccd
    7adc:	c2820000 	.word	0xc2820000
    7ae0:	40c00000 	.word	0x40c00000

00007ae4 <force_parameters>:
}

void force_parameters (struct fneuron_t *neuron) {
	// initiate parameters for normal and shear force
	// parameters normal force
	neuron->beta = 0; //needs maybe adjustment
    7ae4:	2300      	movs	r3, #0
    7ae6:	6303      	str	r3, [r0, #48]	; 0x30
	neuron->k_s	= 1.2; //0.0000003 , needs adjustment
    7ae8:	4a08      	ldr	r2, [pc, #32]	; (7b0c <force_parameters+0x28>)
    7aea:	6342      	str	r2, [r0, #52]	; 0x34
	neuron->k_d = 0;//0.003 , needs adjustment
    7aec:	6383      	str	r3, [r0, #56]	; 0x38
	neuron-> normal_force_past = 0; 
    7aee:	6283      	str	r3, [r0, #40]	; 0x28
	// parameters shear force
	neuron->theta = 0; // maybe needs adjustment
    7af0:	63c3      	str	r3, [r0, #60]	; 0x3c
	neuron->r_s = 4.8; // needs adjustment
    7af2:	4a07      	ldr	r2, [pc, #28]	; (7b10 <force_parameters+0x2c>)
    7af4:	6402      	str	r2, [r0, #64]	; 0x40
	neuron->r_d = 0; // not relevant
    7af6:	6443      	str	r3, [r0, #68]	; 0x44
	neuron-> shear_force_past = 0; //not relevant
    7af8:	62c3      	str	r3, [r0, #44]	; 0x2c
	neuron->timestep_force = 10; // Depends on how many arrays are readout at the same time - 1 Array:10, 2 Arrays:20
    7afa:	4b06      	ldr	r3, [pc, #24]	; (7b14 <force_parameters+0x30>)
    7afc:	6483      	str	r3, [r0, #72]	; 0x48
	neuron->calculation_mode = 1; // 1: No Contact Modeling, 2. With Contact Modeling
    7afe:	2301      	movs	r3, #1
    7b00:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
	neuron->start_of_derivitiveCalc = true;
    7b04:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    7b08:	4770      	bx	lr
    7b0a:	bf00      	nop
    7b0c:	3f99999a 	.word	0x3f99999a
    7b10:	4099999a 	.word	0x4099999a
    7b14:	41200000 	.word	0x41200000

00007b18 <calc_current_normal_force>:
}

void calc_current_normal_force(struct fneuron_t *neuron, float force_z){
    7b18:	ee07 1a90 	vmov	s15, r1
	switch (neuron->calculation_mode)
    7b1c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    7b20:	2b01      	cmp	r3, #1
    7b22:	d002      	beq.n	7b2a <calc_current_normal_force+0x12>
    7b24:	2b02      	cmp	r3, #2
    7b26:	d00d      	beq.n	7b44 <calc_current_normal_force+0x2c>
    7b28:	4770      	bx	lr
	{
		case 1:;
			neuron->normal_force = force_z;
    7b2a:	6201      	str	r1, [r0, #32]
			neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    7b2c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    7b30:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    7b34:	ee67 6aa6 	vmul.f32	s13, s15, s13
    7b38:	ee37 7a26 	vadd.f32	s14, s14, s13
    7b3c:	ed80 7a06 	vstr	s14, [r0, #24]
			neuron->normal_force_past = neuron->normal_force;
    7b40:	6281      	str	r1, [r0, #40]	; 0x28
			break;
    7b42:	4770      	bx	lr
		
		case 2:;
			 if (neuron->start_of_derivitiveCalc == true)
    7b44:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
    7b48:	bb03      	cbnz	r3, 7b8c <calc_current_normal_force+0x74>
				 neuron->normal_force_past = neuron->normal_force;
				 neuron->start_of_derivitiveCalc == false;
			 }
			 else
			 {
				  neuron->normal_force = force_z;
    7b4a:	6201      	str	r1, [r0, #32]
				  float derivative;
				  derivative = (neuron->normal_force - neuron->normal_force_past) / neuron->timestep_force;
    7b4c:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
    7b50:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7b54:	ed90 6a12 	vldr	s12, [r0, #72]	; 0x48
    7b58:	eec7 6a06 	vdiv.f32	s13, s14, s12
				  if (derivative < 0)
    7b5c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    7b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7b64:	d41f      	bmi.n	7ba6 <calc_current_normal_force+0x8e>
				  {
					  derivative = derivative * -1;
				  }
				  neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force) + (neuron->k_d * derivative);
    7b66:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    7b6a:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
    7b6e:	ee27 6a86 	vmul.f32	s12, s15, s12
    7b72:	ee37 7a06 	vadd.f32	s14, s14, s12
    7b76:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
    7b7a:	ee66 6a86 	vmul.f32	s13, s13, s12
    7b7e:	ee37 7a26 	vadd.f32	s14, s14, s13
    7b82:	ed80 7a06 	vstr	s14, [r0, #24]
				  neuron->normal_force_past = neuron->normal_force;
    7b86:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    7b8a:	4770      	bx	lr
				 neuron->normal_force = force_z;
    7b8c:	6201      	str	r1, [r0, #32]
				 neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    7b8e:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    7b92:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    7b96:	ee67 6aa6 	vmul.f32	s13, s15, s13
    7b9a:	ee37 7a26 	vadd.f32	s14, s14, s13
    7b9e:	ed80 7a06 	vstr	s14, [r0, #24]
				 neuron->normal_force_past = neuron->normal_force;
    7ba2:	6281      	str	r1, [r0, #40]	; 0x28
    7ba4:	4770      	bx	lr
					  derivative = derivative * -1;
    7ba6:	eef1 6a66 	vneg.f32	s13, s13
    7baa:	e7dc      	b.n	7b66 <calc_current_normal_force+0x4e>

00007bac <calc_current_shear_force>:
        neuron->normal_force_past = neuron->normal_force;
    }
*/
}

void calc_current_shear_force(struct fneuron_t *neuron,float force_r){//(fneuron_t *neuron, bool start, float force_x, float force_y
    7bac:	ee07 1a90 	vmov	s15, r1
	
	neuron->shear_force = force_r;
    7bb0:	6241      	str	r1, [r0, #36]	; 0x24
	neuron->cell_current = neuron->theta + (neuron->r_s * neuron->shear_force);
    7bb2:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    7bb6:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    7bba:	ee67 6aa6 	vmul.f32	s13, s15, s13
    7bbe:	ee37 7a26 	vadd.f32	s14, s14, s13
    7bc2:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->shear_force_past = neuron->shear_force;
    7bc6:	62c1      	str	r1, [r0, #44]	; 0x2c
    7bc8:	4770      	bx	lr
    7bca:	0000      	movs	r0, r0
    7bcc:	0000      	movs	r0, r0
	...

00007bd0 <step_f>:
	
}

void step_f(struct fneuron_t *neuron, float synapse, float ms) {
    7bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bd4:	ed2d 8b04 	vpush	{d8-d9}
    7bd8:	b082      	sub	sp, #8
	// step a neuron through ms milliseconds with synapse input
	//   if you don't have a good reason to do otherwise, keep ms between 0.1
	//   and 1.0
	if (neuron->potential >= 30) {
    7bda:	ed90 8a04 	vldr	s16, [r0, #16]
    7bde:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    7be2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    7be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bea:	da6c      	bge.n	7cc6 <step_f+0xf6>
    7bec:	ee08 2a90 	vmov	s17, r2
    7bf0:	468a      	mov	sl, r1
    7bf2:	4604      	mov	r4, r0
		neuron->potential = neuron->c;
		neuron->recovery += neuron->d;
		return;
	}
	float v = neuron->potential;
	float u = neuron->recovery;
    7bf4:	ed90 9a05 	vldr	s18, [r0, #20]
	neuron->potential = v + ms * (0.04 * v * v + 5 * v + 140 - u + synapse);
    7bf8:	4d3b      	ldr	r5, [pc, #236]	; (7ce8 <step_f+0x118>)
    7bfa:	ee18 0a10 	vmov	r0, s16
    7bfe:	47a8      	blx	r5
    7c00:	4680      	mov	r8, r0
    7c02:	4689      	mov	r9, r1
    7c04:	4f39      	ldr	r7, [pc, #228]	; (7cec <step_f+0x11c>)
    7c06:	a336      	add	r3, pc, #216	; (adr r3, 7ce0 <step_f+0x110>)
    7c08:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c0c:	47b8      	blx	r7
    7c0e:	4602      	mov	r2, r0
    7c10:	460b      	mov	r3, r1
    7c12:	e9cd 8900 	strd	r8, r9, [sp]
    7c16:	4640      	mov	r0, r8
    7c18:	4649      	mov	r1, r9
    7c1a:	47b8      	blx	r7
    7c1c:	4680      	mov	r8, r0
    7c1e:	4689      	mov	r9, r1
    7c20:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    7c24:	ee68 7a27 	vmul.f32	s15, s16, s15
    7c28:	ee17 0a90 	vmov	r0, s15
    7c2c:	47a8      	blx	r5
    7c2e:	4e30      	ldr	r6, [pc, #192]	; (7cf0 <step_f+0x120>)
    7c30:	4602      	mov	r2, r0
    7c32:	460b      	mov	r3, r1
    7c34:	4640      	mov	r0, r8
    7c36:	4649      	mov	r1, r9
    7c38:	47b0      	blx	r6
    7c3a:	2200      	movs	r2, #0
    7c3c:	4b2d      	ldr	r3, [pc, #180]	; (7cf4 <step_f+0x124>)
    7c3e:	47b0      	blx	r6
    7c40:	4680      	mov	r8, r0
    7c42:	4689      	mov	r9, r1
    7c44:	ee19 0a10 	vmov	r0, s18
    7c48:	47a8      	blx	r5
    7c4a:	4602      	mov	r2, r0
    7c4c:	460b      	mov	r3, r1
    7c4e:	4640      	mov	r0, r8
    7c50:	4649      	mov	r1, r9
    7c52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7cfc <step_f+0x12c>
    7c56:	47c0      	blx	r8
    7c58:	4680      	mov	r8, r0
    7c5a:	4689      	mov	r9, r1
    7c5c:	4650      	mov	r0, sl
    7c5e:	47a8      	blx	r5
    7c60:	4642      	mov	r2, r8
    7c62:	464b      	mov	r3, r9
    7c64:	47b0      	blx	r6
    7c66:	4680      	mov	r8, r0
    7c68:	4689      	mov	r9, r1
    7c6a:	ee18 0a90 	vmov	r0, s17
    7c6e:	47a8      	blx	r5
    7c70:	4642      	mov	r2, r8
    7c72:	464b      	mov	r3, r9
    7c74:	47b8      	blx	r7
    7c76:	4602      	mov	r2, r0
    7c78:	460b      	mov	r3, r1
    7c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
    7c7e:	47b0      	blx	r6
    7c80:	4b1d      	ldr	r3, [pc, #116]	; (7cf8 <step_f+0x128>)
    7c82:	4798      	blx	r3
    7c84:	ee07 0a90 	vmov	s15, r0
    7c88:	6120      	str	r0, [r4, #16]
	if (neuron -> potential > 30) {
    7c8a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    7c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
    7c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c96:	dd01      	ble.n	7c9c <step_f+0xcc>
		neuron -> potential = 30;
    7c98:	ed84 7a04 	vstr	s14, [r4, #16]
	}
	neuron->recovery = u + ms * (neuron->a * (neuron->b * v - u));
    7c9c:	edd4 7a00 	vldr	s15, [r4]
    7ca0:	ed94 7a01 	vldr	s14, [r4, #4]
    7ca4:	ee28 8a07 	vmul.f32	s16, s16, s14
    7ca8:	ee38 8a49 	vsub.f32	s16, s16, s18
    7cac:	ee27 8a88 	vmul.f32	s16, s15, s16
    7cb0:	ee68 8a88 	vmul.f32	s17, s17, s16
    7cb4:	ee79 8a28 	vadd.f32	s17, s18, s17
    7cb8:	edc4 8a05 	vstr	s17, [r4, #20]
	return;
}
    7cbc:	b002      	add	sp, #8
    7cbe:	ecbd 8b04 	vpop	{d8-d9}
    7cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		neuron->potential = neuron->c;
    7cc6:	6883      	ldr	r3, [r0, #8]
    7cc8:	6103      	str	r3, [r0, #16]
		neuron->recovery += neuron->d;
    7cca:	ed90 7a03 	vldr	s14, [r0, #12]
    7cce:	edd0 7a05 	vldr	s15, [r0, #20]
    7cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
    7cd6:	edc0 7a05 	vstr	s15, [r0, #20]
		return;
    7cda:	e7ef      	b.n	7cbc <step_f+0xec>
    7cdc:	f3af 8000 	nop.w
    7ce0:	47ae147b 	.word	0x47ae147b
    7ce4:	3fa47ae1 	.word	0x3fa47ae1
    7ce8:	00009315 	.word	0x00009315
    7cec:	000093bd 	.word	0x000093bd
    7cf0:	00009059 	.word	0x00009059
    7cf4:	40618000 	.word	0x40618000
    7cf8:	0000991d 	.word	0x0000991d
    7cfc:	00009055 	.word	0x00009055

00007d00 <neuron_init_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}
*/

void neuron_init_row(struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    7d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d04:	4680      	mov	r8, r0
    7d06:	460f      	mov	r7, r1
    7d08:	4615      	mov	r5, r2
	
	RS(&neuron_pair_top->neuron_normal);
    7d0a:	4e0f      	ldr	r6, [pc, #60]	; (7d48 <neuron_init_row+0x48>)
    7d0c:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_normal);
    7d0e:	4640      	mov	r0, r8
    7d10:	4c0e      	ldr	r4, [pc, #56]	; (7d4c <neuron_init_row+0x4c>)
    7d12:	47a0      	blx	r4
	
	RS(&neuron_pair_top->neuron_shear);
    7d14:	f108 0850 	add.w	r8, r8, #80	; 0x50
    7d18:	4640      	mov	r0, r8
    7d1a:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_shear);
    7d1c:	4640      	mov	r0, r8
    7d1e:	47a0      	blx	r4
	
	
	RS(&neuron_pair_middle->neuron_normal);
    7d20:	4638      	mov	r0, r7
    7d22:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_normal);
    7d24:	4638      	mov	r0, r7
    7d26:	47a0      	blx	r4
	
	RS(&neuron_pair_middle->neuron_shear);
    7d28:	3750      	adds	r7, #80	; 0x50
    7d2a:	4638      	mov	r0, r7
    7d2c:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_shear);
    7d2e:	4638      	mov	r0, r7
    7d30:	47a0      	blx	r4
	
	
	RS(&neuron_pair_bottom->neuron_normal);
    7d32:	4628      	mov	r0, r5
    7d34:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_normal);
    7d36:	4628      	mov	r0, r5
    7d38:	47a0      	blx	r4
	
	RS(&neuron_pair_bottom->neuron_shear);
    7d3a:	3550      	adds	r5, #80	; 0x50
    7d3c:	4628      	mov	r0, r5
    7d3e:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_shear);
    7d40:	4628      	mov	r0, r5
    7d42:	47a0      	blx	r4
    7d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d48:	00007ab5 	.word	0x00007ab5
    7d4c:	00007ae5 	.word	0x00007ae5

00007d50 <neuron_init_array>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}

void neuron_init_array(struct neuron_pair *neuron_pair_1, struct neuron_pair *neuron_pair_2, struct neuron_pair *neuron_pair_3, struct neuron_pair *neuron_pair_4, struct neuron_pair *neuron_pair_5, struct neuron_pair *neuron_pair_6, struct neuron_pair *neuron_pair_7, struct neuron_pair *neuron_pair_8, struct neuron_pair *neuron_pair_9)
{
    7d50:	b538      	push	{r3, r4, r5, lr}
    7d52:	461d      	mov	r5, r3
	neuron_init_row(neuron_pair_1, neuron_pair_2, neuron_pair_3);
    7d54:	4c05      	ldr	r4, [pc, #20]	; (7d6c <neuron_init_array+0x1c>)
    7d56:	47a0      	blx	r4
	neuron_init_row(neuron_pair_4, neuron_pair_5, neuron_pair_6);
    7d58:	9a05      	ldr	r2, [sp, #20]
    7d5a:	9904      	ldr	r1, [sp, #16]
    7d5c:	4628      	mov	r0, r5
    7d5e:	47a0      	blx	r4
	neuron_init_row(neuron_pair_7, neuron_pair_8, neuron_pair_9);
    7d60:	9a08      	ldr	r2, [sp, #32]
    7d62:	9907      	ldr	r1, [sp, #28]
    7d64:	9806      	ldr	r0, [sp, #24]
    7d66:	47a0      	blx	r4
    7d68:	bd38      	pop	{r3, r4, r5, pc}
    7d6a:	bf00      	nop
    7d6c:	00007d01 	.word	0x00007d01

00007d70 <neuron_calc_row>:
}

 void neuron_calc_row(struct sensorRow_Values *sensor_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    7d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d74:	b085      	sub	sp, #20
    7d76:	4604      	mov	r4, r0
    7d78:	460d      	mov	r5, r1
    7d7a:	4617      	mov	r7, r2
    7d7c:	461e      	mov	r6, r3
	 
	 uint8_t repeatition = (uint8_t) (neuron_pair_top->neuron_normal.timestep_force/neuron_pair_top->neuron_normal.timestep_neuron);
    7d7e:	edd1 6a12 	vldr	s13, [r1, #72]	; 0x48
    7d82:	ed91 7a07 	vldr	s14, [r1, #28]
    7d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
    7d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    7d8e:	edcd 7a00 	vstr	s15, [sp]
    7d92:	f89d 9000 	ldrb.w	r9, [sp]
	 
	 calc_current_normal_force(&neuron_pair_top->neuron_normal,sensor_row->force_z_top);
    7d96:	9100      	str	r1, [sp, #0]
    7d98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7d9a:	4628      	mov	r0, r5
    7d9c:	f8df a080 	ldr.w	sl, [pc, #128]	; 7e20 <neuron_calc_row+0xb0>
    7da0:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_top->neuron_shear,sensor_row->force_r_top);
    7da2:	f105 0b50 	add.w	fp, r5, #80	; 0x50
    7da6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7da8:	4658      	mov	r0, fp
    7daa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7e24 <neuron_calc_row+0xb4>
    7dae:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_middle->neuron_normal,sensor_row->force_z_middle);
    7db0:	9701      	str	r7, [sp, #4]
    7db2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7db4:	4638      	mov	r0, r7
    7db6:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_middle->neuron_shear,sensor_row->force_r_middle);
    7db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    7dbc:	9302      	str	r3, [sp, #8]
    7dbe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7dc0:	4618      	mov	r0, r3
    7dc2:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_bottom->neuron_normal,sensor_row->force_z_bottom);
    7dc4:	9603      	str	r6, [sp, #12]
    7dc6:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7dc8:	4630      	mov	r0, r6
    7dca:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_bottom->neuron_shear,sensor_row->force_r_bottom);
    7dcc:	f106 0a50 	add.w	sl, r6, #80	; 0x50
    7dd0:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7dd2:	4650      	mov	r0, sl
    7dd4:	47c0      	blx	r8
	 
	 for(int i = 0; i<repeatition; i++){
    7dd6:	f04f 0800 	mov.w	r8, #0
    7dda:	e01a      	b.n	7e12 <neuron_calc_row+0xa2>
		step_f(&neuron_pair_top->neuron_normal, neuron_pair_top->neuron_normal.cell_current,neuron_pair_top->neuron_normal.timestep_neuron);//neuron_pair_top->neuron_normal.timestep_neuron
    7ddc:	69ea      	ldr	r2, [r5, #28]
    7dde:	69a9      	ldr	r1, [r5, #24]
    7de0:	9800      	ldr	r0, [sp, #0]
    7de2:	4c0e      	ldr	r4, [pc, #56]	; (7e1c <neuron_calc_row+0xac>)
    7de4:	47a0      	blx	r4
		step_f(&neuron_pair_top->neuron_shear, neuron_pair_top->neuron_shear.cell_current, neuron_pair_top->neuron_shear.timestep_neuron);
    7de6:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    7de8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    7dea:	4658      	mov	r0, fp
    7dec:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_normal, neuron_pair_middle->neuron_normal.cell_current, neuron_pair_middle->neuron_normal.timestep_neuron);
    7dee:	69fa      	ldr	r2, [r7, #28]
    7df0:	69b9      	ldr	r1, [r7, #24]
    7df2:	9801      	ldr	r0, [sp, #4]
    7df4:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_shear, neuron_pair_middle->neuron_shear.cell_current, neuron_pair_middle->neuron_shear.timestep_neuron);
    7df6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7df8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    7dfa:	9802      	ldr	r0, [sp, #8]
    7dfc:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_normal, neuron_pair_bottom->neuron_normal.cell_current, neuron_pair_bottom->neuron_normal.timestep_neuron);
    7dfe:	69f2      	ldr	r2, [r6, #28]
    7e00:	69b1      	ldr	r1, [r6, #24]
    7e02:	9803      	ldr	r0, [sp, #12]
    7e04:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_shear, neuron_pair_bottom->neuron_shear.cell_current, neuron_pair_bottom->neuron_shear.timestep_neuron);
    7e06:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
    7e08:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    7e0a:	4650      	mov	r0, sl
    7e0c:	47a0      	blx	r4
	 for(int i = 0; i<repeatition; i++){
    7e0e:	f108 0801 	add.w	r8, r8, #1
    7e12:	45c8      	cmp	r8, r9
    7e14:	dbe2      	blt.n	7ddc <neuron_calc_row+0x6c>
	 }
}
    7e16:	b005      	add	sp, #20
    7e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e1c:	00007bd1 	.word	0x00007bd1
    7e20:	00007b19 	.word	0x00007b19
    7e24:	00007bad 	.word	0x00007bad

00007e28 <update_struct_values_neural>:
	step_f(neuron3_normal, neuron3_normal->cell_current, neuron3_normal->timestep_neuron);
	step_f(neuron3_shear, neuron3_shear->cell_current, neuron3_shear->timestep_neuron);
}
*/

void update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    7e28:	b410      	push	{r4}
	neuron_row->neuron_top_normal = neuron_pair_top->neuron_normal.potential;
    7e2a:	690c      	ldr	r4, [r1, #16]
    7e2c:	6004      	str	r4, [r0, #0]
	neuron_row->neuron_top_shear = neuron_pair_top->neuron_shear.potential;
    7e2e:	6e09      	ldr	r1, [r1, #96]	; 0x60
    7e30:	6041      	str	r1, [r0, #4]
	
	neuron_row->neuron_middle_normal = neuron_pair_middle->neuron_normal.potential;
    7e32:	6911      	ldr	r1, [r2, #16]
    7e34:	6081      	str	r1, [r0, #8]
	neuron_row->neuron_middle_shear = neuron_pair_middle->neuron_shear.potential;
    7e36:	6e12      	ldr	r2, [r2, #96]	; 0x60
    7e38:	60c2      	str	r2, [r0, #12]
	
	neuron_row->neuron_bottom_normal = neuron_pair_bottom->neuron_normal.potential;
    7e3a:	691a      	ldr	r2, [r3, #16]
    7e3c:	6102      	str	r2, [r0, #16]
	neuron_row->neuron_bottom_shear = neuron_pair_bottom->neuron_shear.potential;
    7e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7e40:	6143      	str	r3, [r0, #20]
}
    7e42:	f85d 4b04 	ldr.w	r4, [sp], #4
    7e46:	4770      	bx	lr

00007e48 <pow>:
    7e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e4c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 8140 <pow+0x2f8>
    7e50:	b08d      	sub	sp, #52	; 0x34
    7e52:	4606      	mov	r6, r0
    7e54:	460f      	mov	r7, r1
    7e56:	4614      	mov	r4, r2
    7e58:	461d      	mov	r5, r3
    7e5a:	f000 f9d1 	bl	8200 <__ieee754_pow>
    7e5e:	f999 8000 	ldrsb.w	r8, [r9]
    7e62:	f1b8 3fff 	cmp.w	r8, #4294967295
    7e66:	e9cd 0100 	strd	r0, r1, [sp]
    7e6a:	d036      	beq.n	7eda <pow+0x92>
    7e6c:	4622      	mov	r2, r4
    7e6e:	462b      	mov	r3, r5
    7e70:	4620      	mov	r0, r4
    7e72:	4629      	mov	r1, r5
    7e74:	f001 fd3c 	bl	98f0 <__aeabi_dcmpun>
    7e78:	4683      	mov	fp, r0
    7e7a:	bb70      	cbnz	r0, 7eda <pow+0x92>
    7e7c:	4632      	mov	r2, r6
    7e7e:	463b      	mov	r3, r7
    7e80:	4630      	mov	r0, r6
    7e82:	4639      	mov	r1, r7
    7e84:	f001 fd34 	bl	98f0 <__aeabi_dcmpun>
    7e88:	2200      	movs	r2, #0
    7e8a:	4682      	mov	sl, r0
    7e8c:	2300      	movs	r3, #0
    7e8e:	2800      	cmp	r0, #0
    7e90:	f040 80a0 	bne.w	7fd4 <pow+0x18c>
    7e94:	4630      	mov	r0, r6
    7e96:	4639      	mov	r1, r7
    7e98:	f001 fcf8 	bl	988c <__aeabi_dcmpeq>
    7e9c:	b310      	cbz	r0, 7ee4 <pow+0x9c>
    7e9e:	2200      	movs	r2, #0
    7ea0:	2300      	movs	r3, #0
    7ea2:	4620      	mov	r0, r4
    7ea4:	4629      	mov	r1, r5
    7ea6:	f001 fcf1 	bl	988c <__aeabi_dcmpeq>
    7eaa:	4683      	mov	fp, r0
    7eac:	2800      	cmp	r0, #0
    7eae:	d06a      	beq.n	7f86 <pow+0x13e>
    7eb0:	2201      	movs	r2, #1
    7eb2:	4b9c      	ldr	r3, [pc, #624]	; (8124 <pow+0x2dc>)
    7eb4:	9202      	str	r2, [sp, #8]
    7eb6:	2100      	movs	r1, #0
    7eb8:	2200      	movs	r2, #0
    7eba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    7ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
    7ec2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    7ec6:	e9cd 1208 	strd	r1, r2, [sp, #32]
    7eca:	9303      	str	r3, [sp, #12]
    7ecc:	f1b8 0f00 	cmp.w	r8, #0
    7ed0:	d045      	beq.n	7f5e <pow+0x116>
    7ed2:	4c95      	ldr	r4, [pc, #596]	; (8128 <pow+0x2e0>)
    7ed4:	2300      	movs	r3, #0
    7ed6:	e9cd 3400 	strd	r3, r4, [sp]
    7eda:	e9dd 0100 	ldrd	r0, r1, [sp]
    7ede:	b00d      	add	sp, #52	; 0x34
    7ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
    7ee8:	f000 ff90 	bl	8e0c <finite>
    7eec:	4680      	mov	r8, r0
    7eee:	2800      	cmp	r0, #0
    7ef0:	f000 808b 	beq.w	800a <pow+0x1c2>
    7ef4:	f04f 0a00 	mov.w	sl, #0
    7ef8:	f04f 0b00 	mov.w	fp, #0
    7efc:	4652      	mov	r2, sl
    7efe:	465b      	mov	r3, fp
    7f00:	e9dd 0100 	ldrd	r0, r1, [sp]
    7f04:	f001 fcc2 	bl	988c <__aeabi_dcmpeq>
    7f08:	2800      	cmp	r0, #0
    7f0a:	d0e6      	beq.n	7eda <pow+0x92>
    7f0c:	4630      	mov	r0, r6
    7f0e:	4639      	mov	r1, r7
    7f10:	f000 ff7c 	bl	8e0c <finite>
    7f14:	2800      	cmp	r0, #0
    7f16:	d0e0      	beq.n	7eda <pow+0x92>
    7f18:	4620      	mov	r0, r4
    7f1a:	4629      	mov	r1, r5
    7f1c:	f000 ff76 	bl	8e0c <finite>
    7f20:	2800      	cmp	r0, #0
    7f22:	d0da      	beq.n	7eda <pow+0x92>
    7f24:	f999 3000 	ldrsb.w	r3, [r9]
    7f28:	4a7e      	ldr	r2, [pc, #504]	; (8124 <pow+0x2dc>)
    7f2a:	9203      	str	r2, [sp, #12]
    7f2c:	2104      	movs	r1, #4
    7f2e:	2200      	movs	r2, #0
    7f30:	2b02      	cmp	r3, #2
    7f32:	e9cd 6704 	strd	r6, r7, [sp, #16]
    7f36:	e9cd 4506 	strd	r4, r5, [sp, #24]
    7f3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
    7f3e:	9102      	str	r1, [sp, #8]
    7f40:	920a      	str	r2, [sp, #40]	; 0x28
    7f42:	d003      	beq.n	7f4c <pow+0x104>
    7f44:	a802      	add	r0, sp, #8
    7f46:	f000 ff67 	bl	8e18 <matherr>
    7f4a:	b968      	cbnz	r0, 7f68 <pow+0x120>
    7f4c:	f001 fd36 	bl	99bc <__errno>
    7f50:	2322      	movs	r3, #34	; 0x22
    7f52:	6003      	str	r3, [r0, #0]
    7f54:	e008      	b.n	7f68 <pow+0x120>
    7f56:	2300      	movs	r3, #0
    7f58:	2400      	movs	r4, #0
    7f5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
    7f5e:	a802      	add	r0, sp, #8
    7f60:	f000 ff5a 	bl	8e18 <matherr>
    7f64:	2800      	cmp	r0, #0
    7f66:	d030      	beq.n	7fca <pow+0x182>
    7f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f6a:	b11b      	cbz	r3, 7f74 <pow+0x12c>
    7f6c:	f001 fd26 	bl	99bc <__errno>
    7f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f72:	6003      	str	r3, [r0, #0]
    7f74:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    7f78:	e9cd 3400 	strd	r3, r4, [sp]
    7f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
    7f80:	b00d      	add	sp, #52	; 0x34
    7f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f86:	4620      	mov	r0, r4
    7f88:	4629      	mov	r1, r5
    7f8a:	f000 ff3f 	bl	8e0c <finite>
    7f8e:	2800      	cmp	r0, #0
    7f90:	d0a3      	beq.n	7eda <pow+0x92>
    7f92:	2200      	movs	r2, #0
    7f94:	2300      	movs	r3, #0
    7f96:	4620      	mov	r0, r4
    7f98:	4629      	mov	r1, r5
    7f9a:	f001 fc81 	bl	98a0 <__aeabi_dcmplt>
    7f9e:	2800      	cmp	r0, #0
    7fa0:	d09b      	beq.n	7eda <pow+0x92>
    7fa2:	f999 3000 	ldrsb.w	r3, [r9]
    7fa6:	4a5f      	ldr	r2, [pc, #380]	; (8124 <pow+0x2dc>)
    7fa8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    7fac:	2101      	movs	r1, #1
    7fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
    7fb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    7fb6:	9102      	str	r1, [sp, #8]
    7fb8:	9203      	str	r2, [sp, #12]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d0cb      	beq.n	7f56 <pow+0x10e>
    7fbe:	495b      	ldr	r1, [pc, #364]	; (812c <pow+0x2e4>)
    7fc0:	2000      	movs	r0, #0
    7fc2:	2b02      	cmp	r3, #2
    7fc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    7fc8:	d1c9      	bne.n	7f5e <pow+0x116>
    7fca:	f001 fcf7 	bl	99bc <__errno>
    7fce:	2321      	movs	r3, #33	; 0x21
    7fd0:	6003      	str	r3, [r0, #0]
    7fd2:	e7c9      	b.n	7f68 <pow+0x120>
    7fd4:	4620      	mov	r0, r4
    7fd6:	4629      	mov	r1, r5
    7fd8:	f001 fc58 	bl	988c <__aeabi_dcmpeq>
    7fdc:	2800      	cmp	r0, #0
    7fde:	f43f af7c 	beq.w	7eda <pow+0x92>
    7fe2:	4b51      	ldr	r3, [pc, #324]	; (8128 <pow+0x2e0>)
    7fe4:	494f      	ldr	r1, [pc, #316]	; (8124 <pow+0x2dc>)
    7fe6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    7fea:	2001      	movs	r0, #1
    7fec:	2200      	movs	r2, #0
    7fee:	f1b8 0f02 	cmp.w	r8, #2
    7ff2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    7ff6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    7ffa:	9002      	str	r0, [sp, #8]
    7ffc:	9103      	str	r1, [sp, #12]
    7ffe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8002:	d1ac      	bne.n	7f5e <pow+0x116>
    8004:	e9cd 2300 	strd	r2, r3, [sp]
    8008:	e767      	b.n	7eda <pow+0x92>
    800a:	4630      	mov	r0, r6
    800c:	4639      	mov	r1, r7
    800e:	f000 fefd 	bl	8e0c <finite>
    8012:	2800      	cmp	r0, #0
    8014:	f43f af6e 	beq.w	7ef4 <pow+0xac>
    8018:	4620      	mov	r0, r4
    801a:	4629      	mov	r1, r5
    801c:	f000 fef6 	bl	8e0c <finite>
    8020:	2800      	cmp	r0, #0
    8022:	f43f af67 	beq.w	7ef4 <pow+0xac>
    8026:	e9dd 2300 	ldrd	r2, r3, [sp]
    802a:	4610      	mov	r0, r2
    802c:	4619      	mov	r1, r3
    802e:	f001 fc5f 	bl	98f0 <__aeabi_dcmpun>
    8032:	2800      	cmp	r0, #0
    8034:	d158      	bne.n	80e8 <pow+0x2a0>
    8036:	2303      	movs	r3, #3
    8038:	f999 8000 	ldrsb.w	r8, [r9]
    803c:	9302      	str	r3, [sp, #8]
    803e:	4b39      	ldr	r3, [pc, #228]	; (8124 <pow+0x2dc>)
    8040:	900a      	str	r0, [sp, #40]	; 0x28
    8042:	9303      	str	r3, [sp, #12]
    8044:	e9cd 6704 	strd	r6, r7, [sp, #16]
    8048:	e9cd 4506 	strd	r4, r5, [sp, #24]
    804c:	2200      	movs	r2, #0
    804e:	2300      	movs	r3, #0
    8050:	4630      	mov	r0, r6
    8052:	4639      	mov	r1, r7
    8054:	f1b8 0f00 	cmp.w	r8, #0
    8058:	d126      	bne.n	80a8 <pow+0x260>
    805a:	4f35      	ldr	r7, [pc, #212]	; (8130 <pow+0x2e8>)
    805c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    8060:	e9cd 6708 	strd	r6, r7, [sp, #32]
    8064:	f001 fc1c 	bl	98a0 <__aeabi_dcmplt>
    8068:	2800      	cmp	r0, #0
    806a:	f43f af6b 	beq.w	7f44 <pow+0xfc>
    806e:	2200      	movs	r2, #0
    8070:	4b30      	ldr	r3, [pc, #192]	; (8134 <pow+0x2ec>)
    8072:	4620      	mov	r0, r4
    8074:	4629      	mov	r1, r5
    8076:	f001 f9a1 	bl	93bc <__aeabi_dmul>
    807a:	4604      	mov	r4, r0
    807c:	460d      	mov	r5, r1
    807e:	f000 fed3 	bl	8e28 <rint>
    8082:	4602      	mov	r2, r0
    8084:	460b      	mov	r3, r1
    8086:	4620      	mov	r0, r4
    8088:	4629      	mov	r1, r5
    808a:	f001 fbff 	bl	988c <__aeabi_dcmpeq>
    808e:	bb40      	cbnz	r0, 80e2 <pow+0x29a>
    8090:	4b29      	ldr	r3, [pc, #164]	; (8138 <pow+0x2f0>)
    8092:	f999 8000 	ldrsb.w	r8, [r9]
    8096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    809a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    809e:	f1b8 0f02 	cmp.w	r8, #2
    80a2:	f47f af4f 	bne.w	7f44 <pow+0xfc>
    80a6:	e751      	b.n	7f4c <pow+0x104>
    80a8:	4f24      	ldr	r7, [pc, #144]	; (813c <pow+0x2f4>)
    80aa:	2600      	movs	r6, #0
    80ac:	e9cd 6708 	strd	r6, r7, [sp, #32]
    80b0:	f001 fbf6 	bl	98a0 <__aeabi_dcmplt>
    80b4:	2800      	cmp	r0, #0
    80b6:	d0f2      	beq.n	809e <pow+0x256>
    80b8:	2200      	movs	r2, #0
    80ba:	4b1e      	ldr	r3, [pc, #120]	; (8134 <pow+0x2ec>)
    80bc:	4620      	mov	r0, r4
    80be:	4629      	mov	r1, r5
    80c0:	f001 f97c 	bl	93bc <__aeabi_dmul>
    80c4:	4604      	mov	r4, r0
    80c6:	460d      	mov	r5, r1
    80c8:	f000 feae 	bl	8e28 <rint>
    80cc:	4602      	mov	r2, r0
    80ce:	460b      	mov	r3, r1
    80d0:	4620      	mov	r0, r4
    80d2:	4629      	mov	r1, r5
    80d4:	f001 fbda 	bl	988c <__aeabi_dcmpeq>
    80d8:	b918      	cbnz	r0, 80e2 <pow+0x29a>
    80da:	4b14      	ldr	r3, [pc, #80]	; (812c <pow+0x2e4>)
    80dc:	2200      	movs	r2, #0
    80de:	e9cd 2308 	strd	r2, r3, [sp, #32]
    80e2:	f999 8000 	ldrsb.w	r8, [r9]
    80e6:	e7da      	b.n	809e <pow+0x256>
    80e8:	f999 9000 	ldrsb.w	r9, [r9]
    80ec:	4b0d      	ldr	r3, [pc, #52]	; (8124 <pow+0x2dc>)
    80ee:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    80f2:	2201      	movs	r2, #1
    80f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
    80f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    80fc:	9202      	str	r2, [sp, #8]
    80fe:	9303      	str	r3, [sp, #12]
    8100:	f1b9 0f00 	cmp.w	r9, #0
    8104:	f43f af27 	beq.w	7f56 <pow+0x10e>
    8108:	2200      	movs	r2, #0
    810a:	2300      	movs	r3, #0
    810c:	4610      	mov	r0, r2
    810e:	4619      	mov	r1, r3
    8110:	f001 fa7e 	bl	9610 <__aeabi_ddiv>
    8114:	f1b9 0f02 	cmp.w	r9, #2
    8118:	e9cd 0108 	strd	r0, r1, [sp, #32]
    811c:	f43f af55 	beq.w	7fca <pow+0x182>
    8120:	e71d      	b.n	7f5e <pow+0x116>
    8122:	bf00      	nop
    8124:	00009c18 	.word	0x00009c18
    8128:	3ff00000 	.word	0x3ff00000
    812c:	fff00000 	.word	0xfff00000
    8130:	47efffff 	.word	0x47efffff
    8134:	3fe00000 	.word	0x3fe00000
    8138:	c7efffff 	.word	0xc7efffff
    813c:	7ff00000 	.word	0x7ff00000
    8140:	200000ee 	.word	0x200000ee

00008144 <sqrt>:
    8144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8148:	b08b      	sub	sp, #44	; 0x2c
    814a:	4604      	mov	r4, r0
    814c:	460d      	mov	r5, r1
    814e:	f000 fd9d 	bl	8c8c <__ieee754_sqrt>
    8152:	4b29      	ldr	r3, [pc, #164]	; (81f8 <sqrt+0xb4>)
    8154:	f993 a000 	ldrsb.w	sl, [r3]
    8158:	f1ba 3fff 	cmp.w	sl, #4294967295
    815c:	4606      	mov	r6, r0
    815e:	460f      	mov	r7, r1
    8160:	d012      	beq.n	8188 <sqrt+0x44>
    8162:	4622      	mov	r2, r4
    8164:	462b      	mov	r3, r5
    8166:	4620      	mov	r0, r4
    8168:	4629      	mov	r1, r5
    816a:	f001 fbc1 	bl	98f0 <__aeabi_dcmpun>
    816e:	4683      	mov	fp, r0
    8170:	b950      	cbnz	r0, 8188 <sqrt+0x44>
    8172:	f04f 0800 	mov.w	r8, #0
    8176:	f04f 0900 	mov.w	r9, #0
    817a:	4642      	mov	r2, r8
    817c:	464b      	mov	r3, r9
    817e:	4620      	mov	r0, r4
    8180:	4629      	mov	r1, r5
    8182:	f001 fb8d 	bl	98a0 <__aeabi_dcmplt>
    8186:	b920      	cbnz	r0, 8192 <sqrt+0x4e>
    8188:	4630      	mov	r0, r6
    818a:	4639      	mov	r1, r7
    818c:	b00b      	add	sp, #44	; 0x2c
    818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8192:	4b1a      	ldr	r3, [pc, #104]	; (81fc <sqrt+0xb8>)
    8194:	f8cd b020 	str.w	fp, [sp, #32]
    8198:	2201      	movs	r2, #1
    819a:	e9cd 4504 	strd	r4, r5, [sp, #16]
    819e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    81a2:	e88d 000c 	stmia.w	sp, {r2, r3}
    81a6:	f1ba 0f00 	cmp.w	sl, #0
    81aa:	d017      	beq.n	81dc <sqrt+0x98>
    81ac:	4642      	mov	r2, r8
    81ae:	464b      	mov	r3, r9
    81b0:	4640      	mov	r0, r8
    81b2:	4649      	mov	r1, r9
    81b4:	f001 fa2c 	bl	9610 <__aeabi_ddiv>
    81b8:	f1ba 0f02 	cmp.w	sl, #2
    81bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    81c0:	d10e      	bne.n	81e0 <sqrt+0x9c>
    81c2:	f001 fbfb 	bl	99bc <__errno>
    81c6:	2321      	movs	r3, #33	; 0x21
    81c8:	6003      	str	r3, [r0, #0]
    81ca:	9b08      	ldr	r3, [sp, #32]
    81cc:	b973      	cbnz	r3, 81ec <sqrt+0xa8>
    81ce:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    81d2:	4630      	mov	r0, r6
    81d4:	4639      	mov	r1, r7
    81d6:	b00b      	add	sp, #44	; 0x2c
    81d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
    81e0:	4668      	mov	r0, sp
    81e2:	f000 fe19 	bl	8e18 <matherr>
    81e6:	2800      	cmp	r0, #0
    81e8:	d1ef      	bne.n	81ca <sqrt+0x86>
    81ea:	e7ea      	b.n	81c2 <sqrt+0x7e>
    81ec:	f001 fbe6 	bl	99bc <__errno>
    81f0:	9b08      	ldr	r3, [sp, #32]
    81f2:	6003      	str	r3, [r0, #0]
    81f4:	e7eb      	b.n	81ce <sqrt+0x8a>
    81f6:	bf00      	nop
    81f8:	200000ee 	.word	0x200000ee
    81fc:	00009c1c 	.word	0x00009c1c

00008200 <__ieee754_pow>:
    8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8204:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    8208:	ea57 0402 	orrs.w	r4, r7, r2
    820c:	b093      	sub	sp, #76	; 0x4c
    820e:	d037      	beq.n	8280 <__ieee754_pow+0x80>
    8210:	4c67      	ldr	r4, [pc, #412]	; (83b0 <__ieee754_pow+0x1b0>)
    8212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    8216:	42a6      	cmp	r6, r4
    8218:	4683      	mov	fp, r0
    821a:	460d      	mov	r5, r1
    821c:	dc29      	bgt.n	8272 <__ieee754_pow+0x72>
    821e:	469a      	mov	sl, r3
    8220:	4696      	mov	lr, r2
    8222:	d025      	beq.n	8270 <__ieee754_pow+0x70>
    8224:	42a7      	cmp	r7, r4
    8226:	dc24      	bgt.n	8272 <__ieee754_pow+0x72>
    8228:	4c61      	ldr	r4, [pc, #388]	; (83b0 <__ieee754_pow+0x1b0>)
    822a:	42a7      	cmp	r7, r4
    822c:	d079      	beq.n	8322 <__ieee754_pow+0x122>
    822e:	2d00      	cmp	r5, #0
    8230:	4689      	mov	r9, r1
    8232:	4680      	mov	r8, r0
    8234:	e9cd 2300 	strd	r2, r3, [sp]
    8238:	db77      	blt.n	832a <__ieee754_pow+0x12a>
    823a:	2400      	movs	r4, #0
    823c:	f1be 0f00 	cmp.w	lr, #0
    8240:	d12c      	bne.n	829c <__ieee754_pow+0x9c>
    8242:	4b5b      	ldr	r3, [pc, #364]	; (83b0 <__ieee754_pow+0x1b0>)
    8244:	429f      	cmp	r7, r3
    8246:	f000 808b 	beq.w	8360 <__ieee754_pow+0x160>
    824a:	4b5a      	ldr	r3, [pc, #360]	; (83b4 <__ieee754_pow+0x1b4>)
    824c:	429f      	cmp	r7, r3
    824e:	d061      	beq.n	8314 <__ieee754_pow+0x114>
    8250:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    8254:	f000 83ba 	beq.w	89cc <__ieee754_pow+0x7cc>
    8258:	4b57      	ldr	r3, [pc, #348]	; (83b8 <__ieee754_pow+0x1b8>)
    825a:	459a      	cmp	sl, r3
    825c:	d11e      	bne.n	829c <__ieee754_pow+0x9c>
    825e:	2d00      	cmp	r5, #0
    8260:	db1c      	blt.n	829c <__ieee754_pow+0x9c>
    8262:	4640      	mov	r0, r8
    8264:	4649      	mov	r1, r9
    8266:	b013      	add	sp, #76	; 0x4c
    8268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    826c:	f000 bd0e 	b.w	8c8c <__ieee754_sqrt>
    8270:	b158      	cbz	r0, 828a <__ieee754_pow+0x8a>
    8272:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    8276:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    827a:	ea56 030b 	orrs.w	r3, r6, fp
    827e:	d106      	bne.n	828e <__ieee754_pow+0x8e>
    8280:	494c      	ldr	r1, [pc, #304]	; (83b4 <__ieee754_pow+0x1b4>)
    8282:	2000      	movs	r0, #0
    8284:	b013      	add	sp, #76	; 0x4c
    8286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    828a:	42b7      	cmp	r7, r6
    828c:	ddcc      	ble.n	8228 <__ieee754_pow+0x28>
    828e:	484b      	ldr	r0, [pc, #300]	; (83bc <__ieee754_pow+0x1bc>)
    8290:	b013      	add	sp, #76	; 0x4c
    8292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8296:	f000 bdc1 	b.w	8e1c <nan>
    829a:	2400      	movs	r4, #0
    829c:	4640      	mov	r0, r8
    829e:	4649      	mov	r1, r9
    82a0:	f000 fdb0 	bl	8e04 <fabs>
    82a4:	f1bb 0f00 	cmp.w	fp, #0
    82a8:	d119      	bne.n	82de <__ieee754_pow+0xde>
    82aa:	b126      	cbz	r6, 82b6 <__ieee754_pow+0xb6>
    82ac:	4b41      	ldr	r3, [pc, #260]	; (83b4 <__ieee754_pow+0x1b4>)
    82ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    82b2:	429a      	cmp	r2, r3
    82b4:	d113      	bne.n	82de <__ieee754_pow+0xde>
    82b6:	f1ba 0f00 	cmp.w	sl, #0
    82ba:	f2c0 83bc 	blt.w	8a36 <__ieee754_pow+0x836>
    82be:	2d00      	cmp	r5, #0
    82c0:	dae0      	bge.n	8284 <__ieee754_pow+0x84>
    82c2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    82c6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    82ca:	ea56 0304 	orrs.w	r3, r6, r4
    82ce:	f000 848f 	beq.w	8bf0 <__ieee754_pow+0x9f0>
    82d2:	2c01      	cmp	r4, #1
    82d4:	d1d6      	bne.n	8284 <__ieee754_pow+0x84>
    82d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    82da:	4619      	mov	r1, r3
    82dc:	e7d2      	b.n	8284 <__ieee754_pow+0x84>
    82de:	0fed      	lsrs	r5, r5, #31
    82e0:	3d01      	subs	r5, #1
    82e2:	ea54 0305 	orrs.w	r3, r4, r5
    82e6:	d04e      	beq.n	8386 <__ieee754_pow+0x186>
    82e8:	4b35      	ldr	r3, [pc, #212]	; (83c0 <__ieee754_pow+0x1c0>)
    82ea:	429f      	cmp	r7, r3
    82ec:	dd6e      	ble.n	83cc <__ieee754_pow+0x1cc>
    82ee:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    82f2:	429f      	cmp	r7, r3
    82f4:	f340 83e8 	ble.w	8ac8 <__ieee754_pow+0x8c8>
    82f8:	4b32      	ldr	r3, [pc, #200]	; (83c4 <__ieee754_pow+0x1c4>)
    82fa:	429e      	cmp	r6, r3
    82fc:	dd4e      	ble.n	839c <__ieee754_pow+0x19c>
    82fe:	f1ba 0f00 	cmp.w	sl, #0
    8302:	dd4e      	ble.n	83a2 <__ieee754_pow+0x1a2>
    8304:	a328      	add	r3, pc, #160	; (adr r3, 83a8 <__ieee754_pow+0x1a8>)
    8306:	e9d3 2300 	ldrd	r2, r3, [r3]
    830a:	4610      	mov	r0, r2
    830c:	4619      	mov	r1, r3
    830e:	f001 f855 	bl	93bc <__aeabi_dmul>
    8312:	e7b7      	b.n	8284 <__ieee754_pow+0x84>
    8314:	f1ba 0f00 	cmp.w	sl, #0
    8318:	f2c0 843c 	blt.w	8b94 <__ieee754_pow+0x994>
    831c:	4640      	mov	r0, r8
    831e:	4649      	mov	r1, r9
    8320:	e7b0      	b.n	8284 <__ieee754_pow+0x84>
    8322:	f1be 0f00 	cmp.w	lr, #0
    8326:	d082      	beq.n	822e <__ieee754_pow+0x2e>
    8328:	e7a3      	b.n	8272 <__ieee754_pow+0x72>
    832a:	4b27      	ldr	r3, [pc, #156]	; (83c8 <__ieee754_pow+0x1c8>)
    832c:	429f      	cmp	r7, r3
    832e:	dc28      	bgt.n	8382 <__ieee754_pow+0x182>
    8330:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    8334:	429f      	cmp	r7, r3
    8336:	dd80      	ble.n	823a <__ieee754_pow+0x3a>
    8338:	153b      	asrs	r3, r7, #20
    833a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    833e:	2b14      	cmp	r3, #20
    8340:	f340 843e 	ble.w	8bc0 <__ieee754_pow+0x9c0>
    8344:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    8348:	fa2e f203 	lsr.w	r2, lr, r3
    834c:	fa02 f303 	lsl.w	r3, r2, r3
    8350:	459e      	cmp	lr, r3
    8352:	f47f af72 	bne.w	823a <__ieee754_pow+0x3a>
    8356:	f002 0201 	and.w	r2, r2, #1
    835a:	f1c2 0402 	rsb	r4, r2, #2
    835e:	e76d      	b.n	823c <__ieee754_pow+0x3c>
    8360:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    8364:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    8368:	ea53 030b 	orrs.w	r3, r3, fp
    836c:	d088      	beq.n	8280 <__ieee754_pow+0x80>
    836e:	4b15      	ldr	r3, [pc, #84]	; (83c4 <__ieee754_pow+0x1c4>)
    8370:	429e      	cmp	r6, r3
    8372:	f340 8332 	ble.w	89da <__ieee754_pow+0x7da>
    8376:	f1ba 0f00 	cmp.w	sl, #0
    837a:	db12      	blt.n	83a2 <__ieee754_pow+0x1a2>
    837c:	e9dd 0100 	ldrd	r0, r1, [sp]
    8380:	e780      	b.n	8284 <__ieee754_pow+0x84>
    8382:	2402      	movs	r4, #2
    8384:	e75a      	b.n	823c <__ieee754_pow+0x3c>
    8386:	4642      	mov	r2, r8
    8388:	464b      	mov	r3, r9
    838a:	4640      	mov	r0, r8
    838c:	4649      	mov	r1, r9
    838e:	f000 fe61 	bl	9054 <__aeabi_dsub>
    8392:	4602      	mov	r2, r0
    8394:	460b      	mov	r3, r1
    8396:	f001 f93b 	bl	9610 <__aeabi_ddiv>
    839a:	e773      	b.n	8284 <__ieee754_pow+0x84>
    839c:	f1ba 0f00 	cmp.w	sl, #0
    83a0:	dbb0      	blt.n	8304 <__ieee754_pow+0x104>
    83a2:	2000      	movs	r0, #0
    83a4:	2100      	movs	r1, #0
    83a6:	e76d      	b.n	8284 <__ieee754_pow+0x84>
    83a8:	8800759c 	.word	0x8800759c
    83ac:	7e37e43c 	.word	0x7e37e43c
    83b0:	7ff00000 	.word	0x7ff00000
    83b4:	3ff00000 	.word	0x3ff00000
    83b8:	3fe00000 	.word	0x3fe00000
    83bc:	00009c20 	.word	0x00009c20
    83c0:	41e00000 	.word	0x41e00000
    83c4:	3fefffff 	.word	0x3fefffff
    83c8:	433fffff 	.word	0x433fffff
    83cc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    83d0:	f04f 0200 	mov.w	r2, #0
    83d4:	da05      	bge.n	83e2 <__ieee754_pow+0x1e2>
    83d6:	4bd4      	ldr	r3, [pc, #848]	; (8728 <__ieee754_pow+0x528>)
    83d8:	f000 fff0 	bl	93bc <__aeabi_dmul>
    83dc:	f06f 0234 	mvn.w	r2, #52	; 0x34
    83e0:	460e      	mov	r6, r1
    83e2:	1533      	asrs	r3, r6, #20
    83e4:	4fd1      	ldr	r7, [pc, #836]	; (872c <__ieee754_pow+0x52c>)
    83e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
    83ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    83ee:	4413      	add	r3, r2
    83f0:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    83f4:	42be      	cmp	r6, r7
    83f6:	461a      	mov	r2, r3
    83f8:	930d      	str	r3, [sp, #52]	; 0x34
    83fa:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    83fe:	f340 8321 	ble.w	8a44 <__ieee754_pow+0x844>
    8402:	4bcb      	ldr	r3, [pc, #812]	; (8730 <__ieee754_pow+0x530>)
    8404:	429e      	cmp	r6, r3
    8406:	f340 83fd 	ble.w	8c04 <__ieee754_pow+0xa04>
    840a:	4613      	mov	r3, r2
    840c:	3301      	adds	r3, #1
    840e:	930d      	str	r3, [sp, #52]	; 0x34
    8410:	4bc8      	ldr	r3, [pc, #800]	; (8734 <__ieee754_pow+0x534>)
    8412:	2200      	movs	r2, #0
    8414:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8418:	2700      	movs	r7, #0
    841a:	2600      	movs	r6, #0
    841c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    8420:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    8424:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    8428:	2700      	movs	r7, #0
    842a:	4602      	mov	r2, r0
    842c:	4653      	mov	r3, sl
    842e:	4651      	mov	r1, sl
    8430:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    8434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8438:	f000 fe0c 	bl	9054 <__aeabi_dsub>
    843c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8440:	4680      	mov	r8, r0
    8442:	4689      	mov	r9, r1
    8444:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    8448:	f000 fe06 	bl	9058 <__adddf3>
    844c:	4602      	mov	r2, r0
    844e:	460b      	mov	r3, r1
    8450:	2000      	movs	r0, #0
    8452:	49b8      	ldr	r1, [pc, #736]	; (8734 <__ieee754_pow+0x534>)
    8454:	f001 f8dc 	bl	9610 <__aeabi_ddiv>
    8458:	460a      	mov	r2, r1
    845a:	4601      	mov	r1, r0
    845c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    8460:	4613      	mov	r3, r2
    8462:	4649      	mov	r1, r9
    8464:	4602      	mov	r2, r0
    8466:	4640      	mov	r0, r8
    8468:	f000 ffa8 	bl	93bc <__aeabi_dmul>
    846c:	ea4f 036a 	mov.w	r3, sl, asr #1
    8470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    8474:	468c      	mov	ip, r1
    8476:	4683      	mov	fp, r0
    8478:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    847c:	e9cd bc04 	strd	fp, ip, [sp, #16]
    8480:	46da      	mov	sl, fp
    8482:	468b      	mov	fp, r1
    8484:	19d9      	adds	r1, r3, r7
    8486:	2300      	movs	r3, #0
    8488:	e9cd ab02 	strd	sl, fp, [sp, #8]
    848c:	9302      	str	r3, [sp, #8]
    848e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    8492:	2000      	movs	r0, #0
    8494:	4606      	mov	r6, r0
    8496:	460f      	mov	r7, r1
    8498:	4602      	mov	r2, r0
    849a:	460b      	mov	r3, r1
    849c:	4650      	mov	r0, sl
    849e:	4659      	mov	r1, fp
    84a0:	f000 ff8c 	bl	93bc <__aeabi_dmul>
    84a4:	4602      	mov	r2, r0
    84a6:	460b      	mov	r3, r1
    84a8:	4640      	mov	r0, r8
    84aa:	4649      	mov	r1, r9
    84ac:	f000 fdd2 	bl	9054 <__aeabi_dsub>
    84b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    84b4:	4680      	mov	r8, r0
    84b6:	4689      	mov	r9, r1
    84b8:	4630      	mov	r0, r6
    84ba:	4639      	mov	r1, r7
    84bc:	f000 fdca 	bl	9054 <__aeabi_dsub>
    84c0:	4602      	mov	r2, r0
    84c2:	460b      	mov	r3, r1
    84c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    84c8:	f000 fdc4 	bl	9054 <__aeabi_dsub>
    84cc:	4652      	mov	r2, sl
    84ce:	465b      	mov	r3, fp
    84d0:	f000 ff74 	bl	93bc <__aeabi_dmul>
    84d4:	4602      	mov	r2, r0
    84d6:	460b      	mov	r3, r1
    84d8:	4640      	mov	r0, r8
    84da:	4649      	mov	r1, r9
    84dc:	f000 fdba 	bl	9054 <__aeabi_dsub>
    84e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    84e4:	f000 ff6a 	bl	93bc <__aeabi_dmul>
    84e8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    84ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
    84f0:	4632      	mov	r2, r6
    84f2:	463b      	mov	r3, r7
    84f4:	4630      	mov	r0, r6
    84f6:	4639      	mov	r1, r7
    84f8:	f000 ff60 	bl	93bc <__aeabi_dmul>
    84fc:	a378      	add	r3, pc, #480	; (adr r3, 86e0 <__ieee754_pow+0x4e0>)
    84fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8502:	4606      	mov	r6, r0
    8504:	460f      	mov	r7, r1
    8506:	f000 ff59 	bl	93bc <__aeabi_dmul>
    850a:	a377      	add	r3, pc, #476	; (adr r3, 86e8 <__ieee754_pow+0x4e8>)
    850c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8510:	f000 fda2 	bl	9058 <__adddf3>
    8514:	4632      	mov	r2, r6
    8516:	463b      	mov	r3, r7
    8518:	f000 ff50 	bl	93bc <__aeabi_dmul>
    851c:	a374      	add	r3, pc, #464	; (adr r3, 86f0 <__ieee754_pow+0x4f0>)
    851e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8522:	f000 fd99 	bl	9058 <__adddf3>
    8526:	4632      	mov	r2, r6
    8528:	463b      	mov	r3, r7
    852a:	f000 ff47 	bl	93bc <__aeabi_dmul>
    852e:	a372      	add	r3, pc, #456	; (adr r3, 86f8 <__ieee754_pow+0x4f8>)
    8530:	e9d3 2300 	ldrd	r2, r3, [r3]
    8534:	f000 fd90 	bl	9058 <__adddf3>
    8538:	4632      	mov	r2, r6
    853a:	463b      	mov	r3, r7
    853c:	f000 ff3e 	bl	93bc <__aeabi_dmul>
    8540:	a36f      	add	r3, pc, #444	; (adr r3, 8700 <__ieee754_pow+0x500>)
    8542:	e9d3 2300 	ldrd	r2, r3, [r3]
    8546:	f000 fd87 	bl	9058 <__adddf3>
    854a:	4632      	mov	r2, r6
    854c:	463b      	mov	r3, r7
    854e:	f000 ff35 	bl	93bc <__aeabi_dmul>
    8552:	a36d      	add	r3, pc, #436	; (adr r3, 8708 <__ieee754_pow+0x508>)
    8554:	e9d3 2300 	ldrd	r2, r3, [r3]
    8558:	f000 fd7e 	bl	9058 <__adddf3>
    855c:	4632      	mov	r2, r6
    855e:	4680      	mov	r8, r0
    8560:	4689      	mov	r9, r1
    8562:	463b      	mov	r3, r7
    8564:	4630      	mov	r0, r6
    8566:	4639      	mov	r1, r7
    8568:	f000 ff28 	bl	93bc <__aeabi_dmul>
    856c:	4602      	mov	r2, r0
    856e:	460b      	mov	r3, r1
    8570:	4640      	mov	r0, r8
    8572:	4649      	mov	r1, r9
    8574:	f000 ff22 	bl	93bc <__aeabi_dmul>
    8578:	4652      	mov	r2, sl
    857a:	4606      	mov	r6, r0
    857c:	460f      	mov	r7, r1
    857e:	465b      	mov	r3, fp
    8580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8584:	f000 fd68 	bl	9058 <__adddf3>
    8588:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    858c:	f000 ff16 	bl	93bc <__aeabi_dmul>
    8590:	4632      	mov	r2, r6
    8592:	463b      	mov	r3, r7
    8594:	f000 fd60 	bl	9058 <__adddf3>
    8598:	4652      	mov	r2, sl
    859a:	4680      	mov	r8, r0
    859c:	4689      	mov	r9, r1
    859e:	465b      	mov	r3, fp
    85a0:	4650      	mov	r0, sl
    85a2:	4659      	mov	r1, fp
    85a4:	f000 ff0a 	bl	93bc <__aeabi_dmul>
    85a8:	2200      	movs	r2, #0
    85aa:	4b63      	ldr	r3, [pc, #396]	; (8738 <__ieee754_pow+0x538>)
    85ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    85b0:	f000 fd52 	bl	9058 <__adddf3>
    85b4:	4642      	mov	r2, r8
    85b6:	464b      	mov	r3, r9
    85b8:	f000 fd4e 	bl	9058 <__adddf3>
    85bc:	9802      	ldr	r0, [sp, #8]
    85be:	460f      	mov	r7, r1
    85c0:	4606      	mov	r6, r0
    85c2:	4632      	mov	r2, r6
    85c4:	463b      	mov	r3, r7
    85c6:	4650      	mov	r0, sl
    85c8:	4659      	mov	r1, fp
    85ca:	f000 fef7 	bl	93bc <__aeabi_dmul>
    85ce:	2200      	movs	r2, #0
    85d0:	4682      	mov	sl, r0
    85d2:	468b      	mov	fp, r1
    85d4:	4b58      	ldr	r3, [pc, #352]	; (8738 <__ieee754_pow+0x538>)
    85d6:	4630      	mov	r0, r6
    85d8:	4639      	mov	r1, r7
    85da:	f000 fd3b 	bl	9054 <__aeabi_dsub>
    85de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    85e2:	f000 fd37 	bl	9054 <__aeabi_dsub>
    85e6:	4602      	mov	r2, r0
    85e8:	460b      	mov	r3, r1
    85ea:	4640      	mov	r0, r8
    85ec:	4649      	mov	r1, r9
    85ee:	f000 fd31 	bl	9054 <__aeabi_dsub>
    85f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    85f6:	f000 fee1 	bl	93bc <__aeabi_dmul>
    85fa:	4632      	mov	r2, r6
    85fc:	4680      	mov	r8, r0
    85fe:	4689      	mov	r9, r1
    8600:	463b      	mov	r3, r7
    8602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    8606:	f000 fed9 	bl	93bc <__aeabi_dmul>
    860a:	4602      	mov	r2, r0
    860c:	460b      	mov	r3, r1
    860e:	4640      	mov	r0, r8
    8610:	4649      	mov	r1, r9
    8612:	f000 fd21 	bl	9058 <__adddf3>
    8616:	4680      	mov	r8, r0
    8618:	4689      	mov	r9, r1
    861a:	4602      	mov	r2, r0
    861c:	460b      	mov	r3, r1
    861e:	4650      	mov	r0, sl
    8620:	4659      	mov	r1, fp
    8622:	e9cd ab04 	strd	sl, fp, [sp, #16]
    8626:	f000 fd17 	bl	9058 <__adddf3>
    862a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    862e:	a338      	add	r3, pc, #224	; (adr r3, 8710 <__ieee754_pow+0x510>)
    8630:	e9d3 2300 	ldrd	r2, r3, [r3]
    8634:	4650      	mov	r0, sl
    8636:	460f      	mov	r7, r1
    8638:	f000 fec0 	bl	93bc <__aeabi_dmul>
    863c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8640:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8644:	4639      	mov	r1, r7
    8646:	4650      	mov	r0, sl
    8648:	f000 fd04 	bl	9054 <__aeabi_dsub>
    864c:	4602      	mov	r2, r0
    864e:	460b      	mov	r3, r1
    8650:	4640      	mov	r0, r8
    8652:	4649      	mov	r1, r9
    8654:	f000 fcfe 	bl	9054 <__aeabi_dsub>
    8658:	a32f      	add	r3, pc, #188	; (adr r3, 8718 <__ieee754_pow+0x518>)
    865a:	e9d3 2300 	ldrd	r2, r3, [r3]
    865e:	f000 fead 	bl	93bc <__aeabi_dmul>
    8662:	a32f      	add	r3, pc, #188	; (adr r3, 8720 <__ieee754_pow+0x520>)
    8664:	e9d3 2300 	ldrd	r2, r3, [r3]
    8668:	4680      	mov	r8, r0
    866a:	4689      	mov	r9, r1
    866c:	4650      	mov	r0, sl
    866e:	4639      	mov	r1, r7
    8670:	f000 fea4 	bl	93bc <__aeabi_dmul>
    8674:	4602      	mov	r2, r0
    8676:	460b      	mov	r3, r1
    8678:	4640      	mov	r0, r8
    867a:	4649      	mov	r1, r9
    867c:	f000 fcec 	bl	9058 <__adddf3>
    8680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    8684:	f000 fce8 	bl	9058 <__adddf3>
    8688:	4680      	mov	r8, r0
    868a:	980d      	ldr	r0, [sp, #52]	; 0x34
    868c:	4689      	mov	r9, r1
    868e:	f000 fe2f 	bl	92f0 <__aeabi_i2d>
    8692:	4642      	mov	r2, r8
    8694:	4606      	mov	r6, r0
    8696:	460f      	mov	r7, r1
    8698:	464b      	mov	r3, r9
    869a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    869e:	f000 fcdb 	bl	9058 <__adddf3>
    86a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    86a6:	f000 fcd7 	bl	9058 <__adddf3>
    86aa:	4632      	mov	r2, r6
    86ac:	463b      	mov	r3, r7
    86ae:	f000 fcd3 	bl	9058 <__adddf3>
    86b2:	4632      	mov	r2, r6
    86b4:	463b      	mov	r3, r7
    86b6:	4650      	mov	r0, sl
    86b8:	468b      	mov	fp, r1
    86ba:	f000 fccb 	bl	9054 <__aeabi_dsub>
    86be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    86c2:	f000 fcc7 	bl	9054 <__aeabi_dsub>
    86c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    86ca:	f000 fcc3 	bl	9054 <__aeabi_dsub>
    86ce:	4602      	mov	r2, r0
    86d0:	460b      	mov	r3, r1
    86d2:	4640      	mov	r0, r8
    86d4:	4649      	mov	r1, r9
    86d6:	f000 fcbd 	bl	9054 <__aeabi_dsub>
    86da:	4680      	mov	r8, r0
    86dc:	e02e      	b.n	873c <__ieee754_pow+0x53c>
    86de:	bf00      	nop
    86e0:	4a454eef 	.word	0x4a454eef
    86e4:	3fca7e28 	.word	0x3fca7e28
    86e8:	93c9db65 	.word	0x93c9db65
    86ec:	3fcd864a 	.word	0x3fcd864a
    86f0:	a91d4101 	.word	0xa91d4101
    86f4:	3fd17460 	.word	0x3fd17460
    86f8:	518f264d 	.word	0x518f264d
    86fc:	3fd55555 	.word	0x3fd55555
    8700:	db6fabff 	.word	0xdb6fabff
    8704:	3fdb6db6 	.word	0x3fdb6db6
    8708:	33333303 	.word	0x33333303
    870c:	3fe33333 	.word	0x3fe33333
    8710:	e0000000 	.word	0xe0000000
    8714:	3feec709 	.word	0x3feec709
    8718:	dc3a03fd 	.word	0xdc3a03fd
    871c:	3feec709 	.word	0x3feec709
    8720:	145b01f5 	.word	0x145b01f5
    8724:	be3e2fe0 	.word	0xbe3e2fe0
    8728:	43400000 	.word	0x43400000
    872c:	0003988e 	.word	0x0003988e
    8730:	000bb679 	.word	0x000bb679
    8734:	3ff00000 	.word	0x3ff00000
    8738:	40080000 	.word	0x40080000
    873c:	4689      	mov	r9, r1
    873e:	3c01      	subs	r4, #1
    8740:	ea54 0305 	orrs.w	r3, r4, r5
    8744:	e9dd 0100 	ldrd	r0, r1, [sp]
    8748:	bf14      	ite	ne
    874a:	4cd9      	ldrne	r4, [pc, #868]	; (8ab0 <__ieee754_pow+0x8b0>)
    874c:	4cd9      	ldreq	r4, [pc, #868]	; (8ab4 <__ieee754_pow+0x8b4>)
    874e:	2300      	movs	r3, #0
    8750:	e9cd 3404 	strd	r3, r4, [sp, #16]
    8754:	4603      	mov	r3, r0
    8756:	460c      	mov	r4, r1
    8758:	e9cd 3402 	strd	r3, r4, [sp, #8]
    875c:	2300      	movs	r3, #0
    875e:	9302      	str	r3, [sp, #8]
    8760:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    8764:	4622      	mov	r2, r4
    8766:	462b      	mov	r3, r5
    8768:	f000 fc74 	bl	9054 <__aeabi_dsub>
    876c:	4652      	mov	r2, sl
    876e:	465b      	mov	r3, fp
    8770:	f000 fe24 	bl	93bc <__aeabi_dmul>
    8774:	e9dd 2300 	ldrd	r2, r3, [sp]
    8778:	4606      	mov	r6, r0
    877a:	460f      	mov	r7, r1
    877c:	4640      	mov	r0, r8
    877e:	4649      	mov	r1, r9
    8780:	f000 fe1c 	bl	93bc <__aeabi_dmul>
    8784:	4602      	mov	r2, r0
    8786:	460b      	mov	r3, r1
    8788:	4630      	mov	r0, r6
    878a:	4639      	mov	r1, r7
    878c:	f000 fc64 	bl	9058 <__adddf3>
    8790:	4622      	mov	r2, r4
    8792:	4680      	mov	r8, r0
    8794:	4689      	mov	r9, r1
    8796:	462b      	mov	r3, r5
    8798:	4650      	mov	r0, sl
    879a:	4659      	mov	r1, fp
    879c:	e9cd 8900 	strd	r8, r9, [sp]
    87a0:	f000 fe0c 	bl	93bc <__aeabi_dmul>
    87a4:	460b      	mov	r3, r1
    87a6:	4602      	mov	r2, r0
    87a8:	4606      	mov	r6, r0
    87aa:	460f      	mov	r7, r1
    87ac:	4640      	mov	r0, r8
    87ae:	4649      	mov	r1, r9
    87b0:	f000 fc52 	bl	9058 <__adddf3>
    87b4:	4bc0      	ldr	r3, [pc, #768]	; (8ab8 <__ieee754_pow+0x8b8>)
    87b6:	4299      	cmp	r1, r3
    87b8:	4604      	mov	r4, r0
    87ba:	460d      	mov	r5, r1
    87bc:	468a      	mov	sl, r1
    87be:	f340 8116 	ble.w	89ee <__ieee754_pow+0x7ee>
    87c2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    87c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    87ca:	4303      	orrs	r3, r0
    87cc:	f040 81ea 	bne.w	8ba4 <__ieee754_pow+0x9a4>
    87d0:	a3a3      	add	r3, pc, #652	; (adr r3, 8a60 <__ieee754_pow+0x860>)
    87d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    87d6:	e9dd 0100 	ldrd	r0, r1, [sp]
    87da:	f000 fc3d 	bl	9058 <__adddf3>
    87de:	4632      	mov	r2, r6
    87e0:	4680      	mov	r8, r0
    87e2:	4689      	mov	r9, r1
    87e4:	463b      	mov	r3, r7
    87e6:	4620      	mov	r0, r4
    87e8:	4629      	mov	r1, r5
    87ea:	f000 fc33 	bl	9054 <__aeabi_dsub>
    87ee:	4602      	mov	r2, r0
    87f0:	460b      	mov	r3, r1
    87f2:	4640      	mov	r0, r8
    87f4:	4649      	mov	r1, r9
    87f6:	f001 f871 	bl	98dc <__aeabi_dcmpgt>
    87fa:	2800      	cmp	r0, #0
    87fc:	f040 81d2 	bne.w	8ba4 <__ieee754_pow+0x9a4>
    8800:	46a8      	mov	r8, r5
    8802:	ea4f 5328 	mov.w	r3, r8, asr #20
    8806:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    880a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    880e:	fa42 f303 	asr.w	r3, r2, r3
    8812:	4453      	add	r3, sl
    8814:	f3c3 520a 	ubfx	r2, r3, #20, #11
    8818:	4da8      	ldr	r5, [pc, #672]	; (8abc <__ieee754_pow+0x8bc>)
    881a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    881e:	4115      	asrs	r5, r2
    8820:	f3c3 0413 	ubfx	r4, r3, #0, #20
    8824:	ea23 0105 	bic.w	r1, r3, r5
    8828:	2000      	movs	r0, #0
    882a:	f1c2 0b14 	rsb	fp, r2, #20
    882e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    8832:	f1ba 0f00 	cmp.w	sl, #0
    8836:	4602      	mov	r2, r0
    8838:	460b      	mov	r3, r1
    883a:	fa44 fb0b 	asr.w	fp, r4, fp
    883e:	4630      	mov	r0, r6
    8840:	4639      	mov	r1, r7
    8842:	bfb8      	it	lt
    8844:	f1cb 0b00 	rsblt	fp, fp, #0
    8848:	f000 fc04 	bl	9054 <__aeabi_dsub>
    884c:	4602      	mov	r2, r0
    884e:	460b      	mov	r3, r1
    8850:	4606      	mov	r6, r0
    8852:	460f      	mov	r7, r1
    8854:	e9dd 0100 	ldrd	r0, r1, [sp]
    8858:	f000 fbfe 	bl	9058 <__adddf3>
    885c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    8860:	460d      	mov	r5, r1
    8862:	2400      	movs	r4, #0
    8864:	a380      	add	r3, pc, #512	; (adr r3, 8a68 <__ieee754_pow+0x868>)
    8866:	e9d3 2300 	ldrd	r2, r3, [r3]
    886a:	4620      	mov	r0, r4
    886c:	4629      	mov	r1, r5
    886e:	f000 fda5 	bl	93bc <__aeabi_dmul>
    8872:	4632      	mov	r2, r6
    8874:	4680      	mov	r8, r0
    8876:	4689      	mov	r9, r1
    8878:	463b      	mov	r3, r7
    887a:	4620      	mov	r0, r4
    887c:	4629      	mov	r1, r5
    887e:	f000 fbe9 	bl	9054 <__aeabi_dsub>
    8882:	4602      	mov	r2, r0
    8884:	460b      	mov	r3, r1
    8886:	e9dd 0100 	ldrd	r0, r1, [sp]
    888a:	f000 fbe3 	bl	9054 <__aeabi_dsub>
    888e:	a378      	add	r3, pc, #480	; (adr r3, 8a70 <__ieee754_pow+0x870>)
    8890:	e9d3 2300 	ldrd	r2, r3, [r3]
    8894:	f000 fd92 	bl	93bc <__aeabi_dmul>
    8898:	a377      	add	r3, pc, #476	; (adr r3, 8a78 <__ieee754_pow+0x878>)
    889a:	e9d3 2300 	ldrd	r2, r3, [r3]
    889e:	4606      	mov	r6, r0
    88a0:	460f      	mov	r7, r1
    88a2:	4620      	mov	r0, r4
    88a4:	4629      	mov	r1, r5
    88a6:	f000 fd89 	bl	93bc <__aeabi_dmul>
    88aa:	4602      	mov	r2, r0
    88ac:	460b      	mov	r3, r1
    88ae:	4630      	mov	r0, r6
    88b0:	4639      	mov	r1, r7
    88b2:	f000 fbd1 	bl	9058 <__adddf3>
    88b6:	4606      	mov	r6, r0
    88b8:	460f      	mov	r7, r1
    88ba:	4602      	mov	r2, r0
    88bc:	460b      	mov	r3, r1
    88be:	4640      	mov	r0, r8
    88c0:	4649      	mov	r1, r9
    88c2:	f000 fbc9 	bl	9058 <__adddf3>
    88c6:	4642      	mov	r2, r8
    88c8:	464b      	mov	r3, r9
    88ca:	4604      	mov	r4, r0
    88cc:	460d      	mov	r5, r1
    88ce:	f000 fbc1 	bl	9054 <__aeabi_dsub>
    88d2:	4602      	mov	r2, r0
    88d4:	460b      	mov	r3, r1
    88d6:	4630      	mov	r0, r6
    88d8:	4639      	mov	r1, r7
    88da:	f000 fbbb 	bl	9054 <__aeabi_dsub>
    88de:	4622      	mov	r2, r4
    88e0:	4680      	mov	r8, r0
    88e2:	4689      	mov	r9, r1
    88e4:	462b      	mov	r3, r5
    88e6:	4620      	mov	r0, r4
    88e8:	4629      	mov	r1, r5
    88ea:	f000 fd67 	bl	93bc <__aeabi_dmul>
    88ee:	a364      	add	r3, pc, #400	; (adr r3, 8a80 <__ieee754_pow+0x880>)
    88f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    88f4:	4606      	mov	r6, r0
    88f6:	460f      	mov	r7, r1
    88f8:	f000 fd60 	bl	93bc <__aeabi_dmul>
    88fc:	a362      	add	r3, pc, #392	; (adr r3, 8a88 <__ieee754_pow+0x888>)
    88fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8902:	f000 fba7 	bl	9054 <__aeabi_dsub>
    8906:	4632      	mov	r2, r6
    8908:	463b      	mov	r3, r7
    890a:	f000 fd57 	bl	93bc <__aeabi_dmul>
    890e:	a360      	add	r3, pc, #384	; (adr r3, 8a90 <__ieee754_pow+0x890>)
    8910:	e9d3 2300 	ldrd	r2, r3, [r3]
    8914:	f000 fba0 	bl	9058 <__adddf3>
    8918:	4632      	mov	r2, r6
    891a:	463b      	mov	r3, r7
    891c:	f000 fd4e 	bl	93bc <__aeabi_dmul>
    8920:	a35d      	add	r3, pc, #372	; (adr r3, 8a98 <__ieee754_pow+0x898>)
    8922:	e9d3 2300 	ldrd	r2, r3, [r3]
    8926:	f000 fb95 	bl	9054 <__aeabi_dsub>
    892a:	4632      	mov	r2, r6
    892c:	463b      	mov	r3, r7
    892e:	f000 fd45 	bl	93bc <__aeabi_dmul>
    8932:	a35b      	add	r3, pc, #364	; (adr r3, 8aa0 <__ieee754_pow+0x8a0>)
    8934:	e9d3 2300 	ldrd	r2, r3, [r3]
    8938:	f000 fb8e 	bl	9058 <__adddf3>
    893c:	4632      	mov	r2, r6
    893e:	463b      	mov	r3, r7
    8940:	f000 fd3c 	bl	93bc <__aeabi_dmul>
    8944:	4602      	mov	r2, r0
    8946:	460b      	mov	r3, r1
    8948:	4620      	mov	r0, r4
    894a:	4629      	mov	r1, r5
    894c:	f000 fb82 	bl	9054 <__aeabi_dsub>
    8950:	4606      	mov	r6, r0
    8952:	460f      	mov	r7, r1
    8954:	4602      	mov	r2, r0
    8956:	460b      	mov	r3, r1
    8958:	4620      	mov	r0, r4
    895a:	4629      	mov	r1, r5
    895c:	f000 fd2e 	bl	93bc <__aeabi_dmul>
    8960:	2200      	movs	r2, #0
    8962:	e9cd 0100 	strd	r0, r1, [sp]
    8966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    896a:	4630      	mov	r0, r6
    896c:	4639      	mov	r1, r7
    896e:	f000 fb71 	bl	9054 <__aeabi_dsub>
    8972:	4602      	mov	r2, r0
    8974:	460b      	mov	r3, r1
    8976:	e9dd 0100 	ldrd	r0, r1, [sp]
    897a:	f000 fe49 	bl	9610 <__aeabi_ddiv>
    897e:	4642      	mov	r2, r8
    8980:	4606      	mov	r6, r0
    8982:	460f      	mov	r7, r1
    8984:	464b      	mov	r3, r9
    8986:	4620      	mov	r0, r4
    8988:	4629      	mov	r1, r5
    898a:	f000 fd17 	bl	93bc <__aeabi_dmul>
    898e:	4642      	mov	r2, r8
    8990:	464b      	mov	r3, r9
    8992:	f000 fb61 	bl	9058 <__adddf3>
    8996:	4602      	mov	r2, r0
    8998:	460b      	mov	r3, r1
    899a:	4630      	mov	r0, r6
    899c:	4639      	mov	r1, r7
    899e:	f000 fb59 	bl	9054 <__aeabi_dsub>
    89a2:	4622      	mov	r2, r4
    89a4:	462b      	mov	r3, r5
    89a6:	f000 fb55 	bl	9054 <__aeabi_dsub>
    89aa:	4602      	mov	r2, r0
    89ac:	460b      	mov	r3, r1
    89ae:	2000      	movs	r0, #0
    89b0:	493f      	ldr	r1, [pc, #252]	; (8ab0 <__ieee754_pow+0x8b0>)
    89b2:	f000 fb4f 	bl	9054 <__aeabi_dsub>
    89b6:	448a      	add	sl, r1
    89b8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    89bc:	f2c0 8133 	blt.w	8c26 <__ieee754_pow+0xa26>
    89c0:	4651      	mov	r1, sl
    89c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    89c6:	f000 fcf9 	bl	93bc <__aeabi_dmul>
    89ca:	e45b      	b.n	8284 <__ieee754_pow+0x84>
    89cc:	4642      	mov	r2, r8
    89ce:	4640      	mov	r0, r8
    89d0:	464b      	mov	r3, r9
    89d2:	4649      	mov	r1, r9
    89d4:	f000 fcf2 	bl	93bc <__aeabi_dmul>
    89d8:	e454      	b.n	8284 <__ieee754_pow+0x84>
    89da:	f1ba 0f00 	cmp.w	sl, #0
    89de:	f6bf ace0 	bge.w	83a2 <__ieee754_pow+0x1a2>
    89e2:	e9dd 3400 	ldrd	r3, r4, [sp]
    89e6:	4618      	mov	r0, r3
    89e8:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    89ec:	e44a      	b.n	8284 <__ieee754_pow+0x84>
    89ee:	4b34      	ldr	r3, [pc, #208]	; (8ac0 <__ieee754_pow+0x8c0>)
    89f0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    89f4:	4598      	cmp	r8, r3
    89f6:	f340 80f2 	ble.w	8bde <__ieee754_pow+0x9de>
    89fa:	4b32      	ldr	r3, [pc, #200]	; (8ac4 <__ieee754_pow+0x8c4>)
    89fc:	440b      	add	r3, r1
    89fe:	4303      	orrs	r3, r0
    8a00:	d10c      	bne.n	8a1c <__ieee754_pow+0x81c>
    8a02:	4632      	mov	r2, r6
    8a04:	463b      	mov	r3, r7
    8a06:	f000 fb25 	bl	9054 <__aeabi_dsub>
    8a0a:	4602      	mov	r2, r0
    8a0c:	460b      	mov	r3, r1
    8a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
    8a12:	f000 ff4f 	bl	98b4 <__aeabi_dcmple>
    8a16:	2800      	cmp	r0, #0
    8a18:	f43f aef3 	beq.w	8802 <__ieee754_pow+0x602>
    8a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8a20:	a321      	add	r3, pc, #132	; (adr r3, 8aa8 <__ieee754_pow+0x8a8>)
    8a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a26:	f000 fcc9 	bl	93bc <__aeabi_dmul>
    8a2a:	a31f      	add	r3, pc, #124	; (adr r3, 8aa8 <__ieee754_pow+0x8a8>)
    8a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a30:	f000 fcc4 	bl	93bc <__aeabi_dmul>
    8a34:	e426      	b.n	8284 <__ieee754_pow+0x84>
    8a36:	4602      	mov	r2, r0
    8a38:	460b      	mov	r3, r1
    8a3a:	2000      	movs	r0, #0
    8a3c:	491c      	ldr	r1, [pc, #112]	; (8ab0 <__ieee754_pow+0x8b0>)
    8a3e:	f000 fde7 	bl	9610 <__aeabi_ddiv>
    8a42:	e43c      	b.n	82be <__ieee754_pow+0xbe>
    8a44:	2200      	movs	r2, #0
    8a46:	2300      	movs	r3, #0
    8a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8a4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8a50:	4b17      	ldr	r3, [pc, #92]	; (8ab0 <__ieee754_pow+0x8b0>)
    8a52:	2200      	movs	r2, #0
    8a54:	2700      	movs	r7, #0
    8a56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8a5a:	e4e6      	b.n	842a <__ieee754_pow+0x22a>
    8a5c:	f3af 8000 	nop.w
    8a60:	652b82fe 	.word	0x652b82fe
    8a64:	3c971547 	.word	0x3c971547
    8a68:	00000000 	.word	0x00000000
    8a6c:	3fe62e43 	.word	0x3fe62e43
    8a70:	fefa39ef 	.word	0xfefa39ef
    8a74:	3fe62e42 	.word	0x3fe62e42
    8a78:	0ca86c39 	.word	0x0ca86c39
    8a7c:	be205c61 	.word	0xbe205c61
    8a80:	72bea4d0 	.word	0x72bea4d0
    8a84:	3e663769 	.word	0x3e663769
    8a88:	c5d26bf1 	.word	0xc5d26bf1
    8a8c:	3ebbbd41 	.word	0x3ebbbd41
    8a90:	af25de2c 	.word	0xaf25de2c
    8a94:	3f11566a 	.word	0x3f11566a
    8a98:	16bebd93 	.word	0x16bebd93
    8a9c:	3f66c16c 	.word	0x3f66c16c
    8aa0:	5555553e 	.word	0x5555553e
    8aa4:	3fc55555 	.word	0x3fc55555
    8aa8:	c2f8f359 	.word	0xc2f8f359
    8aac:	01a56e1f 	.word	0x01a56e1f
    8ab0:	3ff00000 	.word	0x3ff00000
    8ab4:	bff00000 	.word	0xbff00000
    8ab8:	408fffff 	.word	0x408fffff
    8abc:	000fffff 	.word	0x000fffff
    8ac0:	4090cbff 	.word	0x4090cbff
    8ac4:	3f6f3400 	.word	0x3f6f3400
    8ac8:	4b6b      	ldr	r3, [pc, #428]	; (8c78 <__ieee754_pow+0xa78>)
    8aca:	429e      	cmp	r6, r3
    8acc:	f77f ac66 	ble.w	839c <__ieee754_pow+0x19c>
    8ad0:	4b6a      	ldr	r3, [pc, #424]	; (8c7c <__ieee754_pow+0xa7c>)
    8ad2:	429e      	cmp	r6, r3
    8ad4:	f73f ac13 	bgt.w	82fe <__ieee754_pow+0xfe>
    8ad8:	2200      	movs	r2, #0
    8ada:	4b68      	ldr	r3, [pc, #416]	; (8c7c <__ieee754_pow+0xa7c>)
    8adc:	f000 faba 	bl	9054 <__aeabi_dsub>
    8ae0:	a357      	add	r3, pc, #348	; (adr r3, 8c40 <__ieee754_pow+0xa40>)
    8ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ae6:	4606      	mov	r6, r0
    8ae8:	460f      	mov	r7, r1
    8aea:	f000 fc67 	bl	93bc <__aeabi_dmul>
    8aee:	a356      	add	r3, pc, #344	; (adr r3, 8c48 <__ieee754_pow+0xa48>)
    8af0:	e9d3 2300 	ldrd	r2, r3, [r3]
    8af4:	4680      	mov	r8, r0
    8af6:	4689      	mov	r9, r1
    8af8:	4630      	mov	r0, r6
    8afa:	4639      	mov	r1, r7
    8afc:	f000 fc5e 	bl	93bc <__aeabi_dmul>
    8b00:	2200      	movs	r2, #0
    8b02:	4682      	mov	sl, r0
    8b04:	468b      	mov	fp, r1
    8b06:	4b5e      	ldr	r3, [pc, #376]	; (8c80 <__ieee754_pow+0xa80>)
    8b08:	4630      	mov	r0, r6
    8b0a:	4639      	mov	r1, r7
    8b0c:	f000 fc56 	bl	93bc <__aeabi_dmul>
    8b10:	4602      	mov	r2, r0
    8b12:	460b      	mov	r3, r1
    8b14:	a14e      	add	r1, pc, #312	; (adr r1, 8c50 <__ieee754_pow+0xa50>)
    8b16:	e9d1 0100 	ldrd	r0, r1, [r1]
    8b1a:	f000 fa9b 	bl	9054 <__aeabi_dsub>
    8b1e:	4632      	mov	r2, r6
    8b20:	463b      	mov	r3, r7
    8b22:	f000 fc4b 	bl	93bc <__aeabi_dmul>
    8b26:	4602      	mov	r2, r0
    8b28:	460b      	mov	r3, r1
    8b2a:	2000      	movs	r0, #0
    8b2c:	4955      	ldr	r1, [pc, #340]	; (8c84 <__ieee754_pow+0xa84>)
    8b2e:	f000 fa91 	bl	9054 <__aeabi_dsub>
    8b32:	4632      	mov	r2, r6
    8b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8b38:	463b      	mov	r3, r7
    8b3a:	4630      	mov	r0, r6
    8b3c:	4639      	mov	r1, r7
    8b3e:	f000 fc3d 	bl	93bc <__aeabi_dmul>
    8b42:	4602      	mov	r2, r0
    8b44:	460b      	mov	r3, r1
    8b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8b4a:	f000 fc37 	bl	93bc <__aeabi_dmul>
    8b4e:	a342      	add	r3, pc, #264	; (adr r3, 8c58 <__ieee754_pow+0xa58>)
    8b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b54:	f000 fc32 	bl	93bc <__aeabi_dmul>
    8b58:	4602      	mov	r2, r0
    8b5a:	460b      	mov	r3, r1
    8b5c:	4650      	mov	r0, sl
    8b5e:	4659      	mov	r1, fp
    8b60:	f000 fa78 	bl	9054 <__aeabi_dsub>
    8b64:	4602      	mov	r2, r0
    8b66:	460b      	mov	r3, r1
    8b68:	4606      	mov	r6, r0
    8b6a:	460f      	mov	r7, r1
    8b6c:	4640      	mov	r0, r8
    8b6e:	4649      	mov	r1, r9
    8b70:	f000 fa72 	bl	9058 <__adddf3>
    8b74:	4642      	mov	r2, r8
    8b76:	464b      	mov	r3, r9
    8b78:	2000      	movs	r0, #0
    8b7a:	4682      	mov	sl, r0
    8b7c:	468b      	mov	fp, r1
    8b7e:	f000 fa69 	bl	9054 <__aeabi_dsub>
    8b82:	4602      	mov	r2, r0
    8b84:	460b      	mov	r3, r1
    8b86:	4630      	mov	r0, r6
    8b88:	4639      	mov	r1, r7
    8b8a:	f000 fa63 	bl	9054 <__aeabi_dsub>
    8b8e:	4680      	mov	r8, r0
    8b90:	4689      	mov	r9, r1
    8b92:	e5d4      	b.n	873e <__ieee754_pow+0x53e>
    8b94:	4642      	mov	r2, r8
    8b96:	464b      	mov	r3, r9
    8b98:	2000      	movs	r0, #0
    8b9a:	4938      	ldr	r1, [pc, #224]	; (8c7c <__ieee754_pow+0xa7c>)
    8b9c:	f000 fd38 	bl	9610 <__aeabi_ddiv>
    8ba0:	f7ff bb70 	b.w	8284 <__ieee754_pow+0x84>
    8ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8ba8:	a32d      	add	r3, pc, #180	; (adr r3, 8c60 <__ieee754_pow+0xa60>)
    8baa:	e9d3 2300 	ldrd	r2, r3, [r3]
    8bae:	f000 fc05 	bl	93bc <__aeabi_dmul>
    8bb2:	a32b      	add	r3, pc, #172	; (adr r3, 8c60 <__ieee754_pow+0xa60>)
    8bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    8bb8:	f000 fc00 	bl	93bc <__aeabi_dmul>
    8bbc:	f7ff bb62 	b.w	8284 <__ieee754_pow+0x84>
    8bc0:	f1be 0f00 	cmp.w	lr, #0
    8bc4:	f47f ab69 	bne.w	829a <__ieee754_pow+0x9a>
    8bc8:	f1c3 0314 	rsb	r3, r3, #20
    8bcc:	fa47 f203 	asr.w	r2, r7, r3
    8bd0:	fa02 f303 	lsl.w	r3, r2, r3
    8bd4:	429f      	cmp	r7, r3
    8bd6:	d02a      	beq.n	8c2e <__ieee754_pow+0xa2e>
    8bd8:	4674      	mov	r4, lr
    8bda:	f7ff bb36 	b.w	824a <__ieee754_pow+0x4a>
    8bde:	4b29      	ldr	r3, [pc, #164]	; (8c84 <__ieee754_pow+0xa84>)
    8be0:	4598      	cmp	r8, r3
    8be2:	f73f ae0e 	bgt.w	8802 <__ieee754_pow+0x602>
    8be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8bea:	4692      	mov	sl, r2
    8bec:	4693      	mov	fp, r2
    8bee:	e638      	b.n	8862 <__ieee754_pow+0x662>
    8bf0:	4602      	mov	r2, r0
    8bf2:	460b      	mov	r3, r1
    8bf4:	f000 fa2e 	bl	9054 <__aeabi_dsub>
    8bf8:	4602      	mov	r2, r0
    8bfa:	460b      	mov	r3, r1
    8bfc:	f000 fd08 	bl	9610 <__aeabi_ddiv>
    8c00:	f7ff bb40 	b.w	8284 <__ieee754_pow+0x84>
    8c04:	a318      	add	r3, pc, #96	; (adr r3, 8c68 <__ieee754_pow+0xa68>)
    8c06:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8c0e:	a318      	add	r3, pc, #96	; (adr r3, 8c70 <__ieee754_pow+0xa70>)
    8c10:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8c18:	4b1b      	ldr	r3, [pc, #108]	; (8c88 <__ieee754_pow+0xa88>)
    8c1a:	2200      	movs	r2, #0
    8c1c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    8c20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8c24:	e401      	b.n	842a <__ieee754_pow+0x22a>
    8c26:	465a      	mov	r2, fp
    8c28:	f000 f98a 	bl	8f40 <scalbn>
    8c2c:	e6c9      	b.n	89c2 <__ieee754_pow+0x7c2>
    8c2e:	f002 0201 	and.w	r2, r2, #1
    8c32:	f1c2 0402 	rsb	r4, r2, #2
    8c36:	f7ff bb08 	b.w	824a <__ieee754_pow+0x4a>
    8c3a:	bf00      	nop
    8c3c:	f3af 8000 	nop.w
    8c40:	60000000 	.word	0x60000000
    8c44:	3ff71547 	.word	0x3ff71547
    8c48:	f85ddf44 	.word	0xf85ddf44
    8c4c:	3e54ae0b 	.word	0x3e54ae0b
    8c50:	55555555 	.word	0x55555555
    8c54:	3fd55555 	.word	0x3fd55555
    8c58:	652b82fe 	.word	0x652b82fe
    8c5c:	3ff71547 	.word	0x3ff71547
    8c60:	8800759c 	.word	0x8800759c
    8c64:	7e37e43c 	.word	0x7e37e43c
    8c68:	40000000 	.word	0x40000000
    8c6c:	3fe2b803 	.word	0x3fe2b803
    8c70:	43cfd006 	.word	0x43cfd006
    8c74:	3e4cfdeb 	.word	0x3e4cfdeb
    8c78:	3feffffe 	.word	0x3feffffe
    8c7c:	3ff00000 	.word	0x3ff00000
    8c80:	3fd00000 	.word	0x3fd00000
    8c84:	3fe00000 	.word	0x3fe00000
    8c88:	3ff80000 	.word	0x3ff80000

00008c8c <__ieee754_sqrt>:
    8c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c90:	4f5b      	ldr	r7, [pc, #364]	; (8e00 <__ieee754_sqrt+0x174>)
    8c92:	438f      	bics	r7, r1
    8c94:	4605      	mov	r5, r0
    8c96:	460c      	mov	r4, r1
    8c98:	f000 8092 	beq.w	8dc0 <__ieee754_sqrt+0x134>
    8c9c:	2900      	cmp	r1, #0
    8c9e:	460b      	mov	r3, r1
    8ca0:	4602      	mov	r2, r0
    8ca2:	dd6f      	ble.n	8d84 <__ieee754_sqrt+0xf8>
    8ca4:	150f      	asrs	r7, r1, #20
    8ca6:	d07b      	beq.n	8da0 <__ieee754_sqrt+0x114>
    8ca8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    8cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8cb0:	07f8      	lsls	r0, r7, #31
    8cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8cb6:	d45c      	bmi.n	8d72 <__ieee754_sqrt+0xe6>
    8cb8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    8cbc:	2600      	movs	r6, #0
    8cbe:	440b      	add	r3, r1
    8cc0:	107f      	asrs	r7, r7, #1
    8cc2:	0052      	lsls	r2, r2, #1
    8cc4:	46b6      	mov	lr, r6
    8cc6:	2016      	movs	r0, #22
    8cc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8ccc:	eb0e 0401 	add.w	r4, lr, r1
    8cd0:	429c      	cmp	r4, r3
    8cd2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    8cd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
    8cda:	dc03      	bgt.n	8ce4 <__ieee754_sqrt+0x58>
    8cdc:	1b1b      	subs	r3, r3, r4
    8cde:	eb04 0e01 	add.w	lr, r4, r1
    8ce2:	440e      	add	r6, r1
    8ce4:	3801      	subs	r0, #1
    8ce6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    8cea:	ea4f 0151 	mov.w	r1, r1, lsr #1
    8cee:	d1ed      	bne.n	8ccc <__ieee754_sqrt+0x40>
    8cf0:	4684      	mov	ip, r0
    8cf2:	2420      	movs	r4, #32
    8cf4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    8cf8:	e009      	b.n	8d0e <__ieee754_sqrt+0x82>
    8cfa:	d020      	beq.n	8d3e <__ieee754_sqrt+0xb2>
    8cfc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    8d00:	3c01      	subs	r4, #1
    8d02:	ea4f 0151 	mov.w	r1, r1, lsr #1
    8d06:	442b      	add	r3, r5
    8d08:	ea4f 0242 	mov.w	r2, r2, lsl #1
    8d0c:	d020      	beq.n	8d50 <__ieee754_sqrt+0xc4>
    8d0e:	4573      	cmp	r3, lr
    8d10:	eb01 050c 	add.w	r5, r1, ip
    8d14:	ddf1      	ble.n	8cfa <__ieee754_sqrt+0x6e>
    8d16:	2d00      	cmp	r5, #0
    8d18:	eb05 0c01 	add.w	ip, r5, r1
    8d1c:	db09      	blt.n	8d32 <__ieee754_sqrt+0xa6>
    8d1e:	46f0      	mov	r8, lr
    8d20:	4295      	cmp	r5, r2
    8d22:	eba3 030e 	sub.w	r3, r3, lr
    8d26:	d900      	bls.n	8d2a <__ieee754_sqrt+0x9e>
    8d28:	3b01      	subs	r3, #1
    8d2a:	1b52      	subs	r2, r2, r5
    8d2c:	4408      	add	r0, r1
    8d2e:	46c6      	mov	lr, r8
    8d30:	e7e4      	b.n	8cfc <__ieee754_sqrt+0x70>
    8d32:	f1bc 0f00 	cmp.w	ip, #0
    8d36:	dbf2      	blt.n	8d1e <__ieee754_sqrt+0x92>
    8d38:	f10e 0801 	add.w	r8, lr, #1
    8d3c:	e7f0      	b.n	8d20 <__ieee754_sqrt+0x94>
    8d3e:	4295      	cmp	r5, r2
    8d40:	d8dc      	bhi.n	8cfc <__ieee754_sqrt+0x70>
    8d42:	2d00      	cmp	r5, #0
    8d44:	eb05 0c01 	add.w	ip, r5, r1
    8d48:	db44      	blt.n	8dd4 <__ieee754_sqrt+0x148>
    8d4a:	4698      	mov	r8, r3
    8d4c:	2300      	movs	r3, #0
    8d4e:	e7ec      	b.n	8d2a <__ieee754_sqrt+0x9e>
    8d50:	4313      	orrs	r3, r2
    8d52:	d113      	bne.n	8d7c <__ieee754_sqrt+0xf0>
    8d54:	0840      	lsrs	r0, r0, #1
    8d56:	1073      	asrs	r3, r6, #1
    8d58:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    8d5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    8d60:	07f2      	lsls	r2, r6, #31
    8d62:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    8d66:	bf48      	it	mi
    8d68:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    8d6c:	4649      	mov	r1, r9
    8d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d72:	005b      	lsls	r3, r3, #1
    8d74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    8d78:	0052      	lsls	r2, r2, #1
    8d7a:	e79d      	b.n	8cb8 <__ieee754_sqrt+0x2c>
    8d7c:	1c41      	adds	r1, r0, #1
    8d7e:	d02d      	beq.n	8ddc <__ieee754_sqrt+0x150>
    8d80:	3001      	adds	r0, #1
    8d82:	e7e7      	b.n	8d54 <__ieee754_sqrt+0xc8>
    8d84:	4606      	mov	r6, r0
    8d86:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    8d8a:	433e      	orrs	r6, r7
    8d8c:	d0ef      	beq.n	8d6e <__ieee754_sqrt+0xe2>
    8d8e:	bb69      	cbnz	r1, 8dec <__ieee754_sqrt+0x160>
    8d90:	460f      	mov	r7, r1
    8d92:	0ad3      	lsrs	r3, r2, #11
    8d94:	3f15      	subs	r7, #21
    8d96:	0552      	lsls	r2, r2, #21
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d0fa      	beq.n	8d92 <__ieee754_sqrt+0x106>
    8d9c:	02de      	lsls	r6, r3, #11
    8d9e:	d420      	bmi.n	8de2 <__ieee754_sqrt+0x156>
    8da0:	2400      	movs	r4, #0
    8da2:	e000      	b.n	8da6 <__ieee754_sqrt+0x11a>
    8da4:	4604      	mov	r4, r0
    8da6:	005b      	lsls	r3, r3, #1
    8da8:	02dd      	lsls	r5, r3, #11
    8daa:	f104 0001 	add.w	r0, r4, #1
    8dae:	d5f9      	bpl.n	8da4 <__ieee754_sqrt+0x118>
    8db0:	f1c0 0120 	rsb	r1, r0, #32
    8db4:	fa22 f101 	lsr.w	r1, r2, r1
    8db8:	430b      	orrs	r3, r1
    8dba:	1b3f      	subs	r7, r7, r4
    8dbc:	4082      	lsls	r2, r0
    8dbe:	e773      	b.n	8ca8 <__ieee754_sqrt+0x1c>
    8dc0:	4602      	mov	r2, r0
    8dc2:	460b      	mov	r3, r1
    8dc4:	f000 fafa 	bl	93bc <__aeabi_dmul>
    8dc8:	462a      	mov	r2, r5
    8dca:	4623      	mov	r3, r4
    8dcc:	f000 f944 	bl	9058 <__adddf3>
    8dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dd4:	f1bc 0f00 	cmp.w	ip, #0
    8dd8:	daae      	bge.n	8d38 <__ieee754_sqrt+0xac>
    8dda:	e7b6      	b.n	8d4a <__ieee754_sqrt+0xbe>
    8ddc:	3601      	adds	r6, #1
    8dde:	4620      	mov	r0, r4
    8de0:	e7b9      	b.n	8d56 <__ieee754_sqrt+0xca>
    8de2:	2000      	movs	r0, #0
    8de4:	2120      	movs	r1, #32
    8de6:	f04f 34ff 	mov.w	r4, #4294967295
    8dea:	e7e3      	b.n	8db4 <__ieee754_sqrt+0x128>
    8dec:	4602      	mov	r2, r0
    8dee:	460b      	mov	r3, r1
    8df0:	f000 f930 	bl	9054 <__aeabi_dsub>
    8df4:	4602      	mov	r2, r0
    8df6:	460b      	mov	r3, r1
    8df8:	f000 fc0a 	bl	9610 <__aeabi_ddiv>
    8dfc:	e7b7      	b.n	8d6e <__ieee754_sqrt+0xe2>
    8dfe:	bf00      	nop
    8e00:	7ff00000 	.word	0x7ff00000

00008e04 <fabs>:
    8e04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8e08:	4770      	bx	lr
    8e0a:	bf00      	nop

00008e0c <finite>:
    8e0c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    8e10:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    8e14:	0fc0      	lsrs	r0, r0, #31
    8e16:	4770      	bx	lr

00008e18 <matherr>:
    8e18:	2000      	movs	r0, #0
    8e1a:	4770      	bx	lr

00008e1c <nan>:
    8e1c:	2000      	movs	r0, #0
    8e1e:	4901      	ldr	r1, [pc, #4]	; (8e24 <nan+0x8>)
    8e20:	4770      	bx	lr
    8e22:	bf00      	nop
    8e24:	7ff80000 	.word	0x7ff80000

00008e28 <rint>:
    8e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e2a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    8e2e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    8e32:	2e13      	cmp	r6, #19
    8e34:	b083      	sub	sp, #12
    8e36:	4602      	mov	r2, r0
    8e38:	460b      	mov	r3, r1
    8e3a:	460c      	mov	r4, r1
    8e3c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    8e40:	4607      	mov	r7, r0
    8e42:	dc2e      	bgt.n	8ea2 <rint+0x7a>
    8e44:	2e00      	cmp	r6, #0
    8e46:	db49      	blt.n	8edc <rint+0xb4>
    8e48:	493a      	ldr	r1, [pc, #232]	; (8f34 <rint+0x10c>)
    8e4a:	4131      	asrs	r1, r6
    8e4c:	ea03 0001 	and.w	r0, r3, r1
    8e50:	4310      	orrs	r0, r2
    8e52:	d02b      	beq.n	8eac <rint+0x84>
    8e54:	0849      	lsrs	r1, r1, #1
    8e56:	400b      	ands	r3, r1
    8e58:	ea53 0702 	orrs.w	r7, r3, r2
    8e5c:	d00c      	beq.n	8e78 <rint+0x50>
    8e5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    8e62:	2e13      	cmp	r6, #19
    8e64:	ea24 0101 	bic.w	r1, r4, r1
    8e68:	fa43 f406 	asr.w	r4, r3, r6
    8e6c:	ea44 0401 	orr.w	r4, r4, r1
    8e70:	bf0c      	ite	eq
    8e72:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    8e76:	2700      	movne	r7, #0
    8e78:	4b2f      	ldr	r3, [pc, #188]	; (8f38 <rint+0x110>)
    8e7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    8e7e:	4621      	mov	r1, r4
    8e80:	e9d5 4500 	ldrd	r4, r5, [r5]
    8e84:	4638      	mov	r0, r7
    8e86:	4622      	mov	r2, r4
    8e88:	462b      	mov	r3, r5
    8e8a:	f000 f8e5 	bl	9058 <__adddf3>
    8e8e:	e9cd 0100 	strd	r0, r1, [sp]
    8e92:	4622      	mov	r2, r4
    8e94:	462b      	mov	r3, r5
    8e96:	e9dd 0100 	ldrd	r0, r1, [sp]
    8e9a:	f000 f8db 	bl	9054 <__aeabi_dsub>
    8e9e:	b003      	add	sp, #12
    8ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ea2:	2e33      	cmp	r6, #51	; 0x33
    8ea4:	dd06      	ble.n	8eb4 <rint+0x8c>
    8ea6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    8eaa:	d040      	beq.n	8f2e <rint+0x106>
    8eac:	4610      	mov	r0, r2
    8eae:	4619      	mov	r1, r3
    8eb0:	b003      	add	sp, #12
    8eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8eb4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    8eb8:	f04f 31ff 	mov.w	r1, #4294967295
    8ebc:	fa21 f10e 	lsr.w	r1, r1, lr
    8ec0:	4208      	tst	r0, r1
    8ec2:	d0f3      	beq.n	8eac <rint+0x84>
    8ec4:	0849      	lsrs	r1, r1, #1
    8ec6:	4208      	tst	r0, r1
    8ec8:	d0d6      	beq.n	8e78 <rint+0x50>
    8eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ece:	ea20 0101 	bic.w	r1, r0, r1
    8ed2:	fa43 fe0e 	asr.w	lr, r3, lr
    8ed6:	ea4e 0701 	orr.w	r7, lr, r1
    8eda:	e7cd      	b.n	8e78 <rint+0x50>
    8edc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8ee0:	4301      	orrs	r1, r0
    8ee2:	d0e3      	beq.n	8eac <rint+0x84>
    8ee4:	f3c3 0113 	ubfx	r1, r3, #0, #20
    8ee8:	4e13      	ldr	r6, [pc, #76]	; (8f38 <rint+0x110>)
    8eea:	4301      	orrs	r1, r0
    8eec:	f1c1 0c00 	rsb	ip, r1, #0
    8ef0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    8ef4:	e9d6 6700 	ldrd	r6, r7, [r6]
    8ef8:	ea4c 0c01 	orr.w	ip, ip, r1
    8efc:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    8f00:	0c5c      	lsrs	r4, r3, #17
    8f02:	0464      	lsls	r4, r4, #17
    8f04:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    8f08:	ea43 0104 	orr.w	r1, r3, r4
    8f0c:	4632      	mov	r2, r6
    8f0e:	463b      	mov	r3, r7
    8f10:	f000 f8a2 	bl	9058 <__adddf3>
    8f14:	e9cd 0100 	strd	r0, r1, [sp]
    8f18:	4632      	mov	r2, r6
    8f1a:	463b      	mov	r3, r7
    8f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
    8f20:	f000 f898 	bl	9054 <__aeabi_dsub>
    8f24:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    8f28:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    8f2c:	e7c0      	b.n	8eb0 <rint+0x88>
    8f2e:	f000 f893 	bl	9058 <__adddf3>
    8f32:	e7bd      	b.n	8eb0 <rint+0x88>
    8f34:	000fffff 	.word	0x000fffff
    8f38:	00009c28 	.word	0x00009c28
    8f3c:	00000000 	.word	0x00000000

00008f40 <scalbn>:
    8f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f42:	f3c1 560a 	ubfx	r6, r1, #20, #11
    8f46:	4604      	mov	r4, r0
    8f48:	460d      	mov	r5, r1
    8f4a:	460b      	mov	r3, r1
    8f4c:	4617      	mov	r7, r2
    8f4e:	bb0e      	cbnz	r6, 8f94 <scalbn+0x54>
    8f50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    8f54:	4303      	orrs	r3, r0
    8f56:	4686      	mov	lr, r0
    8f58:	d025      	beq.n	8fa6 <scalbn+0x66>
    8f5a:	2200      	movs	r2, #0
    8f5c:	4b34      	ldr	r3, [pc, #208]	; (9030 <scalbn+0xf0>)
    8f5e:	f000 fa2d 	bl	93bc <__aeabi_dmul>
    8f62:	4a34      	ldr	r2, [pc, #208]	; (9034 <scalbn+0xf4>)
    8f64:	4297      	cmp	r7, r2
    8f66:	4604      	mov	r4, r0
    8f68:	460d      	mov	r5, r1
    8f6a:	460b      	mov	r3, r1
    8f6c:	db2a      	blt.n	8fc4 <scalbn+0x84>
    8f6e:	f3c1 560a 	ubfx	r6, r1, #20, #11
    8f72:	3e36      	subs	r6, #54	; 0x36
    8f74:	443e      	add	r6, r7
    8f76:	f240 72fe 	movw	r2, #2046	; 0x7fe
    8f7a:	4296      	cmp	r6, r2
    8f7c:	dc28      	bgt.n	8fd0 <scalbn+0x90>
    8f7e:	2e00      	cmp	r6, #0
    8f80:	dd12      	ble.n	8fa8 <scalbn+0x68>
    8f82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    8f86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    8f8a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    8f8e:	4620      	mov	r0, r4
    8f90:	4629      	mov	r1, r5
    8f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f94:	f240 72ff 	movw	r2, #2047	; 0x7ff
    8f98:	4296      	cmp	r6, r2
    8f9a:	d1eb      	bne.n	8f74 <scalbn+0x34>
    8f9c:	4602      	mov	r2, r0
    8f9e:	460b      	mov	r3, r1
    8fa0:	f000 f85a 	bl	9058 <__adddf3>
    8fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fa8:	f116 0f35 	cmn.w	r6, #53	; 0x35
    8fac:	da1d      	bge.n	8fea <scalbn+0xaa>
    8fae:	f24c 3350 	movw	r3, #50000	; 0xc350
    8fb2:	429f      	cmp	r7, r3
    8fb4:	4622      	mov	r2, r4
    8fb6:	462b      	mov	r3, r5
    8fb8:	dc25      	bgt.n	9006 <scalbn+0xc6>
    8fba:	a119      	add	r1, pc, #100	; (adr r1, 9020 <scalbn+0xe0>)
    8fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
    8fc0:	f000 f83c 	bl	903c <copysign>
    8fc4:	a316      	add	r3, pc, #88	; (adr r3, 9020 <scalbn+0xe0>)
    8fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fca:	f000 f9f7 	bl	93bc <__aeabi_dmul>
    8fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fd0:	4622      	mov	r2, r4
    8fd2:	462b      	mov	r3, r5
    8fd4:	a114      	add	r1, pc, #80	; (adr r1, 9028 <scalbn+0xe8>)
    8fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
    8fda:	f000 f82f 	bl	903c <copysign>
    8fde:	a312      	add	r3, pc, #72	; (adr r3, 9028 <scalbn+0xe8>)
    8fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fe4:	f000 f9ea 	bl	93bc <__aeabi_dmul>
    8fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    8fee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    8ff2:	3636      	adds	r6, #54	; 0x36
    8ff4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    8ff8:	4620      	mov	r0, r4
    8ffa:	4629      	mov	r1, r5
    8ffc:	2200      	movs	r2, #0
    8ffe:	4b0e      	ldr	r3, [pc, #56]	; (9038 <scalbn+0xf8>)
    9000:	f000 f9dc 	bl	93bc <__aeabi_dmul>
    9004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9006:	a108      	add	r1, pc, #32	; (adr r1, 9028 <scalbn+0xe8>)
    9008:	e9d1 0100 	ldrd	r0, r1, [r1]
    900c:	f000 f816 	bl	903c <copysign>
    9010:	a305      	add	r3, pc, #20	; (adr r3, 9028 <scalbn+0xe8>)
    9012:	e9d3 2300 	ldrd	r2, r3, [r3]
    9016:	f000 f9d1 	bl	93bc <__aeabi_dmul>
    901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    901c:	f3af 8000 	nop.w
    9020:	c2f8f359 	.word	0xc2f8f359
    9024:	01a56e1f 	.word	0x01a56e1f
    9028:	8800759c 	.word	0x8800759c
    902c:	7e37e43c 	.word	0x7e37e43c
    9030:	43500000 	.word	0x43500000
    9034:	ffff3cb0 	.word	0xffff3cb0
    9038:	3c900000 	.word	0x3c900000

0000903c <copysign>:
    903c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    9040:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    9044:	ea42 0103 	orr.w	r1, r2, r3
    9048:	4770      	bx	lr
    904a:	bf00      	nop

0000904c <__aeabi_drsub>:
    904c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    9050:	e002      	b.n	9058 <__adddf3>
    9052:	bf00      	nop

00009054 <__aeabi_dsub>:
    9054:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00009058 <__adddf3>:
    9058:	b530      	push	{r4, r5, lr}
    905a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    905e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    9062:	ea94 0f05 	teq	r4, r5
    9066:	bf08      	it	eq
    9068:	ea90 0f02 	teqeq	r0, r2
    906c:	bf1f      	itttt	ne
    906e:	ea54 0c00 	orrsne.w	ip, r4, r0
    9072:	ea55 0c02 	orrsne.w	ip, r5, r2
    9076:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    907a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    907e:	f000 80e2 	beq.w	9246 <__adddf3+0x1ee>
    9082:	ea4f 5454 	mov.w	r4, r4, lsr #21
    9086:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    908a:	bfb8      	it	lt
    908c:	426d      	neglt	r5, r5
    908e:	dd0c      	ble.n	90aa <__adddf3+0x52>
    9090:	442c      	add	r4, r5
    9092:	ea80 0202 	eor.w	r2, r0, r2
    9096:	ea81 0303 	eor.w	r3, r1, r3
    909a:	ea82 0000 	eor.w	r0, r2, r0
    909e:	ea83 0101 	eor.w	r1, r3, r1
    90a2:	ea80 0202 	eor.w	r2, r0, r2
    90a6:	ea81 0303 	eor.w	r3, r1, r3
    90aa:	2d36      	cmp	r5, #54	; 0x36
    90ac:	bf88      	it	hi
    90ae:	bd30      	pophi	{r4, r5, pc}
    90b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    90b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    90b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    90bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    90c0:	d002      	beq.n	90c8 <__adddf3+0x70>
    90c2:	4240      	negs	r0, r0
    90c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    90c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    90cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    90d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    90d4:	d002      	beq.n	90dc <__adddf3+0x84>
    90d6:	4252      	negs	r2, r2
    90d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    90dc:	ea94 0f05 	teq	r4, r5
    90e0:	f000 80a7 	beq.w	9232 <__adddf3+0x1da>
    90e4:	f1a4 0401 	sub.w	r4, r4, #1
    90e8:	f1d5 0e20 	rsbs	lr, r5, #32
    90ec:	db0d      	blt.n	910a <__adddf3+0xb2>
    90ee:	fa02 fc0e 	lsl.w	ip, r2, lr
    90f2:	fa22 f205 	lsr.w	r2, r2, r5
    90f6:	1880      	adds	r0, r0, r2
    90f8:	f141 0100 	adc.w	r1, r1, #0
    90fc:	fa03 f20e 	lsl.w	r2, r3, lr
    9100:	1880      	adds	r0, r0, r2
    9102:	fa43 f305 	asr.w	r3, r3, r5
    9106:	4159      	adcs	r1, r3
    9108:	e00e      	b.n	9128 <__adddf3+0xd0>
    910a:	f1a5 0520 	sub.w	r5, r5, #32
    910e:	f10e 0e20 	add.w	lr, lr, #32
    9112:	2a01      	cmp	r2, #1
    9114:	fa03 fc0e 	lsl.w	ip, r3, lr
    9118:	bf28      	it	cs
    911a:	f04c 0c02 	orrcs.w	ip, ip, #2
    911e:	fa43 f305 	asr.w	r3, r3, r5
    9122:	18c0      	adds	r0, r0, r3
    9124:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9128:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    912c:	d507      	bpl.n	913e <__adddf3+0xe6>
    912e:	f04f 0e00 	mov.w	lr, #0
    9132:	f1dc 0c00 	rsbs	ip, ip, #0
    9136:	eb7e 0000 	sbcs.w	r0, lr, r0
    913a:	eb6e 0101 	sbc.w	r1, lr, r1
    913e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9142:	d31b      	bcc.n	917c <__adddf3+0x124>
    9144:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    9148:	d30c      	bcc.n	9164 <__adddf3+0x10c>
    914a:	0849      	lsrs	r1, r1, #1
    914c:	ea5f 0030 	movs.w	r0, r0, rrx
    9150:	ea4f 0c3c 	mov.w	ip, ip, rrx
    9154:	f104 0401 	add.w	r4, r4, #1
    9158:	ea4f 5244 	mov.w	r2, r4, lsl #21
    915c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    9160:	f080 809a 	bcs.w	9298 <__adddf3+0x240>
    9164:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9168:	bf08      	it	eq
    916a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    916e:	f150 0000 	adcs.w	r0, r0, #0
    9172:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9176:	ea41 0105 	orr.w	r1, r1, r5
    917a:	bd30      	pop	{r4, r5, pc}
    917c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    9180:	4140      	adcs	r0, r0
    9182:	eb41 0101 	adc.w	r1, r1, r1
    9186:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    918a:	f1a4 0401 	sub.w	r4, r4, #1
    918e:	d1e9      	bne.n	9164 <__adddf3+0x10c>
    9190:	f091 0f00 	teq	r1, #0
    9194:	bf04      	itt	eq
    9196:	4601      	moveq	r1, r0
    9198:	2000      	moveq	r0, #0
    919a:	fab1 f381 	clz	r3, r1
    919e:	bf08      	it	eq
    91a0:	3320      	addeq	r3, #32
    91a2:	f1a3 030b 	sub.w	r3, r3, #11
    91a6:	f1b3 0220 	subs.w	r2, r3, #32
    91aa:	da0c      	bge.n	91c6 <__adddf3+0x16e>
    91ac:	320c      	adds	r2, #12
    91ae:	dd08      	ble.n	91c2 <__adddf3+0x16a>
    91b0:	f102 0c14 	add.w	ip, r2, #20
    91b4:	f1c2 020c 	rsb	r2, r2, #12
    91b8:	fa01 f00c 	lsl.w	r0, r1, ip
    91bc:	fa21 f102 	lsr.w	r1, r1, r2
    91c0:	e00c      	b.n	91dc <__adddf3+0x184>
    91c2:	f102 0214 	add.w	r2, r2, #20
    91c6:	bfd8      	it	le
    91c8:	f1c2 0c20 	rsble	ip, r2, #32
    91cc:	fa01 f102 	lsl.w	r1, r1, r2
    91d0:	fa20 fc0c 	lsr.w	ip, r0, ip
    91d4:	bfdc      	itt	le
    91d6:	ea41 010c 	orrle.w	r1, r1, ip
    91da:	4090      	lslle	r0, r2
    91dc:	1ae4      	subs	r4, r4, r3
    91de:	bfa2      	ittt	ge
    91e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    91e4:	4329      	orrge	r1, r5
    91e6:	bd30      	popge	{r4, r5, pc}
    91e8:	ea6f 0404 	mvn.w	r4, r4
    91ec:	3c1f      	subs	r4, #31
    91ee:	da1c      	bge.n	922a <__adddf3+0x1d2>
    91f0:	340c      	adds	r4, #12
    91f2:	dc0e      	bgt.n	9212 <__adddf3+0x1ba>
    91f4:	f104 0414 	add.w	r4, r4, #20
    91f8:	f1c4 0220 	rsb	r2, r4, #32
    91fc:	fa20 f004 	lsr.w	r0, r0, r4
    9200:	fa01 f302 	lsl.w	r3, r1, r2
    9204:	ea40 0003 	orr.w	r0, r0, r3
    9208:	fa21 f304 	lsr.w	r3, r1, r4
    920c:	ea45 0103 	orr.w	r1, r5, r3
    9210:	bd30      	pop	{r4, r5, pc}
    9212:	f1c4 040c 	rsb	r4, r4, #12
    9216:	f1c4 0220 	rsb	r2, r4, #32
    921a:	fa20 f002 	lsr.w	r0, r0, r2
    921e:	fa01 f304 	lsl.w	r3, r1, r4
    9222:	ea40 0003 	orr.w	r0, r0, r3
    9226:	4629      	mov	r1, r5
    9228:	bd30      	pop	{r4, r5, pc}
    922a:	fa21 f004 	lsr.w	r0, r1, r4
    922e:	4629      	mov	r1, r5
    9230:	bd30      	pop	{r4, r5, pc}
    9232:	f094 0f00 	teq	r4, #0
    9236:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    923a:	bf06      	itte	eq
    923c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    9240:	3401      	addeq	r4, #1
    9242:	3d01      	subne	r5, #1
    9244:	e74e      	b.n	90e4 <__adddf3+0x8c>
    9246:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    924a:	bf18      	it	ne
    924c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9250:	d029      	beq.n	92a6 <__adddf3+0x24e>
    9252:	ea94 0f05 	teq	r4, r5
    9256:	bf08      	it	eq
    9258:	ea90 0f02 	teqeq	r0, r2
    925c:	d005      	beq.n	926a <__adddf3+0x212>
    925e:	ea54 0c00 	orrs.w	ip, r4, r0
    9262:	bf04      	itt	eq
    9264:	4619      	moveq	r1, r3
    9266:	4610      	moveq	r0, r2
    9268:	bd30      	pop	{r4, r5, pc}
    926a:	ea91 0f03 	teq	r1, r3
    926e:	bf1e      	ittt	ne
    9270:	2100      	movne	r1, #0
    9272:	2000      	movne	r0, #0
    9274:	bd30      	popne	{r4, r5, pc}
    9276:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    927a:	d105      	bne.n	9288 <__adddf3+0x230>
    927c:	0040      	lsls	r0, r0, #1
    927e:	4149      	adcs	r1, r1
    9280:	bf28      	it	cs
    9282:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9286:	bd30      	pop	{r4, r5, pc}
    9288:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    928c:	bf3c      	itt	cc
    928e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    9292:	bd30      	popcc	{r4, r5, pc}
    9294:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9298:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    929c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    92a0:	f04f 0000 	mov.w	r0, #0
    92a4:	bd30      	pop	{r4, r5, pc}
    92a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    92aa:	bf1a      	itte	ne
    92ac:	4619      	movne	r1, r3
    92ae:	4610      	movne	r0, r2
    92b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    92b4:	bf1c      	itt	ne
    92b6:	460b      	movne	r3, r1
    92b8:	4602      	movne	r2, r0
    92ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    92be:	bf06      	itte	eq
    92c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    92c4:	ea91 0f03 	teqeq	r1, r3
    92c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    92cc:	bd30      	pop	{r4, r5, pc}
    92ce:	bf00      	nop

000092d0 <__aeabi_ui2d>:
    92d0:	f090 0f00 	teq	r0, #0
    92d4:	bf04      	itt	eq
    92d6:	2100      	moveq	r1, #0
    92d8:	4770      	bxeq	lr
    92da:	b530      	push	{r4, r5, lr}
    92dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    92e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    92e4:	f04f 0500 	mov.w	r5, #0
    92e8:	f04f 0100 	mov.w	r1, #0
    92ec:	e750      	b.n	9190 <__adddf3+0x138>
    92ee:	bf00      	nop

000092f0 <__aeabi_i2d>:
    92f0:	f090 0f00 	teq	r0, #0
    92f4:	bf04      	itt	eq
    92f6:	2100      	moveq	r1, #0
    92f8:	4770      	bxeq	lr
    92fa:	b530      	push	{r4, r5, lr}
    92fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9300:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9304:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9308:	bf48      	it	mi
    930a:	4240      	negmi	r0, r0
    930c:	f04f 0100 	mov.w	r1, #0
    9310:	e73e      	b.n	9190 <__adddf3+0x138>
    9312:	bf00      	nop

00009314 <__aeabi_f2d>:
    9314:	0042      	lsls	r2, r0, #1
    9316:	ea4f 01e2 	mov.w	r1, r2, asr #3
    931a:	ea4f 0131 	mov.w	r1, r1, rrx
    931e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    9322:	bf1f      	itttt	ne
    9324:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9328:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    932c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    9330:	4770      	bxne	lr
    9332:	f092 0f00 	teq	r2, #0
    9336:	bf14      	ite	ne
    9338:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    933c:	4770      	bxeq	lr
    933e:	b530      	push	{r4, r5, lr}
    9340:	f44f 7460 	mov.w	r4, #896	; 0x380
    9344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    934c:	e720      	b.n	9190 <__adddf3+0x138>
    934e:	bf00      	nop

00009350 <__aeabi_ul2d>:
    9350:	ea50 0201 	orrs.w	r2, r0, r1
    9354:	bf08      	it	eq
    9356:	4770      	bxeq	lr
    9358:	b530      	push	{r4, r5, lr}
    935a:	f04f 0500 	mov.w	r5, #0
    935e:	e00a      	b.n	9376 <__aeabi_l2d+0x16>

00009360 <__aeabi_l2d>:
    9360:	ea50 0201 	orrs.w	r2, r0, r1
    9364:	bf08      	it	eq
    9366:	4770      	bxeq	lr
    9368:	b530      	push	{r4, r5, lr}
    936a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    936e:	d502      	bpl.n	9376 <__aeabi_l2d+0x16>
    9370:	4240      	negs	r0, r0
    9372:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9376:	f44f 6480 	mov.w	r4, #1024	; 0x400
    937a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    937e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    9382:	f43f aedc 	beq.w	913e <__adddf3+0xe6>
    9386:	f04f 0203 	mov.w	r2, #3
    938a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    938e:	bf18      	it	ne
    9390:	3203      	addne	r2, #3
    9392:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9396:	bf18      	it	ne
    9398:	3203      	addne	r2, #3
    939a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    939e:	f1c2 0320 	rsb	r3, r2, #32
    93a2:	fa00 fc03 	lsl.w	ip, r0, r3
    93a6:	fa20 f002 	lsr.w	r0, r0, r2
    93aa:	fa01 fe03 	lsl.w	lr, r1, r3
    93ae:	ea40 000e 	orr.w	r0, r0, lr
    93b2:	fa21 f102 	lsr.w	r1, r1, r2
    93b6:	4414      	add	r4, r2
    93b8:	e6c1      	b.n	913e <__adddf3+0xe6>
    93ba:	bf00      	nop

000093bc <__aeabi_dmul>:
    93bc:	b570      	push	{r4, r5, r6, lr}
    93be:	f04f 0cff 	mov.w	ip, #255	; 0xff
    93c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    93c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    93ca:	bf1d      	ittte	ne
    93cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    93d0:	ea94 0f0c 	teqne	r4, ip
    93d4:	ea95 0f0c 	teqne	r5, ip
    93d8:	f000 f8de 	bleq	9598 <__aeabi_dmul+0x1dc>
    93dc:	442c      	add	r4, r5
    93de:	ea81 0603 	eor.w	r6, r1, r3
    93e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    93e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    93ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    93ee:	bf18      	it	ne
    93f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    93f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    93f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    93fc:	d038      	beq.n	9470 <__aeabi_dmul+0xb4>
    93fe:	fba0 ce02 	umull	ip, lr, r0, r2
    9402:	f04f 0500 	mov.w	r5, #0
    9406:	fbe1 e502 	umlal	lr, r5, r1, r2
    940a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    940e:	fbe0 e503 	umlal	lr, r5, r0, r3
    9412:	f04f 0600 	mov.w	r6, #0
    9416:	fbe1 5603 	umlal	r5, r6, r1, r3
    941a:	f09c 0f00 	teq	ip, #0
    941e:	bf18      	it	ne
    9420:	f04e 0e01 	orrne.w	lr, lr, #1
    9424:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    9428:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    942c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    9430:	d204      	bcs.n	943c <__aeabi_dmul+0x80>
    9432:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    9436:	416d      	adcs	r5, r5
    9438:	eb46 0606 	adc.w	r6, r6, r6
    943c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    9440:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    9444:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    9448:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    944c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    9450:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9454:	bf88      	it	hi
    9456:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    945a:	d81e      	bhi.n	949a <__aeabi_dmul+0xde>
    945c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    9460:	bf08      	it	eq
    9462:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    9466:	f150 0000 	adcs.w	r0, r0, #0
    946a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    946e:	bd70      	pop	{r4, r5, r6, pc}
    9470:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9474:	ea46 0101 	orr.w	r1, r6, r1
    9478:	ea40 0002 	orr.w	r0, r0, r2
    947c:	ea81 0103 	eor.w	r1, r1, r3
    9480:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    9484:	bfc2      	ittt	gt
    9486:	ebd4 050c 	rsbsgt	r5, r4, ip
    948a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    948e:	bd70      	popgt	{r4, r5, r6, pc}
    9490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9494:	f04f 0e00 	mov.w	lr, #0
    9498:	3c01      	subs	r4, #1
    949a:	f300 80ab 	bgt.w	95f4 <__aeabi_dmul+0x238>
    949e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    94a2:	bfde      	ittt	le
    94a4:	2000      	movle	r0, #0
    94a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    94aa:	bd70      	pople	{r4, r5, r6, pc}
    94ac:	f1c4 0400 	rsb	r4, r4, #0
    94b0:	3c20      	subs	r4, #32
    94b2:	da35      	bge.n	9520 <__aeabi_dmul+0x164>
    94b4:	340c      	adds	r4, #12
    94b6:	dc1b      	bgt.n	94f0 <__aeabi_dmul+0x134>
    94b8:	f104 0414 	add.w	r4, r4, #20
    94bc:	f1c4 0520 	rsb	r5, r4, #32
    94c0:	fa00 f305 	lsl.w	r3, r0, r5
    94c4:	fa20 f004 	lsr.w	r0, r0, r4
    94c8:	fa01 f205 	lsl.w	r2, r1, r5
    94cc:	ea40 0002 	orr.w	r0, r0, r2
    94d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    94d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    94d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    94dc:	fa21 f604 	lsr.w	r6, r1, r4
    94e0:	eb42 0106 	adc.w	r1, r2, r6
    94e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    94e8:	bf08      	it	eq
    94ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    94ee:	bd70      	pop	{r4, r5, r6, pc}
    94f0:	f1c4 040c 	rsb	r4, r4, #12
    94f4:	f1c4 0520 	rsb	r5, r4, #32
    94f8:	fa00 f304 	lsl.w	r3, r0, r4
    94fc:	fa20 f005 	lsr.w	r0, r0, r5
    9500:	fa01 f204 	lsl.w	r2, r1, r4
    9504:	ea40 0002 	orr.w	r0, r0, r2
    9508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    950c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9510:	f141 0100 	adc.w	r1, r1, #0
    9514:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9518:	bf08      	it	eq
    951a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    951e:	bd70      	pop	{r4, r5, r6, pc}
    9520:	f1c4 0520 	rsb	r5, r4, #32
    9524:	fa00 f205 	lsl.w	r2, r0, r5
    9528:	ea4e 0e02 	orr.w	lr, lr, r2
    952c:	fa20 f304 	lsr.w	r3, r0, r4
    9530:	fa01 f205 	lsl.w	r2, r1, r5
    9534:	ea43 0302 	orr.w	r3, r3, r2
    9538:	fa21 f004 	lsr.w	r0, r1, r4
    953c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9540:	fa21 f204 	lsr.w	r2, r1, r4
    9544:	ea20 0002 	bic.w	r0, r0, r2
    9548:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    954c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9550:	bf08      	it	eq
    9552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9556:	bd70      	pop	{r4, r5, r6, pc}
    9558:	f094 0f00 	teq	r4, #0
    955c:	d10f      	bne.n	957e <__aeabi_dmul+0x1c2>
    955e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    9562:	0040      	lsls	r0, r0, #1
    9564:	eb41 0101 	adc.w	r1, r1, r1
    9568:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    956c:	bf08      	it	eq
    956e:	3c01      	subeq	r4, #1
    9570:	d0f7      	beq.n	9562 <__aeabi_dmul+0x1a6>
    9572:	ea41 0106 	orr.w	r1, r1, r6
    9576:	f095 0f00 	teq	r5, #0
    957a:	bf18      	it	ne
    957c:	4770      	bxne	lr
    957e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    9582:	0052      	lsls	r2, r2, #1
    9584:	eb43 0303 	adc.w	r3, r3, r3
    9588:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    958c:	bf08      	it	eq
    958e:	3d01      	subeq	r5, #1
    9590:	d0f7      	beq.n	9582 <__aeabi_dmul+0x1c6>
    9592:	ea43 0306 	orr.w	r3, r3, r6
    9596:	4770      	bx	lr
    9598:	ea94 0f0c 	teq	r4, ip
    959c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    95a0:	bf18      	it	ne
    95a2:	ea95 0f0c 	teqne	r5, ip
    95a6:	d00c      	beq.n	95c2 <__aeabi_dmul+0x206>
    95a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    95ac:	bf18      	it	ne
    95ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    95b2:	d1d1      	bne.n	9558 <__aeabi_dmul+0x19c>
    95b4:	ea81 0103 	eor.w	r1, r1, r3
    95b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    95bc:	f04f 0000 	mov.w	r0, #0
    95c0:	bd70      	pop	{r4, r5, r6, pc}
    95c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    95c6:	bf06      	itte	eq
    95c8:	4610      	moveq	r0, r2
    95ca:	4619      	moveq	r1, r3
    95cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    95d0:	d019      	beq.n	9606 <__aeabi_dmul+0x24a>
    95d2:	ea94 0f0c 	teq	r4, ip
    95d6:	d102      	bne.n	95de <__aeabi_dmul+0x222>
    95d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    95dc:	d113      	bne.n	9606 <__aeabi_dmul+0x24a>
    95de:	ea95 0f0c 	teq	r5, ip
    95e2:	d105      	bne.n	95f0 <__aeabi_dmul+0x234>
    95e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    95e8:	bf1c      	itt	ne
    95ea:	4610      	movne	r0, r2
    95ec:	4619      	movne	r1, r3
    95ee:	d10a      	bne.n	9606 <__aeabi_dmul+0x24a>
    95f0:	ea81 0103 	eor.w	r1, r1, r3
    95f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    95f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    95fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9600:	f04f 0000 	mov.w	r0, #0
    9604:	bd70      	pop	{r4, r5, r6, pc}
    9606:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    960a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    960e:	bd70      	pop	{r4, r5, r6, pc}

00009610 <__aeabi_ddiv>:
    9610:	b570      	push	{r4, r5, r6, lr}
    9612:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    961a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    961e:	bf1d      	ittte	ne
    9620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9624:	ea94 0f0c 	teqne	r4, ip
    9628:	ea95 0f0c 	teqne	r5, ip
    962c:	f000 f8a7 	bleq	977e <__aeabi_ddiv+0x16e>
    9630:	eba4 0405 	sub.w	r4, r4, r5
    9634:	ea81 0e03 	eor.w	lr, r1, r3
    9638:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    963c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9640:	f000 8088 	beq.w	9754 <__aeabi_ddiv+0x144>
    9644:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9648:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    964c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    9650:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9654:	ea4f 2202 	mov.w	r2, r2, lsl #8
    9658:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    965c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    9660:	ea4f 2600 	mov.w	r6, r0, lsl #8
    9664:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    9668:	429d      	cmp	r5, r3
    966a:	bf08      	it	eq
    966c:	4296      	cmpeq	r6, r2
    966e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    9672:	f504 7440 	add.w	r4, r4, #768	; 0x300
    9676:	d202      	bcs.n	967e <__aeabi_ddiv+0x6e>
    9678:	085b      	lsrs	r3, r3, #1
    967a:	ea4f 0232 	mov.w	r2, r2, rrx
    967e:	1ab6      	subs	r6, r6, r2
    9680:	eb65 0503 	sbc.w	r5, r5, r3
    9684:	085b      	lsrs	r3, r3, #1
    9686:	ea4f 0232 	mov.w	r2, r2, rrx
    968a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    968e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    9692:	ebb6 0e02 	subs.w	lr, r6, r2
    9696:	eb75 0e03 	sbcs.w	lr, r5, r3
    969a:	bf22      	ittt	cs
    969c:	1ab6      	subcs	r6, r6, r2
    969e:	4675      	movcs	r5, lr
    96a0:	ea40 000c 	orrcs.w	r0, r0, ip
    96a4:	085b      	lsrs	r3, r3, #1
    96a6:	ea4f 0232 	mov.w	r2, r2, rrx
    96aa:	ebb6 0e02 	subs.w	lr, r6, r2
    96ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    96b2:	bf22      	ittt	cs
    96b4:	1ab6      	subcs	r6, r6, r2
    96b6:	4675      	movcs	r5, lr
    96b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    96bc:	085b      	lsrs	r3, r3, #1
    96be:	ea4f 0232 	mov.w	r2, r2, rrx
    96c2:	ebb6 0e02 	subs.w	lr, r6, r2
    96c6:	eb75 0e03 	sbcs.w	lr, r5, r3
    96ca:	bf22      	ittt	cs
    96cc:	1ab6      	subcs	r6, r6, r2
    96ce:	4675      	movcs	r5, lr
    96d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    96d4:	085b      	lsrs	r3, r3, #1
    96d6:	ea4f 0232 	mov.w	r2, r2, rrx
    96da:	ebb6 0e02 	subs.w	lr, r6, r2
    96de:	eb75 0e03 	sbcs.w	lr, r5, r3
    96e2:	bf22      	ittt	cs
    96e4:	1ab6      	subcs	r6, r6, r2
    96e6:	4675      	movcs	r5, lr
    96e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    96ec:	ea55 0e06 	orrs.w	lr, r5, r6
    96f0:	d018      	beq.n	9724 <__aeabi_ddiv+0x114>
    96f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    96f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    96fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
    96fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    9702:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    9706:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    970a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    970e:	d1c0      	bne.n	9692 <__aeabi_ddiv+0x82>
    9710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9714:	d10b      	bne.n	972e <__aeabi_ddiv+0x11e>
    9716:	ea41 0100 	orr.w	r1, r1, r0
    971a:	f04f 0000 	mov.w	r0, #0
    971e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    9722:	e7b6      	b.n	9692 <__aeabi_ddiv+0x82>
    9724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9728:	bf04      	itt	eq
    972a:	4301      	orreq	r1, r0
    972c:	2000      	moveq	r0, #0
    972e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9732:	bf88      	it	hi
    9734:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9738:	f63f aeaf 	bhi.w	949a <__aeabi_dmul+0xde>
    973c:	ebb5 0c03 	subs.w	ip, r5, r3
    9740:	bf04      	itt	eq
    9742:	ebb6 0c02 	subseq.w	ip, r6, r2
    9746:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    974a:	f150 0000 	adcs.w	r0, r0, #0
    974e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9752:	bd70      	pop	{r4, r5, r6, pc}
    9754:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    9758:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    975c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    9760:	bfc2      	ittt	gt
    9762:	ebd4 050c 	rsbsgt	r5, r4, ip
    9766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    976a:	bd70      	popgt	{r4, r5, r6, pc}
    976c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9770:	f04f 0e00 	mov.w	lr, #0
    9774:	3c01      	subs	r4, #1
    9776:	e690      	b.n	949a <__aeabi_dmul+0xde>
    9778:	ea45 0e06 	orr.w	lr, r5, r6
    977c:	e68d      	b.n	949a <__aeabi_dmul+0xde>
    977e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    9782:	ea94 0f0c 	teq	r4, ip
    9786:	bf08      	it	eq
    9788:	ea95 0f0c 	teqeq	r5, ip
    978c:	f43f af3b 	beq.w	9606 <__aeabi_dmul+0x24a>
    9790:	ea94 0f0c 	teq	r4, ip
    9794:	d10a      	bne.n	97ac <__aeabi_ddiv+0x19c>
    9796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    979a:	f47f af34 	bne.w	9606 <__aeabi_dmul+0x24a>
    979e:	ea95 0f0c 	teq	r5, ip
    97a2:	f47f af25 	bne.w	95f0 <__aeabi_dmul+0x234>
    97a6:	4610      	mov	r0, r2
    97a8:	4619      	mov	r1, r3
    97aa:	e72c      	b.n	9606 <__aeabi_dmul+0x24a>
    97ac:	ea95 0f0c 	teq	r5, ip
    97b0:	d106      	bne.n	97c0 <__aeabi_ddiv+0x1b0>
    97b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    97b6:	f43f aefd 	beq.w	95b4 <__aeabi_dmul+0x1f8>
    97ba:	4610      	mov	r0, r2
    97bc:	4619      	mov	r1, r3
    97be:	e722      	b.n	9606 <__aeabi_dmul+0x24a>
    97c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    97c4:	bf18      	it	ne
    97c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    97ca:	f47f aec5 	bne.w	9558 <__aeabi_dmul+0x19c>
    97ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    97d2:	f47f af0d 	bne.w	95f0 <__aeabi_dmul+0x234>
    97d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    97da:	f47f aeeb 	bne.w	95b4 <__aeabi_dmul+0x1f8>
    97de:	e712      	b.n	9606 <__aeabi_dmul+0x24a>

000097e0 <__gedf2>:
    97e0:	f04f 3cff 	mov.w	ip, #4294967295
    97e4:	e006      	b.n	97f4 <__cmpdf2+0x4>
    97e6:	bf00      	nop

000097e8 <__ledf2>:
    97e8:	f04f 0c01 	mov.w	ip, #1
    97ec:	e002      	b.n	97f4 <__cmpdf2+0x4>
    97ee:	bf00      	nop

000097f0 <__cmpdf2>:
    97f0:	f04f 0c01 	mov.w	ip, #1
    97f4:	f84d cd04 	str.w	ip, [sp, #-4]!
    97f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    97fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9804:	bf18      	it	ne
    9806:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    980a:	d01b      	beq.n	9844 <__cmpdf2+0x54>
    980c:	b001      	add	sp, #4
    980e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    9812:	bf0c      	ite	eq
    9814:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    9818:	ea91 0f03 	teqne	r1, r3
    981c:	bf02      	ittt	eq
    981e:	ea90 0f02 	teqeq	r0, r2
    9822:	2000      	moveq	r0, #0
    9824:	4770      	bxeq	lr
    9826:	f110 0f00 	cmn.w	r0, #0
    982a:	ea91 0f03 	teq	r1, r3
    982e:	bf58      	it	pl
    9830:	4299      	cmppl	r1, r3
    9832:	bf08      	it	eq
    9834:	4290      	cmpeq	r0, r2
    9836:	bf2c      	ite	cs
    9838:	17d8      	asrcs	r0, r3, #31
    983a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    983e:	f040 0001 	orr.w	r0, r0, #1
    9842:	4770      	bx	lr
    9844:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    984c:	d102      	bne.n	9854 <__cmpdf2+0x64>
    984e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9852:	d107      	bne.n	9864 <__cmpdf2+0x74>
    9854:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    985c:	d1d6      	bne.n	980c <__cmpdf2+0x1c>
    985e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9862:	d0d3      	beq.n	980c <__cmpdf2+0x1c>
    9864:	f85d 0b04 	ldr.w	r0, [sp], #4
    9868:	4770      	bx	lr
    986a:	bf00      	nop

0000986c <__aeabi_cdrcmple>:
    986c:	4684      	mov	ip, r0
    986e:	4610      	mov	r0, r2
    9870:	4662      	mov	r2, ip
    9872:	468c      	mov	ip, r1
    9874:	4619      	mov	r1, r3
    9876:	4663      	mov	r3, ip
    9878:	e000      	b.n	987c <__aeabi_cdcmpeq>
    987a:	bf00      	nop

0000987c <__aeabi_cdcmpeq>:
    987c:	b501      	push	{r0, lr}
    987e:	f7ff ffb7 	bl	97f0 <__cmpdf2>
    9882:	2800      	cmp	r0, #0
    9884:	bf48      	it	mi
    9886:	f110 0f00 	cmnmi.w	r0, #0
    988a:	bd01      	pop	{r0, pc}

0000988c <__aeabi_dcmpeq>:
    988c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9890:	f7ff fff4 	bl	987c <__aeabi_cdcmpeq>
    9894:	bf0c      	ite	eq
    9896:	2001      	moveq	r0, #1
    9898:	2000      	movne	r0, #0
    989a:	f85d fb08 	ldr.w	pc, [sp], #8
    989e:	bf00      	nop

000098a0 <__aeabi_dcmplt>:
    98a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    98a4:	f7ff ffea 	bl	987c <__aeabi_cdcmpeq>
    98a8:	bf34      	ite	cc
    98aa:	2001      	movcc	r0, #1
    98ac:	2000      	movcs	r0, #0
    98ae:	f85d fb08 	ldr.w	pc, [sp], #8
    98b2:	bf00      	nop

000098b4 <__aeabi_dcmple>:
    98b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    98b8:	f7ff ffe0 	bl	987c <__aeabi_cdcmpeq>
    98bc:	bf94      	ite	ls
    98be:	2001      	movls	r0, #1
    98c0:	2000      	movhi	r0, #0
    98c2:	f85d fb08 	ldr.w	pc, [sp], #8
    98c6:	bf00      	nop

000098c8 <__aeabi_dcmpge>:
    98c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    98cc:	f7ff ffce 	bl	986c <__aeabi_cdrcmple>
    98d0:	bf94      	ite	ls
    98d2:	2001      	movls	r0, #1
    98d4:	2000      	movhi	r0, #0
    98d6:	f85d fb08 	ldr.w	pc, [sp], #8
    98da:	bf00      	nop

000098dc <__aeabi_dcmpgt>:
    98dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    98e0:	f7ff ffc4 	bl	986c <__aeabi_cdrcmple>
    98e4:	bf34      	ite	cc
    98e6:	2001      	movcc	r0, #1
    98e8:	2000      	movcs	r0, #0
    98ea:	f85d fb08 	ldr.w	pc, [sp], #8
    98ee:	bf00      	nop

000098f0 <__aeabi_dcmpun>:
    98f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    98f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    98f8:	d102      	bne.n	9900 <__aeabi_dcmpun+0x10>
    98fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    98fe:	d10a      	bne.n	9916 <__aeabi_dcmpun+0x26>
    9900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9908:	d102      	bne.n	9910 <__aeabi_dcmpun+0x20>
    990a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    990e:	d102      	bne.n	9916 <__aeabi_dcmpun+0x26>
    9910:	f04f 0000 	mov.w	r0, #0
    9914:	4770      	bx	lr
    9916:	f04f 0001 	mov.w	r0, #1
    991a:	4770      	bx	lr

0000991c <__aeabi_d2f>:
    991c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    9924:	bf24      	itt	cs
    9926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    992a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    992e:	d90d      	bls.n	994c <__aeabi_d2f+0x30>
    9930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    9934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    9938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    993c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    9944:	bf08      	it	eq
    9946:	f020 0001 	biceq.w	r0, r0, #1
    994a:	4770      	bx	lr
    994c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    9950:	d121      	bne.n	9996 <__aeabi_d2f+0x7a>
    9952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    9956:	bfbc      	itt	lt
    9958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    995c:	4770      	bxlt	lr
    995e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9962:	ea4f 5252 	mov.w	r2, r2, lsr #21
    9966:	f1c2 0218 	rsb	r2, r2, #24
    996a:	f1c2 0c20 	rsb	ip, r2, #32
    996e:	fa10 f30c 	lsls.w	r3, r0, ip
    9972:	fa20 f002 	lsr.w	r0, r0, r2
    9976:	bf18      	it	ne
    9978:	f040 0001 	orrne.w	r0, r0, #1
    997c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    9980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    9984:	fa03 fc0c 	lsl.w	ip, r3, ip
    9988:	ea40 000c 	orr.w	r0, r0, ip
    998c:	fa23 f302 	lsr.w	r3, r3, r2
    9990:	ea4f 0343 	mov.w	r3, r3, lsl #1
    9994:	e7cc      	b.n	9930 <__aeabi_d2f+0x14>
    9996:	ea7f 5362 	mvns.w	r3, r2, asr #21
    999a:	d107      	bne.n	99ac <__aeabi_d2f+0x90>
    999c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    99a0:	bf1e      	ittt	ne
    99a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    99a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    99aa:	4770      	bxne	lr
    99ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    99b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    99b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    99b8:	4770      	bx	lr
    99ba:	bf00      	nop

000099bc <__errno>:
    99bc:	4b01      	ldr	r3, [pc, #4]	; (99c4 <__errno+0x8>)
    99be:	6818      	ldr	r0, [r3, #0]
    99c0:	4770      	bx	lr
    99c2:	bf00      	nop
    99c4:	200000f0 	.word	0x200000f0

000099c8 <__libc_init_array>:
    99c8:	b570      	push	{r4, r5, r6, lr}
    99ca:	4e0d      	ldr	r6, [pc, #52]	; (9a00 <__libc_init_array+0x38>)
    99cc:	4c0d      	ldr	r4, [pc, #52]	; (9a04 <__libc_init_array+0x3c>)
    99ce:	1ba4      	subs	r4, r4, r6
    99d0:	10a4      	asrs	r4, r4, #2
    99d2:	2500      	movs	r5, #0
    99d4:	42a5      	cmp	r5, r4
    99d6:	d109      	bne.n	99ec <__libc_init_array+0x24>
    99d8:	4e0b      	ldr	r6, [pc, #44]	; (9a08 <__libc_init_array+0x40>)
    99da:	4c0c      	ldr	r4, [pc, #48]	; (9a0c <__libc_init_array+0x44>)
    99dc:	f000 f95c 	bl	9c98 <_init>
    99e0:	1ba4      	subs	r4, r4, r6
    99e2:	10a4      	asrs	r4, r4, #2
    99e4:	2500      	movs	r5, #0
    99e6:	42a5      	cmp	r5, r4
    99e8:	d105      	bne.n	99f6 <__libc_init_array+0x2e>
    99ea:	bd70      	pop	{r4, r5, r6, pc}
    99ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    99f0:	4798      	blx	r3
    99f2:	3501      	adds	r5, #1
    99f4:	e7ee      	b.n	99d4 <__libc_init_array+0xc>
    99f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    99fa:	4798      	blx	r3
    99fc:	3501      	adds	r5, #1
    99fe:	e7f2      	b.n	99e6 <__libc_init_array+0x1e>
    9a00:	00009ca4 	.word	0x00009ca4
    9a04:	00009ca4 	.word	0x00009ca4
    9a08:	00009ca4 	.word	0x00009ca4
    9a0c:	00009ca8 	.word	0x00009ca8

00009a10 <dummy_register>:
    9a10:	20000008                                ... 

00009a14 <abort_fifo_start>:
    9a14:	20000012                                ... 

00009a18 <wr_pdram_start>:
    9a18:	2000004e                                N.. 

00009a1c <cf_pdram_start>:
    9a1c:	20000038                                8.. 

00009a20 <rd_pdram_start>:
    9a20:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    9a30:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    9a40:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    9a50:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    9a60:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

00009a70 <_cfgs>:
    9a70:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    9b70:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    9b80:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00009b90 <_usarts>:
	...

00009ba8 <_i2cms>:
    9ba8:	00000003 70200014 00000100 000000ff     ...... p........
    9bb8:	00d70000 05f5e100 00000007 70200014     .............. p
    9bc8:	00000100 000000ff 00d70000 05f5e100     ................

00009bd8 <_i2css>:
	...

00009be8 <sercomspi_regs>:
    9be8:	0030000c 00020000 00000000 01ff0004     ..0.............
    9bf8:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    9c08:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    9c18:	00776f70 74727173 00000000 00000000     pow.sqrt........

00009c28 <TWO52>:
    9c28:	00000000 43300000 00000000 c3300000     ......0C......0.

00009c38 <__sf_fake_stderr>:
	...

00009c58 <__sf_fake_stdin>:
	...

00009c78 <__sf_fake_stdout>:
	...

00009c98 <_init>:
    9c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c9a:	bf00      	nop
    9c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9c9e:	bc08      	pop	{r3}
    9ca0:	469e      	mov	lr, r3
    9ca2:	4770      	bx	lr

00009ca4 <__init_array_start>:
    9ca4:	00000289 	.word	0x00000289

00009ca8 <_fini>:
    9ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9caa:	bf00      	nop
    9cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9cae:	bc08      	pop	{r3}
    9cb0:	469e      	mov	lr, r3
    9cb2:	4770      	bx	lr

00009cb4 <__fini_array_start>:
    9cb4:	00000265 	.word	0x00000265
