
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f4c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000154  20000000  00004f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020154  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020154  2**0
                  CONTENTS
  4 .bss          00001218  20000160  000050b0  00020160  2**4
                  ALLOC
  5 .stack        00010000  20001378  000062c8  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
  8 .debug_info   00030367  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000037bf  00000000  00000000  00050542  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000101ae  00000000  00000000  00053d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  00063eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e08  00000000  00000000  00064bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034c0f  00000000  00000000  000659d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015597  00000000  00000000  0009a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121c25  00000000  00000000  000afb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000027cc  00000000  00000000  001d17a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 13 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     x.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	b1 0f 00 00 bd 0f 00 00 c9 0f 00 00 d5 0f 00 00     ................
      cc:	e1 0f 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	bd 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 6d 22 00 00 dd 02 00 00 dd 02 00 00     ....m"..........
     204:	dd 02 00 00 41 07 00 00 dd 02 00 00 dd 02 00 00     ....A...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	00004f4c 	.word	0x00004f4c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004f4c 	.word	0x00004f4c
     2c4:	20000164 	.word	0x20000164
     2c8:	00004f4c 	.word	0x00004f4c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000555 	.word	0x00000555

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00004f4c 	.word	0x00004f4c
     340:	20000154 	.word	0x20000154
     344:	20000160 	.word	0x20000160
     348:	20001378 	.word	0x20001378
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00004c8d 	.word	0x00004c8d
     358:	000020e1 	.word	0x000020e1

0000035c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     372:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     382:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
	I2C_0_PORT_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	200003b0 	.word	0x200003b0
     400:	00000a4d 	.word	0x00000a4d
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     46e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     472:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SPI_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
	SPI_0_PORT_init();
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	20000380 	.word	0x20000380
     514:	00000b81 	.word	0x00000b81
     518:	00000409 	.word	0x00000409

0000051c <TIMER_1_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     51c:	4a04      	ldr	r2, [pc, #16]	; (530 <TIMER_1_CLOCK_init+0x14>)
     51e:	6993      	ldr	r3, [r2, #24]
     520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     524:	6193      	str	r3, [r2, #24]
     526:	2240      	movs	r2, #64	; 0x40
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <TIMER_1_CLOCK_init+0x18>)
     52a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     52e:	4770      	bx	lr
     530:	40000800 	.word	0x40000800
     534:	40001c00 	.word	0x40001c00

00000538 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     538:	4a04      	ldr	r2, [pc, #16]	; (54c <TIMER_0_CLOCK_init+0x14>)
     53a:	6a13      	ldr	r3, [r2, #32]
     53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     540:	6213      	str	r3, [r2, #32]
     542:	2240      	movs	r2, #64	; 0x40
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <TIMER_0_CLOCK_init+0x18>)
     546:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800
     550:	40001c00 	.word	0x40001c00

00000554 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     554:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     556:	4b18      	ldr	r3, [pc, #96]	; (5b8 <system_init+0x64>)
     558:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	4b18      	ldr	r3, [pc, #96]	; (5bc <system_init+0x68>)
     55c:	2240      	movs	r2, #64	; 0x40
     55e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     560:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     566:	629a      	str	r2, [r3, #40]	; 0x28
     568:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     56c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     57a:	2201      	movs	r2, #1
     57c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     584:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     58c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     590:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     598:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <system_init+0x6c>)
     59e:	4798      	blx	r3

	SPI_0_init();
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <system_init+0x70>)
     5a2:	4798      	blx	r3

	TIMER_1_CLOCK_init();
     5a4:	4b08      	ldr	r3, [pc, #32]	; (5c8 <system_init+0x74>)
     5a6:	4798      	blx	r3

	TIMER_1_init();
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <system_init+0x78>)
     5aa:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     5ac:	4b08      	ldr	r3, [pc, #32]	; (5d0 <system_init+0x7c>)
     5ae:	4798      	blx	r3

	TIMER_0_init();
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <system_init+0x80>)
     5b2:	4798      	blx	r3
     5b4:	bd08      	pop	{r3, pc}
     5b6:	bf00      	nop
     5b8:	00000c71 	.word	0x00000c71
     5bc:	41008000 	.word	0x41008000
     5c0:	000003e1 	.word	0x000003e1
     5c4:	000004f5 	.word	0x000004f5
     5c8:	0000051d 	.word	0x0000051d
     5cc:	00001ce5 	.word	0x00001ce5
     5d0:	00000539 	.word	0x00000539
     5d4:	00001da9 	.word	0x00001da9

000005d8 <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5d8:	2201      	movs	r2, #1
     5da:	4b11      	ldr	r3, [pc, #68]	; (620 <LAN9252_rx_susp+0x48>)
     5dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     5e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     5e6:	68da      	ldr	r2, [r3, #12]
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <LAN9252_rx_susp+0x4c>)
     5ea:	429a      	cmp	r2, r3
     5ec:	d00d      	beq.n	60a <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <LAN9252_rx_susp+0x50>)
     5f0:	2202      	movs	r2, #2
     5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f6:	2001      	movs	r0, #1
     5f8:	4909      	ldr	r1, [pc, #36]	; (620 <LAN9252_rx_susp+0x48>)
     5fa:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     5fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     602:	2200      	movs	r2, #0
     604:	4b09      	ldr	r3, [pc, #36]	; (62c <LAN9252_rx_susp+0x54>)
     606:	701a      	strb	r2, [r3, #0]
     608:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     60a:	2301      	movs	r3, #1
     60c:	4a07      	ldr	r2, [pc, #28]	; (62c <LAN9252_rx_susp+0x54>)
     60e:	7013      	strb	r3, [r2, #0]
		row_change_possible = true; // for readout of array of wearable tactile sensor
     610:	4a07      	ldr	r2, [pc, #28]	; (630 <LAN9252_rx_susp+0x58>)
     612:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     614:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <LAN9252_rx_susp+0x5c>)
     61a:	60da      	str	r2, [r3, #12]
     61c:	4770      	bx	lr
     61e:	bf00      	nop
     620:	41008000 	.word	0x41008000
     624:	20000558 	.word	0x20000558
     628:	4100a000 	.word	0x4100a000
     62c:	20000568 	.word	0x20000568
     630:	20000520 	.word	0x20000520
     634:	e000e100 	.word	0xe000e100

00000638 <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     638:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     63a:	880c      	ldrh	r4, [r1, #0]
     63c:	b2a4      	uxth	r4, r4
     63e:	f044 0401 	orr.w	r4, r4, #1
     642:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     644:	880c      	ldrh	r4, [r1, #0]
     646:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     648:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     64c:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     64e:	880c      	ldrh	r4, [r1, #0]
     650:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     652:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     656:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     65a:	00ed      	lsls	r5, r5, #3
     65c:	f005 0518 	and.w	r5, r5, #24
     660:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     662:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     664:	880c      	ldrh	r4, [r1, #0]
     666:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     668:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     66c:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     66e:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     670:	2803      	cmp	r0, #3
     672:	d814      	bhi.n	69e <setup_transfer_descriptor+0x66>
     674:	e8df f000 	tbb	[pc, r0]
     678:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     67c:	8808      	ldrh	r0, [r1, #0]
     67e:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     680:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     684:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     686:	8808      	ldrh	r0, [r1, #0]
     688:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     68a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     68e:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     690:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     692:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     694:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     696:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     698:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     69a:	4a26      	ldr	r2, [pc, #152]	; (734 <setup_transfer_descriptor+0xfc>)
     69c:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     69e:	880a      	ldrh	r2, [r1, #0]
     6a0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     6a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     6a6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a8:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6aa:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     6ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6b0:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     6b2:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     6b4:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     6b6:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     6b8:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     6ba:	9b02      	ldr	r3, [sp, #8]
     6bc:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     6be:	bc30      	pop	{r4, r5}
     6c0:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6c2:	880a      	ldrh	r2, [r1, #0]
     6c4:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     6ca:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6cc:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ce:	880a      	ldrh	r2, [r1, #0]
     6d0:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     6d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     6d6:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6d8:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     6da:	4a17      	ldr	r2, [pc, #92]	; (738 <setup_transfer_descriptor+0x100>)
     6dc:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6de:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6e0:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     6e2:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     6e4:	4a13      	ldr	r2, [pc, #76]	; (734 <setup_transfer_descriptor+0xfc>)
     6e6:	608a      	str	r2, [r1, #8]
     6e8:	e7d9      	b.n	69e <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ea:	8808      	ldrh	r0, [r1, #0]
     6ec:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6ee:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     6f2:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6f4:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6f6:	8808      	ldrh	r0, [r1, #0]
     6f8:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     6fa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6fe:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     700:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     702:	480c      	ldr	r0, [pc, #48]	; (734 <setup_transfer_descriptor+0xfc>)
     704:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     706:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     708:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     70a:	608a      	str	r2, [r1, #8]
     70c:	e7c7      	b.n	69e <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     70e:	880a      	ldrh	r2, [r1, #0]
     710:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     716:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     718:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     71a:	880a      	ldrh	r2, [r1, #0]
     71c:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     71e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     722:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     724:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     726:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     728:	4a02      	ldr	r2, [pc, #8]	; (734 <setup_transfer_descriptor+0xfc>)
     72a:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     72c:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     72e:	4a03      	ldr	r2, [pc, #12]	; (73c <setup_transfer_descriptor+0x104>)
     730:	608a      	str	r2, [r1, #8]
     732:	e7b4      	b.n	69e <setup_transfer_descriptor+0x66>
     734:	43000428 	.word	0x43000428
     738:	00004cd4 	.word	0x00004cd4
     73c:	20000420 	.word	0x20000420

00000740 <TC7_Handler>:
void TC7_Handler(void){
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     744:	4a16      	ldr	r2, [pc, #88]	; (7a0 <TC7_Handler+0x60>)
     746:	7a93      	ldrb	r3, [r2, #10]
     748:	f043 0301 	orr.w	r3, r3, #1
     74c:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     74e:	2201      	movs	r2, #1
     750:	4b14      	ldr	r3, [pc, #80]	; (7a4 <TC7_Handler+0x64>)
     752:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     754:	4b14      	ldr	r3, [pc, #80]	; (7a8 <TC7_Handler+0x68>)
     756:	781b      	ldrb	r3, [r3, #0]
     758:	b183      	cbz	r3, 77c <TC7_Handler+0x3c>
		volatile int i=0;
     75a:	2300      	movs	r3, #0
     75c:	9301      	str	r3, [sp, #4]
     75e:	4611      	mov	r1, r2
     760:	4a12      	ldr	r2, [pc, #72]	; (7ac <TC7_Handler+0x6c>)
     762:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     766:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     76a:	2102      	movs	r1, #2
     76c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     770:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     774:	4a0c      	ldr	r2, [pc, #48]	; (7a8 <TC7_Handler+0x68>)
     776:	7013      	strb	r3, [r2, #0]
	};
     778:	b003      	add	sp, #12
     77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     77c:	4b0b      	ldr	r3, [pc, #44]	; (7ac <TC7_Handler+0x6c>)
     77e:	2501      	movs	r5, #1
     780:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     784:	4e08      	ldr	r6, [pc, #32]	; (7a8 <TC7_Handler+0x68>)
     786:	2400      	movs	r4, #0
     788:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     78a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     78e:	4621      	mov	r1, r4
     790:	4620      	mov	r0, r4
     792:	4f07      	ldr	r7, [pc, #28]	; (7b0 <TC7_Handler+0x70>)
     794:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     796:	4621      	mov	r1, r4
     798:	4628      	mov	r0, r5
     79a:	47b8      	blx	r7
		tx_ethercat_done = false;
     79c:	7034      	strb	r4, [r6, #0]
	};
     79e:	e7eb      	b.n	778 <TC7_Handler+0x38>
     7a0:	43001800 	.word	0x43001800
     7a4:	20000521 	.word	0x20000521
     7a8:	20000568 	.word	0x20000568
     7ac:	41008000 	.word	0x41008000
     7b0:	00000f65 	.word	0x00000f65

000007b4 <configure_ethercat_dma_descriptors>:
{
     7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b8:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     7ba:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 974 <configure_ethercat_dma_descriptors+0x1c0>
     7be:	4f61      	ldr	r7, [pc, #388]	; (944 <configure_ethercat_dma_descriptors+0x190>)
     7c0:	2602      	movs	r6, #2
     7c2:	9601      	str	r6, [sp, #4]
     7c4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 978 <configure_ethercat_dma_descriptors+0x1c4>
     7c8:	f8cd 9000 	str.w	r9, [sp]
     7cc:	2313      	movs	r3, #19
     7ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
     7d2:	4639      	mov	r1, r7
     7d4:	2000      	movs	r0, #0
     7d6:	4d5c      	ldr	r5, [pc, #368]	; (948 <configure_ethercat_dma_descriptors+0x194>)
     7d8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     7da:	f8d8 b008 	ldr.w	fp, [r8, #8]
     7de:	9601      	str	r6, [sp, #4]
     7e0:	4c5a      	ldr	r4, [pc, #360]	; (94c <configure_ethercat_dma_descriptors+0x198>)
     7e2:	9400      	str	r4, [sp, #0]
     7e4:	2343      	movs	r3, #67	; 0x43
     7e6:	465a      	mov	r2, fp
     7e8:	4649      	mov	r1, r9
     7ea:	2000      	movs	r0, #0
     7ec:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     7ee:	4b58      	ldr	r3, [pc, #352]	; (950 <configure_ethercat_dma_descriptors+0x19c>)
     7f0:	681a      	ldr	r2, [r3, #0]
     7f2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 97c <configure_ethercat_dma_descriptors+0x1c8>
     7f6:	9601      	str	r6, [sp, #4]
     7f8:	f8cd 9000 	str.w	r9, [sp]
     7fc:	230b      	movs	r3, #11
     7fe:	4621      	mov	r1, r4
     800:	2000      	movs	r0, #0
     802:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     804:	2400      	movs	r4, #0
     806:	9401      	str	r4, [sp, #4]
     808:	f8df a174 	ldr.w	sl, [pc, #372]	; 980 <configure_ethercat_dma_descriptors+0x1cc>
     80c:	f8cd a000 	str.w	sl, [sp]
     810:	2303      	movs	r3, #3
     812:	465a      	mov	r2, fp
     814:	4649      	mov	r1, r9
     816:	4620      	mov	r0, r4
     818:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     81a:	9601      	str	r6, [sp, #4]
     81c:	f8df b164 	ldr.w	fp, [pc, #356]	; 984 <configure_ethercat_dma_descriptors+0x1d0>
     820:	f8cd b000 	str.w	fp, [sp]
     824:	2340      	movs	r3, #64	; 0x40
     826:	4a4b      	ldr	r2, [pc, #300]	; (954 <configure_ethercat_dma_descriptors+0x1a0>)
     828:	4651      	mov	r1, sl
     82a:	4620      	mov	r0, r4
     82c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     82e:	9601      	str	r6, [sp, #4]
     830:	f8df a154 	ldr.w	sl, [pc, #340]	; 988 <configure_ethercat_dma_descriptors+0x1d4>
     834:	f8cd a000 	str.w	sl, [sp]
     838:	2313      	movs	r3, #19
     83a:	f8d8 200c 	ldr.w	r2, [r8, #12]
     83e:	4659      	mov	r1, fp
     840:	4620      	mov	r0, r4
     842:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     844:	f8d8 2010 	ldr.w	r2, [r8, #16]
     848:	9401      	str	r4, [sp, #4]
     84a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 98c <configure_ethercat_dma_descriptors+0x1d8>
     84e:	f8cd 8000 	str.w	r8, [sp]
     852:	2303      	movs	r3, #3
     854:	4651      	mov	r1, sl
     856:	4620      	mov	r0, r4
     858:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     85a:	9601      	str	r6, [sp, #4]
     85c:	f8cd 9000 	str.w	r9, [sp]
     860:	2340      	movs	r3, #64	; 0x40
     862:	4622      	mov	r2, r4
     864:	4641      	mov	r1, r8
     866:	4630      	mov	r0, r6
     868:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     86a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 990 <configure_ethercat_dma_descriptors+0x1dc>
     86e:	9601      	str	r6, [sp, #4]
     870:	f8df 9120 	ldr.w	r9, [pc, #288]	; 994 <configure_ethercat_dma_descriptors+0x1e0>
     874:	f8cd 9000 	str.w	r9, [sp]
     878:	2313      	movs	r3, #19
     87a:	4622      	mov	r2, r4
     87c:	4641      	mov	r1, r8
     87e:	2003      	movs	r0, #3
     880:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     882:	9601      	str	r6, [sp, #4]
     884:	f8df a110 	ldr.w	sl, [pc, #272]	; 998 <configure_ethercat_dma_descriptors+0x1e4>
     888:	f8cd a000 	str.w	sl, [sp]
     88c:	2343      	movs	r3, #67	; 0x43
     88e:	4622      	mov	r2, r4
     890:	4649      	mov	r1, r9
     892:	2003      	movs	r0, #3
     894:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     896:	f8df 9104 	ldr.w	r9, [pc, #260]	; 99c <configure_ethercat_dma_descriptors+0x1e8>
     89a:	9601      	str	r6, [sp, #4]
     89c:	f8cd 9000 	str.w	r9, [sp]
     8a0:	230b      	movs	r3, #11
     8a2:	4622      	mov	r2, r4
     8a4:	4651      	mov	r1, sl
     8a6:	2003      	movs	r0, #3
     8a8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     8aa:	9601      	str	r6, [sp, #4]
     8ac:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 9a0 <configure_ethercat_dma_descriptors+0x1ec>
     8b0:	f8cd a000 	str.w	sl, [sp]
     8b4:	2343      	movs	r3, #67	; 0x43
     8b6:	4622      	mov	r2, r4
     8b8:	4649      	mov	r1, r9
     8ba:	2003      	movs	r0, #3
     8bc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     8be:	9601      	str	r6, [sp, #4]
     8c0:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 9a4 <configure_ethercat_dma_descriptors+0x1f0>
     8c4:	f8cd b000 	str.w	fp, [sp]
     8c8:	2313      	movs	r3, #19
     8ca:	4622      	mov	r2, r4
     8cc:	4651      	mov	r1, sl
     8ce:	2003      	movs	r0, #3
     8d0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     8d2:	9401      	str	r4, [sp, #4]
     8d4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 9a8 <configure_ethercat_dma_descriptors+0x1f4>
     8d8:	f8cd a000 	str.w	sl, [sp]
     8dc:	2303      	movs	r3, #3
     8de:	4622      	mov	r2, r4
     8e0:	4659      	mov	r1, fp
     8e2:	4618      	mov	r0, r3
     8e4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     8e6:	9601      	str	r6, [sp, #4]
     8e8:	f8cd 9000 	str.w	r9, [sp]
     8ec:	2340      	movs	r3, #64	; 0x40
     8ee:	4a19      	ldr	r2, [pc, #100]	; (954 <configure_ethercat_dma_descriptors+0x1a0>)
     8f0:	441a      	add	r2, r3
     8f2:	4651      	mov	r1, sl
     8f4:	2001      	movs	r0, #1
     8f6:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     8f8:	4d17      	ldr	r5, [pc, #92]	; (958 <configure_ethercat_dma_descriptors+0x1a4>)
     8fa:	4a18      	ldr	r2, [pc, #96]	; (95c <configure_ethercat_dma_descriptors+0x1a8>)
     8fc:	4631      	mov	r1, r6
     8fe:	4628      	mov	r0, r5
     900:	4b17      	ldr	r3, [pc, #92]	; (960 <configure_ethercat_dma_descriptors+0x1ac>)
     902:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     904:	f8d8 300c 	ldr.w	r3, [r8, #12]
     908:	9300      	str	r3, [sp, #0]
     90a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     90e:	4620      	mov	r0, r4
     910:	4e14      	ldr	r6, [pc, #80]	; (964 <configure_ethercat_dma_descriptors+0x1b0>)
     912:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     914:	68fb      	ldr	r3, [r7, #12]
     916:	9300      	str	r3, [sp, #0]
     918:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     91c:	2001      	movs	r0, #1
     91e:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     920:	4628      	mov	r0, r5
     922:	4b11      	ldr	r3, [pc, #68]	; (968 <configure_ethercat_dma_descriptors+0x1b4>)
     924:	4798      	blx	r3
     926:	2601      	movs	r6, #1
     928:	4b10      	ldr	r3, [pc, #64]	; (96c <configure_ethercat_dma_descriptors+0x1b8>)
     92a:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     92e:	4621      	mov	r1, r4
     930:	4620      	mov	r0, r4
     932:	4d0f      	ldr	r5, [pc, #60]	; (970 <configure_ethercat_dma_descriptors+0x1bc>)
     934:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     936:	4621      	mov	r1, r4
     938:	4630      	mov	r0, r6
     93a:	47a8      	blx	r5
}
     93c:	b003      	add	sp, #12
     93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     942:	bf00      	nop
     944:	20000510 	.word	0x20000510
     948:	00000639 	.word	0x00000639
     94c:	20000538 	.word	0x20000538
     950:	20000000 	.word	0x20000000
     954:	20000460 	.word	0x20000460
     958:	20000380 	.word	0x20000380
     95c:	000005d9 	.word	0x000005d9
     960:	00000bf5 	.word	0x00000bf5
     964:	00000fed 	.word	0x00000fed
     968:	00000bcd 	.word	0x00000bcd
     96c:	41008000 	.word	0x41008000
     970:	00000f65 	.word	0x00000f65
     974:	00004cd4 	.word	0x00004cd4
     978:	20000440 	.word	0x20000440
     97c:	200003f0 	.word	0x200003f0
     980:	20000410 	.word	0x20000410
     984:	20000500 	.word	0x20000500
     988:	20000548 	.word	0x20000548
     98c:	20000400 	.word	0x20000400
     990:	20000450 	.word	0x20000450
     994:	200004e0 	.word	0x200004e0
     998:	200004f0 	.word	0x200004f0
     99c:	20000558 	.word	0x20000558
     9a0:	200003d0 	.word	0x200003d0
     9a4:	200003e0 	.word	0x200003e0
     9a8:	20000528 	.word	0x20000528

000009ac <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     9ac:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <delay_us+0x14>)
     9b0:	681c      	ldr	r4, [r3, #0]
     9b2:	4b04      	ldr	r3, [pc, #16]	; (9c4 <delay_us+0x18>)
     9b4:	4798      	blx	r3
     9b6:	4601      	mov	r1, r0
     9b8:	4620      	mov	r0, r4
     9ba:	4b03      	ldr	r3, [pc, #12]	; (9c8 <delay_us+0x1c>)
     9bc:	4798      	blx	r3
     9be:	bd10      	pop	{r4, pc}
     9c0:	2000017c 	.word	0x2000017c
     9c4:	00000c2d 	.word	0x00000c2d
     9c8:	00000c69 	.word	0x00000c69

000009cc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     9cc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <delay_ms+0x14>)
     9d0:	681c      	ldr	r4, [r3, #0]
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <delay_ms+0x18>)
     9d4:	4798      	blx	r3
     9d6:	4601      	mov	r1, r0
     9d8:	4620      	mov	r0, r4
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <delay_ms+0x1c>)
     9dc:	4798      	blx	r3
     9de:	bd10      	pop	{r4, pc}
     9e0:	2000017c 	.word	0x2000017c
     9e4:	00000c45 	.word	0x00000c45
     9e8:	00000c69 	.word	0x00000c69

000009ec <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     9ec:	b510      	push	{r4, lr}
     9ee:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     9f0:	8903      	ldrh	r3, [r0, #8]
     9f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     9f6:	4614      	mov	r4, r2
     9f8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     9fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     a02:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a04:	a901      	add	r1, sp, #4
     a06:	3814      	subs	r0, #20
     a08:	4b03      	ldr	r3, [pc, #12]	; (a18 <i2c_m_sync_write+0x2c>)
     a0a:	4798      	blx	r3

	if (ret) {
     a0c:	b910      	cbnz	r0, a14 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     a0e:	4620      	mov	r0, r4
     a10:	b004      	add	sp, #16
     a12:	bd10      	pop	{r4, pc}
		return ret;
     a14:	4604      	mov	r4, r0
     a16:	e7fa      	b.n	a0e <i2c_m_sync_write+0x22>
     a18:	000016ed 	.word	0x000016ed

00000a1c <i2c_m_sync_read>:
{
     a1c:	b510      	push	{r4, lr}
     a1e:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a20:	8903      	ldrh	r3, [r0, #8]
     a22:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a26:	4614      	mov	r4, r2
     a28:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a2a:	f248 0301 	movw	r3, #32769	; 0x8001
     a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a32:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a34:	a901      	add	r1, sp, #4
     a36:	3814      	subs	r0, #20
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <i2c_m_sync_read+0x2c>)
     a3a:	4798      	blx	r3
	if (ret) {
     a3c:	b910      	cbnz	r0, a44 <i2c_m_sync_read+0x28>
}
     a3e:	4620      	mov	r0, r4
     a40:	b004      	add	sp, #16
     a42:	bd10      	pop	{r4, pc}
		return ret;
     a44:	4604      	mov	r4, r0
     a46:	e7fa      	b.n	a3e <i2c_m_sync_read+0x22>
     a48:	000016ed 	.word	0x000016ed

00000a4c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a4c:	b538      	push	{r3, r4, r5, lr}
     a4e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a50:	4604      	mov	r4, r0
     a52:	225e      	movs	r2, #94	; 0x5e
     a54:	4908      	ldr	r1, [pc, #32]	; (a78 <i2c_m_sync_init+0x2c>)
     a56:	3000      	adds	r0, #0
     a58:	bf18      	it	ne
     a5a:	2001      	movne	r0, #1
     a5c:	4b07      	ldr	r3, [pc, #28]	; (a7c <i2c_m_sync_init+0x30>)
     a5e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     a60:	4629      	mov	r1, r5
     a62:	4620      	mov	r0, r4
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <i2c_m_sync_init+0x34>)
     a66:	4798      	blx	r3
	if (init_status) {
     a68:	4603      	mov	r3, r0
     a6a:	b918      	cbnz	r0, a74 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     a6c:	4a05      	ldr	r2, [pc, #20]	; (a84 <i2c_m_sync_init+0x38>)
     a6e:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     a70:	4a05      	ldr	r2, [pc, #20]	; (a88 <i2c_m_sync_init+0x3c>)
     a72:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     a74:	4618      	mov	r0, r3
     a76:	bd38      	pop	{r3, r4, r5, pc}
     a78:	00004ce8 	.word	0x00004ce8
     a7c:	00000c25 	.word	0x00000c25
     a80:	00001645 	.word	0x00001645
     a84:	00000a1d 	.word	0x00000a1d
     a88:	000009ed 	.word	0x000009ed

00000a8c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     a8c:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     a8e:	4b01      	ldr	r3, [pc, #4]	; (a94 <i2c_m_sync_enable+0x8>)
     a90:	4798      	blx	r3
}
     a92:	bd08      	pop	{r3, pc}
     a94:	00001675 	.word	0x00001675

00000a98 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     a98:	f3c1 0109 	ubfx	r1, r1, #0, #10
     a9c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     aa0:	430a      	orrs	r2, r1
     aa2:	8382      	strh	r2, [r0, #28]
}
     aa4:	4610      	mov	r0, r2
     aa6:	4770      	bx	lr

00000aa8 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     aa8:	3014      	adds	r0, #20
     aaa:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     aac:	2000      	movs	r0, #0
     aae:	4770      	bx	lr

00000ab0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	460d      	mov	r5, r1
     ab4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     ab6:	4604      	mov	r4, r0
     ab8:	b168      	cbz	r0, ad6 <io_write+0x26>
     aba:	b151      	cbz	r1, ad2 <io_write+0x22>
     abc:	2001      	movs	r0, #1
     abe:	2234      	movs	r2, #52	; 0x34
     ac0:	4906      	ldr	r1, [pc, #24]	; (adc <io_write+0x2c>)
     ac2:	4b07      	ldr	r3, [pc, #28]	; (ae0 <io_write+0x30>)
     ac4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     ac6:	6823      	ldr	r3, [r4, #0]
     ac8:	4632      	mov	r2, r6
     aca:	4629      	mov	r1, r5
     acc:	4620      	mov	r0, r4
     ace:	4798      	blx	r3
}
     ad0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     ad2:	2000      	movs	r0, #0
     ad4:	e7f3      	b.n	abe <io_write+0xe>
     ad6:	2000      	movs	r0, #0
     ad8:	e7f1      	b.n	abe <io_write+0xe>
     ada:	bf00      	nop
     adc:	00004d04 	.word	0x00004d04
     ae0:	00000c25 	.word	0x00000c25

00000ae4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ae4:	b570      	push	{r4, r5, r6, lr}
     ae6:	460d      	mov	r5, r1
     ae8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     aea:	4604      	mov	r4, r0
     aec:	b168      	cbz	r0, b0a <io_read+0x26>
     aee:	b151      	cbz	r1, b06 <io_read+0x22>
     af0:	2001      	movs	r0, #1
     af2:	223d      	movs	r2, #61	; 0x3d
     af4:	4906      	ldr	r1, [pc, #24]	; (b10 <io_read+0x2c>)
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <io_read+0x30>)
     af8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     afa:	6863      	ldr	r3, [r4, #4]
     afc:	4632      	mov	r2, r6
     afe:	4629      	mov	r1, r5
     b00:	4620      	mov	r0, r4
     b02:	4798      	blx	r3
}
     b04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b06:	2000      	movs	r0, #0
     b08:	e7f3      	b.n	af2 <io_read+0xe>
     b0a:	2000      	movs	r0, #0
     b0c:	e7f1      	b.n	af2 <io_read+0xe>
     b0e:	bf00      	nop
     b10:	00004d04 	.word	0x00004d04
     b14:	00000c25 	.word	0x00000c25

00000b18 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	460d      	mov	r5, r1
     b1c:	4616      	mov	r6, r2
	ASSERT(io);
     b1e:	4604      	mov	r4, r0
     b20:	2298      	movs	r2, #152	; 0x98
     b22:	4907      	ldr	r1, [pc, #28]	; (b40 <_spi_m_dma_io_write+0x28>)
     b24:	3000      	adds	r0, #0
     b26:	bf18      	it	ne
     b28:	2001      	movne	r0, #1
     b2a:	4b06      	ldr	r3, [pc, #24]	; (b44 <_spi_m_dma_io_write+0x2c>)
     b2c:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     b2e:	4633      	mov	r3, r6
     b30:	2200      	movs	r2, #0
     b32:	4629      	mov	r1, r5
     b34:	f1a4 0020 	sub.w	r0, r4, #32
     b38:	4c03      	ldr	r4, [pc, #12]	; (b48 <_spi_m_dma_io_write+0x30>)
     b3a:	47a0      	blx	r4
}
     b3c:	bd70      	pop	{r4, r5, r6, pc}
     b3e:	bf00      	nop
     b40:	00004d18 	.word	0x00004d18
     b44:	00000c25 	.word	0x00000c25
     b48:	00001bd1 	.word	0x00001bd1

00000b4c <_spi_m_dma_io_read>:
{
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	460d      	mov	r5, r1
     b50:	4616      	mov	r6, r2
	ASSERT(io);
     b52:	4604      	mov	r4, r0
     b54:	2281      	movs	r2, #129	; 0x81
     b56:	4907      	ldr	r1, [pc, #28]	; (b74 <_spi_m_dma_io_read+0x28>)
     b58:	3000      	adds	r0, #0
     b5a:	bf18      	it	ne
     b5c:	2001      	movne	r0, #1
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <_spi_m_dma_io_read+0x2c>)
     b60:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     b62:	4633      	mov	r3, r6
     b64:	462a      	mov	r2, r5
     b66:	2100      	movs	r1, #0
     b68:	f1a4 0020 	sub.w	r0, r4, #32
     b6c:	4c03      	ldr	r4, [pc, #12]	; (b7c <_spi_m_dma_io_read+0x30>)
     b6e:	47a0      	blx	r4
}
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	bf00      	nop
     b74:	00004d18 	.word	0x00004d18
     b78:	00000c25 	.word	0x00000c25
     b7c:	00001bd1 	.word	0x00001bd1

00000b80 <spi_m_dma_init>:
{
     b80:	b538      	push	{r3, r4, r5, lr}
     b82:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     b84:	4605      	mov	r5, r0
     b86:	b1a8      	cbz	r0, bb4 <spi_m_dma_init+0x34>
     b88:	b191      	cbz	r1, bb0 <spi_m_dma_init+0x30>
     b8a:	2001      	movs	r0, #1
     b8c:	223b      	movs	r2, #59	; 0x3b
     b8e:	490a      	ldr	r1, [pc, #40]	; (bb8 <spi_m_dma_init+0x38>)
     b90:	4b0a      	ldr	r3, [pc, #40]	; (bbc <spi_m_dma_init+0x3c>)
     b92:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b94:	4628      	mov	r0, r5
     b96:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     b9a:	4621      	mov	r1, r4
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <spi_m_dma_init+0x40>)
     b9e:	4798      	blx	r3
	if (rc) {
     ba0:	4603      	mov	r3, r0
     ba2:	b918      	cbnz	r0, bac <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     ba4:	4a07      	ldr	r2, [pc, #28]	; (bc4 <spi_m_dma_init+0x44>)
     ba6:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     ba8:	4a07      	ldr	r2, [pc, #28]	; (bc8 <spi_m_dma_init+0x48>)
     baa:	626a      	str	r2, [r5, #36]	; 0x24
}
     bac:	4618      	mov	r0, r3
     bae:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     bb0:	2000      	movs	r0, #0
     bb2:	e7eb      	b.n	b8c <spi_m_dma_init+0xc>
     bb4:	2000      	movs	r0, #0
     bb6:	e7e9      	b.n	b8c <spi_m_dma_init+0xc>
     bb8:	00004d18 	.word	0x00004d18
     bbc:	00000c25 	.word	0x00000c25
     bc0:	0000199d 	.word	0x0000199d
     bc4:	00000b4d 	.word	0x00000b4d
     bc8:	00000b19 	.word	0x00000b19

00000bcc <spi_m_dma_enable>:
{
     bcc:	b510      	push	{r4, lr}
	ASSERT(spi);
     bce:	4604      	mov	r4, r0
     bd0:	2251      	movs	r2, #81	; 0x51
     bd2:	4905      	ldr	r1, [pc, #20]	; (be8 <spi_m_dma_enable+0x1c>)
     bd4:	3000      	adds	r0, #0
     bd6:	bf18      	it	ne
     bd8:	2001      	movne	r0, #1
     bda:	4b04      	ldr	r3, [pc, #16]	; (bec <spi_m_dma_enable+0x20>)
     bdc:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     bde:	1d20      	adds	r0, r4, #4
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <spi_m_dma_enable+0x24>)
     be2:	4798      	blx	r3
     be4:	bd10      	pop	{r4, pc}
     be6:	bf00      	nop
     be8:	00004d18 	.word	0x00004d18
     bec:	00000c25 	.word	0x00000c25
     bf0:	00001b19 	.word	0x00001b19

00000bf4 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	460d      	mov	r5, r1
     bf8:	4616      	mov	r6, r2
	ASSERT(spi);
     bfa:	4604      	mov	r4, r0
     bfc:	22a8      	movs	r2, #168	; 0xa8
     bfe:	4906      	ldr	r1, [pc, #24]	; (c18 <spi_m_dma_register_callback+0x24>)
     c00:	3000      	adds	r0, #0
     c02:	bf18      	it	ne
     c04:	2001      	movne	r0, #1
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <spi_m_dma_register_callback+0x28>)
     c08:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     c0a:	4632      	mov	r2, r6
     c0c:	4629      	mov	r1, r5
     c0e:	1d20      	adds	r0, r4, #4
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <spi_m_dma_register_callback+0x2c>)
     c12:	4798      	blx	r3
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	bf00      	nop
     c18:	00004d18 	.word	0x00004d18
     c1c:	00000c25 	.word	0x00000c25
     c20:	00001b4d 	.word	0x00001b4d

00000c24 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c24:	b900      	cbnz	r0, c28 <assert+0x4>
		__asm("BKPT #0");
     c26:	be00      	bkpt	0x0000
     c28:	4770      	bx	lr
	...

00000c2c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     c2c:	2364      	movs	r3, #100	; 0x64
     c2e:	fb03 f000 	mul.w	r0, r3, r0
     c32:	3002      	adds	r0, #2
     c34:	4b02      	ldr	r3, [pc, #8]	; (c40 <_get_cycles_for_us+0x14>)
     c36:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c3a:	0840      	lsrs	r0, r0, #1
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop
     c40:	aaaaaaab 	.word	0xaaaaaaab

00000c44 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     c44:	2364      	movs	r3, #100	; 0x64
     c46:	fb03 f300 	mul.w	r3, r3, r0
     c4a:	3302      	adds	r3, #2
     c4c:	4804      	ldr	r0, [pc, #16]	; (c60 <_get_cycles_for_ms+0x1c>)
     c4e:	fba0 2303 	umull	r2, r3, r0, r3
     c52:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c58:	fb00 f003 	mul.w	r0, r0, r3
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop
     c60:	aaaaaaab 	.word	0xaaaaaaab
     c64:	00000000 	.word	0x00000000

00000c68 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     c68:	3901      	subs	r1, #1
     c6a:	d8fd      	bhi.n	c68 <_delay_cycles>
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop

00000c70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c70:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     c72:	4a0d      	ldr	r2, [pc, #52]	; (ca8 <_init_chip+0x38>)
     c74:	8813      	ldrh	r3, [r2, #0]
     c76:	b29b      	uxth	r3, r3
     c78:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     c7c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     c7e:	4b0b      	ldr	r3, [pc, #44]	; (cac <_init_chip+0x3c>)
     c80:	4798      	blx	r3
	_oscctrl_init_sources();
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_init_chip+0x40>)
     c84:	4798      	blx	r3
	_mclk_init();
     c86:	4b0b      	ldr	r3, [pc, #44]	; (cb4 <_init_chip+0x44>)
     c88:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     c8a:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <_init_chip+0x48>)
     c8c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c8e:	f640 70ff 	movw	r0, #4095	; 0xfff
     c92:	4b0a      	ldr	r3, [pc, #40]	; (cbc <_init_chip+0x4c>)
     c94:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     c96:	4a0a      	ldr	r2, [pc, #40]	; (cc0 <_init_chip+0x50>)
     c98:	6913      	ldr	r3, [r2, #16]
     c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c9e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     ca0:	4b08      	ldr	r3, [pc, #32]	; (cc4 <_init_chip+0x54>)
     ca2:	4798      	blx	r3
     ca4:	bd08      	pop	{r3, pc}
     ca6:	bf00      	nop
     ca8:	41004000 	.word	0x41004000
     cac:	00001049 	.word	0x00001049
     cb0:	0000105d 	.word	0x0000105d
     cb4:	0000103d 	.word	0x0000103d
     cb8:	00001079 	.word	0x00001079
     cbc:	00001019 	.word	0x00001019
     cc0:	40000800 	.word	0x40000800
     cc4:	00000d49 	.word	0x00000d49

00000cc8 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     cc8:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cca:	4a1d      	ldr	r2, [pc, #116]	; (d40 <_dmac_handler+0x78>)
     ccc:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     cce:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     cd2:	481c      	ldr	r0, [pc, #112]	; (d44 <_dmac_handler+0x7c>)
     cd4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cd8:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     cda:	f412 7f80 	tst.w	r2, #256	; 0x100
     cde:	d10a      	bne.n	cf6 <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     ce0:	4a17      	ldr	r2, [pc, #92]	; (d40 <_dmac_handler+0x78>)
     ce2:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     ce4:	f412 7f00 	tst.w	r2, #512	; 0x200
     ce8:	d110      	bne.n	d0c <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cea:	4a15      	ldr	r2, [pc, #84]	; (d40 <_dmac_handler+0x78>)
     cec:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     cee:	f412 6f80 	tst.w	r2, #1024	; 0x400
     cf2:	d117      	bne.n	d24 <_dmac_handler+0x5c>
     cf4:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     cf6:	011b      	lsls	r3, r3, #4
     cf8:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     cfc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d00:	2101      	movs	r1, #1
     d02:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     d06:	6843      	ldr	r3, [r0, #4]
     d08:	4798      	blx	r3
     d0a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     d0c:	011b      	lsls	r3, r3, #4
     d0e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d12:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d16:	2102      	movs	r1, #2
     d18:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     d1c:	4a09      	ldr	r2, [pc, #36]	; (d44 <_dmac_handler+0x7c>)
     d1e:	58d3      	ldr	r3, [r2, r3]
     d20:	4798      	blx	r3
     d22:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     d24:	011b      	lsls	r3, r3, #4
     d26:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d2a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d2e:	2104      	movs	r1, #4
     d30:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     d34:	4a03      	ldr	r2, [pc, #12]	; (d44 <_dmac_handler+0x7c>)
     d36:	4413      	add	r3, r2
     d38:	689b      	ldr	r3, [r3, #8]
     d3a:	4798      	blx	r3
	}
}
     d3c:	e7da      	b.n	cf4 <_dmac_handler+0x2c>
     d3e:	bf00      	nop
     d40:	4100a000 	.word	0x4100a000
     d44:	20000180 	.word	0x20000180

00000d48 <_dma_init>:
{
     d48:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     d4a:	4a3d      	ldr	r2, [pc, #244]	; (e40 <_dma_init+0xf8>)
     d4c:	8813      	ldrh	r3, [r2, #0]
     d4e:	b29b      	uxth	r3, r3
     d50:	f023 0302 	bic.w	r3, r3, #2
     d54:	b29b      	uxth	r3, r3
     d56:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     d58:	8853      	ldrh	r3, [r2, #2]
     d5a:	b29b      	uxth	r3, r3
     d5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     d60:	b29b      	uxth	r3, r3
     d62:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     d64:	8813      	ldrh	r3, [r2, #0]
     d66:	b29b      	uxth	r3, r3
     d68:	f043 0301 	orr.w	r3, r3, #1
     d6c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     d6e:	4b34      	ldr	r3, [pc, #208]	; (e40 <_dma_init+0xf8>)
     d70:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     d72:	f013 0f01 	tst.w	r3, #1
     d76:	d1fa      	bne.n	d6e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     d78:	4a31      	ldr	r2, [pc, #196]	; (e40 <_dma_init+0xf8>)
     d7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     d7e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     d80:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     d82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
     d86:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     d8a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     d8c:	2300      	movs	r3, #0
     d8e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     d90:	492c      	ldr	r1, [pc, #176]	; (e44 <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     d92:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     d94:	492c      	ldr	r1, [pc, #176]	; (e48 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
     d96:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
     d98:	e016      	b.n	dc8 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     d9a:	4a2c      	ldr	r2, [pc, #176]	; (e4c <_dma_init+0x104>)
     d9c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     da0:	4c27      	ldr	r4, [pc, #156]	; (e40 <_dma_init+0xf8>)
     da2:	1d19      	adds	r1, r3, #4
     da4:	0109      	lsls	r1, r1, #4
     da6:	1860      	adds	r0, r4, r1
     da8:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     daa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     dae:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     db0:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     db2:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     db4:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     db6:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     db8:	4922      	ldr	r1, [pc, #136]	; (e44 <_dma_init+0xfc>)
     dba:	011a      	lsls	r2, r3, #4
     dbc:	1888      	adds	r0, r1, r2
     dbe:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     dc0:	2200      	movs	r2, #0
     dc2:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
     dc4:	3301      	adds	r3, #1
     dc6:	b2db      	uxtb	r3, r3
     dc8:	2b1f      	cmp	r3, #31
     dca:	d9e6      	bls.n	d9a <_dma_init+0x52>
     dcc:	2300      	movs	r3, #0
     dce:	e00a      	b.n	de6 <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     dd0:	f103 011f 	add.w	r1, r3, #31
     dd4:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dd6:	2a00      	cmp	r2, #0
     dd8:	da10      	bge.n	dfc <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dda:	2a00      	cmp	r2, #0
     ddc:	da1c      	bge.n	e18 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     dde:	2a00      	cmp	r2, #0
     de0:	da24      	bge.n	e2c <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
     de2:	3301      	adds	r3, #1
     de4:	b2db      	uxtb	r3, r3
     de6:	2b04      	cmp	r3, #4
     de8:	d9f2      	bls.n	dd0 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     dea:	4a15      	ldr	r2, [pc, #84]	; (e40 <_dma_init+0xf8>)
     dec:	8813      	ldrh	r3, [r2, #0]
     dee:	b29b      	uxth	r3, r3
     df0:	f043 0302 	orr.w	r3, r3, #2
     df4:	8013      	strh	r3, [r2, #0]
}
     df6:	2000      	movs	r0, #0
     df8:	bc30      	pop	{r4, r5}
     dfa:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dfc:	0950      	lsrs	r0, r2, #5
     dfe:	f001 051f 	and.w	r5, r1, #31
     e02:	2401      	movs	r4, #1
     e04:	40ac      	lsls	r4, r5
     e06:	3020      	adds	r0, #32
     e08:	4d11      	ldr	r5, [pc, #68]	; (e50 <_dma_init+0x108>)
     e0a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     e0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e12:	f3bf 8f6f 	isb	sy
     e16:	e7e0      	b.n	dda <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e18:	0950      	lsrs	r0, r2, #5
     e1a:	f001 051f 	and.w	r5, r1, #31
     e1e:	2401      	movs	r4, #1
     e20:	40ac      	lsls	r4, r5
     e22:	3060      	adds	r0, #96	; 0x60
     e24:	4d0a      	ldr	r5, [pc, #40]	; (e50 <_dma_init+0x108>)
     e26:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     e2a:	e7d8      	b.n	dde <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e2c:	0952      	lsrs	r2, r2, #5
     e2e:	f001 011f 	and.w	r1, r1, #31
     e32:	2001      	movs	r0, #1
     e34:	fa00 f101 	lsl.w	r1, r0, r1
     e38:	4805      	ldr	r0, [pc, #20]	; (e50 <_dma_init+0x108>)
     e3a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     e3e:	e7d0      	b.n	de2 <_dma_init+0x9a>
     e40:	4100a000 	.word	0x4100a000
     e44:	20000570 	.word	0x20000570
     e48:	20000770 	.word	0x20000770
     e4c:	00004d34 	.word	0x00004d34
     e50:	e000e100 	.word	0xe000e100

00000e54 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     e54:	b991      	cbnz	r1, e7c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     e56:	b942      	cbnz	r2, e6a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     e58:	0100      	lsls	r0, r0, #4
     e5a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e5e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e62:	2302      	movs	r3, #2
     e64:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     e68:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     e6a:	0100      	lsls	r0, r0, #4
     e6c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e70:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e74:	2302      	movs	r3, #2
     e76:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     e7a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     e7c:	2901      	cmp	r1, #1
     e7e:	d002      	beq.n	e86 <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
     e80:	2902      	cmp	r1, #2
     e82:	d012      	beq.n	eaa <_dma_set_irq_state+0x56>
     e84:	4770      	bx	lr
	if (value == 0x0) {
     e86:	b93a      	cbnz	r2, e98 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     e88:	0100      	lsls	r0, r0, #4
     e8a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e8e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e92:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     e96:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     e98:	0100      	lsls	r0, r0, #4
     e9a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e9e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ea2:	2301      	movs	r3, #1
     ea4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     ea8:	4770      	bx	lr
	if (value == 0x0) {
     eaa:	b142      	cbz	r2, ebe <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
     eac:	0100      	lsls	r0, r0, #4
     eae:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     eb2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     eb6:	2304      	movs	r3, #4
     eb8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     ebc:	e7e2      	b.n	e84 <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
     ebe:	0100      	lsls	r0, r0, #4
     ec0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     ec4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ec8:	2304      	movs	r3, #4
     eca:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     ece:	4770      	bx	lr

00000ed0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     ed0:	4b02      	ldr	r3, [pc, #8]	; (edc <_dma_set_destination_address+0xc>)
     ed2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ed6:	6081      	str	r1, [r0, #8]
}
     ed8:	2000      	movs	r0, #0
     eda:	4770      	bx	lr
     edc:	20000570 	.word	0x20000570

00000ee0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     ee0:	4b02      	ldr	r3, [pc, #8]	; (eec <_dma_set_source_address+0xc>)
     ee2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ee6:	6041      	str	r1, [r0, #4]
}
     ee8:	2000      	movs	r0, #0
     eea:	4770      	bx	lr
     eec:	20000570 	.word	0x20000570

00000ef0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     ef0:	4a05      	ldr	r2, [pc, #20]	; (f08 <_dma_srcinc_enable+0x18>)
     ef2:	0100      	lsls	r0, r0, #4
     ef4:	5a13      	ldrh	r3, [r2, r0]
     ef6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     efc:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     f00:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     f02:	5211      	strh	r1, [r2, r0]
}
     f04:	2000      	movs	r0, #0
     f06:	4770      	bx	lr
     f08:	20000570 	.word	0x20000570

00000f0c <_dma_set_data_amount>:
{
     f0c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     f0e:	4c14      	ldr	r4, [pc, #80]	; (f60 <_dma_set_data_amount+0x54>)
     f10:	0102      	lsls	r2, r0, #4
     f12:	18a3      	adds	r3, r4, r2
     f14:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f16:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     f18:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f1c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     f1e:	f412 6f00 	tst.w	r2, #2048	; 0x800
     f22:	d006      	beq.n	f32 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f24:	fa01 f403 	lsl.w	r4, r1, r3
     f28:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     f2a:	4a0d      	ldr	r2, [pc, #52]	; (f60 <_dma_set_data_amount+0x54>)
     f2c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     f30:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     f32:	4c0b      	ldr	r4, [pc, #44]	; (f60 <_dma_set_data_amount+0x54>)
     f34:	0102      	lsls	r2, r0, #4
     f36:	18a5      	adds	r5, r4, r2
     f38:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f3a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     f3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
     f40:	d005      	beq.n	f4e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f42:	fa01 f303 	lsl.w	r3, r1, r3
     f46:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     f48:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     f4c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     f4e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
     f50:	4b03      	ldr	r3, [pc, #12]	; (f60 <_dma_set_data_amount+0x54>)
     f52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f56:	8041      	strh	r1, [r0, #2]
}
     f58:	2000      	movs	r0, #0
     f5a:	bc30      	pop	{r4, r5}
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	20000570 	.word	0x20000570

00000f64 <_dma_enable_transaction>:
{
     f64:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     f66:	4c0c      	ldr	r4, [pc, #48]	; (f98 <_dma_enable_transaction+0x34>)
     f68:	0102      	lsls	r2, r0, #4
     f6a:	5aa3      	ldrh	r3, [r4, r2]
     f6c:	b29b      	uxth	r3, r3
     f6e:	f043 0301 	orr.w	r3, r3, #1
     f72:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     f74:	4c09      	ldr	r4, [pc, #36]	; (f9c <_dma_enable_transaction+0x38>)
     f76:	1d03      	adds	r3, r0, #4
     f78:	011b      	lsls	r3, r3, #4
     f7a:	58e2      	ldr	r2, [r4, r3]
     f7c:	f042 0202 	orr.w	r2, r2, #2
     f80:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
     f82:	b129      	cbz	r1, f90 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
     f84:	2301      	movs	r3, #1
     f86:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
     f8a:	6922      	ldr	r2, [r4, #16]
     f8c:	4310      	orrs	r0, r2
     f8e:	6120      	str	r0, [r4, #16]
}
     f90:	2000      	movs	r0, #0
     f92:	f85d 4b04 	ldr.w	r4, [sp], #4
     f96:	4770      	bx	lr
     f98:	20000570 	.word	0x20000570
     f9c:	4100a000 	.word	0x4100a000

00000fa0 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
     fa0:	4b02      	ldr	r3, [pc, #8]	; (fac <_dma_get_channel_resource+0xc>)
     fa2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     fa6:	6001      	str	r1, [r0, #0]
}
     fa8:	2000      	movs	r0, #0
     faa:	4770      	bx	lr
     fac:	20000180 	.word	0x20000180

00000fb0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
     fb0:	b508      	push	{r3, lr}
	_dmac_handler();
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <DMAC_0_Handler+0x8>)
     fb4:	4798      	blx	r3
     fb6:	bd08      	pop	{r3, pc}
     fb8:	00000cc9 	.word	0x00000cc9

00000fbc <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
     fbc:	b508      	push	{r3, lr}
	_dmac_handler();
     fbe:	4b01      	ldr	r3, [pc, #4]	; (fc4 <DMAC_1_Handler+0x8>)
     fc0:	4798      	blx	r3
     fc2:	bd08      	pop	{r3, pc}
     fc4:	00000cc9 	.word	0x00000cc9

00000fc8 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
     fc8:	b508      	push	{r3, lr}
	_dmac_handler();
     fca:	4b01      	ldr	r3, [pc, #4]	; (fd0 <DMAC_2_Handler+0x8>)
     fcc:	4798      	blx	r3
     fce:	bd08      	pop	{r3, pc}
     fd0:	00000cc9 	.word	0x00000cc9

00000fd4 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
     fd4:	b508      	push	{r3, lr}
	_dmac_handler();
     fd6:	4b01      	ldr	r3, [pc, #4]	; (fdc <DMAC_3_Handler+0x8>)
     fd8:	4798      	blx	r3
     fda:	bd08      	pop	{r3, pc}
     fdc:	00000cc9 	.word	0x00000cc9

00000fe0 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
     fe0:	b508      	push	{r3, lr}
	_dmac_handler();
     fe2:	4b01      	ldr	r3, [pc, #4]	; (fe8 <DMAC_4_Handler+0x8>)
     fe4:	4798      	blx	r3
     fe6:	bd08      	pop	{r3, pc}
     fe8:	00000cc9 	.word	0x00000cc9

00000fec <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
     fec:	b084      	sub	sp, #16
     fee:	b470      	push	{r4, r5, r6}
     ff0:	b085      	sub	sp, #20
     ff2:	4606      	mov	r6, r0
     ff4:	a809      	add	r0, sp, #36	; 0x24
     ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     ffa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
     ffc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
    1000:	4d04      	ldr	r5, [pc, #16]	; (1014 <_dma_set_descriptor+0x28>)
    1002:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    1006:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    100a:	b005      	add	sp, #20
    100c:	bc70      	pop	{r4, r5, r6}
    100e:	b004      	add	sp, #16
    1010:	4770      	bx	lr
    1012:	bf00      	nop
    1014:	20000570 	.word	0x20000570

00001018 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1018:	f010 0f01 	tst.w	r0, #1
    101c:	d008      	beq.n	1030 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    101e:	4a05      	ldr	r2, [pc, #20]	; (1034 <_gclk_init_generators_by_fref+0x1c>)
    1020:	4b05      	ldr	r3, [pc, #20]	; (1038 <_gclk_init_generators_by_fref+0x20>)
    1022:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <_gclk_init_generators_by_fref+0x20>)
    1026:	685a      	ldr	r2, [r3, #4]
    1028:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    102c:	421a      	tst	r2, r3
    102e:	d1f9      	bne.n	1024 <_gclk_init_generators_by_fref+0xc>
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	00010108 	.word	0x00010108
    1038:	40001c00 	.word	0x40001c00

0000103c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    103c:	2201      	movs	r2, #1
    103e:	4b01      	ldr	r3, [pc, #4]	; (1044 <_mclk_init+0x8>)
    1040:	715a      	strb	r2, [r3, #5]
    1042:	4770      	bx	lr
    1044:	40000800 	.word	0x40000800

00001048 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1048:	4b03      	ldr	r3, [pc, #12]	; (1058 <_osc32kctrl_init_sources+0x10>)
    104a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    104c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1050:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1052:	2201      	movs	r2, #1
    1054:	741a      	strb	r2, [r3, #16]
    1056:	4770      	bx	lr
    1058:	40001400 	.word	0x40001400

0000105c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    105c:	4a04      	ldr	r2, [pc, #16]	; (1070 <_oscctrl_init_sources+0x14>)
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <_oscctrl_init_sources+0x18>)
    1060:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <_oscctrl_init_sources+0x18>)
    1064:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1066:	f013 0f02 	tst.w	r3, #2
    106a:	d0fa      	beq.n	1062 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    106c:	4770      	bx	lr
    106e:	bf00      	nop
    1070:	03002606 	.word	0x03002606
    1074:	40001000 	.word	0x40001000

00001078 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1078:	2231      	movs	r2, #49	; 0x31
    107a:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    107c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    107e:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    1080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1082:	f013 0f06 	tst.w	r3, #6
    1086:	d1fa      	bne.n	107e <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    108a:	4a0b      	ldr	r2, [pc, #44]	; (10b8 <_oscctrl_init_referenced_generators+0x40>)
    108c:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    108e:	2202      	movs	r2, #2
    1090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1094:	4b07      	ldr	r3, [pc, #28]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    1096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1098:	f013 0f02 	tst.w	r3, #2
    109c:	d1fa      	bne.n	1094 <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    109e:	4b05      	ldr	r3, [pc, #20]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    10a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    10a2:	f013 0f01 	tst.w	r3, #1
    10a6:	d104      	bne.n	10b2 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    10a8:	4b02      	ldr	r3, [pc, #8]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    10aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10ac:	f013 0f02 	tst.w	r3, #2
    10b0:	d0f5      	beq.n	109e <_oscctrl_init_referenced_generators+0x26>
    10b2:	4770      	bx	lr
    10b4:	40001000 	.word	0x40001000
    10b8:	00020060 	.word	0x00020060

000010bc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    10bc:	b500      	push	{lr}
    10be:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <RAMECC_Handler+0x3c>)
    10c2:	789b      	ldrb	r3, [r3, #2]
    10c4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    10c6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	f013 0f02 	tst.w	r3, #2
    10ce:	d006      	beq.n	10de <RAMECC_Handler+0x22>
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <RAMECC_Handler+0x40>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	b11b      	cbz	r3, 10de <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    10d6:	4a08      	ldr	r2, [pc, #32]	; (10f8 <RAMECC_Handler+0x3c>)
    10d8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10da:	4798      	blx	r3
    10dc:	e009      	b.n	10f2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10de:	9b01      	ldr	r3, [sp, #4]
    10e0:	f013 0f01 	tst.w	r3, #1
    10e4:	d005      	beq.n	10f2 <RAMECC_Handler+0x36>
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <RAMECC_Handler+0x40>)
    10e8:	685b      	ldr	r3, [r3, #4]
    10ea:	b113      	cbz	r3, 10f2 <RAMECC_Handler+0x36>
    10ec:	4a02      	ldr	r2, [pc, #8]	; (10f8 <RAMECC_Handler+0x3c>)
    10ee:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10f0:	4798      	blx	r3
	} else {
		return;
	}
}
    10f2:	b003      	add	sp, #12
    10f4:	f85d fb04 	ldr.w	pc, [sp], #4
    10f8:	41020000 	.word	0x41020000
    10fc:	20000970 	.word	0x20000970

00001100 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1100:	b470      	push	{r4, r5, r6}
    1102:	b089      	sub	sp, #36	; 0x24
    1104:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1106:	466c      	mov	r4, sp
    1108:	4d0c      	ldr	r5, [pc, #48]	; (113c <_sercom_get_hardware_index+0x3c>)
    110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    110e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1116:	2000      	movs	r0, #0
    1118:	2807      	cmp	r0, #7
    111a:	d80a      	bhi.n	1132 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    111c:	ab08      	add	r3, sp, #32
    111e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1122:	f853 3c20 	ldr.w	r3, [r3, #-32]
    1126:	42b3      	cmp	r3, r6
    1128:	d001      	beq.n	112e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    112a:	3001      	adds	r0, #1
    112c:	e7f4      	b.n	1118 <_sercom_get_hardware_index+0x18>
			return i;
    112e:	b2c0      	uxtb	r0, r0
    1130:	e000      	b.n	1134 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    1132:	2000      	movs	r0, #0
}
    1134:	b009      	add	sp, #36	; 0x24
    1136:	bc70      	pop	{r4, r5, r6}
    1138:	4770      	bx	lr
    113a:	bf00      	nop
    113c:	00004e34 	.word	0x00004e34

00001140 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1140:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1142:	f013 0f01 	tst.w	r3, #1
    1146:	d109      	bne.n	115c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1148:	6803      	ldr	r3, [r0, #0]
    114a:	f043 0302 	orr.w	r3, r3, #2
    114e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1150:	69c3      	ldr	r3, [r0, #28]
    1152:	f013 0f03 	tst.w	r3, #3
    1156:	d1fb      	bne.n	1150 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1158:	2000      	movs	r0, #0
    115a:	4770      	bx	lr
		return ERR_BUSY;
    115c:	f06f 0003 	mvn.w	r0, #3
}
    1160:	4770      	bx	lr

00001162 <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1162:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1164:	f013 0f04 	tst.w	r3, #4
    1168:	d109      	bne.n	117e <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    116a:	6843      	ldr	r3, [r0, #4]
    116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1170:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1172:	69c3      	ldr	r3, [r0, #28]
    1174:	f013 0f17 	tst.w	r3, #23
    1178:	d1fb      	bne.n	1172 <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    117a:	2000      	movs	r0, #0
    117c:	4770      	bx	lr
		return ERR_BUSY;
    117e:	f06f 0003 	mvn.w	r0, #3
}
    1182:	4770      	bx	lr

00001184 <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1184:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1186:	f013 0f04 	tst.w	r3, #4
    118a:	d109      	bne.n	11a0 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    118c:	6843      	ldr	r3, [r0, #4]
    118e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    1192:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1194:	69c3      	ldr	r3, [r0, #28]
    1196:	f013 0f17 	tst.w	r3, #23
    119a:	d1fb      	bne.n	1194 <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    119c:	2000      	movs	r0, #0
    119e:	4770      	bx	lr
		return ERR_BUSY;
    11a0:	f06f 0003 	mvn.w	r0, #3
}
    11a4:	4770      	bx	lr

000011a6 <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11a6:	3028      	adds	r0, #40	; 0x28
    11a8:	4770      	bx	lr

000011aa <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11aa:	3028      	adds	r0, #40	; 0x28
    11ac:	4770      	bx	lr
	...

000011b0 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    11b0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11b2:	4b04      	ldr	r3, [pc, #16]	; (11c4 <_spi_get_tx_dma_channel+0x14>)
    11b4:	4798      	blx	r3

	switch (index) {
    11b6:	2805      	cmp	r0, #5
    11b8:	d001      	beq.n	11be <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    11ba:	2000      	movs	r0, #0
    11bc:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    11be:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11c0:	bd08      	pop	{r3, pc}
    11c2:	bf00      	nop
    11c4:	00001101 	.word	0x00001101

000011c8 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    11c8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <_spi_is_rx_dma_channel_enabled+0x14>)
    11cc:	4798      	blx	r3

	switch (index) {
    11ce:	2805      	cmp	r0, #5
    11d0:	d001      	beq.n	11d6 <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    11d2:	2000      	movs	r0, #0
    11d4:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    11d6:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    11d8:	bd08      	pop	{r3, pc}
    11da:	bf00      	nop
    11dc:	00001101 	.word	0x00001101

000011e0 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    11e0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11e2:	4b07      	ldr	r3, [pc, #28]	; (1200 <_spi_get_rx_dma_channel+0x20>)
    11e4:	4798      	blx	r3

	switch (index) {
    11e6:	2807      	cmp	r0, #7
    11e8:	d807      	bhi.n	11fa <_spi_get_rx_dma_channel+0x1a>
    11ea:	e8df f000 	tbb	[pc, r0]
    11ee:	0404      	.short	0x0404
    11f0:	06040404 	.word	0x06040404
    11f4:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    11f6:	2001      	movs	r0, #1
    11f8:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    11fa:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11fc:	bd08      	pop	{r3, pc}
    11fe:	bf00      	nop
    1200:	00001101 	.word	0x00001101

00001204 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    1204:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1206:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    1208:	689b      	ldr	r3, [r3, #8]
    120a:	b103      	cbz	r3, 120e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    120c:	4798      	blx	r3
    120e:	bd08      	pop	{r3, pc}

00001210 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    1210:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1212:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    1214:	68db      	ldr	r3, [r3, #12]
    1216:	b103      	cbz	r3, 121a <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    1218:	4798      	blx	r3
    121a:	bd08      	pop	{r3, pc}

0000121c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    121c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    121e:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    1220:	685b      	ldr	r3, [r3, #4]
    1222:	b103      	cbz	r3, 1226 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    1224:	4798      	blx	r3
    1226:	bd08      	pop	{r3, pc}

00001228 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1228:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    122a:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    122c:	691b      	ldr	r3, [r3, #16]
    122e:	b103      	cbz	r3, 1232 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1230:	4798      	blx	r3
    1232:	bd08      	pop	{r3, pc}

00001234 <_get_i2cm_index>:
{
    1234:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1236:	4b0d      	ldr	r3, [pc, #52]	; (126c <_get_i2cm_index+0x38>)
    1238:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    123a:	2300      	movs	r3, #0
    123c:	b143      	cbz	r3, 1250 <_get_i2cm_index+0x1c>
	ASSERT(false);
    123e:	f240 32a7 	movw	r2, #935	; 0x3a7
    1242:	490b      	ldr	r1, [pc, #44]	; (1270 <_get_i2cm_index+0x3c>)
    1244:	2000      	movs	r0, #0
    1246:	4b0b      	ldr	r3, [pc, #44]	; (1274 <_get_i2cm_index+0x40>)
    1248:	4798      	blx	r3
	return -1;
    124a:	f04f 30ff 	mov.w	r0, #4294967295
}
    124e:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1254:	00d1      	lsls	r1, r2, #3
    1256:	4a08      	ldr	r2, [pc, #32]	; (1278 <_get_i2cm_index+0x44>)
    1258:	440a      	add	r2, r1
    125a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    125e:	4290      	cmp	r0, r2
    1260:	d002      	beq.n	1268 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1262:	3301      	adds	r3, #1
    1264:	b2db      	uxtb	r3, r3
    1266:	e7e9      	b.n	123c <_get_i2cm_index+0x8>
			return i;
    1268:	b258      	sxtb	r0, r3
    126a:	bd08      	pop	{r3, pc}
    126c:	00001101 	.word	0x00001101
    1270:	00004ea8 	.word	0x00004ea8
    1274:	00000c25 	.word	0x00000c25
    1278:	00004e34 	.word	0x00004e34

0000127c <_i2c_m_sync_init_impl>:
{
    127c:	b538      	push	{r3, r4, r5, lr}
    127e:	4605      	mov	r5, r0
    1280:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1282:	4608      	mov	r0, r1
    1284:	4b33      	ldr	r3, [pc, #204]	; (1354 <_i2c_m_sync_init_impl+0xd8>)
    1286:	4798      	blx	r3
    1288:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    128a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    128c:	f013 0f01 	tst.w	r3, #1
    1290:	d122      	bne.n	12d8 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1292:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1296:	00da      	lsls	r2, r3, #3
    1298:	4b2f      	ldr	r3, [pc, #188]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    129a:	4413      	add	r3, r2
    129c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    129e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12a2:	69e3      	ldr	r3, [r4, #28]
    12a4:	f013 0f03 	tst.w	r3, #3
    12a8:	d1fb      	bne.n	12a2 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12aa:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    12ac:	f013 0f02 	tst.w	r3, #2
    12b0:	d00b      	beq.n	12ca <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12b2:	6823      	ldr	r3, [r4, #0]
    12b4:	f023 0302 	bic.w	r3, r3, #2
    12b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ba:	69e3      	ldr	r3, [r4, #28]
    12bc:	f013 0f03 	tst.w	r3, #3
    12c0:	d1fb      	bne.n	12ba <_i2c_m_sync_init_impl+0x3e>
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	f013 0f02 	tst.w	r3, #2
    12c8:	d1fb      	bne.n	12c2 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12ca:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12ce:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12d0:	69e3      	ldr	r3, [r4, #28]
    12d2:	f013 0f03 	tst.w	r3, #3
    12d6:	d1fb      	bne.n	12d0 <_i2c_m_sync_init_impl+0x54>
    12d8:	69e3      	ldr	r3, [r4, #28]
    12da:	f013 0f01 	tst.w	r3, #1
    12de:	d1fb      	bne.n	12d8 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12e0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12e4:	00da      	lsls	r2, r3, #3
    12e6:	4b1c      	ldr	r3, [pc, #112]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    12e8:	4413      	add	r3, r2
    12ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ee:	69e3      	ldr	r3, [r4, #28]
    12f0:	f013 0f03 	tst.w	r3, #3
    12f4:	d1fb      	bne.n	12ee <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12fa:	00da      	lsls	r2, r3, #3
    12fc:	4b16      	ldr	r3, [pc, #88]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    12fe:	4413      	add	r3, r2
    1300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1302:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1304:	69e3      	ldr	r3, [r4, #28]
    1306:	f013 0f04 	tst.w	r3, #4
    130a:	d1fb      	bne.n	1304 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    130c:	0042      	lsls	r2, r0, #1
    130e:	4402      	add	r2, r0
    1310:	00d1      	lsls	r1, r2, #3
    1312:	4b11      	ldr	r3, [pc, #68]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    1314:	440b      	add	r3, r1
    1316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1318:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    131a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    131e:	f003 0303 	and.w	r3, r3, #3
    1322:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1324:	2b01      	cmp	r3, #1
    1326:	bf94      	ite	ls
    1328:	2300      	movls	r3, #0
    132a:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    132c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    132e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1332:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1336:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1338:	69e3      	ldr	r3, [r4, #28]
    133a:	f013 0f04 	tst.w	r3, #4
    133e:	d1fb      	bne.n	1338 <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    1340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1344:	00c2      	lsls	r2, r0, #3
    1346:	4b04      	ldr	r3, [pc, #16]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    1348:	4413      	add	r3, r2
    134a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    134e:	81eb      	strh	r3, [r5, #14]
}
    1350:	2000      	movs	r0, #0
    1352:	bd38      	pop	{r3, r4, r5, pc}
    1354:	00001235 	.word	0x00001235
    1358:	00004e34 	.word	0x00004e34

0000135c <_sercom_i2c_sync_send_address>:
{
    135c:	b570      	push	{r4, r5, r6, lr}
    135e:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1360:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1362:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1364:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1368:	f240 52a6 	movw	r2, #1446	; 0x5a6
    136c:	4999      	ldr	r1, [pc, #612]	; (15d4 <_sercom_i2c_sync_send_address+0x278>)
    136e:	3000      	adds	r0, #0
    1370:	bf18      	it	ne
    1372:	2001      	movne	r0, #1
    1374:	4b98      	ldr	r3, [pc, #608]	; (15d8 <_sercom_i2c_sync_send_address+0x27c>)
    1376:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1378:	686b      	ldr	r3, [r5, #4]
    137a:	2b01      	cmp	r3, #1
    137c:	d057      	beq.n	142e <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    137e:	6863      	ldr	r3, [r4, #4]
    1380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1384:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1386:	69e3      	ldr	r3, [r4, #28]
    1388:	f013 0f04 	tst.w	r3, #4
    138c:	d1fb      	bne.n	1386 <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    138e:	882b      	ldrh	r3, [r5, #0]
    1390:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1394:	d056      	beq.n	1444 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    1396:	886a      	ldrh	r2, [r5, #2]
    1398:	f012 0f01 	tst.w	r2, #1
    139c:	d004      	beq.n	13a8 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    139e:	886a      	ldrh	r2, [r5, #2]
    13a0:	b292      	uxth	r2, r2
    13a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    13a6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    13a8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    13ac:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    13b0:	69e3      	ldr	r3, [r4, #28]
    13b2:	f013 0f04 	tst.w	r3, #4
    13b6:	d1fb      	bne.n	13b0 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    13b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    13be:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    13c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    13c4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13c6:	69e3      	ldr	r3, [r4, #28]
    13c8:	f013 0f04 	tst.w	r3, #4
    13cc:	d1fb      	bne.n	13c6 <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    13ce:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    13d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    13d4:	7e33      	ldrb	r3, [r6, #24]
    13d6:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    13d8:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    13da:	1e51      	subs	r1, r2, #1
    13dc:	b11a      	cbz	r2, 13e6 <_sercom_i2c_sync_send_address+0x8a>
    13de:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    13e0:	f013 0f03 	tst.w	r3, #3
    13e4:	d0f6      	beq.n	13d4 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    13e6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    13e8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13ec:	69e3      	ldr	r3, [r4, #28]
    13ee:	f013 0f04 	tst.w	r3, #4
    13f2:	d1fb      	bne.n	13ec <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    13f4:	8b63      	ldrh	r3, [r4, #26]
    13f6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    13f8:	f010 0f01 	tst.w	r0, #1
    13fc:	f000 809c 	beq.w	1538 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1400:	f013 0f02 	tst.w	r3, #2
    1404:	d032      	beq.n	146c <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1406:	2201      	movs	r2, #1
    1408:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    140a:	886a      	ldrh	r2, [r5, #2]
    140c:	b292      	uxth	r2, r2
    140e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1412:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1414:	886a      	ldrh	r2, [r5, #2]
    1416:	b292      	uxth	r2, r2
    1418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    141c:	b292      	uxth	r2, r2
    141e:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1420:	f013 0f01 	tst.w	r3, #1
    1424:	f000 80d1 	beq.w	15ca <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    1428:	f06f 0004 	mvn.w	r0, #4
    142c:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    142e:	2e00      	cmp	r6, #0
    1430:	d0a5      	beq.n	137e <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1432:	6863      	ldr	r3, [r4, #4]
    1434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1438:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143a:	69e3      	ldr	r3, [r4, #28]
    143c:	f013 0f04 	tst.w	r3, #4
    1440:	d1fb      	bne.n	143a <_sercom_i2c_sync_send_address+0xde>
    1442:	e7a4      	b.n	138e <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1444:	005b      	lsls	r3, r3, #1
    1446:	b2db      	uxtb	r3, r3
    1448:	886a      	ldrh	r2, [r5, #2]
    144a:	f002 0201 	and.w	r2, r2, #1
    144e:	431a      	orrs	r2, r3
    1450:	69e3      	ldr	r3, [r4, #28]
    1452:	f013 0f04 	tst.w	r3, #4
    1456:	d1fb      	bne.n	1450 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1458:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    145e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1460:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1462:	69e3      	ldr	r3, [r4, #28]
    1464:	f013 0f04 	tst.w	r3, #4
    1468:	d1fb      	bne.n	1462 <_sercom_i2c_sync_send_address+0x106>
    146a:	e7b0      	b.n	13ce <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    146c:	f013 0f04 	tst.w	r3, #4
    1470:	d11f      	bne.n	14b2 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    1472:	886b      	ldrh	r3, [r5, #2]
    1474:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1478:	d039      	beq.n	14ee <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    147a:	882b      	ldrh	r3, [r5, #0]
    147c:	121b      	asrs	r3, r3, #8
    147e:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1480:	f003 0206 	and.w	r2, r3, #6
    1484:	69e3      	ldr	r3, [r4, #28]
    1486:	f013 0f04 	tst.w	r3, #4
    148a:	d1fb      	bne.n	1484 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    148c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1492:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1494:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1498:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    149a:	69e3      	ldr	r3, [r4, #28]
    149c:	f013 0f04 	tst.w	r3, #4
    14a0:	d1fb      	bne.n	149a <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    14a2:	886b      	ldrh	r3, [r5, #2]
    14a4:	b29b      	uxth	r3, r3
    14a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    14aa:	b29b      	uxth	r3, r3
    14ac:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    14ae:	2000      	movs	r0, #0
    14b0:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    14b2:	686b      	ldr	r3, [r5, #4]
    14b4:	2b00      	cmp	r3, #0
    14b6:	dd04      	ble.n	14c2 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    14b8:	886b      	ldrh	r3, [r5, #2]
    14ba:	b29b      	uxth	r3, r3
    14bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    14c0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14c2:	886b      	ldrh	r3, [r5, #2]
    14c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14c8:	d108      	bne.n	14dc <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    14ca:	886b      	ldrh	r3, [r5, #2]
    14cc:	b29b      	uxth	r3, r3
    14ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14d2:	b29b      	uxth	r3, r3
    14d4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    14d6:	f06f 0001 	mvn.w	r0, #1
    14da:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14dc:	6863      	ldr	r3, [r4, #4]
    14de:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14e2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14e4:	69e3      	ldr	r3, [r4, #28]
    14e6:	f013 0f04 	tst.w	r3, #4
    14ea:	d1fb      	bne.n	14e4 <_sercom_i2c_sync_send_address+0x188>
    14ec:	e7ed      	b.n	14ca <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    14ee:	6868      	ldr	r0, [r5, #4]
    14f0:	b998      	cbnz	r0, 151a <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    14f2:	886b      	ldrh	r3, [r5, #2]
    14f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14f8:	d106      	bne.n	1508 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    14fa:	886b      	ldrh	r3, [r5, #2]
    14fc:	b29b      	uxth	r3, r3
    14fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1502:	b29b      	uxth	r3, r3
    1504:	806b      	strh	r3, [r5, #2]
    1506:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1508:	6863      	ldr	r3, [r4, #4]
    150a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    150e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1510:	69e3      	ldr	r3, [r4, #28]
    1512:	f013 0f04 	tst.w	r3, #4
    1516:	d1fb      	bne.n	1510 <_sercom_i2c_sync_send_address+0x1b4>
    1518:	e7ef      	b.n	14fa <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    151a:	68ab      	ldr	r3, [r5, #8]
    151c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    151e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1520:	69e3      	ldr	r3, [r4, #28]
    1522:	f013 0f04 	tst.w	r3, #4
    1526:	d1fb      	bne.n	1520 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    1528:	68ab      	ldr	r3, [r5, #8]
    152a:	3301      	adds	r3, #1
    152c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    152e:	686b      	ldr	r3, [r5, #4]
    1530:	3b01      	subs	r3, #1
    1532:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1534:	2000      	movs	r0, #0
    1536:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1538:	f010 0f02 	tst.w	r0, #2
    153c:	d048      	beq.n	15d0 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    153e:	6869      	ldr	r1, [r5, #4]
    1540:	2900      	cmp	r1, #0
    1542:	d03d      	beq.n	15c0 <_sercom_i2c_sync_send_address+0x264>
    1544:	f013 0f04 	tst.w	r3, #4
    1548:	d13a      	bne.n	15c0 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    154a:	3901      	subs	r1, #1
    154c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    154e:	b901      	cbnz	r1, 1552 <_sercom_i2c_sync_send_address+0x1f6>
    1550:	b1e2      	cbz	r2, 158c <_sercom_i2c_sync_send_address+0x230>
    1552:	2901      	cmp	r1, #1
    1554:	d018      	beq.n	1588 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    1556:	686b      	ldr	r3, [r5, #4]
    1558:	b94b      	cbnz	r3, 156e <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    155a:	886b      	ldrh	r3, [r5, #2]
    155c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1560:	d11d      	bne.n	159e <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    1562:	886b      	ldrh	r3, [r5, #2]
    1564:	b29b      	uxth	r3, r3
    1566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    156a:	b29b      	uxth	r3, r3
    156c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    156e:	68aa      	ldr	r2, [r5, #8]
    1570:	1c53      	adds	r3, r2, #1
    1572:	60ab      	str	r3, [r5, #8]
    1574:	69e3      	ldr	r3, [r4, #28]
    1576:	f013 0f04 	tst.w	r3, #4
    157a:	d1fb      	bne.n	1574 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    157c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    157e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1580:	2302      	movs	r3, #2
    1582:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1584:	2000      	movs	r0, #0
    1586:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1588:	2a00      	cmp	r2, #0
    158a:	d0e4      	beq.n	1556 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    158c:	6863      	ldr	r3, [r4, #4]
    158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1592:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1594:	69e3      	ldr	r3, [r4, #28]
    1596:	f013 0f04 	tst.w	r3, #4
    159a:	d1fb      	bne.n	1594 <_sercom_i2c_sync_send_address+0x238>
    159c:	e7db      	b.n	1556 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    159e:	6863      	ldr	r3, [r4, #4]
    15a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    15a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	f013 0f04 	tst.w	r3, #4
    15ac:	d1fb      	bne.n	15a6 <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15ae:	6863      	ldr	r3, [r4, #4]
    15b0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15b6:	69e3      	ldr	r3, [r4, #28]
    15b8:	f013 0f04 	tst.w	r3, #4
    15bc:	d1fb      	bne.n	15b6 <_sercom_i2c_sync_send_address+0x25a>
    15be:	e7d0      	b.n	1562 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15c0:	2302      	movs	r3, #2
    15c2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    15c4:	f06f 0001 	mvn.w	r0, #1
    15c8:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    15ca:	f06f 0003 	mvn.w	r0, #3
    15ce:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    15d0:	2000      	movs	r0, #0
}
    15d2:	bd70      	pop	{r4, r5, r6, pc}
    15d4:	00004ea8 	.word	0x00004ea8
    15d8:	00000c25 	.word	0x00000c25

000015dc <_spi_m_dma_rx_enable>:
{
    15dc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    15de:	4604      	mov	r4, r0
    15e0:	b168      	cbz	r0, 15fe <_spi_m_dma_rx_enable+0x22>
    15e2:	6803      	ldr	r3, [r0, #0]
    15e4:	b14b      	cbz	r3, 15fa <_spi_m_dma_rx_enable+0x1e>
    15e6:	2001      	movs	r0, #1
    15e8:	f640 32fe 	movw	r2, #3070	; 0xbfe
    15ec:	4905      	ldr	r1, [pc, #20]	; (1604 <_spi_m_dma_rx_enable+0x28>)
    15ee:	4b06      	ldr	r3, [pc, #24]	; (1608 <_spi_m_dma_rx_enable+0x2c>)
    15f0:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    15f2:	6820      	ldr	r0, [r4, #0]
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <_spi_m_dma_rx_enable+0x30>)
    15f6:	4798      	blx	r3
}
    15f8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    15fa:	2000      	movs	r0, #0
    15fc:	e7f4      	b.n	15e8 <_spi_m_dma_rx_enable+0xc>
    15fe:	2000      	movs	r0, #0
    1600:	e7f2      	b.n	15e8 <_spi_m_dma_rx_enable+0xc>
    1602:	bf00      	nop
    1604:	00004ea8 	.word	0x00004ea8
    1608:	00000c25 	.word	0x00000c25
    160c:	00001163 	.word	0x00001163

00001610 <_spi_m_dma_rx_disable>:
{
    1610:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1612:	4604      	mov	r4, r0
    1614:	b168      	cbz	r0, 1632 <_spi_m_dma_rx_disable+0x22>
    1616:	6803      	ldr	r3, [r0, #0]
    1618:	b14b      	cbz	r3, 162e <_spi_m_dma_rx_disable+0x1e>
    161a:	2001      	movs	r0, #1
    161c:	f640 4205 	movw	r2, #3077	; 0xc05
    1620:	4905      	ldr	r1, [pc, #20]	; (1638 <_spi_m_dma_rx_disable+0x28>)
    1622:	4b06      	ldr	r3, [pc, #24]	; (163c <_spi_m_dma_rx_disable+0x2c>)
    1624:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    1626:	6820      	ldr	r0, [r4, #0]
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <_spi_m_dma_rx_disable+0x30>)
    162a:	4798      	blx	r3
}
    162c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    162e:	2000      	movs	r0, #0
    1630:	e7f4      	b.n	161c <_spi_m_dma_rx_disable+0xc>
    1632:	2000      	movs	r0, #0
    1634:	e7f2      	b.n	161c <_spi_m_dma_rx_disable+0xc>
    1636:	bf00      	nop
    1638:	00004ea8 	.word	0x00004ea8
    163c:	00000c25 	.word	0x00000c25
    1640:	00001185 	.word	0x00001185

00001644 <_i2c_m_sync_init>:
{
    1644:	b538      	push	{r3, r4, r5, lr}
    1646:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1648:	4604      	mov	r4, r0
    164a:	f240 5219 	movw	r2, #1305	; 0x519
    164e:	4906      	ldr	r1, [pc, #24]	; (1668 <_i2c_m_sync_init+0x24>)
    1650:	3000      	adds	r0, #0
    1652:	bf18      	it	ne
    1654:	2001      	movne	r0, #1
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <_i2c_m_sync_init+0x28>)
    1658:	4798      	blx	r3
	i2c_dev->hw = hw;
    165a:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    165c:	4629      	mov	r1, r5
    165e:	4620      	mov	r0, r4
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <_i2c_m_sync_init+0x2c>)
    1662:	4798      	blx	r3
}
    1664:	bd38      	pop	{r3, r4, r5, pc}
    1666:	bf00      	nop
    1668:	00004ea8 	.word	0x00004ea8
    166c:	00000c25 	.word	0x00000c25
    1670:	0000127d 	.word	0x0000127d

00001674 <_i2c_m_sync_enable>:
{
    1674:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    1676:	4e1b      	ldr	r6, [pc, #108]	; (16e4 <_i2c_m_sync_enable+0x70>)
    1678:	4604      	mov	r4, r0
    167a:	f240 5236 	movw	r2, #1334	; 0x536
    167e:	4631      	mov	r1, r6
    1680:	3000      	adds	r0, #0
    1682:	bf18      	it	ne
    1684:	2001      	movne	r0, #1
    1686:	4d18      	ldr	r5, [pc, #96]	; (16e8 <_i2c_m_sync_enable+0x74>)
    1688:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    168a:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    168c:	f240 6206 	movw	r2, #1542	; 0x606
    1690:	4631      	mov	r1, r6
    1692:	1c20      	adds	r0, r4, #0
    1694:	bf18      	it	ne
    1696:	2001      	movne	r0, #1
    1698:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    169a:	6823      	ldr	r3, [r4, #0]
    169c:	f043 0302 	orr.w	r3, r3, #2
    16a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16a2:	69e3      	ldr	r3, [r4, #28]
    16a4:	f013 0f03 	tst.w	r3, #3
    16a8:	d1fb      	bne.n	16a2 <_i2c_m_sync_enable+0x2e>
    16aa:	2104      	movs	r1, #4
    16ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    16b0:	69e3      	ldr	r3, [r4, #28]
    16b2:	f013 0f04 	tst.w	r3, #4
    16b6:	d1fb      	bne.n	16b0 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    16b8:	8b63      	ldrh	r3, [r4, #26]
    16ba:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    16be:	2b01      	cmp	r3, #1
    16c0:	d00b      	beq.n	16da <_i2c_m_sync_enable+0x66>
		timeout--;
    16c2:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    16c4:	2a00      	cmp	r2, #0
    16c6:	dcf3      	bgt.n	16b0 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    16c8:	3901      	subs	r1, #1
    16ca:	d008      	beq.n	16de <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    16cc:	2310      	movs	r3, #16
    16ce:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16d0:	69e3      	ldr	r3, [r4, #28]
    16d2:	f013 0f04 	tst.w	r3, #4
    16d6:	d1fb      	bne.n	16d0 <_i2c_m_sync_enable+0x5c>
    16d8:	e7e8      	b.n	16ac <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    16da:	2000      	movs	r0, #0
    16dc:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    16de:	f06f 0005 	mvn.w	r0, #5
}
    16e2:	bd70      	pop	{r4, r5, r6, pc}
    16e4:	00004ea8 	.word	0x00004ea8
    16e8:	00000c25 	.word	0x00000c25

000016ec <_i2c_m_sync_transfer>:
{
    16ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16f0:	4605      	mov	r5, r0
    16f2:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    16f4:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    16f6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1998 <_i2c_m_sync_transfer+0x2ac>
    16fa:	f240 52d1 	movw	r2, #1489	; 0x5d1
    16fe:	4641      	mov	r1, r8
    1700:	3000      	adds	r0, #0
    1702:	bf18      	it	ne
    1704:	2001      	movne	r0, #1
    1706:	4fa2      	ldr	r7, [pc, #648]	; (1990 <_i2c_m_sync_transfer+0x2a4>)
    1708:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    170a:	6928      	ldr	r0, [r5, #16]
    170c:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1710:	4641      	mov	r1, r8
    1712:	3000      	adds	r0, #0
    1714:	bf18      	it	ne
    1716:	2001      	movne	r0, #1
    1718:	47b8      	blx	r7
	ASSERT(msg);
    171a:	f240 52d3 	movw	r2, #1491	; 0x5d3
    171e:	4641      	mov	r1, r8
    1720:	1c30      	adds	r0, r6, #0
    1722:	bf18      	it	ne
    1724:	2001      	movne	r0, #1
    1726:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1728:	886b      	ldrh	r3, [r5, #2]
    172a:	f413 7f80 	tst.w	r3, #256	; 0x100
    172e:	f040 812a 	bne.w	1986 <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    1732:	8873      	ldrh	r3, [r6, #2]
    1734:	b29b      	uxth	r3, r3
    1736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    173a:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    173c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1740:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1744:	6863      	ldr	r3, [r4, #4]
    1746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    174a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    174c:	69e3      	ldr	r3, [r4, #28]
    174e:	f013 0f04 	tst.w	r3, #4
    1752:	d1fb      	bne.n	174c <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1754:	4628      	mov	r0, r5
    1756:	4b8f      	ldr	r3, [pc, #572]	; (1994 <_i2c_m_sync_transfer+0x2a8>)
    1758:	4798      	blx	r3
	if (ret) {
    175a:	4603      	mov	r3, r0
    175c:	2800      	cmp	r0, #0
    175e:	f000 80b0 	beq.w	18c2 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1762:	886a      	ldrh	r2, [r5, #2]
    1764:	b292      	uxth	r2, r2
    1766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    176a:	b292      	uxth	r2, r2
    176c:	806a      	strh	r2, [r5, #2]
		return ret;
    176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1772:	f06f 0004 	mvn.w	r0, #4
    1776:	e0b7      	b.n	18e8 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1778:	8873      	ldrh	r3, [r6, #2]
    177a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    177e:	d107      	bne.n	1790 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1780:	886b      	ldrh	r3, [r5, #2]
    1782:	b29b      	uxth	r3, r3
    1784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1788:	b29b      	uxth	r3, r3
    178a:	806b      	strh	r3, [r5, #2]
			return ret;
    178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1790:	6863      	ldr	r3, [r4, #4]
    1792:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1796:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1798:	69e3      	ldr	r3, [r4, #28]
    179a:	f013 0f04 	tst.w	r3, #4
    179e:	d1fb      	bne.n	1798 <_i2c_m_sync_transfer+0xac>
    17a0:	e7ee      	b.n	1780 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    17a2:	f013 0f04 	tst.w	r3, #4
    17a6:	d11f      	bne.n	17e8 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    17a8:	886b      	ldrh	r3, [r5, #2]
    17aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17ae:	d039      	beq.n	1824 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    17b0:	882b      	ldrh	r3, [r5, #0]
    17b2:	121b      	asrs	r3, r3, #8
    17b4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17b6:	f003 0206 	and.w	r2, r3, #6
    17ba:	69e3      	ldr	r3, [r4, #28]
    17bc:	f013 0f04 	tst.w	r3, #4
    17c0:	d1fb      	bne.n	17ba <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    17c8:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    17ca:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17ce:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17d0:	69e3      	ldr	r3, [r4, #28]
    17d2:	f013 0f04 	tst.w	r3, #4
    17d6:	d1fb      	bne.n	17d0 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    17d8:	886b      	ldrh	r3, [r5, #2]
    17da:	b29b      	uxth	r3, r3
    17dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    17e0:	b29b      	uxth	r3, r3
    17e2:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    17e4:	2000      	movs	r0, #0
    17e6:	e06b      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    17e8:	686b      	ldr	r3, [r5, #4]
    17ea:	2b00      	cmp	r3, #0
    17ec:	dd04      	ble.n	17f8 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    17ee:	886b      	ldrh	r3, [r5, #2]
    17f0:	b29b      	uxth	r3, r3
    17f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17f6:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    17f8:	886b      	ldrh	r3, [r5, #2]
    17fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17fe:	d108      	bne.n	1812 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    1800:	886b      	ldrh	r3, [r5, #2]
    1802:	b29b      	uxth	r3, r3
    1804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1808:	b29b      	uxth	r3, r3
    180a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    180c:	f06f 0001 	mvn.w	r0, #1
    1810:	e056      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1812:	6863      	ldr	r3, [r4, #4]
    1814:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1818:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    181a:	69e3      	ldr	r3, [r4, #28]
    181c:	f013 0f04 	tst.w	r3, #4
    1820:	d1fb      	bne.n	181a <_i2c_m_sync_transfer+0x12e>
    1822:	e7ed      	b.n	1800 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    1824:	6868      	ldr	r0, [r5, #4]
    1826:	b998      	cbnz	r0, 1850 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1828:	886b      	ldrh	r3, [r5, #2]
    182a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    182e:	d106      	bne.n	183e <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1830:	886b      	ldrh	r3, [r5, #2]
    1832:	b29b      	uxth	r3, r3
    1834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1838:	b29b      	uxth	r3, r3
    183a:	806b      	strh	r3, [r5, #2]
    183c:	e040      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    183e:	6863      	ldr	r3, [r4, #4]
    1840:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1844:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1846:	69e3      	ldr	r3, [r4, #28]
    1848:	f013 0f04 	tst.w	r3, #4
    184c:	d1fb      	bne.n	1846 <_i2c_m_sync_transfer+0x15a>
    184e:	e7ef      	b.n	1830 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1850:	68ab      	ldr	r3, [r5, #8]
    1852:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1854:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1856:	69e3      	ldr	r3, [r4, #28]
    1858:	f013 0f04 	tst.w	r3, #4
    185c:	d1fb      	bne.n	1856 <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    185e:	68ab      	ldr	r3, [r5, #8]
    1860:	3301      	adds	r3, #1
    1862:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1864:	686b      	ldr	r3, [r5, #4]
    1866:	3b01      	subs	r3, #1
    1868:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    186a:	2000      	movs	r0, #0
    186c:	e028      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    186e:	f017 0f02 	tst.w	r7, #2
    1872:	f000 8083 	beq.w	197c <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1876:	6869      	ldr	r1, [r5, #4]
    1878:	2900      	cmp	r1, #0
    187a:	d077      	beq.n	196c <_i2c_m_sync_transfer+0x280>
    187c:	f013 0f04 	tst.w	r3, #4
    1880:	d174      	bne.n	196c <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1882:	3901      	subs	r1, #1
    1884:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1886:	b909      	cbnz	r1, 188c <_i2c_m_sync_transfer+0x1a0>
    1888:	2a00      	cmp	r2, #0
    188a:	d055      	beq.n	1938 <_i2c_m_sync_transfer+0x24c>
    188c:	2901      	cmp	r1, #1
    188e:	d051      	beq.n	1934 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1890:	686b      	ldr	r3, [r5, #4]
    1892:	b94b      	cbnz	r3, 18a8 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1894:	886b      	ldrh	r3, [r5, #2]
    1896:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    189a:	d156      	bne.n	194a <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    189c:	886b      	ldrh	r3, [r5, #2]
    189e:	b29b      	uxth	r3, r3
    18a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18a4:	b29b      	uxth	r3, r3
    18a6:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    18a8:	68aa      	ldr	r2, [r5, #8]
    18aa:	1c53      	adds	r3, r2, #1
    18ac:	60ab      	str	r3, [r5, #8]
    18ae:	69e3      	ldr	r3, [r4, #28]
    18b0:	f013 0f04 	tst.w	r3, #4
    18b4:	d1fb      	bne.n	18ae <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    18b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18b8:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    18ba:	2302      	movs	r3, #2
    18bc:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    18be:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    18c0:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    18c2:	886a      	ldrh	r2, [r5, #2]
    18c4:	f412 7f80 	tst.w	r2, #256	; 0x100
    18c8:	d05a      	beq.n	1980 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    18ca:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    18cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    18d0:	7e03      	ldrb	r3, [r0, #24]
    18d2:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    18d4:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    18d6:	1e51      	subs	r1, r2, #1
    18d8:	2a00      	cmp	r2, #0
    18da:	f43f af4a 	beq.w	1772 <_i2c_m_sync_transfer+0x86>
    18de:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    18e0:	f013 0f03 	tst.w	r3, #3
    18e4:	d0f4      	beq.n	18d0 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    18e6:	2000      	movs	r0, #0
		if (ret) {
    18e8:	2800      	cmp	r0, #0
    18ea:	f47f af45 	bne.w	1778 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    18ee:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18f0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18f4:	69e3      	ldr	r3, [r4, #28]
    18f6:	f013 0f04 	tst.w	r3, #4
    18fa:	d1fb      	bne.n	18f4 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    18fc:	8b63      	ldrh	r3, [r4, #26]
    18fe:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1900:	f017 0f01 	tst.w	r7, #1
    1904:	d0b3      	beq.n	186e <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1906:	f013 0f02 	tst.w	r3, #2
    190a:	f43f af4a 	beq.w	17a2 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    190e:	2201      	movs	r2, #1
    1910:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1912:	886a      	ldrh	r2, [r5, #2]
    1914:	b292      	uxth	r2, r2
    1916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    191a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    191c:	886a      	ldrh	r2, [r5, #2]
    191e:	b292      	uxth	r2, r2
    1920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1924:	b292      	uxth	r2, r2
    1926:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1928:	f013 0f01 	tst.w	r3, #1
    192c:	d023      	beq.n	1976 <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    192e:	f06f 0004 	mvn.w	r0, #4
    1932:	e7c5      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1934:	2a00      	cmp	r2, #0
    1936:	d0ab      	beq.n	1890 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1938:	6863      	ldr	r3, [r4, #4]
    193a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    193e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1940:	69e3      	ldr	r3, [r4, #28]
    1942:	f013 0f04 	tst.w	r3, #4
    1946:	d1fb      	bne.n	1940 <_i2c_m_sync_transfer+0x254>
    1948:	e7a2      	b.n	1890 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    194a:	6863      	ldr	r3, [r4, #4]
    194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1950:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1952:	69e3      	ldr	r3, [r4, #28]
    1954:	f013 0f04 	tst.w	r3, #4
    1958:	d1fb      	bne.n	1952 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    195a:	6863      	ldr	r3, [r4, #4]
    195c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1960:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	f013 0f04 	tst.w	r3, #4
    1968:	d1fb      	bne.n	1962 <_i2c_m_sync_transfer+0x276>
    196a:	e797      	b.n	189c <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    196c:	2302      	movs	r3, #2
    196e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1970:	f06f 0001 	mvn.w	r0, #1
    1974:	e7a4      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    1976:	f06f 0003 	mvn.w	r0, #3
    197a:	e7a1      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    197c:	2000      	movs	r0, #0
    197e:	e79f      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1980:	4618      	mov	r0, r3
    1982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    1986:	f06f 0005 	mvn.w	r0, #5
}
    198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    198e:	bf00      	nop
    1990:	00000c25 	.word	0x00000c25
    1994:	0000135d 	.word	0x0000135d
    1998:	00004ea8 	.word	0x00004ea8

0000199c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	4605      	mov	r5, r0
    19a0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    19a2:	4608      	mov	r0, r1
    19a4:	4b50      	ldr	r3, [pc, #320]	; (1ae8 <_spi_m_dma_init+0x14c>)
    19a6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    19a8:	2300      	movs	r3, #0
    19aa:	2b00      	cmp	r3, #0
    19ac:	d072      	beq.n	1a94 <_spi_m_dma_init+0xf8>
	return NULL;
    19ae:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    19b0:	2d00      	cmp	r5, #0
    19b2:	d07b      	beq.n	1aac <_spi_m_dma_init+0x110>
    19b4:	2c00      	cmp	r4, #0
    19b6:	d077      	beq.n	1aa8 <_spi_m_dma_init+0x10c>
    19b8:	2001      	movs	r0, #1
    19ba:	f640 42b3 	movw	r2, #3251	; 0xcb3
    19be:	494b      	ldr	r1, [pc, #300]	; (1aec <_spi_m_dma_init+0x150>)
    19c0:	4b4b      	ldr	r3, [pc, #300]	; (1af0 <_spi_m_dma_init+0x154>)
    19c2:	4798      	blx	r3

	if (regs == NULL) {
    19c4:	2e00      	cmp	r6, #0
    19c6:	f000 808b 	beq.w	1ae0 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19ca:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19cc:	f013 0f01 	tst.w	r3, #1
    19d0:	d11d      	bne.n	1a0e <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19d2:	6833      	ldr	r3, [r6, #0]
    19d4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d8:	69e3      	ldr	r3, [r4, #28]
    19da:	f013 0f03 	tst.w	r3, #3
    19de:	d1fb      	bne.n	19d8 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19e0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19e2:	f013 0f02 	tst.w	r3, #2
    19e6:	d00b      	beq.n	1a00 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19e8:	6823      	ldr	r3, [r4, #0]
    19ea:	f023 0302 	bic.w	r3, r3, #2
    19ee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19f0:	69e3      	ldr	r3, [r4, #28]
    19f2:	f013 0f03 	tst.w	r3, #3
    19f6:	d1fb      	bne.n	19f0 <_spi_m_dma_init+0x54>
    19f8:	69e3      	ldr	r3, [r4, #28]
    19fa:	f013 0f02 	tst.w	r3, #2
    19fe:	d1fb      	bne.n	19f8 <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1a00:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a04:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f03 	tst.w	r3, #3
    1a0c:	d1fb      	bne.n	1a06 <_spi_m_dma_init+0x6a>
    1a0e:	69e3      	ldr	r3, [r4, #28]
    1a10:	f013 0f01 	tst.w	r3, #1
    1a14:	d1fb      	bne.n	1a0e <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1a16:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1a18:	2c00      	cmp	r4, #0
    1a1a:	d04b      	beq.n	1ab4 <_spi_m_dma_init+0x118>
    1a1c:	2e00      	cmp	r6, #0
    1a1e:	d047      	beq.n	1ab0 <_spi_m_dma_init+0x114>
    1a20:	2001      	movs	r0, #1
    1a22:	f640 120a 	movw	r2, #2314	; 0x90a
    1a26:	4931      	ldr	r1, [pc, #196]	; (1aec <_spi_m_dma_init+0x150>)
    1a28:	4b31      	ldr	r3, [pc, #196]	; (1af0 <_spi_m_dma_init+0x154>)
    1a2a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a2c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a2e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a32:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a36:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a38:	69e3      	ldr	r3, [r4, #28]
    1a3a:	f013 0f03 	tst.w	r3, #3
    1a3e:	d1fb      	bne.n	1a38 <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1a40:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a42:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a46:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a50:	69e3      	ldr	r3, [r4, #28]
    1a52:	f013 0f17 	tst.w	r3, #23
    1a56:	d1fb      	bne.n	1a50 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a58:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a5a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a5c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1a62:	4620      	mov	r0, r4
    1a64:	4b23      	ldr	r3, [pc, #140]	; (1af4 <_spi_m_dma_init+0x158>)
    1a66:	4798      	blx	r3
    1a68:	bb30      	cbnz	r0, 1ab8 <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1a6a:	4620      	mov	r0, r4
    1a6c:	4b22      	ldr	r3, [pc, #136]	; (1af8 <_spi_m_dma_init+0x15c>)
    1a6e:	4798      	blx	r3
    1a70:	4601      	mov	r1, r0
    1a72:	f105 001c 	add.w	r0, r5, #28
    1a76:	4b21      	ldr	r3, [pc, #132]	; (1afc <_spi_m_dma_init+0x160>)
    1a78:	4798      	blx	r3
	dev->resource->back                 = dev;
    1a7a:	69eb      	ldr	r3, [r5, #28]
    1a7c:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1a7e:	69eb      	ldr	r3, [r5, #28]
    1a80:	4a1f      	ldr	r2, [pc, #124]	; (1b00 <_spi_m_dma_init+0x164>)
    1a82:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1a84:	69eb      	ldr	r3, [r5, #28]
    1a86:	4a1f      	ldr	r2, [pc, #124]	; (1b04 <_spi_m_dma_init+0x168>)
    1a88:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1a8a:	69eb      	ldr	r3, [r5, #28]
    1a8c:	4a1e      	ldr	r2, [pc, #120]	; (1b08 <_spi_m_dma_init+0x16c>)
    1a8e:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1a90:	2000      	movs	r0, #0
    1a92:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a94:	2805      	cmp	r0, #5
    1a96:	d002      	beq.n	1a9e <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a98:	3301      	adds	r3, #1
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	e785      	b.n	19aa <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1a9e:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1aa2:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <_spi_m_dma_init+0x170>)
    1aa4:	441e      	add	r6, r3
    1aa6:	e783      	b.n	19b0 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1aa8:	2000      	movs	r0, #0
    1aaa:	e786      	b.n	19ba <_spi_m_dma_init+0x1e>
    1aac:	2000      	movs	r0, #0
    1aae:	e784      	b.n	19ba <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1ab0:	2000      	movs	r0, #0
    1ab2:	e7b6      	b.n	1a22 <_spi_m_dma_init+0x86>
    1ab4:	2000      	movs	r0, #0
    1ab6:	e7b4      	b.n	1a22 <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1ab8:	4620      	mov	r0, r4
    1aba:	4b15      	ldr	r3, [pc, #84]	; (1b10 <_spi_m_dma_init+0x174>)
    1abc:	4798      	blx	r3
    1abe:	4601      	mov	r1, r0
    1ac0:	f105 001c 	add.w	r0, r5, #28
    1ac4:	4b0d      	ldr	r3, [pc, #52]	; (1afc <_spi_m_dma_init+0x160>)
    1ac6:	4798      	blx	r3
		dev->resource->back                 = dev;
    1ac8:	69eb      	ldr	r3, [r5, #28]
    1aca:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1acc:	69eb      	ldr	r3, [r5, #28]
    1ace:	4a11      	ldr	r2, [pc, #68]	; (1b14 <_spi_m_dma_init+0x178>)
    1ad0:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1ad2:	69eb      	ldr	r3, [r5, #28]
    1ad4:	4a0b      	ldr	r2, [pc, #44]	; (1b04 <_spi_m_dma_init+0x168>)
    1ad6:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1ad8:	69eb      	ldr	r3, [r5, #28]
    1ada:	4a0b      	ldr	r2, [pc, #44]	; (1b08 <_spi_m_dma_init+0x16c>)
    1adc:	609a      	str	r2, [r3, #8]
    1ade:	e7c4      	b.n	1a6a <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1ae0:	f06f 000c 	mvn.w	r0, #12
}
    1ae4:	bd70      	pop	{r4, r5, r6, pc}
    1ae6:	bf00      	nop
    1ae8:	00001101 	.word	0x00001101
    1aec:	00004ea8 	.word	0x00004ea8
    1af0:	00000c25 	.word	0x00000c25
    1af4:	000011c9 	.word	0x000011c9
    1af8:	000011b1 	.word	0x000011b1
    1afc:	00000fa1 	.word	0x00000fa1
    1b00:	0000121d 	.word	0x0000121d
    1b04:	00001229 	.word	0x00001229
    1b08:	00001211 	.word	0x00001211
    1b0c:	00004e94 	.word	0x00004e94
    1b10:	000011e1 	.word	0x000011e1
    1b14:	00001205 	.word	0x00001205

00001b18 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1b18:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b1a:	4604      	mov	r4, r0
    1b1c:	b168      	cbz	r0, 1b3a <_spi_m_dma_enable+0x22>
    1b1e:	6803      	ldr	r3, [r0, #0]
    1b20:	b14b      	cbz	r3, 1b36 <_spi_m_dma_enable+0x1e>
    1b22:	2001      	movs	r0, #1
    1b24:	f640 42e1 	movw	r2, #3297	; 0xce1
    1b28:	4905      	ldr	r1, [pc, #20]	; (1b40 <_spi_m_dma_enable+0x28>)
    1b2a:	4b06      	ldr	r3, [pc, #24]	; (1b44 <_spi_m_dma_enable+0x2c>)
    1b2c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1b2e:	6820      	ldr	r0, [r4, #0]
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <_spi_m_dma_enable+0x30>)
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1b36:	2000      	movs	r0, #0
    1b38:	e7f4      	b.n	1b24 <_spi_m_dma_enable+0xc>
    1b3a:	2000      	movs	r0, #0
    1b3c:	e7f2      	b.n	1b24 <_spi_m_dma_enable+0xc>
    1b3e:	bf00      	nop
    1b40:	00004ea8 	.word	0x00004ea8
    1b44:	00000c25 	.word	0x00000c25
    1b48:	00001141 	.word	0x00001141

00001b4c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	4605      	mov	r5, r0
    1b50:	4614      	mov	r4, r2
	switch (type) {
    1b52:	2903      	cmp	r1, #3
    1b54:	d835      	bhi.n	1bc2 <_spi_m_dma_register_callback+0x76>
    1b56:	e8df f001 	tbb	[pc, r1]
    1b5a:	0d02      	.short	0x0d02
    1b5c:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1b5e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b60:	6800      	ldr	r0, [r0, #0]
    1b62:	4b18      	ldr	r3, [pc, #96]	; (1bc4 <_spi_m_dma_register_callback+0x78>)
    1b64:	4798      	blx	r3
    1b66:	1c22      	adds	r2, r4, #0
    1b68:	bf18      	it	ne
    1b6a:	2201      	movne	r2, #1
    1b6c:	2100      	movs	r1, #0
    1b6e:	4b16      	ldr	r3, [pc, #88]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b70:	4798      	blx	r3
		break;
    1b72:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1b74:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b76:	6800      	ldr	r0, [r0, #0]
    1b78:	4b14      	ldr	r3, [pc, #80]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1b7a:	4798      	blx	r3
    1b7c:	1c22      	adds	r2, r4, #0
    1b7e:	bf18      	it	ne
    1b80:	2201      	movne	r2, #1
    1b82:	2100      	movs	r1, #0
    1b84:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b86:	4798      	blx	r3
		break;
    1b88:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1b8a:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b8c:	6800      	ldr	r0, [r0, #0]
    1b8e:	4b0f      	ldr	r3, [pc, #60]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1b90:	4798      	blx	r3
    1b92:	3400      	adds	r4, #0
    1b94:	bf18      	it	ne
    1b96:	2401      	movne	r4, #1
    1b98:	4622      	mov	r2, r4
    1b9a:	2101      	movs	r1, #1
    1b9c:	4e0a      	ldr	r6, [pc, #40]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b9e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1ba0:	6828      	ldr	r0, [r5, #0]
    1ba2:	4b08      	ldr	r3, [pc, #32]	; (1bc4 <_spi_m_dma_register_callback+0x78>)
    1ba4:	4798      	blx	r3
    1ba6:	4622      	mov	r2, r4
    1ba8:	2101      	movs	r1, #1
    1baa:	47b0      	blx	r6
		break;
    1bac:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1bae:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1bb0:	6800      	ldr	r0, [r0, #0]
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1bb4:	4798      	blx	r3
    1bb6:	1c22      	adds	r2, r4, #0
    1bb8:	bf18      	it	ne
    1bba:	2201      	movne	r2, #1
    1bbc:	2102      	movs	r1, #2
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1bc0:	4798      	blx	r3
    1bc2:	bd70      	pop	{r4, r5, r6, pc}
    1bc4:	000011b1 	.word	0x000011b1
    1bc8:	00000e55 	.word	0x00000e55
    1bcc:	000011e1 	.word	0x000011e1

00001bd0 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bd4:	4605      	mov	r5, r0
    1bd6:	4689      	mov	r9, r1
    1bd8:	4690      	mov	r8, r2
    1bda:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1bdc:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1bde:	4620      	mov	r0, r4
    1be0:	4b33      	ldr	r3, [pc, #204]	; (1cb0 <_spi_m_dma_transfer+0xe0>)
    1be2:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1be4:	2300      	movs	r3, #0
    1be6:	2b00      	cmp	r3, #0
    1be8:	d03f      	beq.n	1c6a <_spi_m_dma_transfer+0x9a>
	return NULL;
    1bea:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1bee:	4620      	mov	r0, r4
    1bf0:	4b30      	ldr	r3, [pc, #192]	; (1cb4 <_spi_m_dma_transfer+0xe4>)
    1bf2:	4798      	blx	r3
    1bf4:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1bf6:	4620      	mov	r0, r4
    1bf8:	4b2f      	ldr	r3, [pc, #188]	; (1cb8 <_spi_m_dma_transfer+0xe8>)
    1bfa:	4798      	blx	r3
    1bfc:	4604      	mov	r4, r0

	if (rxbuf) {
    1bfe:	f1b8 0f00 	cmp.w	r8, #0
    1c02:	d03c      	beq.n	1c7e <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1c04:	4628      	mov	r0, r5
    1c06:	4b2d      	ldr	r3, [pc, #180]	; (1cbc <_spi_m_dma_transfer+0xec>)
    1c08:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1c0a:	6828      	ldr	r0, [r5, #0]
    1c0c:	4b2c      	ldr	r3, [pc, #176]	; (1cc0 <_spi_m_dma_transfer+0xf0>)
    1c0e:	4798      	blx	r3
    1c10:	4601      	mov	r1, r0
    1c12:	4630      	mov	r0, r6
    1c14:	4b2b      	ldr	r3, [pc, #172]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c16:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1c18:	4641      	mov	r1, r8
    1c1a:	4630      	mov	r0, r6
    1c1c:	4b2a      	ldr	r3, [pc, #168]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c1e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1c20:	4639      	mov	r1, r7
    1c22:	4630      	mov	r0, r6
    1c24:	4b29      	ldr	r3, [pc, #164]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1c26:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1c28:	2100      	movs	r1, #0
    1c2a:	4630      	mov	r0, r6
    1c2c:	4b28      	ldr	r3, [pc, #160]	; (1cd0 <_spi_m_dma_transfer+0x100>)
    1c2e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1c30:	f1b9 0f00 	cmp.w	r9, #0
    1c34:	d027      	beq.n	1c86 <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1c36:	4649      	mov	r1, r9
    1c38:	4620      	mov	r0, r4
    1c3a:	4b22      	ldr	r3, [pc, #136]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c3c:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c3e:	6828      	ldr	r0, [r5, #0]
    1c40:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <_spi_m_dma_transfer+0x104>)
    1c42:	4798      	blx	r3
    1c44:	4601      	mov	r1, r0
    1c46:	4620      	mov	r0, r4
    1c48:	4b1f      	ldr	r3, [pc, #124]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c4a:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1c4c:	2101      	movs	r1, #1
    1c4e:	4620      	mov	r0, r4
    1c50:	4b21      	ldr	r3, [pc, #132]	; (1cd8 <_spi_m_dma_transfer+0x108>)
    1c52:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c54:	4639      	mov	r1, r7
    1c56:	4620      	mov	r0, r4
    1c58:	4b1c      	ldr	r3, [pc, #112]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1c5a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1c5c:	2100      	movs	r1, #0
    1c5e:	4620      	mov	r0, r4
    1c60:	4b1b      	ldr	r3, [pc, #108]	; (1cd0 <_spi_m_dma_transfer+0x100>)
    1c62:	4798      	blx	r3

	return ERR_NONE;
}
    1c64:	2000      	movs	r0, #0
    1c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1c6a:	2805      	cmp	r0, #5
    1c6c:	d002      	beq.n	1c74 <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c6e:	3301      	adds	r3, #1
    1c70:	b2db      	uxtb	r3, r3
    1c72:	e7b8      	b.n	1be6 <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1c74:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1c78:	4b18      	ldr	r3, [pc, #96]	; (1cdc <_spi_m_dma_transfer+0x10c>)
    1c7a:	449a      	add	sl, r3
    1c7c:	e7b7      	b.n	1bee <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1c7e:	4628      	mov	r0, r5
    1c80:	4b17      	ldr	r3, [pc, #92]	; (1ce0 <_spi_m_dma_transfer+0x110>)
    1c82:	4798      	blx	r3
    1c84:	e7d4      	b.n	1c30 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1c86:	f10a 010e 	add.w	r1, sl, #14
    1c8a:	4620      	mov	r0, r4
    1c8c:	4b0d      	ldr	r3, [pc, #52]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c8e:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c90:	6828      	ldr	r0, [r5, #0]
    1c92:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <_spi_m_dma_transfer+0x104>)
    1c94:	4798      	blx	r3
    1c96:	4601      	mov	r1, r0
    1c98:	4620      	mov	r0, r4
    1c9a:	4b0b      	ldr	r3, [pc, #44]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c9c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1c9e:	2100      	movs	r1, #0
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b0d      	ldr	r3, [pc, #52]	; (1cd8 <_spi_m_dma_transfer+0x108>)
    1ca4:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1ca6:	4639      	mov	r1, r7
    1ca8:	4620      	mov	r0, r4
    1caa:	4b08      	ldr	r3, [pc, #32]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1cac:	4798      	blx	r3
    1cae:	e7d5      	b.n	1c5c <_spi_m_dma_transfer+0x8c>
    1cb0:	00001101 	.word	0x00001101
    1cb4:	000011e1 	.word	0x000011e1
    1cb8:	000011b1 	.word	0x000011b1
    1cbc:	000015dd 	.word	0x000015dd
    1cc0:	000011a7 	.word	0x000011a7
    1cc4:	00000ee1 	.word	0x00000ee1
    1cc8:	00000ed1 	.word	0x00000ed1
    1ccc:	00000f0d 	.word	0x00000f0d
    1cd0:	00000f65 	.word	0x00000f65
    1cd4:	000011ab 	.word	0x000011ab
    1cd8:	00000ef1 	.word	0x00000ef1
    1cdc:	00004e94 	.word	0x00004e94
    1ce0:	00001611 	.word	0x00001611

00001ce4 <TIMER_1_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1ce4:	4b2f      	ldr	r3, [pc, #188]	; (1da4 <TIMER_1_init+0xc0>)
    1ce6:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tc_is_syncing(TC3, TC_SYNCBUSY_SWRST)) {
    1ce8:	f013 0f01 	tst.w	r3, #1
    1cec:	d120      	bne.n	1d30 <TIMER_1_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1cee:	4b2d      	ldr	r3, [pc, #180]	; (1da4 <TIMER_1_init+0xc0>)
    1cf0:	691b      	ldr	r3, [r3, #16]
    1cf2:	f013 0f03 	tst.w	r3, #3
    1cf6:	d1fa      	bne.n	1cee <TIMER_1_init+0xa>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1cf8:	4b2a      	ldr	r3, [pc, #168]	; (1da4 <TIMER_1_init+0xc0>)
    1cfa:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    1cfc:	f013 0f02 	tst.w	r3, #2
    1d00:	d00e      	beq.n	1d20 <TIMER_1_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1d02:	4a28      	ldr	r2, [pc, #160]	; (1da4 <TIMER_1_init+0xc0>)
    1d04:	6813      	ldr	r3, [r2, #0]
    1d06:	f023 0302 	bic.w	r3, r3, #2
    1d0a:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d0c:	4b25      	ldr	r3, [pc, #148]	; (1da4 <TIMER_1_init+0xc0>)
    1d0e:	691b      	ldr	r3, [r3, #16]
    1d10:	f013 0f03 	tst.w	r3, #3
    1d14:	d1fa      	bne.n	1d0c <TIMER_1_init+0x28>
    1d16:	4b23      	ldr	r3, [pc, #140]	; (1da4 <TIMER_1_init+0xc0>)
    1d18:	691b      	ldr	r3, [r3, #16]
    1d1a:	f013 0f02 	tst.w	r3, #2
    1d1e:	d1fa      	bne.n	1d16 <TIMER_1_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d20:	2201      	movs	r2, #1
    1d22:	4b20      	ldr	r3, [pc, #128]	; (1da4 <TIMER_1_init+0xc0>)
    1d24:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d26:	4b1f      	ldr	r3, [pc, #124]	; (1da4 <TIMER_1_init+0xc0>)
    1d28:	691b      	ldr	r3, [r3, #16]
    1d2a:	f013 0f03 	tst.w	r3, #3
    1d2e:	d1fa      	bne.n	1d26 <TIMER_1_init+0x42>
    1d30:	4b1c      	ldr	r3, [pc, #112]	; (1da4 <TIMER_1_init+0xc0>)
    1d32:	691b      	ldr	r3, [r3, #16]
    1d34:	f013 0f01 	tst.w	r3, #1
    1d38:	d1fa      	bne.n	1d30 <TIMER_1_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d3a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1d3e:	4b19      	ldr	r3, [pc, #100]	; (1da4 <TIMER_1_init+0xc0>)
    1d40:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d42:	4b18      	ldr	r3, [pc, #96]	; (1da4 <TIMER_1_init+0xc0>)
    1d44:	691b      	ldr	r3, [r3, #16]
    1d46:	f013 0f03 	tst.w	r3, #3
    1d4a:	d1fa      	bne.n	1d42 <TIMER_1_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1d4c:	4b15      	ldr	r3, [pc, #84]	; (1da4 <TIMER_1_init+0xc0>)
    1d4e:	2200      	movs	r2, #0
    1d50:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1d52:	22ff      	movs	r2, #255	; 0xff
    1d54:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1d56:	2201      	movs	r2, #1
    1d58:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d5a:	f643 5208 	movw	r2, #15624	; 0x3d08
    1d5e:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d60:	4b10      	ldr	r3, [pc, #64]	; (1da4 <TIMER_1_init+0xc0>)
    1d62:	691b      	ldr	r3, [r3, #16]
    1d64:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d68:	d1fa      	bne.n	1d60 <TIMER_1_init+0x7c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d6a:	f641 0269 	movw	r2, #6249	; 0x1869
    1d6e:	4b0d      	ldr	r3, [pc, #52]	; (1da4 <TIMER_1_init+0xc0>)
    1d70:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d72:	4b0c      	ldr	r3, [pc, #48]	; (1da4 <TIMER_1_init+0xc0>)
    1d74:	691b      	ldr	r3, [r3, #16]
    1d76:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d7a:	d1fa      	bne.n	1d72 <TIMER_1_init+0x8e>
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1d7c:	4b09      	ldr	r3, [pc, #36]	; (1da4 <TIMER_1_init+0xc0>)
    1d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d82:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1d84:	2221      	movs	r2, #33	; 0x21
    1d86:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1d88:	22de      	movs	r2, #222	; 0xde
    1d8a:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d8c:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1d8e:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1d92:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d94:	4b03      	ldr	r3, [pc, #12]	; (1da4 <TIMER_1_init+0xc0>)
    1d96:	691b      	ldr	r3, [r3, #16]
    1d98:	f013 0f03 	tst.w	r3, #3
    1d9c:	d1fa      	bne.n	1d94 <TIMER_1_init+0xb0>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1d9e:	2000      	movs	r0, #0
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop
    1da4:	4101c000 	.word	0x4101c000

00001da8 <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1da8:	4b29      	ldr	r3, [pc, #164]	; (1e50 <TIMER_0_init+0xa8>)
    1daa:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    1dac:	f013 0f01 	tst.w	r3, #1
    1db0:	d120      	bne.n	1df4 <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1db2:	4b27      	ldr	r3, [pc, #156]	; (1e50 <TIMER_0_init+0xa8>)
    1db4:	691b      	ldr	r3, [r3, #16]
    1db6:	f013 0f03 	tst.w	r3, #3
    1dba:	d1fa      	bne.n	1db2 <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1dbc:	4b24      	ldr	r3, [pc, #144]	; (1e50 <TIMER_0_init+0xa8>)
    1dbe:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    1dc0:	f013 0f02 	tst.w	r3, #2
    1dc4:	d00e      	beq.n	1de4 <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1dc6:	4a22      	ldr	r2, [pc, #136]	; (1e50 <TIMER_0_init+0xa8>)
    1dc8:	6813      	ldr	r3, [r2, #0]
    1dca:	f023 0302 	bic.w	r3, r3, #2
    1dce:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dd0:	4b1f      	ldr	r3, [pc, #124]	; (1e50 <TIMER_0_init+0xa8>)
    1dd2:	691b      	ldr	r3, [r3, #16]
    1dd4:	f013 0f03 	tst.w	r3, #3
    1dd8:	d1fa      	bne.n	1dd0 <TIMER_0_init+0x28>
    1dda:	4b1d      	ldr	r3, [pc, #116]	; (1e50 <TIMER_0_init+0xa8>)
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	f013 0f02 	tst.w	r3, #2
    1de2:	d1fa      	bne.n	1dda <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1de4:	2201      	movs	r2, #1
    1de6:	4b1a      	ldr	r3, [pc, #104]	; (1e50 <TIMER_0_init+0xa8>)
    1de8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dea:	4b19      	ldr	r3, [pc, #100]	; (1e50 <TIMER_0_init+0xa8>)
    1dec:	691b      	ldr	r3, [r3, #16]
    1dee:	f013 0f03 	tst.w	r3, #3
    1df2:	d1fa      	bne.n	1dea <TIMER_0_init+0x42>
    1df4:	4b16      	ldr	r3, [pc, #88]	; (1e50 <TIMER_0_init+0xa8>)
    1df6:	691b      	ldr	r3, [r3, #16]
    1df8:	f013 0f01 	tst.w	r3, #1
    1dfc:	d1fa      	bne.n	1df4 <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1e02:	4b13      	ldr	r3, [pc, #76]	; (1e50 <TIMER_0_init+0xa8>)
    1e04:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e06:	4b12      	ldr	r3, [pc, #72]	; (1e50 <TIMER_0_init+0xa8>)
    1e08:	691b      	ldr	r3, [r3, #16]
    1e0a:	f013 0f03 	tst.w	r3, #3
    1e0e:	d1fa      	bne.n	1e06 <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <TIMER_0_init+0xa8>)
    1e12:	2200      	movs	r2, #0
    1e14:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1e16:	22ff      	movs	r2, #255	; 0xff
    1e18:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e1a:	2201      	movs	r2, #1
    1e1c:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e1e:	f641 0269 	movw	r2, #6249	; 0x1869
    1e22:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e24:	4b0a      	ldr	r3, [pc, #40]	; (1e50 <TIMER_0_init+0xa8>)
    1e26:	691b      	ldr	r3, [r3, #16]
    1e28:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e2c:	d1fa      	bne.n	1e24 <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1e2e:	4b08      	ldr	r3, [pc, #32]	; (1e50 <TIMER_0_init+0xa8>)
    1e30:	2201      	movs	r2, #1
    1e32:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1e34:	22fe      	movs	r2, #254	; 0xfe
    1e36:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e38:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1e3a:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1e3e:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <TIMER_0_init+0xa8>)
    1e42:	691b      	ldr	r3, [r3, #16]
    1e44:	f013 0f03 	tst.w	r3, #3
    1e48:	d1fa      	bne.n	1e40 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e4a:	2000      	movs	r0, #0
    1e4c:	4770      	bx	lr
    1e4e:	bf00      	nop
    1e50:	43001800 	.word	0x43001800

00001e54 <SensorRowUpdate>:
	//timer_start(&TIMER_0);
};
*/

void SensorRowUpdate(uint8_t row_select, uint8_t output_mode_select)
{
    1e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e58:	460d      	mov	r5, r1
	switch(row_select){
    1e5a:	2802      	cmp	r0, #2
    1e5c:	d05b      	beq.n	1f16 <SensorRowUpdate+0xc2>
    1e5e:	2803      	cmp	r0, #3
    1e60:	f000 80ae 	beq.w	1fc0 <SensorRowUpdate+0x16c>
    1e64:	2801      	cmp	r0, #1
    1e66:	d001      	beq.n	1e6c <SensorRowUpdate+0x18>
    1e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		case 1: ;
			
			update_struct_values(&sensorRow_Values_Left, &sensor7, &sensor4, &sensor1);
    1e6c:	4c7e      	ldr	r4, [pc, #504]	; (2068 <SensorRowUpdate+0x214>)
    1e6e:	4b7f      	ldr	r3, [pc, #508]	; (206c <SensorRowUpdate+0x218>)
    1e70:	4a7f      	ldr	r2, [pc, #508]	; (2070 <SensorRowUpdate+0x21c>)
    1e72:	4980      	ldr	r1, [pc, #512]	; (2074 <SensorRowUpdate+0x220>)
    1e74:	4620      	mov	r0, r4
    1e76:	4e80      	ldr	r6, [pc, #512]	; (2078 <SensorRowUpdate+0x224>)
    1e78:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Left);
    1e7a:	4620      	mov	r0, r4
    1e7c:	4b7f      	ldr	r3, [pc, #508]	; (207c <SensorRowUpdate+0x228>)
    1e7e:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Left, &neuron_pair_1_top, &neuron_pair_1_middle, &neuron_pair_1_bottom);
    1e80:	f8df 824c 	ldr.w	r8, [pc, #588]	; 20d0 <SensorRowUpdate+0x27c>
    1e84:	4f7e      	ldr	r7, [pc, #504]	; (2080 <SensorRowUpdate+0x22c>)
    1e86:	4e7f      	ldr	r6, [pc, #508]	; (2084 <SensorRowUpdate+0x230>)
    1e88:	4643      	mov	r3, r8
    1e8a:	463a      	mov	r2, r7
    1e8c:	4631      	mov	r1, r6
    1e8e:	4620      	mov	r0, r4
    1e90:	f8df 9240 	ldr.w	r9, [pc, #576]	; 20d4 <SensorRowUpdate+0x280>
    1e94:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Left, &neuron_pair_1_top, &neuron_pair_1_middle, &neuron_pair_1_bottom);
    1e96:	4643      	mov	r3, r8
    1e98:	463a      	mov	r2, r7
    1e9a:	4631      	mov	r1, r6
    1e9c:	487a      	ldr	r0, [pc, #488]	; (2088 <SensorRowUpdate+0x234>)
    1e9e:	4e7b      	ldr	r6, [pc, #492]	; (208c <SensorRowUpdate+0x238>)
    1ea0:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Left.b_x_top; //data7,8,9
    1ea2:	4b7b      	ldr	r3, [pc, #492]	; (2090 <SensorRowUpdate+0x23c>)
    1ea4:	681a      	ldr	r2, [r3, #0]
    1ea6:	6821      	ldr	r1, [r4, #0]
    1ea8:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Left.b_y_top;
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	68e2      	ldr	r2, [r4, #12]
    1eae:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Left.b_z_top;
    1eb0:	69a2      	ldr	r2, [r4, #24]
    1eb2:	609a      	str	r2, [r3, #8]
				
			BLDC_OUT->hall_middle_x = sensorRow_Values_Left.b_x_middle; //data4,5,6
    1eb4:	6862      	ldr	r2, [r4, #4]
    1eb6:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Left.b_y_middle;
    1eb8:	6922      	ldr	r2, [r4, #16]
    1eba:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Left.b_z_middle;
    1ebc:	69e2      	ldr	r2, [r4, #28]
    1ebe:	61da      	str	r2, [r3, #28]

				
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Left.b_x_bottom; //data1,2,3
    1ec0:	68a2      	ldr	r2, [r4, #8]
    1ec2:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Left.b_y_bottom;
    1ec4:	6962      	ldr	r2, [r4, #20]
    1ec6:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Left.b_z_bottom;
    1ec8:	6a22      	ldr	r2, [r4, #32]
    1eca:	635a      	str	r2, [r3, #52]	; 0x34
			BLDC_OUT->hall_top_x = sensor7.data.x; //data7,8,9
			BLDC_OUT->hall_top_y = sensor7.data.y;
			BLDC_OUT->hall_top_z = sensor7.data.z;
			*/
			
			switch(output_mode_select){
    1ecc:	2d01      	cmp	r5, #1
    1ece:	d006      	beq.n	1ede <SensorRowUpdate+0x8a>
    1ed0:	2d02      	cmp	r5, #2
    1ed2:	d012      	beq.n	1efa <SensorRowUpdate+0xa6>
			}
			
			//mag_to_force(&sensorRow_Values_1, &sensor1, &sensor4, &sensor7);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 1;
    1ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1ed8:	621a      	str	r2, [r3, #32]
			break;
    1eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					BLDC_OUT->neuron_top_normal = sensorRow_Values_Left.force_z_top;
    1ede:	4a62      	ldr	r2, [pc, #392]	; (2068 <SensorRowUpdate+0x214>)
    1ee0:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1ee2:	60d9      	str	r1, [r3, #12]
					BLDC_OUT->neuron_top_shear = sensorRow_Values_Left.force_r_top;
    1ee4:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1ee6:	6119      	str	r1, [r3, #16]
					BLDC_OUT->neuron_middle_normal = sensorRow_Values_Left.force_z_middle;
    1ee8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1eea:	6259      	str	r1, [r3, #36]	; 0x24
					BLDC_OUT->neuron_middle_shear = sensorRow_Values_Left.force_r_middle;
    1eec:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1eee:	6299      	str	r1, [r3, #40]	; 0x28
					BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Left.force_z_bottom;
    1ef0:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1ef2:	6399      	str	r1, [r3, #56]	; 0x38
					BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Left.force_r_bottom;
    1ef4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1ef6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1ef8:	e7ec      	b.n	1ed4 <SensorRowUpdate+0x80>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Left.neuron_top_normal;
    1efa:	4a63      	ldr	r2, [pc, #396]	; (2088 <SensorRowUpdate+0x234>)
    1efc:	6811      	ldr	r1, [r2, #0]
    1efe:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Left.neuron_top_shear;
    1f00:	6851      	ldr	r1, [r2, #4]
    1f02:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Left.neuron_middle_normal;
    1f04:	6891      	ldr	r1, [r2, #8]
    1f06:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Left.neuron_middle_shear;
    1f08:	68d1      	ldr	r1, [r2, #12]
    1f0a:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Left.neuron_bottom_normal;
    1f0c:	6911      	ldr	r1, [r2, #16]
    1f0e:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Left.neuron_bottom_shear;
    1f10:	6952      	ldr	r2, [r2, #20]
    1f12:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1f14:	e7de      	b.n	1ed4 <SensorRowUpdate+0x80>
		
		case 2: ;
			update_struct_values(&sensorRow_Values_Middle, &sensor8, &sensor5, &sensor2);
    1f16:	4c5f      	ldr	r4, [pc, #380]	; (2094 <SensorRowUpdate+0x240>)
    1f18:	4b5f      	ldr	r3, [pc, #380]	; (2098 <SensorRowUpdate+0x244>)
    1f1a:	4a60      	ldr	r2, [pc, #384]	; (209c <SensorRowUpdate+0x248>)
    1f1c:	4960      	ldr	r1, [pc, #384]	; (20a0 <SensorRowUpdate+0x24c>)
    1f1e:	4620      	mov	r0, r4
    1f20:	4e55      	ldr	r6, [pc, #340]	; (2078 <SensorRowUpdate+0x224>)
    1f22:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Middle);
    1f24:	4620      	mov	r0, r4
    1f26:	4b55      	ldr	r3, [pc, #340]	; (207c <SensorRowUpdate+0x228>)
    1f28:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Middle, &neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    1f2a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 20d8 <SensorRowUpdate+0x284>
    1f2e:	4f5d      	ldr	r7, [pc, #372]	; (20a4 <SensorRowUpdate+0x250>)
    1f30:	4e5d      	ldr	r6, [pc, #372]	; (20a8 <SensorRowUpdate+0x254>)
    1f32:	4643      	mov	r3, r8
    1f34:	463a      	mov	r2, r7
    1f36:	4631      	mov	r1, r6
    1f38:	4620      	mov	r0, r4
    1f3a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 20d4 <SensorRowUpdate+0x280>
    1f3e:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Middle, &neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    1f40:	4643      	mov	r3, r8
    1f42:	463a      	mov	r2, r7
    1f44:	4631      	mov	r1, r6
    1f46:	4859      	ldr	r0, [pc, #356]	; (20ac <SensorRowUpdate+0x258>)
    1f48:	4e50      	ldr	r6, [pc, #320]	; (208c <SensorRowUpdate+0x238>)
    1f4a:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Middle.b_x_top; //data7,8,9
    1f4c:	4b50      	ldr	r3, [pc, #320]	; (2090 <SensorRowUpdate+0x23c>)
    1f4e:	681a      	ldr	r2, [r3, #0]
    1f50:	6821      	ldr	r1, [r4, #0]
    1f52:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Middle.b_y_top;
    1f54:	681b      	ldr	r3, [r3, #0]
    1f56:	68e2      	ldr	r2, [r4, #12]
    1f58:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Middle.b_z_top;
    1f5a:	69a2      	ldr	r2, [r4, #24]
    1f5c:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Middle.b_x_middle; //data4,5,6
    1f5e:	6862      	ldr	r2, [r4, #4]
    1f60:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Middle.b_y_middle;
    1f62:	6922      	ldr	r2, [r4, #16]
    1f64:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Middle.b_z_middle;
    1f66:	69e2      	ldr	r2, [r4, #28]
    1f68:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Middle.b_x_bottom; //data1,2,3
    1f6a:	68a2      	ldr	r2, [r4, #8]
    1f6c:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Middle.b_y_bottom;
    1f6e:	6962      	ldr	r2, [r4, #20]
    1f70:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Middle.b_z_bottom;
    1f72:	6a22      	ldr	r2, [r4, #32]
    1f74:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    1f76:	2d01      	cmp	r5, #1
    1f78:	d006      	beq.n	1f88 <SensorRowUpdate+0x134>
    1f7a:	2d02      	cmp	r5, #2
    1f7c:	d012      	beq.n	1fa4 <SensorRowUpdate+0x150>
			BLDC_OUT->hall_top_z = sensor8.data.z;
		*/
			//mag_to_force(&sensorRow_Values_1, &sensor2, &sensor5, &sensor8);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 2;
    1f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1f82:	621a      	str	r2, [r3, #32]
			break;
    1f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Middle.force_z_top;
    1f88:	4a42      	ldr	r2, [pc, #264]	; (2094 <SensorRowUpdate+0x240>)
    1f8a:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1f8c:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Middle.force_r_top;
    1f8e:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1f90:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Middle.force_z_middle;
    1f92:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1f94:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Middle.force_r_middle;
    1f96:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1f98:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Middle.force_z_bottom;
    1f9a:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1f9c:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Middle.force_r_bottom;
    1f9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1fa0:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fa2:	e7ec      	b.n	1f7e <SensorRowUpdate+0x12a>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Middle.neuron_top_normal;
    1fa4:	4a41      	ldr	r2, [pc, #260]	; (20ac <SensorRowUpdate+0x258>)
    1fa6:	6811      	ldr	r1, [r2, #0]
    1fa8:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Middle.neuron_top_shear;
    1faa:	6851      	ldr	r1, [r2, #4]
    1fac:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Middle.neuron_middle_normal;
    1fae:	6891      	ldr	r1, [r2, #8]
    1fb0:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Middle.neuron_middle_shear;
    1fb2:	68d1      	ldr	r1, [r2, #12]
    1fb4:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Middle.neuron_bottom_normal;
    1fb6:	6911      	ldr	r1, [r2, #16]
    1fb8:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Middle.neuron_bottom_shear;
    1fba:	6952      	ldr	r2, [r2, #20]
    1fbc:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fbe:	e7de      	b.n	1f7e <SensorRowUpdate+0x12a>
			
		case 3: ;
			update_struct_values(&sensorRow_Values_Right, &sensor9, &sensor6, &sensor3);
    1fc0:	4c3b      	ldr	r4, [pc, #236]	; (20b0 <SensorRowUpdate+0x25c>)
    1fc2:	4b3c      	ldr	r3, [pc, #240]	; (20b4 <SensorRowUpdate+0x260>)
    1fc4:	4a3c      	ldr	r2, [pc, #240]	; (20b8 <SensorRowUpdate+0x264>)
    1fc6:	493d      	ldr	r1, [pc, #244]	; (20bc <SensorRowUpdate+0x268>)
    1fc8:	4620      	mov	r0, r4
    1fca:	4e2b      	ldr	r6, [pc, #172]	; (2078 <SensorRowUpdate+0x224>)
    1fcc:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Right);
    1fce:	4620      	mov	r0, r4
    1fd0:	4b2a      	ldr	r3, [pc, #168]	; (207c <SensorRowUpdate+0x228>)
    1fd2:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Right, &neuron_pair_3_top, &neuron_pair_3_middle, &neuron_pair_3_bottom);
    1fd4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 20dc <SensorRowUpdate+0x288>
    1fd8:	4f39      	ldr	r7, [pc, #228]	; (20c0 <SensorRowUpdate+0x26c>)
    1fda:	4e3a      	ldr	r6, [pc, #232]	; (20c4 <SensorRowUpdate+0x270>)
    1fdc:	4643      	mov	r3, r8
    1fde:	463a      	mov	r2, r7
    1fe0:	4631      	mov	r1, r6
    1fe2:	4620      	mov	r0, r4
    1fe4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 20d4 <SensorRowUpdate+0x280>
    1fe8:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Right, &neuron_pair_3_top, &neuron_pair_3_middle, &neuron_pair_3_bottom);
    1fea:	4643      	mov	r3, r8
    1fec:	463a      	mov	r2, r7
    1fee:	4631      	mov	r1, r6
    1ff0:	4835      	ldr	r0, [pc, #212]	; (20c8 <SensorRowUpdate+0x274>)
    1ff2:	4e26      	ldr	r6, [pc, #152]	; (208c <SensorRowUpdate+0x238>)
    1ff4:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Right.b_x_top; //data7,8,9
    1ff6:	4b26      	ldr	r3, [pc, #152]	; (2090 <SensorRowUpdate+0x23c>)
    1ff8:	681a      	ldr	r2, [r3, #0]
    1ffa:	6821      	ldr	r1, [r4, #0]
    1ffc:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Right.b_y_top;
    1ffe:	681b      	ldr	r3, [r3, #0]
    2000:	68e2      	ldr	r2, [r4, #12]
    2002:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Right.b_z_top;
    2004:	69a2      	ldr	r2, [r4, #24]
    2006:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Right.b_x_middle; //data4,5,6
    2008:	6862      	ldr	r2, [r4, #4]
    200a:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Right.b_y_middle;
    200c:	6922      	ldr	r2, [r4, #16]
    200e:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Right.b_z_middle;
    2010:	69e2      	ldr	r2, [r4, #28]
    2012:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Right.b_x_bottom; //data1,2,3
    2014:	68a2      	ldr	r2, [r4, #8]
    2016:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Right.b_y_bottom;
    2018:	6962      	ldr	r2, [r4, #20]
    201a:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Right.b_z_bottom;
    201c:	6a22      	ldr	r2, [r4, #32]
    201e:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    2020:	2d01      	cmp	r5, #1
    2022:	d004      	beq.n	202e <SensorRowUpdate+0x1da>
    2024:	2d02      	cmp	r5, #2
    2026:	d010      	beq.n	204a <SensorRowUpdate+0x1f6>
			BLDC_OUT->hall_top_z = sensor9.data.z;
			*/
			//mag_to_force(&sensorRow_Values_1, &sensor3, &sensor6, &sensor9);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 3;
    2028:	4a28      	ldr	r2, [pc, #160]	; (20cc <SensorRowUpdate+0x278>)
    202a:	621a      	str	r2, [r3, #32]
			break;
		}
};
    202c:	e71c      	b.n	1e68 <SensorRowUpdate+0x14>
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Right.force_z_top;
    202e:	4a20      	ldr	r2, [pc, #128]	; (20b0 <SensorRowUpdate+0x25c>)
    2030:	6c91      	ldr	r1, [r2, #72]	; 0x48
    2032:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Right.force_r_top;
    2034:	6d51      	ldr	r1, [r2, #84]	; 0x54
    2036:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Right.force_z_middle;
    2038:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    203a:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Right.force_r_middle;
    203c:	6d91      	ldr	r1, [r2, #88]	; 0x58
    203e:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Right.force_z_bottom;
    2040:	6d11      	ldr	r1, [r2, #80]	; 0x50
    2042:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Right.force_r_bottom;
    2044:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    2046:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    2048:	e7ee      	b.n	2028 <SensorRowUpdate+0x1d4>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Right.neuron_top_normal;
    204a:	4a1f      	ldr	r2, [pc, #124]	; (20c8 <SensorRowUpdate+0x274>)
    204c:	6811      	ldr	r1, [r2, #0]
    204e:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Right.neuron_top_shear;
    2050:	6851      	ldr	r1, [r2, #4]
    2052:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Right.neuron_middle_normal;
    2054:	6891      	ldr	r1, [r2, #8]
    2056:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Right.neuron_middle_shear;
    2058:	68d1      	ldr	r1, [r2, #12]
    205a:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Right.neuron_bottom_normal;
    205c:	6911      	ldr	r1, [r2, #16]
    205e:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Right.neuron_bottom_shear;
    2060:	6952      	ldr	r2, [r2, #20]
    2062:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    2064:	e7e0      	b.n	2028 <SensorRowUpdate+0x1d4>
    2066:	bf00      	nop
    2068:	20001314 	.word	0x20001314
    206c:	20001040 	.word	0x20001040
    2070:	20000fe8 	.word	0x20000fe8
    2074:	20000bc8 	.word	0x20000bc8
    2078:	000030e9 	.word	0x000030e9
    207c:	00003191 	.word	0x00003191
    2080:	20001224 	.word	0x20001224
    2084:	20000d6c 	.word	0x20000d6c
    2088:	20000d50 	.word	0x20000d50
    208c:	000040b9 	.word	0x000040b9
    2090:	20000074 	.word	0x20000074
    2094:	20000b68 	.word	0x20000b68
    2098:	200012bc 	.word	0x200012bc
    209c:	20000ef8 	.word	0x20000ef8
    20a0:	200011cc 	.word	0x200011cc
    20a4:	20000980 	.word	0x20000980
    20a8:	20000f50 	.word	0x20000f50
    20ac:	20000c28 	.word	0x20000c28
    20b0:	20000c40 	.word	0x20000c40
    20b4:	20000cf8 	.word	0x20000cf8
    20b8:	20000ca0 	.word	0x20000ca0
    20bc:	20000e9c 	.word	0x20000e9c
    20c0:	2000109c 	.word	0x2000109c
    20c4:	20000a34 	.word	0x20000a34
    20c8:	20000a18 	.word	0x20000a18
    20cc:	40400000 	.word	0x40400000
    20d0:	20000e04 	.word	0x20000e04
    20d4:	00004001 	.word	0x00004001
    20d8:	20001134 	.word	0x20001134
    20dc:	20000ad0 	.word	0x20000ad0

000020e0 <main>:


int main(void)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b086      	sub	sp, #24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    20e4:	4b40      	ldr	r3, [pc, #256]	; (21e8 <main+0x108>)
    20e6:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    20e8:	4b40      	ldr	r3, [pc, #256]	; (21ec <main+0x10c>)
    20ea:	4798      	blx	r3
	
	//Initialize I2C communication
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    20ec:	4e40      	ldr	r6, [pc, #256]	; (21f0 <main+0x110>)
    20ee:	4c41      	ldr	r4, [pc, #260]	; (21f4 <main+0x114>)
    20f0:	4631      	mov	r1, r6
    20f2:	4620      	mov	r0, r4
    20f4:	4b40      	ldr	r3, [pc, #256]	; (21f8 <main+0x118>)
    20f6:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    20f8:	4620      	mov	r0, r4
    20fa:	4b40      	ldr	r3, [pc, #256]	; (21fc <main+0x11c>)
    20fc:	4798      	blx	r3
    20fe:	4c40      	ldr	r4, [pc, #256]	; (2200 <main+0x120>)
    2100:	2540      	movs	r5, #64	; 0x40
    2102:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2104:	61a5      	str	r5, [r4, #24]
	// for testing purposes
	gpio_set_pin_level(TRG,false);
	gpio_set_pin_level(TRG,true);
	
	// Initialize Sensor Array
	SensorArray_Init(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    2106:	6833      	ldr	r3, [r6, #0]
    2108:	9305      	str	r3, [sp, #20]
    210a:	4e3e      	ldr	r6, [pc, #248]	; (2204 <main+0x124>)
    210c:	9604      	str	r6, [sp, #16]
    210e:	4b3e      	ldr	r3, [pc, #248]	; (2208 <main+0x128>)
    2110:	9303      	str	r3, [sp, #12]
    2112:	4b3e      	ldr	r3, [pc, #248]	; (220c <main+0x12c>)
    2114:	9302      	str	r3, [sp, #8]
    2116:	4b3e      	ldr	r3, [pc, #248]	; (2210 <main+0x130>)
    2118:	9301      	str	r3, [sp, #4]
    211a:	4b3e      	ldr	r3, [pc, #248]	; (2214 <main+0x134>)
    211c:	9300      	str	r3, [sp, #0]
    211e:	4b3e      	ldr	r3, [pc, #248]	; (2218 <main+0x138>)
    2120:	4a3e      	ldr	r2, [pc, #248]	; (221c <main+0x13c>)
    2122:	493f      	ldr	r1, [pc, #252]	; (2220 <main+0x140>)
    2124:	483f      	ldr	r0, [pc, #252]	; (2224 <main+0x144>)
    2126:	4f40      	ldr	r7, [pc, #256]	; (2228 <main+0x148>)
    2128:	47b8      	blx	r7
	neuron_init_row(&neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    212a:	4a40      	ldr	r2, [pc, #256]	; (222c <main+0x14c>)
    212c:	4940      	ldr	r1, [pc, #256]	; (2230 <main+0x150>)
    212e:	4841      	ldr	r0, [pc, #260]	; (2234 <main+0x154>)
    2130:	4b41      	ldr	r3, [pc, #260]	; (2238 <main+0x158>)
    2132:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2134:	6165      	str	r5, [r4, #20]

	gpio_set_pin_level(TRG,false);
	
	//Initialize ReadoutVariables
	new_data = false;
    2136:	2300      	movs	r3, #0
    2138:	4a40      	ldr	r2, [pc, #256]	; (223c <main+0x15c>)
    213a:	7013      	strb	r3, [r2, #0]
	triggered = false;
    213c:	4a40      	ldr	r2, [pc, #256]	; (2240 <main+0x160>)
    213e:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    2140:	4a40      	ldr	r2, [pc, #256]	; (2244 <main+0x164>)
    2142:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&sensor9);
    2144:	4630      	mov	r0, r6
    2146:	4b40      	ldr	r3, [pc, #256]	; (2248 <main+0x168>)
    2148:	4798      	blx	r3
    214a:	4b40      	ldr	r3, [pc, #256]	; (224c <main+0x16c>)
    214c:	8018      	strh	r0, [r3, #0]
    214e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2152:	4b3f      	ldr	r3, [pc, #252]	; (2250 <main+0x170>)
    2154:	60da      	str	r2, [r3, #12]
	//TIMER_init(wait_time);
	NVIC_EnableIRQ(TC3_IRQn);
	selected_row = 1; //1 = left, 2 = middle, 3 = right
    2156:	2301      	movs	r3, #1
    2158:	4a3e      	ldr	r2, [pc, #248]	; (2254 <main+0x174>)
    215a:	7013      	strb	r3, [r2, #0]
	selected_output_mode = 1; //1 = Force, 2 = Neural Spikes
    215c:	4a3e      	ldr	r2, [pc, #248]	; (2258 <main+0x178>)
    215e:	7013      	strb	r3, [r2, #0]
	/* Replace with your application code */
	while (1) 
	{
		
		if (triggered == false)	
    2160:	4b37      	ldr	r3, [pc, #220]	; (2240 <main+0x160>)
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	b1e3      	cbz	r3, 21a0 <main+0xc0>
	//		timer_start(&TIMER_1);
			triggered = true;
			data_readout = false;
		}
		
		if(new_data == true && data_readout == false)
    2166:	4b35      	ldr	r3, [pc, #212]	; (223c <main+0x15c>)
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	b113      	cbz	r3, 2172 <main+0x92>
    216c:	4b35      	ldr	r3, [pc, #212]	; (2244 <main+0x164>)
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	b303      	cbz	r3, 21b4 <main+0xd4>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
			new_data = false; 
			data_readout = true;
		}
		
		if(data_readout == true && row_change_possible == true)
    2172:	4b34      	ldr	r3, [pc, #208]	; (2244 <main+0x164>)
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d0f2      	beq.n	2160 <main+0x80>
    217a:	4b38      	ldr	r3, [pc, #224]	; (225c <main+0x17c>)
    217c:	781b      	ldrb	r3, [r3, #0]
    217e:	2b00      	cmp	r3, #0
    2180:	d0ee      	beq.n	2160 <main+0x80>
		{
				SensorRowUpdate(selected_row, selected_output_mode); //must be modified later to allow readout of whole array - for loop where every row is selected once
    2182:	4c34      	ldr	r4, [pc, #208]	; (2254 <main+0x174>)
    2184:	4b34      	ldr	r3, [pc, #208]	; (2258 <main+0x178>)
    2186:	7819      	ldrb	r1, [r3, #0]
    2188:	7820      	ldrb	r0, [r4, #0]
    218a:	4b35      	ldr	r3, [pc, #212]	; (2260 <main+0x180>)
    218c:	4798      	blx	r3
				selected_row++;
    218e:	7823      	ldrb	r3, [r4, #0]
    2190:	3301      	adds	r3, #1
    2192:	b2db      	uxtb	r3, r3
    2194:	7023      	strb	r3, [r4, #0]
				if (selected_row == 4)
    2196:	2b04      	cmp	r3, #4
    2198:	d1e2      	bne.n	2160 <main+0x80>
				{
					selected_row = 1 ;
    219a:	2201      	movs	r2, #1
    219c:	7022      	strb	r2, [r4, #0]
    219e:	e7df      	b.n	2160 <main+0x80>
			triggerSensor(50);
    21a0:	2032      	movs	r0, #50	; 0x32
    21a2:	4b30      	ldr	r3, [pc, #192]	; (2264 <main+0x184>)
    21a4:	4798      	blx	r3
			triggered = true;
    21a6:	2201      	movs	r2, #1
    21a8:	4b25      	ldr	r3, [pc, #148]	; (2240 <main+0x160>)
    21aa:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    21ac:	2200      	movs	r2, #0
    21ae:	4b25      	ldr	r3, [pc, #148]	; (2244 <main+0x164>)
    21b0:	701a      	strb	r2, [r3, #0]
    21b2:	e7d8      	b.n	2166 <main+0x86>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    21b4:	4b0e      	ldr	r3, [pc, #56]	; (21f0 <main+0x110>)
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	9305      	str	r3, [sp, #20]
    21ba:	4b12      	ldr	r3, [pc, #72]	; (2204 <main+0x124>)
    21bc:	9304      	str	r3, [sp, #16]
    21be:	4b12      	ldr	r3, [pc, #72]	; (2208 <main+0x128>)
    21c0:	9303      	str	r3, [sp, #12]
    21c2:	4b12      	ldr	r3, [pc, #72]	; (220c <main+0x12c>)
    21c4:	9302      	str	r3, [sp, #8]
    21c6:	4b12      	ldr	r3, [pc, #72]	; (2210 <main+0x130>)
    21c8:	9301      	str	r3, [sp, #4]
    21ca:	4b12      	ldr	r3, [pc, #72]	; (2214 <main+0x134>)
    21cc:	9300      	str	r3, [sp, #0]
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <main+0x138>)
    21d0:	4a12      	ldr	r2, [pc, #72]	; (221c <main+0x13c>)
    21d2:	4913      	ldr	r1, [pc, #76]	; (2220 <main+0x140>)
    21d4:	4813      	ldr	r0, [pc, #76]	; (2224 <main+0x144>)
    21d6:	4c24      	ldr	r4, [pc, #144]	; (2268 <main+0x188>)
    21d8:	47a0      	blx	r4
			new_data = false; 
    21da:	2200      	movs	r2, #0
    21dc:	4b17      	ldr	r3, [pc, #92]	; (223c <main+0x15c>)
    21de:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    21e0:	2201      	movs	r2, #1
    21e2:	4b18      	ldr	r3, [pc, #96]	; (2244 <main+0x164>)
    21e4:	701a      	strb	r2, [r3, #0]
    21e6:	e7c4      	b.n	2172 <main+0x92>
    21e8:	000002d1 	.word	0x000002d1
    21ec:	000007b5 	.word	0x000007b5
    21f0:	20000c20 	.word	0x20000c20
    21f4:	200003b0 	.word	0x200003b0
    21f8:	00000aa9 	.word	0x00000aa9
    21fc:	00000a8d 	.word	0x00000a8d
    2200:	41008000 	.word	0x41008000
    2204:	20000e9c 	.word	0x20000e9c
    2208:	200011cc 	.word	0x200011cc
    220c:	20000bc8 	.word	0x20000bc8
    2210:	20000ca0 	.word	0x20000ca0
    2214:	20000ef8 	.word	0x20000ef8
    2218:	20000fe8 	.word	0x20000fe8
    221c:	20000cf8 	.word	0x20000cf8
    2220:	200012bc 	.word	0x200012bc
    2224:	20001040 	.word	0x20001040
    2228:	00002fb5 	.word	0x00002fb5
    222c:	20001134 	.word	0x20001134
    2230:	20000980 	.word	0x20000980
    2234:	20000f50 	.word	0x20000f50
    2238:	00003fb1 	.word	0x00003fb1
    223c:	20000acc 	.word	0x20000acc
    2240:	20000ef4 	.word	0x20000ef4
    2244:	20000c25 	.word	0x20000c25
    2248:	00002a45 	.word	0x00002a45
    224c:	20000d68 	.word	0x20000d68
    2250:	e000e100 	.word	0xe000e100
    2254:	20000a30 	.word	0x20000a30
    2258:	20001098 	.word	0x20001098
    225c:	20000520 	.word	0x20000520
    2260:	00001e55 	.word	0x00001e55
    2264:	00002ec9 	.word	0x00002ec9
    2268:	00002f09 	.word	0x00002f09

0000226c <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    226c:	4b0d      	ldr	r3, [pc, #52]	; (22a4 <TC3_Handler+0x38>)
    226e:	7a9b      	ldrb	r3, [r3, #10]
    2270:	f013 0f01 	tst.w	r3, #1
    2274:	d10d      	bne.n	2292 <TC3_Handler+0x26>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    2276:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <TC3_Handler+0x38>)
    2278:	7a9b      	ldrb	r3, [r3, #10]
    227a:	f013 0f20 	tst.w	r3, #32
    227e:	d007      	beq.n	2290 <TC3_Handler+0x24>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    2280:	4a08      	ldr	r2, [pc, #32]	; (22a4 <TC3_Handler+0x38>)
    2282:	7a93      	ldrb	r3, [r2, #10]
    2284:	f043 0320 	orr.w	r3, r3, #32
    2288:	7293      	strb	r3, [r2, #10]
		new_data = true;
    228a:	2201      	movs	r2, #1
    228c:	4b06      	ldr	r3, [pc, #24]	; (22a8 <TC3_Handler+0x3c>)
    228e:	701a      	strb	r2, [r3, #0]
    2290:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    2292:	4a04      	ldr	r2, [pc, #16]	; (22a4 <TC3_Handler+0x38>)
    2294:	7a93      	ldrb	r3, [r2, #10]
    2296:	f043 0301 	orr.w	r3, r3, #1
    229a:	7293      	strb	r3, [r2, #10]
		triggered = false;
    229c:	2200      	movs	r2, #0
    229e:	4b03      	ldr	r3, [pc, #12]	; (22ac <TC3_Handler+0x40>)
    22a0:	701a      	strb	r2, [r3, #0]
    22a2:	4770      	bx	lr
    22a4:	4101c000 	.word	0x4101c000
    22a8:	20000acc 	.word	0x20000acc
    22ac:	20000ef4 	.word	0x20000ef4

000022b0 <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    22b0:	3901      	subs	r1, #1
    22b2:	2903      	cmp	r1, #3
    22b4:	d805      	bhi.n	22c2 <select_prefix+0x12>
    22b6:	e8df f001 	tbb	[pc, r1]
    22ba:	0602      	.short	0x0602
    22bc:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    22be:	230c      	movs	r3, #12
    22c0:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    22c2:	7840      	ldrb	r0, [r0, #1]
    22c4:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    22c6:	2310      	movs	r3, #16
    22c8:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    22ca:	e7fa      	b.n	22c2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    22cc:	2314      	movs	r3, #20
    22ce:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    22d0:	e7f7      	b.n	22c2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    22d2:	2318      	movs	r3, #24
    22d4:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    22d6:	e7f4      	b.n	22c2 <select_prefix+0x12>

000022d8 <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    22d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22da:	b083      	sub	sp, #12
    22dc:	4606      	mov	r6, r0
    22de:	4617      	mov	r7, r2
    22e0:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    22e2:	ab02      	add	r3, sp, #8
    22e4:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    22e8:	2201      	movs	r2, #1
    22ea:	4619      	mov	r1, r3
    22ec:	4b0a      	ldr	r3, [pc, #40]	; (2318 <i2c_m_sync_cmd_write_easy+0x40>)
    22ee:	4798      	blx	r3
	if (ret != 1) {return -1;}
    22f0:	2801      	cmp	r0, #1
    22f2:	d10d      	bne.n	2310 <i2c_m_sync_cmd_write_easy+0x38>
    22f4:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    22f6:	462a      	mov	r2, r5
    22f8:	4639      	mov	r1, r7
    22fa:	4630      	mov	r0, r6
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <i2c_m_sync_cmd_write_easy+0x44>)
    22fe:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    2300:	42a8      	cmp	r0, r5
    2302:	d102      	bne.n	230a <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    2304:	4620      	mov	r0, r4
    2306:	b003      	add	sp, #12
    2308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    230a:	f04f 34ff 	mov.w	r4, #4294967295
    230e:	e7f9      	b.n	2304 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    2310:	f04f 34ff 	mov.w	r4, #4294967295
    2314:	e7f6      	b.n	2304 <i2c_m_sync_cmd_write_easy+0x2c>
    2316:	bf00      	nop
    2318:	00000ab1 	.word	0x00000ab1
    231c:	00000ae5 	.word	0x00000ae5

00002320 <sendCommand>:
{
    2320:	b530      	push	{r4, r5, lr}
    2322:	b083      	sub	sp, #12
    2324:	460d      	mov	r5, r1
    2326:	4614      	mov	r4, r2
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2328:	f44f 6200 	mov.w	r2, #2048	; 0x800
    232c:	7801      	ldrb	r1, [r0, #0]
    232e:	4808      	ldr	r0, [pc, #32]	; (2350 <sendCommand+0x30>)
    2330:	4b08      	ldr	r3, [pc, #32]	; (2354 <sendCommand+0x34>)
    2332:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    2334:	2301      	movs	r3, #1
    2336:	aa01      	add	r2, sp, #4
    2338:	4629      	mov	r1, r5
    233a:	4620      	mov	r0, r4
    233c:	4c06      	ldr	r4, [pc, #24]	; (2358 <sendCommand+0x38>)
    233e:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2340:	2800      	cmp	r0, #0
    2342:	dd03      	ble.n	234c <sendCommand+0x2c>
  return buffer_answer[0];
    2344:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2348:	b003      	add	sp, #12
    234a:	bd30      	pop	{r4, r5, pc}
  if (ret < 1) {return STATUS_ERROR;}
    234c:	20ff      	movs	r0, #255	; 0xff
    234e:	e7fb      	b.n	2348 <sendCommand+0x28>
    2350:	200003b0 	.word	0x200003b0
    2354:	00000a99 	.word	0x00000a99
    2358:	000022d9 	.word	0x000022d9

0000235c <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    235c:	b570      	push	{r4, r5, r6, lr}
    235e:	b082      	sub	sp, #8
    2360:	4605      	mov	r5, r0
    2362:	461e      	mov	r6, r3
    2364:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    2368:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    236c:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    2370:	2202      	movs	r2, #2
    2372:	a901      	add	r1, sp, #4
    2374:	4b09      	ldr	r3, [pc, #36]	; (239c <i2c_m_sync_reg_read_easy+0x40>)
    2376:	4798      	blx	r3
	if (ret != 2) {return -1;}
    2378:	2802      	cmp	r0, #2
    237a:	d10c      	bne.n	2396 <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    237c:	4622      	mov	r2, r4
    237e:	4631      	mov	r1, r6
    2380:	4628      	mov	r0, r5
    2382:	4b07      	ldr	r3, [pc, #28]	; (23a0 <i2c_m_sync_reg_read_easy+0x44>)
    2384:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    2386:	42a0      	cmp	r0, r4
    2388:	d102      	bne.n	2390 <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    238a:	2001      	movs	r0, #1
}
    238c:	b002      	add	sp, #8
    238e:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    2390:	f04f 30ff 	mov.w	r0, #4294967295
    2394:	e7fa      	b.n	238c <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    2396:	f04f 30ff 	mov.w	r0, #4294967295
    239a:	e7f7      	b.n	238c <i2c_m_sync_reg_read_easy+0x30>
    239c:	00000ab1 	.word	0x00000ab1
    23a0:	00000ae5 	.word	0x00000ae5

000023a4 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    23a4:	b510      	push	{r4, lr}
    23a6:	b082      	sub	sp, #8
    23a8:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    23aa:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    23ae:	0a11      	lsrs	r1, r2, #8
    23b0:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    23b4:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    23b8:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    23bc:	2204      	movs	r2, #4
    23be:	eb0d 0102 	add.w	r1, sp, r2
    23c2:	4b09      	ldr	r3, [pc, #36]	; (23e8 <i2c_m_sync_reg_write_easy+0x44>)
    23c4:	4798      	blx	r3
	if (ret != 4) {return -1;}
    23c6:	2804      	cmp	r0, #4
    23c8:	d10b      	bne.n	23e2 <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    23ca:	2201      	movs	r2, #1
    23cc:	9904      	ldr	r1, [sp, #16]
    23ce:	4620      	mov	r0, r4
    23d0:	4b06      	ldr	r3, [pc, #24]	; (23ec <i2c_m_sync_reg_write_easy+0x48>)
    23d2:	4798      	blx	r3
	if (ret != 1) {return -1;}
    23d4:	2801      	cmp	r0, #1
    23d6:	d101      	bne.n	23dc <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    23d8:	b002      	add	sp, #8
    23da:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    23dc:	f04f 30ff 	mov.w	r0, #4294967295
    23e0:	e7fa      	b.n	23d8 <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    23e2:	f04f 30ff 	mov.w	r0, #4294967295
    23e6:	e7f7      	b.n	23d8 <i2c_m_sync_reg_write_easy+0x34>
    23e8:	00000ab1 	.word	0x00000ab1
    23ec:	00000ae5 	.word	0x00000ae5

000023f0 <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    23f0:	2308      	movs	r3, #8
    23f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    23f6:	4770      	bx	lr

000023f8 <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    23f8:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    23fa:	2200      	movs	r2, #0
    23fc:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    23fe:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    2400:	4a0e      	ldr	r2, [pc, #56]	; (243c <initialize+0x44>)
    2402:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    2404:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    2408:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    240a:	4a0d      	ldr	r2, [pc, #52]	; (2440 <initialize+0x48>)
    240c:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    240e:	4a0d      	ldr	r2, [pc, #52]	; (2444 <initialize+0x4c>)
    2410:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    2412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2416:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    2418:	4a0b      	ldr	r2, [pc, #44]	; (2448 <initialize+0x50>)
    241a:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    241c:	4a0b      	ldr	r2, [pc, #44]	; (244c <initialize+0x54>)
    241e:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    2420:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2424:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    2426:	4a0a      	ldr	r2, [pc, #40]	; (2450 <initialize+0x58>)
    2428:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    242a:	4a0a      	ldr	r2, [pc, #40]	; (2454 <initialize+0x5c>)
    242c:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    242e:	4a0a      	ldr	r2, [pc, #40]	; (2458 <initialize+0x60>)
    2430:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    2432:	4a0a      	ldr	r2, [pc, #40]	; (245c <initialize+0x64>)
    2434:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    2436:	4b0a      	ldr	r3, [pc, #40]	; (2460 <initialize+0x68>)
    2438:	4798      	blx	r3
    243a:	bd08      	pop	{r3, pc}
    243c:	40a00000 	.word	0x40a00000
    2440:	40400000 	.word	0x40400000
    2444:	40200000 	.word	0x40200000
    2448:	3fd55555 	.word	0x3fd55555
    244c:	3faaaaab 	.word	0x3faaaaab
    2450:	3e48b439 	.word	0x3e48b439
    2454:	3ea1cac1 	.word	0x3ea1cac1
    2458:	3e19999a 	.word	0x3e19999a
    245c:	3e77ced9 	.word	0x3e77ced9
    2460:	000023f1 	.word	0x000023f1

00002464 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    2464:	2301      	movs	r3, #1
    2466:	fa03 f101 	lsl.w	r1, r3, r1
    246a:	f001 0108 	and.w	r1, r1, #8
    246e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    2472:	4319      	orrs	r1, r3
    2474:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2478:	4770      	bx	lr

0000247a <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    247a:	2902      	cmp	r1, #2
    247c:	d80c      	bhi.n	2498 <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    247e:	f101 031c 	add.w	r3, r1, #28
    2482:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    2486:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    2488:	2301      	movs	r3, #1
    248a:	408b      	lsls	r3, r1
    248c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    2490:	ea21 0103 	bic.w	r1, r1, r3
    2494:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2498:	4770      	bx	lr
	...

0000249c <readRegister>:
{
    249c:	b5f0      	push	{r4, r5, r6, r7, lr}
    249e:	b085      	sub	sp, #20
    24a0:	4604      	mov	r4, r0
    24a2:	460d      	mov	r5, r1
    24a4:	4617      	mov	r7, r2
    24a6:	461e      	mov	r6, r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    24a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    24ac:	7801      	ldrb	r1, [r0, #0]
    24ae:	4810      	ldr	r0, [pc, #64]	; (24f0 <readRegister+0x54>)
    24b0:	4b10      	ldr	r3, [pc, #64]	; (24f4 <readRegister+0x58>)
    24b2:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    24b4:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    24b6:	2303      	movs	r3, #3
    24b8:	9300      	str	r3, [sp, #0]
    24ba:	ab03      	add	r3, sp, #12
    24bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    24c0:	2150      	movs	r1, #80	; 0x50
    24c2:	4630      	mov	r0, r6
    24c4:	4e0c      	ldr	r6, [pc, #48]	; (24f8 <readRegister+0x5c>)
    24c6:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    24c8:	2800      	cmp	r0, #0
    24ca:	dc03      	bgt.n	24d4 <readRegister+0x38>
    24cc:	26ff      	movs	r6, #255	; 0xff
}
    24ce:	4630      	mov	r0, r6
    24d0:	b005      	add	sp, #20
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    24d4:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    24d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    24dc:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    24e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    24e4:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    24e6:	4629      	mov	r1, r5
    24e8:	4620      	mov	r0, r4
    24ea:	4b04      	ldr	r3, [pc, #16]	; (24fc <readRegister+0x60>)
    24ec:	4798      	blx	r3
  return status;
    24ee:	e7ee      	b.n	24ce <readRegister+0x32>
    24f0:	200003b0 	.word	0x200003b0
    24f4:	00000a99 	.word	0x00000a99
    24f8:	0000235d 	.word	0x0000235d
    24fc:	0000247b 	.word	0x0000247b

00002500 <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2500:	b538      	push	{r3, r4, r5, lr}
    2502:	4604      	mov	r4, r0
    2504:	460d      	mov	r5, r1
  cache_invalidate(hall_sensor);
    2506:	4b06      	ldr	r3, [pc, #24]	; (2520 <reset+0x20>)
    2508:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, io);
    250a:	462a      	mov	r2, r5
    250c:	21f0      	movs	r1, #240	; 0xf0
    250e:	4620      	mov	r0, r4
    2510:	4b04      	ldr	r3, [pc, #16]	; (2524 <reset+0x24>)
    2512:	4798      	blx	r3
    2514:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    2516:	2003      	movs	r0, #3
    2518:	4b03      	ldr	r3, [pc, #12]	; (2528 <reset+0x28>)
    251a:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    251c:	4620      	mov	r0, r4
    251e:	bd38      	pop	{r3, r4, r5, pc}
    2520:	000023f1 	.word	0x000023f1
    2524:	00002321 	.word	0x00002321
    2528:	000009cd 	.word	0x000009cd

0000252c <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    252c:	b508      	push	{r3, lr}
  return sendCommand(hall_sensor, CMD_EXIT, io);
    252e:	460a      	mov	r2, r1
    2530:	2180      	movs	r1, #128	; 0x80
    2532:	4b01      	ldr	r3, [pc, #4]	; (2538 <exit_command+0xc>)
    2534:	4798      	blx	r3
  delay_ms(2);
}
    2536:	bd08      	pop	{r3, pc}
    2538:	00002321 	.word	0x00002321

0000253c <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct io_descriptor *io)
{
    253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2540:	b084      	sub	sp, #16
    2542:	4605      	mov	r5, r0
    2544:	460c      	mov	r4, r1
    2546:	4690      	mov	r8, r2
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    2548:	f001 060f 	and.w	r6, r1, #15
    254c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2550:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2554:	7801      	ldrb	r1, [r0, #0]
    2556:	483d      	ldr	r0, [pc, #244]	; (264c <readMeasurement+0x110>)
    2558:	4b3d      	ldr	r3, [pc, #244]	; (2650 <readMeasurement+0x114>)
    255a:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    255c:	f014 0908 	ands.w	r9, r4, #8
    2560:	d05b      	beq.n	261a <readMeasurement+0xde>
    2562:	2302      	movs	r3, #2
    2564:	f014 0a04 	ands.w	sl, r4, #4
    2568:	d059      	beq.n	261e <readMeasurement+0xe2>
    256a:	2202      	movs	r2, #2
    256c:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    256e:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    2572:	443b      	add	r3, r7
    2574:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    2576:	f014 0401 	ands.w	r4, r4, #1
    257a:	d052      	beq.n	2622 <readMeasurement+0xe6>
    257c:	2302      	movs	r3, #2
    257e:	4413      	add	r3, r2
    2580:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    2582:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    2584:	b2db      	uxtb	r3, r3
    2586:	aa01      	add	r2, sp, #4
    2588:	4631      	mov	r1, r6
    258a:	4640      	mov	r0, r8
    258c:	4e31      	ldr	r6, [pc, #196]	; (2654 <readMeasurement+0x118>)
    258e:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    2590:	2800      	cmp	r0, #0
    2592:	dd59      	ble.n	2648 <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    2594:	2c00      	cmp	r4, #0
    2596:	d046      	beq.n	2626 <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    2598:	f89d 2005 	ldrb.w	r2, [sp, #5]
    259c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    25a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    25a4:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    25a8:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    25aa:	2f00      	cmp	r7, #0
    25ac:	d040      	beq.n	2630 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    25ae:	aa04      	add	r2, sp, #16
    25b0:	441a      	add	r2, r3
    25b2:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    25b6:	1c59      	adds	r1, r3, #1
    25b8:	aa04      	add	r2, sp, #16
    25ba:	4411      	add	r1, r2
    25bc:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    25c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    25c4:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    25c8:	3302      	adds	r3, #2
    25ca:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    25cc:	f1ba 0f00 	cmp.w	sl, #0
    25d0:	d032      	beq.n	2638 <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    25d2:	aa04      	add	r2, sp, #16
    25d4:	441a      	add	r2, r3
    25d6:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    25da:	1c59      	adds	r1, r3, #1
    25dc:	aa04      	add	r2, sp, #16
    25de:	4411      	add	r1, r2
    25e0:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    25e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    25e8:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    25ec:	3302      	adds	r3, #2
    25ee:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    25f0:	f1b9 0f00 	cmp.w	r9, #0
    25f4:	d024      	beq.n	2640 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    25f6:	aa04      	add	r2, sp, #16
    25f8:	441a      	add	r2, r3
    25fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    25fe:	3301      	adds	r3, #1
    2600:	a904      	add	r1, sp, #16
    2602:	440b      	add	r3, r1
    2604:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    2608:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    260c:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    2610:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2614:	b004      	add	sp, #16
    2616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    261a:	2300      	movs	r3, #0
    261c:	e7a2      	b.n	2564 <readMeasurement+0x28>
    261e:	2200      	movs	r2, #0
    2620:	e7a4      	b.n	256c <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    2622:	2300      	movs	r3, #0
    2624:	e7ab      	b.n	257e <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    2626:	2300      	movs	r3, #0
    2628:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    262c:	2301      	movs	r3, #1
    262e:	e7bc      	b.n	25aa <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    2630:	2200      	movs	r2, #0
    2632:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    2636:	e7c9      	b.n	25cc <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    2638:	2200      	movs	r2, #0
    263a:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    263e:	e7d7      	b.n	25f0 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    2640:	2300      	movs	r3, #0
    2642:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    2646:	e7e3      	b.n	2610 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    2648:	20ff      	movs	r0, #255	; 0xff
    264a:	e7e3      	b.n	2614 <readMeasurement+0xd8>
    264c:	200003b0 	.word	0x200003b0
    2650:	00000a99 	.word	0x00000a99
    2654:	000022d9 	.word	0x000022d9

00002658 <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    2658:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    265a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    265c:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    2660:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    2664:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    2666:	f3c1 1147 	ubfx	r1, r1, #5, #8
    266a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    266e:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    2672:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    2676:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    2678:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    267a:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    267e:	2a0c      	cmp	r2, #12
    2680:	f000 8091 	beq.w	27a6 <convertRaw+0x14e>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    2684:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    2688:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    268c:	3302      	adds	r3, #2
    268e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2692:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    2696:	2c00      	cmp	r4, #0
    2698:	f000 808a 	beq.w	27b0 <convertRaw+0x158>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    269c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    26a0:	ee06 3a90 	vmov	s13, r3
    26a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    26a8:	eddf 7ae0 	vldr	s15, [pc, #896]	; 2a2c <convertRaw+0x3d4>
    26ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
    26b0:	ee65 6a26 	vmul.f32	s13, s10, s13
    26b4:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    26b8:	2201      	movs	r2, #1
    26ba:	fa02 f101 	lsl.w	r1, r2, r1
    26be:	ee07 1a90 	vmov	s15, r1
    26c2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    26c6:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    26ca:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    26ce:	2c00      	cmp	r4, #0
    26d0:	f000 80d4 	beq.w	287c <convertRaw+0x224>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    26d4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    26d8:	ee07 3a10 	vmov	s14, r3
    26dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    26e0:	eddf 7ad2 	vldr	s15, [pc, #840]	; 2a2c <convertRaw+0x3d4>
    26e4:	ee37 7a67 	vsub.f32	s14, s14, s15
    26e8:	ee25 7a07 	vmul.f32	s14, s10, s14
    26ec:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    26f0:	2301      	movs	r3, #1
    26f2:	40b3      	lsls	r3, r6
    26f4:	ee07 3a90 	vmov	s15, r3
    26f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    26fc:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2700:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    2704:	2c00      	cmp	r4, #0
    2706:	f000 811c 	beq.w	2942 <convertRaw+0x2ea>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    270a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    270e:	ee07 3a90 	vmov	s15, r3
    2712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2716:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2a2c <convertRaw+0x3d4>
    271a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    271e:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2722:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    2726:	2301      	movs	r3, #1
    2728:	fa03 f505 	lsl.w	r5, r3, r5
    272c:	ee07 5a10 	vmov	s14, r5
    2730:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2734:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2738:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    273c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2740:	ee07 3a90 	vmov	s15, r3
    2744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2748:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 2a30 <convertRaw+0x3d8>
    274c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2750:	eddf 6ab8 	vldr	s13, [pc, #736]	; 2a34 <convertRaw+0x3dc>
    2754:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2758:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    275c:	ee77 7a27 	vadd.f32	s15, s14, s15
    2760:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    2764:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    2768:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 2a38 <convertRaw+0x3e0>
    276c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2774:	f340 814a 	ble.w	2a0c <convertRaw+0x3b4>
  {
	  hall_sensor->data.x = 50000;
    2778:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    277c:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    2780:	ed9f 7aad 	vldr	s14, [pc, #692]	; 2a38 <convertRaw+0x3e0>
    2784:	eef4 7ac7 	vcmpe.f32	s15, s14
    2788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    278c:	f300 8149 	bgt.w	2a22 <convertRaw+0x3ca>
    {
	    hall_sensor->data.y = 50000;
    }
    else
    {
	    if (hall_sensor->data.y < -50000)
    2790:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 2a3c <convertRaw+0x3e4>
    2794:	eef4 7ac7 	vcmpe.f32	s15, s14
    2798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    279c:	f140 8143 	bpl.w	2a26 <convertRaw+0x3ce>
	    {
		    hall_sensor->data.y = -50000;
    27a0:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.z < -50000)
	    {
		    //hall_sensor->data.z = -50000;
	    }
    }
}
    27a4:	e13f      	b.n	2a26 <convertRaw+0x3ce>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    27a6:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    27aa:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    27ae:	e76d      	b.n	268c <convertRaw+0x34>
    switch(res_x){
    27b0:	2903      	cmp	r1, #3
    27b2:	d88c      	bhi.n	26ce <convertRaw+0x76>
    27b4:	e8df f001 	tbb	[pc, r1]
    27b8:	482e1802 	.word	0x482e1802
		hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    27bc:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    27c0:	ee07 3a90 	vmov	s15, r3
    27c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27c8:	ee67 7a85 	vmul.f32	s15, s15, s10
    27cc:	ee25 7aa7 	vmul.f32	s14, s11, s15
    27d0:	2301      	movs	r3, #1
    27d2:	fa03 f101 	lsl.w	r1, r3, r1
    27d6:	ee07 1a90 	vmov	s15, r1
    27da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27de:	ee67 7a87 	vmul.f32	s15, s15, s14
    27e2:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		break;
    27e6:	e772      	b.n	26ce <convertRaw+0x76>
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    27e8:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    27ec:	ee07 3a90 	vmov	s15, r3
    27f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27f4:	ee67 7a85 	vmul.f32	s15, s15, s10
    27f8:	ee25 7aa7 	vmul.f32	s14, s11, s15
    27fc:	2301      	movs	r3, #1
    27fe:	fa03 f101 	lsl.w	r1, r3, r1
    2802:	ee07 1a90 	vmov	s15, r1
    2806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    280a:	ee67 7a87 	vmul.f32	s15, s15, s14
    280e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2812:	e75c      	b.n	26ce <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2814:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2818:	ee07 3a90 	vmov	s15, r3
    281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2820:	ed9f 7a82 	vldr	s14, [pc, #520]	; 2a2c <convertRaw+0x3d4>
    2824:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2828:	ee65 7a27 	vmul.f32	s15, s10, s15
    282c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2830:	2301      	movs	r3, #1
    2832:	fa03 f101 	lsl.w	r1, r3, r1
    2836:	ee07 1a10 	vmov	s14, r1
    283a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    283e:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2842:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2846:	e742      	b.n	26ce <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2848:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    284c:	ee07 3a90 	vmov	s15, r3
    2850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2854:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 2a40 <convertRaw+0x3e8>
    2858:	ee77 7ac7 	vsub.f32	s15, s15, s14
    285c:	ee65 7a27 	vmul.f32	s15, s10, s15
    2860:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2864:	2301      	movs	r3, #1
    2866:	fa03 f101 	lsl.w	r1, r3, r1
    286a:	ee07 1a10 	vmov	s14, r1
    286e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2872:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2876:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    287a:	e728      	b.n	26ce <convertRaw+0x76>
    switch(res_y){
    287c:	2e03      	cmp	r6, #3
    287e:	f63f af41 	bhi.w	2704 <convertRaw+0xac>
    2882:	e8df f006 	tbb	[pc, r6]
    2886:	1702      	.short	0x1702
    2888:	452c      	.short	0x452c
		hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    288a:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    288e:	ee07 3a10 	vmov	s14, r3
    2892:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2896:	ee27 7a05 	vmul.f32	s14, s14, s10
    289a:	ee25 5a87 	vmul.f32	s10, s11, s14
    289e:	2301      	movs	r3, #1
    28a0:	40b3      	lsls	r3, r6
    28a2:	ee07 3a90 	vmov	s15, r3
    28a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    28aa:	ee27 7a05 	vmul.f32	s14, s14, s10
    28ae:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
		break;
    28b2:	e727      	b.n	2704 <convertRaw+0xac>
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    28b4:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    28b8:	ee07 3a10 	vmov	s14, r3
    28bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    28c0:	ee27 7a05 	vmul.f32	s14, s14, s10
    28c4:	ee25 5a87 	vmul.f32	s10, s11, s14
    28c8:	2301      	movs	r3, #1
    28ca:	40b3      	lsls	r3, r6
    28cc:	ee07 3a90 	vmov	s15, r3
    28d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    28d4:	ee27 7a05 	vmul.f32	s14, s14, s10
    28d8:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    28dc:	e712      	b.n	2704 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    28de:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    28e2:	ee07 3a10 	vmov	s14, r3
    28e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    28ea:	eddf 7a50 	vldr	s15, [pc, #320]	; 2a2c <convertRaw+0x3d4>
    28ee:	ee37 7a67 	vsub.f32	s14, s14, s15
    28f2:	ee25 7a07 	vmul.f32	s14, s10, s14
    28f6:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    28fa:	2301      	movs	r3, #1
    28fc:	40b3      	lsls	r3, r6
    28fe:	ee07 3a90 	vmov	s15, r3
    2902:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2906:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    290a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    290e:	e6f9      	b.n	2704 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2910:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2914:	ee07 3a10 	vmov	s14, r3
    2918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    291c:	eddf 7a48 	vldr	s15, [pc, #288]	; 2a40 <convertRaw+0x3e8>
    2920:	ee37 7a67 	vsub.f32	s14, s14, s15
    2924:	ee25 7a07 	vmul.f32	s14, s10, s14
    2928:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    292c:	2301      	movs	r3, #1
    292e:	40b3      	lsls	r3, r6
    2930:	ee07 3a90 	vmov	s15, r3
    2934:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2938:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    293c:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2940:	e6e0      	b.n	2704 <convertRaw+0xac>
    switch(res_z){
    2942:	2d03      	cmp	r5, #3
    2944:	f63f aefa 	bhi.w	273c <convertRaw+0xe4>
    2948:	e8df f005 	tbb	[pc, r5]
    294c:	462c1702 	.word	0x462c1702
		hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2950:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2954:	ee07 3a90 	vmov	s15, r3
    2958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    295c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2960:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2964:	2301      	movs	r3, #1
    2966:	40ab      	lsls	r3, r5
    2968:	ee07 3a90 	vmov	s15, r3
    296c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2970:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2974:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		break;
    2978:	e6e0      	b.n	273c <convertRaw+0xe4>
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    297a:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    297e:	ee07 3a90 	vmov	s15, r3
    2982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2986:	ee67 7aa4 	vmul.f32	s15, s15, s9
    298a:	ee65 5aa7 	vmul.f32	s11, s11, s15
    298e:	2301      	movs	r3, #1
    2990:	40ab      	lsls	r3, r5
    2992:	ee07 3a90 	vmov	s15, r3
    2996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    299a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    299e:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    29a2:	e6cb      	b.n	273c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    29a4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    29a8:	ee07 3a90 	vmov	s15, r3
    29ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2a2c <convertRaw+0x3d4>
    29b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    29b8:	ee64 7aa7 	vmul.f32	s15, s9, s15
    29bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    29c0:	2301      	movs	r3, #1
    29c2:	fa03 f505 	lsl.w	r5, r3, r5
    29c6:	ee07 5a10 	vmov	s14, r5
    29ca:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    29ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    29d2:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    29d6:	e6b1      	b.n	273c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    29d8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    29dc:	ee07 3a90 	vmov	s15, r3
    29e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2a40 <convertRaw+0x3e8>
    29e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    29ec:	ee64 7aa7 	vmul.f32	s15, s9, s15
    29f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    29f4:	2301      	movs	r3, #1
    29f6:	fa03 f505 	lsl.w	r5, r3, r5
    29fa:	ee07 5a10 	vmov	s14, r5
    29fe:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2a02:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2a06:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2a0a:	e697      	b.n	273c <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    2a0c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2a3c <convertRaw+0x3e4>
    2a10:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a18:	f57f aeb0 	bpl.w	277c <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    2a1c:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2a20:	e6ac      	b.n	277c <convertRaw+0x124>
	    hall_sensor->data.y = 50000;
    2a22:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
}
    2a26:	bc70      	pop	{r4, r5, r6}
    2a28:	4770      	bx	lr
    2a2a:	bf00      	nop
    2a2c:	47000000 	.word	0x47000000
    2a30:	4734a400 	.word	0x4734a400
    2a34:	4234cccd 	.word	0x4234cccd
    2a38:	47435000 	.word	0x47435000
    2a3c:	c7435000 	.word	0xc7435000
    2a40:	46800000 	.word	0x46800000

00002a44 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    2a44:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    2a46:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2a48:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    2a4c:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    2a50:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    2a54:	2201      	movs	r2, #1
    2a56:	408a      	lsls	r2, r1
    2a58:	3202      	adds	r2, #2
    2a5a:	409a      	lsls	r2, r3
    2a5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2a60:	0193      	lsls	r3, r2, #6
    2a62:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    2a66:	23c0      	movs	r3, #192	; 0xc0
    2a68:	40a3      	lsls	r3, r4
    2a6a:	3343      	adds	r3, #67	; 0x43
    2a6c:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    2a6e:	4b05      	ldr	r3, [pc, #20]	; (2a84 <convDelayMicro+0x40>)
    2a70:	fba3 3000 	umull	r3, r0, r3, r0
    2a74:	f3c0 104f 	ubfx	r0, r0, #5, #16
    2a78:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    2a7a:	b280      	uxth	r0, r0
    2a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop
    2a84:	51eb851f 	.word	0x51eb851f

00002a88 <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    2a88:	0900      	lsrs	r0, r0, #4
    2a8a:	f080 0001 	eor.w	r0, r0, #1
}
    2a8e:	f000 0001 	and.w	r0, r0, #1
    2a92:	4770      	bx	lr

00002a94 <writeRegister>:
{
    2a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a96:	b085      	sub	sp, #20
    2a98:	4605      	mov	r5, r0
    2a9a:	460e      	mov	r6, r1
    2a9c:	4617      	mov	r7, r2
    2a9e:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    2aa0:	4b12      	ldr	r3, [pc, #72]	; (2aec <writeRegister+0x58>)
    2aa2:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2aa8:	7829      	ldrb	r1, [r5, #0]
    2aaa:	4811      	ldr	r0, [pc, #68]	; (2af0 <writeRegister+0x5c>)
    2aac:	4b11      	ldr	r3, [pc, #68]	; (2af4 <writeRegister+0x60>)
    2aae:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    2ab0:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    2ab2:	aa03      	add	r2, sp, #12
    2ab4:	9200      	str	r2, [sp, #0]
    2ab6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2aba:	463a      	mov	r2, r7
    2abc:	2160      	movs	r1, #96	; 0x60
    2abe:	4620      	mov	r0, r4
    2ac0:	4c0d      	ldr	r4, [pc, #52]	; (2af8 <writeRegister+0x64>)
    2ac2:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2ac4:	2800      	cmp	r0, #0
    2ac6:	dd0e      	ble.n	2ae6 <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    2ac8:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    2acc:	4620      	mov	r0, r4
    2ace:	4b0b      	ldr	r3, [pc, #44]	; (2afc <writeRegister+0x68>)
    2ad0:	4798      	blx	r3
    2ad2:	b908      	cbnz	r0, 2ad8 <writeRegister+0x44>
  return status;
    2ad4:	4620      	mov	r0, r4
    2ad6:	e007      	b.n	2ae8 <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    2ad8:	463a      	mov	r2, r7
    2ada:	4631      	mov	r1, r6
    2adc:	4628      	mov	r0, r5
    2ade:	4b08      	ldr	r3, [pc, #32]	; (2b00 <writeRegister+0x6c>)
    2ae0:	4798      	blx	r3
  return status;
    2ae2:	4620      	mov	r0, r4
    2ae4:	e000      	b.n	2ae8 <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    2ae6:	20ff      	movs	r0, #255	; 0xff
}
    2ae8:	b005      	add	sp, #20
    2aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aec:	00002465 	.word	0x00002465
    2af0:	200003b0 	.word	0x200003b0
    2af4:	00000a99 	.word	0x00000a99
    2af8:	000023a5 	.word	0x000023a5
    2afc:	00002a89 	.word	0x00002a89
    2b00:	0000247b 	.word	0x0000247b

00002b04 <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    2b04:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2b08:	4770      	bx	lr
	...

00002b0c <cache_fill>:
  if (hall_sensor->cache.dirty != 0) {
    2b0c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    2b10:	b30a      	cbz	r2, 2b56 <cache_fill+0x4a>
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct io_descriptor *io) {
    2b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b14:	460e      	mov	r6, r1
    2b16:	4605      	mov	r5, r0
    2b18:	2400      	movs	r4, #0
    2b1a:	e001      	b.n	2b20 <cache_fill+0x14>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    2b1c:	3401      	adds	r4, #1
    2b1e:	b2e4      	uxtb	r4, r4
    2b20:	2c02      	cmp	r4, #2
    2b22:	d815      	bhi.n	2b50 <cache_fill+0x44>
      if (hall_sensor->cache.dirty & (1 << address)){
    2b24:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2b28:	4123      	asrs	r3, r4
    2b2a:	f013 0f01 	tst.w	r3, #1
    2b2e:	d0f5      	beq.n	2b1c <cache_fill+0x10>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]), io))) {
    2b30:	f104 021c 	add.w	r2, r4, #28
    2b34:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b38:	4633      	mov	r3, r6
    2b3a:	3202      	adds	r2, #2
    2b3c:	4621      	mov	r1, r4
    2b3e:	4628      	mov	r0, r5
    2b40:	4f06      	ldr	r7, [pc, #24]	; (2b5c <cache_fill+0x50>)
    2b42:	47b8      	blx	r7
    2b44:	4b06      	ldr	r3, [pc, #24]	; (2b60 <cache_fill+0x54>)
    2b46:	4798      	blx	r3
    2b48:	2800      	cmp	r0, #0
    2b4a:	d0e7      	beq.n	2b1c <cache_fill+0x10>
          return STATUS_ERROR;
    2b4c:	22ff      	movs	r2, #255	; 0xff
    2b4e:	e000      	b.n	2b52 <cache_fill+0x46>
  return STATUS_OK;
    2b50:	2200      	movs	r2, #0
}
    2b52:	4610      	mov	r0, r2
    2b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b56:	4610      	mov	r0, r2
    2b58:	4770      	bx	lr
    2b5a:	bf00      	nop
    2b5c:	0000249d 	.word	0x0000249d
    2b60:	00002b05 	.word	0x00002b05

00002b64 <startMeasurement>:
{
    2b64:	b570      	push	{r4, r5, r6, lr}
    2b66:	4606      	mov	r6, r0
    2b68:	460c      	mov	r4, r1
    2b6a:	4615      	mov	r5, r2
  cache_fill(hall_sensor, io);
    2b6c:	4611      	mov	r1, r2
    2b6e:	4b05      	ldr	r3, [pc, #20]	; (2b84 <startMeasurement+0x20>)
    2b70:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    2b72:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, io);
    2b76:	462a      	mov	r2, r5
    2b78:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2b7c:	4630      	mov	r0, r6
    2b7e:	4b02      	ldr	r3, [pc, #8]	; (2b88 <startMeasurement+0x24>)
    2b80:	4798      	blx	r3
}
    2b82:	bd70      	pop	{r4, r5, r6, pc}
    2b84:	00002b0d 	.word	0x00002b0d
    2b88:	00002321 	.word	0x00002321

00002b8c <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    2b8c:	f010 0f10 	tst.w	r0, #16
    2b90:	d001      	beq.n	2b96 <checkStatus+0xa>
    2b92:	20ff      	movs	r0, #255	; 0xff
    2b94:	4770      	bx	lr
    2b96:	2000      	movs	r0, #0
    2b98:	4770      	bx	lr
	...

00002b9c <setGainSel>:
{
    2b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba0:	b082      	sub	sp, #8
    2ba2:	4607      	mov	r7, r0
    2ba4:	4688      	mov	r8, r1
    2ba6:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2ba8:	2400      	movs	r4, #0
    2baa:	aa02      	add	r2, sp, #8
    2bac:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, io);
    2bb0:	462b      	mov	r3, r5
    2bb2:	4621      	mov	r1, r4
    2bb4:	4e0f      	ldr	r6, [pc, #60]	; (2bf4 <setGainSel+0x58>)
    2bb6:	47b0      	blx	r6
    2bb8:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), io);
    2bba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2bbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2bc2:	b212      	sxth	r2, r2
    2bc4:	ea4f 1808 	mov.w	r8, r8, lsl #4
    2bc8:	f008 0870 	and.w	r8, r8, #112	; 0x70
    2bcc:	ea42 0208 	orr.w	r2, r2, r8
    2bd0:	462b      	mov	r3, r5
    2bd2:	b292      	uxth	r2, r2
    2bd4:	4621      	mov	r1, r4
    2bd6:	4638      	mov	r0, r7
    2bd8:	4c07      	ldr	r4, [pc, #28]	; (2bf8 <setGainSel+0x5c>)
    2bda:	47a0      	blx	r4
    2bdc:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2bde:	4630      	mov	r0, r6
    2be0:	4d06      	ldr	r5, [pc, #24]	; (2bfc <setGainSel+0x60>)
    2be2:	47a8      	blx	r5
    2be4:	4604      	mov	r4, r0
    2be6:	4638      	mov	r0, r7
    2be8:	47a8      	blx	r5
    2bea:	4320      	orrs	r0, r4
}
    2bec:	b2c0      	uxtb	r0, r0
    2bee:	b002      	add	sp, #8
    2bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bf4:	0000249d 	.word	0x0000249d
    2bf8:	00002a95 	.word	0x00002a95
    2bfc:	00002b8d 	.word	0x00002b8d

00002c00 <setResolution>:
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	b083      	sub	sp, #12
    2c04:	4605      	mov	r5, r0
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    2c06:	011b      	lsls	r3, r3, #4
    2c08:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2c0c:	0092      	lsls	r2, r2, #2
    2c0e:	f002 020c 	and.w	r2, r2, #12
    2c12:	431a      	orrs	r2, r3
    2c14:	f001 0103 	and.w	r1, r1, #3
    2c18:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    2c1c:	aa02      	add	r2, sp, #8
    2c1e:	2300      	movs	r3, #0
    2c20:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, io);
    2c24:	9b08      	ldr	r3, [sp, #32]
    2c26:	2102      	movs	r1, #2
    2c28:	4e0d      	ldr	r6, [pc, #52]	; (2c60 <setResolution+0x60>)
    2c2a:	47b0      	blx	r6
    2c2c:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), io);
    2c2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2c36:	b212      	sxth	r2, r2
    2c38:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2c3c:	9b08      	ldr	r3, [sp, #32]
    2c3e:	b292      	uxth	r2, r2
    2c40:	2102      	movs	r1, #2
    2c42:	4628      	mov	r0, r5
    2c44:	4c07      	ldr	r4, [pc, #28]	; (2c64 <setResolution+0x64>)
    2c46:	47a0      	blx	r4
    2c48:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2c4a:	4638      	mov	r0, r7
    2c4c:	4d06      	ldr	r5, [pc, #24]	; (2c68 <setResolution+0x68>)
    2c4e:	47a8      	blx	r5
    2c50:	4604      	mov	r4, r0
    2c52:	4630      	mov	r0, r6
    2c54:	47a8      	blx	r5
    2c56:	4320      	orrs	r0, r4
}
    2c58:	b2c0      	uxtb	r0, r0
    2c5a:	b003      	add	sp, #12
    2c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5e:	bf00      	nop
    2c60:	0000249d 	.word	0x0000249d
    2c64:	00002a95 	.word	0x00002a95
    2c68:	00002b8d 	.word	0x00002b8d

00002c6c <setOverSampling>:
{
    2c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c6e:	b083      	sub	sp, #12
    2c70:	4607      	mov	r7, r0
    2c72:	460c      	mov	r4, r1
    2c74:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2c76:	aa02      	add	r2, sp, #8
    2c78:	2300      	movs	r3, #0
    2c7a:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, io);
    2c7e:	462b      	mov	r3, r5
    2c80:	2102      	movs	r1, #2
    2c82:	4e0e      	ldr	r6, [pc, #56]	; (2cbc <setOverSampling+0x50>)
    2c84:	47b0      	blx	r6
    2c86:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), io);
    2c88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c8c:	f022 0203 	bic.w	r2, r2, #3
    2c90:	b212      	sxth	r2, r2
    2c92:	f004 0403 	and.w	r4, r4, #3
    2c96:	4322      	orrs	r2, r4
    2c98:	462b      	mov	r3, r5
    2c9a:	b292      	uxth	r2, r2
    2c9c:	2102      	movs	r1, #2
    2c9e:	4638      	mov	r0, r7
    2ca0:	4c07      	ldr	r4, [pc, #28]	; (2cc0 <setOverSampling+0x54>)
    2ca2:	47a0      	blx	r4
    2ca4:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2ca6:	4630      	mov	r0, r6
    2ca8:	4d06      	ldr	r5, [pc, #24]	; (2cc4 <setOverSampling+0x58>)
    2caa:	47a8      	blx	r5
    2cac:	4604      	mov	r4, r0
    2cae:	4638      	mov	r0, r7
    2cb0:	47a8      	blx	r5
    2cb2:	4320      	orrs	r0, r4
}
    2cb4:	b2c0      	uxtb	r0, r0
    2cb6:	b003      	add	sp, #12
    2cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cba:	bf00      	nop
    2cbc:	0000249d 	.word	0x0000249d
    2cc0:	00002a95 	.word	0x00002a95
    2cc4:	00002b8d 	.word	0x00002b8d

00002cc8 <setDigitalFiltering>:
{
    2cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cca:	b083      	sub	sp, #12
    2ccc:	4607      	mov	r7, r0
    2cce:	460c      	mov	r4, r1
    2cd0:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2cd2:	aa02      	add	r2, sp, #8
    2cd4:	2300      	movs	r3, #0
    2cd6:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, io);
    2cda:	462b      	mov	r3, r5
    2cdc:	2102      	movs	r1, #2
    2cde:	4e0e      	ldr	r6, [pc, #56]	; (2d18 <setDigitalFiltering+0x50>)
    2ce0:	47b0      	blx	r6
    2ce2:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK),io);
    2ce4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2ce8:	f022 021c 	bic.w	r2, r2, #28
    2cec:	b212      	sxth	r2, r2
    2cee:	00a4      	lsls	r4, r4, #2
    2cf0:	f004 041c 	and.w	r4, r4, #28
    2cf4:	4322      	orrs	r2, r4
    2cf6:	462b      	mov	r3, r5
    2cf8:	b292      	uxth	r2, r2
    2cfa:	2102      	movs	r1, #2
    2cfc:	4638      	mov	r0, r7
    2cfe:	4c07      	ldr	r4, [pc, #28]	; (2d1c <setDigitalFiltering+0x54>)
    2d00:	47a0      	blx	r4
    2d02:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2d04:	4630      	mov	r0, r6
    2d06:	4d06      	ldr	r5, [pc, #24]	; (2d20 <setDigitalFiltering+0x58>)
    2d08:	47a8      	blx	r5
    2d0a:	4604      	mov	r4, r0
    2d0c:	4638      	mov	r0, r7
    2d0e:	47a8      	blx	r5
    2d10:	4320      	orrs	r0, r4
}
    2d12:	b2c0      	uxtb	r0, r0
    2d14:	b003      	add	sp, #12
    2d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d18:	0000249d 	.word	0x0000249d
    2d1c:	00002a95 	.word	0x00002a95
    2d20:	00002b8d 	.word	0x00002b8d

00002d24 <setTemperatureCompensation>:
{
    2d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d26:	b083      	sub	sp, #12
    2d28:	4606      	mov	r6, r0
    2d2a:	4614      	mov	r4, r2
  uint8_t tcmp_en = enabled?1:0;
    2d2c:	1c0f      	adds	r7, r1, #0
    2d2e:	bf18      	it	ne
    2d30:	2701      	movne	r7, #1
  uint16_t old_val = 0;
    2d32:	aa02      	add	r2, sp, #8
    2d34:	2300      	movs	r3, #0
    2d36:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, io);
    2d3a:	4623      	mov	r3, r4
    2d3c:	2101      	movs	r1, #1
    2d3e:	4d0d      	ldr	r5, [pc, #52]	; (2d74 <setTemperatureCompensation+0x50>)
    2d40:	47a8      	blx	r5
    2d42:	4605      	mov	r5, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), io);
    2d44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2d4c:	b212      	sxth	r2, r2
    2d4e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
    2d52:	4623      	mov	r3, r4
    2d54:	b292      	uxth	r2, r2
    2d56:	2101      	movs	r1, #1
    2d58:	4630      	mov	r0, r6
    2d5a:	4c07      	ldr	r4, [pc, #28]	; (2d78 <setTemperatureCompensation+0x54>)
    2d5c:	47a0      	blx	r4
    2d5e:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2d60:	4628      	mov	r0, r5
    2d62:	4d06      	ldr	r5, [pc, #24]	; (2d7c <setTemperatureCompensation+0x58>)
    2d64:	47a8      	blx	r5
    2d66:	4604      	mov	r4, r0
    2d68:	4630      	mov	r0, r6
    2d6a:	47a8      	blx	r5
    2d6c:	4320      	orrs	r0, r4
}
    2d6e:	b2c0      	uxtb	r0, r0
    2d70:	b003      	add	sp, #12
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d74:	0000249d 	.word	0x0000249d
    2d78:	00002a95 	.word	0x00002a95
    2d7c:	00002b8d 	.word	0x00002b8d

00002d80 <begin>:
{
    2d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d84:	b082      	sub	sp, #8
    2d86:	4604      	mov	r4, r0
    2d88:	4617      	mov	r7, r2
    2d8a:	461e      	mov	r6, r3
    2d8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  select_prefix(hall_sensor, order_code_last_digit);
    2d8e:	4b24      	ldr	r3, [pc, #144]	; (2e20 <begin+0xa0>)
    2d90:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2d92:	f994 2001 	ldrsb.w	r2, [r4, #1]
    2d96:	2f00      	cmp	r7, #0
    2d98:	d13f      	bne.n	2e1a <begin+0x9a>
    2d9a:	2300      	movs	r3, #0
    2d9c:	4313      	orrs	r3, r2
    2d9e:	2e00      	cmp	r6, #0
    2da0:	bf18      	it	ne
    2da2:	f043 0301 	orrne.w	r3, r3, #1
    2da6:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    2da8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2dac:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, io);
    2dae:	4629      	mov	r1, r5
    2db0:	4620      	mov	r0, r4
    2db2:	4b1c      	ldr	r3, [pc, #112]	; (2e24 <begin+0xa4>)
    2db4:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, io));
    2db6:	4629      	mov	r1, r5
    2db8:	4620      	mov	r0, r4
    2dba:	4b1b      	ldr	r3, [pc, #108]	; (2e28 <begin+0xa8>)
    2dbc:	4798      	blx	r3
    2dbe:	4b1b      	ldr	r3, [pc, #108]	; (2e2c <begin+0xac>)
    2dc0:	4798      	blx	r3
    2dc2:	4681      	mov	r9, r0
  uint8_t status2 = setGainSel(hall_sensor, 1, io); //7 is factory ours was 2
    2dc4:	462a      	mov	r2, r5
    2dc6:	2101      	movs	r1, #1
    2dc8:	4620      	mov	r0, r4
    2dca:	4b19      	ldr	r3, [pc, #100]	; (2e30 <begin+0xb0>)
    2dcc:	4798      	blx	r3
    2dce:	4682      	mov	sl, r0
  uint8_t status3 = setResolution(hall_sensor, 0, 0, 0, io); //0,0,0
    2dd0:	9500      	str	r5, [sp, #0]
    2dd2:	2300      	movs	r3, #0
    2dd4:	461a      	mov	r2, r3
    2dd6:	4619      	mov	r1, r3
    2dd8:	4620      	mov	r0, r4
    2dda:	4e16      	ldr	r6, [pc, #88]	; (2e34 <begin+0xb4>)
    2ddc:	47b0      	blx	r6
    2dde:	4680      	mov	r8, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, io); //3
    2de0:	462a      	mov	r2, r5
    2de2:	2101      	movs	r1, #1
    2de4:	4620      	mov	r0, r4
    2de6:	4b14      	ldr	r3, [pc, #80]	; (2e38 <begin+0xb8>)
    2de8:	4798      	blx	r3
    2dea:	4607      	mov	r7, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, io); //7
    2dec:	462a      	mov	r2, r5
    2dee:	2102      	movs	r1, #2
    2df0:	4620      	mov	r0, r4
    2df2:	4b12      	ldr	r3, [pc, #72]	; (2e3c <begin+0xbc>)
    2df4:	4798      	blx	r3
    2df6:	4606      	mov	r6, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, io);//0
    2df8:	462a      	mov	r2, r5
    2dfa:	2100      	movs	r1, #0
    2dfc:	4620      	mov	r0, r4
    2dfe:	4b10      	ldr	r3, [pc, #64]	; (2e40 <begin+0xc0>)
    2e00:	4798      	blx	r3
  return status1 | status2 | status3 | status4 | status5 | status6;
    2e02:	ea49 090a 	orr.w	r9, r9, sl
    2e06:	ea48 0809 	orr.w	r8, r8, r9
    2e0a:	ea47 0708 	orr.w	r7, r7, r8
    2e0e:	433e      	orrs	r6, r7
    2e10:	4330      	orrs	r0, r6
}
    2e12:	b2c0      	uxtb	r0, r0
    2e14:	b002      	add	sp, #8
    2e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2e1a:	2302      	movs	r3, #2
    2e1c:	e7be      	b.n	2d9c <begin+0x1c>
    2e1e:	bf00      	nop
    2e20:	000022b1 	.word	0x000022b1
    2e24:	0000252d 	.word	0x0000252d
    2e28:	00002501 	.word	0x00002501
    2e2c:	00002b8d 	.word	0x00002b8d
    2e30:	00002b9d 	.word	0x00002b9d
    2e34:	00002c01 	.word	0x00002c01
    2e38:	00002c6d 	.word	0x00002c6d
    2e3c:	00002cc9 	.word	0x00002cc9
    2e40:	00002d25 	.word	0x00002d25

00002e44 <setExtTrig>:
{
    2e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e46:	b083      	sub	sp, #12
    2e48:	4607      	mov	r7, r0
    2e4a:	460c      	mov	r4, r1
    2e4c:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2e4e:	aa02      	add	r2, sp, #8
    2e50:	2300      	movs	r3, #0
    2e52:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, io);
    2e56:	462b      	mov	r3, r5
    2e58:	2101      	movs	r1, #1
    2e5a:	4e0f      	ldr	r6, [pc, #60]	; (2e98 <setExtTrig+0x54>)
    2e5c:	47b0      	blx	r6
    2e5e:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), io);
    2e60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    2e68:	b213      	sxth	r3, r2
    2e6a:	b2a2      	uxth	r2, r4
    2e6c:	02d2      	lsls	r2, r2, #11
    2e6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    2e72:	431a      	orrs	r2, r3
    2e74:	462b      	mov	r3, r5
    2e76:	b292      	uxth	r2, r2
    2e78:	2101      	movs	r1, #1
    2e7a:	4638      	mov	r0, r7
    2e7c:	4c07      	ldr	r4, [pc, #28]	; (2e9c <setExtTrig+0x58>)
    2e7e:	47a0      	blx	r4
    2e80:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2e82:	4630      	mov	r0, r6
    2e84:	4d06      	ldr	r5, [pc, #24]	; (2ea0 <setExtTrig+0x5c>)
    2e86:	47a8      	blx	r5
    2e88:	4604      	mov	r4, r0
    2e8a:	4638      	mov	r0, r7
    2e8c:	47a8      	blx	r5
    2e8e:	4320      	orrs	r0, r4
}
    2e90:	b2c0      	uxtb	r0, r0
    2e92:	b003      	add	sp, #12
    2e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e96:	bf00      	nop
    2e98:	0000249d 	.word	0x0000249d
    2e9c:	00002a95 	.word	0x00002a95
    2ea0:	00002b8d 	.word	0x00002b8d

00002ea4 <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include <math.h>


void triggerInitialize(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2ea4:	b538      	push	{r3, r4, r5, lr}
    2ea6:	4605      	mov	r5, r0
    2ea8:	460c      	mov	r4, r1
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,io);
    2eaa:	460a      	mov	r2, r1
    2eac:	2101      	movs	r1, #1
    2eae:	4b04      	ldr	r3, [pc, #16]	; (2ec0 <triggerInitialize+0x1c>)
    2eb0:	4798      	blx	r3
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, io);
    2eb2:	4622      	mov	r2, r4
    2eb4:	210e      	movs	r1, #14
    2eb6:	4628      	mov	r0, r5
    2eb8:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <triggerInitialize+0x20>)
    2eba:	4798      	blx	r3
    2ebc:	bd38      	pop	{r3, r4, r5, pc}
    2ebe:	bf00      	nop
    2ec0:	00002e45 	.word	0x00002e45
    2ec4:	00002b65 	.word	0x00002b65

00002ec8 <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    2ec8:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2eca:	4c03      	ldr	r4, [pc, #12]	; (2ed8 <triggerSensor+0x10>)
    2ecc:	2540      	movs	r5, #64	; 0x40
    2ece:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    2ed0:	4b02      	ldr	r3, [pc, #8]	; (2edc <triggerSensor+0x14>)
    2ed2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ed4:	6165      	str	r5, [r4, #20]
    2ed6:	bd38      	pop	{r3, r4, r5, pc}
    2ed8:	41008000 	.word	0x41008000
    2edc:	000009ad 	.word	0x000009ad

00002ee0 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2ee0:	b538      	push	{r3, r4, r5, lr}
    2ee2:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , io);
    2ee4:	460a      	mov	r2, r1
    2ee6:	210e      	movs	r1, #14
    2ee8:	4b04      	ldr	r3, [pc, #16]	; (2efc <triggerReadout+0x1c>)
    2eea:	4798      	blx	r3
    2eec:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    2eee:	4628      	mov	r0, r5
    2ef0:	4b03      	ldr	r3, [pc, #12]	; (2f00 <triggerReadout+0x20>)
    2ef2:	4798      	blx	r3
	return checkStatus(status);
    2ef4:	4620      	mov	r0, r4
    2ef6:	4b03      	ldr	r3, [pc, #12]	; (2f04 <triggerReadout+0x24>)
    2ef8:	4798      	blx	r3
};
    2efa:	bd38      	pop	{r3, r4, r5, pc}
    2efc:	0000253d 	.word	0x0000253d
    2f00:	00002659 	.word	0x00002659
    2f04:	00002b8d 	.word	0x00002b8d

00002f08 <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct io_descriptor *io)
{
    2f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f0c:	b083      	sub	sp, #12
    2f0e:	4688      	mov	r8, r1
    2f10:	4617      	mov	r7, r2
    2f12:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,io);
    2f14:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f16:	4c25      	ldr	r4, [pc, #148]	; (2fac <triggerReadoutArray+0xa4>)
    2f18:	47a0      	blx	r4
    2f1a:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,io);
    2f1c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f1e:	4640      	mov	r0, r8
    2f20:	47a0      	blx	r4
    2f22:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,io);
    2f24:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f26:	4638      	mov	r0, r7
    2f28:	47a0      	blx	r4
    2f2a:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,io);
    2f2c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f2e:	4630      	mov	r0, r6
    2f30:	47a0      	blx	r4
    2f32:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,io);
    2f34:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f36:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f38:	47a0      	blx	r4
    2f3a:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,io);
    2f3c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f3e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f40:	47a0      	blx	r4
    2f42:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,io);
    2f44:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f46:	980e      	ldr	r0, [sp, #56]	; 0x38
    2f48:	47a0      	blx	r4
    2f4a:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,io);
    2f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2f50:	47a0      	blx	r4
    2f52:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,io);
    2f54:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f56:	9810      	ldr	r0, [sp, #64]	; 0x40
    2f58:	47a0      	blx	r4
    2f5a:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    2f5c:	4628      	mov	r0, r5
    2f5e:	4d14      	ldr	r5, [pc, #80]	; (2fb0 <triggerReadoutArray+0xa8>)
    2f60:	47a8      	blx	r5
    2f62:	4604      	mov	r4, r0
    2f64:	4658      	mov	r0, fp
    2f66:	47a8      	blx	r5
    2f68:	4304      	orrs	r4, r0
    2f6a:	b2e4      	uxtb	r4, r4
    2f6c:	4650      	mov	r0, sl
    2f6e:	47a8      	blx	r5
    2f70:	4304      	orrs	r4, r0
    2f72:	b2e4      	uxtb	r4, r4
    2f74:	4648      	mov	r0, r9
    2f76:	47a8      	blx	r5
    2f78:	4304      	orrs	r4, r0
    2f7a:	b2e4      	uxtb	r4, r4
    2f7c:	4640      	mov	r0, r8
    2f7e:	47a8      	blx	r5
    2f80:	4304      	orrs	r4, r0
    2f82:	b2e4      	uxtb	r4, r4
    2f84:	4638      	mov	r0, r7
    2f86:	47a8      	blx	r5
    2f88:	4304      	orrs	r4, r0
    2f8a:	b2e4      	uxtb	r4, r4
    2f8c:	4630      	mov	r0, r6
    2f8e:	47a8      	blx	r5
    2f90:	4304      	orrs	r4, r0
    2f92:	b2e4      	uxtb	r4, r4
    2f94:	9800      	ldr	r0, [sp, #0]
    2f96:	47a8      	blx	r5
    2f98:	4304      	orrs	r4, r0
    2f9a:	b2e4      	uxtb	r4, r4
    2f9c:	9801      	ldr	r0, [sp, #4]
    2f9e:	47a8      	blx	r5
    2fa0:	4320      	orrs	r0, r4
};
    2fa2:	b2c0      	uxtb	r0, r0
    2fa4:	b003      	add	sp, #12
    2fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2faa:	bf00      	nop
    2fac:	00002ee1 	.word	0x00002ee1
    2fb0:	00002b8d 	.word	0x00002b8d

00002fb4 <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
struct io_descriptor *io)
{
    2fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fb8:	b085      	sub	sp, #20
    2fba:	4606      	mov	r6, r0
    2fbc:	468b      	mov	fp, r1
    2fbe:	4692      	mov	sl, r2
    2fc0:	9303      	str	r3, [sp, #12]
    2fc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	//bottom row left
	initialize(hall_sensor_1);
    2fc4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 30e0 <SensorArray_Init+0x12c>
    2fc8:	47c8      	blx	r9
	begin(hall_sensor_1,1,0,0,false, io);
    2fca:	9501      	str	r5, [sp, #4]
    2fcc:	2400      	movs	r4, #0
    2fce:	9400      	str	r4, [sp, #0]
    2fd0:	4623      	mov	r3, r4
    2fd2:	4622      	mov	r2, r4
    2fd4:	2101      	movs	r1, #1
    2fd6:	4630      	mov	r0, r6
    2fd8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 30e4 <SensorArray_Init+0x130>
    2fdc:	47c0      	blx	r8
	triggerInitialize(hall_sensor_1, io);
    2fde:	4629      	mov	r1, r5
    2fe0:	4630      	mov	r0, r6
    2fe2:	4f3d      	ldr	r7, [pc, #244]	; (30d8 <SensorArray_Init+0x124>)
    2fe4:	47b8      	blx	r7
	delay_ms(5);
    2fe6:	2005      	movs	r0, #5
    2fe8:	4e3c      	ldr	r6, [pc, #240]	; (30dc <SensorArray_Init+0x128>)
    2fea:	47b0      	blx	r6
	
	//bottom row middle
	initialize(hall_sensor_2);
    2fec:	4658      	mov	r0, fp
    2fee:	47c8      	blx	r9
	begin(hall_sensor_2,1,0,1,false, io);
    2ff0:	9501      	str	r5, [sp, #4]
    2ff2:	9400      	str	r4, [sp, #0]
    2ff4:	2301      	movs	r3, #1
    2ff6:	4622      	mov	r2, r4
    2ff8:	4619      	mov	r1, r3
    2ffa:	4658      	mov	r0, fp
    2ffc:	47c0      	blx	r8
	triggerInitialize(hall_sensor_2, io);
    2ffe:	4629      	mov	r1, r5
    3000:	4658      	mov	r0, fp
    3002:	47b8      	blx	r7
	delay_ms(5);
    3004:	2005      	movs	r0, #5
    3006:	47b0      	blx	r6
	
	//bottom row right
	initialize(hall_sensor_3);
    3008:	4650      	mov	r0, sl
    300a:	47c8      	blx	r9
	begin(hall_sensor_3,1,1,0,false, io);
    300c:	9501      	str	r5, [sp, #4]
    300e:	9400      	str	r4, [sp, #0]
    3010:	4623      	mov	r3, r4
    3012:	2201      	movs	r2, #1
    3014:	4611      	mov	r1, r2
    3016:	4650      	mov	r0, sl
    3018:	47c0      	blx	r8
	triggerInitialize(hall_sensor_3, io);
    301a:	4629      	mov	r1, r5
    301c:	4650      	mov	r0, sl
    301e:	47b8      	blx	r7
	delay_ms(5);
    3020:	2005      	movs	r0, #5
    3022:	47b0      	blx	r6
	
	//middle row left
	initialize(hall_sensor_4);
    3024:	f8dd a00c 	ldr.w	sl, [sp, #12]
    3028:	4650      	mov	r0, sl
    302a:	47c8      	blx	r9
	begin(hall_sensor_4,2,0,0,false, io);
    302c:	9501      	str	r5, [sp, #4]
    302e:	9400      	str	r4, [sp, #0]
    3030:	4623      	mov	r3, r4
    3032:	4622      	mov	r2, r4
    3034:	2102      	movs	r1, #2
    3036:	4650      	mov	r0, sl
    3038:	47c0      	blx	r8
	triggerInitialize(hall_sensor_4, io);
    303a:	4629      	mov	r1, r5
    303c:	4650      	mov	r0, sl
    303e:	47b8      	blx	r7
	delay_ms(5);
    3040:	2005      	movs	r0, #5
    3042:	47b0      	blx	r6
	
	//middle row middle
	initialize(hall_sensor_5);
    3044:	980e      	ldr	r0, [sp, #56]	; 0x38
    3046:	47c8      	blx	r9
	begin(hall_sensor_5,2,0,1,false, io);
    3048:	9501      	str	r5, [sp, #4]
    304a:	9400      	str	r4, [sp, #0]
    304c:	2301      	movs	r3, #1
    304e:	4622      	mov	r2, r4
    3050:	2102      	movs	r1, #2
    3052:	980e      	ldr	r0, [sp, #56]	; 0x38
    3054:	47c0      	blx	r8
	triggerInitialize(hall_sensor_5, io);
    3056:	4629      	mov	r1, r5
    3058:	980e      	ldr	r0, [sp, #56]	; 0x38
    305a:	47b8      	blx	r7
	delay_ms(5);
    305c:	2005      	movs	r0, #5
    305e:	47b0      	blx	r6
	
	//middle row right
	initialize(hall_sensor_6);
    3060:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3062:	47c8      	blx	r9
	begin(hall_sensor_6,2,1,0,false, io);
    3064:	9501      	str	r5, [sp, #4]
    3066:	9400      	str	r4, [sp, #0]
    3068:	4623      	mov	r3, r4
    306a:	2201      	movs	r2, #1
    306c:	2102      	movs	r1, #2
    306e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3070:	47c0      	blx	r8
	triggerInitialize(hall_sensor_6, io);
    3072:	4629      	mov	r1, r5
    3074:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3076:	47b8      	blx	r7
	delay_ms(5);
    3078:	2005      	movs	r0, #5
    307a:	47b0      	blx	r6
	
	//top row left
	initialize(hall_sensor_7);
    307c:	9810      	ldr	r0, [sp, #64]	; 0x40
    307e:	47c8      	blx	r9
	begin(hall_sensor_7,3,0,0,false, io);
    3080:	9501      	str	r5, [sp, #4]
    3082:	9400      	str	r4, [sp, #0]
    3084:	4623      	mov	r3, r4
    3086:	4622      	mov	r2, r4
    3088:	2103      	movs	r1, #3
    308a:	9810      	ldr	r0, [sp, #64]	; 0x40
    308c:	47c0      	blx	r8
	triggerInitialize(hall_sensor_7, io);
    308e:	4629      	mov	r1, r5
    3090:	9810      	ldr	r0, [sp, #64]	; 0x40
    3092:	47b8      	blx	r7
	delay_ms(5);
    3094:	2005      	movs	r0, #5
    3096:	47b0      	blx	r6
	
	//top row middle
	initialize(hall_sensor_8);
    3098:	9811      	ldr	r0, [sp, #68]	; 0x44
    309a:	47c8      	blx	r9
	begin(hall_sensor_8,3,0,1,false, io);
    309c:	9501      	str	r5, [sp, #4]
    309e:	9400      	str	r4, [sp, #0]
    30a0:	2301      	movs	r3, #1
    30a2:	4622      	mov	r2, r4
    30a4:	2103      	movs	r1, #3
    30a6:	9811      	ldr	r0, [sp, #68]	; 0x44
    30a8:	47c0      	blx	r8
	triggerInitialize(hall_sensor_8, io);
    30aa:	4629      	mov	r1, r5
    30ac:	9811      	ldr	r0, [sp, #68]	; 0x44
    30ae:	47b8      	blx	r7
	delay_ms(5);
    30b0:	2005      	movs	r0, #5
    30b2:	47b0      	blx	r6
	
	//top row right
	initialize(hall_sensor_9);
    30b4:	9812      	ldr	r0, [sp, #72]	; 0x48
    30b6:	47c8      	blx	r9
	begin(hall_sensor_9,3,1,0,false, io);
    30b8:	9501      	str	r5, [sp, #4]
    30ba:	9400      	str	r4, [sp, #0]
    30bc:	4623      	mov	r3, r4
    30be:	2201      	movs	r2, #1
    30c0:	2103      	movs	r1, #3
    30c2:	9812      	ldr	r0, [sp, #72]	; 0x48
    30c4:	47c0      	blx	r8
	triggerInitialize(hall_sensor_9, io);
    30c6:	4629      	mov	r1, r5
    30c8:	9812      	ldr	r0, [sp, #72]	; 0x48
    30ca:	47b8      	blx	r7
	delay_ms(5);
    30cc:	2005      	movs	r0, #5
    30ce:	47b0      	blx	r6
}
    30d0:	b005      	add	sp, #20
    30d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d6:	bf00      	nop
    30d8:	00002ea5 	.word	0x00002ea5
    30dc:	000009cd 	.word	0x000009cd
    30e0:	000023f9 	.word	0x000023f9
    30e4:	00002d81 	.word	0x00002d81

000030e8 <update_struct_values>:


void update_struct_values(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    30e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30ea:	4604      	mov	r4, r0
		//allocate every data to corresponding struct value
		sensor_row->b_x_top = hall_sensor_top->data.x;
    30ec:	edd1 7a13 	vldr	s15, [r1, #76]	; 0x4c
    30f0:	edc0 7a00 	vstr	s15, [r0]
		sensor_row->b_y_top = hall_sensor_top->data.y;
    30f4:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
    30f8:	ed80 7a03 	vstr	s14, [r0, #12]
		sensor_row->b_z_top = hall_sensor_top->data.z;
    30fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    30fe:	6181      	str	r1, [r0, #24]
		
		sensor_row->b_x_middle = hall_sensor_middle->data.x;
    3100:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    3102:	6041      	str	r1, [r0, #4]
		sensor_row->b_y_middle = hall_sensor_middle->data.y;
    3104:	6d11      	ldr	r1, [r2, #80]	; 0x50
    3106:	6101      	str	r1, [r0, #16]
		sensor_row->b_z_middle = hall_sensor_middle->data.z;
    3108:	6d52      	ldr	r2, [r2, #84]	; 0x54
    310a:	61c2      	str	r2, [r0, #28]
		
		sensor_row->b_x_bottom = hall_sensor_bottom->data.x;
    310c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    310e:	6082      	str	r2, [r0, #8]
		sensor_row->b_y_bottom = hall_sensor_bottom->data.y;
    3110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3112:	6142      	str	r2, [r0, #20]
		sensor_row->b_z_bottom = hall_sensor_bottom->data.z;
    3114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3116:	6203      	str	r3, [r0, #32]
		
		//Combine X and Y Axis Into Br
		sensor_row->b_r_top = (sensor_row->b_x_top*sensor_row->b_x_top) + (sensor_row->b_y_top*sensor_row->b_y_top);
    3118:	ee67 7aa7 	vmul.f32	s15, s15, s15
    311c:	ee27 7a07 	vmul.f32	s14, s14, s14
    3120:	ee77 7a87 	vadd.f32	s15, s15, s14
    3124:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
		sensor_row->b_r_top = sqrt(sensor_row->b_r_top);
    3128:	4f16      	ldr	r7, [pc, #88]	; (3184 <update_struct_values+0x9c>)
    312a:	ee17 0a90 	vmov	r0, s15
    312e:	47b8      	blx	r7
    3130:	4e15      	ldr	r6, [pc, #84]	; (3188 <update_struct_values+0xa0>)
    3132:	47b0      	blx	r6
    3134:	4d15      	ldr	r5, [pc, #84]	; (318c <update_struct_values+0xa4>)
    3136:	47a8      	blx	r5
    3138:	6260      	str	r0, [r4, #36]	; 0x24

		sensor_row->b_r_middle = (sensor_row->b_x_middle*sensor_row->b_x_middle) + (sensor_row->b_y_middle*sensor_row->b_y_middle);
    313a:	edd4 7a01 	vldr	s15, [r4, #4]
    313e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3142:	ed94 7a04 	vldr	s14, [r4, #16]
    3146:	ee27 7a07 	vmul.f32	s14, s14, s14
    314a:	ee77 7a87 	vadd.f32	s15, s15, s14
    314e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		sensor_row->b_r_middle = sqrt(sensor_row->b_r_middle);
    3152:	ee17 0a90 	vmov	r0, s15
    3156:	47b8      	blx	r7
    3158:	47b0      	blx	r6
    315a:	47a8      	blx	r5
    315c:	62a0      	str	r0, [r4, #40]	; 0x28
		
		sensor_row->b_r_bottom = (sensor_row->b_x_bottom*sensor_row->b_x_bottom) + (sensor_row->b_y_bottom *sensor_row->b_y_bottom );
    315e:	edd4 7a02 	vldr	s15, [r4, #8]
    3162:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3166:	ed94 7a05 	vldr	s14, [r4, #20]
    316a:	ee27 7a07 	vmul.f32	s14, s14, s14
    316e:	ee77 7a87 	vadd.f32	s15, s15, s14
    3172:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
    3176:	ee17 0a90 	vmov	r0, s15
    317a:	47b8      	blx	r7
    317c:	47b0      	blx	r6
    317e:	47a8      	blx	r5
    3180:	62e0      	str	r0, [r4, #44]	; 0x2c
    3182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3184:	000045d9 	.word	0x000045d9
    3188:	000040d9 	.word	0x000040d9
    318c:	00004be1 	.word	0x00004be1

00003190 <mag_to_force>:
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
		*/
}


void mag_to_force(struct sensorRow_Values *sensor_row){
    3190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3194:	ed2d 8b06 	vpush	{d8-d10}
    3198:	b089      	sub	sp, #36	; 0x24
    319a:	4682      	mov	sl, r0
	
	sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    319c:	edd0 8a00 	vldr	s17, [r0]
    31a0:	4dcb      	ldr	r5, [pc, #812]	; (34d0 <mag_to_force+0x340>)
    31a2:	ee18 0a90 	vmov	r0, s17
    31a6:	47a8      	blx	r5
    31a8:	4cca      	ldr	r4, [pc, #808]	; (34d4 <mag_to_force+0x344>)
    31aa:	a39d      	add	r3, pc, #628	; (adr r3, 3420 <mag_to_force+0x290>)
    31ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    31b0:	47a0      	blx	r4
    31b2:	4ec9      	ldr	r6, [pc, #804]	; (34d8 <mag_to_force+0x348>)
    31b4:	4602      	mov	r2, r0
    31b6:	460b      	mov	r3, r1
    31b8:	a19b      	add	r1, pc, #620	; (adr r1, 3428 <mag_to_force+0x298>)
    31ba:	e9d1 0100 	ldrd	r0, r1, [r1]
    31be:	47b0      	blx	r6
    31c0:	4680      	mov	r8, r0
    31c2:	4689      	mov	r9, r1
    31c4:	ed9a 8a06 	vldr	s16, [sl, #24]
    31c8:	ee18 0a10 	vmov	r0, s16
    31cc:	47a8      	blx	r5
    31ce:	e9cd 0100 	strd	r0, r1, [sp]
    31d2:	a397      	add	r3, pc, #604	; (adr r3, 3430 <mag_to_force+0x2a0>)
    31d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    31d8:	47a0      	blx	r4
    31da:	4fc0      	ldr	r7, [pc, #768]	; (34dc <mag_to_force+0x34c>)
    31dc:	4602      	mov	r2, r0
    31de:	460b      	mov	r3, r1
    31e0:	4640      	mov	r0, r8
    31e2:	4649      	mov	r1, r9
    31e4:	47b8      	blx	r7
    31e6:	4680      	mov	r8, r0
    31e8:	4689      	mov	r9, r1
    31ea:	ee28 9aa8 	vmul.f32	s18, s17, s17
    31ee:	ee19 0a10 	vmov	r0, s18
    31f2:	47a8      	blx	r5
    31f4:	a390      	add	r3, pc, #576	; (adr r3, 3438 <mag_to_force+0x2a8>)
    31f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31fa:	47a0      	blx	r4
    31fc:	4602      	mov	r2, r0
    31fe:	460b      	mov	r3, r1
    3200:	4640      	mov	r0, r8
    3202:	4649      	mov	r1, r9
    3204:	47b8      	blx	r7
    3206:	4680      	mov	r8, r0
    3208:	4689      	mov	r9, r1
    320a:	ee68 7a88 	vmul.f32	s15, s17, s16
    320e:	ee17 0a90 	vmov	r0, s15
    3212:	47a8      	blx	r5
    3214:	a38a      	add	r3, pc, #552	; (adr r3, 3440 <mag_to_force+0x2b0>)
    3216:	e9d3 2300 	ldrd	r2, r3, [r3]
    321a:	47a0      	blx	r4
    321c:	4602      	mov	r2, r0
    321e:	460b      	mov	r3, r1
    3220:	4640      	mov	r0, r8
    3222:	4649      	mov	r1, r9
    3224:	47b0      	blx	r6
    3226:	4680      	mov	r8, r0
    3228:	4689      	mov	r9, r1
    322a:	ee28 aa08 	vmul.f32	s20, s16, s16
    322e:	ee1a 0a10 	vmov	r0, s20
    3232:	47a8      	blx	r5
    3234:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3238:	a383      	add	r3, pc, #524	; (adr r3, 3448 <mag_to_force+0x2b8>)
    323a:	e9d3 2300 	ldrd	r2, r3, [r3]
    323e:	47a0      	blx	r4
    3240:	4602      	mov	r2, r0
    3242:	460b      	mov	r3, r1
    3244:	4640      	mov	r0, r8
    3246:	4649      	mov	r1, r9
    3248:	47b8      	blx	r7
    324a:	4680      	mov	r8, r0
    324c:	4689      	mov	r9, r1
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    324e:	ee68 7a09 	vmul.f32	s15, s16, s18
    3252:	ee17 0a90 	vmov	r0, s15
    3256:	47a8      	blx	r5
    3258:	a37d      	add	r3, pc, #500	; (adr r3, 3450 <mag_to_force+0x2c0>)
    325a:	e9d3 2300 	ldrd	r2, r3, [r3]
    325e:	47a0      	blx	r4
    3260:	4602      	mov	r2, r0
    3262:	460b      	mov	r3, r1
    3264:	4640      	mov	r0, r8
    3266:	4649      	mov	r1, r9
    3268:	47b8      	blx	r7
    326a:	4680      	mov	r8, r0
    326c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    326e:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3272:	ee17 0a90 	vmov	r0, s15
    3276:	47a8      	blx	r5
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3278:	a377      	add	r3, pc, #476	; (adr r3, 3458 <mag_to_force+0x2c8>)
    327a:	e9d3 2300 	ldrd	r2, r3, [r3]
    327e:	47a0      	blx	r4
    3280:	4602      	mov	r2, r0
    3282:	460b      	mov	r3, r1
    3284:	4640      	mov	r0, r8
    3286:	4649      	mov	r1, r9
    3288:	47b0      	blx	r6
    328a:	4680      	mov	r8, r0
    328c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    328e:	ee68 7a0a 	vmul.f32	s15, s16, s20
    3292:	ee17 0a90 	vmov	r0, s15
    3296:	47a8      	blx	r5
    3298:	e9cd 0104 	strd	r0, r1, [sp, #16]
    329c:	a370      	add	r3, pc, #448	; (adr r3, 3460 <mag_to_force+0x2d0>)
    329e:	e9d3 2300 	ldrd	r2, r3, [r3]
    32a2:	47a0      	blx	r4
    32a4:	4602      	mov	r2, r0
    32a6:	460b      	mov	r3, r1
    32a8:	4640      	mov	r0, r8
    32aa:	4649      	mov	r1, r9
    32ac:	47b8      	blx	r7
    32ae:	f8df b230 	ldr.w	fp, [pc, #560]	; 34e0 <mag_to_force+0x350>
    32b2:	47d8      	blx	fp
    32b4:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32b8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32bc:	ed9a 9a03 	vldr	s18, [sl, #12]
    32c0:	ee19 0a10 	vmov	r0, s18
    32c4:	47a8      	blx	r5
    32c6:	a368      	add	r3, pc, #416	; (adr r3, 3468 <mag_to_force+0x2d8>)
    32c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    32cc:	47a0      	blx	r4
    32ce:	4602      	mov	r2, r0
    32d0:	460b      	mov	r3, r1
    32d2:	a167      	add	r1, pc, #412	; (adr r1, 3470 <mag_to_force+0x2e0>)
    32d4:	e9d1 0100 	ldrd	r0, r1, [r1]
    32d8:	47b0      	blx	r6
    32da:	4680      	mov	r8, r0
    32dc:	4689      	mov	r9, r1
    32de:	a366      	add	r3, pc, #408	; (adr r3, 3478 <mag_to_force+0x2e8>)
    32e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    32e4:	e9dd 0100 	ldrd	r0, r1, [sp]
    32e8:	47a0      	blx	r4
    32ea:	4602      	mov	r2, r0
    32ec:	460b      	mov	r3, r1
    32ee:	4640      	mov	r0, r8
    32f0:	4649      	mov	r1, r9
    32f2:	47b8      	blx	r7
    32f4:	4680      	mov	r8, r0
    32f6:	4689      	mov	r9, r1
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32f8:	ee69 9a09 	vmul.f32	s19, s18, s18
    32fc:	ee19 0a90 	vmov	r0, s19
    3300:	47a8      	blx	r5
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3302:	a35f      	add	r3, pc, #380	; (adr r3, 3480 <mag_to_force+0x2f0>)
    3304:	e9d3 2300 	ldrd	r2, r3, [r3]
    3308:	47a0      	blx	r4
    330a:	4602      	mov	r2, r0
    330c:	460b      	mov	r3, r1
    330e:	4640      	mov	r0, r8
    3310:	4649      	mov	r1, r9
    3312:	47b8      	blx	r7
    3314:	4680      	mov	r8, r0
    3316:	4689      	mov	r9, r1
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3318:	ee68 7a09 	vmul.f32	s15, s16, s18
    331c:	ee17 0a90 	vmov	r0, s15
    3320:	47a8      	blx	r5
    3322:	a359      	add	r3, pc, #356	; (adr r3, 3488 <mag_to_force+0x2f8>)
    3324:	e9d3 2300 	ldrd	r2, r3, [r3]
    3328:	47a0      	blx	r4
    332a:	4602      	mov	r2, r0
    332c:	460b      	mov	r3, r1
    332e:	4640      	mov	r0, r8
    3330:	4649      	mov	r1, r9
    3332:	47b0      	blx	r6
    3334:	4680      	mov	r8, r0
    3336:	4689      	mov	r9, r1
    3338:	a355      	add	r3, pc, #340	; (adr r3, 3490 <mag_to_force+0x300>)
    333a:	e9d3 2300 	ldrd	r2, r3, [r3]
    333e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3342:	47a0      	blx	r4
    3344:	4602      	mov	r2, r0
    3346:	460b      	mov	r3, r1
    3348:	4640      	mov	r0, r8
    334a:	4649      	mov	r1, r9
    334c:	47b8      	blx	r7
    334e:	4680      	mov	r8, r0
    3350:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3352:	ee68 7a29 	vmul.f32	s15, s16, s19
    3356:	ee17 0a90 	vmov	r0, s15
    335a:	47a8      	blx	r5
    335c:	a34e      	add	r3, pc, #312	; (adr r3, 3498 <mag_to_force+0x308>)
    335e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3362:	47a0      	blx	r4
    3364:	4602      	mov	r2, r0
    3366:	460b      	mov	r3, r1
    3368:	4640      	mov	r0, r8
    336a:	4649      	mov	r1, r9
    336c:	47b8      	blx	r7
    336e:	4680      	mov	r8, r0
    3370:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3372:	ee6a 7a09 	vmul.f32	s15, s20, s18
    3376:	ee17 0a90 	vmov	r0, s15
    337a:	47a8      	blx	r5
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    337c:	a348      	add	r3, pc, #288	; (adr r3, 34a0 <mag_to_force+0x310>)
    337e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3382:	47a0      	blx	r4
    3384:	4602      	mov	r2, r0
    3386:	460b      	mov	r3, r1
    3388:	4640      	mov	r0, r8
    338a:	4649      	mov	r1, r9
    338c:	47b0      	blx	r6
    338e:	4680      	mov	r8, r0
    3390:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3392:	a345      	add	r3, pc, #276	; (adr r3, 34a8 <mag_to_force+0x318>)
    3394:	e9d3 2300 	ldrd	r2, r3, [r3]
    3398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    339c:	47a0      	blx	r4
    339e:	4602      	mov	r2, r0
    33a0:	460b      	mov	r3, r1
    33a2:	4640      	mov	r0, r8
    33a4:	4649      	mov	r1, r9
    33a6:	47b8      	blx	r7
    33a8:	47d8      	blx	fp
    33aa:	ee09 0a10 	vmov	s18, r0
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    33ae:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    33b2:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    33b6:	ee19 0a90 	vmov	r0, s19
    33ba:	47a8      	blx	r5
    33bc:	a33c      	add	r3, pc, #240	; (adr r3, 34b0 <mag_to_force+0x320>)
    33be:	e9d3 2300 	ldrd	r2, r3, [r3]
    33c2:	47a0      	blx	r4
    33c4:	4602      	mov	r2, r0
    33c6:	460b      	mov	r3, r1
    33c8:	a13b      	add	r1, pc, #236	; (adr r1, 34b8 <mag_to_force+0x328>)
    33ca:	e9d1 0100 	ldrd	r0, r1, [r1]
    33ce:	47b0      	blx	r6
    33d0:	4680      	mov	r8, r0
    33d2:	4689      	mov	r9, r1
    33d4:	a33a      	add	r3, pc, #232	; (adr r3, 34c0 <mag_to_force+0x330>)
    33d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    33da:	e9dd 0100 	ldrd	r0, r1, [sp]
    33de:	47a0      	blx	r4
    33e0:	4602      	mov	r2, r0
    33e2:	460b      	mov	r3, r1
    33e4:	4640      	mov	r0, r8
    33e6:	4649      	mov	r1, r9
    33e8:	47b8      	blx	r7
    33ea:	4680      	mov	r8, r0
    33ec:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    33ee:	ee69 aaa9 	vmul.f32	s21, s19, s19
    33f2:	ee1a 0a90 	vmov	r0, s21
    33f6:	47a8      	blx	r5
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    33f8:	a333      	add	r3, pc, #204	; (adr r3, 34c8 <mag_to_force+0x338>)
    33fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    33fe:	47a0      	blx	r4
    3400:	4602      	mov	r2, r0
    3402:	460b      	mov	r3, r1
    3404:	4640      	mov	r0, r8
    3406:	4649      	mov	r1, r9
    3408:	47b8      	blx	r7
    340a:	4680      	mov	r8, r0
    340c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    340e:	ee68 7a29 	vmul.f32	s15, s16, s19
    3412:	ee17 0a90 	vmov	r0, s15
    3416:	47a8      	blx	r5
    3418:	e064      	b.n	34e4 <mag_to_force+0x354>
    341a:	bf00      	nop
    341c:	f3af 8000 	nop.w
    3420:	8f041462 	.word	0x8f041462
    3424:	3f6aef6f 	.word	0x3f6aef6f
    3428:	c28f5c29 	.word	0xc28f5c29
    342c:	402aa8f5 	.word	0x402aa8f5
    3430:	229e9079 	.word	0x229e9079
    3434:	3f6b8887 	.word	0x3f6b8887
    3438:	d646eb6e 	.word	0xd646eb6e
    343c:	3ea84b1c 	.word	0x3ea84b1c
    3440:	521dd696 	.word	0x521dd696
    3444:	3ea4ce9e 	.word	0x3ea4ce9e
    3448:	8b46aa0f 	.word	0x8b46aa0f
    344c:	3e91cf89 	.word	0x3e91cf89
    3450:	05b88164 	.word	0x05b88164
    3454:	3dcadc6f 	.word	0x3dcadc6f
    3458:	c6957207 	.word	0xc6957207
    345c:	3dba9bb1 	.word	0x3dba9bb1
    3460:	54aa19eb 	.word	0x54aa19eb
    3464:	3d9d014f 	.word	0x3d9d014f
    3468:	328a96c7 	.word	0x328a96c7
    346c:	3f3faac0 	.word	0x3f3faac0
    3470:	4fdf3b64 	.word	0x4fdf3b64
    3474:	4006978d 	.word	0x4006978d
    3478:	4662bae0 	.word	0x4662bae0
    347c:	3f507b78 	.word	0x3f507b78
    3480:	1dbb855a 	.word	0x1dbb855a
    3484:	3ea17b5b 	.word	0x3ea17b5b
    3488:	f2d94d7a 	.word	0xf2d94d7a
    348c:	3e9ac354 	.word	0x3e9ac354
    3490:	8ed8f651 	.word	0x8ed8f651
    3494:	3e821e90 	.word	0x3e821e90
    3498:	37757ffe 	.word	0x37757ffe
    349c:	3dc19631 	.word	0x3dc19631
    34a0:	8cce8eea 	.word	0x8cce8eea
    34a4:	3db7f827 	.word	0x3db7f827
    34a8:	7c871c2d 	.word	0x7c871c2d
    34ac:	3d953cf8 	.word	0x3d953cf8
    34b0:	94ccab3f 	.word	0x94ccab3f
    34b4:	3f72dfd6 	.word	0x3f72dfd6
    34b8:	eb851eb8 	.word	0xeb851eb8
    34bc:	40387851 	.word	0x40387851
    34c0:	9f51697f 	.word	0x9f51697f
    34c4:	3f7b0ee4 	.word	0x3f7b0ee4
    34c8:	fec17451 	.word	0xfec17451
    34cc:	3e9ad482 	.word	0x3e9ad482
    34d0:	000045d9 	.word	0x000045d9
    34d4:	00004681 	.word	0x00004681
    34d8:	00004319 	.word	0x00004319
    34dc:	0000431d 	.word	0x0000431d
    34e0:	00004be1 	.word	0x00004be1
    34e4:	a3f5      	add	r3, pc, #980	; (adr r3, 38bc <mag_to_force+0x72c>)
    34e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    34ea:	47a0      	blx	r4
    34ec:	4602      	mov	r2, r0
    34ee:	460b      	mov	r3, r1
    34f0:	4640      	mov	r0, r8
    34f2:	4649      	mov	r1, r9
    34f4:	47b0      	blx	r6
    34f6:	4680      	mov	r8, r0
    34f8:	4689      	mov	r9, r1
    34fa:	a3f2      	add	r3, pc, #968	; (adr r3, 38c4 <mag_to_force+0x734>)
    34fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3504:	47a0      	blx	r4
    3506:	4602      	mov	r2, r0
    3508:	460b      	mov	r3, r1
    350a:	4640      	mov	r0, r8
    350c:	4649      	mov	r1, r9
    350e:	47b8      	blx	r7
    3510:	4680      	mov	r8, r0
    3512:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3514:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3518:	ee17 0a90 	vmov	r0, s15
    351c:	47a8      	blx	r5
    351e:	a3eb      	add	r3, pc, #940	; (adr r3, 38cc <mag_to_force+0x73c>)
    3520:	e9d3 2300 	ldrd	r2, r3, [r3]
    3524:	47a0      	blx	r4
    3526:	4602      	mov	r2, r0
    3528:	460b      	mov	r3, r1
    352a:	4640      	mov	r0, r8
    352c:	4649      	mov	r1, r9
    352e:	47b8      	blx	r7
    3530:	4680      	mov	r8, r0
    3532:	4689      	mov	r9, r1
	
    3534:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3538:	ee17 0a90 	vmov	r0, s15
    353c:	47a8      	blx	r5
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    353e:	a3e5      	add	r3, pc, #916	; (adr r3, 38d4 <mag_to_force+0x744>)
    3540:	e9d3 2300 	ldrd	r2, r3, [r3]
    3544:	47a0      	blx	r4
    3546:	4602      	mov	r2, r0
    3548:	460b      	mov	r3, r1
    354a:	4640      	mov	r0, r8
    354c:	4649      	mov	r1, r9
    354e:	47b0      	blx	r6
    3550:	4680      	mov	r8, r0
    3552:	4689      	mov	r9, r1
	
    3554:	a3e1      	add	r3, pc, #900	; (adr r3, 38dc <mag_to_force+0x74c>)
    3556:	e9d3 2300 	ldrd	r2, r3, [r3]
    355a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    355e:	47a0      	blx	r4
    3560:	4602      	mov	r2, r0
    3562:	460b      	mov	r3, r1
    3564:	4640      	mov	r0, r8
    3566:	4649      	mov	r1, r9
    3568:	47b8      	blx	r7
    356a:	47d8      	blx	fp
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    356c:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3570:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3574:	ee29 9a09 	vmul.f32	s18, s18, s18
    3578:	ee78 8a89 	vadd.f32	s17, s17, s18
    357c:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3580:	ee18 0a90 	vmov	r0, s17
    3584:	47a8      	blx	r5
    3586:	4bcc      	ldr	r3, [pc, #816]	; (38b8 <mag_to_force+0x728>)
    3588:	4798      	blx	r3
    358a:	47d8      	blx	fp
    358c:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3590:	edda 8a01 	vldr	s17, [sl, #4]
    3594:	ee18 0a90 	vmov	r0, s17
    3598:	47a8      	blx	r5
    359a:	a39b      	add	r3, pc, #620	; (adr r3, 3808 <mag_to_force+0x678>)
    359c:	e9d3 2300 	ldrd	r2, r3, [r3]
    35a0:	47a0      	blx	r4
    35a2:	4602      	mov	r2, r0
    35a4:	460b      	mov	r3, r1
    35a6:	a19a      	add	r1, pc, #616	; (adr r1, 3810 <mag_to_force+0x680>)
    35a8:	e9d1 0100 	ldrd	r0, r1, [r1]
    35ac:	47b0      	blx	r6
    35ae:	4680      	mov	r8, r0
    35b0:	4689      	mov	r9, r1
    35b2:	ed9a 8a07 	vldr	s16, [sl, #28]
    35b6:	ee18 0a10 	vmov	r0, s16
    35ba:	47a8      	blx	r5
    35bc:	e9cd 0100 	strd	r0, r1, [sp]
    35c0:	a395      	add	r3, pc, #596	; (adr r3, 3818 <mag_to_force+0x688>)
    35c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    35c6:	47a0      	blx	r4
    35c8:	4602      	mov	r2, r0
    35ca:	460b      	mov	r3, r1
    35cc:	4640      	mov	r0, r8
    35ce:	4649      	mov	r1, r9
    35d0:	47b8      	blx	r7
    35d2:	4680      	mov	r8, r0
    35d4:	4689      	mov	r9, r1
    35d6:	ee28 9aa8 	vmul.f32	s18, s17, s17
    35da:	ee19 0a10 	vmov	r0, s18
    35de:	47a8      	blx	r5
    35e0:	a38f      	add	r3, pc, #572	; (adr r3, 3820 <mag_to_force+0x690>)
    35e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    35e6:	47a0      	blx	r4
    35e8:	4602      	mov	r2, r0
    35ea:	460b      	mov	r3, r1
    35ec:	4640      	mov	r0, r8
    35ee:	4649      	mov	r1, r9
    35f0:	47b8      	blx	r7
    35f2:	4680      	mov	r8, r0
    35f4:	4689      	mov	r9, r1
    35f6:	ee68 7a88 	vmul.f32	s15, s17, s16
    35fa:	ee17 0a90 	vmov	r0, s15
    35fe:	47a8      	blx	r5
    3600:	a389      	add	r3, pc, #548	; (adr r3, 3828 <mag_to_force+0x698>)
    3602:	e9d3 2300 	ldrd	r2, r3, [r3]
    3606:	47a0      	blx	r4
    3608:	4602      	mov	r2, r0
    360a:	460b      	mov	r3, r1
    360c:	4640      	mov	r0, r8
    360e:	4649      	mov	r1, r9
    3610:	47b0      	blx	r6
    3612:	4680      	mov	r8, r0
    3614:	4689      	mov	r9, r1
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3616:	ee28 aa08 	vmul.f32	s20, s16, s16
    361a:	ee1a 0a10 	vmov	r0, s20
    361e:	47a8      	blx	r5
    3620:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3624:	a382      	add	r3, pc, #520	; (adr r3, 3830 <mag_to_force+0x6a0>)
    3626:	e9d3 2300 	ldrd	r2, r3, [r3]
    362a:	47a0      	blx	r4
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    362c:	4602      	mov	r2, r0
    362e:	460b      	mov	r3, r1
    3630:	4640      	mov	r0, r8
    3632:	4649      	mov	r1, r9
    3634:	47b8      	blx	r7
    3636:	4680      	mov	r8, r0
    3638:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    363a:	ee68 7a09 	vmul.f32	s15, s16, s18
    363e:	ee17 0a90 	vmov	r0, s15
    3642:	47a8      	blx	r5
    3644:	a37c      	add	r3, pc, #496	; (adr r3, 3838 <mag_to_force+0x6a8>)
    3646:	e9d3 2300 	ldrd	r2, r3, [r3]
    364a:	47a0      	blx	r4
    364c:	4602      	mov	r2, r0
    364e:	460b      	mov	r3, r1
    3650:	4640      	mov	r0, r8
    3652:	4649      	mov	r1, r9
    3654:	47b8      	blx	r7
    3656:	4680      	mov	r8, r0
    3658:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    365a:	ee68 7a8a 	vmul.f32	s15, s17, s20
    365e:	ee17 0a90 	vmov	r0, s15
    3662:	47a8      	blx	r5
    3664:	a376      	add	r3, pc, #472	; (adr r3, 3840 <mag_to_force+0x6b0>)
    3666:	e9d3 2300 	ldrd	r2, r3, [r3]
    366a:	47a0      	blx	r4
    366c:	4602      	mov	r2, r0
    366e:	460b      	mov	r3, r1
    3670:	4640      	mov	r0, r8
    3672:	4649      	mov	r1, r9
    3674:	47b0      	blx	r6
    3676:	4680      	mov	r8, r0
    3678:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    367a:	ee68 7a0a 	vmul.f32	s15, s16, s20
    367e:	ee17 0a90 	vmov	r0, s15
    3682:	47a8      	blx	r5
    3684:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3688:	a36f      	add	r3, pc, #444	; (adr r3, 3848 <mag_to_force+0x6b8>)
    368a:	e9d3 2300 	ldrd	r2, r3, [r3]
    368e:	47a0      	blx	r4
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3690:	4602      	mov	r2, r0
    3692:	460b      	mov	r3, r1
    3694:	4640      	mov	r0, r8
    3696:	4649      	mov	r1, r9
    3698:	47b8      	blx	r7
    369a:	47d8      	blx	fp
    369c:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36a0:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36a4:	ed9a 9a04 	vldr	s18, [sl, #16]
    36a8:	ee19 0a10 	vmov	r0, s18
    36ac:	47a8      	blx	r5
    36ae:	a368      	add	r3, pc, #416	; (adr r3, 3850 <mag_to_force+0x6c0>)
    36b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36b4:	47a0      	blx	r4
    36b6:	4602      	mov	r2, r0
    36b8:	460b      	mov	r3, r1
    36ba:	a167      	add	r1, pc, #412	; (adr r1, 3858 <mag_to_force+0x6c8>)
    36bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    36c0:	47b0      	blx	r6
    36c2:	4680      	mov	r8, r0
    36c4:	4689      	mov	r9, r1
    36c6:	a366      	add	r3, pc, #408	; (adr r3, 3860 <mag_to_force+0x6d0>)
    36c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    36cc:	e9dd 0100 	ldrd	r0, r1, [sp]
    36d0:	47a0      	blx	r4
    36d2:	4602      	mov	r2, r0
    36d4:	460b      	mov	r3, r1
    36d6:	4640      	mov	r0, r8
    36d8:	4649      	mov	r1, r9
    36da:	47b8      	blx	r7
    36dc:	4680      	mov	r8, r0
    36de:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36e0:	ee69 9a09 	vmul.f32	s19, s18, s18
    36e4:	ee19 0a90 	vmov	r0, s19
    36e8:	47a8      	blx	r5
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36ea:	a35f      	add	r3, pc, #380	; (adr r3, 3868 <mag_to_force+0x6d8>)
    36ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f0:	47a0      	blx	r4
    36f2:	4602      	mov	r2, r0
    36f4:	460b      	mov	r3, r1
    36f6:	4640      	mov	r0, r8
    36f8:	4649      	mov	r1, r9
    36fa:	47b0      	blx	r6
    36fc:	4680      	mov	r8, r0
    36fe:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3700:	ee68 7a09 	vmul.f32	s15, s16, s18
    3704:	ee17 0a90 	vmov	r0, s15
    3708:	47a8      	blx	r5
    370a:	a359      	add	r3, pc, #356	; (adr r3, 3870 <mag_to_force+0x6e0>)
    370c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3710:	47a0      	blx	r4
    3712:	4602      	mov	r2, r0
    3714:	460b      	mov	r3, r1
    3716:	4640      	mov	r0, r8
    3718:	4649      	mov	r1, r9
    371a:	47b0      	blx	r6
    371c:	4680      	mov	r8, r0
    371e:	4689      	mov	r9, r1
    3720:	a355      	add	r3, pc, #340	; (adr r3, 3878 <mag_to_force+0x6e8>)
    3722:	e9d3 2300 	ldrd	r2, r3, [r3]
    3726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    372a:	47a0      	blx	r4
    372c:	4602      	mov	r2, r0
    372e:	460b      	mov	r3, r1
    3730:	4640      	mov	r0, r8
    3732:	4649      	mov	r1, r9
    3734:	47b8      	blx	r7
    3736:	4680      	mov	r8, r0
    3738:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    373a:	ee68 7a29 	vmul.f32	s15, s16, s19
    373e:	ee17 0a90 	vmov	r0, s15
    3742:	47a8      	blx	r5
    3744:	a34e      	add	r3, pc, #312	; (adr r3, 3880 <mag_to_force+0x6f0>)
    3746:	e9d3 2300 	ldrd	r2, r3, [r3]
    374a:	47a0      	blx	r4
    374c:	4602      	mov	r2, r0
    374e:	460b      	mov	r3, r1
    3750:	4640      	mov	r0, r8
    3752:	4649      	mov	r1, r9
    3754:	47b0      	blx	r6
    3756:	4680      	mov	r8, r0
    3758:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    375a:	ee6a 7a09 	vmul.f32	s15, s20, s18
    375e:	ee17 0a90 	vmov	r0, s15
    3762:	47a8      	blx	r5
    3764:	a348      	add	r3, pc, #288	; (adr r3, 3888 <mag_to_force+0x6f8>)
    3766:	e9d3 2300 	ldrd	r2, r3, [r3]
    376a:	47a0      	blx	r4
    376c:	4602      	mov	r2, r0
    376e:	460b      	mov	r3, r1
    3770:	4640      	mov	r0, r8
    3772:	4649      	mov	r1, r9
    3774:	47b0      	blx	r6
    3776:	4680      	mov	r8, r0
    3778:	4689      	mov	r9, r1
    377a:	a345      	add	r3, pc, #276	; (adr r3, 3890 <mag_to_force+0x700>)
    377c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3784:	47a0      	blx	r4
    3786:	4602      	mov	r2, r0
    3788:	460b      	mov	r3, r1
    378a:	4640      	mov	r0, r8
    378c:	4649      	mov	r1, r9
    378e:	47b8      	blx	r7
    3790:	47d8      	blx	fp
    3792:	ee09 0a10 	vmov	s18, r0
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3796:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    379a:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    379e:	ee19 0a90 	vmov	r0, s19
    37a2:	47a8      	blx	r5
    37a4:	a33c      	add	r3, pc, #240	; (adr r3, 3898 <mag_to_force+0x708>)
    37a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    37aa:	47a0      	blx	r4
    37ac:	4602      	mov	r2, r0
    37ae:	460b      	mov	r3, r1
    37b0:	a13b      	add	r1, pc, #236	; (adr r1, 38a0 <mag_to_force+0x710>)
    37b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    37b6:	47b0      	blx	r6
    37b8:	4680      	mov	r8, r0
    37ba:	4689      	mov	r9, r1
    37bc:	a33a      	add	r3, pc, #232	; (adr r3, 38a8 <mag_to_force+0x718>)
    37be:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c2:	e9dd 0100 	ldrd	r0, r1, [sp]
    37c6:	47a0      	blx	r4
    37c8:	4602      	mov	r2, r0
    37ca:	460b      	mov	r3, r1
    37cc:	4640      	mov	r0, r8
    37ce:	4649      	mov	r1, r9
    37d0:	47b8      	blx	r7
    37d2:	4680      	mov	r8, r0
    37d4:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    37d6:	ee69 aaa9 	vmul.f32	s21, s19, s19
    37da:	ee1a 0a90 	vmov	r0, s21
    37de:	47a8      	blx	r5
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    37e0:	a333      	add	r3, pc, #204	; (adr r3, 38b0 <mag_to_force+0x720>)
    37e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    37e6:	47a0      	blx	r4
    37e8:	4602      	mov	r2, r0
    37ea:	460b      	mov	r3, r1
    37ec:	4640      	mov	r0, r8
    37ee:	4649      	mov	r1, r9
    37f0:	47b8      	blx	r7
    37f2:	4680      	mov	r8, r0
    37f4:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    37f6:	ee68 7a29 	vmul.f32	s15, s16, s19
    37fa:	ee17 0a90 	vmov	r0, s15
    37fe:	47a8      	blx	r5
    3800:	e070      	b.n	38e4 <mag_to_force+0x754>
    3802:	bf00      	nop
    3804:	f3af 8000 	nop.w
    3808:	412c1a3a 	.word	0x412c1a3a
    380c:	3f3286eb 	.word	0x3f3286eb
    3810:	bc6a7efa 	.word	0xbc6a7efa
    3814:	3ff69374 	.word	0x3ff69374
    3818:	92beb405 	.word	0x92beb405
    381c:	3f36e5f5 	.word	0x3f36e5f5
    3820:	a908d438 	.word	0xa908d438
    3824:	3e864e96 	.word	0x3e864e96
    3828:	17c30410 	.word	0x17c30410
    382c:	3e8a1af8 	.word	0x3e8a1af8
    3830:	3d66d634 	.word	0x3d66d634
    3834:	3e632932 	.word	0x3e632932
    3838:	1b4047b2 	.word	0x1b4047b2
    383c:	3da8a10a 	.word	0x3da8a10a
    3840:	6fcf44ac 	.word	0x6fcf44ac
    3844:	3da4129b 	.word	0x3da4129b
    3848:	29e54c52 	.word	0x29e54c52
    384c:	3d73af87 	.word	0x3d73af87
    3850:	80f98fa3 	.word	0x80f98fa3
    3854:	3f726740 	.word	0x3f726740
    3858:	ed916873 	.word	0xed916873
    385c:	401f3f7c 	.word	0x401f3f7c
    3860:	3dfb0d52 	.word	0x3dfb0d52
    3864:	3f654eb1 	.word	0x3f654eb1
    3868:	a7d49e3c 	.word	0xa7d49e3c
    386c:	3e7ceff5 	.word	0x3e7ceff5
    3870:	4fba36fa 	.word	0x4fba36fa
    3874:	3ea8b079 	.word	0x3ea8b079
    3878:	d77b216a 	.word	0xd77b216a
    387c:	3e91a9bd 	.word	0x3e91a9bd
    3880:	9612a3e2 	.word	0x9612a3e2
    3884:	3daa2579 	.word	0x3daa2579
    3888:	82163668 	.word	0x82163668
    388c:	3dbcbdc1 	.word	0x3dbcbdc1
    3890:	9d1f8878 	.word	0x9d1f8878
    3894:	3da13b46 	.word	0x3da13b46
    3898:	dad31fcd 	.word	0xdad31fcd
    389c:	3f77b634 	.word	0x3f77b634
    38a0:	1eb851ec 	.word	0x1eb851ec
    38a4:	402c6b85 	.word	0x402c6b85
    38a8:	bdcad14a 	.word	0xbdcad14a
    38ac:	3f70acc0 	.word	0x3f70acc0
    38b0:	60693e8b 	.word	0x60693e8b
    38b4:	3ea1b6a0 	.word	0x3ea1b6a0
    38b8:	000040d9 	.word	0x000040d9
    38bc:	f40c67fe 	.word	0xf40c67fe
    38c0:	3ea64c02 	.word	0x3ea64c02
    38c4:	02588cee 	.word	0x02588cee
    38c8:	3ea1c2a7 	.word	0x3ea1c2a7
    38cc:	884399b8 	.word	0x884399b8
    38d0:	3d9e314d 	.word	0x3d9e314d
    38d4:	3cc5c3bb 	.word	0x3cc5c3bb
    38d8:	3dbb0978 	.word	0x3dbb0978
    38dc:	fe5cd623 	.word	0xfe5cd623
    38e0:	3da74f44 	.word	0x3da74f44
    38e4:	a3f6      	add	r3, pc, #984	; (adr r3, 3cc0 <mag_to_force+0xb30>)
    38e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ea:	47a0      	blx	r4
    38ec:	4602      	mov	r2, r0
    38ee:	460b      	mov	r3, r1
    38f0:	4640      	mov	r0, r8
    38f2:	4649      	mov	r1, r9
    38f4:	47b0      	blx	r6
    38f6:	4680      	mov	r8, r0
    38f8:	4689      	mov	r9, r1
    38fa:	a3f3      	add	r3, pc, #972	; (adr r3, 3cc8 <mag_to_force+0xb38>)
    38fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3904:	47a0      	blx	r4
    3906:	4602      	mov	r2, r0
    3908:	460b      	mov	r3, r1
    390a:	4640      	mov	r0, r8
    390c:	4649      	mov	r1, r9
    390e:	47b8      	blx	r7
    3910:	4680      	mov	r8, r0
    3912:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3914:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3918:	ee17 0a90 	vmov	r0, s15
    391c:	47a8      	blx	r5
    391e:	a3ec      	add	r3, pc, #944	; (adr r3, 3cd0 <mag_to_force+0xb40>)
    3920:	e9d3 2300 	ldrd	r2, r3, [r3]
    3924:	47a0      	blx	r4
    3926:	4602      	mov	r2, r0
    3928:	460b      	mov	r3, r1
    392a:	4640      	mov	r0, r8
    392c:	4649      	mov	r1, r9
    392e:	47b8      	blx	r7
    3930:	4680      	mov	r8, r0
    3932:	4689      	mov	r9, r1
	
    3934:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3938:	ee17 0a90 	vmov	r0, s15
    393c:	47a8      	blx	r5
    393e:	a3e6      	add	r3, pc, #920	; (adr r3, 3cd8 <mag_to_force+0xb48>)
    3940:	e9d3 2300 	ldrd	r2, r3, [r3]
    3944:	47a0      	blx	r4
    3946:	4602      	mov	r2, r0
    3948:	460b      	mov	r3, r1
    394a:	4640      	mov	r0, r8
    394c:	4649      	mov	r1, r9
    394e:	47b0      	blx	r6
    3950:	4680      	mov	r8, r0
    3952:	4689      	mov	r9, r1
    3954:	a3e2      	add	r3, pc, #904	; (adr r3, 3ce0 <mag_to_force+0xb50>)
    3956:	e9d3 2300 	ldrd	r2, r3, [r3]
    395a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    395e:	47a0      	blx	r4
    3960:	4602      	mov	r2, r0
    3962:	460b      	mov	r3, r1
    3964:	4640      	mov	r0, r8
    3966:	4649      	mov	r1, r9
    3968:	47b8      	blx	r7
    396a:	47d8      	blx	fp
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    396c:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3970:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3974:	ee29 9a09 	vmul.f32	s18, s18, s18
    3978:	ee78 8a89 	vadd.f32	s17, s17, s18
    397c:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3980:	ee18 0a90 	vmov	r0, s17
    3984:	47a8      	blx	r5
    3986:	4bcc      	ldr	r3, [pc, #816]	; (3cb8 <mag_to_force+0xb28>)
    3988:	4798      	blx	r3
    398a:	47d8      	blx	fp
    398c:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
	
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3990:	ed9a 8a02 	vldr	s16, [sl, #8]
    3994:	ee18 0a10 	vmov	r0, s16
    3998:	47a8      	blx	r5
    399a:	a39b      	add	r3, pc, #620	; (adr r3, 3c08 <mag_to_force+0xa78>)
    399c:	e9d3 2300 	ldrd	r2, r3, [r3]
    39a0:	47a0      	blx	r4
    39a2:	4602      	mov	r2, r0
    39a4:	460b      	mov	r3, r1
    39a6:	a19a      	add	r1, pc, #616	; (adr r1, 3c10 <mag_to_force+0xa80>)
    39a8:	e9d1 0100 	ldrd	r0, r1, [r1]
    39ac:	47b0      	blx	r6
    39ae:	4680      	mov	r8, r0
    39b0:	4689      	mov	r9, r1
    39b2:	edda 8a08 	vldr	s17, [sl, #32]
    39b6:	ee18 0a90 	vmov	r0, s17
    39ba:	47a8      	blx	r5
    39bc:	e9cd 0100 	strd	r0, r1, [sp]
    39c0:	a395      	add	r3, pc, #596	; (adr r3, 3c18 <mag_to_force+0xa88>)
    39c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39c6:	47a0      	blx	r4
    39c8:	4602      	mov	r2, r0
    39ca:	460b      	mov	r3, r1
    39cc:	4640      	mov	r0, r8
    39ce:	4649      	mov	r1, r9
    39d0:	47b0      	blx	r6
    39d2:	4680      	mov	r8, r0
    39d4:	4689      	mov	r9, r1
    39d6:	ee28 9a08 	vmul.f32	s18, s16, s16
    39da:	ee19 0a10 	vmov	r0, s18
    39de:	47a8      	blx	r5
    39e0:	a38f      	add	r3, pc, #572	; (adr r3, 3c20 <mag_to_force+0xa90>)
    39e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39e6:	47a0      	blx	r4
    39e8:	4602      	mov	r2, r0
    39ea:	460b      	mov	r3, r1
    39ec:	4640      	mov	r0, r8
    39ee:	4649      	mov	r1, r9
    39f0:	47b0      	blx	r6
    39f2:	4680      	mov	r8, r0
    39f4:	4689      	mov	r9, r1
    39f6:	ee68 7a28 	vmul.f32	s15, s16, s17
    39fa:	ee17 0a90 	vmov	r0, s15
    39fe:	47a8      	blx	r5
    3a00:	a389      	add	r3, pc, #548	; (adr r3, 3c28 <mag_to_force+0xa98>)
    3a02:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a06:	47a0      	blx	r4
    3a08:	4602      	mov	r2, r0
    3a0a:	460b      	mov	r3, r1
    3a0c:	4640      	mov	r0, r8
    3a0e:	4649      	mov	r1, r9
    3a10:	47b0      	blx	r6
    3a12:	4680      	mov	r8, r0
    3a14:	4689      	mov	r9, r1
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a16:	ee68 9aa8 	vmul.f32	s19, s17, s17
    3a1a:	ee19 0a90 	vmov	r0, s19
    3a1e:	47a8      	blx	r5
    3a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3a24:	a382      	add	r3, pc, #520	; (adr r3, 3c30 <mag_to_force+0xaa0>)
    3a26:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a2a:	47a0      	blx	r4
    3a2c:	4602      	mov	r2, r0
    3a2e:	460b      	mov	r3, r1
    3a30:	4640      	mov	r0, r8
    3a32:	4649      	mov	r1, r9
    3a34:	47b0      	blx	r6
    3a36:	4680      	mov	r8, r0
    3a38:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a3a:	ee68 7a89 	vmul.f32	s15, s17, s18
    3a3e:	ee17 0a90 	vmov	r0, s15
    3a42:	47a8      	blx	r5
    3a44:	a37c      	add	r3, pc, #496	; (adr r3, 3c38 <mag_to_force+0xaa8>)
    3a46:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a4a:	47a0      	blx	r4
    3a4c:	4602      	mov	r2, r0
    3a4e:	460b      	mov	r3, r1
    3a50:	4640      	mov	r0, r8
    3a52:	4649      	mov	r1, r9
    3a54:	47b0      	blx	r6
    3a56:	4680      	mov	r8, r0
    3a58:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3a5a:	ee68 7a29 	vmul.f32	s15, s16, s19
    3a5e:	ee17 0a90 	vmov	r0, s15
    3a62:	47a8      	blx	r5
    3a64:	a376      	add	r3, pc, #472	; (adr r3, 3c40 <mag_to_force+0xab0>)
    3a66:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a6a:	47a0      	blx	r4
    3a6c:	4602      	mov	r2, r0
    3a6e:	460b      	mov	r3, r1
    3a70:	4640      	mov	r0, r8
    3a72:	4649      	mov	r1, r9
    3a74:	47b0      	blx	r6
    3a76:	4680      	mov	r8, r0
    3a78:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3a7a:	ee68 7aa9 	vmul.f32	s15, s17, s19
    3a7e:	ee17 0a90 	vmov	r0, s15
    3a82:	47a8      	blx	r5
    3a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3a88:	a36f      	add	r3, pc, #444	; (adr r3, 3c48 <mag_to_force+0xab8>)
    3a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a8e:	47a0      	blx	r4
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3a90:	4602      	mov	r2, r0
    3a92:	460b      	mov	r3, r1
    3a94:	4640      	mov	r0, r8
    3a96:	4649      	mov	r1, r9
    3a98:	47b0      	blx	r6
    3a9a:	47d8      	blx	fp
    3a9c:	ee08 0a10 	vmov	s16, r0
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3aa0:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3aa4:	ed9a 9a05 	vldr	s18, [sl, #20]
    3aa8:	ee19 0a10 	vmov	r0, s18
    3aac:	47a8      	blx	r5
    3aae:	a368      	add	r3, pc, #416	; (adr r3, 3c50 <mag_to_force+0xac0>)
    3ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ab4:	47a0      	blx	r4
    3ab6:	a368      	add	r3, pc, #416	; (adr r3, 3c58 <mag_to_force+0xac8>)
    3ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3abc:	47b0      	blx	r6
    3abe:	4680      	mov	r8, r0
    3ac0:	4689      	mov	r9, r1
    3ac2:	a367      	add	r3, pc, #412	; (adr r3, 3c60 <mag_to_force+0xad0>)
    3ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3acc:	47a0      	blx	r4
    3ace:	4602      	mov	r2, r0
    3ad0:	460b      	mov	r3, r1
    3ad2:	4640      	mov	r0, r8
    3ad4:	4649      	mov	r1, r9
    3ad6:	47b0      	blx	r6
    3ad8:	4680      	mov	r8, r0
    3ada:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3adc:	ee29 aa09 	vmul.f32	s20, s18, s18
    3ae0:	ee1a 0a10 	vmov	r0, s20
    3ae4:	47a8      	blx	r5
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3ae6:	a360      	add	r3, pc, #384	; (adr r3, 3c68 <mag_to_force+0xad8>)
    3ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3aec:	47a0      	blx	r4
    3aee:	4602      	mov	r2, r0
    3af0:	460b      	mov	r3, r1
    3af2:	4640      	mov	r0, r8
    3af4:	4649      	mov	r1, r9
    3af6:	47b8      	blx	r7
    3af8:	4680      	mov	r8, r0
    3afa:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3afc:	462e      	mov	r6, r5
    3afe:	ee68 7a89 	vmul.f32	s15, s17, s18
    3b02:	ee17 0a90 	vmov	r0, s15
    3b06:	47a8      	blx	r5
    3b08:	a359      	add	r3, pc, #356	; (adr r3, 3c70 <mag_to_force+0xae0>)
    3b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b0e:	47a0      	blx	r4
    3b10:	463d      	mov	r5, r7
    3b12:	4602      	mov	r2, r0
    3b14:	460b      	mov	r3, r1
    3b16:	4640      	mov	r0, r8
    3b18:	4649      	mov	r1, r9
    3b1a:	47b8      	blx	r7
    3b1c:	4680      	mov	r8, r0
    3b1e:	4689      	mov	r9, r1
    3b20:	a355      	add	r3, pc, #340	; (adr r3, 3c78 <mag_to_force+0xae8>)
    3b22:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3b2a:	47a0      	blx	r4
    3b2c:	4f63      	ldr	r7, [pc, #396]	; (3cbc <mag_to_force+0xb2c>)
    3b2e:	4602      	mov	r2, r0
    3b30:	460b      	mov	r3, r1
    3b32:	4640      	mov	r0, r8
    3b34:	4649      	mov	r1, r9
    3b36:	47b8      	blx	r7
    3b38:	4680      	mov	r8, r0
    3b3a:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3b3c:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3b40:	ee17 0a90 	vmov	r0, s15
    3b44:	47b0      	blx	r6
    3b46:	a34e      	add	r3, pc, #312	; (adr r3, 3c80 <mag_to_force+0xaf0>)
    3b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b4c:	47a0      	blx	r4
    3b4e:	4602      	mov	r2, r0
    3b50:	460b      	mov	r3, r1
    3b52:	4640      	mov	r0, r8
    3b54:	4649      	mov	r1, r9
    3b56:	47a8      	blx	r5
    3b58:	4680      	mov	r8, r0
    3b5a:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3b5c:	ee69 7a89 	vmul.f32	s15, s19, s18
    3b60:	ee17 0a90 	vmov	r0, s15
    3b64:	47b0      	blx	r6
    3b66:	a348      	add	r3, pc, #288	; (adr r3, 3c88 <mag_to_force+0xaf8>)
    3b68:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b6c:	47a0      	blx	r4
    3b6e:	4602      	mov	r2, r0
    3b70:	460b      	mov	r3, r1
    3b72:	4640      	mov	r0, r8
    3b74:	4649      	mov	r1, r9
    3b76:	47a8      	blx	r5
    3b78:	4680      	mov	r8, r0
    3b7a:	4689      	mov	r9, r1
	
    3b7c:	a344      	add	r3, pc, #272	; (adr r3, 3c90 <mag_to_force+0xb00>)
    3b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3b86:	47a0      	blx	r4
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3b88:	4602      	mov	r2, r0
    3b8a:	460b      	mov	r3, r1
    3b8c:	4640      	mov	r0, r8
    3b8e:	4649      	mov	r1, r9
    3b90:	47b8      	blx	r7
    3b92:	47d8      	blx	fp
    3b94:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3b98:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3b9c:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    3ba0:	ee19 0a10 	vmov	r0, s18
    3ba4:	47b0      	blx	r6
    3ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3baa:	a33b      	add	r3, pc, #236	; (adr r3, 3c98 <mag_to_force+0xb08>)
    3bac:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bb0:	47a0      	blx	r4
    3bb2:	4602      	mov	r2, r0
    3bb4:	460b      	mov	r3, r1
    3bb6:	a13a      	add	r1, pc, #232	; (adr r1, 3ca0 <mag_to_force+0xb10>)
    3bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
    3bbc:	47b8      	blx	r7
    3bbe:	4680      	mov	r8, r0
    3bc0:	4689      	mov	r9, r1
    3bc2:	a339      	add	r3, pc, #228	; (adr r3, 3ca8 <mag_to_force+0xb18>)
    3bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3bcc:	47a0      	blx	r4
    3bce:	4602      	mov	r2, r0
    3bd0:	460b      	mov	r3, r1
    3bd2:	4640      	mov	r0, r8
    3bd4:	4649      	mov	r1, r9
    3bd6:	47a8      	blx	r5
    3bd8:	4680      	mov	r8, r0
    3bda:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3bdc:	ee69 7a09 	vmul.f32	s15, s18, s18
    3be0:	ee17 0a90 	vmov	r0, s15
    3be4:	47b0      	blx	r6
    3be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3bea:	a331      	add	r3, pc, #196	; (adr r3, 3cb0 <mag_to_force+0xb20>)
    3bec:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bf0:	47a0      	blx	r4
    3bf2:	4602      	mov	r2, r0
    3bf4:	460b      	mov	r3, r1
    3bf6:	4640      	mov	r0, r8
    3bf8:	4649      	mov	r1, r9
    3bfa:	47a8      	blx	r5
    3bfc:	4680      	mov	r8, r0
    3bfe:	4689      	mov	r9, r1
    3c00:	e072      	b.n	3ce8 <mag_to_force+0xb58>
    3c02:	bf00      	nop
    3c04:	f3af 8000 	nop.w
    3c08:	6b50b0f2 	.word	0x6b50b0f2
    3c0c:	3f6c779a 	.word	0x3f6c779a
    3c10:	c28f5c29 	.word	0xc28f5c29
    3c14:	c024a8f5 	.word	0xc024a8f5
    3c18:	d5171e2a 	.word	0xd5171e2a
    3c1c:	3f68a222 	.word	0x3f68a222
    3c20:	69edc5c6 	.word	0x69edc5c6
    3c24:	3ea5a9a9 	.word	0x3ea5a9a9
    3c28:	81bc997e 	.word	0x81bc997e
    3c2c:	3ea8aec1 	.word	0x3ea8aec1
    3c30:	de9fb9ed 	.word	0xde9fb9ed
    3c34:	3e9247cb 	.word	0x3e9247cb
    3c38:	82393435 	.word	0x82393435
    3c3c:	3dc8377c 	.word	0x3dc8377c
    3c40:	e19c6262 	.word	0xe19c6262
    3c44:	3dc1773a 	.word	0x3dc1773a
    3c48:	7476128f 	.word	0x7476128f
    3c4c:	3da06d3c 	.word	0x3da06d3c
    3c50:	b0fadf2f 	.word	0xb0fadf2f
    3c54:	3f65a8de 	.word	0x3f65a8de
    3c58:	9ba5e354 	.word	0x9ba5e354
    3c5c:	400120c4 	.word	0x400120c4
    3c60:	ef1fddec 	.word	0xef1fddec
    3c64:	3f432b55 	.word	0x3f432b55
    3c68:	ebb865dc 	.word	0xebb865dc
    3c6c:	3ea2ee70 	.word	0x3ea2ee70
    3c70:	ea8666cf 	.word	0xea8666cf
    3c74:	3e853bb5 	.word	0x3e853bb5
    3c78:	5799a806 	.word	0x5799a806
    3c7c:	3e6193c0 	.word	0x3e6193c0
    3c80:	cece3cda 	.word	0xcece3cda
    3c84:	3dc62920 	.word	0x3dc62920
    3c88:	d5564f58 	.word	0xd5564f58
    3c8c:	3d683df5 	.word	0x3d683df5
    3c90:	664dc709 	.word	0x664dc709
    3c94:	3d626c2b 	.word	0x3d626c2b
    3c98:	c4cdfaca 	.word	0xc4cdfaca
    3c9c:	3f762174 	.word	0x3f762174
    3ca0:	f5c28f5c 	.word	0xf5c28f5c
    3ca4:	40399c28 	.word	0x40399c28
    3ca8:	5cc42635 	.word	0x5cc42635
    3cac:	3f7db552 	.word	0x3f7db552
    3cb0:	88e4e2e6 	.word	0x88e4e2e6
    3cb4:	3eb215f9 	.word	0x3eb215f9
    3cb8:	000040d9 	.word	0x000040d9
    3cbc:	00004319 	.word	0x00004319
    3cc0:	02547d8d 	.word	0x02547d8d
    3cc4:	3ea9b22c 	.word	0x3ea9b22c
    3cc8:	227c1fc4 	.word	0x227c1fc4
    3ccc:	3e96b3f3 	.word	0x3e96b3f3
    3cd0:	f946a57c 	.word	0xf946a57c
    3cd4:	3db0a587 	.word	0x3db0a587
    3cd8:	82163668 	.word	0x82163668
    3cdc:	3dbcbdc1 	.word	0x3dbcbdc1
    3ce0:	02de4486 	.word	0x02de4486
    3ce4:	3d9a8e2f 	.word	0x3d9a8e2f
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3ce8:	a336      	add	r3, pc, #216	; (adr r3, 3dc4 <mag_to_force+0xc34>)
    3cea:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3cf2:	47a0      	blx	r4
    3cf4:	4602      	mov	r2, r0
    3cf6:	460b      	mov	r3, r1
    3cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3cfc:	47a0      	blx	r4
    3cfe:	4602      	mov	r2, r0
    3d00:	460b      	mov	r3, r1
    3d02:	4640      	mov	r0, r8
    3d04:	4649      	mov	r1, r9
    3d06:	47b8      	blx	r7
    3d08:	4680      	mov	r8, r0
    3d0a:	4689      	mov	r9, r1
    3d0c:	a32f      	add	r3, pc, #188	; (adr r3, 3dcc <mag_to_force+0xc3c>)
    3d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d16:	47a0      	blx	r4
    3d18:	4602      	mov	r2, r0
    3d1a:	460b      	mov	r3, r1
    3d1c:	4640      	mov	r0, r8
    3d1e:	4649      	mov	r1, r9
    3d20:	47a8      	blx	r5
    3d22:	4680      	mov	r8, r0
    3d24:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3d26:	a32b      	add	r3, pc, #172	; (adr r3, 3dd4 <mag_to_force+0xc44>)
    3d28:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3d30:	47a0      	blx	r4
    3d32:	4602      	mov	r2, r0
    3d34:	460b      	mov	r3, r1
    3d36:	e9dd 0100 	ldrd	r0, r1, [sp]
    3d3a:	47a0      	blx	r4
    3d3c:	4602      	mov	r2, r0
    3d3e:	460b      	mov	r3, r1
    3d40:	4640      	mov	r0, r8
    3d42:	4649      	mov	r1, r9
    3d44:	47a8      	blx	r5
    3d46:	4680      	mov	r8, r0
    3d48:	4689      	mov	r9, r1
	
    3d4a:	a324      	add	r3, pc, #144	; (adr r3, 3ddc <mag_to_force+0xc4c>)
    3d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3d54:	47a0      	blx	r4
    3d56:	4602      	mov	r2, r0
    3d58:	460b      	mov	r3, r1
    3d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d5e:	47a0      	blx	r4
    3d60:	4602      	mov	r2, r0
    3d62:	460b      	mov	r3, r1
    3d64:	4640      	mov	r0, r8
    3d66:	4649      	mov	r1, r9
    3d68:	47b8      	blx	r7
    3d6a:	4680      	mov	r8, r0
    3d6c:	4689      	mov	r9, r1
    3d6e:	a31d      	add	r3, pc, #116	; (adr r3, 3de4 <mag_to_force+0xc54>)
    3d70:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d78:	47a0      	blx	r4
	/*
    3d7a:	4602      	mov	r2, r0
    3d7c:	460b      	mov	r3, r1
    3d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
    3d82:	47a0      	blx	r4
	
    3d84:	4602      	mov	r2, r0
    3d86:	460b      	mov	r3, r1
    3d88:	4640      	mov	r0, r8
    3d8a:	4649      	mov	r1, r9
    3d8c:	47a8      	blx	r5
    3d8e:	47d8      	blx	fp
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3d90:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3d94:	ee28 8a08 	vmul.f32	s16, s16, s16
    3d98:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3d9c:	ee38 8a28 	vadd.f32	s16, s16, s17
    3da0:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3da4:	ee18 0a10 	vmov	r0, s16
    3da8:	47b0      	blx	r6
    3daa:	4b05      	ldr	r3, [pc, #20]	; (3dc0 <mag_to_force+0xc30>)
    3dac:	4798      	blx	r3
    3dae:	47d8      	blx	fp
    3db0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
	
	sensor_row->force_z_bottom = 35.2728 + (-0.0130*sensor_row->b_r_top) + (0.0084*hall_sensor_bottom->data.z);
	sensor_row->force_r_bottom = 9.9403 + (-0.0075*sensor_row->b_r_top) + (0.0013*hall_sensor_bottom->data.z);
	*/
	
    3db4:	b009      	add	sp, #36	; 0x24
    3db6:	ecbd 8b06 	vpop	{d8-d10}
    3dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dbe:	bf00      	nop
    3dc0:	000040d9 	.word	0x000040d9
    3dc4:	5a723736 	.word	0x5a723736
    3dc8:	3ea77381 	.word	0x3ea77381
    3dcc:	4e8b8a55 	.word	0x4e8b8a55
    3dd0:	3ea47f97 	.word	0x3ea47f97
    3dd4:	a48fe74d 	.word	0xa48fe74d
    3dd8:	3dce7643 	.word	0x3dce7643
    3ddc:	e61b6f11 	.word	0xe61b6f11
    3de0:	3db71428 	.word	0x3db71428
    3de4:	447e7fdf 	.word	0x447e7fdf
    3de8:	3dacd9e7 	.word	0x3dacd9e7

00003dec <RS>:
#include "math.h"
#include <Tactile_Sensor/neural_spikes.h>

void RS(struct fneuron_t *neuron) {
	// create a "regular spiking" floating point neuron
	neuron->a = 0.02;
    3dec:	4b07      	ldr	r3, [pc, #28]	; (3e0c <RS+0x20>)
    3dee:	6003      	str	r3, [r0, #0]
	neuron->b = 0.2;
    3df0:	4b07      	ldr	r3, [pc, #28]	; (3e10 <RS+0x24>)
    3df2:	6043      	str	r3, [r0, #4]
	neuron->c = -65;
    3df4:	4b07      	ldr	r3, [pc, #28]	; (3e14 <RS+0x28>)
    3df6:	6083      	str	r3, [r0, #8]
	neuron->d = 6;
    3df8:	4b07      	ldr	r3, [pc, #28]	; (3e18 <RS+0x2c>)
    3dfa:	60c3      	str	r3, [r0, #12]
	neuron->potential = neuron->recovery = 0;
    3dfc:	2300      	movs	r3, #0
    3dfe:	6143      	str	r3, [r0, #20]
    3e00:	6103      	str	r3, [r0, #16]
	neuron->timestep_neuron = 1; // junan recommendation 0.05, bigger timesteps till 1.5 is fine (see paper) 
    3e02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3e06:	61c3      	str	r3, [r0, #28]
    3e08:	4770      	bx	lr
    3e0a:	bf00      	nop
    3e0c:	3ca3d70a 	.word	0x3ca3d70a
    3e10:	3e4ccccd 	.word	0x3e4ccccd
    3e14:	c2820000 	.word	0xc2820000
    3e18:	40c00000 	.word	0x40c00000

00003e1c <force_parameters>:
}

void force_parameters (struct fneuron_t *neuron) {
	// initiate parameters for normal and shear force
	// parameters normal force
	neuron->beta = 0;
    3e1c:	2300      	movs	r3, #0
    3e1e:	6303      	str	r3, [r0, #48]	; 0x30
	neuron->k_s	= 1.2; //0.0000003
    3e20:	4a05      	ldr	r2, [pc, #20]	; (3e38 <force_parameters+0x1c>)
    3e22:	6342      	str	r2, [r0, #52]	; 0x34
	neuron->k_d = 0;//0.003
    3e24:	6383      	str	r3, [r0, #56]	; 0x38
	neuron-> normal_force_past = 0; 
    3e26:	6283      	str	r3, [r0, #40]	; 0x28
	// parameters shear force
	neuron->theta = 0;
    3e28:	63c3      	str	r3, [r0, #60]	; 0x3c
	neuron->r_s = 4.8;
    3e2a:	4a04      	ldr	r2, [pc, #16]	; (3e3c <force_parameters+0x20>)
    3e2c:	6402      	str	r2, [r0, #64]	; 0x40
	neuron->r_d = 0;
    3e2e:	6443      	str	r3, [r0, #68]	; 0x44
	neuron-> shear_force_past = 0; 
    3e30:	62c3      	str	r3, [r0, #44]	; 0x2c
	neuron->timestep_force = 10; 
    3e32:	4b03      	ldr	r3, [pc, #12]	; (3e40 <force_parameters+0x24>)
    3e34:	6483      	str	r3, [r0, #72]	; 0x48
    3e36:	4770      	bx	lr
    3e38:	3f99999a 	.word	0x3f99999a
    3e3c:	4099999a 	.word	0x4099999a
    3e40:	41200000 	.word	0x41200000

00003e44 <calc_current_normal_force>:
}

void calc_current_normal_force(struct fneuron_t *neuron, float force_z){
    3e44:	ee07 1a90 	vmov	s15, r1
	neuron->normal_force = force_z;
    3e48:	6201      	str	r1, [r0, #32]
	neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    3e4a:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    3e4e:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    3e52:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e56:	ee37 7a26 	vadd.f32	s14, s14, s13
    3e5a:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->normal_force_past = neuron->normal_force;
    3e5e:	6281      	str	r1, [r0, #40]	; 0x28
    3e60:	4770      	bx	lr

00003e62 <calc_current_shear_force>:
}

void calc_current_shear_force(struct fneuron_t *neuron,float force_r){//(fneuron_t *neuron, bool start, float force_x, float force_y
    3e62:	ee07 1a90 	vmov	s15, r1
	
	neuron->shear_force = force_r;
    3e66:	6241      	str	r1, [r0, #36]	; 0x24
	neuron->cell_current = neuron->theta + (neuron->r_s * neuron->shear_force);
    3e68:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    3e6c:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    3e70:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e74:	ee37 7a26 	vadd.f32	s14, s14, s13
    3e78:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->shear_force_past = neuron->shear_force;
    3e7c:	62c1      	str	r1, [r0, #44]	; 0x2c
    3e7e:	4770      	bx	lr

00003e80 <step_f>:
	
}

void step_f(struct fneuron_t *neuron, float synapse, float ms) {
    3e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e84:	ed2d 8b04 	vpush	{d8-d9}
    3e88:	b082      	sub	sp, #8
	// step a neuron through ms milliseconds with synapse input
	//   if you don't have a good reason to do otherwise, keep ms between 0.1
	//   and 1.0
	if (neuron->potential >= 30) {
    3e8a:	ed90 8a04 	vldr	s16, [r0, #16]
    3e8e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    3e92:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e9a:	da6c      	bge.n	3f76 <step_f+0xf6>
    3e9c:	ee08 2a90 	vmov	s17, r2
    3ea0:	468a      	mov	sl, r1
    3ea2:	4604      	mov	r4, r0
		neuron->potential = neuron->c;
		neuron->recovery += neuron->d;
		return;
	}
	float v = neuron->potential;
	float u = neuron->recovery;
    3ea4:	ed90 9a05 	vldr	s18, [r0, #20]
	neuron->potential = v + ms * (0.04 * v * v + 5 * v + 140 - u + synapse);
    3ea8:	4d3b      	ldr	r5, [pc, #236]	; (3f98 <step_f+0x118>)
    3eaa:	ee18 0a10 	vmov	r0, s16
    3eae:	47a8      	blx	r5
    3eb0:	4680      	mov	r8, r0
    3eb2:	4689      	mov	r9, r1
    3eb4:	4f39      	ldr	r7, [pc, #228]	; (3f9c <step_f+0x11c>)
    3eb6:	a336      	add	r3, pc, #216	; (adr r3, 3f90 <step_f+0x110>)
    3eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ebc:	47b8      	blx	r7
    3ebe:	4602      	mov	r2, r0
    3ec0:	460b      	mov	r3, r1
    3ec2:	e9cd 8900 	strd	r8, r9, [sp]
    3ec6:	4640      	mov	r0, r8
    3ec8:	4649      	mov	r1, r9
    3eca:	47b8      	blx	r7
    3ecc:	4680      	mov	r8, r0
    3ece:	4689      	mov	r9, r1
    3ed0:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    3ed4:	ee68 7a27 	vmul.f32	s15, s16, s15
    3ed8:	ee17 0a90 	vmov	r0, s15
    3edc:	47a8      	blx	r5
    3ede:	4e30      	ldr	r6, [pc, #192]	; (3fa0 <step_f+0x120>)
    3ee0:	4602      	mov	r2, r0
    3ee2:	460b      	mov	r3, r1
    3ee4:	4640      	mov	r0, r8
    3ee6:	4649      	mov	r1, r9
    3ee8:	47b0      	blx	r6
    3eea:	2200      	movs	r2, #0
    3eec:	4b2d      	ldr	r3, [pc, #180]	; (3fa4 <step_f+0x124>)
    3eee:	47b0      	blx	r6
    3ef0:	4680      	mov	r8, r0
    3ef2:	4689      	mov	r9, r1
    3ef4:	ee19 0a10 	vmov	r0, s18
    3ef8:	47a8      	blx	r5
    3efa:	4602      	mov	r2, r0
    3efc:	460b      	mov	r3, r1
    3efe:	4640      	mov	r0, r8
    3f00:	4649      	mov	r1, r9
    3f02:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3fac <step_f+0x12c>
    3f06:	47c0      	blx	r8
    3f08:	4680      	mov	r8, r0
    3f0a:	4689      	mov	r9, r1
    3f0c:	4650      	mov	r0, sl
    3f0e:	47a8      	blx	r5
    3f10:	4642      	mov	r2, r8
    3f12:	464b      	mov	r3, r9
    3f14:	47b0      	blx	r6
    3f16:	4680      	mov	r8, r0
    3f18:	4689      	mov	r9, r1
    3f1a:	ee18 0a90 	vmov	r0, s17
    3f1e:	47a8      	blx	r5
    3f20:	4642      	mov	r2, r8
    3f22:	464b      	mov	r3, r9
    3f24:	47b8      	blx	r7
    3f26:	4602      	mov	r2, r0
    3f28:	460b      	mov	r3, r1
    3f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
    3f2e:	47b0      	blx	r6
    3f30:	4b1d      	ldr	r3, [pc, #116]	; (3fa8 <step_f+0x128>)
    3f32:	4798      	blx	r3
    3f34:	ee07 0a90 	vmov	s15, r0
    3f38:	6120      	str	r0, [r4, #16]
	if (neuron -> potential > 30) {
    3f3a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    3f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
    3f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f46:	dd01      	ble.n	3f4c <step_f+0xcc>
		neuron -> potential = 30;
    3f48:	ed84 7a04 	vstr	s14, [r4, #16]
	}
	neuron->recovery = u + ms * (neuron->a * (neuron->b * v - u));
    3f4c:	edd4 7a00 	vldr	s15, [r4]
    3f50:	ed94 7a01 	vldr	s14, [r4, #4]
    3f54:	ee28 8a07 	vmul.f32	s16, s16, s14
    3f58:	ee38 8a49 	vsub.f32	s16, s16, s18
    3f5c:	ee27 8a88 	vmul.f32	s16, s15, s16
    3f60:	ee68 8a88 	vmul.f32	s17, s17, s16
    3f64:	ee79 8a28 	vadd.f32	s17, s18, s17
    3f68:	edc4 8a05 	vstr	s17, [r4, #20]
	return;
}
    3f6c:	b002      	add	sp, #8
    3f6e:	ecbd 8b04 	vpop	{d8-d9}
    3f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		neuron->potential = neuron->c;
    3f76:	6883      	ldr	r3, [r0, #8]
    3f78:	6103      	str	r3, [r0, #16]
		neuron->recovery += neuron->d;
    3f7a:	ed90 7a03 	vldr	s14, [r0, #12]
    3f7e:	edd0 7a05 	vldr	s15, [r0, #20]
    3f82:	ee77 7a87 	vadd.f32	s15, s15, s14
    3f86:	edc0 7a05 	vstr	s15, [r0, #20]
		return;
    3f8a:	e7ef      	b.n	3f6c <step_f+0xec>
    3f8c:	f3af 8000 	nop.w
    3f90:	47ae147b 	.word	0x47ae147b
    3f94:	3fa47ae1 	.word	0x3fa47ae1
    3f98:	000045d9 	.word	0x000045d9
    3f9c:	00004681 	.word	0x00004681
    3fa0:	0000431d 	.word	0x0000431d
    3fa4:	40618000 	.word	0x40618000
    3fa8:	00004be1 	.word	0x00004be1
    3fac:	00004319 	.word	0x00004319

00003fb0 <neuron_init_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}
*/

void neuron_init_row(struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    3fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fb4:	4680      	mov	r8, r0
    3fb6:	460f      	mov	r7, r1
    3fb8:	4615      	mov	r5, r2
	
	RS(&neuron_pair_top->neuron_normal);
    3fba:	4e0f      	ldr	r6, [pc, #60]	; (3ff8 <neuron_init_row+0x48>)
    3fbc:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_normal);
    3fbe:	4640      	mov	r0, r8
    3fc0:	4c0e      	ldr	r4, [pc, #56]	; (3ffc <neuron_init_row+0x4c>)
    3fc2:	47a0      	blx	r4
	
	RS(&neuron_pair_top->neuron_shear);
    3fc4:	f108 084c 	add.w	r8, r8, #76	; 0x4c
    3fc8:	4640      	mov	r0, r8
    3fca:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_shear);
    3fcc:	4640      	mov	r0, r8
    3fce:	47a0      	blx	r4
	
	
	RS(&neuron_pair_middle->neuron_normal);
    3fd0:	4638      	mov	r0, r7
    3fd2:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_normal);
    3fd4:	4638      	mov	r0, r7
    3fd6:	47a0      	blx	r4
	
	RS(&neuron_pair_middle->neuron_shear);
    3fd8:	374c      	adds	r7, #76	; 0x4c
    3fda:	4638      	mov	r0, r7
    3fdc:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_shear);
    3fde:	4638      	mov	r0, r7
    3fe0:	47a0      	blx	r4
	
	
	RS(&neuron_pair_bottom->neuron_normal);
    3fe2:	4628      	mov	r0, r5
    3fe4:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_normal);
    3fe6:	4628      	mov	r0, r5
    3fe8:	47a0      	blx	r4
	
	RS(&neuron_pair_bottom->neuron_shear);
    3fea:	354c      	adds	r5, #76	; 0x4c
    3fec:	4628      	mov	r0, r5
    3fee:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_shear);
    3ff0:	4628      	mov	r0, r5
    3ff2:	47a0      	blx	r4
    3ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ff8:	00003ded 	.word	0x00003ded
    3ffc:	00003e1d 	.word	0x00003e1d

00004000 <neuron_calc_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}

 void neuron_calc_row(struct sensorRow_Values *sensor_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    4000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4004:	b085      	sub	sp, #20
    4006:	4604      	mov	r4, r0
    4008:	460d      	mov	r5, r1
    400a:	4617      	mov	r7, r2
    400c:	461e      	mov	r6, r3
	 
	 uint8_t repeatition = (uint8_t) (neuron_pair_top->neuron_normal.timestep_force/neuron_pair_top->neuron_normal.timestep_neuron);
    400e:	edd1 6a12 	vldr	s13, [r1, #72]	; 0x48
    4012:	ed91 7a07 	vldr	s14, [r1, #28]
    4016:	eec6 7a87 	vdiv.f32	s15, s13, s14
    401a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    401e:	edcd 7a00 	vstr	s15, [sp]
    4022:	f89d 9000 	ldrb.w	r9, [sp]
	 
	 calc_current_normal_force(&neuron_pair_top->neuron_normal,sensor_row->force_z_top);
    4026:	9100      	str	r1, [sp, #0]
    4028:	6c81      	ldr	r1, [r0, #72]	; 0x48
    402a:	4628      	mov	r0, r5
    402c:	f8df a080 	ldr.w	sl, [pc, #128]	; 40b0 <neuron_calc_row+0xb0>
    4030:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_top->neuron_shear,sensor_row->force_r_top);
    4032:	f105 0b4c 	add.w	fp, r5, #76	; 0x4c
    4036:	6d61      	ldr	r1, [r4, #84]	; 0x54
    4038:	4658      	mov	r0, fp
    403a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40b4 <neuron_calc_row+0xb4>
    403e:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_middle->neuron_normal,sensor_row->force_z_middle);
    4040:	9701      	str	r7, [sp, #4]
    4042:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    4044:	4638      	mov	r0, r7
    4046:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_middle->neuron_shear,sensor_row->force_r_middle);
    4048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    404c:	9302      	str	r3, [sp, #8]
    404e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    4050:	4618      	mov	r0, r3
    4052:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_bottom->neuron_normal,sensor_row->force_z_bottom);
    4054:	9603      	str	r6, [sp, #12]
    4056:	6d21      	ldr	r1, [r4, #80]	; 0x50
    4058:	4630      	mov	r0, r6
    405a:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_bottom->neuron_shear,sensor_row->force_r_bottom);
    405c:	f106 0a4c 	add.w	sl, r6, #76	; 0x4c
    4060:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    4062:	4650      	mov	r0, sl
    4064:	47c0      	blx	r8
	 
	 for(int i = 0; i<repeatition; i++){
    4066:	f04f 0800 	mov.w	r8, #0
    406a:	e01a      	b.n	40a2 <neuron_calc_row+0xa2>
		step_f(&neuron_pair_top->neuron_normal, neuron_pair_top->neuron_normal.cell_current,neuron_pair_top->neuron_normal.timestep_neuron);//neuron_pair_top->neuron_normal.timestep_neuron
    406c:	69ea      	ldr	r2, [r5, #28]
    406e:	69a9      	ldr	r1, [r5, #24]
    4070:	9800      	ldr	r0, [sp, #0]
    4072:	4c0e      	ldr	r4, [pc, #56]	; (40ac <neuron_calc_row+0xac>)
    4074:	47a0      	blx	r4
		step_f(&neuron_pair_top->neuron_shear, neuron_pair_top->neuron_shear.cell_current, neuron_pair_top->neuron_shear.timestep_neuron);
    4076:	6eaa      	ldr	r2, [r5, #104]	; 0x68
    4078:	6e69      	ldr	r1, [r5, #100]	; 0x64
    407a:	4658      	mov	r0, fp
    407c:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_normal, neuron_pair_middle->neuron_normal.cell_current, neuron_pair_middle->neuron_normal.timestep_neuron);
    407e:	69fa      	ldr	r2, [r7, #28]
    4080:	69b9      	ldr	r1, [r7, #24]
    4082:	9801      	ldr	r0, [sp, #4]
    4084:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_shear, neuron_pair_middle->neuron_shear.cell_current, neuron_pair_middle->neuron_shear.timestep_neuron);
    4086:	6eba      	ldr	r2, [r7, #104]	; 0x68
    4088:	6e79      	ldr	r1, [r7, #100]	; 0x64
    408a:	9802      	ldr	r0, [sp, #8]
    408c:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_normal, neuron_pair_bottom->neuron_normal.cell_current, neuron_pair_bottom->neuron_normal.timestep_neuron);
    408e:	69f2      	ldr	r2, [r6, #28]
    4090:	69b1      	ldr	r1, [r6, #24]
    4092:	9803      	ldr	r0, [sp, #12]
    4094:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_shear, neuron_pair_bottom->neuron_shear.cell_current, neuron_pair_bottom->neuron_shear.timestep_neuron);
    4096:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    4098:	6e71      	ldr	r1, [r6, #100]	; 0x64
    409a:	4650      	mov	r0, sl
    409c:	47a0      	blx	r4
	 for(int i = 0; i<repeatition; i++){
    409e:	f108 0801 	add.w	r8, r8, #1
    40a2:	45c8      	cmp	r8, r9
    40a4:	dbe2      	blt.n	406c <neuron_calc_row+0x6c>
	 }
}
    40a6:	b005      	add	sp, #20
    40a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ac:	00003e81 	.word	0x00003e81
    40b0:	00003e45 	.word	0x00003e45
    40b4:	00003e63 	.word	0x00003e63

000040b8 <update_struct_values_neural>:
	step_f(neuron3_normal, neuron3_normal->cell_current, neuron3_normal->timestep_neuron);
	step_f(neuron3_shear, neuron3_shear->cell_current, neuron3_shear->timestep_neuron);
}
*/

void update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    40b8:	b410      	push	{r4}
	neuron_row->neuron_top_normal = neuron_pair_top->neuron_normal.potential;
    40ba:	690c      	ldr	r4, [r1, #16]
    40bc:	6004      	str	r4, [r0, #0]
	neuron_row->neuron_top_shear = neuron_pair_top->neuron_shear.potential;
    40be:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    40c0:	6041      	str	r1, [r0, #4]
	
	neuron_row->neuron_middle_normal = neuron_pair_middle->neuron_normal.potential;
    40c2:	6911      	ldr	r1, [r2, #16]
    40c4:	6081      	str	r1, [r0, #8]
	neuron_row->neuron_middle_shear = neuron_pair_middle->neuron_shear.potential;
    40c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    40c8:	60c2      	str	r2, [r0, #12]
	
	neuron_row->neuron_bottom_normal = neuron_pair_bottom->neuron_normal.potential;
    40ca:	691a      	ldr	r2, [r3, #16]
    40cc:	6102      	str	r2, [r0, #16]
	neuron_row->neuron_bottom_shear = neuron_pair_bottom->neuron_shear.potential;
    40ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    40d0:	6143      	str	r3, [r0, #20]
    40d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    40d6:	4770      	bx	lr

000040d8 <sqrt>:
    40d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40dc:	b08b      	sub	sp, #44	; 0x2c
    40de:	4604      	mov	r4, r0
    40e0:	460d      	mov	r5, r1
    40e2:	f000 f857 	bl	4194 <__ieee754_sqrt>
    40e6:	4b29      	ldr	r3, [pc, #164]	; (418c <sqrt+0xb4>)
    40e8:	f993 a000 	ldrsb.w	sl, [r3]
    40ec:	f1ba 3fff 	cmp.w	sl, #4294967295
    40f0:	4606      	mov	r6, r0
    40f2:	460f      	mov	r7, r1
    40f4:	d012      	beq.n	411c <sqrt+0x44>
    40f6:	4622      	mov	r2, r4
    40f8:	462b      	mov	r3, r5
    40fa:	4620      	mov	r0, r4
    40fc:	4629      	mov	r1, r5
    40fe:	f000 fd59 	bl	4bb4 <__aeabi_dcmpun>
    4102:	4683      	mov	fp, r0
    4104:	b950      	cbnz	r0, 411c <sqrt+0x44>
    4106:	f04f 0800 	mov.w	r8, #0
    410a:	f04f 0900 	mov.w	r9, #0
    410e:	4642      	mov	r2, r8
    4110:	464b      	mov	r3, r9
    4112:	4620      	mov	r0, r4
    4114:	4629      	mov	r1, r5
    4116:	f000 fd25 	bl	4b64 <__aeabi_dcmplt>
    411a:	b920      	cbnz	r0, 4126 <sqrt+0x4e>
    411c:	4630      	mov	r0, r6
    411e:	4639      	mov	r1, r7
    4120:	b00b      	add	sp, #44	; 0x2c
    4122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4126:	4b1a      	ldr	r3, [pc, #104]	; (4190 <sqrt+0xb8>)
    4128:	f8cd b020 	str.w	fp, [sp, #32]
    412c:	2201      	movs	r2, #1
    412e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4132:	e9cd 4502 	strd	r4, r5, [sp, #8]
    4136:	e88d 000c 	stmia.w	sp, {r2, r3}
    413a:	f1ba 0f00 	cmp.w	sl, #0
    413e:	d017      	beq.n	4170 <sqrt+0x98>
    4140:	4642      	mov	r2, r8
    4142:	464b      	mov	r3, r9
    4144:	4640      	mov	r0, r8
    4146:	4649      	mov	r1, r9
    4148:	f000 fbc4 	bl	48d4 <__aeabi_ddiv>
    414c:	f1ba 0f02 	cmp.w	sl, #2
    4150:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4154:	d10e      	bne.n	4174 <sqrt+0x9c>
    4156:	f000 fd93 	bl	4c80 <__errno>
    415a:	2321      	movs	r3, #33	; 0x21
    415c:	6003      	str	r3, [r0, #0]
    415e:	9b08      	ldr	r3, [sp, #32]
    4160:	b973      	cbnz	r3, 4180 <sqrt+0xa8>
    4162:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    4166:	4630      	mov	r0, r6
    4168:	4639      	mov	r1, r7
    416a:	b00b      	add	sp, #44	; 0x2c
    416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4170:	e9cd 8906 	strd	r8, r9, [sp, #24]
    4174:	4668      	mov	r0, sp
    4176:	f000 f8c9 	bl	430c <matherr>
    417a:	2800      	cmp	r0, #0
    417c:	d1ef      	bne.n	415e <sqrt+0x86>
    417e:	e7ea      	b.n	4156 <sqrt+0x7e>
    4180:	f000 fd7e 	bl	4c80 <__errno>
    4184:	9b08      	ldr	r3, [sp, #32]
    4186:	6003      	str	r3, [r0, #0]
    4188:	e7eb      	b.n	4162 <sqrt+0x8a>
    418a:	bf00      	nop
    418c:	200000ee 	.word	0x200000ee
    4190:	00004ec4 	.word	0x00004ec4

00004194 <__ieee754_sqrt>:
    4194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4198:	4f5b      	ldr	r7, [pc, #364]	; (4308 <__ieee754_sqrt+0x174>)
    419a:	438f      	bics	r7, r1
    419c:	4605      	mov	r5, r0
    419e:	460c      	mov	r4, r1
    41a0:	f000 8092 	beq.w	42c8 <__ieee754_sqrt+0x134>
    41a4:	2900      	cmp	r1, #0
    41a6:	460b      	mov	r3, r1
    41a8:	4602      	mov	r2, r0
    41aa:	dd6f      	ble.n	428c <__ieee754_sqrt+0xf8>
    41ac:	150f      	asrs	r7, r1, #20
    41ae:	d07b      	beq.n	42a8 <__ieee754_sqrt+0x114>
    41b0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    41b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    41b8:	07f8      	lsls	r0, r7, #31
    41ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    41be:	d45c      	bmi.n	427a <__ieee754_sqrt+0xe6>
    41c0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    41c4:	2600      	movs	r6, #0
    41c6:	440b      	add	r3, r1
    41c8:	107f      	asrs	r7, r7, #1
    41ca:	0052      	lsls	r2, r2, #1
    41cc:	46b6      	mov	lr, r6
    41ce:	2016      	movs	r0, #22
    41d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    41d4:	eb0e 0401 	add.w	r4, lr, r1
    41d8:	429c      	cmp	r4, r3
    41da:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    41de:	ea4f 0242 	mov.w	r2, r2, lsl #1
    41e2:	dc03      	bgt.n	41ec <__ieee754_sqrt+0x58>
    41e4:	1b1b      	subs	r3, r3, r4
    41e6:	eb04 0e01 	add.w	lr, r4, r1
    41ea:	440e      	add	r6, r1
    41ec:	3801      	subs	r0, #1
    41ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    41f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
    41f6:	d1ed      	bne.n	41d4 <__ieee754_sqrt+0x40>
    41f8:	4684      	mov	ip, r0
    41fa:	2420      	movs	r4, #32
    41fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4200:	e009      	b.n	4216 <__ieee754_sqrt+0x82>
    4202:	d020      	beq.n	4246 <__ieee754_sqrt+0xb2>
    4204:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    4208:	3c01      	subs	r4, #1
    420a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    420e:	442b      	add	r3, r5
    4210:	ea4f 0242 	mov.w	r2, r2, lsl #1
    4214:	d020      	beq.n	4258 <__ieee754_sqrt+0xc4>
    4216:	4573      	cmp	r3, lr
    4218:	eb01 050c 	add.w	r5, r1, ip
    421c:	ddf1      	ble.n	4202 <__ieee754_sqrt+0x6e>
    421e:	2d00      	cmp	r5, #0
    4220:	eb05 0c01 	add.w	ip, r5, r1
    4224:	db09      	blt.n	423a <__ieee754_sqrt+0xa6>
    4226:	46f0      	mov	r8, lr
    4228:	4295      	cmp	r5, r2
    422a:	eba3 030e 	sub.w	r3, r3, lr
    422e:	d900      	bls.n	4232 <__ieee754_sqrt+0x9e>
    4230:	3b01      	subs	r3, #1
    4232:	1b52      	subs	r2, r2, r5
    4234:	4408      	add	r0, r1
    4236:	46c6      	mov	lr, r8
    4238:	e7e4      	b.n	4204 <__ieee754_sqrt+0x70>
    423a:	f1bc 0f00 	cmp.w	ip, #0
    423e:	dbf2      	blt.n	4226 <__ieee754_sqrt+0x92>
    4240:	f10e 0801 	add.w	r8, lr, #1
    4244:	e7f0      	b.n	4228 <__ieee754_sqrt+0x94>
    4246:	4295      	cmp	r5, r2
    4248:	d8dc      	bhi.n	4204 <__ieee754_sqrt+0x70>
    424a:	2d00      	cmp	r5, #0
    424c:	eb05 0c01 	add.w	ip, r5, r1
    4250:	db44      	blt.n	42dc <__ieee754_sqrt+0x148>
    4252:	4698      	mov	r8, r3
    4254:	2300      	movs	r3, #0
    4256:	e7ec      	b.n	4232 <__ieee754_sqrt+0x9e>
    4258:	4313      	orrs	r3, r2
    425a:	d113      	bne.n	4284 <__ieee754_sqrt+0xf0>
    425c:	0840      	lsrs	r0, r0, #1
    425e:	1073      	asrs	r3, r6, #1
    4260:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    4264:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    4268:	07f2      	lsls	r2, r6, #31
    426a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    426e:	bf48      	it	mi
    4270:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    4274:	4649      	mov	r1, r9
    4276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    427a:	005b      	lsls	r3, r3, #1
    427c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    4280:	0052      	lsls	r2, r2, #1
    4282:	e79d      	b.n	41c0 <__ieee754_sqrt+0x2c>
    4284:	1c41      	adds	r1, r0, #1
    4286:	d02d      	beq.n	42e4 <__ieee754_sqrt+0x150>
    4288:	3001      	adds	r0, #1
    428a:	e7e7      	b.n	425c <__ieee754_sqrt+0xc8>
    428c:	4606      	mov	r6, r0
    428e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    4292:	433e      	orrs	r6, r7
    4294:	d0ef      	beq.n	4276 <__ieee754_sqrt+0xe2>
    4296:	bb69      	cbnz	r1, 42f4 <__ieee754_sqrt+0x160>
    4298:	460f      	mov	r7, r1
    429a:	0ad3      	lsrs	r3, r2, #11
    429c:	3f15      	subs	r7, #21
    429e:	0552      	lsls	r2, r2, #21
    42a0:	2b00      	cmp	r3, #0
    42a2:	d0fa      	beq.n	429a <__ieee754_sqrt+0x106>
    42a4:	02de      	lsls	r6, r3, #11
    42a6:	d420      	bmi.n	42ea <__ieee754_sqrt+0x156>
    42a8:	2400      	movs	r4, #0
    42aa:	e000      	b.n	42ae <__ieee754_sqrt+0x11a>
    42ac:	4604      	mov	r4, r0
    42ae:	005b      	lsls	r3, r3, #1
    42b0:	02dd      	lsls	r5, r3, #11
    42b2:	f104 0001 	add.w	r0, r4, #1
    42b6:	d5f9      	bpl.n	42ac <__ieee754_sqrt+0x118>
    42b8:	f1c0 0120 	rsb	r1, r0, #32
    42bc:	fa22 f101 	lsr.w	r1, r2, r1
    42c0:	430b      	orrs	r3, r1
    42c2:	1b3f      	subs	r7, r7, r4
    42c4:	4082      	lsls	r2, r0
    42c6:	e773      	b.n	41b0 <__ieee754_sqrt+0x1c>
    42c8:	4602      	mov	r2, r0
    42ca:	460b      	mov	r3, r1
    42cc:	f000 f9d8 	bl	4680 <__aeabi_dmul>
    42d0:	462a      	mov	r2, r5
    42d2:	4623      	mov	r3, r4
    42d4:	f000 f822 	bl	431c <__adddf3>
    42d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42dc:	f1bc 0f00 	cmp.w	ip, #0
    42e0:	daae      	bge.n	4240 <__ieee754_sqrt+0xac>
    42e2:	e7b6      	b.n	4252 <__ieee754_sqrt+0xbe>
    42e4:	3601      	adds	r6, #1
    42e6:	4620      	mov	r0, r4
    42e8:	e7b9      	b.n	425e <__ieee754_sqrt+0xca>
    42ea:	2000      	movs	r0, #0
    42ec:	2120      	movs	r1, #32
    42ee:	f04f 34ff 	mov.w	r4, #4294967295
    42f2:	e7e3      	b.n	42bc <__ieee754_sqrt+0x128>
    42f4:	4602      	mov	r2, r0
    42f6:	460b      	mov	r3, r1
    42f8:	f000 f80e 	bl	4318 <__aeabi_dsub>
    42fc:	4602      	mov	r2, r0
    42fe:	460b      	mov	r3, r1
    4300:	f000 fae8 	bl	48d4 <__aeabi_ddiv>
    4304:	e7b7      	b.n	4276 <__ieee754_sqrt+0xe2>
    4306:	bf00      	nop
    4308:	7ff00000 	.word	0x7ff00000

0000430c <matherr>:
    430c:	2000      	movs	r0, #0
    430e:	4770      	bx	lr

00004310 <__aeabi_drsub>:
    4310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4314:	e002      	b.n	431c <__adddf3>
    4316:	bf00      	nop

00004318 <__aeabi_dsub>:
    4318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000431c <__adddf3>:
    431c:	b530      	push	{r4, r5, lr}
    431e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4322:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4326:	ea94 0f05 	teq	r4, r5
    432a:	bf08      	it	eq
    432c:	ea90 0f02 	teqeq	r0, r2
    4330:	bf1f      	itttt	ne
    4332:	ea54 0c00 	orrsne.w	ip, r4, r0
    4336:	ea55 0c02 	orrsne.w	ip, r5, r2
    433a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    433e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4342:	f000 80e2 	beq.w	450a <__adddf3+0x1ee>
    4346:	ea4f 5454 	mov.w	r4, r4, lsr #21
    434a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    434e:	bfb8      	it	lt
    4350:	426d      	neglt	r5, r5
    4352:	dd0c      	ble.n	436e <__adddf3+0x52>
    4354:	442c      	add	r4, r5
    4356:	ea80 0202 	eor.w	r2, r0, r2
    435a:	ea81 0303 	eor.w	r3, r1, r3
    435e:	ea82 0000 	eor.w	r0, r2, r0
    4362:	ea83 0101 	eor.w	r1, r3, r1
    4366:	ea80 0202 	eor.w	r2, r0, r2
    436a:	ea81 0303 	eor.w	r3, r1, r3
    436e:	2d36      	cmp	r5, #54	; 0x36
    4370:	bf88      	it	hi
    4372:	bd30      	pophi	{r4, r5, pc}
    4374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4378:	ea4f 3101 	mov.w	r1, r1, lsl #12
    437c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4384:	d002      	beq.n	438c <__adddf3+0x70>
    4386:	4240      	negs	r0, r0
    4388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    438c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4390:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4398:	d002      	beq.n	43a0 <__adddf3+0x84>
    439a:	4252      	negs	r2, r2
    439c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    43a0:	ea94 0f05 	teq	r4, r5
    43a4:	f000 80a7 	beq.w	44f6 <__adddf3+0x1da>
    43a8:	f1a4 0401 	sub.w	r4, r4, #1
    43ac:	f1d5 0e20 	rsbs	lr, r5, #32
    43b0:	db0d      	blt.n	43ce <__adddf3+0xb2>
    43b2:	fa02 fc0e 	lsl.w	ip, r2, lr
    43b6:	fa22 f205 	lsr.w	r2, r2, r5
    43ba:	1880      	adds	r0, r0, r2
    43bc:	f141 0100 	adc.w	r1, r1, #0
    43c0:	fa03 f20e 	lsl.w	r2, r3, lr
    43c4:	1880      	adds	r0, r0, r2
    43c6:	fa43 f305 	asr.w	r3, r3, r5
    43ca:	4159      	adcs	r1, r3
    43cc:	e00e      	b.n	43ec <__adddf3+0xd0>
    43ce:	f1a5 0520 	sub.w	r5, r5, #32
    43d2:	f10e 0e20 	add.w	lr, lr, #32
    43d6:	2a01      	cmp	r2, #1
    43d8:	fa03 fc0e 	lsl.w	ip, r3, lr
    43dc:	bf28      	it	cs
    43de:	f04c 0c02 	orrcs.w	ip, ip, #2
    43e2:	fa43 f305 	asr.w	r3, r3, r5
    43e6:	18c0      	adds	r0, r0, r3
    43e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    43ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    43f0:	d507      	bpl.n	4402 <__adddf3+0xe6>
    43f2:	f04f 0e00 	mov.w	lr, #0
    43f6:	f1dc 0c00 	rsbs	ip, ip, #0
    43fa:	eb7e 0000 	sbcs.w	r0, lr, r0
    43fe:	eb6e 0101 	sbc.w	r1, lr, r1
    4402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4406:	d31b      	bcc.n	4440 <__adddf3+0x124>
    4408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    440c:	d30c      	bcc.n	4428 <__adddf3+0x10c>
    440e:	0849      	lsrs	r1, r1, #1
    4410:	ea5f 0030 	movs.w	r0, r0, rrx
    4414:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4418:	f104 0401 	add.w	r4, r4, #1
    441c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4424:	f080 809a 	bcs.w	455c <__adddf3+0x240>
    4428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    442c:	bf08      	it	eq
    442e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4432:	f150 0000 	adcs.w	r0, r0, #0
    4436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    443a:	ea41 0105 	orr.w	r1, r1, r5
    443e:	bd30      	pop	{r4, r5, pc}
    4440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4444:	4140      	adcs	r0, r0
    4446:	eb41 0101 	adc.w	r1, r1, r1
    444a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    444e:	f1a4 0401 	sub.w	r4, r4, #1
    4452:	d1e9      	bne.n	4428 <__adddf3+0x10c>
    4454:	f091 0f00 	teq	r1, #0
    4458:	bf04      	itt	eq
    445a:	4601      	moveq	r1, r0
    445c:	2000      	moveq	r0, #0
    445e:	fab1 f381 	clz	r3, r1
    4462:	bf08      	it	eq
    4464:	3320      	addeq	r3, #32
    4466:	f1a3 030b 	sub.w	r3, r3, #11
    446a:	f1b3 0220 	subs.w	r2, r3, #32
    446e:	da0c      	bge.n	448a <__adddf3+0x16e>
    4470:	320c      	adds	r2, #12
    4472:	dd08      	ble.n	4486 <__adddf3+0x16a>
    4474:	f102 0c14 	add.w	ip, r2, #20
    4478:	f1c2 020c 	rsb	r2, r2, #12
    447c:	fa01 f00c 	lsl.w	r0, r1, ip
    4480:	fa21 f102 	lsr.w	r1, r1, r2
    4484:	e00c      	b.n	44a0 <__adddf3+0x184>
    4486:	f102 0214 	add.w	r2, r2, #20
    448a:	bfd8      	it	le
    448c:	f1c2 0c20 	rsble	ip, r2, #32
    4490:	fa01 f102 	lsl.w	r1, r1, r2
    4494:	fa20 fc0c 	lsr.w	ip, r0, ip
    4498:	bfdc      	itt	le
    449a:	ea41 010c 	orrle.w	r1, r1, ip
    449e:	4090      	lslle	r0, r2
    44a0:	1ae4      	subs	r4, r4, r3
    44a2:	bfa2      	ittt	ge
    44a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    44a8:	4329      	orrge	r1, r5
    44aa:	bd30      	popge	{r4, r5, pc}
    44ac:	ea6f 0404 	mvn.w	r4, r4
    44b0:	3c1f      	subs	r4, #31
    44b2:	da1c      	bge.n	44ee <__adddf3+0x1d2>
    44b4:	340c      	adds	r4, #12
    44b6:	dc0e      	bgt.n	44d6 <__adddf3+0x1ba>
    44b8:	f104 0414 	add.w	r4, r4, #20
    44bc:	f1c4 0220 	rsb	r2, r4, #32
    44c0:	fa20 f004 	lsr.w	r0, r0, r4
    44c4:	fa01 f302 	lsl.w	r3, r1, r2
    44c8:	ea40 0003 	orr.w	r0, r0, r3
    44cc:	fa21 f304 	lsr.w	r3, r1, r4
    44d0:	ea45 0103 	orr.w	r1, r5, r3
    44d4:	bd30      	pop	{r4, r5, pc}
    44d6:	f1c4 040c 	rsb	r4, r4, #12
    44da:	f1c4 0220 	rsb	r2, r4, #32
    44de:	fa20 f002 	lsr.w	r0, r0, r2
    44e2:	fa01 f304 	lsl.w	r3, r1, r4
    44e6:	ea40 0003 	orr.w	r0, r0, r3
    44ea:	4629      	mov	r1, r5
    44ec:	bd30      	pop	{r4, r5, pc}
    44ee:	fa21 f004 	lsr.w	r0, r1, r4
    44f2:	4629      	mov	r1, r5
    44f4:	bd30      	pop	{r4, r5, pc}
    44f6:	f094 0f00 	teq	r4, #0
    44fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    44fe:	bf06      	itte	eq
    4500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4504:	3401      	addeq	r4, #1
    4506:	3d01      	subne	r5, #1
    4508:	e74e      	b.n	43a8 <__adddf3+0x8c>
    450a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    450e:	bf18      	it	ne
    4510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4514:	d029      	beq.n	456a <__adddf3+0x24e>
    4516:	ea94 0f05 	teq	r4, r5
    451a:	bf08      	it	eq
    451c:	ea90 0f02 	teqeq	r0, r2
    4520:	d005      	beq.n	452e <__adddf3+0x212>
    4522:	ea54 0c00 	orrs.w	ip, r4, r0
    4526:	bf04      	itt	eq
    4528:	4619      	moveq	r1, r3
    452a:	4610      	moveq	r0, r2
    452c:	bd30      	pop	{r4, r5, pc}
    452e:	ea91 0f03 	teq	r1, r3
    4532:	bf1e      	ittt	ne
    4534:	2100      	movne	r1, #0
    4536:	2000      	movne	r0, #0
    4538:	bd30      	popne	{r4, r5, pc}
    453a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    453e:	d105      	bne.n	454c <__adddf3+0x230>
    4540:	0040      	lsls	r0, r0, #1
    4542:	4149      	adcs	r1, r1
    4544:	bf28      	it	cs
    4546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    454a:	bd30      	pop	{r4, r5, pc}
    454c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4550:	bf3c      	itt	cc
    4552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4556:	bd30      	popcc	{r4, r5, pc}
    4558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    455c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4564:	f04f 0000 	mov.w	r0, #0
    4568:	bd30      	pop	{r4, r5, pc}
    456a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    456e:	bf1a      	itte	ne
    4570:	4619      	movne	r1, r3
    4572:	4610      	movne	r0, r2
    4574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4578:	bf1c      	itt	ne
    457a:	460b      	movne	r3, r1
    457c:	4602      	movne	r2, r0
    457e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4582:	bf06      	itte	eq
    4584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4588:	ea91 0f03 	teqeq	r1, r3
    458c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4590:	bd30      	pop	{r4, r5, pc}
    4592:	bf00      	nop

00004594 <__aeabi_ui2d>:
    4594:	f090 0f00 	teq	r0, #0
    4598:	bf04      	itt	eq
    459a:	2100      	moveq	r1, #0
    459c:	4770      	bxeq	lr
    459e:	b530      	push	{r4, r5, lr}
    45a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    45a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    45a8:	f04f 0500 	mov.w	r5, #0
    45ac:	f04f 0100 	mov.w	r1, #0
    45b0:	e750      	b.n	4454 <__adddf3+0x138>
    45b2:	bf00      	nop

000045b4 <__aeabi_i2d>:
    45b4:	f090 0f00 	teq	r0, #0
    45b8:	bf04      	itt	eq
    45ba:	2100      	moveq	r1, #0
    45bc:	4770      	bxeq	lr
    45be:	b530      	push	{r4, r5, lr}
    45c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    45c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    45c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    45cc:	bf48      	it	mi
    45ce:	4240      	negmi	r0, r0
    45d0:	f04f 0100 	mov.w	r1, #0
    45d4:	e73e      	b.n	4454 <__adddf3+0x138>
    45d6:	bf00      	nop

000045d8 <__aeabi_f2d>:
    45d8:	0042      	lsls	r2, r0, #1
    45da:	ea4f 01e2 	mov.w	r1, r2, asr #3
    45de:	ea4f 0131 	mov.w	r1, r1, rrx
    45e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    45e6:	bf1f      	itttt	ne
    45e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    45ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    45f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    45f4:	4770      	bxne	lr
    45f6:	f092 0f00 	teq	r2, #0
    45fa:	bf14      	ite	ne
    45fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4600:	4770      	bxeq	lr
    4602:	b530      	push	{r4, r5, lr}
    4604:	f44f 7460 	mov.w	r4, #896	; 0x380
    4608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    460c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4610:	e720      	b.n	4454 <__adddf3+0x138>
    4612:	bf00      	nop

00004614 <__aeabi_ul2d>:
    4614:	ea50 0201 	orrs.w	r2, r0, r1
    4618:	bf08      	it	eq
    461a:	4770      	bxeq	lr
    461c:	b530      	push	{r4, r5, lr}
    461e:	f04f 0500 	mov.w	r5, #0
    4622:	e00a      	b.n	463a <__aeabi_l2d+0x16>

00004624 <__aeabi_l2d>:
    4624:	ea50 0201 	orrs.w	r2, r0, r1
    4628:	bf08      	it	eq
    462a:	4770      	bxeq	lr
    462c:	b530      	push	{r4, r5, lr}
    462e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4632:	d502      	bpl.n	463a <__aeabi_l2d+0x16>
    4634:	4240      	negs	r0, r0
    4636:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    463a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    463e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4642:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4646:	f43f aedc 	beq.w	4402 <__adddf3+0xe6>
    464a:	f04f 0203 	mov.w	r2, #3
    464e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4652:	bf18      	it	ne
    4654:	3203      	addne	r2, #3
    4656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    465a:	bf18      	it	ne
    465c:	3203      	addne	r2, #3
    465e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4662:	f1c2 0320 	rsb	r3, r2, #32
    4666:	fa00 fc03 	lsl.w	ip, r0, r3
    466a:	fa20 f002 	lsr.w	r0, r0, r2
    466e:	fa01 fe03 	lsl.w	lr, r1, r3
    4672:	ea40 000e 	orr.w	r0, r0, lr
    4676:	fa21 f102 	lsr.w	r1, r1, r2
    467a:	4414      	add	r4, r2
    467c:	e6c1      	b.n	4402 <__adddf3+0xe6>
    467e:	bf00      	nop

00004680 <__aeabi_dmul>:
    4680:	b570      	push	{r4, r5, r6, lr}
    4682:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4686:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    468a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    468e:	bf1d      	ittte	ne
    4690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4694:	ea94 0f0c 	teqne	r4, ip
    4698:	ea95 0f0c 	teqne	r5, ip
    469c:	f000 f8de 	bleq	485c <__aeabi_dmul+0x1dc>
    46a0:	442c      	add	r4, r5
    46a2:	ea81 0603 	eor.w	r6, r1, r3
    46a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    46aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    46ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    46b2:	bf18      	it	ne
    46b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    46b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    46bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    46c0:	d038      	beq.n	4734 <__aeabi_dmul+0xb4>
    46c2:	fba0 ce02 	umull	ip, lr, r0, r2
    46c6:	f04f 0500 	mov.w	r5, #0
    46ca:	fbe1 e502 	umlal	lr, r5, r1, r2
    46ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    46d2:	fbe0 e503 	umlal	lr, r5, r0, r3
    46d6:	f04f 0600 	mov.w	r6, #0
    46da:	fbe1 5603 	umlal	r5, r6, r1, r3
    46de:	f09c 0f00 	teq	ip, #0
    46e2:	bf18      	it	ne
    46e4:	f04e 0e01 	orrne.w	lr, lr, #1
    46e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    46ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    46f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    46f4:	d204      	bcs.n	4700 <__aeabi_dmul+0x80>
    46f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    46fa:	416d      	adcs	r5, r5
    46fc:	eb46 0606 	adc.w	r6, r6, r6
    4700:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4704:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4708:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    470c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4710:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4714:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4718:	bf88      	it	hi
    471a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    471e:	d81e      	bhi.n	475e <__aeabi_dmul+0xde>
    4720:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4724:	bf08      	it	eq
    4726:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    472a:	f150 0000 	adcs.w	r0, r0, #0
    472e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4732:	bd70      	pop	{r4, r5, r6, pc}
    4734:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4738:	ea46 0101 	orr.w	r1, r6, r1
    473c:	ea40 0002 	orr.w	r0, r0, r2
    4740:	ea81 0103 	eor.w	r1, r1, r3
    4744:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4748:	bfc2      	ittt	gt
    474a:	ebd4 050c 	rsbsgt	r5, r4, ip
    474e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4752:	bd70      	popgt	{r4, r5, r6, pc}
    4754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4758:	f04f 0e00 	mov.w	lr, #0
    475c:	3c01      	subs	r4, #1
    475e:	f300 80ab 	bgt.w	48b8 <__aeabi_dmul+0x238>
    4762:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4766:	bfde      	ittt	le
    4768:	2000      	movle	r0, #0
    476a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    476e:	bd70      	pople	{r4, r5, r6, pc}
    4770:	f1c4 0400 	rsb	r4, r4, #0
    4774:	3c20      	subs	r4, #32
    4776:	da35      	bge.n	47e4 <__aeabi_dmul+0x164>
    4778:	340c      	adds	r4, #12
    477a:	dc1b      	bgt.n	47b4 <__aeabi_dmul+0x134>
    477c:	f104 0414 	add.w	r4, r4, #20
    4780:	f1c4 0520 	rsb	r5, r4, #32
    4784:	fa00 f305 	lsl.w	r3, r0, r5
    4788:	fa20 f004 	lsr.w	r0, r0, r4
    478c:	fa01 f205 	lsl.w	r2, r1, r5
    4790:	ea40 0002 	orr.w	r0, r0, r2
    4794:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    479c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    47a0:	fa21 f604 	lsr.w	r6, r1, r4
    47a4:	eb42 0106 	adc.w	r1, r2, r6
    47a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    47ac:	bf08      	it	eq
    47ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    47b2:	bd70      	pop	{r4, r5, r6, pc}
    47b4:	f1c4 040c 	rsb	r4, r4, #12
    47b8:	f1c4 0520 	rsb	r5, r4, #32
    47bc:	fa00 f304 	lsl.w	r3, r0, r4
    47c0:	fa20 f005 	lsr.w	r0, r0, r5
    47c4:	fa01 f204 	lsl.w	r2, r1, r4
    47c8:	ea40 0002 	orr.w	r0, r0, r2
    47cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    47d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    47d4:	f141 0100 	adc.w	r1, r1, #0
    47d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    47dc:	bf08      	it	eq
    47de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    47e2:	bd70      	pop	{r4, r5, r6, pc}
    47e4:	f1c4 0520 	rsb	r5, r4, #32
    47e8:	fa00 f205 	lsl.w	r2, r0, r5
    47ec:	ea4e 0e02 	orr.w	lr, lr, r2
    47f0:	fa20 f304 	lsr.w	r3, r0, r4
    47f4:	fa01 f205 	lsl.w	r2, r1, r5
    47f8:	ea43 0302 	orr.w	r3, r3, r2
    47fc:	fa21 f004 	lsr.w	r0, r1, r4
    4800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4804:	fa21 f204 	lsr.w	r2, r1, r4
    4808:	ea20 0002 	bic.w	r0, r0, r2
    480c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4814:	bf08      	it	eq
    4816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    481a:	bd70      	pop	{r4, r5, r6, pc}
    481c:	f094 0f00 	teq	r4, #0
    4820:	d10f      	bne.n	4842 <__aeabi_dmul+0x1c2>
    4822:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4826:	0040      	lsls	r0, r0, #1
    4828:	eb41 0101 	adc.w	r1, r1, r1
    482c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4830:	bf08      	it	eq
    4832:	3c01      	subeq	r4, #1
    4834:	d0f7      	beq.n	4826 <__aeabi_dmul+0x1a6>
    4836:	ea41 0106 	orr.w	r1, r1, r6
    483a:	f095 0f00 	teq	r5, #0
    483e:	bf18      	it	ne
    4840:	4770      	bxne	lr
    4842:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4846:	0052      	lsls	r2, r2, #1
    4848:	eb43 0303 	adc.w	r3, r3, r3
    484c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4850:	bf08      	it	eq
    4852:	3d01      	subeq	r5, #1
    4854:	d0f7      	beq.n	4846 <__aeabi_dmul+0x1c6>
    4856:	ea43 0306 	orr.w	r3, r3, r6
    485a:	4770      	bx	lr
    485c:	ea94 0f0c 	teq	r4, ip
    4860:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4864:	bf18      	it	ne
    4866:	ea95 0f0c 	teqne	r5, ip
    486a:	d00c      	beq.n	4886 <__aeabi_dmul+0x206>
    486c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4870:	bf18      	it	ne
    4872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4876:	d1d1      	bne.n	481c <__aeabi_dmul+0x19c>
    4878:	ea81 0103 	eor.w	r1, r1, r3
    487c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4880:	f04f 0000 	mov.w	r0, #0
    4884:	bd70      	pop	{r4, r5, r6, pc}
    4886:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    488a:	bf06      	itte	eq
    488c:	4610      	moveq	r0, r2
    488e:	4619      	moveq	r1, r3
    4890:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4894:	d019      	beq.n	48ca <__aeabi_dmul+0x24a>
    4896:	ea94 0f0c 	teq	r4, ip
    489a:	d102      	bne.n	48a2 <__aeabi_dmul+0x222>
    489c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    48a0:	d113      	bne.n	48ca <__aeabi_dmul+0x24a>
    48a2:	ea95 0f0c 	teq	r5, ip
    48a6:	d105      	bne.n	48b4 <__aeabi_dmul+0x234>
    48a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    48ac:	bf1c      	itt	ne
    48ae:	4610      	movne	r0, r2
    48b0:	4619      	movne	r1, r3
    48b2:	d10a      	bne.n	48ca <__aeabi_dmul+0x24a>
    48b4:	ea81 0103 	eor.w	r1, r1, r3
    48b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    48bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    48c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    48c4:	f04f 0000 	mov.w	r0, #0
    48c8:	bd70      	pop	{r4, r5, r6, pc}
    48ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    48ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    48d2:	bd70      	pop	{r4, r5, r6, pc}

000048d4 <__aeabi_ddiv>:
    48d4:	b570      	push	{r4, r5, r6, lr}
    48d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    48da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    48de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    48e2:	bf1d      	ittte	ne
    48e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    48e8:	ea94 0f0c 	teqne	r4, ip
    48ec:	ea95 0f0c 	teqne	r5, ip
    48f0:	f000 f8a7 	bleq	4a42 <__aeabi_ddiv+0x16e>
    48f4:	eba4 0405 	sub.w	r4, r4, r5
    48f8:	ea81 0e03 	eor.w	lr, r1, r3
    48fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4900:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4904:	f000 8088 	beq.w	4a18 <__aeabi_ddiv+0x144>
    4908:	ea4f 3303 	mov.w	r3, r3, lsl #12
    490c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4910:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4914:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4918:	ea4f 2202 	mov.w	r2, r2, lsl #8
    491c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4920:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    4924:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4928:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    492c:	429d      	cmp	r5, r3
    492e:	bf08      	it	eq
    4930:	4296      	cmpeq	r6, r2
    4932:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    4936:	f504 7440 	add.w	r4, r4, #768	; 0x300
    493a:	d202      	bcs.n	4942 <__aeabi_ddiv+0x6e>
    493c:	085b      	lsrs	r3, r3, #1
    493e:	ea4f 0232 	mov.w	r2, r2, rrx
    4942:	1ab6      	subs	r6, r6, r2
    4944:	eb65 0503 	sbc.w	r5, r5, r3
    4948:	085b      	lsrs	r3, r3, #1
    494a:	ea4f 0232 	mov.w	r2, r2, rrx
    494e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4952:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4956:	ebb6 0e02 	subs.w	lr, r6, r2
    495a:	eb75 0e03 	sbcs.w	lr, r5, r3
    495e:	bf22      	ittt	cs
    4960:	1ab6      	subcs	r6, r6, r2
    4962:	4675      	movcs	r5, lr
    4964:	ea40 000c 	orrcs.w	r0, r0, ip
    4968:	085b      	lsrs	r3, r3, #1
    496a:	ea4f 0232 	mov.w	r2, r2, rrx
    496e:	ebb6 0e02 	subs.w	lr, r6, r2
    4972:	eb75 0e03 	sbcs.w	lr, r5, r3
    4976:	bf22      	ittt	cs
    4978:	1ab6      	subcs	r6, r6, r2
    497a:	4675      	movcs	r5, lr
    497c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4980:	085b      	lsrs	r3, r3, #1
    4982:	ea4f 0232 	mov.w	r2, r2, rrx
    4986:	ebb6 0e02 	subs.w	lr, r6, r2
    498a:	eb75 0e03 	sbcs.w	lr, r5, r3
    498e:	bf22      	ittt	cs
    4990:	1ab6      	subcs	r6, r6, r2
    4992:	4675      	movcs	r5, lr
    4994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4998:	085b      	lsrs	r3, r3, #1
    499a:	ea4f 0232 	mov.w	r2, r2, rrx
    499e:	ebb6 0e02 	subs.w	lr, r6, r2
    49a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    49a6:	bf22      	ittt	cs
    49a8:	1ab6      	subcs	r6, r6, r2
    49aa:	4675      	movcs	r5, lr
    49ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    49b0:	ea55 0e06 	orrs.w	lr, r5, r6
    49b4:	d018      	beq.n	49e8 <__aeabi_ddiv+0x114>
    49b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    49ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    49be:	ea4f 1606 	mov.w	r6, r6, lsl #4
    49c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    49c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    49ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    49ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    49d2:	d1c0      	bne.n	4956 <__aeabi_ddiv+0x82>
    49d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    49d8:	d10b      	bne.n	49f2 <__aeabi_ddiv+0x11e>
    49da:	ea41 0100 	orr.w	r1, r1, r0
    49de:	f04f 0000 	mov.w	r0, #0
    49e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    49e6:	e7b6      	b.n	4956 <__aeabi_ddiv+0x82>
    49e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    49ec:	bf04      	itt	eq
    49ee:	4301      	orreq	r1, r0
    49f0:	2000      	moveq	r0, #0
    49f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    49f6:	bf88      	it	hi
    49f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    49fc:	f63f aeaf 	bhi.w	475e <__aeabi_dmul+0xde>
    4a00:	ebb5 0c03 	subs.w	ip, r5, r3
    4a04:	bf04      	itt	eq
    4a06:	ebb6 0c02 	subseq.w	ip, r6, r2
    4a0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4a0e:	f150 0000 	adcs.w	r0, r0, #0
    4a12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4a16:	bd70      	pop	{r4, r5, r6, pc}
    4a18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4a1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4a20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4a24:	bfc2      	ittt	gt
    4a26:	ebd4 050c 	rsbsgt	r5, r4, ip
    4a2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4a2e:	bd70      	popgt	{r4, r5, r6, pc}
    4a30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4a34:	f04f 0e00 	mov.w	lr, #0
    4a38:	3c01      	subs	r4, #1
    4a3a:	e690      	b.n	475e <__aeabi_dmul+0xde>
    4a3c:	ea45 0e06 	orr.w	lr, r5, r6
    4a40:	e68d      	b.n	475e <__aeabi_dmul+0xde>
    4a42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4a46:	ea94 0f0c 	teq	r4, ip
    4a4a:	bf08      	it	eq
    4a4c:	ea95 0f0c 	teqeq	r5, ip
    4a50:	f43f af3b 	beq.w	48ca <__aeabi_dmul+0x24a>
    4a54:	ea94 0f0c 	teq	r4, ip
    4a58:	d10a      	bne.n	4a70 <__aeabi_ddiv+0x19c>
    4a5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4a5e:	f47f af34 	bne.w	48ca <__aeabi_dmul+0x24a>
    4a62:	ea95 0f0c 	teq	r5, ip
    4a66:	f47f af25 	bne.w	48b4 <__aeabi_dmul+0x234>
    4a6a:	4610      	mov	r0, r2
    4a6c:	4619      	mov	r1, r3
    4a6e:	e72c      	b.n	48ca <__aeabi_dmul+0x24a>
    4a70:	ea95 0f0c 	teq	r5, ip
    4a74:	d106      	bne.n	4a84 <__aeabi_ddiv+0x1b0>
    4a76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4a7a:	f43f aefd 	beq.w	4878 <__aeabi_dmul+0x1f8>
    4a7e:	4610      	mov	r0, r2
    4a80:	4619      	mov	r1, r3
    4a82:	e722      	b.n	48ca <__aeabi_dmul+0x24a>
    4a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4a88:	bf18      	it	ne
    4a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4a8e:	f47f aec5 	bne.w	481c <__aeabi_dmul+0x19c>
    4a92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4a96:	f47f af0d 	bne.w	48b4 <__aeabi_dmul+0x234>
    4a9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    4a9e:	f47f aeeb 	bne.w	4878 <__aeabi_dmul+0x1f8>
    4aa2:	e712      	b.n	48ca <__aeabi_dmul+0x24a>

00004aa4 <__gedf2>:
    4aa4:	f04f 3cff 	mov.w	ip, #4294967295
    4aa8:	e006      	b.n	4ab8 <__cmpdf2+0x4>
    4aaa:	bf00      	nop

00004aac <__ledf2>:
    4aac:	f04f 0c01 	mov.w	ip, #1
    4ab0:	e002      	b.n	4ab8 <__cmpdf2+0x4>
    4ab2:	bf00      	nop

00004ab4 <__cmpdf2>:
    4ab4:	f04f 0c01 	mov.w	ip, #1
    4ab8:	f84d cd04 	str.w	ip, [sp, #-4]!
    4abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4ac8:	bf18      	it	ne
    4aca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    4ace:	d01b      	beq.n	4b08 <__cmpdf2+0x54>
    4ad0:	b001      	add	sp, #4
    4ad2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    4ad6:	bf0c      	ite	eq
    4ad8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    4adc:	ea91 0f03 	teqne	r1, r3
    4ae0:	bf02      	ittt	eq
    4ae2:	ea90 0f02 	teqeq	r0, r2
    4ae6:	2000      	moveq	r0, #0
    4ae8:	4770      	bxeq	lr
    4aea:	f110 0f00 	cmn.w	r0, #0
    4aee:	ea91 0f03 	teq	r1, r3
    4af2:	bf58      	it	pl
    4af4:	4299      	cmppl	r1, r3
    4af6:	bf08      	it	eq
    4af8:	4290      	cmpeq	r0, r2
    4afa:	bf2c      	ite	cs
    4afc:	17d8      	asrcs	r0, r3, #31
    4afe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    4b02:	f040 0001 	orr.w	r0, r0, #1
    4b06:	4770      	bx	lr
    4b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4b10:	d102      	bne.n	4b18 <__cmpdf2+0x64>
    4b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4b16:	d107      	bne.n	4b28 <__cmpdf2+0x74>
    4b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4b20:	d1d6      	bne.n	4ad0 <__cmpdf2+0x1c>
    4b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4b26:	d0d3      	beq.n	4ad0 <__cmpdf2+0x1c>
    4b28:	f85d 0b04 	ldr.w	r0, [sp], #4
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop

00004b30 <__aeabi_cdrcmple>:
    4b30:	4684      	mov	ip, r0
    4b32:	4610      	mov	r0, r2
    4b34:	4662      	mov	r2, ip
    4b36:	468c      	mov	ip, r1
    4b38:	4619      	mov	r1, r3
    4b3a:	4663      	mov	r3, ip
    4b3c:	e000      	b.n	4b40 <__aeabi_cdcmpeq>
    4b3e:	bf00      	nop

00004b40 <__aeabi_cdcmpeq>:
    4b40:	b501      	push	{r0, lr}
    4b42:	f7ff ffb7 	bl	4ab4 <__cmpdf2>
    4b46:	2800      	cmp	r0, #0
    4b48:	bf48      	it	mi
    4b4a:	f110 0f00 	cmnmi.w	r0, #0
    4b4e:	bd01      	pop	{r0, pc}

00004b50 <__aeabi_dcmpeq>:
    4b50:	f84d ed08 	str.w	lr, [sp, #-8]!
    4b54:	f7ff fff4 	bl	4b40 <__aeabi_cdcmpeq>
    4b58:	bf0c      	ite	eq
    4b5a:	2001      	moveq	r0, #1
    4b5c:	2000      	movne	r0, #0
    4b5e:	f85d fb08 	ldr.w	pc, [sp], #8
    4b62:	bf00      	nop

00004b64 <__aeabi_dcmplt>:
    4b64:	f84d ed08 	str.w	lr, [sp, #-8]!
    4b68:	f7ff ffea 	bl	4b40 <__aeabi_cdcmpeq>
    4b6c:	bf34      	ite	cc
    4b6e:	2001      	movcc	r0, #1
    4b70:	2000      	movcs	r0, #0
    4b72:	f85d fb08 	ldr.w	pc, [sp], #8
    4b76:	bf00      	nop

00004b78 <__aeabi_dcmple>:
    4b78:	f84d ed08 	str.w	lr, [sp, #-8]!
    4b7c:	f7ff ffe0 	bl	4b40 <__aeabi_cdcmpeq>
    4b80:	bf94      	ite	ls
    4b82:	2001      	movls	r0, #1
    4b84:	2000      	movhi	r0, #0
    4b86:	f85d fb08 	ldr.w	pc, [sp], #8
    4b8a:	bf00      	nop

00004b8c <__aeabi_dcmpge>:
    4b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4b90:	f7ff ffce 	bl	4b30 <__aeabi_cdrcmple>
    4b94:	bf94      	ite	ls
    4b96:	2001      	movls	r0, #1
    4b98:	2000      	movhi	r0, #0
    4b9a:	f85d fb08 	ldr.w	pc, [sp], #8
    4b9e:	bf00      	nop

00004ba0 <__aeabi_dcmpgt>:
    4ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
    4ba4:	f7ff ffc4 	bl	4b30 <__aeabi_cdrcmple>
    4ba8:	bf34      	ite	cc
    4baa:	2001      	movcc	r0, #1
    4bac:	2000      	movcs	r0, #0
    4bae:	f85d fb08 	ldr.w	pc, [sp], #8
    4bb2:	bf00      	nop

00004bb4 <__aeabi_dcmpun>:
    4bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4bbc:	d102      	bne.n	4bc4 <__aeabi_dcmpun+0x10>
    4bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4bc2:	d10a      	bne.n	4bda <__aeabi_dcmpun+0x26>
    4bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4bcc:	d102      	bne.n	4bd4 <__aeabi_dcmpun+0x20>
    4bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4bd2:	d102      	bne.n	4bda <__aeabi_dcmpun+0x26>
    4bd4:	f04f 0000 	mov.w	r0, #0
    4bd8:	4770      	bx	lr
    4bda:	f04f 0001 	mov.w	r0, #1
    4bde:	4770      	bx	lr

00004be0 <__aeabi_d2f>:
    4be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4be8:	bf24      	itt	cs
    4bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4bf2:	d90d      	bls.n	4c10 <__aeabi_d2f+0x30>
    4bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4c08:	bf08      	it	eq
    4c0a:	f020 0001 	biceq.w	r0, r0, #1
    4c0e:	4770      	bx	lr
    4c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4c14:	d121      	bne.n	4c5a <__aeabi_d2f+0x7a>
    4c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4c1a:	bfbc      	itt	lt
    4c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4c20:	4770      	bxlt	lr
    4c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4c2a:	f1c2 0218 	rsb	r2, r2, #24
    4c2e:	f1c2 0c20 	rsb	ip, r2, #32
    4c32:	fa10 f30c 	lsls.w	r3, r0, ip
    4c36:	fa20 f002 	lsr.w	r0, r0, r2
    4c3a:	bf18      	it	ne
    4c3c:	f040 0001 	orrne.w	r0, r0, #1
    4c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4c48:	fa03 fc0c 	lsl.w	ip, r3, ip
    4c4c:	ea40 000c 	orr.w	r0, r0, ip
    4c50:	fa23 f302 	lsr.w	r3, r3, r2
    4c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4c58:	e7cc      	b.n	4bf4 <__aeabi_d2f+0x14>
    4c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4c5e:	d107      	bne.n	4c70 <__aeabi_d2f+0x90>
    4c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4c64:	bf1e      	ittt	ne
    4c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4c6e:	4770      	bxne	lr
    4c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c7c:	4770      	bx	lr
    4c7e:	bf00      	nop

00004c80 <__errno>:
    4c80:	4b01      	ldr	r3, [pc, #4]	; (4c88 <__errno+0x8>)
    4c82:	6818      	ldr	r0, [r3, #0]
    4c84:	4770      	bx	lr
    4c86:	bf00      	nop
    4c88:	200000f0 	.word	0x200000f0

00004c8c <__libc_init_array>:
    4c8c:	b570      	push	{r4, r5, r6, lr}
    4c8e:	4e0d      	ldr	r6, [pc, #52]	; (4cc4 <__libc_init_array+0x38>)
    4c90:	4c0d      	ldr	r4, [pc, #52]	; (4cc8 <__libc_init_array+0x3c>)
    4c92:	1ba4      	subs	r4, r4, r6
    4c94:	10a4      	asrs	r4, r4, #2
    4c96:	2500      	movs	r5, #0
    4c98:	42a5      	cmp	r5, r4
    4c9a:	d109      	bne.n	4cb0 <__libc_init_array+0x24>
    4c9c:	4e0b      	ldr	r6, [pc, #44]	; (4ccc <__libc_init_array+0x40>)
    4c9e:	4c0c      	ldr	r4, [pc, #48]	; (4cd0 <__libc_init_array+0x44>)
    4ca0:	f000 f944 	bl	4f2c <_init>
    4ca4:	1ba4      	subs	r4, r4, r6
    4ca6:	10a4      	asrs	r4, r4, #2
    4ca8:	2500      	movs	r5, #0
    4caa:	42a5      	cmp	r5, r4
    4cac:	d105      	bne.n	4cba <__libc_init_array+0x2e>
    4cae:	bd70      	pop	{r4, r5, r6, pc}
    4cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4cb4:	4798      	blx	r3
    4cb6:	3501      	adds	r5, #1
    4cb8:	e7ee      	b.n	4c98 <__libc_init_array+0xc>
    4cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4cbe:	4798      	blx	r3
    4cc0:	3501      	adds	r5, #1
    4cc2:	e7f2      	b.n	4caa <__libc_init_array+0x1e>
    4cc4:	00004f38 	.word	0x00004f38
    4cc8:	00004f38 	.word	0x00004f38
    4ccc:	00004f38 	.word	0x00004f38
    4cd0:	00004f3c 	.word	0x00004f3c

00004cd4 <dummy_register>:
    4cd4:	20000008                                ... 

00004cd8 <abort_fifo_start>:
    4cd8:	20000012                                ... 

00004cdc <wr_pdram_start>:
    4cdc:	2000004e                                N.. 

00004ce0 <cf_pdram_start>:
    4ce0:	20000038                                8.. 

00004ce4 <rd_pdram_start>:
    4ce4:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    4cf4:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    4d04:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    4d14:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    4d24:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

00004d34 <_cfgs>:
    4d34:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    4e34:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4e44:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00004e54 <_usarts>:
	...

00004e6c <_i2cms>:
    4e6c:	00000003 70200014 00000100 000000ff     ...... p........
    4e7c:	00d70000 05f5e100                       ........

00004e84 <_i2css>:
	...

00004e94 <sercomspi_regs>:
    4e94:	0030000c 00020000 00000000 01ff0004     ..0.............
    4ea4:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4eb4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    4ec4:	74727173 00000000                       sqrt....

00004ecc <__sf_fake_stderr>:
	...

00004eec <__sf_fake_stdin>:
	...

00004f0c <__sf_fake_stdout>:
	...

00004f2c <_init>:
    4f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f2e:	bf00      	nop
    4f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f32:	bc08      	pop	{r3}
    4f34:	469e      	mov	lr, r3
    4f36:	4770      	bx	lr

00004f38 <__init_array_start>:
    4f38:	00000289 	.word	0x00000289

00004f3c <_fini>:
    4f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f3e:	bf00      	nop
    4f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f42:	bc08      	pop	{r3}
    4f44:	469e      	mov	lr, r3
    4f46:	4770      	bx	lr

00004f48 <__fini_array_start>:
    4f48:	00000265 	.word	0x00000265
