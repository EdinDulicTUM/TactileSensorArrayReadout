
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b90  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000154  20000000  00004b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020154  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020154  2**0
                  CONTENTS
  4 .bss          00000d08  20000160  00004cf0  00020154  2**4
                  ALLOC
  5 .stack        00010000  20000e68  000059f8  00020154  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002eca2  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003524  00000000  00000000  0004ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fe0f  00000000  00000000  000523a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cc8  00000000  00000000  000621b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dc0  00000000  00000000  00062e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000341e6  00000000  00000000  00063c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000145d8  00000000  00000000  00097e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121b09  00000000  00000000  000ac3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000026c4  00000000  00000000  001cdf00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 0e 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     h.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	a9 0f 00 00 b5 0f 00 00 c1 0f 00 00 cd 0f 00 00     ................
      cc:	d9 0f 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	b5 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 9d 21 00 00 dd 02 00 00 dd 02 00 00     .....!..........
     204:	dd 02 00 00 39 07 00 00 dd 02 00 00 dd 02 00 00     ....9...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	00004b90 	.word	0x00004b90

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004b90 	.word	0x00004b90
     2c4:	20000164 	.word	0x20000164
     2c8:	00004b90 	.word	0x00004b90
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000555 	.word	0x00000555

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00004b90 	.word	0x00004b90
     340:	20000154 	.word	0x20000154
     344:	20000160 	.word	0x20000160
     348:	20000e68 	.word	0x20000e68
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	000048d1 	.word	0x000048d1
     358:	0000203d 	.word	0x0000203d

0000035c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     372:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     382:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
	I2C_0_PORT_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	200003b0 	.word	0x200003b0
     400:	00000a45 	.word	0x00000a45
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     46e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     472:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SPI_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
	SPI_0_PORT_init();
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	20000380 	.word	0x20000380
     514:	00000b79 	.word	0x00000b79
     518:	00000409 	.word	0x00000409

0000051c <TIMER_1_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     51c:	4a04      	ldr	r2, [pc, #16]	; (530 <TIMER_1_CLOCK_init+0x14>)
     51e:	6993      	ldr	r3, [r2, #24]
     520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     524:	6193      	str	r3, [r2, #24]
     526:	2240      	movs	r2, #64	; 0x40
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <TIMER_1_CLOCK_init+0x18>)
     52a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     52e:	4770      	bx	lr
     530:	40000800 	.word	0x40000800
     534:	40001c00 	.word	0x40001c00

00000538 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     538:	4a04      	ldr	r2, [pc, #16]	; (54c <TIMER_0_CLOCK_init+0x14>)
     53a:	6a13      	ldr	r3, [r2, #32]
     53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     540:	6213      	str	r3, [r2, #32]
     542:	2240      	movs	r2, #64	; 0x40
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <TIMER_0_CLOCK_init+0x18>)
     546:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800
     550:	40001c00 	.word	0x40001c00

00000554 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     554:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     556:	4b18      	ldr	r3, [pc, #96]	; (5b8 <system_init+0x64>)
     558:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	4b18      	ldr	r3, [pc, #96]	; (5bc <system_init+0x68>)
     55c:	2240      	movs	r2, #64	; 0x40
     55e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     560:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     566:	629a      	str	r2, [r3, #40]	; 0x28
     568:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     56c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     57a:	2201      	movs	r2, #1
     57c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     584:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     58c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     590:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     598:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <system_init+0x6c>)
     59e:	4798      	blx	r3

	SPI_0_init();
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <system_init+0x70>)
     5a2:	4798      	blx	r3

	TIMER_1_CLOCK_init();
     5a4:	4b08      	ldr	r3, [pc, #32]	; (5c8 <system_init+0x74>)
     5a6:	4798      	blx	r3

	TIMER_1_init();
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <system_init+0x78>)
     5aa:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     5ac:	4b08      	ldr	r3, [pc, #32]	; (5d0 <system_init+0x7c>)
     5ae:	4798      	blx	r3

	TIMER_0_init();
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <system_init+0x80>)
     5b2:	4798      	blx	r3
     5b4:	bd08      	pop	{r3, pc}
     5b6:	bf00      	nop
     5b8:	00000c69 	.word	0x00000c69
     5bc:	41008000 	.word	0x41008000
     5c0:	000003e1 	.word	0x000003e1
     5c4:	000004f5 	.word	0x000004f5
     5c8:	0000051d 	.word	0x0000051d
     5cc:	00001cdd 	.word	0x00001cdd
     5d0:	00000539 	.word	0x00000539
     5d4:	00001da1 	.word	0x00001da1

000005d8 <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5d8:	2201      	movs	r2, #1
     5da:	4b10      	ldr	r3, [pc, #64]	; (61c <LAN9252_rx_susp+0x44>)
     5dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     5e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     5e6:	68da      	ldr	r2, [r3, #12]
     5e8:	4b0d      	ldr	r3, [pc, #52]	; (620 <LAN9252_rx_susp+0x48>)
     5ea:	429a      	cmp	r2, r3
     5ec:	d00d      	beq.n	60a <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <LAN9252_rx_susp+0x4c>)
     5f0:	2202      	movs	r2, #2
     5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f6:	2001      	movs	r0, #1
     5f8:	4908      	ldr	r1, [pc, #32]	; (61c <LAN9252_rx_susp+0x44>)
     5fa:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     5fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     602:	2200      	movs	r2, #0
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <LAN9252_rx_susp+0x50>)
     606:	701a      	strb	r2, [r3, #0]
     608:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     60a:	2201      	movs	r2, #1
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <LAN9252_rx_susp+0x50>)
     60e:	701a      	strb	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     614:	4b05      	ldr	r3, [pc, #20]	; (62c <LAN9252_rx_susp+0x54>)
     616:	60da      	str	r2, [r3, #12]
     618:	4770      	bx	lr
     61a:	bf00      	nop
     61c:	41008000 	.word	0x41008000
     620:	20000558 	.word	0x20000558
     624:	4100a000 	.word	0x4100a000
     628:	20000568 	.word	0x20000568
     62c:	e000e100 	.word	0xe000e100

00000630 <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     630:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     632:	880c      	ldrh	r4, [r1, #0]
     634:	b2a4      	uxth	r4, r4
     636:	f044 0401 	orr.w	r4, r4, #1
     63a:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     63c:	880c      	ldrh	r4, [r1, #0]
     63e:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     640:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     644:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     646:	880c      	ldrh	r4, [r1, #0]
     648:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     64a:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     64e:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     652:	00ed      	lsls	r5, r5, #3
     654:	f005 0518 	and.w	r5, r5, #24
     658:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     65a:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     65c:	880c      	ldrh	r4, [r1, #0]
     65e:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     660:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     664:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     666:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     668:	2803      	cmp	r0, #3
     66a:	d814      	bhi.n	696 <setup_transfer_descriptor+0x66>
     66c:	e8df f000 	tbb	[pc, r0]
     670:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     674:	8808      	ldrh	r0, [r1, #0]
     676:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     678:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     67c:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     67e:	8808      	ldrh	r0, [r1, #0]
     680:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     682:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     686:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     688:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     68a:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     68c:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     68e:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     690:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     692:	4a26      	ldr	r2, [pc, #152]	; (72c <setup_transfer_descriptor+0xfc>)
     694:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     696:	880a      	ldrh	r2, [r1, #0]
     698:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     69a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     69e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a0:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6a2:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     6a4:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a8:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     6aa:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     6ac:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     6ae:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     6b0:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     6b2:	9b02      	ldr	r3, [sp, #8]
     6b4:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     6b6:	bc30      	pop	{r4, r5}
     6b8:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ba:	880a      	ldrh	r2, [r1, #0]
     6bc:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     6c2:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6c4:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6c6:	880a      	ldrh	r2, [r1, #0]
     6c8:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     6ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     6ce:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6d0:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     6d2:	4a17      	ldr	r2, [pc, #92]	; (730 <setup_transfer_descriptor+0x100>)
     6d4:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6d6:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6d8:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     6da:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     6dc:	4a13      	ldr	r2, [pc, #76]	; (72c <setup_transfer_descriptor+0xfc>)
     6de:	608a      	str	r2, [r1, #8]
     6e0:	e7d9      	b.n	696 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6e2:	8808      	ldrh	r0, [r1, #0]
     6e4:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6e6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     6ea:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6ec:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ee:	8808      	ldrh	r0, [r1, #0]
     6f0:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     6f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6f6:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6f8:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6fa:	480c      	ldr	r0, [pc, #48]	; (72c <setup_transfer_descriptor+0xfc>)
     6fc:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     6fe:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     700:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     702:	608a      	str	r2, [r1, #8]
     704:	e7c7      	b.n	696 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     706:	880a      	ldrh	r2, [r1, #0]
     708:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     70a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     70e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     710:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     712:	880a      	ldrh	r2, [r1, #0]
     714:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     71a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     71c:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     71e:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     720:	4a02      	ldr	r2, [pc, #8]	; (72c <setup_transfer_descriptor+0xfc>)
     722:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     724:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     726:	4a03      	ldr	r2, [pc, #12]	; (734 <setup_transfer_descriptor+0x104>)
     728:	608a      	str	r2, [r1, #8]
     72a:	e7b4      	b.n	696 <setup_transfer_descriptor+0x66>
     72c:	43000428 	.word	0x43000428
     730:	00004918 	.word	0x00004918
     734:	20000420 	.word	0x20000420

00000738 <TC7_Handler>:
void TC7_Handler(void){
     738:	b5f0      	push	{r4, r5, r6, r7, lr}
     73a:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     73c:	4a16      	ldr	r2, [pc, #88]	; (798 <TC7_Handler+0x60>)
     73e:	7a93      	ldrb	r3, [r2, #10]
     740:	f043 0301 	orr.w	r3, r3, #1
     744:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     746:	2201      	movs	r2, #1
     748:	4b14      	ldr	r3, [pc, #80]	; (79c <TC7_Handler+0x64>)
     74a:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     74c:	4b14      	ldr	r3, [pc, #80]	; (7a0 <TC7_Handler+0x68>)
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	b183      	cbz	r3, 774 <TC7_Handler+0x3c>
		volatile int i=0;
     752:	2300      	movs	r3, #0
     754:	9301      	str	r3, [sp, #4]
     756:	4611      	mov	r1, r2
     758:	4a12      	ldr	r2, [pc, #72]	; (7a4 <TC7_Handler+0x6c>)
     75a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     75e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     762:	2102      	movs	r1, #2
     764:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     768:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     76c:	4a0c      	ldr	r2, [pc, #48]	; (7a0 <TC7_Handler+0x68>)
     76e:	7013      	strb	r3, [r2, #0]
	};
     770:	b003      	add	sp, #12
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     774:	4b0b      	ldr	r3, [pc, #44]	; (7a4 <TC7_Handler+0x6c>)
     776:	2501      	movs	r5, #1
     778:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     77c:	4e08      	ldr	r6, [pc, #32]	; (7a0 <TC7_Handler+0x68>)
     77e:	2400      	movs	r4, #0
     780:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     782:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     786:	4621      	mov	r1, r4
     788:	4620      	mov	r0, r4
     78a:	4f07      	ldr	r7, [pc, #28]	; (7a8 <TC7_Handler+0x70>)
     78c:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     78e:	4621      	mov	r1, r4
     790:	4628      	mov	r0, r5
     792:	47b8      	blx	r7
		tx_ethercat_done = false;
     794:	7034      	strb	r4, [r6, #0]
	};
     796:	e7eb      	b.n	770 <TC7_Handler+0x38>
     798:	43001800 	.word	0x43001800
     79c:	20000520 	.word	0x20000520
     7a0:	20000568 	.word	0x20000568
     7a4:	41008000 	.word	0x41008000
     7a8:	00000f5d 	.word	0x00000f5d

000007ac <configure_ethercat_dma_descriptors>:
{
     7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b0:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     7b2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 96c <configure_ethercat_dma_descriptors+0x1c0>
     7b6:	4f61      	ldr	r7, [pc, #388]	; (93c <configure_ethercat_dma_descriptors+0x190>)
     7b8:	2602      	movs	r6, #2
     7ba:	9601      	str	r6, [sp, #4]
     7bc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 970 <configure_ethercat_dma_descriptors+0x1c4>
     7c0:	f8cd 9000 	str.w	r9, [sp]
     7c4:	2313      	movs	r3, #19
     7c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
     7ca:	4639      	mov	r1, r7
     7cc:	2000      	movs	r0, #0
     7ce:	4d5c      	ldr	r5, [pc, #368]	; (940 <configure_ethercat_dma_descriptors+0x194>)
     7d0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     7d2:	f8d8 b008 	ldr.w	fp, [r8, #8]
     7d6:	9601      	str	r6, [sp, #4]
     7d8:	4c5a      	ldr	r4, [pc, #360]	; (944 <configure_ethercat_dma_descriptors+0x198>)
     7da:	9400      	str	r4, [sp, #0]
     7dc:	2343      	movs	r3, #67	; 0x43
     7de:	465a      	mov	r2, fp
     7e0:	4649      	mov	r1, r9
     7e2:	2000      	movs	r0, #0
     7e4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     7e6:	4b58      	ldr	r3, [pc, #352]	; (948 <configure_ethercat_dma_descriptors+0x19c>)
     7e8:	681a      	ldr	r2, [r3, #0]
     7ea:	f8df 9188 	ldr.w	r9, [pc, #392]	; 974 <configure_ethercat_dma_descriptors+0x1c8>
     7ee:	9601      	str	r6, [sp, #4]
     7f0:	f8cd 9000 	str.w	r9, [sp]
     7f4:	230b      	movs	r3, #11
     7f6:	4621      	mov	r1, r4
     7f8:	2000      	movs	r0, #0
     7fa:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     7fc:	2400      	movs	r4, #0
     7fe:	9401      	str	r4, [sp, #4]
     800:	f8df a174 	ldr.w	sl, [pc, #372]	; 978 <configure_ethercat_dma_descriptors+0x1cc>
     804:	f8cd a000 	str.w	sl, [sp]
     808:	2303      	movs	r3, #3
     80a:	465a      	mov	r2, fp
     80c:	4649      	mov	r1, r9
     80e:	4620      	mov	r0, r4
     810:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     812:	9601      	str	r6, [sp, #4]
     814:	f8df b164 	ldr.w	fp, [pc, #356]	; 97c <configure_ethercat_dma_descriptors+0x1d0>
     818:	f8cd b000 	str.w	fp, [sp]
     81c:	2340      	movs	r3, #64	; 0x40
     81e:	4a4b      	ldr	r2, [pc, #300]	; (94c <configure_ethercat_dma_descriptors+0x1a0>)
     820:	4651      	mov	r1, sl
     822:	4620      	mov	r0, r4
     824:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     826:	9601      	str	r6, [sp, #4]
     828:	f8df a154 	ldr.w	sl, [pc, #340]	; 980 <configure_ethercat_dma_descriptors+0x1d4>
     82c:	f8cd a000 	str.w	sl, [sp]
     830:	2313      	movs	r3, #19
     832:	f8d8 200c 	ldr.w	r2, [r8, #12]
     836:	4659      	mov	r1, fp
     838:	4620      	mov	r0, r4
     83a:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     83c:	f8d8 2010 	ldr.w	r2, [r8, #16]
     840:	9401      	str	r4, [sp, #4]
     842:	f8df 8140 	ldr.w	r8, [pc, #320]	; 984 <configure_ethercat_dma_descriptors+0x1d8>
     846:	f8cd 8000 	str.w	r8, [sp]
     84a:	2303      	movs	r3, #3
     84c:	4651      	mov	r1, sl
     84e:	4620      	mov	r0, r4
     850:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     852:	9601      	str	r6, [sp, #4]
     854:	f8cd 9000 	str.w	r9, [sp]
     858:	2340      	movs	r3, #64	; 0x40
     85a:	4622      	mov	r2, r4
     85c:	4641      	mov	r1, r8
     85e:	4630      	mov	r0, r6
     860:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     862:	f8df 8124 	ldr.w	r8, [pc, #292]	; 988 <configure_ethercat_dma_descriptors+0x1dc>
     866:	9601      	str	r6, [sp, #4]
     868:	f8df 9120 	ldr.w	r9, [pc, #288]	; 98c <configure_ethercat_dma_descriptors+0x1e0>
     86c:	f8cd 9000 	str.w	r9, [sp]
     870:	2313      	movs	r3, #19
     872:	4622      	mov	r2, r4
     874:	4641      	mov	r1, r8
     876:	2003      	movs	r0, #3
     878:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     87a:	9601      	str	r6, [sp, #4]
     87c:	f8df a110 	ldr.w	sl, [pc, #272]	; 990 <configure_ethercat_dma_descriptors+0x1e4>
     880:	f8cd a000 	str.w	sl, [sp]
     884:	2343      	movs	r3, #67	; 0x43
     886:	4622      	mov	r2, r4
     888:	4649      	mov	r1, r9
     88a:	2003      	movs	r0, #3
     88c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     88e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 994 <configure_ethercat_dma_descriptors+0x1e8>
     892:	9601      	str	r6, [sp, #4]
     894:	f8cd 9000 	str.w	r9, [sp]
     898:	230b      	movs	r3, #11
     89a:	4622      	mov	r2, r4
     89c:	4651      	mov	r1, sl
     89e:	2003      	movs	r0, #3
     8a0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     8a2:	9601      	str	r6, [sp, #4]
     8a4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 998 <configure_ethercat_dma_descriptors+0x1ec>
     8a8:	f8cd a000 	str.w	sl, [sp]
     8ac:	2343      	movs	r3, #67	; 0x43
     8ae:	4622      	mov	r2, r4
     8b0:	4649      	mov	r1, r9
     8b2:	2003      	movs	r0, #3
     8b4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     8b6:	9601      	str	r6, [sp, #4]
     8b8:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 99c <configure_ethercat_dma_descriptors+0x1f0>
     8bc:	f8cd b000 	str.w	fp, [sp]
     8c0:	2313      	movs	r3, #19
     8c2:	4622      	mov	r2, r4
     8c4:	4651      	mov	r1, sl
     8c6:	2003      	movs	r0, #3
     8c8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     8ca:	9401      	str	r4, [sp, #4]
     8cc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 9a0 <configure_ethercat_dma_descriptors+0x1f4>
     8d0:	f8cd a000 	str.w	sl, [sp]
     8d4:	2303      	movs	r3, #3
     8d6:	4622      	mov	r2, r4
     8d8:	4659      	mov	r1, fp
     8da:	4618      	mov	r0, r3
     8dc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     8de:	9601      	str	r6, [sp, #4]
     8e0:	f8cd 9000 	str.w	r9, [sp]
     8e4:	2340      	movs	r3, #64	; 0x40
     8e6:	4a19      	ldr	r2, [pc, #100]	; (94c <configure_ethercat_dma_descriptors+0x1a0>)
     8e8:	441a      	add	r2, r3
     8ea:	4651      	mov	r1, sl
     8ec:	2001      	movs	r0, #1
     8ee:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     8f0:	4d17      	ldr	r5, [pc, #92]	; (950 <configure_ethercat_dma_descriptors+0x1a4>)
     8f2:	4a18      	ldr	r2, [pc, #96]	; (954 <configure_ethercat_dma_descriptors+0x1a8>)
     8f4:	4631      	mov	r1, r6
     8f6:	4628      	mov	r0, r5
     8f8:	4b17      	ldr	r3, [pc, #92]	; (958 <configure_ethercat_dma_descriptors+0x1ac>)
     8fa:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     8fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
     900:	9300      	str	r3, [sp, #0]
     902:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     906:	4620      	mov	r0, r4
     908:	4e14      	ldr	r6, [pc, #80]	; (95c <configure_ethercat_dma_descriptors+0x1b0>)
     90a:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     90c:	68fb      	ldr	r3, [r7, #12]
     90e:	9300      	str	r3, [sp, #0]
     910:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     914:	2001      	movs	r0, #1
     916:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     918:	4628      	mov	r0, r5
     91a:	4b11      	ldr	r3, [pc, #68]	; (960 <configure_ethercat_dma_descriptors+0x1b4>)
     91c:	4798      	blx	r3
     91e:	2601      	movs	r6, #1
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <configure_ethercat_dma_descriptors+0x1b8>)
     922:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     926:	4621      	mov	r1, r4
     928:	4620      	mov	r0, r4
     92a:	4d0f      	ldr	r5, [pc, #60]	; (968 <configure_ethercat_dma_descriptors+0x1bc>)
     92c:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     92e:	4621      	mov	r1, r4
     930:	4630      	mov	r0, r6
     932:	47a8      	blx	r5
}
     934:	b003      	add	sp, #12
     936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     93a:	bf00      	nop
     93c:	20000510 	.word	0x20000510
     940:	00000631 	.word	0x00000631
     944:	20000538 	.word	0x20000538
     948:	20000000 	.word	0x20000000
     94c:	20000460 	.word	0x20000460
     950:	20000380 	.word	0x20000380
     954:	000005d9 	.word	0x000005d9
     958:	00000bed 	.word	0x00000bed
     95c:	00000fe5 	.word	0x00000fe5
     960:	00000bc5 	.word	0x00000bc5
     964:	41008000 	.word	0x41008000
     968:	00000f5d 	.word	0x00000f5d
     96c:	00004918 	.word	0x00004918
     970:	20000440 	.word	0x20000440
     974:	200003f0 	.word	0x200003f0
     978:	20000410 	.word	0x20000410
     97c:	20000500 	.word	0x20000500
     980:	20000548 	.word	0x20000548
     984:	20000400 	.word	0x20000400
     988:	20000450 	.word	0x20000450
     98c:	200004e0 	.word	0x200004e0
     990:	200004f0 	.word	0x200004f0
     994:	20000558 	.word	0x20000558
     998:	200003d0 	.word	0x200003d0
     99c:	200003e0 	.word	0x200003e0
     9a0:	20000528 	.word	0x20000528

000009a4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     9a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9a6:	4b04      	ldr	r3, [pc, #16]	; (9b8 <delay_us+0x14>)
     9a8:	681c      	ldr	r4, [r3, #0]
     9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <delay_us+0x18>)
     9ac:	4798      	blx	r3
     9ae:	4601      	mov	r1, r0
     9b0:	4620      	mov	r0, r4
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <delay_us+0x1c>)
     9b4:	4798      	blx	r3
     9b6:	bd10      	pop	{r4, pc}
     9b8:	2000017c 	.word	0x2000017c
     9bc:	00000c25 	.word	0x00000c25
     9c0:	00000c61 	.word	0x00000c61

000009c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     9c4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     9c6:	4b04      	ldr	r3, [pc, #16]	; (9d8 <delay_ms+0x14>)
     9c8:	681c      	ldr	r4, [r3, #0]
     9ca:	4b04      	ldr	r3, [pc, #16]	; (9dc <delay_ms+0x18>)
     9cc:	4798      	blx	r3
     9ce:	4601      	mov	r1, r0
     9d0:	4620      	mov	r0, r4
     9d2:	4b03      	ldr	r3, [pc, #12]	; (9e0 <delay_ms+0x1c>)
     9d4:	4798      	blx	r3
     9d6:	bd10      	pop	{r4, pc}
     9d8:	2000017c 	.word	0x2000017c
     9dc:	00000c3d 	.word	0x00000c3d
     9e0:	00000c61 	.word	0x00000c61

000009e4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     9e8:	8903      	ldrh	r3, [r0, #8]
     9ea:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     9ee:	4614      	mov	r4, r2
     9f0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     9f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     9fa:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     9fc:	a901      	add	r1, sp, #4
     9fe:	3814      	subs	r0, #20
     a00:	4b03      	ldr	r3, [pc, #12]	; (a10 <i2c_m_sync_write+0x2c>)
     a02:	4798      	blx	r3

	if (ret) {
     a04:	b910      	cbnz	r0, a0c <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     a06:	4620      	mov	r0, r4
     a08:	b004      	add	sp, #16
     a0a:	bd10      	pop	{r4, pc}
		return ret;
     a0c:	4604      	mov	r4, r0
     a0e:	e7fa      	b.n	a06 <i2c_m_sync_write+0x22>
     a10:	000016e5 	.word	0x000016e5

00000a14 <i2c_m_sync_read>:
{
     a14:	b510      	push	{r4, lr}
     a16:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a18:	8903      	ldrh	r3, [r0, #8]
     a1a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a1e:	4614      	mov	r4, r2
     a20:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a22:	f248 0301 	movw	r3, #32769	; 0x8001
     a26:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a2a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a2c:	a901      	add	r1, sp, #4
     a2e:	3814      	subs	r0, #20
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <i2c_m_sync_read+0x2c>)
     a32:	4798      	blx	r3
	if (ret) {
     a34:	b910      	cbnz	r0, a3c <i2c_m_sync_read+0x28>
}
     a36:	4620      	mov	r0, r4
     a38:	b004      	add	sp, #16
     a3a:	bd10      	pop	{r4, pc}
		return ret;
     a3c:	4604      	mov	r4, r0
     a3e:	e7fa      	b.n	a36 <i2c_m_sync_read+0x22>
     a40:	000016e5 	.word	0x000016e5

00000a44 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a44:	b538      	push	{r3, r4, r5, lr}
     a46:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a48:	4604      	mov	r4, r0
     a4a:	225e      	movs	r2, #94	; 0x5e
     a4c:	4908      	ldr	r1, [pc, #32]	; (a70 <i2c_m_sync_init+0x2c>)
     a4e:	3000      	adds	r0, #0
     a50:	bf18      	it	ne
     a52:	2001      	movne	r0, #1
     a54:	4b07      	ldr	r3, [pc, #28]	; (a74 <i2c_m_sync_init+0x30>)
     a56:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     a58:	4629      	mov	r1, r5
     a5a:	4620      	mov	r0, r4
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <i2c_m_sync_init+0x34>)
     a5e:	4798      	blx	r3
	if (init_status) {
     a60:	4603      	mov	r3, r0
     a62:	b918      	cbnz	r0, a6c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     a64:	4a05      	ldr	r2, [pc, #20]	; (a7c <i2c_m_sync_init+0x38>)
     a66:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     a68:	4a05      	ldr	r2, [pc, #20]	; (a80 <i2c_m_sync_init+0x3c>)
     a6a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     a6c:	4618      	mov	r0, r3
     a6e:	bd38      	pop	{r3, r4, r5, pc}
     a70:	0000492c 	.word	0x0000492c
     a74:	00000c1d 	.word	0x00000c1d
     a78:	0000163d 	.word	0x0000163d
     a7c:	00000a15 	.word	0x00000a15
     a80:	000009e5 	.word	0x000009e5

00000a84 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     a84:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     a86:	4b01      	ldr	r3, [pc, #4]	; (a8c <i2c_m_sync_enable+0x8>)
     a88:	4798      	blx	r3
}
     a8a:	bd08      	pop	{r3, pc}
     a8c:	0000166d 	.word	0x0000166d

00000a90 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     a90:	f3c1 0109 	ubfx	r1, r1, #0, #10
     a94:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     a98:	430a      	orrs	r2, r1
     a9a:	8382      	strh	r2, [r0, #28]
}
     a9c:	4610      	mov	r0, r2
     a9e:	4770      	bx	lr

00000aa0 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     aa0:	3014      	adds	r0, #20
     aa2:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     aa4:	2000      	movs	r0, #0
     aa6:	4770      	bx	lr

00000aa8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	460d      	mov	r5, r1
     aac:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     aae:	4604      	mov	r4, r0
     ab0:	b168      	cbz	r0, ace <io_write+0x26>
     ab2:	b151      	cbz	r1, aca <io_write+0x22>
     ab4:	2001      	movs	r0, #1
     ab6:	2234      	movs	r2, #52	; 0x34
     ab8:	4906      	ldr	r1, [pc, #24]	; (ad4 <io_write+0x2c>)
     aba:	4b07      	ldr	r3, [pc, #28]	; (ad8 <io_write+0x30>)
     abc:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     abe:	6823      	ldr	r3, [r4, #0]
     ac0:	4632      	mov	r2, r6
     ac2:	4629      	mov	r1, r5
     ac4:	4620      	mov	r0, r4
     ac6:	4798      	blx	r3
}
     ac8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     aca:	2000      	movs	r0, #0
     acc:	e7f3      	b.n	ab6 <io_write+0xe>
     ace:	2000      	movs	r0, #0
     ad0:	e7f1      	b.n	ab6 <io_write+0xe>
     ad2:	bf00      	nop
     ad4:	00004948 	.word	0x00004948
     ad8:	00000c1d 	.word	0x00000c1d

00000adc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	460d      	mov	r5, r1
     ae0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     ae2:	4604      	mov	r4, r0
     ae4:	b168      	cbz	r0, b02 <io_read+0x26>
     ae6:	b151      	cbz	r1, afe <io_read+0x22>
     ae8:	2001      	movs	r0, #1
     aea:	223d      	movs	r2, #61	; 0x3d
     aec:	4906      	ldr	r1, [pc, #24]	; (b08 <io_read+0x2c>)
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <io_read+0x30>)
     af0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     af2:	6863      	ldr	r3, [r4, #4]
     af4:	4632      	mov	r2, r6
     af6:	4629      	mov	r1, r5
     af8:	4620      	mov	r0, r4
     afa:	4798      	blx	r3
}
     afc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     afe:	2000      	movs	r0, #0
     b00:	e7f3      	b.n	aea <io_read+0xe>
     b02:	2000      	movs	r0, #0
     b04:	e7f1      	b.n	aea <io_read+0xe>
     b06:	bf00      	nop
     b08:	00004948 	.word	0x00004948
     b0c:	00000c1d 	.word	0x00000c1d

00000b10 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	460d      	mov	r5, r1
     b14:	4616      	mov	r6, r2
	ASSERT(io);
     b16:	4604      	mov	r4, r0
     b18:	2298      	movs	r2, #152	; 0x98
     b1a:	4907      	ldr	r1, [pc, #28]	; (b38 <_spi_m_dma_io_write+0x28>)
     b1c:	3000      	adds	r0, #0
     b1e:	bf18      	it	ne
     b20:	2001      	movne	r0, #1
     b22:	4b06      	ldr	r3, [pc, #24]	; (b3c <_spi_m_dma_io_write+0x2c>)
     b24:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     b26:	4633      	mov	r3, r6
     b28:	2200      	movs	r2, #0
     b2a:	4629      	mov	r1, r5
     b2c:	f1a4 0020 	sub.w	r0, r4, #32
     b30:	4c03      	ldr	r4, [pc, #12]	; (b40 <_spi_m_dma_io_write+0x30>)
     b32:	47a0      	blx	r4
}
     b34:	bd70      	pop	{r4, r5, r6, pc}
     b36:	bf00      	nop
     b38:	0000495c 	.word	0x0000495c
     b3c:	00000c1d 	.word	0x00000c1d
     b40:	00001bc9 	.word	0x00001bc9

00000b44 <_spi_m_dma_io_read>:
{
     b44:	b570      	push	{r4, r5, r6, lr}
     b46:	460d      	mov	r5, r1
     b48:	4616      	mov	r6, r2
	ASSERT(io);
     b4a:	4604      	mov	r4, r0
     b4c:	2281      	movs	r2, #129	; 0x81
     b4e:	4907      	ldr	r1, [pc, #28]	; (b6c <_spi_m_dma_io_read+0x28>)
     b50:	3000      	adds	r0, #0
     b52:	bf18      	it	ne
     b54:	2001      	movne	r0, #1
     b56:	4b06      	ldr	r3, [pc, #24]	; (b70 <_spi_m_dma_io_read+0x2c>)
     b58:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     b5a:	4633      	mov	r3, r6
     b5c:	462a      	mov	r2, r5
     b5e:	2100      	movs	r1, #0
     b60:	f1a4 0020 	sub.w	r0, r4, #32
     b64:	4c03      	ldr	r4, [pc, #12]	; (b74 <_spi_m_dma_io_read+0x30>)
     b66:	47a0      	blx	r4
}
     b68:	bd70      	pop	{r4, r5, r6, pc}
     b6a:	bf00      	nop
     b6c:	0000495c 	.word	0x0000495c
     b70:	00000c1d 	.word	0x00000c1d
     b74:	00001bc9 	.word	0x00001bc9

00000b78 <spi_m_dma_init>:
{
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     b7c:	4605      	mov	r5, r0
     b7e:	b1a8      	cbz	r0, bac <spi_m_dma_init+0x34>
     b80:	b191      	cbz	r1, ba8 <spi_m_dma_init+0x30>
     b82:	2001      	movs	r0, #1
     b84:	223b      	movs	r2, #59	; 0x3b
     b86:	490a      	ldr	r1, [pc, #40]	; (bb0 <spi_m_dma_init+0x38>)
     b88:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <spi_m_dma_init+0x3c>)
     b8a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b8c:	4628      	mov	r0, r5
     b8e:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     b92:	4621      	mov	r1, r4
     b94:	4b08      	ldr	r3, [pc, #32]	; (bb8 <spi_m_dma_init+0x40>)
     b96:	4798      	blx	r3
	if (rc) {
     b98:	4603      	mov	r3, r0
     b9a:	b918      	cbnz	r0, ba4 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     b9c:	4a07      	ldr	r2, [pc, #28]	; (bbc <spi_m_dma_init+0x44>)
     b9e:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     ba0:	4a07      	ldr	r2, [pc, #28]	; (bc0 <spi_m_dma_init+0x48>)
     ba2:	626a      	str	r2, [r5, #36]	; 0x24
}
     ba4:	4618      	mov	r0, r3
     ba6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     ba8:	2000      	movs	r0, #0
     baa:	e7eb      	b.n	b84 <spi_m_dma_init+0xc>
     bac:	2000      	movs	r0, #0
     bae:	e7e9      	b.n	b84 <spi_m_dma_init+0xc>
     bb0:	0000495c 	.word	0x0000495c
     bb4:	00000c1d 	.word	0x00000c1d
     bb8:	00001995 	.word	0x00001995
     bbc:	00000b45 	.word	0x00000b45
     bc0:	00000b11 	.word	0x00000b11

00000bc4 <spi_m_dma_enable>:
{
     bc4:	b510      	push	{r4, lr}
	ASSERT(spi);
     bc6:	4604      	mov	r4, r0
     bc8:	2251      	movs	r2, #81	; 0x51
     bca:	4905      	ldr	r1, [pc, #20]	; (be0 <spi_m_dma_enable+0x1c>)
     bcc:	3000      	adds	r0, #0
     bce:	bf18      	it	ne
     bd0:	2001      	movne	r0, #1
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <spi_m_dma_enable+0x20>)
     bd4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     bd6:	1d20      	adds	r0, r4, #4
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <spi_m_dma_enable+0x24>)
     bda:	4798      	blx	r3
     bdc:	bd10      	pop	{r4, pc}
     bde:	bf00      	nop
     be0:	0000495c 	.word	0x0000495c
     be4:	00000c1d 	.word	0x00000c1d
     be8:	00001b11 	.word	0x00001b11

00000bec <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     bec:	b570      	push	{r4, r5, r6, lr}
     bee:	460d      	mov	r5, r1
     bf0:	4616      	mov	r6, r2
	ASSERT(spi);
     bf2:	4604      	mov	r4, r0
     bf4:	22a8      	movs	r2, #168	; 0xa8
     bf6:	4906      	ldr	r1, [pc, #24]	; (c10 <spi_m_dma_register_callback+0x24>)
     bf8:	3000      	adds	r0, #0
     bfa:	bf18      	it	ne
     bfc:	2001      	movne	r0, #1
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <spi_m_dma_register_callback+0x28>)
     c00:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     c02:	4632      	mov	r2, r6
     c04:	4629      	mov	r1, r5
     c06:	1d20      	adds	r0, r4, #4
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <spi_m_dma_register_callback+0x2c>)
     c0a:	4798      	blx	r3
     c0c:	bd70      	pop	{r4, r5, r6, pc}
     c0e:	bf00      	nop
     c10:	0000495c 	.word	0x0000495c
     c14:	00000c1d 	.word	0x00000c1d
     c18:	00001b45 	.word	0x00001b45

00000c1c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c1c:	b900      	cbnz	r0, c20 <assert+0x4>
		__asm("BKPT #0");
     c1e:	be00      	bkpt	0x0000
     c20:	4770      	bx	lr
	...

00000c24 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     c24:	2364      	movs	r3, #100	; 0x64
     c26:	fb03 f000 	mul.w	r0, r3, r0
     c2a:	3002      	adds	r0, #2
     c2c:	4b02      	ldr	r3, [pc, #8]	; (c38 <_get_cycles_for_us+0x14>)
     c2e:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c32:	0840      	lsrs	r0, r0, #1
     c34:	4770      	bx	lr
     c36:	bf00      	nop
     c38:	aaaaaaab 	.word	0xaaaaaaab

00000c3c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     c3c:	2364      	movs	r3, #100	; 0x64
     c3e:	fb03 f300 	mul.w	r3, r3, r0
     c42:	3302      	adds	r3, #2
     c44:	4804      	ldr	r0, [pc, #16]	; (c58 <_get_cycles_for_ms+0x1c>)
     c46:	fba0 2303 	umull	r2, r3, r0, r3
     c4a:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c50:	fb00 f003 	mul.w	r0, r0, r3
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	aaaaaaab 	.word	0xaaaaaaab
     c5c:	00000000 	.word	0x00000000

00000c60 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     c60:	3901      	subs	r1, #1
     c62:	d8fd      	bhi.n	c60 <_delay_cycles>
     c64:	4770      	bx	lr
     c66:	bf00      	nop

00000c68 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c68:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     c6a:	4a0d      	ldr	r2, [pc, #52]	; (ca0 <_init_chip+0x38>)
     c6c:	8813      	ldrh	r3, [r2, #0]
     c6e:	b29b      	uxth	r3, r3
     c70:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     c74:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     c76:	4b0b      	ldr	r3, [pc, #44]	; (ca4 <_init_chip+0x3c>)
     c78:	4798      	blx	r3
	_oscctrl_init_sources();
     c7a:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <_init_chip+0x40>)
     c7c:	4798      	blx	r3
	_mclk_init();
     c7e:	4b0b      	ldr	r3, [pc, #44]	; (cac <_init_chip+0x44>)
     c80:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_init_chip+0x48>)
     c84:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c86:	f640 70ff 	movw	r0, #4095	; 0xfff
     c8a:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <_init_chip+0x4c>)
     c8c:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     c8e:	4a0a      	ldr	r2, [pc, #40]	; (cb8 <_init_chip+0x50>)
     c90:	6913      	ldr	r3, [r2, #16]
     c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c96:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     c98:	4b08      	ldr	r3, [pc, #32]	; (cbc <_init_chip+0x54>)
     c9a:	4798      	blx	r3
     c9c:	bd08      	pop	{r3, pc}
     c9e:	bf00      	nop
     ca0:	41004000 	.word	0x41004000
     ca4:	00001041 	.word	0x00001041
     ca8:	00001055 	.word	0x00001055
     cac:	00001035 	.word	0x00001035
     cb0:	00001071 	.word	0x00001071
     cb4:	00001011 	.word	0x00001011
     cb8:	40000800 	.word	0x40000800
     cbc:	00000d41 	.word	0x00000d41

00000cc0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     cc0:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cc2:	4a1d      	ldr	r2, [pc, #116]	; (d38 <_dmac_handler+0x78>)
     cc4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     cc6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     cca:	481c      	ldr	r0, [pc, #112]	; (d3c <_dmac_handler+0x7c>)
     ccc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cd0:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     cd2:	f412 7f80 	tst.w	r2, #256	; 0x100
     cd6:	d10a      	bne.n	cee <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cd8:	4a17      	ldr	r2, [pc, #92]	; (d38 <_dmac_handler+0x78>)
     cda:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     cdc:	f412 7f00 	tst.w	r2, #512	; 0x200
     ce0:	d110      	bne.n	d04 <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     ce2:	4a15      	ldr	r2, [pc, #84]	; (d38 <_dmac_handler+0x78>)
     ce4:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     ce6:	f412 6f80 	tst.w	r2, #1024	; 0x400
     cea:	d117      	bne.n	d1c <_dmac_handler+0x5c>
     cec:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     cee:	011b      	lsls	r3, r3, #4
     cf0:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     cf4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     cf8:	2101      	movs	r1, #1
     cfa:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     cfe:	6843      	ldr	r3, [r0, #4]
     d00:	4798      	blx	r3
     d02:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     d04:	011b      	lsls	r3, r3, #4
     d06:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d0a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d0e:	2102      	movs	r1, #2
     d10:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     d14:	4a09      	ldr	r2, [pc, #36]	; (d3c <_dmac_handler+0x7c>)
     d16:	58d3      	ldr	r3, [r2, r3]
     d18:	4798      	blx	r3
     d1a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     d1c:	011b      	lsls	r3, r3, #4
     d1e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d22:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d26:	2104      	movs	r1, #4
     d28:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     d2c:	4a03      	ldr	r2, [pc, #12]	; (d3c <_dmac_handler+0x7c>)
     d2e:	4413      	add	r3, r2
     d30:	689b      	ldr	r3, [r3, #8]
     d32:	4798      	blx	r3
	}
}
     d34:	e7da      	b.n	cec <_dmac_handler+0x2c>
     d36:	bf00      	nop
     d38:	4100a000 	.word	0x4100a000
     d3c:	20000180 	.word	0x20000180

00000d40 <_dma_init>:
{
     d40:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     d42:	4a3d      	ldr	r2, [pc, #244]	; (e38 <_dma_init+0xf8>)
     d44:	8813      	ldrh	r3, [r2, #0]
     d46:	b29b      	uxth	r3, r3
     d48:	f023 0302 	bic.w	r3, r3, #2
     d4c:	b29b      	uxth	r3, r3
     d4e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     d50:	8853      	ldrh	r3, [r2, #2]
     d52:	b29b      	uxth	r3, r3
     d54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     d58:	b29b      	uxth	r3, r3
     d5a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     d5c:	8813      	ldrh	r3, [r2, #0]
     d5e:	b29b      	uxth	r3, r3
     d60:	f043 0301 	orr.w	r3, r3, #1
     d64:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     d66:	4b34      	ldr	r3, [pc, #208]	; (e38 <_dma_init+0xf8>)
     d68:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     d6a:	f013 0f01 	tst.w	r3, #1
     d6e:	d1fa      	bne.n	d66 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     d70:	4a31      	ldr	r2, [pc, #196]	; (e38 <_dma_init+0xf8>)
     d72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     d76:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     d78:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     d7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
     d7e:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     d82:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     d84:	2300      	movs	r3, #0
     d86:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     d88:	492c      	ldr	r1, [pc, #176]	; (e3c <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     d8a:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     d8c:	492c      	ldr	r1, [pc, #176]	; (e40 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
     d8e:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
     d90:	e016      	b.n	dc0 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     d92:	4a2c      	ldr	r2, [pc, #176]	; (e44 <_dma_init+0x104>)
     d94:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     d98:	4c27      	ldr	r4, [pc, #156]	; (e38 <_dma_init+0xf8>)
     d9a:	1d19      	adds	r1, r3, #4
     d9c:	0109      	lsls	r1, r1, #4
     d9e:	1860      	adds	r0, r4, r1
     da0:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     da2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     da6:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     da8:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     daa:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     dac:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     dae:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     db0:	4922      	ldr	r1, [pc, #136]	; (e3c <_dma_init+0xfc>)
     db2:	011a      	lsls	r2, r3, #4
     db4:	1888      	adds	r0, r1, r2
     db6:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     db8:	2200      	movs	r2, #0
     dba:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
     dbc:	3301      	adds	r3, #1
     dbe:	b2db      	uxtb	r3, r3
     dc0:	2b1f      	cmp	r3, #31
     dc2:	d9e6      	bls.n	d92 <_dma_init+0x52>
     dc4:	2300      	movs	r3, #0
     dc6:	e00a      	b.n	dde <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     dc8:	f103 011f 	add.w	r1, r3, #31
     dcc:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dce:	2a00      	cmp	r2, #0
     dd0:	da10      	bge.n	df4 <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dd2:	2a00      	cmp	r2, #0
     dd4:	da1c      	bge.n	e10 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     dd6:	2a00      	cmp	r2, #0
     dd8:	da24      	bge.n	e24 <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
     dda:	3301      	adds	r3, #1
     ddc:	b2db      	uxtb	r3, r3
     dde:	2b04      	cmp	r3, #4
     de0:	d9f2      	bls.n	dc8 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     de2:	4a15      	ldr	r2, [pc, #84]	; (e38 <_dma_init+0xf8>)
     de4:	8813      	ldrh	r3, [r2, #0]
     de6:	b29b      	uxth	r3, r3
     de8:	f043 0302 	orr.w	r3, r3, #2
     dec:	8013      	strh	r3, [r2, #0]
}
     dee:	2000      	movs	r0, #0
     df0:	bc30      	pop	{r4, r5}
     df2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     df4:	0950      	lsrs	r0, r2, #5
     df6:	f001 051f 	and.w	r5, r1, #31
     dfa:	2401      	movs	r4, #1
     dfc:	40ac      	lsls	r4, r5
     dfe:	3020      	adds	r0, #32
     e00:	4d11      	ldr	r5, [pc, #68]	; (e48 <_dma_init+0x108>)
     e02:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e0a:	f3bf 8f6f 	isb	sy
     e0e:	e7e0      	b.n	dd2 <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e10:	0950      	lsrs	r0, r2, #5
     e12:	f001 051f 	and.w	r5, r1, #31
     e16:	2401      	movs	r4, #1
     e18:	40ac      	lsls	r4, r5
     e1a:	3060      	adds	r0, #96	; 0x60
     e1c:	4d0a      	ldr	r5, [pc, #40]	; (e48 <_dma_init+0x108>)
     e1e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     e22:	e7d8      	b.n	dd6 <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e24:	0952      	lsrs	r2, r2, #5
     e26:	f001 011f 	and.w	r1, r1, #31
     e2a:	2001      	movs	r0, #1
     e2c:	fa00 f101 	lsl.w	r1, r0, r1
     e30:	4805      	ldr	r0, [pc, #20]	; (e48 <_dma_init+0x108>)
     e32:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     e36:	e7d0      	b.n	dda <_dma_init+0x9a>
     e38:	4100a000 	.word	0x4100a000
     e3c:	20000570 	.word	0x20000570
     e40:	20000770 	.word	0x20000770
     e44:	00004978 	.word	0x00004978
     e48:	e000e100 	.word	0xe000e100

00000e4c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     e4c:	b991      	cbnz	r1, e74 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     e4e:	b942      	cbnz	r2, e62 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     e50:	0100      	lsls	r0, r0, #4
     e52:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e56:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e5a:	2302      	movs	r3, #2
     e5c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     e60:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     e62:	0100      	lsls	r0, r0, #4
     e64:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e68:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e6c:	2302      	movs	r3, #2
     e6e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     e72:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     e74:	2901      	cmp	r1, #1
     e76:	d002      	beq.n	e7e <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
     e78:	2902      	cmp	r1, #2
     e7a:	d012      	beq.n	ea2 <_dma_set_irq_state+0x56>
     e7c:	4770      	bx	lr
	if (value == 0x0) {
     e7e:	b93a      	cbnz	r2, e90 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     e80:	0100      	lsls	r0, r0, #4
     e82:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e86:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e8a:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     e8e:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     e90:	0100      	lsls	r0, r0, #4
     e92:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e96:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e9a:	2301      	movs	r3, #1
     e9c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     ea0:	4770      	bx	lr
	if (value == 0x0) {
     ea2:	b142      	cbz	r2, eb6 <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
     ea4:	0100      	lsls	r0, r0, #4
     ea6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     eaa:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     eae:	2304      	movs	r3, #4
     eb0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     eb4:	e7e2      	b.n	e7c <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
     eb6:	0100      	lsls	r0, r0, #4
     eb8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     ebc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ec0:	2304      	movs	r3, #4
     ec2:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     ec6:	4770      	bx	lr

00000ec8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     ec8:	4b02      	ldr	r3, [pc, #8]	; (ed4 <_dma_set_destination_address+0xc>)
     eca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ece:	6081      	str	r1, [r0, #8]
}
     ed0:	2000      	movs	r0, #0
     ed2:	4770      	bx	lr
     ed4:	20000570 	.word	0x20000570

00000ed8 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     ed8:	4b02      	ldr	r3, [pc, #8]	; (ee4 <_dma_set_source_address+0xc>)
     eda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ede:	6041      	str	r1, [r0, #4]
}
     ee0:	2000      	movs	r0, #0
     ee2:	4770      	bx	lr
     ee4:	20000570 	.word	0x20000570

00000ee8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     ee8:	4a05      	ldr	r2, [pc, #20]	; (f00 <_dma_srcinc_enable+0x18>)
     eea:	0100      	lsls	r0, r0, #4
     eec:	5a13      	ldrh	r3, [r2, r0]
     eee:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     ef4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     ef8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     efa:	5211      	strh	r1, [r2, r0]
}
     efc:	2000      	movs	r0, #0
     efe:	4770      	bx	lr
     f00:	20000570 	.word	0x20000570

00000f04 <_dma_set_data_amount>:
{
     f04:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     f06:	4c14      	ldr	r4, [pc, #80]	; (f58 <_dma_set_data_amount+0x54>)
     f08:	0102      	lsls	r2, r0, #4
     f0a:	18a3      	adds	r3, r4, r2
     f0c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f0e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     f10:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f14:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     f16:	f412 6f00 	tst.w	r2, #2048	; 0x800
     f1a:	d006      	beq.n	f2a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f1c:	fa01 f403 	lsl.w	r4, r1, r3
     f20:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     f22:	4a0d      	ldr	r2, [pc, #52]	; (f58 <_dma_set_data_amount+0x54>)
     f24:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     f28:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     f2a:	4c0b      	ldr	r4, [pc, #44]	; (f58 <_dma_set_data_amount+0x54>)
     f2c:	0102      	lsls	r2, r0, #4
     f2e:	18a5      	adds	r5, r4, r2
     f30:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f32:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     f34:	f412 6f80 	tst.w	r2, #1024	; 0x400
     f38:	d005      	beq.n	f46 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f3a:	fa01 f303 	lsl.w	r3, r1, r3
     f3e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     f40:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     f44:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     f46:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
     f48:	4b03      	ldr	r3, [pc, #12]	; (f58 <_dma_set_data_amount+0x54>)
     f4a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f4e:	8041      	strh	r1, [r0, #2]
}
     f50:	2000      	movs	r0, #0
     f52:	bc30      	pop	{r4, r5}
     f54:	4770      	bx	lr
     f56:	bf00      	nop
     f58:	20000570 	.word	0x20000570

00000f5c <_dma_enable_transaction>:
{
     f5c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     f5e:	4c0c      	ldr	r4, [pc, #48]	; (f90 <_dma_enable_transaction+0x34>)
     f60:	0102      	lsls	r2, r0, #4
     f62:	5aa3      	ldrh	r3, [r4, r2]
     f64:	b29b      	uxth	r3, r3
     f66:	f043 0301 	orr.w	r3, r3, #1
     f6a:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     f6c:	4c09      	ldr	r4, [pc, #36]	; (f94 <_dma_enable_transaction+0x38>)
     f6e:	1d03      	adds	r3, r0, #4
     f70:	011b      	lsls	r3, r3, #4
     f72:	58e2      	ldr	r2, [r4, r3]
     f74:	f042 0202 	orr.w	r2, r2, #2
     f78:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
     f7a:	b129      	cbz	r1, f88 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
     f7c:	2301      	movs	r3, #1
     f7e:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
     f82:	6922      	ldr	r2, [r4, #16]
     f84:	4310      	orrs	r0, r2
     f86:	6120      	str	r0, [r4, #16]
}
     f88:	2000      	movs	r0, #0
     f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
     f8e:	4770      	bx	lr
     f90:	20000570 	.word	0x20000570
     f94:	4100a000 	.word	0x4100a000

00000f98 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <_dma_get_channel_resource+0xc>)
     f9a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     f9e:	6001      	str	r1, [r0, #0]
}
     fa0:	2000      	movs	r0, #0
     fa2:	4770      	bx	lr
     fa4:	20000180 	.word	0x20000180

00000fa8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
     fa8:	b508      	push	{r3, lr}
	_dmac_handler();
     faa:	4b01      	ldr	r3, [pc, #4]	; (fb0 <DMAC_0_Handler+0x8>)
     fac:	4798      	blx	r3
     fae:	bd08      	pop	{r3, pc}
     fb0:	00000cc1 	.word	0x00000cc1

00000fb4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
     fb4:	b508      	push	{r3, lr}
	_dmac_handler();
     fb6:	4b01      	ldr	r3, [pc, #4]	; (fbc <DMAC_1_Handler+0x8>)
     fb8:	4798      	blx	r3
     fba:	bd08      	pop	{r3, pc}
     fbc:	00000cc1 	.word	0x00000cc1

00000fc0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
     fc0:	b508      	push	{r3, lr}
	_dmac_handler();
     fc2:	4b01      	ldr	r3, [pc, #4]	; (fc8 <DMAC_2_Handler+0x8>)
     fc4:	4798      	blx	r3
     fc6:	bd08      	pop	{r3, pc}
     fc8:	00000cc1 	.word	0x00000cc1

00000fcc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
     fcc:	b508      	push	{r3, lr}
	_dmac_handler();
     fce:	4b01      	ldr	r3, [pc, #4]	; (fd4 <DMAC_3_Handler+0x8>)
     fd0:	4798      	blx	r3
     fd2:	bd08      	pop	{r3, pc}
     fd4:	00000cc1 	.word	0x00000cc1

00000fd8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
     fd8:	b508      	push	{r3, lr}
	_dmac_handler();
     fda:	4b01      	ldr	r3, [pc, #4]	; (fe0 <DMAC_4_Handler+0x8>)
     fdc:	4798      	blx	r3
     fde:	bd08      	pop	{r3, pc}
     fe0:	00000cc1 	.word	0x00000cc1

00000fe4 <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
     fe4:	b084      	sub	sp, #16
     fe6:	b470      	push	{r4, r5, r6}
     fe8:	b085      	sub	sp, #20
     fea:	4606      	mov	r6, r0
     fec:	a809      	add	r0, sp, #36	; 0x24
     fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     ff2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
     ff4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
     ff8:	4d04      	ldr	r5, [pc, #16]	; (100c <_dma_set_descriptor+0x28>)
     ffa:	eb05 1506 	add.w	r5, r5, r6, lsl #4
     ffe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    1002:	b005      	add	sp, #20
    1004:	bc70      	pop	{r4, r5, r6}
    1006:	b004      	add	sp, #16
    1008:	4770      	bx	lr
    100a:	bf00      	nop
    100c:	20000570 	.word	0x20000570

00001010 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1010:	f010 0f01 	tst.w	r0, #1
    1014:	d008      	beq.n	1028 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1016:	4a05      	ldr	r2, [pc, #20]	; (102c <_gclk_init_generators_by_fref+0x1c>)
    1018:	4b05      	ldr	r3, [pc, #20]	; (1030 <_gclk_init_generators_by_fref+0x20>)
    101a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    101c:	4b04      	ldr	r3, [pc, #16]	; (1030 <_gclk_init_generators_by_fref+0x20>)
    101e:	685a      	ldr	r2, [r3, #4]
    1020:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1024:	421a      	tst	r2, r3
    1026:	d1f9      	bne.n	101c <_gclk_init_generators_by_fref+0xc>
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	00010108 	.word	0x00010108
    1030:	40001c00 	.word	0x40001c00

00001034 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1034:	2201      	movs	r2, #1
    1036:	4b01      	ldr	r3, [pc, #4]	; (103c <_mclk_init+0x8>)
    1038:	715a      	strb	r2, [r3, #5]
    103a:	4770      	bx	lr
    103c:	40000800 	.word	0x40000800

00001040 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <_osc32kctrl_init_sources+0x10>)
    1042:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1044:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1048:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    104a:	2201      	movs	r2, #1
    104c:	741a      	strb	r2, [r3, #16]
    104e:	4770      	bx	lr
    1050:	40001400 	.word	0x40001400

00001054 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1054:	4a04      	ldr	r2, [pc, #16]	; (1068 <_oscctrl_init_sources+0x14>)
    1056:	4b05      	ldr	r3, [pc, #20]	; (106c <_oscctrl_init_sources+0x18>)
    1058:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <_oscctrl_init_sources+0x18>)
    105c:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    105e:	f013 0f02 	tst.w	r3, #2
    1062:	d0fa      	beq.n	105a <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1064:	4770      	bx	lr
    1066:	bf00      	nop
    1068:	03002606 	.word	0x03002606
    106c:	40001000 	.word	0x40001000

00001070 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1070:	2231      	movs	r2, #49	; 0x31
    1072:	4b0e      	ldr	r3, [pc, #56]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1074:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1076:	4b0d      	ldr	r3, [pc, #52]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    107a:	f013 0f06 	tst.w	r3, #6
    107e:	d1fa      	bne.n	1076 <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1080:	4b0a      	ldr	r3, [pc, #40]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1082:	4a0b      	ldr	r2, [pc, #44]	; (10b0 <_oscctrl_init_referenced_generators+0x40>)
    1084:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1086:	2202      	movs	r2, #2
    1088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    108c:	4b07      	ldr	r3, [pc, #28]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    108e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1090:	f013 0f02 	tst.w	r3, #2
    1094:	d1fa      	bne.n	108c <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    109a:	f013 0f01 	tst.w	r3, #1
    109e:	d104      	bne.n	10aa <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    10a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10a4:	f013 0f02 	tst.w	r3, #2
    10a8:	d0f5      	beq.n	1096 <_oscctrl_init_referenced_generators+0x26>
    10aa:	4770      	bx	lr
    10ac:	40001000 	.word	0x40001000
    10b0:	00020060 	.word	0x00020060

000010b4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    10b4:	b500      	push	{lr}
    10b6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <RAMECC_Handler+0x3c>)
    10ba:	789b      	ldrb	r3, [r3, #2]
    10bc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    10be:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	f013 0f02 	tst.w	r3, #2
    10c6:	d006      	beq.n	10d6 <RAMECC_Handler+0x22>
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <RAMECC_Handler+0x40>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	b11b      	cbz	r3, 10d6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    10ce:	4a08      	ldr	r2, [pc, #32]	; (10f0 <RAMECC_Handler+0x3c>)
    10d0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10d2:	4798      	blx	r3
    10d4:	e009      	b.n	10ea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10d6:	9b01      	ldr	r3, [sp, #4]
    10d8:	f013 0f01 	tst.w	r3, #1
    10dc:	d005      	beq.n	10ea <RAMECC_Handler+0x36>
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <RAMECC_Handler+0x40>)
    10e0:	685b      	ldr	r3, [r3, #4]
    10e2:	b113      	cbz	r3, 10ea <RAMECC_Handler+0x36>
    10e4:	4a02      	ldr	r2, [pc, #8]	; (10f0 <RAMECC_Handler+0x3c>)
    10e6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10e8:	4798      	blx	r3
	} else {
		return;
	}
}
    10ea:	b003      	add	sp, #12
    10ec:	f85d fb04 	ldr.w	pc, [sp], #4
    10f0:	41020000 	.word	0x41020000
    10f4:	20000970 	.word	0x20000970

000010f8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10f8:	b470      	push	{r4, r5, r6}
    10fa:	b089      	sub	sp, #36	; 0x24
    10fc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10fe:	466c      	mov	r4, sp
    1100:	4d0c      	ldr	r5, [pc, #48]	; (1134 <_sercom_get_hardware_index+0x3c>)
    1102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1106:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    110a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    110e:	2000      	movs	r0, #0
    1110:	2807      	cmp	r0, #7
    1112:	d80a      	bhi.n	112a <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1114:	ab08      	add	r3, sp, #32
    1116:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    111a:	f853 3c20 	ldr.w	r3, [r3, #-32]
    111e:	42b3      	cmp	r3, r6
    1120:	d001      	beq.n	1126 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1122:	3001      	adds	r0, #1
    1124:	e7f4      	b.n	1110 <_sercom_get_hardware_index+0x18>
			return i;
    1126:	b2c0      	uxtb	r0, r0
    1128:	e000      	b.n	112c <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    112a:	2000      	movs	r0, #0
}
    112c:	b009      	add	sp, #36	; 0x24
    112e:	bc70      	pop	{r4, r5, r6}
    1130:	4770      	bx	lr
    1132:	bf00      	nop
    1134:	00004a78 	.word	0x00004a78

00001138 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1138:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    113a:	f013 0f01 	tst.w	r3, #1
    113e:	d109      	bne.n	1154 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1140:	6803      	ldr	r3, [r0, #0]
    1142:	f043 0302 	orr.w	r3, r3, #2
    1146:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1148:	69c3      	ldr	r3, [r0, #28]
    114a:	f013 0f03 	tst.w	r3, #3
    114e:	d1fb      	bne.n	1148 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1150:	2000      	movs	r0, #0
    1152:	4770      	bx	lr
		return ERR_BUSY;
    1154:	f06f 0003 	mvn.w	r0, #3
}
    1158:	4770      	bx	lr

0000115a <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    115a:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    115c:	f013 0f04 	tst.w	r3, #4
    1160:	d109      	bne.n	1176 <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    1162:	6843      	ldr	r3, [r0, #4]
    1164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1168:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    116a:	69c3      	ldr	r3, [r0, #28]
    116c:	f013 0f17 	tst.w	r3, #23
    1170:	d1fb      	bne.n	116a <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1172:	2000      	movs	r0, #0
    1174:	4770      	bx	lr
		return ERR_BUSY;
    1176:	f06f 0003 	mvn.w	r0, #3
}
    117a:	4770      	bx	lr

0000117c <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    117c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    117e:	f013 0f04 	tst.w	r3, #4
    1182:	d109      	bne.n	1198 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    1184:	6843      	ldr	r3, [r0, #4]
    1186:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    118a:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    118c:	69c3      	ldr	r3, [r0, #28]
    118e:	f013 0f17 	tst.w	r3, #23
    1192:	d1fb      	bne.n	118c <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1194:	2000      	movs	r0, #0
    1196:	4770      	bx	lr
		return ERR_BUSY;
    1198:	f06f 0003 	mvn.w	r0, #3
}
    119c:	4770      	bx	lr

0000119e <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    119e:	3028      	adds	r0, #40	; 0x28
    11a0:	4770      	bx	lr

000011a2 <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11a2:	3028      	adds	r0, #40	; 0x28
    11a4:	4770      	bx	lr
	...

000011a8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    11a8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11aa:	4b04      	ldr	r3, [pc, #16]	; (11bc <_spi_get_tx_dma_channel+0x14>)
    11ac:	4798      	blx	r3

	switch (index) {
    11ae:	2805      	cmp	r0, #5
    11b0:	d001      	beq.n	11b6 <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    11b2:	2000      	movs	r0, #0
    11b4:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    11b6:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11b8:	bd08      	pop	{r3, pc}
    11ba:	bf00      	nop
    11bc:	000010f9 	.word	0x000010f9

000011c0 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    11c0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11c2:	4b04      	ldr	r3, [pc, #16]	; (11d4 <_spi_is_rx_dma_channel_enabled+0x14>)
    11c4:	4798      	blx	r3

	switch (index) {
    11c6:	2805      	cmp	r0, #5
    11c8:	d001      	beq.n	11ce <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    11ca:	2000      	movs	r0, #0
    11cc:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    11ce:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    11d0:	bd08      	pop	{r3, pc}
    11d2:	bf00      	nop
    11d4:	000010f9 	.word	0x000010f9

000011d8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    11d8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11da:	4b07      	ldr	r3, [pc, #28]	; (11f8 <_spi_get_rx_dma_channel+0x20>)
    11dc:	4798      	blx	r3

	switch (index) {
    11de:	2807      	cmp	r0, #7
    11e0:	d807      	bhi.n	11f2 <_spi_get_rx_dma_channel+0x1a>
    11e2:	e8df f000 	tbb	[pc, r0]
    11e6:	0404      	.short	0x0404
    11e8:	06040404 	.word	0x06040404
    11ec:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    11ee:	2001      	movs	r0, #1
    11f0:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    11f2:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11f4:	bd08      	pop	{r3, pc}
    11f6:	bf00      	nop
    11f8:	000010f9 	.word	0x000010f9

000011fc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    11fc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    11fe:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    1200:	689b      	ldr	r3, [r3, #8]
    1202:	b103      	cbz	r3, 1206 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    1204:	4798      	blx	r3
    1206:	bd08      	pop	{r3, pc}

00001208 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    1208:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    120a:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    120c:	68db      	ldr	r3, [r3, #12]
    120e:	b103      	cbz	r3, 1212 <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    1210:	4798      	blx	r3
    1212:	bd08      	pop	{r3, pc}

00001214 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    1214:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1216:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    1218:	685b      	ldr	r3, [r3, #4]
    121a:	b103      	cbz	r3, 121e <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    121c:	4798      	blx	r3
    121e:	bd08      	pop	{r3, pc}

00001220 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1220:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1222:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    1224:	691b      	ldr	r3, [r3, #16]
    1226:	b103      	cbz	r3, 122a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1228:	4798      	blx	r3
    122a:	bd08      	pop	{r3, pc}

0000122c <_get_i2cm_index>:
{
    122c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    122e:	4b0d      	ldr	r3, [pc, #52]	; (1264 <_get_i2cm_index+0x38>)
    1230:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1232:	2300      	movs	r3, #0
    1234:	b143      	cbz	r3, 1248 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1236:	f240 32a7 	movw	r2, #935	; 0x3a7
    123a:	490b      	ldr	r1, [pc, #44]	; (1268 <_get_i2cm_index+0x3c>)
    123c:	2000      	movs	r0, #0
    123e:	4b0b      	ldr	r3, [pc, #44]	; (126c <_get_i2cm_index+0x40>)
    1240:	4798      	blx	r3
	return -1;
    1242:	f04f 30ff 	mov.w	r0, #4294967295
}
    1246:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1248:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    124c:	00d1      	lsls	r1, r2, #3
    124e:	4a08      	ldr	r2, [pc, #32]	; (1270 <_get_i2cm_index+0x44>)
    1250:	440a      	add	r2, r1
    1252:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    1256:	4290      	cmp	r0, r2
    1258:	d002      	beq.n	1260 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    125a:	3301      	adds	r3, #1
    125c:	b2db      	uxtb	r3, r3
    125e:	e7e9      	b.n	1234 <_get_i2cm_index+0x8>
			return i;
    1260:	b258      	sxtb	r0, r3
    1262:	bd08      	pop	{r3, pc}
    1264:	000010f9 	.word	0x000010f9
    1268:	00004aec 	.word	0x00004aec
    126c:	00000c1d 	.word	0x00000c1d
    1270:	00004a78 	.word	0x00004a78

00001274 <_i2c_m_sync_init_impl>:
{
    1274:	b538      	push	{r3, r4, r5, lr}
    1276:	4605      	mov	r5, r0
    1278:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    127a:	4608      	mov	r0, r1
    127c:	4b33      	ldr	r3, [pc, #204]	; (134c <_i2c_m_sync_init_impl+0xd8>)
    127e:	4798      	blx	r3
    1280:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1282:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1284:	f013 0f01 	tst.w	r3, #1
    1288:	d122      	bne.n	12d0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    128a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    128e:	00da      	lsls	r2, r3, #3
    1290:	4b2f      	ldr	r3, [pc, #188]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    1292:	4413      	add	r3, r2
    1294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1296:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    129a:	69e3      	ldr	r3, [r4, #28]
    129c:	f013 0f03 	tst.w	r3, #3
    12a0:	d1fb      	bne.n	129a <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12a2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    12a4:	f013 0f02 	tst.w	r3, #2
    12a8:	d00b      	beq.n	12c2 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12aa:	6823      	ldr	r3, [r4, #0]
    12ac:	f023 0302 	bic.w	r3, r3, #2
    12b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12b2:	69e3      	ldr	r3, [r4, #28]
    12b4:	f013 0f03 	tst.w	r3, #3
    12b8:	d1fb      	bne.n	12b2 <_i2c_m_sync_init_impl+0x3e>
    12ba:	69e3      	ldr	r3, [r4, #28]
    12bc:	f013 0f02 	tst.w	r3, #2
    12c0:	d1fb      	bne.n	12ba <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12c2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12c6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12c8:	69e3      	ldr	r3, [r4, #28]
    12ca:	f013 0f03 	tst.w	r3, #3
    12ce:	d1fb      	bne.n	12c8 <_i2c_m_sync_init_impl+0x54>
    12d0:	69e3      	ldr	r3, [r4, #28]
    12d2:	f013 0f01 	tst.w	r3, #1
    12d6:	d1fb      	bne.n	12d0 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12d8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12dc:	00da      	lsls	r2, r3, #3
    12de:	4b1c      	ldr	r3, [pc, #112]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    12e0:	4413      	add	r3, r2
    12e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12e6:	69e3      	ldr	r3, [r4, #28]
    12e8:	f013 0f03 	tst.w	r3, #3
    12ec:	d1fb      	bne.n	12e6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12ee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12f2:	00da      	lsls	r2, r3, #3
    12f4:	4b16      	ldr	r3, [pc, #88]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    12f6:	4413      	add	r3, r2
    12f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    12fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12fc:	69e3      	ldr	r3, [r4, #28]
    12fe:	f013 0f04 	tst.w	r3, #4
    1302:	d1fb      	bne.n	12fc <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1304:	0042      	lsls	r2, r0, #1
    1306:	4402      	add	r2, r0
    1308:	00d1      	lsls	r1, r2, #3
    130a:	4b11      	ldr	r3, [pc, #68]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    130c:	440b      	add	r3, r1
    130e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1310:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1312:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    1316:	f003 0303 	and.w	r3, r3, #3
    131a:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    131c:	2b01      	cmp	r3, #1
    131e:	bf94      	ite	ls
    1320:	2300      	movls	r3, #0
    1322:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1324:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    132a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    132e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1330:	69e3      	ldr	r3, [r4, #28]
    1332:	f013 0f04 	tst.w	r3, #4
    1336:	d1fb      	bne.n	1330 <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    1338:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    133c:	00c2      	lsls	r2, r0, #3
    133e:	4b04      	ldr	r3, [pc, #16]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    1340:	4413      	add	r3, r2
    1342:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1346:	81eb      	strh	r3, [r5, #14]
}
    1348:	2000      	movs	r0, #0
    134a:	bd38      	pop	{r3, r4, r5, pc}
    134c:	0000122d 	.word	0x0000122d
    1350:	00004a78 	.word	0x00004a78

00001354 <_sercom_i2c_sync_send_address>:
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1358:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    135a:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    135c:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1360:	f240 52a6 	movw	r2, #1446	; 0x5a6
    1364:	4999      	ldr	r1, [pc, #612]	; (15cc <_sercom_i2c_sync_send_address+0x278>)
    1366:	3000      	adds	r0, #0
    1368:	bf18      	it	ne
    136a:	2001      	movne	r0, #1
    136c:	4b98      	ldr	r3, [pc, #608]	; (15d0 <_sercom_i2c_sync_send_address+0x27c>)
    136e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1370:	686b      	ldr	r3, [r5, #4]
    1372:	2b01      	cmp	r3, #1
    1374:	d057      	beq.n	1426 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1376:	6863      	ldr	r3, [r4, #4]
    1378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    137c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    137e:	69e3      	ldr	r3, [r4, #28]
    1380:	f013 0f04 	tst.w	r3, #4
    1384:	d1fb      	bne.n	137e <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1386:	882b      	ldrh	r3, [r5, #0]
    1388:	f413 6f80 	tst.w	r3, #1024	; 0x400
    138c:	d056      	beq.n	143c <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    138e:	886a      	ldrh	r2, [r5, #2]
    1390:	f012 0f01 	tst.w	r2, #1
    1394:	d004      	beq.n	13a0 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1396:	886a      	ldrh	r2, [r5, #2]
    1398:	b292      	uxth	r2, r2
    139a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    139e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    13a0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    13a4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    13a8:	69e3      	ldr	r3, [r4, #28]
    13aa:	f013 0f04 	tst.w	r3, #4
    13ae:	d1fb      	bne.n	13a8 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    13b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    13b6:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    13b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    13bc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13be:	69e3      	ldr	r3, [r4, #28]
    13c0:	f013 0f04 	tst.w	r3, #4
    13c4:	d1fb      	bne.n	13be <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    13c6:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    13c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    13cc:	7e33      	ldrb	r3, [r6, #24]
    13ce:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    13d0:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    13d2:	1e51      	subs	r1, r2, #1
    13d4:	b11a      	cbz	r2, 13de <_sercom_i2c_sync_send_address+0x8a>
    13d6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    13d8:	f013 0f03 	tst.w	r3, #3
    13dc:	d0f6      	beq.n	13cc <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    13de:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    13e0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	f013 0f04 	tst.w	r3, #4
    13ea:	d1fb      	bne.n	13e4 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    13ec:	8b63      	ldrh	r3, [r4, #26]
    13ee:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    13f0:	f010 0f01 	tst.w	r0, #1
    13f4:	f000 809c 	beq.w	1530 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    13f8:	f013 0f02 	tst.w	r3, #2
    13fc:	d032      	beq.n	1464 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    13fe:	2201      	movs	r2, #1
    1400:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1402:	886a      	ldrh	r2, [r5, #2]
    1404:	b292      	uxth	r2, r2
    1406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    140a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    140c:	886a      	ldrh	r2, [r5, #2]
    140e:	b292      	uxth	r2, r2
    1410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1414:	b292      	uxth	r2, r2
    1416:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1418:	f013 0f01 	tst.w	r3, #1
    141c:	f000 80d1 	beq.w	15c2 <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    1420:	f06f 0004 	mvn.w	r0, #4
    1424:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    1426:	2e00      	cmp	r6, #0
    1428:	d0a5      	beq.n	1376 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    142a:	6863      	ldr	r3, [r4, #4]
    142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1430:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1432:	69e3      	ldr	r3, [r4, #28]
    1434:	f013 0f04 	tst.w	r3, #4
    1438:	d1fb      	bne.n	1432 <_sercom_i2c_sync_send_address+0xde>
    143a:	e7a4      	b.n	1386 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    143c:	005b      	lsls	r3, r3, #1
    143e:	b2db      	uxtb	r3, r3
    1440:	886a      	ldrh	r2, [r5, #2]
    1442:	f002 0201 	and.w	r2, r2, #1
    1446:	431a      	orrs	r2, r3
    1448:	69e3      	ldr	r3, [r4, #28]
    144a:	f013 0f04 	tst.w	r3, #4
    144e:	d1fb      	bne.n	1448 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1450:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1456:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1458:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    145a:	69e3      	ldr	r3, [r4, #28]
    145c:	f013 0f04 	tst.w	r3, #4
    1460:	d1fb      	bne.n	145a <_sercom_i2c_sync_send_address+0x106>
    1462:	e7b0      	b.n	13c6 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1464:	f013 0f04 	tst.w	r3, #4
    1468:	d11f      	bne.n	14aa <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    146a:	886b      	ldrh	r3, [r5, #2]
    146c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1470:	d039      	beq.n	14e6 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1472:	882b      	ldrh	r3, [r5, #0]
    1474:	121b      	asrs	r3, r3, #8
    1476:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1478:	f003 0206 	and.w	r2, r3, #6
    147c:	69e3      	ldr	r3, [r4, #28]
    147e:	f013 0f04 	tst.w	r3, #4
    1482:	d1fb      	bne.n	147c <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1484:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    148a:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    148c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1490:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1492:	69e3      	ldr	r3, [r4, #28]
    1494:	f013 0f04 	tst.w	r3, #4
    1498:	d1fb      	bne.n	1492 <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    149a:	886b      	ldrh	r3, [r5, #2]
    149c:	b29b      	uxth	r3, r3
    149e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    14a2:	b29b      	uxth	r3, r3
    14a4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    14a6:	2000      	movs	r0, #0
    14a8:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    14aa:	686b      	ldr	r3, [r5, #4]
    14ac:	2b00      	cmp	r3, #0
    14ae:	dd04      	ble.n	14ba <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    14b0:	886b      	ldrh	r3, [r5, #2]
    14b2:	b29b      	uxth	r3, r3
    14b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    14b8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14ba:	886b      	ldrh	r3, [r5, #2]
    14bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14c0:	d108      	bne.n	14d4 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    14c2:	886b      	ldrh	r3, [r5, #2]
    14c4:	b29b      	uxth	r3, r3
    14c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14ca:	b29b      	uxth	r3, r3
    14cc:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    14ce:	f06f 0001 	mvn.w	r0, #1
    14d2:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14d4:	6863      	ldr	r3, [r4, #4]
    14d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14dc:	69e3      	ldr	r3, [r4, #28]
    14de:	f013 0f04 	tst.w	r3, #4
    14e2:	d1fb      	bne.n	14dc <_sercom_i2c_sync_send_address+0x188>
    14e4:	e7ed      	b.n	14c2 <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    14e6:	6868      	ldr	r0, [r5, #4]
    14e8:	b998      	cbnz	r0, 1512 <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    14ea:	886b      	ldrh	r3, [r5, #2]
    14ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14f0:	d106      	bne.n	1500 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    14f2:	886b      	ldrh	r3, [r5, #2]
    14f4:	b29b      	uxth	r3, r3
    14f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14fa:	b29b      	uxth	r3, r3
    14fc:	806b      	strh	r3, [r5, #2]
    14fe:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1500:	6863      	ldr	r3, [r4, #4]
    1502:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1506:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1508:	69e3      	ldr	r3, [r4, #28]
    150a:	f013 0f04 	tst.w	r3, #4
    150e:	d1fb      	bne.n	1508 <_sercom_i2c_sync_send_address+0x1b4>
    1510:	e7ef      	b.n	14f2 <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1512:	68ab      	ldr	r3, [r5, #8]
    1514:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1516:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1518:	69e3      	ldr	r3, [r4, #28]
    151a:	f013 0f04 	tst.w	r3, #4
    151e:	d1fb      	bne.n	1518 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    1520:	68ab      	ldr	r3, [r5, #8]
    1522:	3301      	adds	r3, #1
    1524:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1526:	686b      	ldr	r3, [r5, #4]
    1528:	3b01      	subs	r3, #1
    152a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    152c:	2000      	movs	r0, #0
    152e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1530:	f010 0f02 	tst.w	r0, #2
    1534:	d048      	beq.n	15c8 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1536:	6869      	ldr	r1, [r5, #4]
    1538:	2900      	cmp	r1, #0
    153a:	d03d      	beq.n	15b8 <_sercom_i2c_sync_send_address+0x264>
    153c:	f013 0f04 	tst.w	r3, #4
    1540:	d13a      	bne.n	15b8 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    1542:	3901      	subs	r1, #1
    1544:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1546:	b901      	cbnz	r1, 154a <_sercom_i2c_sync_send_address+0x1f6>
    1548:	b1e2      	cbz	r2, 1584 <_sercom_i2c_sync_send_address+0x230>
    154a:	2901      	cmp	r1, #1
    154c:	d018      	beq.n	1580 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    154e:	686b      	ldr	r3, [r5, #4]
    1550:	b94b      	cbnz	r3, 1566 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    1552:	886b      	ldrh	r3, [r5, #2]
    1554:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1558:	d11d      	bne.n	1596 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    155a:	886b      	ldrh	r3, [r5, #2]
    155c:	b29b      	uxth	r3, r3
    155e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1562:	b29b      	uxth	r3, r3
    1564:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1566:	68aa      	ldr	r2, [r5, #8]
    1568:	1c53      	adds	r3, r2, #1
    156a:	60ab      	str	r3, [r5, #8]
    156c:	69e3      	ldr	r3, [r4, #28]
    156e:	f013 0f04 	tst.w	r3, #4
    1572:	d1fb      	bne.n	156c <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1576:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1578:	2302      	movs	r3, #2
    157a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    157c:	2000      	movs	r0, #0
    157e:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1580:	2a00      	cmp	r2, #0
    1582:	d0e4      	beq.n	154e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1584:	6863      	ldr	r3, [r4, #4]
    1586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    158a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    158c:	69e3      	ldr	r3, [r4, #28]
    158e:	f013 0f04 	tst.w	r3, #4
    1592:	d1fb      	bne.n	158c <_sercom_i2c_sync_send_address+0x238>
    1594:	e7db      	b.n	154e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1596:	6863      	ldr	r3, [r4, #4]
    1598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    159c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    159e:	69e3      	ldr	r3, [r4, #28]
    15a0:	f013 0f04 	tst.w	r3, #4
    15a4:	d1fb      	bne.n	159e <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15a6:	6863      	ldr	r3, [r4, #4]
    15a8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15ae:	69e3      	ldr	r3, [r4, #28]
    15b0:	f013 0f04 	tst.w	r3, #4
    15b4:	d1fb      	bne.n	15ae <_sercom_i2c_sync_send_address+0x25a>
    15b6:	e7d0      	b.n	155a <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15b8:	2302      	movs	r3, #2
    15ba:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    15bc:	f06f 0001 	mvn.w	r0, #1
    15c0:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    15c2:	f06f 0003 	mvn.w	r0, #3
    15c6:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    15c8:	2000      	movs	r0, #0
}
    15ca:	bd70      	pop	{r4, r5, r6, pc}
    15cc:	00004aec 	.word	0x00004aec
    15d0:	00000c1d 	.word	0x00000c1d

000015d4 <_spi_m_dma_rx_enable>:
{
    15d4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    15d6:	4604      	mov	r4, r0
    15d8:	b168      	cbz	r0, 15f6 <_spi_m_dma_rx_enable+0x22>
    15da:	6803      	ldr	r3, [r0, #0]
    15dc:	b14b      	cbz	r3, 15f2 <_spi_m_dma_rx_enable+0x1e>
    15de:	2001      	movs	r0, #1
    15e0:	f640 32fe 	movw	r2, #3070	; 0xbfe
    15e4:	4905      	ldr	r1, [pc, #20]	; (15fc <_spi_m_dma_rx_enable+0x28>)
    15e6:	4b06      	ldr	r3, [pc, #24]	; (1600 <_spi_m_dma_rx_enable+0x2c>)
    15e8:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    15ea:	6820      	ldr	r0, [r4, #0]
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <_spi_m_dma_rx_enable+0x30>)
    15ee:	4798      	blx	r3
}
    15f0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    15f2:	2000      	movs	r0, #0
    15f4:	e7f4      	b.n	15e0 <_spi_m_dma_rx_enable+0xc>
    15f6:	2000      	movs	r0, #0
    15f8:	e7f2      	b.n	15e0 <_spi_m_dma_rx_enable+0xc>
    15fa:	bf00      	nop
    15fc:	00004aec 	.word	0x00004aec
    1600:	00000c1d 	.word	0x00000c1d
    1604:	0000115b 	.word	0x0000115b

00001608 <_spi_m_dma_rx_disable>:
{
    1608:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    160a:	4604      	mov	r4, r0
    160c:	b168      	cbz	r0, 162a <_spi_m_dma_rx_disable+0x22>
    160e:	6803      	ldr	r3, [r0, #0]
    1610:	b14b      	cbz	r3, 1626 <_spi_m_dma_rx_disable+0x1e>
    1612:	2001      	movs	r0, #1
    1614:	f640 4205 	movw	r2, #3077	; 0xc05
    1618:	4905      	ldr	r1, [pc, #20]	; (1630 <_spi_m_dma_rx_disable+0x28>)
    161a:	4b06      	ldr	r3, [pc, #24]	; (1634 <_spi_m_dma_rx_disable+0x2c>)
    161c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    161e:	6820      	ldr	r0, [r4, #0]
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <_spi_m_dma_rx_disable+0x30>)
    1622:	4798      	blx	r3
}
    1624:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1626:	2000      	movs	r0, #0
    1628:	e7f4      	b.n	1614 <_spi_m_dma_rx_disable+0xc>
    162a:	2000      	movs	r0, #0
    162c:	e7f2      	b.n	1614 <_spi_m_dma_rx_disable+0xc>
    162e:	bf00      	nop
    1630:	00004aec 	.word	0x00004aec
    1634:	00000c1d 	.word	0x00000c1d
    1638:	0000117d 	.word	0x0000117d

0000163c <_i2c_m_sync_init>:
{
    163c:	b538      	push	{r3, r4, r5, lr}
    163e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1640:	4604      	mov	r4, r0
    1642:	f240 5219 	movw	r2, #1305	; 0x519
    1646:	4906      	ldr	r1, [pc, #24]	; (1660 <_i2c_m_sync_init+0x24>)
    1648:	3000      	adds	r0, #0
    164a:	bf18      	it	ne
    164c:	2001      	movne	r0, #1
    164e:	4b05      	ldr	r3, [pc, #20]	; (1664 <_i2c_m_sync_init+0x28>)
    1650:	4798      	blx	r3
	i2c_dev->hw = hw;
    1652:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1654:	4629      	mov	r1, r5
    1656:	4620      	mov	r0, r4
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <_i2c_m_sync_init+0x2c>)
    165a:	4798      	blx	r3
}
    165c:	bd38      	pop	{r3, r4, r5, pc}
    165e:	bf00      	nop
    1660:	00004aec 	.word	0x00004aec
    1664:	00000c1d 	.word	0x00000c1d
    1668:	00001275 	.word	0x00001275

0000166c <_i2c_m_sync_enable>:
{
    166c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    166e:	4e1b      	ldr	r6, [pc, #108]	; (16dc <_i2c_m_sync_enable+0x70>)
    1670:	4604      	mov	r4, r0
    1672:	f240 5236 	movw	r2, #1334	; 0x536
    1676:	4631      	mov	r1, r6
    1678:	3000      	adds	r0, #0
    167a:	bf18      	it	ne
    167c:	2001      	movne	r0, #1
    167e:	4d18      	ldr	r5, [pc, #96]	; (16e0 <_i2c_m_sync_enable+0x74>)
    1680:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1682:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1684:	f240 6206 	movw	r2, #1542	; 0x606
    1688:	4631      	mov	r1, r6
    168a:	1c20      	adds	r0, r4, #0
    168c:	bf18      	it	ne
    168e:	2001      	movne	r0, #1
    1690:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1692:	6823      	ldr	r3, [r4, #0]
    1694:	f043 0302 	orr.w	r3, r3, #2
    1698:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    169a:	69e3      	ldr	r3, [r4, #28]
    169c:	f013 0f03 	tst.w	r3, #3
    16a0:	d1fb      	bne.n	169a <_i2c_m_sync_enable+0x2e>
    16a2:	2104      	movs	r1, #4
    16a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    16a8:	69e3      	ldr	r3, [r4, #28]
    16aa:	f013 0f04 	tst.w	r3, #4
    16ae:	d1fb      	bne.n	16a8 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    16b0:	8b63      	ldrh	r3, [r4, #26]
    16b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    16b6:	2b01      	cmp	r3, #1
    16b8:	d00b      	beq.n	16d2 <_i2c_m_sync_enable+0x66>
		timeout--;
    16ba:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    16bc:	2a00      	cmp	r2, #0
    16be:	dcf3      	bgt.n	16a8 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    16c0:	3901      	subs	r1, #1
    16c2:	d008      	beq.n	16d6 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    16c4:	2310      	movs	r3, #16
    16c6:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16c8:	69e3      	ldr	r3, [r4, #28]
    16ca:	f013 0f04 	tst.w	r3, #4
    16ce:	d1fb      	bne.n	16c8 <_i2c_m_sync_enable+0x5c>
    16d0:	e7e8      	b.n	16a4 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    16d2:	2000      	movs	r0, #0
    16d4:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    16d6:	f06f 0005 	mvn.w	r0, #5
}
    16da:	bd70      	pop	{r4, r5, r6, pc}
    16dc:	00004aec 	.word	0x00004aec
    16e0:	00000c1d 	.word	0x00000c1d

000016e4 <_i2c_m_sync_transfer>:
{
    16e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16e8:	4605      	mov	r5, r0
    16ea:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    16ec:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    16ee:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1990 <_i2c_m_sync_transfer+0x2ac>
    16f2:	f240 52d1 	movw	r2, #1489	; 0x5d1
    16f6:	4641      	mov	r1, r8
    16f8:	3000      	adds	r0, #0
    16fa:	bf18      	it	ne
    16fc:	2001      	movne	r0, #1
    16fe:	4fa2      	ldr	r7, [pc, #648]	; (1988 <_i2c_m_sync_transfer+0x2a4>)
    1700:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1702:	6928      	ldr	r0, [r5, #16]
    1704:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1708:	4641      	mov	r1, r8
    170a:	3000      	adds	r0, #0
    170c:	bf18      	it	ne
    170e:	2001      	movne	r0, #1
    1710:	47b8      	blx	r7
	ASSERT(msg);
    1712:	f240 52d3 	movw	r2, #1491	; 0x5d3
    1716:	4641      	mov	r1, r8
    1718:	1c30      	adds	r0, r6, #0
    171a:	bf18      	it	ne
    171c:	2001      	movne	r0, #1
    171e:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1720:	886b      	ldrh	r3, [r5, #2]
    1722:	f413 7f80 	tst.w	r3, #256	; 0x100
    1726:	f040 812a 	bne.w	197e <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    172a:	8873      	ldrh	r3, [r6, #2]
    172c:	b29b      	uxth	r3, r3
    172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1732:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1734:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1738:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    173c:	6863      	ldr	r3, [r4, #4]
    173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1742:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1744:	69e3      	ldr	r3, [r4, #28]
    1746:	f013 0f04 	tst.w	r3, #4
    174a:	d1fb      	bne.n	1744 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    174c:	4628      	mov	r0, r5
    174e:	4b8f      	ldr	r3, [pc, #572]	; (198c <_i2c_m_sync_transfer+0x2a8>)
    1750:	4798      	blx	r3
	if (ret) {
    1752:	4603      	mov	r3, r0
    1754:	2800      	cmp	r0, #0
    1756:	f000 80b0 	beq.w	18ba <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    175a:	886a      	ldrh	r2, [r5, #2]
    175c:	b292      	uxth	r2, r2
    175e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1762:	b292      	uxth	r2, r2
    1764:	806a      	strh	r2, [r5, #2]
		return ret;
    1766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    176a:	f06f 0004 	mvn.w	r0, #4
    176e:	e0b7      	b.n	18e0 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1770:	8873      	ldrh	r3, [r6, #2]
    1772:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1776:	d107      	bne.n	1788 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1778:	886b      	ldrh	r3, [r5, #2]
    177a:	b29b      	uxth	r3, r3
    177c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1780:	b29b      	uxth	r3, r3
    1782:	806b      	strh	r3, [r5, #2]
			return ret;
    1784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1788:	6863      	ldr	r3, [r4, #4]
    178a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    178e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1790:	69e3      	ldr	r3, [r4, #28]
    1792:	f013 0f04 	tst.w	r3, #4
    1796:	d1fb      	bne.n	1790 <_i2c_m_sync_transfer+0xac>
    1798:	e7ee      	b.n	1778 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    179a:	f013 0f04 	tst.w	r3, #4
    179e:	d11f      	bne.n	17e0 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    17a0:	886b      	ldrh	r3, [r5, #2]
    17a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17a6:	d039      	beq.n	181c <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    17a8:	882b      	ldrh	r3, [r5, #0]
    17aa:	121b      	asrs	r3, r3, #8
    17ac:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17ae:	f003 0206 	and.w	r2, r3, #6
    17b2:	69e3      	ldr	r3, [r4, #28]
    17b4:	f013 0f04 	tst.w	r3, #4
    17b8:	d1fb      	bne.n	17b2 <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    17c0:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    17c2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17c6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17c8:	69e3      	ldr	r3, [r4, #28]
    17ca:	f013 0f04 	tst.w	r3, #4
    17ce:	d1fb      	bne.n	17c8 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    17d0:	886b      	ldrh	r3, [r5, #2]
    17d2:	b29b      	uxth	r3, r3
    17d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    17d8:	b29b      	uxth	r3, r3
    17da:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    17dc:	2000      	movs	r0, #0
    17de:	e06b      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    17e0:	686b      	ldr	r3, [r5, #4]
    17e2:	2b00      	cmp	r3, #0
    17e4:	dd04      	ble.n	17f0 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    17e6:	886b      	ldrh	r3, [r5, #2]
    17e8:	b29b      	uxth	r3, r3
    17ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17ee:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    17f0:	886b      	ldrh	r3, [r5, #2]
    17f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17f6:	d108      	bne.n	180a <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    17f8:	886b      	ldrh	r3, [r5, #2]
    17fa:	b29b      	uxth	r3, r3
    17fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1800:	b29b      	uxth	r3, r3
    1802:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1804:	f06f 0001 	mvn.w	r0, #1
    1808:	e056      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    180a:	6863      	ldr	r3, [r4, #4]
    180c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1810:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1812:	69e3      	ldr	r3, [r4, #28]
    1814:	f013 0f04 	tst.w	r3, #4
    1818:	d1fb      	bne.n	1812 <_i2c_m_sync_transfer+0x12e>
    181a:	e7ed      	b.n	17f8 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    181c:	6868      	ldr	r0, [r5, #4]
    181e:	b998      	cbnz	r0, 1848 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1820:	886b      	ldrh	r3, [r5, #2]
    1822:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1826:	d106      	bne.n	1836 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1828:	886b      	ldrh	r3, [r5, #2]
    182a:	b29b      	uxth	r3, r3
    182c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1830:	b29b      	uxth	r3, r3
    1832:	806b      	strh	r3, [r5, #2]
    1834:	e040      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1836:	6863      	ldr	r3, [r4, #4]
    1838:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    183c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    183e:	69e3      	ldr	r3, [r4, #28]
    1840:	f013 0f04 	tst.w	r3, #4
    1844:	d1fb      	bne.n	183e <_i2c_m_sync_transfer+0x15a>
    1846:	e7ef      	b.n	1828 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1848:	68ab      	ldr	r3, [r5, #8]
    184a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    184c:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184e:	69e3      	ldr	r3, [r4, #28]
    1850:	f013 0f04 	tst.w	r3, #4
    1854:	d1fb      	bne.n	184e <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1856:	68ab      	ldr	r3, [r5, #8]
    1858:	3301      	adds	r3, #1
    185a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    185c:	686b      	ldr	r3, [r5, #4]
    185e:	3b01      	subs	r3, #1
    1860:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1862:	2000      	movs	r0, #0
    1864:	e028      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1866:	f017 0f02 	tst.w	r7, #2
    186a:	f000 8083 	beq.w	1974 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    186e:	6869      	ldr	r1, [r5, #4]
    1870:	2900      	cmp	r1, #0
    1872:	d077      	beq.n	1964 <_i2c_m_sync_transfer+0x280>
    1874:	f013 0f04 	tst.w	r3, #4
    1878:	d174      	bne.n	1964 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    187a:	3901      	subs	r1, #1
    187c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    187e:	b909      	cbnz	r1, 1884 <_i2c_m_sync_transfer+0x1a0>
    1880:	2a00      	cmp	r2, #0
    1882:	d055      	beq.n	1930 <_i2c_m_sync_transfer+0x24c>
    1884:	2901      	cmp	r1, #1
    1886:	d051      	beq.n	192c <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1888:	686b      	ldr	r3, [r5, #4]
    188a:	b94b      	cbnz	r3, 18a0 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    188c:	886b      	ldrh	r3, [r5, #2]
    188e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1892:	d156      	bne.n	1942 <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1894:	886b      	ldrh	r3, [r5, #2]
    1896:	b29b      	uxth	r3, r3
    1898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    189c:	b29b      	uxth	r3, r3
    189e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    18a0:	68aa      	ldr	r2, [r5, #8]
    18a2:	1c53      	adds	r3, r2, #1
    18a4:	60ab      	str	r3, [r5, #8]
    18a6:	69e3      	ldr	r3, [r4, #28]
    18a8:	f013 0f04 	tst.w	r3, #4
    18ac:	d1fb      	bne.n	18a6 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    18ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18b0:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    18b2:	2302      	movs	r3, #2
    18b4:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    18b6:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    18b8:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    18ba:	886a      	ldrh	r2, [r5, #2]
    18bc:	f412 7f80 	tst.w	r2, #256	; 0x100
    18c0:	d05a      	beq.n	1978 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    18c2:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    18c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    18c8:	7e03      	ldrb	r3, [r0, #24]
    18ca:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    18cc:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    18ce:	1e51      	subs	r1, r2, #1
    18d0:	2a00      	cmp	r2, #0
    18d2:	f43f af4a 	beq.w	176a <_i2c_m_sync_transfer+0x86>
    18d6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    18d8:	f013 0f03 	tst.w	r3, #3
    18dc:	d0f4      	beq.n	18c8 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    18de:	2000      	movs	r0, #0
		if (ret) {
    18e0:	2800      	cmp	r0, #0
    18e2:	f47f af45 	bne.w	1770 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    18e6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18e8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18ec:	69e3      	ldr	r3, [r4, #28]
    18ee:	f013 0f04 	tst.w	r3, #4
    18f2:	d1fb      	bne.n	18ec <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    18f4:	8b63      	ldrh	r3, [r4, #26]
    18f6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    18f8:	f017 0f01 	tst.w	r7, #1
    18fc:	d0b3      	beq.n	1866 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    18fe:	f013 0f02 	tst.w	r3, #2
    1902:	f43f af4a 	beq.w	179a <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1906:	2201      	movs	r2, #1
    1908:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    190a:	886a      	ldrh	r2, [r5, #2]
    190c:	b292      	uxth	r2, r2
    190e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1912:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1914:	886a      	ldrh	r2, [r5, #2]
    1916:	b292      	uxth	r2, r2
    1918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    191c:	b292      	uxth	r2, r2
    191e:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1920:	f013 0f01 	tst.w	r3, #1
    1924:	d023      	beq.n	196e <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    1926:	f06f 0004 	mvn.w	r0, #4
    192a:	e7c5      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    192c:	2a00      	cmp	r2, #0
    192e:	d0ab      	beq.n	1888 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1930:	6863      	ldr	r3, [r4, #4]
    1932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1936:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1938:	69e3      	ldr	r3, [r4, #28]
    193a:	f013 0f04 	tst.w	r3, #4
    193e:	d1fb      	bne.n	1938 <_i2c_m_sync_transfer+0x254>
    1940:	e7a2      	b.n	1888 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1942:	6863      	ldr	r3, [r4, #4]
    1944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1948:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    194a:	69e3      	ldr	r3, [r4, #28]
    194c:	f013 0f04 	tst.w	r3, #4
    1950:	d1fb      	bne.n	194a <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1952:	6863      	ldr	r3, [r4, #4]
    1954:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1958:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    195a:	69e3      	ldr	r3, [r4, #28]
    195c:	f013 0f04 	tst.w	r3, #4
    1960:	d1fb      	bne.n	195a <_i2c_m_sync_transfer+0x276>
    1962:	e797      	b.n	1894 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1964:	2302      	movs	r3, #2
    1966:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1968:	f06f 0001 	mvn.w	r0, #1
    196c:	e7a4      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    196e:	f06f 0003 	mvn.w	r0, #3
    1972:	e7a1      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1974:	2000      	movs	r0, #0
    1976:	e79f      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1978:	4618      	mov	r0, r3
    197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    197e:	f06f 0005 	mvn.w	r0, #5
}
    1982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1986:	bf00      	nop
    1988:	00000c1d 	.word	0x00000c1d
    198c:	00001355 	.word	0x00001355
    1990:	00004aec 	.word	0x00004aec

00001994 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	4605      	mov	r5, r0
    1998:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    199a:	4608      	mov	r0, r1
    199c:	4b50      	ldr	r3, [pc, #320]	; (1ae0 <_spi_m_dma_init+0x14c>)
    199e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    19a0:	2300      	movs	r3, #0
    19a2:	2b00      	cmp	r3, #0
    19a4:	d072      	beq.n	1a8c <_spi_m_dma_init+0xf8>
	return NULL;
    19a6:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    19a8:	2d00      	cmp	r5, #0
    19aa:	d07b      	beq.n	1aa4 <_spi_m_dma_init+0x110>
    19ac:	2c00      	cmp	r4, #0
    19ae:	d077      	beq.n	1aa0 <_spi_m_dma_init+0x10c>
    19b0:	2001      	movs	r0, #1
    19b2:	f640 42b3 	movw	r2, #3251	; 0xcb3
    19b6:	494b      	ldr	r1, [pc, #300]	; (1ae4 <_spi_m_dma_init+0x150>)
    19b8:	4b4b      	ldr	r3, [pc, #300]	; (1ae8 <_spi_m_dma_init+0x154>)
    19ba:	4798      	blx	r3

	if (regs == NULL) {
    19bc:	2e00      	cmp	r6, #0
    19be:	f000 808b 	beq.w	1ad8 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19c2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19c4:	f013 0f01 	tst.w	r3, #1
    19c8:	d11d      	bne.n	1a06 <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19ca:	6833      	ldr	r3, [r6, #0]
    19cc:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d0:	69e3      	ldr	r3, [r4, #28]
    19d2:	f013 0f03 	tst.w	r3, #3
    19d6:	d1fb      	bne.n	19d0 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19d8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19da:	f013 0f02 	tst.w	r3, #2
    19de:	d00b      	beq.n	19f8 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19e0:	6823      	ldr	r3, [r4, #0]
    19e2:	f023 0302 	bic.w	r3, r3, #2
    19e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19e8:	69e3      	ldr	r3, [r4, #28]
    19ea:	f013 0f03 	tst.w	r3, #3
    19ee:	d1fb      	bne.n	19e8 <_spi_m_dma_init+0x54>
    19f0:	69e3      	ldr	r3, [r4, #28]
    19f2:	f013 0f02 	tst.w	r3, #2
    19f6:	d1fb      	bne.n	19f0 <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    19f8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    19fc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19fe:	69e3      	ldr	r3, [r4, #28]
    1a00:	f013 0f03 	tst.w	r3, #3
    1a04:	d1fb      	bne.n	19fe <_spi_m_dma_init+0x6a>
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f01 	tst.w	r3, #1
    1a0c:	d1fb      	bne.n	1a06 <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1a0e:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1a10:	2c00      	cmp	r4, #0
    1a12:	d04b      	beq.n	1aac <_spi_m_dma_init+0x118>
    1a14:	2e00      	cmp	r6, #0
    1a16:	d047      	beq.n	1aa8 <_spi_m_dma_init+0x114>
    1a18:	2001      	movs	r0, #1
    1a1a:	f640 120a 	movw	r2, #2314	; 0x90a
    1a1e:	4931      	ldr	r1, [pc, #196]	; (1ae4 <_spi_m_dma_init+0x150>)
    1a20:	4b31      	ldr	r3, [pc, #196]	; (1ae8 <_spi_m_dma_init+0x154>)
    1a22:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a24:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a2a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a30:	69e3      	ldr	r3, [r4, #28]
    1a32:	f013 0f03 	tst.w	r3, #3
    1a36:	d1fb      	bne.n	1a30 <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1a38:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a3a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a3e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a46:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a48:	69e3      	ldr	r3, [r4, #28]
    1a4a:	f013 0f17 	tst.w	r3, #23
    1a4e:	d1fb      	bne.n	1a48 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a50:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a52:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a54:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1a5a:	4620      	mov	r0, r4
    1a5c:	4b23      	ldr	r3, [pc, #140]	; (1aec <_spi_m_dma_init+0x158>)
    1a5e:	4798      	blx	r3
    1a60:	bb30      	cbnz	r0, 1ab0 <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1a62:	4620      	mov	r0, r4
    1a64:	4b22      	ldr	r3, [pc, #136]	; (1af0 <_spi_m_dma_init+0x15c>)
    1a66:	4798      	blx	r3
    1a68:	4601      	mov	r1, r0
    1a6a:	f105 001c 	add.w	r0, r5, #28
    1a6e:	4b21      	ldr	r3, [pc, #132]	; (1af4 <_spi_m_dma_init+0x160>)
    1a70:	4798      	blx	r3
	dev->resource->back                 = dev;
    1a72:	69eb      	ldr	r3, [r5, #28]
    1a74:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1a76:	69eb      	ldr	r3, [r5, #28]
    1a78:	4a1f      	ldr	r2, [pc, #124]	; (1af8 <_spi_m_dma_init+0x164>)
    1a7a:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1a7c:	69eb      	ldr	r3, [r5, #28]
    1a7e:	4a1f      	ldr	r2, [pc, #124]	; (1afc <_spi_m_dma_init+0x168>)
    1a80:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1a82:	69eb      	ldr	r3, [r5, #28]
    1a84:	4a1e      	ldr	r2, [pc, #120]	; (1b00 <_spi_m_dma_init+0x16c>)
    1a86:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1a88:	2000      	movs	r0, #0
    1a8a:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a8c:	2805      	cmp	r0, #5
    1a8e:	d002      	beq.n	1a96 <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a90:	3301      	adds	r3, #1
    1a92:	b2db      	uxtb	r3, r3
    1a94:	e785      	b.n	19a2 <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1a96:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1a9a:	4b1a      	ldr	r3, [pc, #104]	; (1b04 <_spi_m_dma_init+0x170>)
    1a9c:	441e      	add	r6, r3
    1a9e:	e783      	b.n	19a8 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1aa0:	2000      	movs	r0, #0
    1aa2:	e786      	b.n	19b2 <_spi_m_dma_init+0x1e>
    1aa4:	2000      	movs	r0, #0
    1aa6:	e784      	b.n	19b2 <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1aa8:	2000      	movs	r0, #0
    1aaa:	e7b6      	b.n	1a1a <_spi_m_dma_init+0x86>
    1aac:	2000      	movs	r0, #0
    1aae:	e7b4      	b.n	1a1a <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1ab0:	4620      	mov	r0, r4
    1ab2:	4b15      	ldr	r3, [pc, #84]	; (1b08 <_spi_m_dma_init+0x174>)
    1ab4:	4798      	blx	r3
    1ab6:	4601      	mov	r1, r0
    1ab8:	f105 001c 	add.w	r0, r5, #28
    1abc:	4b0d      	ldr	r3, [pc, #52]	; (1af4 <_spi_m_dma_init+0x160>)
    1abe:	4798      	blx	r3
		dev->resource->back                 = dev;
    1ac0:	69eb      	ldr	r3, [r5, #28]
    1ac2:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1ac4:	69eb      	ldr	r3, [r5, #28]
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <_spi_m_dma_init+0x178>)
    1ac8:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1aca:	69eb      	ldr	r3, [r5, #28]
    1acc:	4a0b      	ldr	r2, [pc, #44]	; (1afc <_spi_m_dma_init+0x168>)
    1ace:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1ad0:	69eb      	ldr	r3, [r5, #28]
    1ad2:	4a0b      	ldr	r2, [pc, #44]	; (1b00 <_spi_m_dma_init+0x16c>)
    1ad4:	609a      	str	r2, [r3, #8]
    1ad6:	e7c4      	b.n	1a62 <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1ad8:	f06f 000c 	mvn.w	r0, #12
}
    1adc:	bd70      	pop	{r4, r5, r6, pc}
    1ade:	bf00      	nop
    1ae0:	000010f9 	.word	0x000010f9
    1ae4:	00004aec 	.word	0x00004aec
    1ae8:	00000c1d 	.word	0x00000c1d
    1aec:	000011c1 	.word	0x000011c1
    1af0:	000011a9 	.word	0x000011a9
    1af4:	00000f99 	.word	0x00000f99
    1af8:	00001215 	.word	0x00001215
    1afc:	00001221 	.word	0x00001221
    1b00:	00001209 	.word	0x00001209
    1b04:	00004ad8 	.word	0x00004ad8
    1b08:	000011d9 	.word	0x000011d9
    1b0c:	000011fd 	.word	0x000011fd

00001b10 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1b10:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b12:	4604      	mov	r4, r0
    1b14:	b168      	cbz	r0, 1b32 <_spi_m_dma_enable+0x22>
    1b16:	6803      	ldr	r3, [r0, #0]
    1b18:	b14b      	cbz	r3, 1b2e <_spi_m_dma_enable+0x1e>
    1b1a:	2001      	movs	r0, #1
    1b1c:	f640 42e1 	movw	r2, #3297	; 0xce1
    1b20:	4905      	ldr	r1, [pc, #20]	; (1b38 <_spi_m_dma_enable+0x28>)
    1b22:	4b06      	ldr	r3, [pc, #24]	; (1b3c <_spi_m_dma_enable+0x2c>)
    1b24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1b26:	6820      	ldr	r0, [r4, #0]
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <_spi_m_dma_enable+0x30>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1b2e:	2000      	movs	r0, #0
    1b30:	e7f4      	b.n	1b1c <_spi_m_dma_enable+0xc>
    1b32:	2000      	movs	r0, #0
    1b34:	e7f2      	b.n	1b1c <_spi_m_dma_enable+0xc>
    1b36:	bf00      	nop
    1b38:	00004aec 	.word	0x00004aec
    1b3c:	00000c1d 	.word	0x00000c1d
    1b40:	00001139 	.word	0x00001139

00001b44 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	4605      	mov	r5, r0
    1b48:	4614      	mov	r4, r2
	switch (type) {
    1b4a:	2903      	cmp	r1, #3
    1b4c:	d835      	bhi.n	1bba <_spi_m_dma_register_callback+0x76>
    1b4e:	e8df f001 	tbb	[pc, r1]
    1b52:	0d02      	.short	0x0d02
    1b54:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1b56:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b58:	6800      	ldr	r0, [r0, #0]
    1b5a:	4b18      	ldr	r3, [pc, #96]	; (1bbc <_spi_m_dma_register_callback+0x78>)
    1b5c:	4798      	blx	r3
    1b5e:	1c22      	adds	r2, r4, #0
    1b60:	bf18      	it	ne
    1b62:	2201      	movne	r2, #1
    1b64:	2100      	movs	r1, #0
    1b66:	4b16      	ldr	r3, [pc, #88]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b68:	4798      	blx	r3
		break;
    1b6a:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1b6c:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b6e:	6800      	ldr	r0, [r0, #0]
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1b72:	4798      	blx	r3
    1b74:	1c22      	adds	r2, r4, #0
    1b76:	bf18      	it	ne
    1b78:	2201      	movne	r2, #1
    1b7a:	2100      	movs	r1, #0
    1b7c:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b7e:	4798      	blx	r3
		break;
    1b80:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1b82:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b84:	6800      	ldr	r0, [r0, #0]
    1b86:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1b88:	4798      	blx	r3
    1b8a:	3400      	adds	r4, #0
    1b8c:	bf18      	it	ne
    1b8e:	2401      	movne	r4, #1
    1b90:	4622      	mov	r2, r4
    1b92:	2101      	movs	r1, #1
    1b94:	4e0a      	ldr	r6, [pc, #40]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b96:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b98:	6828      	ldr	r0, [r5, #0]
    1b9a:	4b08      	ldr	r3, [pc, #32]	; (1bbc <_spi_m_dma_register_callback+0x78>)
    1b9c:	4798      	blx	r3
    1b9e:	4622      	mov	r2, r4
    1ba0:	2101      	movs	r1, #1
    1ba2:	47b0      	blx	r6
		break;
    1ba4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1ba6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1ba8:	6800      	ldr	r0, [r0, #0]
    1baa:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1bac:	4798      	blx	r3
    1bae:	1c22      	adds	r2, r4, #0
    1bb0:	bf18      	it	ne
    1bb2:	2201      	movne	r2, #1
    1bb4:	2102      	movs	r1, #2
    1bb6:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1bb8:	4798      	blx	r3
    1bba:	bd70      	pop	{r4, r5, r6, pc}
    1bbc:	000011a9 	.word	0x000011a9
    1bc0:	00000e4d 	.word	0x00000e4d
    1bc4:	000011d9 	.word	0x000011d9

00001bc8 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bcc:	4605      	mov	r5, r0
    1bce:	4689      	mov	r9, r1
    1bd0:	4690      	mov	r8, r2
    1bd2:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1bd4:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1bd6:	4620      	mov	r0, r4
    1bd8:	4b33      	ldr	r3, [pc, #204]	; (1ca8 <_spi_m_dma_transfer+0xe0>)
    1bda:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1bdc:	2300      	movs	r3, #0
    1bde:	2b00      	cmp	r3, #0
    1be0:	d03f      	beq.n	1c62 <_spi_m_dma_transfer+0x9a>
	return NULL;
    1be2:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1be6:	4620      	mov	r0, r4
    1be8:	4b30      	ldr	r3, [pc, #192]	; (1cac <_spi_m_dma_transfer+0xe4>)
    1bea:	4798      	blx	r3
    1bec:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1bee:	4620      	mov	r0, r4
    1bf0:	4b2f      	ldr	r3, [pc, #188]	; (1cb0 <_spi_m_dma_transfer+0xe8>)
    1bf2:	4798      	blx	r3
    1bf4:	4604      	mov	r4, r0

	if (rxbuf) {
    1bf6:	f1b8 0f00 	cmp.w	r8, #0
    1bfa:	d03c      	beq.n	1c76 <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1bfc:	4628      	mov	r0, r5
    1bfe:	4b2d      	ldr	r3, [pc, #180]	; (1cb4 <_spi_m_dma_transfer+0xec>)
    1c00:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1c02:	6828      	ldr	r0, [r5, #0]
    1c04:	4b2c      	ldr	r3, [pc, #176]	; (1cb8 <_spi_m_dma_transfer+0xf0>)
    1c06:	4798      	blx	r3
    1c08:	4601      	mov	r1, r0
    1c0a:	4630      	mov	r0, r6
    1c0c:	4b2b      	ldr	r3, [pc, #172]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c0e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1c10:	4641      	mov	r1, r8
    1c12:	4630      	mov	r0, r6
    1c14:	4b2a      	ldr	r3, [pc, #168]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c16:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1c18:	4639      	mov	r1, r7
    1c1a:	4630      	mov	r0, r6
    1c1c:	4b29      	ldr	r3, [pc, #164]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1c1e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1c20:	2100      	movs	r1, #0
    1c22:	4630      	mov	r0, r6
    1c24:	4b28      	ldr	r3, [pc, #160]	; (1cc8 <_spi_m_dma_transfer+0x100>)
    1c26:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1c28:	f1b9 0f00 	cmp.w	r9, #0
    1c2c:	d027      	beq.n	1c7e <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1c2e:	4649      	mov	r1, r9
    1c30:	4620      	mov	r0, r4
    1c32:	4b22      	ldr	r3, [pc, #136]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c34:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c36:	6828      	ldr	r0, [r5, #0]
    1c38:	4b24      	ldr	r3, [pc, #144]	; (1ccc <_spi_m_dma_transfer+0x104>)
    1c3a:	4798      	blx	r3
    1c3c:	4601      	mov	r1, r0
    1c3e:	4620      	mov	r0, r4
    1c40:	4b1f      	ldr	r3, [pc, #124]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c42:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1c44:	2101      	movs	r1, #1
    1c46:	4620      	mov	r0, r4
    1c48:	4b21      	ldr	r3, [pc, #132]	; (1cd0 <_spi_m_dma_transfer+0x108>)
    1c4a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c4c:	4639      	mov	r1, r7
    1c4e:	4620      	mov	r0, r4
    1c50:	4b1c      	ldr	r3, [pc, #112]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1c52:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1c54:	2100      	movs	r1, #0
    1c56:	4620      	mov	r0, r4
    1c58:	4b1b      	ldr	r3, [pc, #108]	; (1cc8 <_spi_m_dma_transfer+0x100>)
    1c5a:	4798      	blx	r3

	return ERR_NONE;
}
    1c5c:	2000      	movs	r0, #0
    1c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1c62:	2805      	cmp	r0, #5
    1c64:	d002      	beq.n	1c6c <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c66:	3301      	adds	r3, #1
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	e7b8      	b.n	1bde <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1c6c:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1c70:	4b18      	ldr	r3, [pc, #96]	; (1cd4 <_spi_m_dma_transfer+0x10c>)
    1c72:	449a      	add	sl, r3
    1c74:	e7b7      	b.n	1be6 <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1c76:	4628      	mov	r0, r5
    1c78:	4b17      	ldr	r3, [pc, #92]	; (1cd8 <_spi_m_dma_transfer+0x110>)
    1c7a:	4798      	blx	r3
    1c7c:	e7d4      	b.n	1c28 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1c7e:	f10a 010e 	add.w	r1, sl, #14
    1c82:	4620      	mov	r0, r4
    1c84:	4b0d      	ldr	r3, [pc, #52]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c86:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c88:	6828      	ldr	r0, [r5, #0]
    1c8a:	4b10      	ldr	r3, [pc, #64]	; (1ccc <_spi_m_dma_transfer+0x104>)
    1c8c:	4798      	blx	r3
    1c8e:	4601      	mov	r1, r0
    1c90:	4620      	mov	r0, r4
    1c92:	4b0b      	ldr	r3, [pc, #44]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c94:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1c96:	2100      	movs	r1, #0
    1c98:	4620      	mov	r0, r4
    1c9a:	4b0d      	ldr	r3, [pc, #52]	; (1cd0 <_spi_m_dma_transfer+0x108>)
    1c9c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c9e:	4639      	mov	r1, r7
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1ca4:	4798      	blx	r3
    1ca6:	e7d5      	b.n	1c54 <_spi_m_dma_transfer+0x8c>
    1ca8:	000010f9 	.word	0x000010f9
    1cac:	000011d9 	.word	0x000011d9
    1cb0:	000011a9 	.word	0x000011a9
    1cb4:	000015d5 	.word	0x000015d5
    1cb8:	0000119f 	.word	0x0000119f
    1cbc:	00000ed9 	.word	0x00000ed9
    1cc0:	00000ec9 	.word	0x00000ec9
    1cc4:	00000f05 	.word	0x00000f05
    1cc8:	00000f5d 	.word	0x00000f5d
    1ccc:	000011a3 	.word	0x000011a3
    1cd0:	00000ee9 	.word	0x00000ee9
    1cd4:	00004ad8 	.word	0x00004ad8
    1cd8:	00001609 	.word	0x00001609

00001cdc <TIMER_1_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1cdc:	4b2f      	ldr	r3, [pc, #188]	; (1d9c <TIMER_1_init+0xc0>)
    1cde:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tc_is_syncing(TC3, TC_SYNCBUSY_SWRST)) {
    1ce0:	f013 0f01 	tst.w	r3, #1
    1ce4:	d120      	bne.n	1d28 <TIMER_1_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ce6:	4b2d      	ldr	r3, [pc, #180]	; (1d9c <TIMER_1_init+0xc0>)
    1ce8:	691b      	ldr	r3, [r3, #16]
    1cea:	f013 0f03 	tst.w	r3, #3
    1cee:	d1fa      	bne.n	1ce6 <TIMER_1_init+0xa>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1cf0:	4b2a      	ldr	r3, [pc, #168]	; (1d9c <TIMER_1_init+0xc0>)
    1cf2:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    1cf4:	f013 0f02 	tst.w	r3, #2
    1cf8:	d00e      	beq.n	1d18 <TIMER_1_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1cfa:	4a28      	ldr	r2, [pc, #160]	; (1d9c <TIMER_1_init+0xc0>)
    1cfc:	6813      	ldr	r3, [r2, #0]
    1cfe:	f023 0302 	bic.w	r3, r3, #2
    1d02:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d04:	4b25      	ldr	r3, [pc, #148]	; (1d9c <TIMER_1_init+0xc0>)
    1d06:	691b      	ldr	r3, [r3, #16]
    1d08:	f013 0f03 	tst.w	r3, #3
    1d0c:	d1fa      	bne.n	1d04 <TIMER_1_init+0x28>
    1d0e:	4b23      	ldr	r3, [pc, #140]	; (1d9c <TIMER_1_init+0xc0>)
    1d10:	691b      	ldr	r3, [r3, #16]
    1d12:	f013 0f02 	tst.w	r3, #2
    1d16:	d1fa      	bne.n	1d0e <TIMER_1_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d18:	2201      	movs	r2, #1
    1d1a:	4b20      	ldr	r3, [pc, #128]	; (1d9c <TIMER_1_init+0xc0>)
    1d1c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d1e:	4b1f      	ldr	r3, [pc, #124]	; (1d9c <TIMER_1_init+0xc0>)
    1d20:	691b      	ldr	r3, [r3, #16]
    1d22:	f013 0f03 	tst.w	r3, #3
    1d26:	d1fa      	bne.n	1d1e <TIMER_1_init+0x42>
    1d28:	4b1c      	ldr	r3, [pc, #112]	; (1d9c <TIMER_1_init+0xc0>)
    1d2a:	691b      	ldr	r3, [r3, #16]
    1d2c:	f013 0f01 	tst.w	r3, #1
    1d30:	d1fa      	bne.n	1d28 <TIMER_1_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d32:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1d36:	4b19      	ldr	r3, [pc, #100]	; (1d9c <TIMER_1_init+0xc0>)
    1d38:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d3a:	4b18      	ldr	r3, [pc, #96]	; (1d9c <TIMER_1_init+0xc0>)
    1d3c:	691b      	ldr	r3, [r3, #16]
    1d3e:	f013 0f03 	tst.w	r3, #3
    1d42:	d1fa      	bne.n	1d3a <TIMER_1_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1d44:	4b15      	ldr	r3, [pc, #84]	; (1d9c <TIMER_1_init+0xc0>)
    1d46:	2200      	movs	r2, #0
    1d48:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1d4a:	22ff      	movs	r2, #255	; 0xff
    1d4c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1d4e:	2201      	movs	r2, #1
    1d50:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d52:	f643 5208 	movw	r2, #15624	; 0x3d08
    1d56:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d58:	4b10      	ldr	r3, [pc, #64]	; (1d9c <TIMER_1_init+0xc0>)
    1d5a:	691b      	ldr	r3, [r3, #16]
    1d5c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d60:	d1fa      	bne.n	1d58 <TIMER_1_init+0x7c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d62:	f641 0269 	movw	r2, #6249	; 0x1869
    1d66:	4b0d      	ldr	r3, [pc, #52]	; (1d9c <TIMER_1_init+0xc0>)
    1d68:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d6a:	4b0c      	ldr	r3, [pc, #48]	; (1d9c <TIMER_1_init+0xc0>)
    1d6c:	691b      	ldr	r3, [r3, #16]
    1d6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d72:	d1fa      	bne.n	1d6a <TIMER_1_init+0x8e>
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1d74:	4b09      	ldr	r3, [pc, #36]	; (1d9c <TIMER_1_init+0xc0>)
    1d76:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d7a:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1d7c:	2221      	movs	r2, #33	; 0x21
    1d7e:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1d80:	22de      	movs	r2, #222	; 0xde
    1d82:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d84:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1d86:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1d8a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <TIMER_1_init+0xc0>)
    1d8e:	691b      	ldr	r3, [r3, #16]
    1d90:	f013 0f03 	tst.w	r3, #3
    1d94:	d1fa      	bne.n	1d8c <TIMER_1_init+0xb0>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1d96:	2000      	movs	r0, #0
    1d98:	4770      	bx	lr
    1d9a:	bf00      	nop
    1d9c:	4101c000 	.word	0x4101c000

00001da0 <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1da0:	4b29      	ldr	r3, [pc, #164]	; (1e48 <TIMER_0_init+0xa8>)
    1da2:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    1da4:	f013 0f01 	tst.w	r3, #1
    1da8:	d120      	bne.n	1dec <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1daa:	4b27      	ldr	r3, [pc, #156]	; (1e48 <TIMER_0_init+0xa8>)
    1dac:	691b      	ldr	r3, [r3, #16]
    1dae:	f013 0f03 	tst.w	r3, #3
    1db2:	d1fa      	bne.n	1daa <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1db4:	4b24      	ldr	r3, [pc, #144]	; (1e48 <TIMER_0_init+0xa8>)
    1db6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    1db8:	f013 0f02 	tst.w	r3, #2
    1dbc:	d00e      	beq.n	1ddc <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1dbe:	4a22      	ldr	r2, [pc, #136]	; (1e48 <TIMER_0_init+0xa8>)
    1dc0:	6813      	ldr	r3, [r2, #0]
    1dc2:	f023 0302 	bic.w	r3, r3, #2
    1dc6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dc8:	4b1f      	ldr	r3, [pc, #124]	; (1e48 <TIMER_0_init+0xa8>)
    1dca:	691b      	ldr	r3, [r3, #16]
    1dcc:	f013 0f03 	tst.w	r3, #3
    1dd0:	d1fa      	bne.n	1dc8 <TIMER_0_init+0x28>
    1dd2:	4b1d      	ldr	r3, [pc, #116]	; (1e48 <TIMER_0_init+0xa8>)
    1dd4:	691b      	ldr	r3, [r3, #16]
    1dd6:	f013 0f02 	tst.w	r3, #2
    1dda:	d1fa      	bne.n	1dd2 <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1ddc:	2201      	movs	r2, #1
    1dde:	4b1a      	ldr	r3, [pc, #104]	; (1e48 <TIMER_0_init+0xa8>)
    1de0:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <TIMER_0_init+0xa8>)
    1de4:	691b      	ldr	r3, [r3, #16]
    1de6:	f013 0f03 	tst.w	r3, #3
    1dea:	d1fa      	bne.n	1de2 <TIMER_0_init+0x42>
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <TIMER_0_init+0xa8>)
    1dee:	691b      	ldr	r3, [r3, #16]
    1df0:	f013 0f01 	tst.w	r3, #1
    1df4:	d1fa      	bne.n	1dec <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1dfa:	4b13      	ldr	r3, [pc, #76]	; (1e48 <TIMER_0_init+0xa8>)
    1dfc:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dfe:	4b12      	ldr	r3, [pc, #72]	; (1e48 <TIMER_0_init+0xa8>)
    1e00:	691b      	ldr	r3, [r3, #16]
    1e02:	f013 0f03 	tst.w	r3, #3
    1e06:	d1fa      	bne.n	1dfe <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1e08:	4b0f      	ldr	r3, [pc, #60]	; (1e48 <TIMER_0_init+0xa8>)
    1e0a:	2200      	movs	r2, #0
    1e0c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1e0e:	22ff      	movs	r2, #255	; 0xff
    1e10:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e12:	2201      	movs	r2, #1
    1e14:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e16:	f641 0269 	movw	r2, #6249	; 0x1869
    1e1a:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e1c:	4b0a      	ldr	r3, [pc, #40]	; (1e48 <TIMER_0_init+0xa8>)
    1e1e:	691b      	ldr	r3, [r3, #16]
    1e20:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e24:	d1fa      	bne.n	1e1c <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1e26:	4b08      	ldr	r3, [pc, #32]	; (1e48 <TIMER_0_init+0xa8>)
    1e28:	2201      	movs	r2, #1
    1e2a:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1e2c:	22fe      	movs	r2, #254	; 0xfe
    1e2e:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e30:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1e32:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1e36:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <TIMER_0_init+0xa8>)
    1e3a:	691b      	ldr	r3, [r3, #16]
    1e3c:	f013 0f03 	tst.w	r3, #3
    1e40:	d1fa      	bne.n	1e38 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e42:	2000      	movs	r0, #0
    1e44:	4770      	bx	lr
    1e46:	bf00      	nop
    1e48:	43001800 	.word	0x43001800

00001e4c <SensorRowUpdate>:
	//timer_start(&TIMER_0);
};
*/

void SensorRowUpdate(uint8_t row_select, uint8_t output_mode_select)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	460d      	mov	r5, r1
	switch(row_select){
    1e50:	2802      	cmp	r0, #2
    1e52:	d048      	beq.n	1ee6 <SensorRowUpdate+0x9a>
    1e54:	2803      	cmp	r0, #3
    1e56:	f000 8089 	beq.w	1f6c <SensorRowUpdate+0x120>
    1e5a:	2801      	cmp	r0, #1
    1e5c:	d000      	beq.n	1e60 <SensorRowUpdate+0x14>
    1e5e:	bd70      	pop	{r4, r5, r6, pc}
		case 1: ;
			
			update_struct_values(&sensorRow_Values_Left, &sensor7, &sensor4, &sensor1);
    1e60:	4c63      	ldr	r4, [pc, #396]	; (1ff0 <SensorRowUpdate+0x1a4>)
    1e62:	4b64      	ldr	r3, [pc, #400]	; (1ff4 <SensorRowUpdate+0x1a8>)
    1e64:	4a64      	ldr	r2, [pc, #400]	; (1ff8 <SensorRowUpdate+0x1ac>)
    1e66:	4965      	ldr	r1, [pc, #404]	; (1ffc <SensorRowUpdate+0x1b0>)
    1e68:	4620      	mov	r0, r4
    1e6a:	4e65      	ldr	r6, [pc, #404]	; (2000 <SensorRowUpdate+0x1b4>)
    1e6c:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Left);
    1e6e:	4620      	mov	r0, r4
    1e70:	4b64      	ldr	r3, [pc, #400]	; (2004 <SensorRowUpdate+0x1b8>)
    1e72:	4798      	blx	r3
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear); for future implementation just a placeholder 
			//update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom); Placeholder for future implementation 
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Left.b_x_top; //data7,8,9
    1e74:	4b64      	ldr	r3, [pc, #400]	; (2008 <SensorRowUpdate+0x1bc>)
    1e76:	681a      	ldr	r2, [r3, #0]
    1e78:	6821      	ldr	r1, [r4, #0]
    1e7a:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Left.b_y_top;
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	68e2      	ldr	r2, [r4, #12]
    1e80:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Left.b_z_top;
    1e82:	69a2      	ldr	r2, [r4, #24]
    1e84:	609a      	str	r2, [r3, #8]
				
			BLDC_OUT->hall_middle_x = sensorRow_Values_Left.b_x_middle; //data4,5,6
    1e86:	6862      	ldr	r2, [r4, #4]
    1e88:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Left.b_y_middle;
    1e8a:	6922      	ldr	r2, [r4, #16]
    1e8c:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Left.b_z_middle;
    1e8e:	69e2      	ldr	r2, [r4, #28]
    1e90:	61da      	str	r2, [r3, #28]

				
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Left.b_x_bottom; //data1,2,3
    1e92:	68a2      	ldr	r2, [r4, #8]
    1e94:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Left.b_y_bottom;
    1e96:	6962      	ldr	r2, [r4, #20]
    1e98:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Left.b_z_bottom;
    1e9a:	6a22      	ldr	r2, [r4, #32]
    1e9c:	635a      	str	r2, [r3, #52]	; 0x34
			BLDC_OUT->hall_top_x = sensor7.data.x; //data7,8,9
			BLDC_OUT->hall_top_y = sensor7.data.y;
			BLDC_OUT->hall_top_z = sensor7.data.z;
			*/
			
			switch(output_mode_select){
    1e9e:	2d01      	cmp	r5, #1
    1ea0:	d005      	beq.n	1eae <SensorRowUpdate+0x62>
    1ea2:	2d02      	cmp	r5, #2
    1ea4:	d011      	beq.n	1eca <SensorRowUpdate+0x7e>
			}
			
			//mag_to_force(&sensorRow_Values_1, &sensor1, &sensor4, &sensor7);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 1;
    1ea6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1eaa:	621a      	str	r2, [r3, #32]
			break;
    1eac:	bd70      	pop	{r4, r5, r6, pc}
					BLDC_OUT->neuron_top_normal = sensorRow_Values_Left.force_z_top;
    1eae:	4a50      	ldr	r2, [pc, #320]	; (1ff0 <SensorRowUpdate+0x1a4>)
    1eb0:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1eb2:	60d9      	str	r1, [r3, #12]
					BLDC_OUT->neuron_top_shear = sensorRow_Values_Left.force_r_top;
    1eb4:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1eb6:	6119      	str	r1, [r3, #16]
					BLDC_OUT->neuron_middle_normal = sensorRow_Values_Left.force_z_middle;
    1eb8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1eba:	6259      	str	r1, [r3, #36]	; 0x24
					BLDC_OUT->neuron_middle_shear = sensorRow_Values_Left.force_r_middle;
    1ebc:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1ebe:	6299      	str	r1, [r3, #40]	; 0x28
					BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Left.force_z_bottom;
    1ec0:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1ec2:	6399      	str	r1, [r3, #56]	; 0x38
					BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Left.force_r_bottom;
    1ec4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1ec6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1ec8:	e7ed      	b.n	1ea6 <SensorRowUpdate+0x5a>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Left.neuron_top_normal;
    1eca:	4a50      	ldr	r2, [pc, #320]	; (200c <SensorRowUpdate+0x1c0>)
    1ecc:	6811      	ldr	r1, [r2, #0]
    1ece:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Left.neuron_top_shear;
    1ed0:	6851      	ldr	r1, [r2, #4]
    1ed2:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Left.neuron_middle_normal;
    1ed4:	6891      	ldr	r1, [r2, #8]
    1ed6:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Left.neuron_middle_shear;
    1ed8:	68d1      	ldr	r1, [r2, #12]
    1eda:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Left.neuron_bottom_normal;
    1edc:	6911      	ldr	r1, [r2, #16]
    1ede:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Left.neuron_bottom_shear;
    1ee0:	6952      	ldr	r2, [r2, #20]
    1ee2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1ee4:	e7df      	b.n	1ea6 <SensorRowUpdate+0x5a>
		
		case 2: ;
			update_struct_values(&sensorRow_Values_Middle, &sensor8, &sensor5, &sensor2);
    1ee6:	4c4a      	ldr	r4, [pc, #296]	; (2010 <SensorRowUpdate+0x1c4>)
    1ee8:	4b4a      	ldr	r3, [pc, #296]	; (2014 <SensorRowUpdate+0x1c8>)
    1eea:	4a4b      	ldr	r2, [pc, #300]	; (2018 <SensorRowUpdate+0x1cc>)
    1eec:	494b      	ldr	r1, [pc, #300]	; (201c <SensorRowUpdate+0x1d0>)
    1eee:	4620      	mov	r0, r4
    1ef0:	4e43      	ldr	r6, [pc, #268]	; (2000 <SensorRowUpdate+0x1b4>)
    1ef2:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Middle);
    1ef4:	4620      	mov	r0, r4
    1ef6:	4b43      	ldr	r3, [pc, #268]	; (2004 <SensorRowUpdate+0x1b8>)
    1ef8:	4798      	blx	r3
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear); for future implementation just a placeholder
			//update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom); Placeholder for future implementation
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Middle.b_x_top; //data7,8,9
    1efa:	4b43      	ldr	r3, [pc, #268]	; (2008 <SensorRowUpdate+0x1bc>)
    1efc:	681a      	ldr	r2, [r3, #0]
    1efe:	6821      	ldr	r1, [r4, #0]
    1f00:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Middle.b_y_top;
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	68e2      	ldr	r2, [r4, #12]
    1f06:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Middle.b_z_top;
    1f08:	69a2      	ldr	r2, [r4, #24]
    1f0a:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Middle.b_x_middle; //data4,5,6
    1f0c:	6862      	ldr	r2, [r4, #4]
    1f0e:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Middle.b_y_middle;
    1f10:	6922      	ldr	r2, [r4, #16]
    1f12:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Middle.b_z_middle;
    1f14:	69e2      	ldr	r2, [r4, #28]
    1f16:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Middle.b_x_bottom; //data1,2,3
    1f18:	68a2      	ldr	r2, [r4, #8]
    1f1a:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Middle.b_y_bottom;
    1f1c:	6962      	ldr	r2, [r4, #20]
    1f1e:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Middle.b_z_bottom;
    1f20:	6a22      	ldr	r2, [r4, #32]
    1f22:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    1f24:	2d01      	cmp	r5, #1
    1f26:	d005      	beq.n	1f34 <SensorRowUpdate+0xe8>
    1f28:	2d02      	cmp	r5, #2
    1f2a:	d011      	beq.n	1f50 <SensorRowUpdate+0x104>
			BLDC_OUT->hall_top_z = sensor8.data.z;
		*/
			//mag_to_force(&sensorRow_Values_1, &sensor2, &sensor5, &sensor8);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 2;
    1f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1f30:	621a      	str	r2, [r3, #32]
			break;
    1f32:	bd70      	pop	{r4, r5, r6, pc}
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Middle.force_z_top;
    1f34:	4a36      	ldr	r2, [pc, #216]	; (2010 <SensorRowUpdate+0x1c4>)
    1f36:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1f38:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Middle.force_r_top;
    1f3a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1f3c:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Middle.force_z_middle;
    1f3e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1f40:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Middle.force_r_middle;
    1f42:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1f44:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Middle.force_z_bottom;
    1f46:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1f48:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Middle.force_r_bottom;
    1f4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1f4c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1f4e:	e7ed      	b.n	1f2c <SensorRowUpdate+0xe0>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Middle.neuron_top_normal;
    1f50:	4a33      	ldr	r2, [pc, #204]	; (2020 <SensorRowUpdate+0x1d4>)
    1f52:	6811      	ldr	r1, [r2, #0]
    1f54:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Middle.neuron_top_shear;
    1f56:	6851      	ldr	r1, [r2, #4]
    1f58:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Middle.neuron_middle_normal;
    1f5a:	6891      	ldr	r1, [r2, #8]
    1f5c:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Middle.neuron_middle_shear;
    1f5e:	68d1      	ldr	r1, [r2, #12]
    1f60:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Middle.neuron_bottom_normal;
    1f62:	6911      	ldr	r1, [r2, #16]
    1f64:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Middle.neuron_bottom_shear;
    1f66:	6952      	ldr	r2, [r2, #20]
    1f68:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1f6a:	e7df      	b.n	1f2c <SensorRowUpdate+0xe0>
			
		case 3: ;
			update_struct_values(&sensorRow_Values_Right, &sensor9, &sensor6, &sensor3);
    1f6c:	4c2d      	ldr	r4, [pc, #180]	; (2024 <SensorRowUpdate+0x1d8>)
    1f6e:	4b2e      	ldr	r3, [pc, #184]	; (2028 <SensorRowUpdate+0x1dc>)
    1f70:	4a2e      	ldr	r2, [pc, #184]	; (202c <SensorRowUpdate+0x1e0>)
    1f72:	492f      	ldr	r1, [pc, #188]	; (2030 <SensorRowUpdate+0x1e4>)
    1f74:	4620      	mov	r0, r4
    1f76:	4e22      	ldr	r6, [pc, #136]	; (2000 <SensorRowUpdate+0x1b4>)
    1f78:	47b0      	blx	r6
			mag_to_force(&sensorRow_Values_Right);
    1f7a:	4620      	mov	r0, r4
    1f7c:	4b21      	ldr	r3, [pc, #132]	; (2004 <SensorRowUpdate+0x1b8>)
    1f7e:	4798      	blx	r3
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear); for future implementation just a placeholder
			//update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom); Placeholder for future implementation
			
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Right.b_x_top; //data7,8,9
    1f80:	4b21      	ldr	r3, [pc, #132]	; (2008 <SensorRowUpdate+0x1bc>)
    1f82:	681a      	ldr	r2, [r3, #0]
    1f84:	6821      	ldr	r1, [r4, #0]
    1f86:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Right.b_y_top;
    1f88:	681b      	ldr	r3, [r3, #0]
    1f8a:	68e2      	ldr	r2, [r4, #12]
    1f8c:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Right.b_z_top;
    1f8e:	69a2      	ldr	r2, [r4, #24]
    1f90:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Right.b_x_middle; //data4,5,6
    1f92:	6862      	ldr	r2, [r4, #4]
    1f94:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Right.b_y_middle;
    1f96:	6922      	ldr	r2, [r4, #16]
    1f98:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Right.b_z_middle;
    1f9a:	69e2      	ldr	r2, [r4, #28]
    1f9c:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Right.b_x_bottom; //data1,2,3
    1f9e:	68a2      	ldr	r2, [r4, #8]
    1fa0:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Right.b_y_bottom;
    1fa2:	6962      	ldr	r2, [r4, #20]
    1fa4:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Right.b_z_bottom;
    1fa6:	6a22      	ldr	r2, [r4, #32]
    1fa8:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    1faa:	2d01      	cmp	r5, #1
    1fac:	d004      	beq.n	1fb8 <SensorRowUpdate+0x16c>
    1fae:	2d02      	cmp	r5, #2
    1fb0:	d010      	beq.n	1fd4 <SensorRowUpdate+0x188>
			BLDC_OUT->hall_top_z = sensor9.data.z;
			*/
			//mag_to_force(&sensorRow_Values_1, &sensor3, &sensor6, &sensor9);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 3;
    1fb2:	4a20      	ldr	r2, [pc, #128]	; (2034 <SensorRowUpdate+0x1e8>)
    1fb4:	621a      	str	r2, [r3, #32]
			break;
		}
};
    1fb6:	e752      	b.n	1e5e <SensorRowUpdate+0x12>
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Right.force_z_top;
    1fb8:	4a1a      	ldr	r2, [pc, #104]	; (2024 <SensorRowUpdate+0x1d8>)
    1fba:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1fbc:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Right.force_r_top;
    1fbe:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1fc0:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Right.force_z_middle;
    1fc2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1fc4:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Right.force_r_middle;
    1fc6:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1fc8:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Right.force_z_bottom;
    1fca:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1fcc:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Right.force_r_bottom;
    1fce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1fd0:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fd2:	e7ee      	b.n	1fb2 <SensorRowUpdate+0x166>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Right.neuron_top_normal;
    1fd4:	4a18      	ldr	r2, [pc, #96]	; (2038 <SensorRowUpdate+0x1ec>)
    1fd6:	6811      	ldr	r1, [r2, #0]
    1fd8:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Right.neuron_top_shear;
    1fda:	6851      	ldr	r1, [r2, #4]
    1fdc:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Right.neuron_middle_normal;
    1fde:	6891      	ldr	r1, [r2, #8]
    1fe0:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Right.neuron_middle_shear;
    1fe2:	68d1      	ldr	r1, [r2, #12]
    1fe4:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Right.neuron_bottom_normal;
    1fe6:	6911      	ldr	r1, [r2, #16]
    1fe8:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Right.neuron_bottom_shear;
    1fea:	6952      	ldr	r2, [r2, #20]
    1fec:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fee:	e7e0      	b.n	1fb2 <SensorRowUpdate+0x166>
    1ff0:	20000e04 	.word	0x20000e04
    1ff4:	20000ce0 	.word	0x20000ce0
    1ff8:	20000c88 	.word	0x20000c88
    1ffc:	20000a18 	.word	0x20000a18
    2000:	00003019 	.word	0x00003019
    2004:	000030c1 	.word	0x000030c1
    2008:	20000074 	.word	0x20000074
    200c:	20000ba0 	.word	0x20000ba0
    2010:	200009b8 	.word	0x200009b8
    2014:	20000dac 	.word	0x20000dac
    2018:	20000c28 	.word	0x20000c28
    201c:	20000d4c 	.word	0x20000d4c
    2020:	20000a78 	.word	0x20000a78
    2024:	20000a90 	.word	0x20000a90
    2028:	20000b48 	.word	0x20000b48
    202c:	20000af0 	.word	0x20000af0
    2030:	20000bcc 	.word	0x20000bcc
    2034:	40400000 	.word	0x40400000
    2038:	20000988 	.word	0x20000988

0000203c <main>:


int main(void)
{
    203c:	b580      	push	{r7, lr}
    203e:	b086      	sub	sp, #24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2040:	4b39      	ldr	r3, [pc, #228]	; (2128 <main+0xec>)
    2042:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    2044:	4b39      	ldr	r3, [pc, #228]	; (212c <main+0xf0>)
    2046:	4798      	blx	r3
	
	//Initialize I2C communication
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    2048:	4e39      	ldr	r6, [pc, #228]	; (2130 <main+0xf4>)
    204a:	4c3a      	ldr	r4, [pc, #232]	; (2134 <main+0xf8>)
    204c:	4631      	mov	r1, r6
    204e:	4620      	mov	r0, r4
    2050:	4b39      	ldr	r3, [pc, #228]	; (2138 <main+0xfc>)
    2052:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    2054:	4620      	mov	r0, r4
    2056:	4b39      	ldr	r3, [pc, #228]	; (213c <main+0x100>)
    2058:	4798      	blx	r3
    205a:	4c39      	ldr	r4, [pc, #228]	; (2140 <main+0x104>)
    205c:	2540      	movs	r5, #64	; 0x40
    205e:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2060:	61a5      	str	r5, [r4, #24]
	// for testing purposes
	gpio_set_pin_level(TRG,false);
	gpio_set_pin_level(TRG,true);
	
	// Initialize Sensor Array
	SensorArray_Init(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    2062:	6833      	ldr	r3, [r6, #0]
    2064:	9305      	str	r3, [sp, #20]
    2066:	4e37      	ldr	r6, [pc, #220]	; (2144 <main+0x108>)
    2068:	9604      	str	r6, [sp, #16]
    206a:	4b37      	ldr	r3, [pc, #220]	; (2148 <main+0x10c>)
    206c:	9303      	str	r3, [sp, #12]
    206e:	4b37      	ldr	r3, [pc, #220]	; (214c <main+0x110>)
    2070:	9302      	str	r3, [sp, #8]
    2072:	4b37      	ldr	r3, [pc, #220]	; (2150 <main+0x114>)
    2074:	9301      	str	r3, [sp, #4]
    2076:	4b37      	ldr	r3, [pc, #220]	; (2154 <main+0x118>)
    2078:	9300      	str	r3, [sp, #0]
    207a:	4b37      	ldr	r3, [pc, #220]	; (2158 <main+0x11c>)
    207c:	4a37      	ldr	r2, [pc, #220]	; (215c <main+0x120>)
    207e:	4938      	ldr	r1, [pc, #224]	; (2160 <main+0x124>)
    2080:	4838      	ldr	r0, [pc, #224]	; (2164 <main+0x128>)
    2082:	4f39      	ldr	r7, [pc, #228]	; (2168 <main+0x12c>)
    2084:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2086:	6165      	str	r5, [r4, #20]
	//neuron_init(&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear); Needs to be Implemented in future Version 

	gpio_set_pin_level(TRG,false);
	
	//Initialize ReadoutVariables
	new_data = false;
    2088:	2300      	movs	r3, #0
    208a:	4a38      	ldr	r2, [pc, #224]	; (216c <main+0x130>)
    208c:	7013      	strb	r3, [r2, #0]
	triggered = false;
    208e:	4a38      	ldr	r2, [pc, #224]	; (2170 <main+0x134>)
    2090:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    2092:	4a38      	ldr	r2, [pc, #224]	; (2174 <main+0x138>)
    2094:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&sensor9);
    2096:	4630      	mov	r0, r6
    2098:	4b37      	ldr	r3, [pc, #220]	; (2178 <main+0x13c>)
    209a:	4798      	blx	r3
    209c:	4b37      	ldr	r3, [pc, #220]	; (217c <main+0x140>)
    209e:	8018      	strh	r0, [r3, #0]
    20a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20a4:	4b36      	ldr	r3, [pc, #216]	; (2180 <main+0x144>)
    20a6:	60da      	str	r2, [r3, #12]
	//TIMER_init(wait_time);
	NVIC_EnableIRQ(TC3_IRQn);
	selected_row = 2; //1 = left, 2 = middle, 3 = right
    20a8:	2202      	movs	r2, #2
    20aa:	4b36      	ldr	r3, [pc, #216]	; (2184 <main+0x148>)
    20ac:	701a      	strb	r2, [r3, #0]
	selected_output_mode = 1; //1 = Force, 2 = Neural Spikes
    20ae:	2201      	movs	r2, #1
    20b0:	4b35      	ldr	r3, [pc, #212]	; (2188 <main+0x14c>)
    20b2:	701a      	strb	r2, [r3, #0]
	/* Replace with your application code */
	while (1) {
		
		if (triggered == false)	{
    20b4:	4b2e      	ldr	r3, [pc, #184]	; (2170 <main+0x134>)
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d027      	beq.n	210c <main+0xd0>
			//triggerReadout_Prepare_Timer(50);
	//		timer_start(&TIMER_1);
			triggered = true;
			data_readout = false;
		}
		if(new_data == true && data_readout == false){	
    20bc:	4b2b      	ldr	r3, [pc, #172]	; (216c <main+0x130>)
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d0f7      	beq.n	20b4 <main+0x78>
    20c4:	4b2b      	ldr	r3, [pc, #172]	; (2174 <main+0x138>)
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	2b00      	cmp	r3, #0
    20ca:	d1f3      	bne.n	20b4 <main+0x78>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    20cc:	4b18      	ldr	r3, [pc, #96]	; (2130 <main+0xf4>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	9305      	str	r3, [sp, #20]
    20d2:	4b1c      	ldr	r3, [pc, #112]	; (2144 <main+0x108>)
    20d4:	9304      	str	r3, [sp, #16]
    20d6:	4b1c      	ldr	r3, [pc, #112]	; (2148 <main+0x10c>)
    20d8:	9303      	str	r3, [sp, #12]
    20da:	4b1c      	ldr	r3, [pc, #112]	; (214c <main+0x110>)
    20dc:	9302      	str	r3, [sp, #8]
    20de:	4b1c      	ldr	r3, [pc, #112]	; (2150 <main+0x114>)
    20e0:	9301      	str	r3, [sp, #4]
    20e2:	4b1c      	ldr	r3, [pc, #112]	; (2154 <main+0x118>)
    20e4:	9300      	str	r3, [sp, #0]
    20e6:	4b1c      	ldr	r3, [pc, #112]	; (2158 <main+0x11c>)
    20e8:	4a1c      	ldr	r2, [pc, #112]	; (215c <main+0x120>)
    20ea:	491d      	ldr	r1, [pc, #116]	; (2160 <main+0x124>)
    20ec:	481d      	ldr	r0, [pc, #116]	; (2164 <main+0x128>)
    20ee:	4c27      	ldr	r4, [pc, #156]	; (218c <main+0x150>)
    20f0:	47a0      	blx	r4
			SensorRowUpdate(selected_row, selected_output_mode); //must be modified later to allow readout of whole array - for loop where every row is selected once
    20f2:	4b25      	ldr	r3, [pc, #148]	; (2188 <main+0x14c>)
    20f4:	7819      	ldrb	r1, [r3, #0]
    20f6:	4b23      	ldr	r3, [pc, #140]	; (2184 <main+0x148>)
    20f8:	7818      	ldrb	r0, [r3, #0]
    20fa:	4b25      	ldr	r3, [pc, #148]	; (2190 <main+0x154>)
    20fc:	4798      	blx	r3
			new_data = false; 
    20fe:	2200      	movs	r2, #0
    2100:	4b1a      	ldr	r3, [pc, #104]	; (216c <main+0x130>)
    2102:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    2104:	2201      	movs	r2, #1
    2106:	4b1b      	ldr	r3, [pc, #108]	; (2174 <main+0x138>)
    2108:	701a      	strb	r2, [r3, #0]
    210a:	e7d3      	b.n	20b4 <main+0x78>
			BLDC_OUT->hall_middle_temp = 0;
    210c:	4b21      	ldr	r3, [pc, #132]	; (2194 <main+0x158>)
    210e:	681b      	ldr	r3, [r3, #0]
    2110:	2200      	movs	r2, #0
    2112:	621a      	str	r2, [r3, #32]
			triggerSensor(50);
    2114:	2032      	movs	r0, #50	; 0x32
    2116:	4b20      	ldr	r3, [pc, #128]	; (2198 <main+0x15c>)
    2118:	4798      	blx	r3
			triggered = true;
    211a:	2201      	movs	r2, #1
    211c:	4b14      	ldr	r3, [pc, #80]	; (2170 <main+0x134>)
    211e:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    2120:	2200      	movs	r2, #0
    2122:	4b14      	ldr	r3, [pc, #80]	; (2174 <main+0x138>)
    2124:	701a      	strb	r2, [r3, #0]
    2126:	e7c9      	b.n	20bc <main+0x80>
    2128:	000002d1 	.word	0x000002d1
    212c:	000007ad 	.word	0x000007ad
    2130:	20000a70 	.word	0x20000a70
    2134:	200003b0 	.word	0x200003b0
    2138:	00000aa1 	.word	0x00000aa1
    213c:	00000a85 	.word	0x00000a85
    2140:	41008000 	.word	0x41008000
    2144:	20000bcc 	.word	0x20000bcc
    2148:	20000d4c 	.word	0x20000d4c
    214c:	20000a18 	.word	0x20000a18
    2150:	20000af0 	.word	0x20000af0
    2154:	20000c28 	.word	0x20000c28
    2158:	20000c88 	.word	0x20000c88
    215c:	20000b48 	.word	0x20000b48
    2160:	20000dac 	.word	0x20000dac
    2164:	20000ce0 	.word	0x20000ce0
    2168:	00002ee5 	.word	0x00002ee5
    216c:	200009ac 	.word	0x200009ac
    2170:	20000c24 	.word	0x20000c24
    2174:	20000a75 	.word	0x20000a75
    2178:	00002975 	.word	0x00002975
    217c:	20000bb8 	.word	0x20000bb8
    2180:	e000e100 	.word	0xe000e100
    2184:	200009a0 	.word	0x200009a0
    2188:	20000d38 	.word	0x20000d38
    218c:	00002e39 	.word	0x00002e39
    2190:	00001e4d 	.word	0x00001e4d
    2194:	20000074 	.word	0x20000074
    2198:	00002df9 	.word	0x00002df9

0000219c <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    219c:	4b0d      	ldr	r3, [pc, #52]	; (21d4 <TC3_Handler+0x38>)
    219e:	7a9b      	ldrb	r3, [r3, #10]
    21a0:	f013 0f01 	tst.w	r3, #1
    21a4:	d10d      	bne.n	21c2 <TC3_Handler+0x26>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    21a6:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <TC3_Handler+0x38>)
    21a8:	7a9b      	ldrb	r3, [r3, #10]
    21aa:	f013 0f20 	tst.w	r3, #32
    21ae:	d007      	beq.n	21c0 <TC3_Handler+0x24>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    21b0:	4a08      	ldr	r2, [pc, #32]	; (21d4 <TC3_Handler+0x38>)
    21b2:	7a93      	ldrb	r3, [r2, #10]
    21b4:	f043 0320 	orr.w	r3, r3, #32
    21b8:	7293      	strb	r3, [r2, #10]
		new_data = true;
    21ba:	2201      	movs	r2, #1
    21bc:	4b06      	ldr	r3, [pc, #24]	; (21d8 <TC3_Handler+0x3c>)
    21be:	701a      	strb	r2, [r3, #0]
    21c0:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    21c2:	4a04      	ldr	r2, [pc, #16]	; (21d4 <TC3_Handler+0x38>)
    21c4:	7a93      	ldrb	r3, [r2, #10]
    21c6:	f043 0301 	orr.w	r3, r3, #1
    21ca:	7293      	strb	r3, [r2, #10]
		triggered = false;
    21cc:	2200      	movs	r2, #0
    21ce:	4b03      	ldr	r3, [pc, #12]	; (21dc <TC3_Handler+0x40>)
    21d0:	701a      	strb	r2, [r3, #0]
    21d2:	4770      	bx	lr
    21d4:	4101c000 	.word	0x4101c000
    21d8:	200009ac 	.word	0x200009ac
    21dc:	20000c24 	.word	0x20000c24

000021e0 <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    21e0:	3901      	subs	r1, #1
    21e2:	2903      	cmp	r1, #3
    21e4:	d805      	bhi.n	21f2 <select_prefix+0x12>
    21e6:	e8df f001 	tbb	[pc, r1]
    21ea:	0602      	.short	0x0602
    21ec:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    21ee:	230c      	movs	r3, #12
    21f0:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    21f2:	7840      	ldrb	r0, [r0, #1]
    21f4:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    21f6:	2310      	movs	r3, #16
    21f8:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    21fa:	e7fa      	b.n	21f2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    21fc:	2314      	movs	r3, #20
    21fe:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    2200:	e7f7      	b.n	21f2 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    2202:	2318      	movs	r3, #24
    2204:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    2206:	e7f4      	b.n	21f2 <select_prefix+0x12>

00002208 <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    2208:	b5f0      	push	{r4, r5, r6, r7, lr}
    220a:	b083      	sub	sp, #12
    220c:	4606      	mov	r6, r0
    220e:	4617      	mov	r7, r2
    2210:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    2212:	ab02      	add	r3, sp, #8
    2214:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    2218:	2201      	movs	r2, #1
    221a:	4619      	mov	r1, r3
    221c:	4b0a      	ldr	r3, [pc, #40]	; (2248 <i2c_m_sync_cmd_write_easy+0x40>)
    221e:	4798      	blx	r3
	if (ret != 1) {return -1;}
    2220:	2801      	cmp	r0, #1
    2222:	d10d      	bne.n	2240 <i2c_m_sync_cmd_write_easy+0x38>
    2224:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    2226:	462a      	mov	r2, r5
    2228:	4639      	mov	r1, r7
    222a:	4630      	mov	r0, r6
    222c:	4b07      	ldr	r3, [pc, #28]	; (224c <i2c_m_sync_cmd_write_easy+0x44>)
    222e:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    2230:	42a8      	cmp	r0, r5
    2232:	d102      	bne.n	223a <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    2234:	4620      	mov	r0, r4
    2236:	b003      	add	sp, #12
    2238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    223a:	f04f 34ff 	mov.w	r4, #4294967295
    223e:	e7f9      	b.n	2234 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    2240:	f04f 34ff 	mov.w	r4, #4294967295
    2244:	e7f6      	b.n	2234 <i2c_m_sync_cmd_write_easy+0x2c>
    2246:	bf00      	nop
    2248:	00000aa9 	.word	0x00000aa9
    224c:	00000add 	.word	0x00000add

00002250 <sendCommand>:
{
    2250:	b530      	push	{r4, r5, lr}
    2252:	b083      	sub	sp, #12
    2254:	460d      	mov	r5, r1
    2256:	4614      	mov	r4, r2
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2258:	f44f 6200 	mov.w	r2, #2048	; 0x800
    225c:	7801      	ldrb	r1, [r0, #0]
    225e:	4808      	ldr	r0, [pc, #32]	; (2280 <sendCommand+0x30>)
    2260:	4b08      	ldr	r3, [pc, #32]	; (2284 <sendCommand+0x34>)
    2262:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    2264:	2301      	movs	r3, #1
    2266:	aa01      	add	r2, sp, #4
    2268:	4629      	mov	r1, r5
    226a:	4620      	mov	r0, r4
    226c:	4c06      	ldr	r4, [pc, #24]	; (2288 <sendCommand+0x38>)
    226e:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2270:	2800      	cmp	r0, #0
    2272:	dd03      	ble.n	227c <sendCommand+0x2c>
  return buffer_answer[0];
    2274:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2278:	b003      	add	sp, #12
    227a:	bd30      	pop	{r4, r5, pc}
  if (ret < 1) {return STATUS_ERROR;}
    227c:	20ff      	movs	r0, #255	; 0xff
    227e:	e7fb      	b.n	2278 <sendCommand+0x28>
    2280:	200003b0 	.word	0x200003b0
    2284:	00000a91 	.word	0x00000a91
    2288:	00002209 	.word	0x00002209

0000228c <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	b082      	sub	sp, #8
    2290:	4605      	mov	r5, r0
    2292:	461e      	mov	r6, r3
    2294:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    2298:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    229c:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    22a0:	2202      	movs	r2, #2
    22a2:	a901      	add	r1, sp, #4
    22a4:	4b09      	ldr	r3, [pc, #36]	; (22cc <i2c_m_sync_reg_read_easy+0x40>)
    22a6:	4798      	blx	r3
	if (ret != 2) {return -1;}
    22a8:	2802      	cmp	r0, #2
    22aa:	d10c      	bne.n	22c6 <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    22ac:	4622      	mov	r2, r4
    22ae:	4631      	mov	r1, r6
    22b0:	4628      	mov	r0, r5
    22b2:	4b07      	ldr	r3, [pc, #28]	; (22d0 <i2c_m_sync_reg_read_easy+0x44>)
    22b4:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    22b6:	42a0      	cmp	r0, r4
    22b8:	d102      	bne.n	22c0 <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    22ba:	2001      	movs	r0, #1
}
    22bc:	b002      	add	sp, #8
    22be:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    22c0:	f04f 30ff 	mov.w	r0, #4294967295
    22c4:	e7fa      	b.n	22bc <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    22c6:	f04f 30ff 	mov.w	r0, #4294967295
    22ca:	e7f7      	b.n	22bc <i2c_m_sync_reg_read_easy+0x30>
    22cc:	00000aa9 	.word	0x00000aa9
    22d0:	00000add 	.word	0x00000add

000022d4 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    22d4:	b510      	push	{r4, lr}
    22d6:	b082      	sub	sp, #8
    22d8:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    22da:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    22de:	0a11      	lsrs	r1, r2, #8
    22e0:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    22e4:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    22e8:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    22ec:	2204      	movs	r2, #4
    22ee:	eb0d 0102 	add.w	r1, sp, r2
    22f2:	4b09      	ldr	r3, [pc, #36]	; (2318 <i2c_m_sync_reg_write_easy+0x44>)
    22f4:	4798      	blx	r3
	if (ret != 4) {return -1;}
    22f6:	2804      	cmp	r0, #4
    22f8:	d10b      	bne.n	2312 <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    22fa:	2201      	movs	r2, #1
    22fc:	9904      	ldr	r1, [sp, #16]
    22fe:	4620      	mov	r0, r4
    2300:	4b06      	ldr	r3, [pc, #24]	; (231c <i2c_m_sync_reg_write_easy+0x48>)
    2302:	4798      	blx	r3
	if (ret != 1) {return -1;}
    2304:	2801      	cmp	r0, #1
    2306:	d101      	bne.n	230c <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    2308:	b002      	add	sp, #8
    230a:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    230c:	f04f 30ff 	mov.w	r0, #4294967295
    2310:	e7fa      	b.n	2308 <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    2312:	f04f 30ff 	mov.w	r0, #4294967295
    2316:	e7f7      	b.n	2308 <i2c_m_sync_reg_write_easy+0x34>
    2318:	00000aa9 	.word	0x00000aa9
    231c:	00000add 	.word	0x00000add

00002320 <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    2320:	2308      	movs	r3, #8
    2322:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    2326:	4770      	bx	lr

00002328 <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    2328:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    232a:	2200      	movs	r2, #0
    232c:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    232e:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    2330:	4a0e      	ldr	r2, [pc, #56]	; (236c <initialize+0x44>)
    2332:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    2334:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    2338:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    233a:	4a0d      	ldr	r2, [pc, #52]	; (2370 <initialize+0x48>)
    233c:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    233e:	4a0d      	ldr	r2, [pc, #52]	; (2374 <initialize+0x4c>)
    2340:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    2342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2346:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    2348:	4a0b      	ldr	r2, [pc, #44]	; (2378 <initialize+0x50>)
    234a:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    234c:	4a0b      	ldr	r2, [pc, #44]	; (237c <initialize+0x54>)
    234e:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    2350:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2354:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    2356:	4a0a      	ldr	r2, [pc, #40]	; (2380 <initialize+0x58>)
    2358:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    235a:	4a0a      	ldr	r2, [pc, #40]	; (2384 <initialize+0x5c>)
    235c:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    235e:	4a0a      	ldr	r2, [pc, #40]	; (2388 <initialize+0x60>)
    2360:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    2362:	4a0a      	ldr	r2, [pc, #40]	; (238c <initialize+0x64>)
    2364:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    2366:	4b0a      	ldr	r3, [pc, #40]	; (2390 <initialize+0x68>)
    2368:	4798      	blx	r3
    236a:	bd08      	pop	{r3, pc}
    236c:	40a00000 	.word	0x40a00000
    2370:	40400000 	.word	0x40400000
    2374:	40200000 	.word	0x40200000
    2378:	3fd55555 	.word	0x3fd55555
    237c:	3faaaaab 	.word	0x3faaaaab
    2380:	3e48b439 	.word	0x3e48b439
    2384:	3ea1cac1 	.word	0x3ea1cac1
    2388:	3e19999a 	.word	0x3e19999a
    238c:	3e77ced9 	.word	0x3e77ced9
    2390:	00002321 	.word	0x00002321

00002394 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    2394:	2301      	movs	r3, #1
    2396:	fa03 f101 	lsl.w	r1, r3, r1
    239a:	f001 0108 	and.w	r1, r1, #8
    239e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    23a2:	4319      	orrs	r1, r3
    23a4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    23a8:	4770      	bx	lr

000023aa <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    23aa:	2902      	cmp	r1, #2
    23ac:	d80c      	bhi.n	23c8 <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    23ae:	f101 031c 	add.w	r3, r1, #28
    23b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    23b6:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    23b8:	2301      	movs	r3, #1
    23ba:	408b      	lsls	r3, r1
    23bc:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    23c0:	ea21 0103 	bic.w	r1, r1, r3
    23c4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    23c8:	4770      	bx	lr
	...

000023cc <readRegister>:
{
    23cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ce:	b085      	sub	sp, #20
    23d0:	4604      	mov	r4, r0
    23d2:	460d      	mov	r5, r1
    23d4:	4617      	mov	r7, r2
    23d6:	461e      	mov	r6, r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    23d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23dc:	7801      	ldrb	r1, [r0, #0]
    23de:	4810      	ldr	r0, [pc, #64]	; (2420 <readRegister+0x54>)
    23e0:	4b10      	ldr	r3, [pc, #64]	; (2424 <readRegister+0x58>)
    23e2:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    23e4:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    23e6:	2303      	movs	r3, #3
    23e8:	9300      	str	r3, [sp, #0]
    23ea:	ab03      	add	r3, sp, #12
    23ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    23f0:	2150      	movs	r1, #80	; 0x50
    23f2:	4630      	mov	r0, r6
    23f4:	4e0c      	ldr	r6, [pc, #48]	; (2428 <readRegister+0x5c>)
    23f6:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    23f8:	2800      	cmp	r0, #0
    23fa:	dc03      	bgt.n	2404 <readRegister+0x38>
    23fc:	26ff      	movs	r6, #255	; 0xff
}
    23fe:	4630      	mov	r0, r6
    2400:	b005      	add	sp, #20
    2402:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    2404:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    2408:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    240c:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    2410:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2414:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    2416:	4629      	mov	r1, r5
    2418:	4620      	mov	r0, r4
    241a:	4b04      	ldr	r3, [pc, #16]	; (242c <readRegister+0x60>)
    241c:	4798      	blx	r3
  return status;
    241e:	e7ee      	b.n	23fe <readRegister+0x32>
    2420:	200003b0 	.word	0x200003b0
    2424:	00000a91 	.word	0x00000a91
    2428:	0000228d 	.word	0x0000228d
    242c:	000023ab 	.word	0x000023ab

00002430 <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2430:	b538      	push	{r3, r4, r5, lr}
    2432:	4604      	mov	r4, r0
    2434:	460d      	mov	r5, r1
  cache_invalidate(hall_sensor);
    2436:	4b06      	ldr	r3, [pc, #24]	; (2450 <reset+0x20>)
    2438:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, io);
    243a:	462a      	mov	r2, r5
    243c:	21f0      	movs	r1, #240	; 0xf0
    243e:	4620      	mov	r0, r4
    2440:	4b04      	ldr	r3, [pc, #16]	; (2454 <reset+0x24>)
    2442:	4798      	blx	r3
    2444:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    2446:	2003      	movs	r0, #3
    2448:	4b03      	ldr	r3, [pc, #12]	; (2458 <reset+0x28>)
    244a:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    244c:	4620      	mov	r0, r4
    244e:	bd38      	pop	{r3, r4, r5, pc}
    2450:	00002321 	.word	0x00002321
    2454:	00002251 	.word	0x00002251
    2458:	000009c5 	.word	0x000009c5

0000245c <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    245c:	b508      	push	{r3, lr}
  return sendCommand(hall_sensor, CMD_EXIT, io);
    245e:	460a      	mov	r2, r1
    2460:	2180      	movs	r1, #128	; 0x80
    2462:	4b01      	ldr	r3, [pc, #4]	; (2468 <exit_command+0xc>)
    2464:	4798      	blx	r3
  delay_ms(2);
}
    2466:	bd08      	pop	{r3, pc}
    2468:	00002251 	.word	0x00002251

0000246c <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct io_descriptor *io)
{
    246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2470:	b084      	sub	sp, #16
    2472:	4605      	mov	r5, r0
    2474:	460c      	mov	r4, r1
    2476:	4690      	mov	r8, r2
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    2478:	f001 060f 	and.w	r6, r1, #15
    247c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2480:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2484:	7801      	ldrb	r1, [r0, #0]
    2486:	483d      	ldr	r0, [pc, #244]	; (257c <readMeasurement+0x110>)
    2488:	4b3d      	ldr	r3, [pc, #244]	; (2580 <readMeasurement+0x114>)
    248a:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    248c:	f014 0908 	ands.w	r9, r4, #8
    2490:	d05b      	beq.n	254a <readMeasurement+0xde>
    2492:	2302      	movs	r3, #2
    2494:	f014 0a04 	ands.w	sl, r4, #4
    2498:	d059      	beq.n	254e <readMeasurement+0xe2>
    249a:	2202      	movs	r2, #2
    249c:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    249e:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    24a2:	443b      	add	r3, r7
    24a4:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    24a6:	f014 0401 	ands.w	r4, r4, #1
    24aa:	d052      	beq.n	2552 <readMeasurement+0xe6>
    24ac:	2302      	movs	r3, #2
    24ae:	4413      	add	r3, r2
    24b0:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    24b2:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    24b4:	b2db      	uxtb	r3, r3
    24b6:	aa01      	add	r2, sp, #4
    24b8:	4631      	mov	r1, r6
    24ba:	4640      	mov	r0, r8
    24bc:	4e31      	ldr	r6, [pc, #196]	; (2584 <readMeasurement+0x118>)
    24be:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    24c0:	2800      	cmp	r0, #0
    24c2:	dd59      	ble.n	2578 <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    24c4:	2c00      	cmp	r4, #0
    24c6:	d046      	beq.n	2556 <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    24c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    24cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    24d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    24d4:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    24d8:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    24da:	2f00      	cmp	r7, #0
    24dc:	d040      	beq.n	2560 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    24de:	aa04      	add	r2, sp, #16
    24e0:	441a      	add	r2, r3
    24e2:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    24e6:	1c59      	adds	r1, r3, #1
    24e8:	aa04      	add	r2, sp, #16
    24ea:	4411      	add	r1, r2
    24ec:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    24f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    24f4:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    24f8:	3302      	adds	r3, #2
    24fa:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    24fc:	f1ba 0f00 	cmp.w	sl, #0
    2500:	d032      	beq.n	2568 <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    2502:	aa04      	add	r2, sp, #16
    2504:	441a      	add	r2, r3
    2506:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    250a:	1c59      	adds	r1, r3, #1
    250c:	aa04      	add	r2, sp, #16
    250e:	4411      	add	r1, r2
    2510:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    2514:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2518:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    251c:	3302      	adds	r3, #2
    251e:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    2520:	f1b9 0f00 	cmp.w	r9, #0
    2524:	d024      	beq.n	2570 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    2526:	aa04      	add	r2, sp, #16
    2528:	441a      	add	r2, r3
    252a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    252e:	3301      	adds	r3, #1
    2530:	a904      	add	r1, sp, #16
    2532:	440b      	add	r3, r1
    2534:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    2538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    253c:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    2540:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2544:	b004      	add	sp, #16
    2546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    254a:	2300      	movs	r3, #0
    254c:	e7a2      	b.n	2494 <readMeasurement+0x28>
    254e:	2200      	movs	r2, #0
    2550:	e7a4      	b.n	249c <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    2552:	2300      	movs	r3, #0
    2554:	e7ab      	b.n	24ae <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    2556:	2300      	movs	r3, #0
    2558:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    255c:	2301      	movs	r3, #1
    255e:	e7bc      	b.n	24da <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    2560:	2200      	movs	r2, #0
    2562:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    2566:	e7c9      	b.n	24fc <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    2568:	2200      	movs	r2, #0
    256a:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    256e:	e7d7      	b.n	2520 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    2570:	2300      	movs	r3, #0
    2572:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    2576:	e7e3      	b.n	2540 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    2578:	20ff      	movs	r0, #255	; 0xff
    257a:	e7e3      	b.n	2544 <readMeasurement+0xd8>
    257c:	200003b0 	.word	0x200003b0
    2580:	00000a91 	.word	0x00000a91
    2584:	00002209 	.word	0x00002209

00002588 <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    2588:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    258a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    258c:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    2590:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    2594:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    2596:	f3c1 1147 	ubfx	r1, r1, #5, #8
    259a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    259e:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    25a2:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    25a6:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    25a8:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    25aa:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    25ae:	2a0c      	cmp	r2, #12
    25b0:	f000 8091 	beq.w	26d6 <convertRaw+0x14e>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    25b4:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    25b8:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    25bc:	3302      	adds	r3, #2
    25be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    25c2:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    25c6:	2c00      	cmp	r4, #0
    25c8:	f000 808a 	beq.w	26e0 <convertRaw+0x158>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    25cc:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    25d0:	ee06 3a90 	vmov	s13, r3
    25d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    25d8:	eddf 7ae0 	vldr	s15, [pc, #896]	; 295c <convertRaw+0x3d4>
    25dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
    25e0:	ee65 6a26 	vmul.f32	s13, s10, s13
    25e4:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    25e8:	2201      	movs	r2, #1
    25ea:	fa02 f101 	lsl.w	r1, r2, r1
    25ee:	ee07 1a90 	vmov	s15, r1
    25f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    25f6:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    25fa:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    25fe:	2c00      	cmp	r4, #0
    2600:	f000 80d4 	beq.w	27ac <convertRaw+0x224>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2604:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2608:	ee07 3a10 	vmov	s14, r3
    260c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2610:	eddf 7ad2 	vldr	s15, [pc, #840]	; 295c <convertRaw+0x3d4>
    2614:	ee37 7a67 	vsub.f32	s14, s14, s15
    2618:	ee25 7a07 	vmul.f32	s14, s10, s14
    261c:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    2620:	2301      	movs	r3, #1
    2622:	40b3      	lsls	r3, r6
    2624:	ee07 3a90 	vmov	s15, r3
    2628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    262c:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2630:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    2634:	2c00      	cmp	r4, #0
    2636:	f000 811c 	beq.w	2872 <convertRaw+0x2ea>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    263a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    263e:	ee07 3a90 	vmov	s15, r3
    2642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2646:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 295c <convertRaw+0x3d4>
    264a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    264e:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2652:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    2656:	2301      	movs	r3, #1
    2658:	fa03 f505 	lsl.w	r5, r3, r5
    265c:	ee07 5a10 	vmov	s14, r5
    2660:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2664:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2668:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    266c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2670:	ee07 3a90 	vmov	s15, r3
    2674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2678:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 2960 <convertRaw+0x3d8>
    267c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2680:	eddf 6ab8 	vldr	s13, [pc, #736]	; 2964 <convertRaw+0x3dc>
    2684:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2688:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    268c:	ee77 7a27 	vadd.f32	s15, s14, s15
    2690:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    2694:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    2698:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 2968 <convertRaw+0x3e0>
    269c:	eef4 7ac7 	vcmpe.f32	s15, s14
    26a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26a4:	f340 814a 	ble.w	293c <convertRaw+0x3b4>
  {
	  hall_sensor->data.x = 50000;
    26a8:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    26ac:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    26b0:	ed9f 7aad 	vldr	s14, [pc, #692]	; 2968 <convertRaw+0x3e0>
    26b4:	eef4 7ac7 	vcmpe.f32	s15, s14
    26b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26bc:	f300 8149 	bgt.w	2952 <convertRaw+0x3ca>
    {
	    hall_sensor->data.y = 50000;
    }
    else
    {
	    if (hall_sensor->data.y < -50000)
    26c0:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 296c <convertRaw+0x3e4>
    26c4:	eef4 7ac7 	vcmpe.f32	s15, s14
    26c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26cc:	f140 8143 	bpl.w	2956 <convertRaw+0x3ce>
	    {
		    hall_sensor->data.y = -50000;
    26d0:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.z < -50000)
	    {
		    //hall_sensor->data.z = -50000;
	    }
    }
}
    26d4:	e13f      	b.n	2956 <convertRaw+0x3ce>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    26d6:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    26da:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    26de:	e76d      	b.n	25bc <convertRaw+0x34>
    switch(res_x){
    26e0:	2903      	cmp	r1, #3
    26e2:	d88c      	bhi.n	25fe <convertRaw+0x76>
    26e4:	e8df f001 	tbb	[pc, r1]
    26e8:	482e1802 	.word	0x482e1802
		hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    26ec:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    26f0:	ee07 3a90 	vmov	s15, r3
    26f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    26f8:	ee67 7a85 	vmul.f32	s15, s15, s10
    26fc:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2700:	2301      	movs	r3, #1
    2702:	fa03 f101 	lsl.w	r1, r3, r1
    2706:	ee07 1a90 	vmov	s15, r1
    270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    270e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2712:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		break;
    2716:	e772      	b.n	25fe <convertRaw+0x76>
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    2718:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    271c:	ee07 3a90 	vmov	s15, r3
    2720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2724:	ee67 7a85 	vmul.f32	s15, s15, s10
    2728:	ee25 7aa7 	vmul.f32	s14, s11, s15
    272c:	2301      	movs	r3, #1
    272e:	fa03 f101 	lsl.w	r1, r3, r1
    2732:	ee07 1a90 	vmov	s15, r1
    2736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    273a:	ee67 7a87 	vmul.f32	s15, s15, s14
    273e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2742:	e75c      	b.n	25fe <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2744:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2748:	ee07 3a90 	vmov	s15, r3
    274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2750:	ed9f 7a82 	vldr	s14, [pc, #520]	; 295c <convertRaw+0x3d4>
    2754:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2758:	ee65 7a27 	vmul.f32	s15, s10, s15
    275c:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2760:	2301      	movs	r3, #1
    2762:	fa03 f101 	lsl.w	r1, r3, r1
    2766:	ee07 1a10 	vmov	s14, r1
    276a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    276e:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2772:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2776:	e742      	b.n	25fe <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    2778:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    277c:	ee07 3a90 	vmov	s15, r3
    2780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2784:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 2970 <convertRaw+0x3e8>
    2788:	ee77 7ac7 	vsub.f32	s15, s15, s14
    278c:	ee65 7a27 	vmul.f32	s15, s10, s15
    2790:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2794:	2301      	movs	r3, #1
    2796:	fa03 f101 	lsl.w	r1, r3, r1
    279a:	ee07 1a10 	vmov	s14, r1
    279e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    27a2:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    27a6:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    27aa:	e728      	b.n	25fe <convertRaw+0x76>
    switch(res_y){
    27ac:	2e03      	cmp	r6, #3
    27ae:	f63f af41 	bhi.w	2634 <convertRaw+0xac>
    27b2:	e8df f006 	tbb	[pc, r6]
    27b6:	1702      	.short	0x1702
    27b8:	452c      	.short	0x452c
		hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    27ba:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    27be:	ee07 3a10 	vmov	s14, r3
    27c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    27c6:	ee27 7a05 	vmul.f32	s14, s14, s10
    27ca:	ee25 5a87 	vmul.f32	s10, s11, s14
    27ce:	2301      	movs	r3, #1
    27d0:	40b3      	lsls	r3, r6
    27d2:	ee07 3a90 	vmov	s15, r3
    27d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    27da:	ee27 7a05 	vmul.f32	s14, s14, s10
    27de:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
		break;
    27e2:	e727      	b.n	2634 <convertRaw+0xac>
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    27e4:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    27e8:	ee07 3a10 	vmov	s14, r3
    27ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    27f0:	ee27 7a05 	vmul.f32	s14, s14, s10
    27f4:	ee25 5a87 	vmul.f32	s10, s11, s14
    27f8:	2301      	movs	r3, #1
    27fa:	40b3      	lsls	r3, r6
    27fc:	ee07 3a90 	vmov	s15, r3
    2800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2804:	ee27 7a05 	vmul.f32	s14, s14, s10
    2808:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    280c:	e712      	b.n	2634 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    280e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2812:	ee07 3a10 	vmov	s14, r3
    2816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    281a:	eddf 7a50 	vldr	s15, [pc, #320]	; 295c <convertRaw+0x3d4>
    281e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2822:	ee25 7a07 	vmul.f32	s14, s10, s14
    2826:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    282a:	2301      	movs	r3, #1
    282c:	40b3      	lsls	r3, r6
    282e:	ee07 3a90 	vmov	s15, r3
    2832:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2836:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    283a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    283e:	e6f9      	b.n	2634 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2840:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2844:	ee07 3a10 	vmov	s14, r3
    2848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    284c:	eddf 7a48 	vldr	s15, [pc, #288]	; 2970 <convertRaw+0x3e8>
    2850:	ee37 7a67 	vsub.f32	s14, s14, s15
    2854:	ee25 7a07 	vmul.f32	s14, s10, s14
    2858:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    285c:	2301      	movs	r3, #1
    285e:	40b3      	lsls	r3, r6
    2860:	ee07 3a90 	vmov	s15, r3
    2864:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2868:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    286c:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2870:	e6e0      	b.n	2634 <convertRaw+0xac>
    switch(res_z){
    2872:	2d03      	cmp	r5, #3
    2874:	f63f aefa 	bhi.w	266c <convertRaw+0xe4>
    2878:	e8df f005 	tbb	[pc, r5]
    287c:	462c1702 	.word	0x462c1702
		hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2880:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2884:	ee07 3a90 	vmov	s15, r3
    2888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    288c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2890:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2894:	2301      	movs	r3, #1
    2896:	40ab      	lsls	r3, r5
    2898:	ee07 3a90 	vmov	s15, r3
    289c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
    28a4:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		break;
    28a8:	e6e0      	b.n	266c <convertRaw+0xe4>
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    28aa:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    28ae:	ee07 3a90 	vmov	s15, r3
    28b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28b6:	ee67 7aa4 	vmul.f32	s15, s15, s9
    28ba:	ee65 5aa7 	vmul.f32	s11, s11, s15
    28be:	2301      	movs	r3, #1
    28c0:	40ab      	lsls	r3, r5
    28c2:	ee07 3a90 	vmov	s15, r3
    28c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
    28ce:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    28d2:	e6cb      	b.n	266c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    28d4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    28d8:	ee07 3a90 	vmov	s15, r3
    28dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28e0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 295c <convertRaw+0x3d4>
    28e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    28e8:	ee64 7aa7 	vmul.f32	s15, s9, s15
    28ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    28f0:	2301      	movs	r3, #1
    28f2:	fa03 f505 	lsl.w	r5, r3, r5
    28f6:	ee07 5a10 	vmov	s14, r5
    28fa:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    28fe:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    2902:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    2906:	e6b1      	b.n	266c <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2908:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    290c:	ee07 3a90 	vmov	s15, r3
    2910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2914:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2970 <convertRaw+0x3e8>
    2918:	ee77 7ac7 	vsub.f32	s15, s15, s14
    291c:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2920:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2924:	2301      	movs	r3, #1
    2926:	fa03 f505 	lsl.w	r5, r3, r5
    292a:	ee07 5a10 	vmov	s14, r5
    292e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2932:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    2936:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    293a:	e697      	b.n	266c <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    293c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 296c <convertRaw+0x3e4>
    2940:	eef4 7ac7 	vcmpe.f32	s15, s14
    2944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2948:	f57f aeb0 	bpl.w	26ac <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    294c:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2950:	e6ac      	b.n	26ac <convertRaw+0x124>
	    hall_sensor->data.y = 50000;
    2952:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
}
    2956:	bc70      	pop	{r4, r5, r6}
    2958:	4770      	bx	lr
    295a:	bf00      	nop
    295c:	47000000 	.word	0x47000000
    2960:	4734a400 	.word	0x4734a400
    2964:	4234cccd 	.word	0x4234cccd
    2968:	47435000 	.word	0x47435000
    296c:	c7435000 	.word	0xc7435000
    2970:	46800000 	.word	0x46800000

00002974 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    2974:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    2976:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2978:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    297c:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    2980:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    2984:	2201      	movs	r2, #1
    2986:	408a      	lsls	r2, r1
    2988:	3202      	adds	r2, #2
    298a:	409a      	lsls	r2, r3
    298c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2990:	0193      	lsls	r3, r2, #6
    2992:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    2996:	23c0      	movs	r3, #192	; 0xc0
    2998:	40a3      	lsls	r3, r4
    299a:	3343      	adds	r3, #67	; 0x43
    299c:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    299e:	4b05      	ldr	r3, [pc, #20]	; (29b4 <convDelayMicro+0x40>)
    29a0:	fba3 3000 	umull	r3, r0, r3, r0
    29a4:	f3c0 104f 	ubfx	r0, r0, #5, #16
    29a8:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    29aa:	b280      	uxth	r0, r0
    29ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop
    29b4:	51eb851f 	.word	0x51eb851f

000029b8 <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    29b8:	0900      	lsrs	r0, r0, #4
    29ba:	f080 0001 	eor.w	r0, r0, #1
}
    29be:	f000 0001 	and.w	r0, r0, #1
    29c2:	4770      	bx	lr

000029c4 <writeRegister>:
{
    29c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c6:	b085      	sub	sp, #20
    29c8:	4605      	mov	r5, r0
    29ca:	460e      	mov	r6, r1
    29cc:	4617      	mov	r7, r2
    29ce:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    29d0:	4b12      	ldr	r3, [pc, #72]	; (2a1c <writeRegister+0x58>)
    29d2:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    29d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    29d8:	7829      	ldrb	r1, [r5, #0]
    29da:	4811      	ldr	r0, [pc, #68]	; (2a20 <writeRegister+0x5c>)
    29dc:	4b11      	ldr	r3, [pc, #68]	; (2a24 <writeRegister+0x60>)
    29de:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    29e0:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    29e2:	aa03      	add	r2, sp, #12
    29e4:	9200      	str	r2, [sp, #0]
    29e6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    29ea:	463a      	mov	r2, r7
    29ec:	2160      	movs	r1, #96	; 0x60
    29ee:	4620      	mov	r0, r4
    29f0:	4c0d      	ldr	r4, [pc, #52]	; (2a28 <writeRegister+0x64>)
    29f2:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    29f4:	2800      	cmp	r0, #0
    29f6:	dd0e      	ble.n	2a16 <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    29f8:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    29fc:	4620      	mov	r0, r4
    29fe:	4b0b      	ldr	r3, [pc, #44]	; (2a2c <writeRegister+0x68>)
    2a00:	4798      	blx	r3
    2a02:	b908      	cbnz	r0, 2a08 <writeRegister+0x44>
  return status;
    2a04:	4620      	mov	r0, r4
    2a06:	e007      	b.n	2a18 <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    2a08:	463a      	mov	r2, r7
    2a0a:	4631      	mov	r1, r6
    2a0c:	4628      	mov	r0, r5
    2a0e:	4b08      	ldr	r3, [pc, #32]	; (2a30 <writeRegister+0x6c>)
    2a10:	4798      	blx	r3
  return status;
    2a12:	4620      	mov	r0, r4
    2a14:	e000      	b.n	2a18 <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    2a16:	20ff      	movs	r0, #255	; 0xff
}
    2a18:	b005      	add	sp, #20
    2a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a1c:	00002395 	.word	0x00002395
    2a20:	200003b0 	.word	0x200003b0
    2a24:	00000a91 	.word	0x00000a91
    2a28:	000022d5 	.word	0x000022d5
    2a2c:	000029b9 	.word	0x000029b9
    2a30:	000023ab 	.word	0x000023ab

00002a34 <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    2a34:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2a38:	4770      	bx	lr
	...

00002a3c <cache_fill>:
  if (hall_sensor->cache.dirty != 0) {
    2a3c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    2a40:	b30a      	cbz	r2, 2a86 <cache_fill+0x4a>
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct io_descriptor *io) {
    2a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a44:	460e      	mov	r6, r1
    2a46:	4605      	mov	r5, r0
    2a48:	2400      	movs	r4, #0
    2a4a:	e001      	b.n	2a50 <cache_fill+0x14>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    2a4c:	3401      	adds	r4, #1
    2a4e:	b2e4      	uxtb	r4, r4
    2a50:	2c02      	cmp	r4, #2
    2a52:	d815      	bhi.n	2a80 <cache_fill+0x44>
      if (hall_sensor->cache.dirty & (1 << address)){
    2a54:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2a58:	4123      	asrs	r3, r4
    2a5a:	f013 0f01 	tst.w	r3, #1
    2a5e:	d0f5      	beq.n	2a4c <cache_fill+0x10>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]), io))) {
    2a60:	f104 021c 	add.w	r2, r4, #28
    2a64:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2a68:	4633      	mov	r3, r6
    2a6a:	3202      	adds	r2, #2
    2a6c:	4621      	mov	r1, r4
    2a6e:	4628      	mov	r0, r5
    2a70:	4f06      	ldr	r7, [pc, #24]	; (2a8c <cache_fill+0x50>)
    2a72:	47b8      	blx	r7
    2a74:	4b06      	ldr	r3, [pc, #24]	; (2a90 <cache_fill+0x54>)
    2a76:	4798      	blx	r3
    2a78:	2800      	cmp	r0, #0
    2a7a:	d0e7      	beq.n	2a4c <cache_fill+0x10>
          return STATUS_ERROR;
    2a7c:	22ff      	movs	r2, #255	; 0xff
    2a7e:	e000      	b.n	2a82 <cache_fill+0x46>
  return STATUS_OK;
    2a80:	2200      	movs	r2, #0
}
    2a82:	4610      	mov	r0, r2
    2a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a86:	4610      	mov	r0, r2
    2a88:	4770      	bx	lr
    2a8a:	bf00      	nop
    2a8c:	000023cd 	.word	0x000023cd
    2a90:	00002a35 	.word	0x00002a35

00002a94 <startMeasurement>:
{
    2a94:	b570      	push	{r4, r5, r6, lr}
    2a96:	4606      	mov	r6, r0
    2a98:	460c      	mov	r4, r1
    2a9a:	4615      	mov	r5, r2
  cache_fill(hall_sensor, io);
    2a9c:	4611      	mov	r1, r2
    2a9e:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <startMeasurement+0x20>)
    2aa0:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    2aa2:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, io);
    2aa6:	462a      	mov	r2, r5
    2aa8:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2aac:	4630      	mov	r0, r6
    2aae:	4b02      	ldr	r3, [pc, #8]	; (2ab8 <startMeasurement+0x24>)
    2ab0:	4798      	blx	r3
}
    2ab2:	bd70      	pop	{r4, r5, r6, pc}
    2ab4:	00002a3d 	.word	0x00002a3d
    2ab8:	00002251 	.word	0x00002251

00002abc <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    2abc:	f010 0f10 	tst.w	r0, #16
    2ac0:	d001      	beq.n	2ac6 <checkStatus+0xa>
    2ac2:	20ff      	movs	r0, #255	; 0xff
    2ac4:	4770      	bx	lr
    2ac6:	2000      	movs	r0, #0
    2ac8:	4770      	bx	lr
	...

00002acc <setGainSel>:
{
    2acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ad0:	b082      	sub	sp, #8
    2ad2:	4607      	mov	r7, r0
    2ad4:	4688      	mov	r8, r1
    2ad6:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2ad8:	2400      	movs	r4, #0
    2ada:	aa02      	add	r2, sp, #8
    2adc:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, io);
    2ae0:	462b      	mov	r3, r5
    2ae2:	4621      	mov	r1, r4
    2ae4:	4e0f      	ldr	r6, [pc, #60]	; (2b24 <setGainSel+0x58>)
    2ae6:	47b0      	blx	r6
    2ae8:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), io);
    2aea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2af2:	b212      	sxth	r2, r2
    2af4:	ea4f 1808 	mov.w	r8, r8, lsl #4
    2af8:	f008 0870 	and.w	r8, r8, #112	; 0x70
    2afc:	ea42 0208 	orr.w	r2, r2, r8
    2b00:	462b      	mov	r3, r5
    2b02:	b292      	uxth	r2, r2
    2b04:	4621      	mov	r1, r4
    2b06:	4638      	mov	r0, r7
    2b08:	4c07      	ldr	r4, [pc, #28]	; (2b28 <setGainSel+0x5c>)
    2b0a:	47a0      	blx	r4
    2b0c:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2b0e:	4630      	mov	r0, r6
    2b10:	4d06      	ldr	r5, [pc, #24]	; (2b2c <setGainSel+0x60>)
    2b12:	47a8      	blx	r5
    2b14:	4604      	mov	r4, r0
    2b16:	4638      	mov	r0, r7
    2b18:	47a8      	blx	r5
    2b1a:	4320      	orrs	r0, r4
}
    2b1c:	b2c0      	uxtb	r0, r0
    2b1e:	b002      	add	sp, #8
    2b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b24:	000023cd 	.word	0x000023cd
    2b28:	000029c5 	.word	0x000029c5
    2b2c:	00002abd 	.word	0x00002abd

00002b30 <setResolution>:
{
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	b083      	sub	sp, #12
    2b34:	4605      	mov	r5, r0
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    2b36:	011b      	lsls	r3, r3, #4
    2b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2b3c:	0092      	lsls	r2, r2, #2
    2b3e:	f002 020c 	and.w	r2, r2, #12
    2b42:	431a      	orrs	r2, r3
    2b44:	f001 0103 	and.w	r1, r1, #3
    2b48:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    2b4c:	aa02      	add	r2, sp, #8
    2b4e:	2300      	movs	r3, #0
    2b50:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, io);
    2b54:	9b08      	ldr	r3, [sp, #32]
    2b56:	2102      	movs	r1, #2
    2b58:	4e0d      	ldr	r6, [pc, #52]	; (2b90 <setResolution+0x60>)
    2b5a:	47b0      	blx	r6
    2b5c:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), io);
    2b5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2b62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2b66:	b212      	sxth	r2, r2
    2b68:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2b6c:	9b08      	ldr	r3, [sp, #32]
    2b6e:	b292      	uxth	r2, r2
    2b70:	2102      	movs	r1, #2
    2b72:	4628      	mov	r0, r5
    2b74:	4c07      	ldr	r4, [pc, #28]	; (2b94 <setResolution+0x64>)
    2b76:	47a0      	blx	r4
    2b78:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2b7a:	4638      	mov	r0, r7
    2b7c:	4d06      	ldr	r5, [pc, #24]	; (2b98 <setResolution+0x68>)
    2b7e:	47a8      	blx	r5
    2b80:	4604      	mov	r4, r0
    2b82:	4630      	mov	r0, r6
    2b84:	47a8      	blx	r5
    2b86:	4320      	orrs	r0, r4
}
    2b88:	b2c0      	uxtb	r0, r0
    2b8a:	b003      	add	sp, #12
    2b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b8e:	bf00      	nop
    2b90:	000023cd 	.word	0x000023cd
    2b94:	000029c5 	.word	0x000029c5
    2b98:	00002abd 	.word	0x00002abd

00002b9c <setOverSampling>:
{
    2b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9e:	b083      	sub	sp, #12
    2ba0:	4607      	mov	r7, r0
    2ba2:	460c      	mov	r4, r1
    2ba4:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2ba6:	aa02      	add	r2, sp, #8
    2ba8:	2300      	movs	r3, #0
    2baa:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, io);
    2bae:	462b      	mov	r3, r5
    2bb0:	2102      	movs	r1, #2
    2bb2:	4e0e      	ldr	r6, [pc, #56]	; (2bec <setOverSampling+0x50>)
    2bb4:	47b0      	blx	r6
    2bb6:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), io);
    2bb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2bbc:	f022 0203 	bic.w	r2, r2, #3
    2bc0:	b212      	sxth	r2, r2
    2bc2:	f004 0403 	and.w	r4, r4, #3
    2bc6:	4322      	orrs	r2, r4
    2bc8:	462b      	mov	r3, r5
    2bca:	b292      	uxth	r2, r2
    2bcc:	2102      	movs	r1, #2
    2bce:	4638      	mov	r0, r7
    2bd0:	4c07      	ldr	r4, [pc, #28]	; (2bf0 <setOverSampling+0x54>)
    2bd2:	47a0      	blx	r4
    2bd4:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2bd6:	4630      	mov	r0, r6
    2bd8:	4d06      	ldr	r5, [pc, #24]	; (2bf4 <setOverSampling+0x58>)
    2bda:	47a8      	blx	r5
    2bdc:	4604      	mov	r4, r0
    2bde:	4638      	mov	r0, r7
    2be0:	47a8      	blx	r5
    2be2:	4320      	orrs	r0, r4
}
    2be4:	b2c0      	uxtb	r0, r0
    2be6:	b003      	add	sp, #12
    2be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bea:	bf00      	nop
    2bec:	000023cd 	.word	0x000023cd
    2bf0:	000029c5 	.word	0x000029c5
    2bf4:	00002abd 	.word	0x00002abd

00002bf8 <setDigitalFiltering>:
{
    2bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfa:	b083      	sub	sp, #12
    2bfc:	4607      	mov	r7, r0
    2bfe:	460c      	mov	r4, r1
    2c00:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2c02:	aa02      	add	r2, sp, #8
    2c04:	2300      	movs	r3, #0
    2c06:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, io);
    2c0a:	462b      	mov	r3, r5
    2c0c:	2102      	movs	r1, #2
    2c0e:	4e0e      	ldr	r6, [pc, #56]	; (2c48 <setDigitalFiltering+0x50>)
    2c10:	47b0      	blx	r6
    2c12:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK),io);
    2c14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c18:	f022 021c 	bic.w	r2, r2, #28
    2c1c:	b212      	sxth	r2, r2
    2c1e:	00a4      	lsls	r4, r4, #2
    2c20:	f004 041c 	and.w	r4, r4, #28
    2c24:	4322      	orrs	r2, r4
    2c26:	462b      	mov	r3, r5
    2c28:	b292      	uxth	r2, r2
    2c2a:	2102      	movs	r1, #2
    2c2c:	4638      	mov	r0, r7
    2c2e:	4c07      	ldr	r4, [pc, #28]	; (2c4c <setDigitalFiltering+0x54>)
    2c30:	47a0      	blx	r4
    2c32:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2c34:	4630      	mov	r0, r6
    2c36:	4d06      	ldr	r5, [pc, #24]	; (2c50 <setDigitalFiltering+0x58>)
    2c38:	47a8      	blx	r5
    2c3a:	4604      	mov	r4, r0
    2c3c:	4638      	mov	r0, r7
    2c3e:	47a8      	blx	r5
    2c40:	4320      	orrs	r0, r4
}
    2c42:	b2c0      	uxtb	r0, r0
    2c44:	b003      	add	sp, #12
    2c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c48:	000023cd 	.word	0x000023cd
    2c4c:	000029c5 	.word	0x000029c5
    2c50:	00002abd 	.word	0x00002abd

00002c54 <setTemperatureCompensation>:
{
    2c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c56:	b083      	sub	sp, #12
    2c58:	4606      	mov	r6, r0
    2c5a:	4614      	mov	r4, r2
  uint8_t tcmp_en = enabled?1:0;
    2c5c:	1c0f      	adds	r7, r1, #0
    2c5e:	bf18      	it	ne
    2c60:	2701      	movne	r7, #1
  uint16_t old_val = 0;
    2c62:	aa02      	add	r2, sp, #8
    2c64:	2300      	movs	r3, #0
    2c66:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, io);
    2c6a:	4623      	mov	r3, r4
    2c6c:	2101      	movs	r1, #1
    2c6e:	4d0d      	ldr	r5, [pc, #52]	; (2ca4 <setTemperatureCompensation+0x50>)
    2c70:	47a8      	blx	r5
    2c72:	4605      	mov	r5, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), io);
    2c74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2c7c:	b212      	sxth	r2, r2
    2c7e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
    2c82:	4623      	mov	r3, r4
    2c84:	b292      	uxth	r2, r2
    2c86:	2101      	movs	r1, #1
    2c88:	4630      	mov	r0, r6
    2c8a:	4c07      	ldr	r4, [pc, #28]	; (2ca8 <setTemperatureCompensation+0x54>)
    2c8c:	47a0      	blx	r4
    2c8e:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2c90:	4628      	mov	r0, r5
    2c92:	4d06      	ldr	r5, [pc, #24]	; (2cac <setTemperatureCompensation+0x58>)
    2c94:	47a8      	blx	r5
    2c96:	4604      	mov	r4, r0
    2c98:	4630      	mov	r0, r6
    2c9a:	47a8      	blx	r5
    2c9c:	4320      	orrs	r0, r4
}
    2c9e:	b2c0      	uxtb	r0, r0
    2ca0:	b003      	add	sp, #12
    2ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ca4:	000023cd 	.word	0x000023cd
    2ca8:	000029c5 	.word	0x000029c5
    2cac:	00002abd 	.word	0x00002abd

00002cb0 <begin>:
{
    2cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cb4:	b082      	sub	sp, #8
    2cb6:	4604      	mov	r4, r0
    2cb8:	4617      	mov	r7, r2
    2cba:	461e      	mov	r6, r3
    2cbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  select_prefix(hall_sensor, order_code_last_digit);
    2cbe:	4b24      	ldr	r3, [pc, #144]	; (2d50 <begin+0xa0>)
    2cc0:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2cc2:	f994 2001 	ldrsb.w	r2, [r4, #1]
    2cc6:	2f00      	cmp	r7, #0
    2cc8:	d13f      	bne.n	2d4a <begin+0x9a>
    2cca:	2300      	movs	r3, #0
    2ccc:	4313      	orrs	r3, r2
    2cce:	2e00      	cmp	r6, #0
    2cd0:	bf18      	it	ne
    2cd2:	f043 0301 	orrne.w	r3, r3, #1
    2cd6:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    2cd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2cdc:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, io);
    2cde:	4629      	mov	r1, r5
    2ce0:	4620      	mov	r0, r4
    2ce2:	4b1c      	ldr	r3, [pc, #112]	; (2d54 <begin+0xa4>)
    2ce4:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, io));
    2ce6:	4629      	mov	r1, r5
    2ce8:	4620      	mov	r0, r4
    2cea:	4b1b      	ldr	r3, [pc, #108]	; (2d58 <begin+0xa8>)
    2cec:	4798      	blx	r3
    2cee:	4b1b      	ldr	r3, [pc, #108]	; (2d5c <begin+0xac>)
    2cf0:	4798      	blx	r3
    2cf2:	4681      	mov	r9, r0
  uint8_t status2 = setGainSel(hall_sensor, 2, io); //7
    2cf4:	462a      	mov	r2, r5
    2cf6:	2102      	movs	r1, #2
    2cf8:	4620      	mov	r0, r4
    2cfa:	4b19      	ldr	r3, [pc, #100]	; (2d60 <begin+0xb0>)
    2cfc:	4798      	blx	r3
    2cfe:	4682      	mov	sl, r0
  uint8_t status3 = setResolution(hall_sensor, 0, 0, 0, io); //0,0,0
    2d00:	9500      	str	r5, [sp, #0]
    2d02:	2300      	movs	r3, #0
    2d04:	461a      	mov	r2, r3
    2d06:	4619      	mov	r1, r3
    2d08:	4620      	mov	r0, r4
    2d0a:	4e16      	ldr	r6, [pc, #88]	; (2d64 <begin+0xb4>)
    2d0c:	47b0      	blx	r6
    2d0e:	4680      	mov	r8, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, io); //3
    2d10:	462a      	mov	r2, r5
    2d12:	2101      	movs	r1, #1
    2d14:	4620      	mov	r0, r4
    2d16:	4b14      	ldr	r3, [pc, #80]	; (2d68 <begin+0xb8>)
    2d18:	4798      	blx	r3
    2d1a:	4607      	mov	r7, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, io); //7
    2d1c:	462a      	mov	r2, r5
    2d1e:	2102      	movs	r1, #2
    2d20:	4620      	mov	r0, r4
    2d22:	4b12      	ldr	r3, [pc, #72]	; (2d6c <begin+0xbc>)
    2d24:	4798      	blx	r3
    2d26:	4606      	mov	r6, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, io);//0
    2d28:	462a      	mov	r2, r5
    2d2a:	2100      	movs	r1, #0
    2d2c:	4620      	mov	r0, r4
    2d2e:	4b10      	ldr	r3, [pc, #64]	; (2d70 <begin+0xc0>)
    2d30:	4798      	blx	r3
  return status1 | status2 | status3 | status4 | status5 | status6;
    2d32:	ea49 090a 	orr.w	r9, r9, sl
    2d36:	ea48 0809 	orr.w	r8, r8, r9
    2d3a:	ea47 0708 	orr.w	r7, r7, r8
    2d3e:	433e      	orrs	r6, r7
    2d40:	4330      	orrs	r0, r6
}
    2d42:	b2c0      	uxtb	r0, r0
    2d44:	b002      	add	sp, #8
    2d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2d4a:	2302      	movs	r3, #2
    2d4c:	e7be      	b.n	2ccc <begin+0x1c>
    2d4e:	bf00      	nop
    2d50:	000021e1 	.word	0x000021e1
    2d54:	0000245d 	.word	0x0000245d
    2d58:	00002431 	.word	0x00002431
    2d5c:	00002abd 	.word	0x00002abd
    2d60:	00002acd 	.word	0x00002acd
    2d64:	00002b31 	.word	0x00002b31
    2d68:	00002b9d 	.word	0x00002b9d
    2d6c:	00002bf9 	.word	0x00002bf9
    2d70:	00002c55 	.word	0x00002c55

00002d74 <setExtTrig>:
{
    2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d76:	b083      	sub	sp, #12
    2d78:	4607      	mov	r7, r0
    2d7a:	460c      	mov	r4, r1
    2d7c:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2d7e:	aa02      	add	r2, sp, #8
    2d80:	2300      	movs	r3, #0
    2d82:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, io);
    2d86:	462b      	mov	r3, r5
    2d88:	2101      	movs	r1, #1
    2d8a:	4e0f      	ldr	r6, [pc, #60]	; (2dc8 <setExtTrig+0x54>)
    2d8c:	47b0      	blx	r6
    2d8e:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), io);
    2d90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    2d98:	b213      	sxth	r3, r2
    2d9a:	b2a2      	uxth	r2, r4
    2d9c:	02d2      	lsls	r2, r2, #11
    2d9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    2da2:	431a      	orrs	r2, r3
    2da4:	462b      	mov	r3, r5
    2da6:	b292      	uxth	r2, r2
    2da8:	2101      	movs	r1, #1
    2daa:	4638      	mov	r0, r7
    2dac:	4c07      	ldr	r4, [pc, #28]	; (2dcc <setExtTrig+0x58>)
    2dae:	47a0      	blx	r4
    2db0:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2db2:	4630      	mov	r0, r6
    2db4:	4d06      	ldr	r5, [pc, #24]	; (2dd0 <setExtTrig+0x5c>)
    2db6:	47a8      	blx	r5
    2db8:	4604      	mov	r4, r0
    2dba:	4638      	mov	r0, r7
    2dbc:	47a8      	blx	r5
    2dbe:	4320      	orrs	r0, r4
}
    2dc0:	b2c0      	uxtb	r0, r0
    2dc2:	b003      	add	sp, #12
    2dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dc6:	bf00      	nop
    2dc8:	000023cd 	.word	0x000023cd
    2dcc:	000029c5 	.word	0x000029c5
    2dd0:	00002abd 	.word	0x00002abd

00002dd4 <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include <math.h>


void triggerInitialize(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2dd4:	b538      	push	{r3, r4, r5, lr}
    2dd6:	4605      	mov	r5, r0
    2dd8:	460c      	mov	r4, r1
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,io);
    2dda:	460a      	mov	r2, r1
    2ddc:	2101      	movs	r1, #1
    2dde:	4b04      	ldr	r3, [pc, #16]	; (2df0 <triggerInitialize+0x1c>)
    2de0:	4798      	blx	r3
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, io);
    2de2:	4622      	mov	r2, r4
    2de4:	210e      	movs	r1, #14
    2de6:	4628      	mov	r0, r5
    2de8:	4b02      	ldr	r3, [pc, #8]	; (2df4 <triggerInitialize+0x20>)
    2dea:	4798      	blx	r3
    2dec:	bd38      	pop	{r3, r4, r5, pc}
    2dee:	bf00      	nop
    2df0:	00002d75 	.word	0x00002d75
    2df4:	00002a95 	.word	0x00002a95

00002df8 <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    2df8:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2dfa:	4c03      	ldr	r4, [pc, #12]	; (2e08 <triggerSensor+0x10>)
    2dfc:	2540      	movs	r5, #64	; 0x40
    2dfe:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    2e00:	4b02      	ldr	r3, [pc, #8]	; (2e0c <triggerSensor+0x14>)
    2e02:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e04:	6165      	str	r5, [r4, #20]
    2e06:	bd38      	pop	{r3, r4, r5, pc}
    2e08:	41008000 	.word	0x41008000
    2e0c:	000009a5 	.word	0x000009a5

00002e10 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2e10:	b538      	push	{r3, r4, r5, lr}
    2e12:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , io);
    2e14:	460a      	mov	r2, r1
    2e16:	210e      	movs	r1, #14
    2e18:	4b04      	ldr	r3, [pc, #16]	; (2e2c <triggerReadout+0x1c>)
    2e1a:	4798      	blx	r3
    2e1c:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    2e1e:	4628      	mov	r0, r5
    2e20:	4b03      	ldr	r3, [pc, #12]	; (2e30 <triggerReadout+0x20>)
    2e22:	4798      	blx	r3
	return checkStatus(status);
    2e24:	4620      	mov	r0, r4
    2e26:	4b03      	ldr	r3, [pc, #12]	; (2e34 <triggerReadout+0x24>)
    2e28:	4798      	blx	r3
};
    2e2a:	bd38      	pop	{r3, r4, r5, pc}
    2e2c:	0000246d 	.word	0x0000246d
    2e30:	00002589 	.word	0x00002589
    2e34:	00002abd 	.word	0x00002abd

00002e38 <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct io_descriptor *io)
{
    2e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e3c:	b083      	sub	sp, #12
    2e3e:	4688      	mov	r8, r1
    2e40:	4617      	mov	r7, r2
    2e42:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,io);
    2e44:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e46:	4c25      	ldr	r4, [pc, #148]	; (2edc <triggerReadoutArray+0xa4>)
    2e48:	47a0      	blx	r4
    2e4a:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,io);
    2e4c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e4e:	4640      	mov	r0, r8
    2e50:	47a0      	blx	r4
    2e52:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,io);
    2e54:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e56:	4638      	mov	r0, r7
    2e58:	47a0      	blx	r4
    2e5a:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,io);
    2e5c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e5e:	4630      	mov	r0, r6
    2e60:	47a0      	blx	r4
    2e62:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,io);
    2e64:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e66:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e68:	47a0      	blx	r4
    2e6a:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,io);
    2e6c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e6e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e70:	47a0      	blx	r4
    2e72:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,io);
    2e74:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e76:	980e      	ldr	r0, [sp, #56]	; 0x38
    2e78:	47a0      	blx	r4
    2e7a:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,io);
    2e7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2e80:	47a0      	blx	r4
    2e82:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,io);
    2e84:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e86:	9810      	ldr	r0, [sp, #64]	; 0x40
    2e88:	47a0      	blx	r4
    2e8a:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    2e8c:	4628      	mov	r0, r5
    2e8e:	4d14      	ldr	r5, [pc, #80]	; (2ee0 <triggerReadoutArray+0xa8>)
    2e90:	47a8      	blx	r5
    2e92:	4604      	mov	r4, r0
    2e94:	4658      	mov	r0, fp
    2e96:	47a8      	blx	r5
    2e98:	4304      	orrs	r4, r0
    2e9a:	b2e4      	uxtb	r4, r4
    2e9c:	4650      	mov	r0, sl
    2e9e:	47a8      	blx	r5
    2ea0:	4304      	orrs	r4, r0
    2ea2:	b2e4      	uxtb	r4, r4
    2ea4:	4648      	mov	r0, r9
    2ea6:	47a8      	blx	r5
    2ea8:	4304      	orrs	r4, r0
    2eaa:	b2e4      	uxtb	r4, r4
    2eac:	4640      	mov	r0, r8
    2eae:	47a8      	blx	r5
    2eb0:	4304      	orrs	r4, r0
    2eb2:	b2e4      	uxtb	r4, r4
    2eb4:	4638      	mov	r0, r7
    2eb6:	47a8      	blx	r5
    2eb8:	4304      	orrs	r4, r0
    2eba:	b2e4      	uxtb	r4, r4
    2ebc:	4630      	mov	r0, r6
    2ebe:	47a8      	blx	r5
    2ec0:	4304      	orrs	r4, r0
    2ec2:	b2e4      	uxtb	r4, r4
    2ec4:	9800      	ldr	r0, [sp, #0]
    2ec6:	47a8      	blx	r5
    2ec8:	4304      	orrs	r4, r0
    2eca:	b2e4      	uxtb	r4, r4
    2ecc:	9801      	ldr	r0, [sp, #4]
    2ece:	47a8      	blx	r5
    2ed0:	4320      	orrs	r0, r4
};
    2ed2:	b2c0      	uxtb	r0, r0
    2ed4:	b003      	add	sp, #12
    2ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2eda:	bf00      	nop
    2edc:	00002e11 	.word	0x00002e11
    2ee0:	00002abd 	.word	0x00002abd

00002ee4 <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
struct io_descriptor *io)
{
    2ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ee8:	b085      	sub	sp, #20
    2eea:	4606      	mov	r6, r0
    2eec:	468b      	mov	fp, r1
    2eee:	4692      	mov	sl, r2
    2ef0:	9303      	str	r3, [sp, #12]
    2ef2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	//bottom row left
	initialize(hall_sensor_1);
    2ef4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 3010 <SensorArray_Init+0x12c>
    2ef8:	47c8      	blx	r9
	begin(hall_sensor_1,1,0,0,false, io);
    2efa:	9501      	str	r5, [sp, #4]
    2efc:	2400      	movs	r4, #0
    2efe:	9400      	str	r4, [sp, #0]
    2f00:	4623      	mov	r3, r4
    2f02:	4622      	mov	r2, r4
    2f04:	2101      	movs	r1, #1
    2f06:	4630      	mov	r0, r6
    2f08:	f8df 8108 	ldr.w	r8, [pc, #264]	; 3014 <SensorArray_Init+0x130>
    2f0c:	47c0      	blx	r8
	triggerInitialize(hall_sensor_1, io);
    2f0e:	4629      	mov	r1, r5
    2f10:	4630      	mov	r0, r6
    2f12:	4f3d      	ldr	r7, [pc, #244]	; (3008 <SensorArray_Init+0x124>)
    2f14:	47b8      	blx	r7
	delay_ms(1);
    2f16:	2001      	movs	r0, #1
    2f18:	4e3c      	ldr	r6, [pc, #240]	; (300c <SensorArray_Init+0x128>)
    2f1a:	47b0      	blx	r6
	
	//bottom row middle
	initialize(hall_sensor_2);
    2f1c:	4658      	mov	r0, fp
    2f1e:	47c8      	blx	r9
	begin(hall_sensor_2,1,0,1,false, io);
    2f20:	9501      	str	r5, [sp, #4]
    2f22:	9400      	str	r4, [sp, #0]
    2f24:	2301      	movs	r3, #1
    2f26:	4622      	mov	r2, r4
    2f28:	4619      	mov	r1, r3
    2f2a:	4658      	mov	r0, fp
    2f2c:	47c0      	blx	r8
	triggerInitialize(hall_sensor_2, io);
    2f2e:	4629      	mov	r1, r5
    2f30:	4658      	mov	r0, fp
    2f32:	47b8      	blx	r7
	delay_ms(1);
    2f34:	2001      	movs	r0, #1
    2f36:	47b0      	blx	r6
	
	//bottom row right
	initialize(hall_sensor_3);
    2f38:	4650      	mov	r0, sl
    2f3a:	47c8      	blx	r9
	begin(hall_sensor_3,1,1,0,false, io);
    2f3c:	9501      	str	r5, [sp, #4]
    2f3e:	9400      	str	r4, [sp, #0]
    2f40:	4623      	mov	r3, r4
    2f42:	2201      	movs	r2, #1
    2f44:	4611      	mov	r1, r2
    2f46:	4650      	mov	r0, sl
    2f48:	47c0      	blx	r8
	triggerInitialize(hall_sensor_3, io);
    2f4a:	4629      	mov	r1, r5
    2f4c:	4650      	mov	r0, sl
    2f4e:	47b8      	blx	r7
	delay_ms(1);
    2f50:	2001      	movs	r0, #1
    2f52:	47b0      	blx	r6
	
	//middle row left
	initialize(hall_sensor_4);
    2f54:	f8dd a00c 	ldr.w	sl, [sp, #12]
    2f58:	4650      	mov	r0, sl
    2f5a:	47c8      	blx	r9
	begin(hall_sensor_4,2,0,0,false, io);
    2f5c:	9501      	str	r5, [sp, #4]
    2f5e:	9400      	str	r4, [sp, #0]
    2f60:	4623      	mov	r3, r4
    2f62:	4622      	mov	r2, r4
    2f64:	2102      	movs	r1, #2
    2f66:	4650      	mov	r0, sl
    2f68:	47c0      	blx	r8
	triggerInitialize(hall_sensor_4, io);
    2f6a:	4629      	mov	r1, r5
    2f6c:	4650      	mov	r0, sl
    2f6e:	47b8      	blx	r7
	delay_ms(1);
    2f70:	2001      	movs	r0, #1
    2f72:	47b0      	blx	r6
	
	//middle row middle
	initialize(hall_sensor_5);
    2f74:	980e      	ldr	r0, [sp, #56]	; 0x38
    2f76:	47c8      	blx	r9
	begin(hall_sensor_5,2,0,1,false, io);
    2f78:	9501      	str	r5, [sp, #4]
    2f7a:	9400      	str	r4, [sp, #0]
    2f7c:	2301      	movs	r3, #1
    2f7e:	4622      	mov	r2, r4
    2f80:	2102      	movs	r1, #2
    2f82:	980e      	ldr	r0, [sp, #56]	; 0x38
    2f84:	47c0      	blx	r8
	triggerInitialize(hall_sensor_5, io);
    2f86:	4629      	mov	r1, r5
    2f88:	980e      	ldr	r0, [sp, #56]	; 0x38
    2f8a:	47b8      	blx	r7
	delay_ms(1);
    2f8c:	2001      	movs	r0, #1
    2f8e:	47b0      	blx	r6
	
	//middle row right
	initialize(hall_sensor_6);
    2f90:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2f92:	47c8      	blx	r9
	begin(hall_sensor_6,2,1,0,false, io);
    2f94:	9501      	str	r5, [sp, #4]
    2f96:	9400      	str	r4, [sp, #0]
    2f98:	4623      	mov	r3, r4
    2f9a:	2201      	movs	r2, #1
    2f9c:	2102      	movs	r1, #2
    2f9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2fa0:	47c0      	blx	r8
	triggerInitialize(hall_sensor_6, io);
    2fa2:	4629      	mov	r1, r5
    2fa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2fa6:	47b8      	blx	r7
	delay_ms(1);
    2fa8:	2001      	movs	r0, #1
    2faa:	47b0      	blx	r6
	
	//top row left
	initialize(hall_sensor_7);
    2fac:	9810      	ldr	r0, [sp, #64]	; 0x40
    2fae:	47c8      	blx	r9
	begin(hall_sensor_7,3,0,0,false, io);
    2fb0:	9501      	str	r5, [sp, #4]
    2fb2:	9400      	str	r4, [sp, #0]
    2fb4:	4623      	mov	r3, r4
    2fb6:	4622      	mov	r2, r4
    2fb8:	2103      	movs	r1, #3
    2fba:	9810      	ldr	r0, [sp, #64]	; 0x40
    2fbc:	47c0      	blx	r8
	triggerInitialize(hall_sensor_7, io);
    2fbe:	4629      	mov	r1, r5
    2fc0:	9810      	ldr	r0, [sp, #64]	; 0x40
    2fc2:	47b8      	blx	r7
	delay_ms(1);
    2fc4:	2001      	movs	r0, #1
    2fc6:	47b0      	blx	r6
	
	//top row middle
	initialize(hall_sensor_8);
    2fc8:	9811      	ldr	r0, [sp, #68]	; 0x44
    2fca:	47c8      	blx	r9
	begin(hall_sensor_8,3,0,1,false, io);
    2fcc:	9501      	str	r5, [sp, #4]
    2fce:	9400      	str	r4, [sp, #0]
    2fd0:	2301      	movs	r3, #1
    2fd2:	4622      	mov	r2, r4
    2fd4:	2103      	movs	r1, #3
    2fd6:	9811      	ldr	r0, [sp, #68]	; 0x44
    2fd8:	47c0      	blx	r8
	triggerInitialize(hall_sensor_8, io);
    2fda:	4629      	mov	r1, r5
    2fdc:	9811      	ldr	r0, [sp, #68]	; 0x44
    2fde:	47b8      	blx	r7
	delay_ms(1);
    2fe0:	2001      	movs	r0, #1
    2fe2:	47b0      	blx	r6
	
	//top row right
	initialize(hall_sensor_9);
    2fe4:	9812      	ldr	r0, [sp, #72]	; 0x48
    2fe6:	47c8      	blx	r9
	begin(hall_sensor_9,3,1,0,false, io);
    2fe8:	9501      	str	r5, [sp, #4]
    2fea:	9400      	str	r4, [sp, #0]
    2fec:	4623      	mov	r3, r4
    2fee:	2201      	movs	r2, #1
    2ff0:	2103      	movs	r1, #3
    2ff2:	9812      	ldr	r0, [sp, #72]	; 0x48
    2ff4:	47c0      	blx	r8
	triggerInitialize(hall_sensor_9, io);
    2ff6:	4629      	mov	r1, r5
    2ff8:	9812      	ldr	r0, [sp, #72]	; 0x48
    2ffa:	47b8      	blx	r7
	delay_ms(1);
    2ffc:	2001      	movs	r0, #1
    2ffe:	47b0      	blx	r6
}
    3000:	b005      	add	sp, #20
    3002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3006:	bf00      	nop
    3008:	00002dd5 	.word	0x00002dd5
    300c:	000009c5 	.word	0x000009c5
    3010:	00002329 	.word	0x00002329
    3014:	00002cb1 	.word	0x00002cb1

00003018 <update_struct_values>:


void update_struct_values(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    3018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    301a:	4604      	mov	r4, r0
		//allocate every data to corresponding struct value
		sensor_row->b_x_top = hall_sensor_top->data.x;
    301c:	edd1 7a13 	vldr	s15, [r1, #76]	; 0x4c
    3020:	edc0 7a00 	vstr	s15, [r0]
		sensor_row->b_y_top = hall_sensor_top->data.y;
    3024:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
    3028:	ed80 7a03 	vstr	s14, [r0, #12]
		sensor_row->b_z_top = hall_sensor_top->data.z;
    302c:	6d49      	ldr	r1, [r1, #84]	; 0x54
    302e:	6181      	str	r1, [r0, #24]
		
		sensor_row->b_x_middle = hall_sensor_middle->data.x;
    3030:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    3032:	6041      	str	r1, [r0, #4]
		sensor_row->b_y_middle = hall_sensor_middle->data.y;
    3034:	6d11      	ldr	r1, [r2, #80]	; 0x50
    3036:	6101      	str	r1, [r0, #16]
		sensor_row->b_z_middle = hall_sensor_middle->data.z;
    3038:	6d52      	ldr	r2, [r2, #84]	; 0x54
    303a:	61c2      	str	r2, [r0, #28]
		
		sensor_row->b_x_bottom = hall_sensor_bottom->data.x;
    303c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    303e:	6082      	str	r2, [r0, #8]
		sensor_row->b_y_bottom = hall_sensor_bottom->data.y;
    3040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    3042:	6142      	str	r2, [r0, #20]
		sensor_row->b_z_bottom = hall_sensor_bottom->data.z;
    3044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3046:	6203      	str	r3, [r0, #32]
		
		//Combine X and Y Axis Into Br
		sensor_row->b_r_top = (sensor_row->b_x_top*sensor_row->b_x_top) + (sensor_row->b_y_top*sensor_row->b_y_top);
    3048:	ee67 7aa7 	vmul.f32	s15, s15, s15
    304c:	ee27 7a07 	vmul.f32	s14, s14, s14
    3050:	ee77 7a87 	vadd.f32	s15, s15, s14
    3054:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
		sensor_row->b_r_top = sqrt(sensor_row->b_r_top);
    3058:	4f16      	ldr	r7, [pc, #88]	; (30b4 <update_struct_values+0x9c>)
    305a:	ee17 0a90 	vmov	r0, s15
    305e:	47b8      	blx	r7
    3060:	4e15      	ldr	r6, [pc, #84]	; (30b8 <update_struct_values+0xa0>)
    3062:	47b0      	blx	r6
    3064:	4d15      	ldr	r5, [pc, #84]	; (30bc <update_struct_values+0xa4>)
    3066:	47a8      	blx	r5
    3068:	6260      	str	r0, [r4, #36]	; 0x24

		sensor_row->b_r_middle = (sensor_row->b_x_middle*sensor_row->b_x_middle) + (sensor_row->b_y_middle*sensor_row->b_y_middle);
    306a:	edd4 7a01 	vldr	s15, [r4, #4]
    306e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3072:	ed94 7a04 	vldr	s14, [r4, #16]
    3076:	ee27 7a07 	vmul.f32	s14, s14, s14
    307a:	ee77 7a87 	vadd.f32	s15, s15, s14
    307e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		sensor_row->b_r_middle = sqrt(sensor_row->b_r_middle);
    3082:	ee17 0a90 	vmov	r0, s15
    3086:	47b8      	blx	r7
    3088:	47b0      	blx	r6
    308a:	47a8      	blx	r5
    308c:	62a0      	str	r0, [r4, #40]	; 0x28
		
		sensor_row->b_r_bottom = (sensor_row->b_x_bottom*sensor_row->b_x_bottom) + (sensor_row->b_y_bottom *sensor_row->b_y_bottom );
    308e:	edd4 7a02 	vldr	s15, [r4, #8]
    3092:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3096:	ed94 7a05 	vldr	s14, [r4, #20]
    309a:	ee27 7a07 	vmul.f32	s14, s14, s14
    309e:	ee77 7a87 	vadd.f32	s15, s15, s14
    30a2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
    30a6:	ee17 0a90 	vmov	r0, s15
    30aa:	47b8      	blx	r7
    30ac:	47b0      	blx	r6
    30ae:	47a8      	blx	r5
    30b0:	62e0      	str	r0, [r4, #44]	; 0x2c
    30b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30b4:	0000421d 	.word	0x0000421d
    30b8:	00003d1d 	.word	0x00003d1d
    30bc:	00004825 	.word	0x00004825

000030c0 <mag_to_force>:
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
		*/
}


void mag_to_force(struct sensorRow_Values *sensor_row){
    30c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30c4:	ed2d 8b06 	vpush	{d8-d10}
    30c8:	b089      	sub	sp, #36	; 0x24
    30ca:	4682      	mov	sl, r0
	
	sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    30cc:	edd0 8a00 	vldr	s17, [r0]
    30d0:	4dcb      	ldr	r5, [pc, #812]	; (3400 <mag_to_force+0x340>)
    30d2:	ee18 0a90 	vmov	r0, s17
    30d6:	47a8      	blx	r5
    30d8:	4cca      	ldr	r4, [pc, #808]	; (3404 <mag_to_force+0x344>)
    30da:	a39d      	add	r3, pc, #628	; (adr r3, 3350 <mag_to_force+0x290>)
    30dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    30e0:	47a0      	blx	r4
    30e2:	4ec9      	ldr	r6, [pc, #804]	; (3408 <mag_to_force+0x348>)
    30e4:	4602      	mov	r2, r0
    30e6:	460b      	mov	r3, r1
    30e8:	a19b      	add	r1, pc, #620	; (adr r1, 3358 <mag_to_force+0x298>)
    30ea:	e9d1 0100 	ldrd	r0, r1, [r1]
    30ee:	47b0      	blx	r6
    30f0:	4680      	mov	r8, r0
    30f2:	4689      	mov	r9, r1
    30f4:	ed9a 8a06 	vldr	s16, [sl, #24]
    30f8:	ee18 0a10 	vmov	r0, s16
    30fc:	47a8      	blx	r5
    30fe:	e9cd 0100 	strd	r0, r1, [sp]
    3102:	a397      	add	r3, pc, #604	; (adr r3, 3360 <mag_to_force+0x2a0>)
    3104:	e9d3 2300 	ldrd	r2, r3, [r3]
    3108:	47a0      	blx	r4
    310a:	4fc0      	ldr	r7, [pc, #768]	; (340c <mag_to_force+0x34c>)
    310c:	4602      	mov	r2, r0
    310e:	460b      	mov	r3, r1
    3110:	4640      	mov	r0, r8
    3112:	4649      	mov	r1, r9
    3114:	47b8      	blx	r7
    3116:	4680      	mov	r8, r0
    3118:	4689      	mov	r9, r1
    311a:	ee28 9aa8 	vmul.f32	s18, s17, s17
    311e:	ee19 0a10 	vmov	r0, s18
    3122:	47a8      	blx	r5
    3124:	a390      	add	r3, pc, #576	; (adr r3, 3368 <mag_to_force+0x2a8>)
    3126:	e9d3 2300 	ldrd	r2, r3, [r3]
    312a:	47a0      	blx	r4
    312c:	4602      	mov	r2, r0
    312e:	460b      	mov	r3, r1
    3130:	4640      	mov	r0, r8
    3132:	4649      	mov	r1, r9
    3134:	47b8      	blx	r7
    3136:	4680      	mov	r8, r0
    3138:	4689      	mov	r9, r1
    313a:	ee68 7a88 	vmul.f32	s15, s17, s16
    313e:	ee17 0a90 	vmov	r0, s15
    3142:	47a8      	blx	r5
    3144:	a38a      	add	r3, pc, #552	; (adr r3, 3370 <mag_to_force+0x2b0>)
    3146:	e9d3 2300 	ldrd	r2, r3, [r3]
    314a:	47a0      	blx	r4
    314c:	4602      	mov	r2, r0
    314e:	460b      	mov	r3, r1
    3150:	4640      	mov	r0, r8
    3152:	4649      	mov	r1, r9
    3154:	47b0      	blx	r6
    3156:	4680      	mov	r8, r0
    3158:	4689      	mov	r9, r1
    315a:	ee28 aa08 	vmul.f32	s20, s16, s16
    315e:	ee1a 0a10 	vmov	r0, s20
    3162:	47a8      	blx	r5
    3164:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3168:	a383      	add	r3, pc, #524	; (adr r3, 3378 <mag_to_force+0x2b8>)
    316a:	e9d3 2300 	ldrd	r2, r3, [r3]
    316e:	47a0      	blx	r4
    3170:	4602      	mov	r2, r0
    3172:	460b      	mov	r3, r1
    3174:	4640      	mov	r0, r8
    3176:	4649      	mov	r1, r9
    3178:	47b8      	blx	r7
    317a:	4680      	mov	r8, r0
    317c:	4689      	mov	r9, r1
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    317e:	ee68 7a09 	vmul.f32	s15, s16, s18
    3182:	ee17 0a90 	vmov	r0, s15
    3186:	47a8      	blx	r5
    3188:	a37d      	add	r3, pc, #500	; (adr r3, 3380 <mag_to_force+0x2c0>)
    318a:	e9d3 2300 	ldrd	r2, r3, [r3]
    318e:	47a0      	blx	r4
    3190:	4602      	mov	r2, r0
    3192:	460b      	mov	r3, r1
    3194:	4640      	mov	r0, r8
    3196:	4649      	mov	r1, r9
    3198:	47b8      	blx	r7
    319a:	4680      	mov	r8, r0
    319c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    319e:	ee68 7a8a 	vmul.f32	s15, s17, s20
    31a2:	ee17 0a90 	vmov	r0, s15
    31a6:	47a8      	blx	r5
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    31a8:	a377      	add	r3, pc, #476	; (adr r3, 3388 <mag_to_force+0x2c8>)
    31aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    31ae:	47a0      	blx	r4
    31b0:	4602      	mov	r2, r0
    31b2:	460b      	mov	r3, r1
    31b4:	4640      	mov	r0, r8
    31b6:	4649      	mov	r1, r9
    31b8:	47b0      	blx	r6
    31ba:	4680      	mov	r8, r0
    31bc:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    31be:	ee68 7a0a 	vmul.f32	s15, s16, s20
    31c2:	ee17 0a90 	vmov	r0, s15
    31c6:	47a8      	blx	r5
    31c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    31cc:	a370      	add	r3, pc, #448	; (adr r3, 3390 <mag_to_force+0x2d0>)
    31ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    31d2:	47a0      	blx	r4
    31d4:	4602      	mov	r2, r0
    31d6:	460b      	mov	r3, r1
    31d8:	4640      	mov	r0, r8
    31da:	4649      	mov	r1, r9
    31dc:	47b8      	blx	r7
    31de:	f8df b230 	ldr.w	fp, [pc, #560]	; 3410 <mag_to_force+0x350>
    31e2:	47d8      	blx	fp
    31e4:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    31e8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    31ec:	ed9a 9a03 	vldr	s18, [sl, #12]
    31f0:	ee19 0a10 	vmov	r0, s18
    31f4:	47a8      	blx	r5
    31f6:	a368      	add	r3, pc, #416	; (adr r3, 3398 <mag_to_force+0x2d8>)
    31f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    31fc:	47a0      	blx	r4
    31fe:	4602      	mov	r2, r0
    3200:	460b      	mov	r3, r1
    3202:	a167      	add	r1, pc, #412	; (adr r1, 33a0 <mag_to_force+0x2e0>)
    3204:	e9d1 0100 	ldrd	r0, r1, [r1]
    3208:	47b0      	blx	r6
    320a:	4680      	mov	r8, r0
    320c:	4689      	mov	r9, r1
    320e:	a366      	add	r3, pc, #408	; (adr r3, 33a8 <mag_to_force+0x2e8>)
    3210:	e9d3 2300 	ldrd	r2, r3, [r3]
    3214:	e9dd 0100 	ldrd	r0, r1, [sp]
    3218:	47a0      	blx	r4
    321a:	4602      	mov	r2, r0
    321c:	460b      	mov	r3, r1
    321e:	4640      	mov	r0, r8
    3220:	4649      	mov	r1, r9
    3222:	47b8      	blx	r7
    3224:	4680      	mov	r8, r0
    3226:	4689      	mov	r9, r1
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3228:	ee69 9a09 	vmul.f32	s19, s18, s18
    322c:	ee19 0a90 	vmov	r0, s19
    3230:	47a8      	blx	r5
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3232:	a35f      	add	r3, pc, #380	; (adr r3, 33b0 <mag_to_force+0x2f0>)
    3234:	e9d3 2300 	ldrd	r2, r3, [r3]
    3238:	47a0      	blx	r4
    323a:	4602      	mov	r2, r0
    323c:	460b      	mov	r3, r1
    323e:	4640      	mov	r0, r8
    3240:	4649      	mov	r1, r9
    3242:	47b8      	blx	r7
    3244:	4680      	mov	r8, r0
    3246:	4689      	mov	r9, r1
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3248:	ee68 7a09 	vmul.f32	s15, s16, s18
    324c:	ee17 0a90 	vmov	r0, s15
    3250:	47a8      	blx	r5
    3252:	a359      	add	r3, pc, #356	; (adr r3, 33b8 <mag_to_force+0x2f8>)
    3254:	e9d3 2300 	ldrd	r2, r3, [r3]
    3258:	47a0      	blx	r4
    325a:	4602      	mov	r2, r0
    325c:	460b      	mov	r3, r1
    325e:	4640      	mov	r0, r8
    3260:	4649      	mov	r1, r9
    3262:	47b0      	blx	r6
    3264:	4680      	mov	r8, r0
    3266:	4689      	mov	r9, r1
    3268:	a355      	add	r3, pc, #340	; (adr r3, 33c0 <mag_to_force+0x300>)
    326a:	e9d3 2300 	ldrd	r2, r3, [r3]
    326e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3272:	47a0      	blx	r4
    3274:	4602      	mov	r2, r0
    3276:	460b      	mov	r3, r1
    3278:	4640      	mov	r0, r8
    327a:	4649      	mov	r1, r9
    327c:	47b8      	blx	r7
    327e:	4680      	mov	r8, r0
    3280:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3282:	ee68 7a29 	vmul.f32	s15, s16, s19
    3286:	ee17 0a90 	vmov	r0, s15
    328a:	47a8      	blx	r5
    328c:	a34e      	add	r3, pc, #312	; (adr r3, 33c8 <mag_to_force+0x308>)
    328e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3292:	47a0      	blx	r4
    3294:	4602      	mov	r2, r0
    3296:	460b      	mov	r3, r1
    3298:	4640      	mov	r0, r8
    329a:	4649      	mov	r1, r9
    329c:	47b8      	blx	r7
    329e:	4680      	mov	r8, r0
    32a0:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    32a2:	ee6a 7a09 	vmul.f32	s15, s20, s18
    32a6:	ee17 0a90 	vmov	r0, s15
    32aa:	47a8      	blx	r5
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    32ac:	a348      	add	r3, pc, #288	; (adr r3, 33d0 <mag_to_force+0x310>)
    32ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    32b2:	47a0      	blx	r4
    32b4:	4602      	mov	r2, r0
    32b6:	460b      	mov	r3, r1
    32b8:	4640      	mov	r0, r8
    32ba:	4649      	mov	r1, r9
    32bc:	47b0      	blx	r6
    32be:	4680      	mov	r8, r0
    32c0:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    32c2:	a345      	add	r3, pc, #276	; (adr r3, 33d8 <mag_to_force+0x318>)
    32c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    32cc:	47a0      	blx	r4
    32ce:	4602      	mov	r2, r0
    32d0:	460b      	mov	r3, r1
    32d2:	4640      	mov	r0, r8
    32d4:	4649      	mov	r1, r9
    32d6:	47b8      	blx	r7
    32d8:	47d8      	blx	fp
    32da:	ee09 0a10 	vmov	s18, r0
	sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32de:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32e2:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    32e6:	ee19 0a90 	vmov	r0, s19
    32ea:	47a8      	blx	r5
    32ec:	a33c      	add	r3, pc, #240	; (adr r3, 33e0 <mag_to_force+0x320>)
    32ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    32f2:	47a0      	blx	r4
    32f4:	4602      	mov	r2, r0
    32f6:	460b      	mov	r3, r1
    32f8:	a13b      	add	r1, pc, #236	; (adr r1, 33e8 <mag_to_force+0x328>)
    32fa:	e9d1 0100 	ldrd	r0, r1, [r1]
    32fe:	47b0      	blx	r6
    3300:	4680      	mov	r8, r0
    3302:	4689      	mov	r9, r1
    3304:	a33a      	add	r3, pc, #232	; (adr r3, 33f0 <mag_to_force+0x330>)
    3306:	e9d3 2300 	ldrd	r2, r3, [r3]
    330a:	e9dd 0100 	ldrd	r0, r1, [sp]
    330e:	47a0      	blx	r4
    3310:	4602      	mov	r2, r0
    3312:	460b      	mov	r3, r1
    3314:	4640      	mov	r0, r8
    3316:	4649      	mov	r1, r9
    3318:	47b8      	blx	r7
    331a:	4680      	mov	r8, r0
    331c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    331e:	ee69 aaa9 	vmul.f32	s21, s19, s19
    3322:	ee1a 0a90 	vmov	r0, s21
    3326:	47a8      	blx	r5
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3328:	a333      	add	r3, pc, #204	; (adr r3, 33f8 <mag_to_force+0x338>)
    332a:	e9d3 2300 	ldrd	r2, r3, [r3]
    332e:	47a0      	blx	r4
    3330:	4602      	mov	r2, r0
    3332:	460b      	mov	r3, r1
    3334:	4640      	mov	r0, r8
    3336:	4649      	mov	r1, r9
    3338:	47b8      	blx	r7
    333a:	4680      	mov	r8, r0
    333c:	4689      	mov	r9, r1
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    333e:	ee68 7a29 	vmul.f32	s15, s16, s19
    3342:	ee17 0a90 	vmov	r0, s15
    3346:	47a8      	blx	r5
    3348:	e064      	b.n	3414 <mag_to_force+0x354>
    334a:	bf00      	nop
    334c:	f3af 8000 	nop.w
    3350:	8f041462 	.word	0x8f041462
    3354:	3f6aef6f 	.word	0x3f6aef6f
    3358:	c28f5c29 	.word	0xc28f5c29
    335c:	402aa8f5 	.word	0x402aa8f5
    3360:	229e9079 	.word	0x229e9079
    3364:	3f6b8887 	.word	0x3f6b8887
    3368:	d646eb6e 	.word	0xd646eb6e
    336c:	3ea84b1c 	.word	0x3ea84b1c
    3370:	521dd696 	.word	0x521dd696
    3374:	3ea4ce9e 	.word	0x3ea4ce9e
    3378:	8b46aa0f 	.word	0x8b46aa0f
    337c:	3e91cf89 	.word	0x3e91cf89
    3380:	05b88164 	.word	0x05b88164
    3384:	3dcadc6f 	.word	0x3dcadc6f
    3388:	c6957207 	.word	0xc6957207
    338c:	3dba9bb1 	.word	0x3dba9bb1
    3390:	54aa19eb 	.word	0x54aa19eb
    3394:	3d9d014f 	.word	0x3d9d014f
    3398:	328a96c7 	.word	0x328a96c7
    339c:	3f3faac0 	.word	0x3f3faac0
    33a0:	4fdf3b64 	.word	0x4fdf3b64
    33a4:	4006978d 	.word	0x4006978d
    33a8:	4662bae0 	.word	0x4662bae0
    33ac:	3f507b78 	.word	0x3f507b78
    33b0:	1dbb855a 	.word	0x1dbb855a
    33b4:	3ea17b5b 	.word	0x3ea17b5b
    33b8:	f2d94d7a 	.word	0xf2d94d7a
    33bc:	3e9ac354 	.word	0x3e9ac354
    33c0:	8ed8f651 	.word	0x8ed8f651
    33c4:	3e821e90 	.word	0x3e821e90
    33c8:	37757ffe 	.word	0x37757ffe
    33cc:	3dc19631 	.word	0x3dc19631
    33d0:	8cce8eea 	.word	0x8cce8eea
    33d4:	3db7f827 	.word	0x3db7f827
    33d8:	7c871c2d 	.word	0x7c871c2d
    33dc:	3d953cf8 	.word	0x3d953cf8
    33e0:	94ccab3f 	.word	0x94ccab3f
    33e4:	3f72dfd6 	.word	0x3f72dfd6
    33e8:	eb851eb8 	.word	0xeb851eb8
    33ec:	40387851 	.word	0x40387851
    33f0:	9f51697f 	.word	0x9f51697f
    33f4:	3f7b0ee4 	.word	0x3f7b0ee4
    33f8:	fec17451 	.word	0xfec17451
    33fc:	3e9ad482 	.word	0x3e9ad482
    3400:	0000421d 	.word	0x0000421d
    3404:	000042c5 	.word	0x000042c5
    3408:	00003f5d 	.word	0x00003f5d
    340c:	00003f61 	.word	0x00003f61
    3410:	00004825 	.word	0x00004825
    3414:	a3f5      	add	r3, pc, #980	; (adr r3, 37ec <mag_to_force+0x72c>)
    3416:	e9d3 2300 	ldrd	r2, r3, [r3]
    341a:	47a0      	blx	r4
    341c:	4602      	mov	r2, r0
    341e:	460b      	mov	r3, r1
    3420:	4640      	mov	r0, r8
    3422:	4649      	mov	r1, r9
    3424:	47b0      	blx	r6
    3426:	4680      	mov	r8, r0
    3428:	4689      	mov	r9, r1
    342a:	a3f2      	add	r3, pc, #968	; (adr r3, 37f4 <mag_to_force+0x734>)
    342c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3434:	47a0      	blx	r4
    3436:	4602      	mov	r2, r0
    3438:	460b      	mov	r3, r1
    343a:	4640      	mov	r0, r8
    343c:	4649      	mov	r1, r9
    343e:	47b8      	blx	r7
    3440:	4680      	mov	r8, r0
    3442:	4689      	mov	r9, r1
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3444:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3448:	ee17 0a90 	vmov	r0, s15
    344c:	47a8      	blx	r5
    344e:	a3eb      	add	r3, pc, #940	; (adr r3, 37fc <mag_to_force+0x73c>)
    3450:	e9d3 2300 	ldrd	r2, r3, [r3]
    3454:	47a0      	blx	r4
    3456:	4602      	mov	r2, r0
    3458:	460b      	mov	r3, r1
    345a:	4640      	mov	r0, r8
    345c:	4649      	mov	r1, r9
    345e:	47b8      	blx	r7
    3460:	4680      	mov	r8, r0
    3462:	4689      	mov	r9, r1
	
    3464:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3468:	ee17 0a90 	vmov	r0, s15
    346c:	47a8      	blx	r5
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    346e:	a3e5      	add	r3, pc, #916	; (adr r3, 3804 <mag_to_force+0x744>)
    3470:	e9d3 2300 	ldrd	r2, r3, [r3]
    3474:	47a0      	blx	r4
    3476:	4602      	mov	r2, r0
    3478:	460b      	mov	r3, r1
    347a:	4640      	mov	r0, r8
    347c:	4649      	mov	r1, r9
    347e:	47b0      	blx	r6
    3480:	4680      	mov	r8, r0
    3482:	4689      	mov	r9, r1
	
    3484:	a3e1      	add	r3, pc, #900	; (adr r3, 380c <mag_to_force+0x74c>)
    3486:	e9d3 2300 	ldrd	r2, r3, [r3]
    348a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    348e:	47a0      	blx	r4
    3490:	4602      	mov	r2, r0
    3492:	460b      	mov	r3, r1
    3494:	4640      	mov	r0, r8
    3496:	4649      	mov	r1, r9
    3498:	47b8      	blx	r7
    349a:	47d8      	blx	fp
	sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    349c:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
	sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    34a0:	ee68 8aa8 	vmul.f32	s17, s17, s17
    34a4:	ee29 9a09 	vmul.f32	s18, s18, s18
    34a8:	ee78 8a89 	vadd.f32	s17, s17, s18
    34ac:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
	sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    34b0:	ee18 0a90 	vmov	r0, s17
    34b4:	47a8      	blx	r5
    34b6:	4bcc      	ldr	r3, [pc, #816]	; (37e8 <mag_to_force+0x728>)
    34b8:	4798      	blx	r3
    34ba:	47d8      	blx	fp
    34bc:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    34c0:	edda 8a01 	vldr	s17, [sl, #4]
    34c4:	ee18 0a90 	vmov	r0, s17
    34c8:	47a8      	blx	r5
    34ca:	a39b      	add	r3, pc, #620	; (adr r3, 3738 <mag_to_force+0x678>)
    34cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d0:	47a0      	blx	r4
    34d2:	4602      	mov	r2, r0
    34d4:	460b      	mov	r3, r1
    34d6:	a19a      	add	r1, pc, #616	; (adr r1, 3740 <mag_to_force+0x680>)
    34d8:	e9d1 0100 	ldrd	r0, r1, [r1]
    34dc:	47b0      	blx	r6
    34de:	4680      	mov	r8, r0
    34e0:	4689      	mov	r9, r1
    34e2:	ed9a 8a07 	vldr	s16, [sl, #28]
    34e6:	ee18 0a10 	vmov	r0, s16
    34ea:	47a8      	blx	r5
    34ec:	e9cd 0100 	strd	r0, r1, [sp]
    34f0:	a395      	add	r3, pc, #596	; (adr r3, 3748 <mag_to_force+0x688>)
    34f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    34f6:	47a0      	blx	r4
    34f8:	4602      	mov	r2, r0
    34fa:	460b      	mov	r3, r1
    34fc:	4640      	mov	r0, r8
    34fe:	4649      	mov	r1, r9
    3500:	47b8      	blx	r7
    3502:	4680      	mov	r8, r0
    3504:	4689      	mov	r9, r1
    3506:	ee28 9aa8 	vmul.f32	s18, s17, s17
    350a:	ee19 0a10 	vmov	r0, s18
    350e:	47a8      	blx	r5
    3510:	a38f      	add	r3, pc, #572	; (adr r3, 3750 <mag_to_force+0x690>)
    3512:	e9d3 2300 	ldrd	r2, r3, [r3]
    3516:	47a0      	blx	r4
    3518:	4602      	mov	r2, r0
    351a:	460b      	mov	r3, r1
    351c:	4640      	mov	r0, r8
    351e:	4649      	mov	r1, r9
    3520:	47b8      	blx	r7
    3522:	4680      	mov	r8, r0
    3524:	4689      	mov	r9, r1
    3526:	ee68 7a88 	vmul.f32	s15, s17, s16
    352a:	ee17 0a90 	vmov	r0, s15
    352e:	47a8      	blx	r5
    3530:	a389      	add	r3, pc, #548	; (adr r3, 3758 <mag_to_force+0x698>)
    3532:	e9d3 2300 	ldrd	r2, r3, [r3]
    3536:	47a0      	blx	r4
    3538:	4602      	mov	r2, r0
    353a:	460b      	mov	r3, r1
    353c:	4640      	mov	r0, r8
    353e:	4649      	mov	r1, r9
    3540:	47b0      	blx	r6
    3542:	4680      	mov	r8, r0
    3544:	4689      	mov	r9, r1
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3546:	ee28 aa08 	vmul.f32	s20, s16, s16
    354a:	ee1a 0a10 	vmov	r0, s20
    354e:	47a8      	blx	r5
    3550:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3554:	a382      	add	r3, pc, #520	; (adr r3, 3760 <mag_to_force+0x6a0>)
    3556:	e9d3 2300 	ldrd	r2, r3, [r3]
    355a:	47a0      	blx	r4
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    355c:	4602      	mov	r2, r0
    355e:	460b      	mov	r3, r1
    3560:	4640      	mov	r0, r8
    3562:	4649      	mov	r1, r9
    3564:	47b8      	blx	r7
    3566:	4680      	mov	r8, r0
    3568:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    356a:	ee68 7a09 	vmul.f32	s15, s16, s18
    356e:	ee17 0a90 	vmov	r0, s15
    3572:	47a8      	blx	r5
    3574:	a37c      	add	r3, pc, #496	; (adr r3, 3768 <mag_to_force+0x6a8>)
    3576:	e9d3 2300 	ldrd	r2, r3, [r3]
    357a:	47a0      	blx	r4
    357c:	4602      	mov	r2, r0
    357e:	460b      	mov	r3, r1
    3580:	4640      	mov	r0, r8
    3582:	4649      	mov	r1, r9
    3584:	47b8      	blx	r7
    3586:	4680      	mov	r8, r0
    3588:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    358a:	ee68 7a8a 	vmul.f32	s15, s17, s20
    358e:	ee17 0a90 	vmov	r0, s15
    3592:	47a8      	blx	r5
    3594:	a376      	add	r3, pc, #472	; (adr r3, 3770 <mag_to_force+0x6b0>)
    3596:	e9d3 2300 	ldrd	r2, r3, [r3]
    359a:	47a0      	blx	r4
    359c:	4602      	mov	r2, r0
    359e:	460b      	mov	r3, r1
    35a0:	4640      	mov	r0, r8
    35a2:	4649      	mov	r1, r9
    35a4:	47b0      	blx	r6
    35a6:	4680      	mov	r8, r0
    35a8:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    35aa:	ee68 7a0a 	vmul.f32	s15, s16, s20
    35ae:	ee17 0a90 	vmov	r0, s15
    35b2:	47a8      	blx	r5
    35b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    35b8:	a36f      	add	r3, pc, #444	; (adr r3, 3778 <mag_to_force+0x6b8>)
    35ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    35be:	47a0      	blx	r4
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    35c0:	4602      	mov	r2, r0
    35c2:	460b      	mov	r3, r1
    35c4:	4640      	mov	r0, r8
    35c6:	4649      	mov	r1, r9
    35c8:	47b8      	blx	r7
    35ca:	47d8      	blx	fp
    35cc:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    35d0:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    35d4:	ed9a 9a04 	vldr	s18, [sl, #16]
    35d8:	ee19 0a10 	vmov	r0, s18
    35dc:	47a8      	blx	r5
    35de:	a368      	add	r3, pc, #416	; (adr r3, 3780 <mag_to_force+0x6c0>)
    35e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35e4:	47a0      	blx	r4
    35e6:	4602      	mov	r2, r0
    35e8:	460b      	mov	r3, r1
    35ea:	a167      	add	r1, pc, #412	; (adr r1, 3788 <mag_to_force+0x6c8>)
    35ec:	e9d1 0100 	ldrd	r0, r1, [r1]
    35f0:	47b0      	blx	r6
    35f2:	4680      	mov	r8, r0
    35f4:	4689      	mov	r9, r1
    35f6:	a366      	add	r3, pc, #408	; (adr r3, 3790 <mag_to_force+0x6d0>)
    35f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    35fc:	e9dd 0100 	ldrd	r0, r1, [sp]
    3600:	47a0      	blx	r4
    3602:	4602      	mov	r2, r0
    3604:	460b      	mov	r3, r1
    3606:	4640      	mov	r0, r8
    3608:	4649      	mov	r1, r9
    360a:	47b8      	blx	r7
    360c:	4680      	mov	r8, r0
    360e:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3610:	ee69 9a09 	vmul.f32	s19, s18, s18
    3614:	ee19 0a90 	vmov	r0, s19
    3618:	47a8      	blx	r5
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    361a:	a35f      	add	r3, pc, #380	; (adr r3, 3798 <mag_to_force+0x6d8>)
    361c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3620:	47a0      	blx	r4
    3622:	4602      	mov	r2, r0
    3624:	460b      	mov	r3, r1
    3626:	4640      	mov	r0, r8
    3628:	4649      	mov	r1, r9
    362a:	47b0      	blx	r6
    362c:	4680      	mov	r8, r0
    362e:	4689      	mov	r9, r1
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3630:	ee68 7a09 	vmul.f32	s15, s16, s18
    3634:	ee17 0a90 	vmov	r0, s15
    3638:	47a8      	blx	r5
    363a:	a359      	add	r3, pc, #356	; (adr r3, 37a0 <mag_to_force+0x6e0>)
    363c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3640:	47a0      	blx	r4
    3642:	4602      	mov	r2, r0
    3644:	460b      	mov	r3, r1
    3646:	4640      	mov	r0, r8
    3648:	4649      	mov	r1, r9
    364a:	47b0      	blx	r6
    364c:	4680      	mov	r8, r0
    364e:	4689      	mov	r9, r1
    3650:	a355      	add	r3, pc, #340	; (adr r3, 37a8 <mag_to_force+0x6e8>)
    3652:	e9d3 2300 	ldrd	r2, r3, [r3]
    3656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    365a:	47a0      	blx	r4
    365c:	4602      	mov	r2, r0
    365e:	460b      	mov	r3, r1
    3660:	4640      	mov	r0, r8
    3662:	4649      	mov	r1, r9
    3664:	47b8      	blx	r7
    3666:	4680      	mov	r8, r0
    3668:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    366a:	ee68 7a29 	vmul.f32	s15, s16, s19
    366e:	ee17 0a90 	vmov	r0, s15
    3672:	47a8      	blx	r5
    3674:	a34e      	add	r3, pc, #312	; (adr r3, 37b0 <mag_to_force+0x6f0>)
    3676:	e9d3 2300 	ldrd	r2, r3, [r3]
    367a:	47a0      	blx	r4
    367c:	4602      	mov	r2, r0
    367e:	460b      	mov	r3, r1
    3680:	4640      	mov	r0, r8
    3682:	4649      	mov	r1, r9
    3684:	47b0      	blx	r6
    3686:	4680      	mov	r8, r0
    3688:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    368a:	ee6a 7a09 	vmul.f32	s15, s20, s18
    368e:	ee17 0a90 	vmov	r0, s15
    3692:	47a8      	blx	r5
    3694:	a348      	add	r3, pc, #288	; (adr r3, 37b8 <mag_to_force+0x6f8>)
    3696:	e9d3 2300 	ldrd	r2, r3, [r3]
    369a:	47a0      	blx	r4
    369c:	4602      	mov	r2, r0
    369e:	460b      	mov	r3, r1
    36a0:	4640      	mov	r0, r8
    36a2:	4649      	mov	r1, r9
    36a4:	47b0      	blx	r6
    36a6:	4680      	mov	r8, r0
    36a8:	4689      	mov	r9, r1
    36aa:	a345      	add	r3, pc, #276	; (adr r3, 37c0 <mag_to_force+0x700>)
    36ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    36b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    36b4:	47a0      	blx	r4
    36b6:	4602      	mov	r2, r0
    36b8:	460b      	mov	r3, r1
    36ba:	4640      	mov	r0, r8
    36bc:	4649      	mov	r1, r9
    36be:	47b8      	blx	r7
    36c0:	47d8      	blx	fp
    36c2:	ee09 0a10 	vmov	s18, r0
	sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36c6:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36ca:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    36ce:	ee19 0a90 	vmov	r0, s19
    36d2:	47a8      	blx	r5
    36d4:	a33c      	add	r3, pc, #240	; (adr r3, 37c8 <mag_to_force+0x708>)
    36d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    36da:	47a0      	blx	r4
    36dc:	4602      	mov	r2, r0
    36de:	460b      	mov	r3, r1
    36e0:	a13b      	add	r1, pc, #236	; (adr r1, 37d0 <mag_to_force+0x710>)
    36e2:	e9d1 0100 	ldrd	r0, r1, [r1]
    36e6:	47b0      	blx	r6
    36e8:	4680      	mov	r8, r0
    36ea:	4689      	mov	r9, r1
    36ec:	a33a      	add	r3, pc, #232	; (adr r3, 37d8 <mag_to_force+0x718>)
    36ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f2:	e9dd 0100 	ldrd	r0, r1, [sp]
    36f6:	47a0      	blx	r4
    36f8:	4602      	mov	r2, r0
    36fa:	460b      	mov	r3, r1
    36fc:	4640      	mov	r0, r8
    36fe:	4649      	mov	r1, r9
    3700:	47b8      	blx	r7
    3702:	4680      	mov	r8, r0
    3704:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3706:	ee69 aaa9 	vmul.f32	s21, s19, s19
    370a:	ee1a 0a90 	vmov	r0, s21
    370e:	47a8      	blx	r5
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3710:	a333      	add	r3, pc, #204	; (adr r3, 37e0 <mag_to_force+0x720>)
    3712:	e9d3 2300 	ldrd	r2, r3, [r3]
    3716:	47a0      	blx	r4
    3718:	4602      	mov	r2, r0
    371a:	460b      	mov	r3, r1
    371c:	4640      	mov	r0, r8
    371e:	4649      	mov	r1, r9
    3720:	47b8      	blx	r7
    3722:	4680      	mov	r8, r0
    3724:	4689      	mov	r9, r1
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3726:	ee68 7a29 	vmul.f32	s15, s16, s19
    372a:	ee17 0a90 	vmov	r0, s15
    372e:	47a8      	blx	r5
    3730:	e070      	b.n	3814 <mag_to_force+0x754>
    3732:	bf00      	nop
    3734:	f3af 8000 	nop.w
    3738:	412c1a3a 	.word	0x412c1a3a
    373c:	3f3286eb 	.word	0x3f3286eb
    3740:	bc6a7efa 	.word	0xbc6a7efa
    3744:	3ff69374 	.word	0x3ff69374
    3748:	92beb405 	.word	0x92beb405
    374c:	3f36e5f5 	.word	0x3f36e5f5
    3750:	a908d438 	.word	0xa908d438
    3754:	3e864e96 	.word	0x3e864e96
    3758:	17c30410 	.word	0x17c30410
    375c:	3e8a1af8 	.word	0x3e8a1af8
    3760:	3d66d634 	.word	0x3d66d634
    3764:	3e632932 	.word	0x3e632932
    3768:	1b4047b2 	.word	0x1b4047b2
    376c:	3da8a10a 	.word	0x3da8a10a
    3770:	6fcf44ac 	.word	0x6fcf44ac
    3774:	3da4129b 	.word	0x3da4129b
    3778:	29e54c52 	.word	0x29e54c52
    377c:	3d73af87 	.word	0x3d73af87
    3780:	80f98fa3 	.word	0x80f98fa3
    3784:	3f726740 	.word	0x3f726740
    3788:	ed916873 	.word	0xed916873
    378c:	401f3f7c 	.word	0x401f3f7c
    3790:	3dfb0d52 	.word	0x3dfb0d52
    3794:	3f654eb1 	.word	0x3f654eb1
    3798:	a7d49e3c 	.word	0xa7d49e3c
    379c:	3e7ceff5 	.word	0x3e7ceff5
    37a0:	4fba36fa 	.word	0x4fba36fa
    37a4:	3ea8b079 	.word	0x3ea8b079
    37a8:	d77b216a 	.word	0xd77b216a
    37ac:	3e91a9bd 	.word	0x3e91a9bd
    37b0:	9612a3e2 	.word	0x9612a3e2
    37b4:	3daa2579 	.word	0x3daa2579
    37b8:	82163668 	.word	0x82163668
    37bc:	3dbcbdc1 	.word	0x3dbcbdc1
    37c0:	9d1f8878 	.word	0x9d1f8878
    37c4:	3da13b46 	.word	0x3da13b46
    37c8:	dad31fcd 	.word	0xdad31fcd
    37cc:	3f77b634 	.word	0x3f77b634
    37d0:	1eb851ec 	.word	0x1eb851ec
    37d4:	402c6b85 	.word	0x402c6b85
    37d8:	bdcad14a 	.word	0xbdcad14a
    37dc:	3f70acc0 	.word	0x3f70acc0
    37e0:	60693e8b 	.word	0x60693e8b
    37e4:	3ea1b6a0 	.word	0x3ea1b6a0
    37e8:	00003d1d 	.word	0x00003d1d
    37ec:	f40c67fe 	.word	0xf40c67fe
    37f0:	3ea64c02 	.word	0x3ea64c02
    37f4:	02588cee 	.word	0x02588cee
    37f8:	3ea1c2a7 	.word	0x3ea1c2a7
    37fc:	884399b8 	.word	0x884399b8
    3800:	3d9e314d 	.word	0x3d9e314d
    3804:	3cc5c3bb 	.word	0x3cc5c3bb
    3808:	3dbb0978 	.word	0x3dbb0978
    380c:	fe5cd623 	.word	0xfe5cd623
    3810:	3da74f44 	.word	0x3da74f44
    3814:	a3f6      	add	r3, pc, #984	; (adr r3, 3bf0 <mag_to_force+0xb30>)
    3816:	e9d3 2300 	ldrd	r2, r3, [r3]
    381a:	47a0      	blx	r4
    381c:	4602      	mov	r2, r0
    381e:	460b      	mov	r3, r1
    3820:	4640      	mov	r0, r8
    3822:	4649      	mov	r1, r9
    3824:	47b0      	blx	r6
    3826:	4680      	mov	r8, r0
    3828:	4689      	mov	r9, r1
    382a:	a3f3      	add	r3, pc, #972	; (adr r3, 3bf8 <mag_to_force+0xb38>)
    382c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3834:	47a0      	blx	r4
    3836:	4602      	mov	r2, r0
    3838:	460b      	mov	r3, r1
    383a:	4640      	mov	r0, r8
    383c:	4649      	mov	r1, r9
    383e:	47b8      	blx	r7
    3840:	4680      	mov	r8, r0
    3842:	4689      	mov	r9, r1
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3844:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3848:	ee17 0a90 	vmov	r0, s15
    384c:	47a8      	blx	r5
    384e:	a3ec      	add	r3, pc, #944	; (adr r3, 3c00 <mag_to_force+0xb40>)
    3850:	e9d3 2300 	ldrd	r2, r3, [r3]
    3854:	47a0      	blx	r4
    3856:	4602      	mov	r2, r0
    3858:	460b      	mov	r3, r1
    385a:	4640      	mov	r0, r8
    385c:	4649      	mov	r1, r9
    385e:	47b8      	blx	r7
    3860:	4680      	mov	r8, r0
    3862:	4689      	mov	r9, r1
	
    3864:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3868:	ee17 0a90 	vmov	r0, s15
    386c:	47a8      	blx	r5
    386e:	a3e6      	add	r3, pc, #920	; (adr r3, 3c08 <mag_to_force+0xb48>)
    3870:	e9d3 2300 	ldrd	r2, r3, [r3]
    3874:	47a0      	blx	r4
    3876:	4602      	mov	r2, r0
    3878:	460b      	mov	r3, r1
    387a:	4640      	mov	r0, r8
    387c:	4649      	mov	r1, r9
    387e:	47b0      	blx	r6
    3880:	4680      	mov	r8, r0
    3882:	4689      	mov	r9, r1
    3884:	a3e2      	add	r3, pc, #904	; (adr r3, 3c10 <mag_to_force+0xb50>)
    3886:	e9d3 2300 	ldrd	r2, r3, [r3]
    388a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    388e:	47a0      	blx	r4
    3890:	4602      	mov	r2, r0
    3892:	460b      	mov	r3, r1
    3894:	4640      	mov	r0, r8
    3896:	4649      	mov	r1, r9
    3898:	47b8      	blx	r7
    389a:	47d8      	blx	fp
	sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    389c:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
	sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    38a0:	ee68 8aa8 	vmul.f32	s17, s17, s17
    38a4:	ee29 9a09 	vmul.f32	s18, s18, s18
    38a8:	ee78 8a89 	vadd.f32	s17, s17, s18
    38ac:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
	sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    38b0:	ee18 0a90 	vmov	r0, s17
    38b4:	47a8      	blx	r5
    38b6:	4bcc      	ldr	r3, [pc, #816]	; (3be8 <mag_to_force+0xb28>)
    38b8:	4798      	blx	r3
    38ba:	47d8      	blx	fp
    38bc:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
	
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    38c0:	ed9a 8a02 	vldr	s16, [sl, #8]
    38c4:	ee18 0a10 	vmov	r0, s16
    38c8:	47a8      	blx	r5
    38ca:	a39b      	add	r3, pc, #620	; (adr r3, 3b38 <mag_to_force+0xa78>)
    38cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    38d0:	47a0      	blx	r4
    38d2:	4602      	mov	r2, r0
    38d4:	460b      	mov	r3, r1
    38d6:	a19a      	add	r1, pc, #616	; (adr r1, 3b40 <mag_to_force+0xa80>)
    38d8:	e9d1 0100 	ldrd	r0, r1, [r1]
    38dc:	47b0      	blx	r6
    38de:	4680      	mov	r8, r0
    38e0:	4689      	mov	r9, r1
    38e2:	edda 8a08 	vldr	s17, [sl, #32]
    38e6:	ee18 0a90 	vmov	r0, s17
    38ea:	47a8      	blx	r5
    38ec:	e9cd 0100 	strd	r0, r1, [sp]
    38f0:	a395      	add	r3, pc, #596	; (adr r3, 3b48 <mag_to_force+0xa88>)
    38f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    38f6:	47a0      	blx	r4
    38f8:	4602      	mov	r2, r0
    38fa:	460b      	mov	r3, r1
    38fc:	4640      	mov	r0, r8
    38fe:	4649      	mov	r1, r9
    3900:	47b0      	blx	r6
    3902:	4680      	mov	r8, r0
    3904:	4689      	mov	r9, r1
    3906:	ee28 9a08 	vmul.f32	s18, s16, s16
    390a:	ee19 0a10 	vmov	r0, s18
    390e:	47a8      	blx	r5
    3910:	a38f      	add	r3, pc, #572	; (adr r3, 3b50 <mag_to_force+0xa90>)
    3912:	e9d3 2300 	ldrd	r2, r3, [r3]
    3916:	47a0      	blx	r4
    3918:	4602      	mov	r2, r0
    391a:	460b      	mov	r3, r1
    391c:	4640      	mov	r0, r8
    391e:	4649      	mov	r1, r9
    3920:	47b0      	blx	r6
    3922:	4680      	mov	r8, r0
    3924:	4689      	mov	r9, r1
    3926:	ee68 7a28 	vmul.f32	s15, s16, s17
    392a:	ee17 0a90 	vmov	r0, s15
    392e:	47a8      	blx	r5
    3930:	a389      	add	r3, pc, #548	; (adr r3, 3b58 <mag_to_force+0xa98>)
    3932:	e9d3 2300 	ldrd	r2, r3, [r3]
    3936:	47a0      	blx	r4
    3938:	4602      	mov	r2, r0
    393a:	460b      	mov	r3, r1
    393c:	4640      	mov	r0, r8
    393e:	4649      	mov	r1, r9
    3940:	47b0      	blx	r6
    3942:	4680      	mov	r8, r0
    3944:	4689      	mov	r9, r1
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3946:	ee68 9aa8 	vmul.f32	s19, s17, s17
    394a:	ee19 0a90 	vmov	r0, s19
    394e:	47a8      	blx	r5
    3950:	e9cd 0102 	strd	r0, r1, [sp, #8]
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3954:	a382      	add	r3, pc, #520	; (adr r3, 3b60 <mag_to_force+0xaa0>)
    3956:	e9d3 2300 	ldrd	r2, r3, [r3]
    395a:	47a0      	blx	r4
    395c:	4602      	mov	r2, r0
    395e:	460b      	mov	r3, r1
    3960:	4640      	mov	r0, r8
    3962:	4649      	mov	r1, r9
    3964:	47b0      	blx	r6
    3966:	4680      	mov	r8, r0
    3968:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    396a:	ee68 7a89 	vmul.f32	s15, s17, s18
    396e:	ee17 0a90 	vmov	r0, s15
    3972:	47a8      	blx	r5
    3974:	a37c      	add	r3, pc, #496	; (adr r3, 3b68 <mag_to_force+0xaa8>)
    3976:	e9d3 2300 	ldrd	r2, r3, [r3]
    397a:	47a0      	blx	r4
    397c:	4602      	mov	r2, r0
    397e:	460b      	mov	r3, r1
    3980:	4640      	mov	r0, r8
    3982:	4649      	mov	r1, r9
    3984:	47b0      	blx	r6
    3986:	4680      	mov	r8, r0
    3988:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    398a:	ee68 7a29 	vmul.f32	s15, s16, s19
    398e:	ee17 0a90 	vmov	r0, s15
    3992:	47a8      	blx	r5
    3994:	a376      	add	r3, pc, #472	; (adr r3, 3b70 <mag_to_force+0xab0>)
    3996:	e9d3 2300 	ldrd	r2, r3, [r3]
    399a:	47a0      	blx	r4
    399c:	4602      	mov	r2, r0
    399e:	460b      	mov	r3, r1
    39a0:	4640      	mov	r0, r8
    39a2:	4649      	mov	r1, r9
    39a4:	47b0      	blx	r6
    39a6:	4680      	mov	r8, r0
    39a8:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    39aa:	ee68 7aa9 	vmul.f32	s15, s17, s19
    39ae:	ee17 0a90 	vmov	r0, s15
    39b2:	47a8      	blx	r5
    39b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    39b8:	a36f      	add	r3, pc, #444	; (adr r3, 3b78 <mag_to_force+0xab8>)
    39ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    39be:	47a0      	blx	r4
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    39c0:	4602      	mov	r2, r0
    39c2:	460b      	mov	r3, r1
    39c4:	4640      	mov	r0, r8
    39c6:	4649      	mov	r1, r9
    39c8:	47b0      	blx	r6
    39ca:	47d8      	blx	fp
    39cc:	ee08 0a10 	vmov	s16, r0
	sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    39d0:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    39d4:	ed9a 9a05 	vldr	s18, [sl, #20]
    39d8:	ee19 0a10 	vmov	r0, s18
    39dc:	47a8      	blx	r5
    39de:	a368      	add	r3, pc, #416	; (adr r3, 3b80 <mag_to_force+0xac0>)
    39e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    39e4:	47a0      	blx	r4
    39e6:	a368      	add	r3, pc, #416	; (adr r3, 3b88 <mag_to_force+0xac8>)
    39e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    39ec:	47b0      	blx	r6
    39ee:	4680      	mov	r8, r0
    39f0:	4689      	mov	r9, r1
    39f2:	a367      	add	r3, pc, #412	; (adr r3, 3b90 <mag_to_force+0xad0>)
    39f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    39f8:	e9dd 0100 	ldrd	r0, r1, [sp]
    39fc:	47a0      	blx	r4
    39fe:	4602      	mov	r2, r0
    3a00:	460b      	mov	r3, r1
    3a02:	4640      	mov	r0, r8
    3a04:	4649      	mov	r1, r9
    3a06:	47b0      	blx	r6
    3a08:	4680      	mov	r8, r0
    3a0a:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a0c:	ee29 aa09 	vmul.f32	s20, s18, s18
    3a10:	ee1a 0a10 	vmov	r0, s20
    3a14:	47a8      	blx	r5
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3a16:	a360      	add	r3, pc, #384	; (adr r3, 3b98 <mag_to_force+0xad8>)
    3a18:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a1c:	47a0      	blx	r4
    3a1e:	4602      	mov	r2, r0
    3a20:	460b      	mov	r3, r1
    3a22:	4640      	mov	r0, r8
    3a24:	4649      	mov	r1, r9
    3a26:	47b8      	blx	r7
    3a28:	4680      	mov	r8, r0
    3a2a:	4689      	mov	r9, r1
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a2c:	462e      	mov	r6, r5
    3a2e:	ee68 7a89 	vmul.f32	s15, s17, s18
    3a32:	ee17 0a90 	vmov	r0, s15
    3a36:	47a8      	blx	r5
    3a38:	a359      	add	r3, pc, #356	; (adr r3, 3ba0 <mag_to_force+0xae0>)
    3a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a3e:	47a0      	blx	r4
    3a40:	463d      	mov	r5, r7
    3a42:	4602      	mov	r2, r0
    3a44:	460b      	mov	r3, r1
    3a46:	4640      	mov	r0, r8
    3a48:	4649      	mov	r1, r9
    3a4a:	47b8      	blx	r7
    3a4c:	4680      	mov	r8, r0
    3a4e:	4689      	mov	r9, r1
    3a50:	a355      	add	r3, pc, #340	; (adr r3, 3ba8 <mag_to_force+0xae8>)
    3a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3a5a:	47a0      	blx	r4
    3a5c:	4f63      	ldr	r7, [pc, #396]	; (3bec <mag_to_force+0xb2c>)
    3a5e:	4602      	mov	r2, r0
    3a60:	460b      	mov	r3, r1
    3a62:	4640      	mov	r0, r8
    3a64:	4649      	mov	r1, r9
    3a66:	47b8      	blx	r7
    3a68:	4680      	mov	r8, r0
    3a6a:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3a6c:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3a70:	ee17 0a90 	vmov	r0, s15
    3a74:	47b0      	blx	r6
    3a76:	a34e      	add	r3, pc, #312	; (adr r3, 3bb0 <mag_to_force+0xaf0>)
    3a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a7c:	47a0      	blx	r4
    3a7e:	4602      	mov	r2, r0
    3a80:	460b      	mov	r3, r1
    3a82:	4640      	mov	r0, r8
    3a84:	4649      	mov	r1, r9
    3a86:	47a8      	blx	r5
    3a88:	4680      	mov	r8, r0
    3a8a:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3a8c:	ee69 7a89 	vmul.f32	s15, s19, s18
    3a90:	ee17 0a90 	vmov	r0, s15
    3a94:	47b0      	blx	r6
    3a96:	a348      	add	r3, pc, #288	; (adr r3, 3bb8 <mag_to_force+0xaf8>)
    3a98:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a9c:	47a0      	blx	r4
    3a9e:	4602      	mov	r2, r0
    3aa0:	460b      	mov	r3, r1
    3aa2:	4640      	mov	r0, r8
    3aa4:	4649      	mov	r1, r9
    3aa6:	47a8      	blx	r5
    3aa8:	4680      	mov	r8, r0
    3aaa:	4689      	mov	r9, r1
	
    3aac:	a344      	add	r3, pc, #272	; (adr r3, 3bc0 <mag_to_force+0xb00>)
    3aae:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3ab6:	47a0      	blx	r4
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3ab8:	4602      	mov	r2, r0
    3aba:	460b      	mov	r3, r1
    3abc:	4640      	mov	r0, r8
    3abe:	4649      	mov	r1, r9
    3ac0:	47b8      	blx	r7
    3ac2:	47d8      	blx	fp
    3ac4:	ee08 0a90 	vmov	s17, r0
	sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3ac8:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3acc:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    3ad0:	ee19 0a10 	vmov	r0, s18
    3ad4:	47b0      	blx	r6
    3ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3ada:	a33b      	add	r3, pc, #236	; (adr r3, 3bc8 <mag_to_force+0xb08>)
    3adc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ae0:	47a0      	blx	r4
    3ae2:	4602      	mov	r2, r0
    3ae4:	460b      	mov	r3, r1
    3ae6:	a13a      	add	r1, pc, #232	; (adr r1, 3bd0 <mag_to_force+0xb10>)
    3ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
    3aec:	47b8      	blx	r7
    3aee:	4680      	mov	r8, r0
    3af0:	4689      	mov	r9, r1
    3af2:	a339      	add	r3, pc, #228	; (adr r3, 3bd8 <mag_to_force+0xb18>)
    3af4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3af8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3afc:	47a0      	blx	r4
    3afe:	4602      	mov	r2, r0
    3b00:	460b      	mov	r3, r1
    3b02:	4640      	mov	r0, r8
    3b04:	4649      	mov	r1, r9
    3b06:	47a8      	blx	r5
    3b08:	4680      	mov	r8, r0
    3b0a:	4689      	mov	r9, r1
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3b0c:	ee69 7a09 	vmul.f32	s15, s18, s18
    3b10:	ee17 0a90 	vmov	r0, s15
    3b14:	47b0      	blx	r6
    3b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3b1a:	a331      	add	r3, pc, #196	; (adr r3, 3be0 <mag_to_force+0xb20>)
    3b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b20:	47a0      	blx	r4
    3b22:	4602      	mov	r2, r0
    3b24:	460b      	mov	r3, r1
    3b26:	4640      	mov	r0, r8
    3b28:	4649      	mov	r1, r9
    3b2a:	47a8      	blx	r5
    3b2c:	4680      	mov	r8, r0
    3b2e:	4689      	mov	r9, r1
    3b30:	e072      	b.n	3c18 <mag_to_force+0xb58>
    3b32:	bf00      	nop
    3b34:	f3af 8000 	nop.w
    3b38:	6b50b0f2 	.word	0x6b50b0f2
    3b3c:	3f6c779a 	.word	0x3f6c779a
    3b40:	c28f5c29 	.word	0xc28f5c29
    3b44:	c024a8f5 	.word	0xc024a8f5
    3b48:	d5171e2a 	.word	0xd5171e2a
    3b4c:	3f68a222 	.word	0x3f68a222
    3b50:	69edc5c6 	.word	0x69edc5c6
    3b54:	3ea5a9a9 	.word	0x3ea5a9a9
    3b58:	81bc997e 	.word	0x81bc997e
    3b5c:	3ea8aec1 	.word	0x3ea8aec1
    3b60:	de9fb9ed 	.word	0xde9fb9ed
    3b64:	3e9247cb 	.word	0x3e9247cb
    3b68:	82393435 	.word	0x82393435
    3b6c:	3dc8377c 	.word	0x3dc8377c
    3b70:	e19c6262 	.word	0xe19c6262
    3b74:	3dc1773a 	.word	0x3dc1773a
    3b78:	7476128f 	.word	0x7476128f
    3b7c:	3da06d3c 	.word	0x3da06d3c
    3b80:	b0fadf2f 	.word	0xb0fadf2f
    3b84:	3f65a8de 	.word	0x3f65a8de
    3b88:	9ba5e354 	.word	0x9ba5e354
    3b8c:	400120c4 	.word	0x400120c4
    3b90:	ef1fddec 	.word	0xef1fddec
    3b94:	3f432b55 	.word	0x3f432b55
    3b98:	ebb865dc 	.word	0xebb865dc
    3b9c:	3ea2ee70 	.word	0x3ea2ee70
    3ba0:	ea8666cf 	.word	0xea8666cf
    3ba4:	3e853bb5 	.word	0x3e853bb5
    3ba8:	5799a806 	.word	0x5799a806
    3bac:	3e6193c0 	.word	0x3e6193c0
    3bb0:	cece3cda 	.word	0xcece3cda
    3bb4:	3dc62920 	.word	0x3dc62920
    3bb8:	d5564f58 	.word	0xd5564f58
    3bbc:	3d683df5 	.word	0x3d683df5
    3bc0:	664dc709 	.word	0x664dc709
    3bc4:	3d626c2b 	.word	0x3d626c2b
    3bc8:	c4cdfaca 	.word	0xc4cdfaca
    3bcc:	3f762174 	.word	0x3f762174
    3bd0:	f5c28f5c 	.word	0xf5c28f5c
    3bd4:	40399c28 	.word	0x40399c28
    3bd8:	5cc42635 	.word	0x5cc42635
    3bdc:	3f7db552 	.word	0x3f7db552
    3be0:	88e4e2e6 	.word	0x88e4e2e6
    3be4:	3eb215f9 	.word	0x3eb215f9
    3be8:	00003d1d 	.word	0x00003d1d
    3bec:	00003f5d 	.word	0x00003f5d
    3bf0:	02547d8d 	.word	0x02547d8d
    3bf4:	3ea9b22c 	.word	0x3ea9b22c
    3bf8:	227c1fc4 	.word	0x227c1fc4
    3bfc:	3e96b3f3 	.word	0x3e96b3f3
    3c00:	f946a57c 	.word	0xf946a57c
    3c04:	3db0a587 	.word	0x3db0a587
    3c08:	82163668 	.word	0x82163668
    3c0c:	3dbcbdc1 	.word	0x3dbcbdc1
    3c10:	02de4486 	.word	0x02de4486
    3c14:	3d9a8e2f 	.word	0x3d9a8e2f
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3c18:	a336      	add	r3, pc, #216	; (adr r3, 3cf4 <mag_to_force+0xc34>)
    3c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3c22:	47a0      	blx	r4
    3c24:	4602      	mov	r2, r0
    3c26:	460b      	mov	r3, r1
    3c28:	e9dd 0100 	ldrd	r0, r1, [sp]
    3c2c:	47a0      	blx	r4
    3c2e:	4602      	mov	r2, r0
    3c30:	460b      	mov	r3, r1
    3c32:	4640      	mov	r0, r8
    3c34:	4649      	mov	r1, r9
    3c36:	47b8      	blx	r7
    3c38:	4680      	mov	r8, r0
    3c3a:	4689      	mov	r9, r1
    3c3c:	a32f      	add	r3, pc, #188	; (adr r3, 3cfc <mag_to_force+0xc3c>)
    3c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3c46:	47a0      	blx	r4
    3c48:	4602      	mov	r2, r0
    3c4a:	460b      	mov	r3, r1
    3c4c:	4640      	mov	r0, r8
    3c4e:	4649      	mov	r1, r9
    3c50:	47a8      	blx	r5
    3c52:	4680      	mov	r8, r0
    3c54:	4689      	mov	r9, r1
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3c56:	a32b      	add	r3, pc, #172	; (adr r3, 3d04 <mag_to_force+0xc44>)
    3c58:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3c60:	47a0      	blx	r4
    3c62:	4602      	mov	r2, r0
    3c64:	460b      	mov	r3, r1
    3c66:	e9dd 0100 	ldrd	r0, r1, [sp]
    3c6a:	47a0      	blx	r4
    3c6c:	4602      	mov	r2, r0
    3c6e:	460b      	mov	r3, r1
    3c70:	4640      	mov	r0, r8
    3c72:	4649      	mov	r1, r9
    3c74:	47a8      	blx	r5
    3c76:	4680      	mov	r8, r0
    3c78:	4689      	mov	r9, r1
	
    3c7a:	a324      	add	r3, pc, #144	; (adr r3, 3d0c <mag_to_force+0xc4c>)
    3c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3c84:	47a0      	blx	r4
    3c86:	4602      	mov	r2, r0
    3c88:	460b      	mov	r3, r1
    3c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3c8e:	47a0      	blx	r4
    3c90:	4602      	mov	r2, r0
    3c92:	460b      	mov	r3, r1
    3c94:	4640      	mov	r0, r8
    3c96:	4649      	mov	r1, r9
    3c98:	47b8      	blx	r7
    3c9a:	4680      	mov	r8, r0
    3c9c:	4689      	mov	r9, r1
    3c9e:	a31d      	add	r3, pc, #116	; (adr r3, 3d14 <mag_to_force+0xc54>)
    3ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3ca8:	47a0      	blx	r4
	/*
    3caa:	4602      	mov	r2, r0
    3cac:	460b      	mov	r3, r1
    3cae:	e9dd 0100 	ldrd	r0, r1, [sp]
    3cb2:	47a0      	blx	r4
	
    3cb4:	4602      	mov	r2, r0
    3cb6:	460b      	mov	r3, r1
    3cb8:	4640      	mov	r0, r8
    3cba:	4649      	mov	r1, r9
    3cbc:	47a8      	blx	r5
    3cbe:	47d8      	blx	fp
	sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3cc0:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
	sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3cc4:	ee28 8a08 	vmul.f32	s16, s16, s16
    3cc8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3ccc:	ee38 8a28 	vadd.f32	s16, s16, s17
    3cd0:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
	sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3cd4:	ee18 0a10 	vmov	r0, s16
    3cd8:	47b0      	blx	r6
    3cda:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <mag_to_force+0xc30>)
    3cdc:	4798      	blx	r3
    3cde:	47d8      	blx	fp
    3ce0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
	
	sensor_row->force_z_bottom = 35.2728 + (-0.0130*sensor_row->b_r_top) + (0.0084*hall_sensor_bottom->data.z);
	sensor_row->force_r_bottom = 9.9403 + (-0.0075*sensor_row->b_r_top) + (0.0013*hall_sensor_bottom->data.z);
	*/
	
    3ce4:	b009      	add	sp, #36	; 0x24
    3ce6:	ecbd 8b06 	vpop	{d8-d10}
    3cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cee:	bf00      	nop
    3cf0:	00003d1d 	.word	0x00003d1d
    3cf4:	5a723736 	.word	0x5a723736
    3cf8:	3ea77381 	.word	0x3ea77381
    3cfc:	4e8b8a55 	.word	0x4e8b8a55
    3d00:	3ea47f97 	.word	0x3ea47f97
    3d04:	a48fe74d 	.word	0xa48fe74d
    3d08:	3dce7643 	.word	0x3dce7643
    3d0c:	e61b6f11 	.word	0xe61b6f11
    3d10:	3db71428 	.word	0x3db71428
    3d14:	447e7fdf 	.word	0x447e7fdf
    3d18:	3dacd9e7 	.word	0x3dacd9e7

00003d1c <sqrt>:
    3d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d20:	b08b      	sub	sp, #44	; 0x2c
    3d22:	4604      	mov	r4, r0
    3d24:	460d      	mov	r5, r1
    3d26:	f000 f857 	bl	3dd8 <__ieee754_sqrt>
    3d2a:	4b29      	ldr	r3, [pc, #164]	; (3dd0 <sqrt+0xb4>)
    3d2c:	f993 a000 	ldrsb.w	sl, [r3]
    3d30:	f1ba 3fff 	cmp.w	sl, #4294967295
    3d34:	4606      	mov	r6, r0
    3d36:	460f      	mov	r7, r1
    3d38:	d012      	beq.n	3d60 <sqrt+0x44>
    3d3a:	4622      	mov	r2, r4
    3d3c:	462b      	mov	r3, r5
    3d3e:	4620      	mov	r0, r4
    3d40:	4629      	mov	r1, r5
    3d42:	f000 fd59 	bl	47f8 <__aeabi_dcmpun>
    3d46:	4683      	mov	fp, r0
    3d48:	b950      	cbnz	r0, 3d60 <sqrt+0x44>
    3d4a:	f04f 0800 	mov.w	r8, #0
    3d4e:	f04f 0900 	mov.w	r9, #0
    3d52:	4642      	mov	r2, r8
    3d54:	464b      	mov	r3, r9
    3d56:	4620      	mov	r0, r4
    3d58:	4629      	mov	r1, r5
    3d5a:	f000 fd25 	bl	47a8 <__aeabi_dcmplt>
    3d5e:	b920      	cbnz	r0, 3d6a <sqrt+0x4e>
    3d60:	4630      	mov	r0, r6
    3d62:	4639      	mov	r1, r7
    3d64:	b00b      	add	sp, #44	; 0x2c
    3d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d6a:	4b1a      	ldr	r3, [pc, #104]	; (3dd4 <sqrt+0xb8>)
    3d6c:	f8cd b020 	str.w	fp, [sp, #32]
    3d70:	2201      	movs	r2, #1
    3d72:	e9cd 4504 	strd	r4, r5, [sp, #16]
    3d76:	e9cd 4502 	strd	r4, r5, [sp, #8]
    3d7a:	e88d 000c 	stmia.w	sp, {r2, r3}
    3d7e:	f1ba 0f00 	cmp.w	sl, #0
    3d82:	d017      	beq.n	3db4 <sqrt+0x98>
    3d84:	4642      	mov	r2, r8
    3d86:	464b      	mov	r3, r9
    3d88:	4640      	mov	r0, r8
    3d8a:	4649      	mov	r1, r9
    3d8c:	f000 fbc4 	bl	4518 <__aeabi_ddiv>
    3d90:	f1ba 0f02 	cmp.w	sl, #2
    3d94:	e9cd 0106 	strd	r0, r1, [sp, #24]
    3d98:	d10e      	bne.n	3db8 <sqrt+0x9c>
    3d9a:	f000 fd93 	bl	48c4 <__errno>
    3d9e:	2321      	movs	r3, #33	; 0x21
    3da0:	6003      	str	r3, [r0, #0]
    3da2:	9b08      	ldr	r3, [sp, #32]
    3da4:	b973      	cbnz	r3, 3dc4 <sqrt+0xa8>
    3da6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    3daa:	4630      	mov	r0, r6
    3dac:	4639      	mov	r1, r7
    3dae:	b00b      	add	sp, #44	; 0x2c
    3db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3db4:	e9cd 8906 	strd	r8, r9, [sp, #24]
    3db8:	4668      	mov	r0, sp
    3dba:	f000 f8c9 	bl	3f50 <matherr>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d1ef      	bne.n	3da2 <sqrt+0x86>
    3dc2:	e7ea      	b.n	3d9a <sqrt+0x7e>
    3dc4:	f000 fd7e 	bl	48c4 <__errno>
    3dc8:	9b08      	ldr	r3, [sp, #32]
    3dca:	6003      	str	r3, [r0, #0]
    3dcc:	e7eb      	b.n	3da6 <sqrt+0x8a>
    3dce:	bf00      	nop
    3dd0:	200000ee 	.word	0x200000ee
    3dd4:	00004b08 	.word	0x00004b08

00003dd8 <__ieee754_sqrt>:
    3dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ddc:	4f5b      	ldr	r7, [pc, #364]	; (3f4c <__ieee754_sqrt+0x174>)
    3dde:	438f      	bics	r7, r1
    3de0:	4605      	mov	r5, r0
    3de2:	460c      	mov	r4, r1
    3de4:	f000 8092 	beq.w	3f0c <__ieee754_sqrt+0x134>
    3de8:	2900      	cmp	r1, #0
    3dea:	460b      	mov	r3, r1
    3dec:	4602      	mov	r2, r0
    3dee:	dd6f      	ble.n	3ed0 <__ieee754_sqrt+0xf8>
    3df0:	150f      	asrs	r7, r1, #20
    3df2:	d07b      	beq.n	3eec <__ieee754_sqrt+0x114>
    3df4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    3df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3dfc:	07f8      	lsls	r0, r7, #31
    3dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3e02:	d45c      	bmi.n	3ebe <__ieee754_sqrt+0xe6>
    3e04:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    3e08:	2600      	movs	r6, #0
    3e0a:	440b      	add	r3, r1
    3e0c:	107f      	asrs	r7, r7, #1
    3e0e:	0052      	lsls	r2, r2, #1
    3e10:	46b6      	mov	lr, r6
    3e12:	2016      	movs	r0, #22
    3e14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    3e18:	eb0e 0401 	add.w	r4, lr, r1
    3e1c:	429c      	cmp	r4, r3
    3e1e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    3e22:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3e26:	dc03      	bgt.n	3e30 <__ieee754_sqrt+0x58>
    3e28:	1b1b      	subs	r3, r3, r4
    3e2a:	eb04 0e01 	add.w	lr, r4, r1
    3e2e:	440e      	add	r6, r1
    3e30:	3801      	subs	r0, #1
    3e32:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3e36:	ea4f 0151 	mov.w	r1, r1, lsr #1
    3e3a:	d1ed      	bne.n	3e18 <__ieee754_sqrt+0x40>
    3e3c:	4684      	mov	ip, r0
    3e3e:	2420      	movs	r4, #32
    3e40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3e44:	e009      	b.n	3e5a <__ieee754_sqrt+0x82>
    3e46:	d020      	beq.n	3e8a <__ieee754_sqrt+0xb2>
    3e48:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    3e4c:	3c01      	subs	r4, #1
    3e4e:	ea4f 0151 	mov.w	r1, r1, lsr #1
    3e52:	442b      	add	r3, r5
    3e54:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3e58:	d020      	beq.n	3e9c <__ieee754_sqrt+0xc4>
    3e5a:	4573      	cmp	r3, lr
    3e5c:	eb01 050c 	add.w	r5, r1, ip
    3e60:	ddf1      	ble.n	3e46 <__ieee754_sqrt+0x6e>
    3e62:	2d00      	cmp	r5, #0
    3e64:	eb05 0c01 	add.w	ip, r5, r1
    3e68:	db09      	blt.n	3e7e <__ieee754_sqrt+0xa6>
    3e6a:	46f0      	mov	r8, lr
    3e6c:	4295      	cmp	r5, r2
    3e6e:	eba3 030e 	sub.w	r3, r3, lr
    3e72:	d900      	bls.n	3e76 <__ieee754_sqrt+0x9e>
    3e74:	3b01      	subs	r3, #1
    3e76:	1b52      	subs	r2, r2, r5
    3e78:	4408      	add	r0, r1
    3e7a:	46c6      	mov	lr, r8
    3e7c:	e7e4      	b.n	3e48 <__ieee754_sqrt+0x70>
    3e7e:	f1bc 0f00 	cmp.w	ip, #0
    3e82:	dbf2      	blt.n	3e6a <__ieee754_sqrt+0x92>
    3e84:	f10e 0801 	add.w	r8, lr, #1
    3e88:	e7f0      	b.n	3e6c <__ieee754_sqrt+0x94>
    3e8a:	4295      	cmp	r5, r2
    3e8c:	d8dc      	bhi.n	3e48 <__ieee754_sqrt+0x70>
    3e8e:	2d00      	cmp	r5, #0
    3e90:	eb05 0c01 	add.w	ip, r5, r1
    3e94:	db44      	blt.n	3f20 <__ieee754_sqrt+0x148>
    3e96:	4698      	mov	r8, r3
    3e98:	2300      	movs	r3, #0
    3e9a:	e7ec      	b.n	3e76 <__ieee754_sqrt+0x9e>
    3e9c:	4313      	orrs	r3, r2
    3e9e:	d113      	bne.n	3ec8 <__ieee754_sqrt+0xf0>
    3ea0:	0840      	lsrs	r0, r0, #1
    3ea2:	1073      	asrs	r3, r6, #1
    3ea4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    3ea8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3eac:	07f2      	lsls	r2, r6, #31
    3eae:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    3eb2:	bf48      	it	mi
    3eb4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    3eb8:	4649      	mov	r1, r9
    3eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ebe:	005b      	lsls	r3, r3, #1
    3ec0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    3ec4:	0052      	lsls	r2, r2, #1
    3ec6:	e79d      	b.n	3e04 <__ieee754_sqrt+0x2c>
    3ec8:	1c41      	adds	r1, r0, #1
    3eca:	d02d      	beq.n	3f28 <__ieee754_sqrt+0x150>
    3ecc:	3001      	adds	r0, #1
    3ece:	e7e7      	b.n	3ea0 <__ieee754_sqrt+0xc8>
    3ed0:	4606      	mov	r6, r0
    3ed2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    3ed6:	433e      	orrs	r6, r7
    3ed8:	d0ef      	beq.n	3eba <__ieee754_sqrt+0xe2>
    3eda:	bb69      	cbnz	r1, 3f38 <__ieee754_sqrt+0x160>
    3edc:	460f      	mov	r7, r1
    3ede:	0ad3      	lsrs	r3, r2, #11
    3ee0:	3f15      	subs	r7, #21
    3ee2:	0552      	lsls	r2, r2, #21
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d0fa      	beq.n	3ede <__ieee754_sqrt+0x106>
    3ee8:	02de      	lsls	r6, r3, #11
    3eea:	d420      	bmi.n	3f2e <__ieee754_sqrt+0x156>
    3eec:	2400      	movs	r4, #0
    3eee:	e000      	b.n	3ef2 <__ieee754_sqrt+0x11a>
    3ef0:	4604      	mov	r4, r0
    3ef2:	005b      	lsls	r3, r3, #1
    3ef4:	02dd      	lsls	r5, r3, #11
    3ef6:	f104 0001 	add.w	r0, r4, #1
    3efa:	d5f9      	bpl.n	3ef0 <__ieee754_sqrt+0x118>
    3efc:	f1c0 0120 	rsb	r1, r0, #32
    3f00:	fa22 f101 	lsr.w	r1, r2, r1
    3f04:	430b      	orrs	r3, r1
    3f06:	1b3f      	subs	r7, r7, r4
    3f08:	4082      	lsls	r2, r0
    3f0a:	e773      	b.n	3df4 <__ieee754_sqrt+0x1c>
    3f0c:	4602      	mov	r2, r0
    3f0e:	460b      	mov	r3, r1
    3f10:	f000 f9d8 	bl	42c4 <__aeabi_dmul>
    3f14:	462a      	mov	r2, r5
    3f16:	4623      	mov	r3, r4
    3f18:	f000 f822 	bl	3f60 <__adddf3>
    3f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f20:	f1bc 0f00 	cmp.w	ip, #0
    3f24:	daae      	bge.n	3e84 <__ieee754_sqrt+0xac>
    3f26:	e7b6      	b.n	3e96 <__ieee754_sqrt+0xbe>
    3f28:	3601      	adds	r6, #1
    3f2a:	4620      	mov	r0, r4
    3f2c:	e7b9      	b.n	3ea2 <__ieee754_sqrt+0xca>
    3f2e:	2000      	movs	r0, #0
    3f30:	2120      	movs	r1, #32
    3f32:	f04f 34ff 	mov.w	r4, #4294967295
    3f36:	e7e3      	b.n	3f00 <__ieee754_sqrt+0x128>
    3f38:	4602      	mov	r2, r0
    3f3a:	460b      	mov	r3, r1
    3f3c:	f000 f80e 	bl	3f5c <__aeabi_dsub>
    3f40:	4602      	mov	r2, r0
    3f42:	460b      	mov	r3, r1
    3f44:	f000 fae8 	bl	4518 <__aeabi_ddiv>
    3f48:	e7b7      	b.n	3eba <__ieee754_sqrt+0xe2>
    3f4a:	bf00      	nop
    3f4c:	7ff00000 	.word	0x7ff00000

00003f50 <matherr>:
    3f50:	2000      	movs	r0, #0
    3f52:	4770      	bx	lr

00003f54 <__aeabi_drsub>:
    3f54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3f58:	e002      	b.n	3f60 <__adddf3>
    3f5a:	bf00      	nop

00003f5c <__aeabi_dsub>:
    3f5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003f60 <__adddf3>:
    3f60:	b530      	push	{r4, r5, lr}
    3f62:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3f66:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3f6a:	ea94 0f05 	teq	r4, r5
    3f6e:	bf08      	it	eq
    3f70:	ea90 0f02 	teqeq	r0, r2
    3f74:	bf1f      	itttt	ne
    3f76:	ea54 0c00 	orrsne.w	ip, r4, r0
    3f7a:	ea55 0c02 	orrsne.w	ip, r5, r2
    3f7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3f82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3f86:	f000 80e2 	beq.w	414e <__adddf3+0x1ee>
    3f8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3f8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3f92:	bfb8      	it	lt
    3f94:	426d      	neglt	r5, r5
    3f96:	dd0c      	ble.n	3fb2 <__adddf3+0x52>
    3f98:	442c      	add	r4, r5
    3f9a:	ea80 0202 	eor.w	r2, r0, r2
    3f9e:	ea81 0303 	eor.w	r3, r1, r3
    3fa2:	ea82 0000 	eor.w	r0, r2, r0
    3fa6:	ea83 0101 	eor.w	r1, r3, r1
    3faa:	ea80 0202 	eor.w	r2, r0, r2
    3fae:	ea81 0303 	eor.w	r3, r1, r3
    3fb2:	2d36      	cmp	r5, #54	; 0x36
    3fb4:	bf88      	it	hi
    3fb6:	bd30      	pophi	{r4, r5, pc}
    3fb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3fbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3fc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3fc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3fc8:	d002      	beq.n	3fd0 <__adddf3+0x70>
    3fca:	4240      	negs	r0, r0
    3fcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3fd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3fd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3fd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3fdc:	d002      	beq.n	3fe4 <__adddf3+0x84>
    3fde:	4252      	negs	r2, r2
    3fe0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3fe4:	ea94 0f05 	teq	r4, r5
    3fe8:	f000 80a7 	beq.w	413a <__adddf3+0x1da>
    3fec:	f1a4 0401 	sub.w	r4, r4, #1
    3ff0:	f1d5 0e20 	rsbs	lr, r5, #32
    3ff4:	db0d      	blt.n	4012 <__adddf3+0xb2>
    3ff6:	fa02 fc0e 	lsl.w	ip, r2, lr
    3ffa:	fa22 f205 	lsr.w	r2, r2, r5
    3ffe:	1880      	adds	r0, r0, r2
    4000:	f141 0100 	adc.w	r1, r1, #0
    4004:	fa03 f20e 	lsl.w	r2, r3, lr
    4008:	1880      	adds	r0, r0, r2
    400a:	fa43 f305 	asr.w	r3, r3, r5
    400e:	4159      	adcs	r1, r3
    4010:	e00e      	b.n	4030 <__adddf3+0xd0>
    4012:	f1a5 0520 	sub.w	r5, r5, #32
    4016:	f10e 0e20 	add.w	lr, lr, #32
    401a:	2a01      	cmp	r2, #1
    401c:	fa03 fc0e 	lsl.w	ip, r3, lr
    4020:	bf28      	it	cs
    4022:	f04c 0c02 	orrcs.w	ip, ip, #2
    4026:	fa43 f305 	asr.w	r3, r3, r5
    402a:	18c0      	adds	r0, r0, r3
    402c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4030:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4034:	d507      	bpl.n	4046 <__adddf3+0xe6>
    4036:	f04f 0e00 	mov.w	lr, #0
    403a:	f1dc 0c00 	rsbs	ip, ip, #0
    403e:	eb7e 0000 	sbcs.w	r0, lr, r0
    4042:	eb6e 0101 	sbc.w	r1, lr, r1
    4046:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    404a:	d31b      	bcc.n	4084 <__adddf3+0x124>
    404c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4050:	d30c      	bcc.n	406c <__adddf3+0x10c>
    4052:	0849      	lsrs	r1, r1, #1
    4054:	ea5f 0030 	movs.w	r0, r0, rrx
    4058:	ea4f 0c3c 	mov.w	ip, ip, rrx
    405c:	f104 0401 	add.w	r4, r4, #1
    4060:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4064:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4068:	f080 809a 	bcs.w	41a0 <__adddf3+0x240>
    406c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4070:	bf08      	it	eq
    4072:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4076:	f150 0000 	adcs.w	r0, r0, #0
    407a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    407e:	ea41 0105 	orr.w	r1, r1, r5
    4082:	bd30      	pop	{r4, r5, pc}
    4084:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4088:	4140      	adcs	r0, r0
    408a:	eb41 0101 	adc.w	r1, r1, r1
    408e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4092:	f1a4 0401 	sub.w	r4, r4, #1
    4096:	d1e9      	bne.n	406c <__adddf3+0x10c>
    4098:	f091 0f00 	teq	r1, #0
    409c:	bf04      	itt	eq
    409e:	4601      	moveq	r1, r0
    40a0:	2000      	moveq	r0, #0
    40a2:	fab1 f381 	clz	r3, r1
    40a6:	bf08      	it	eq
    40a8:	3320      	addeq	r3, #32
    40aa:	f1a3 030b 	sub.w	r3, r3, #11
    40ae:	f1b3 0220 	subs.w	r2, r3, #32
    40b2:	da0c      	bge.n	40ce <__adddf3+0x16e>
    40b4:	320c      	adds	r2, #12
    40b6:	dd08      	ble.n	40ca <__adddf3+0x16a>
    40b8:	f102 0c14 	add.w	ip, r2, #20
    40bc:	f1c2 020c 	rsb	r2, r2, #12
    40c0:	fa01 f00c 	lsl.w	r0, r1, ip
    40c4:	fa21 f102 	lsr.w	r1, r1, r2
    40c8:	e00c      	b.n	40e4 <__adddf3+0x184>
    40ca:	f102 0214 	add.w	r2, r2, #20
    40ce:	bfd8      	it	le
    40d0:	f1c2 0c20 	rsble	ip, r2, #32
    40d4:	fa01 f102 	lsl.w	r1, r1, r2
    40d8:	fa20 fc0c 	lsr.w	ip, r0, ip
    40dc:	bfdc      	itt	le
    40de:	ea41 010c 	orrle.w	r1, r1, ip
    40e2:	4090      	lslle	r0, r2
    40e4:	1ae4      	subs	r4, r4, r3
    40e6:	bfa2      	ittt	ge
    40e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    40ec:	4329      	orrge	r1, r5
    40ee:	bd30      	popge	{r4, r5, pc}
    40f0:	ea6f 0404 	mvn.w	r4, r4
    40f4:	3c1f      	subs	r4, #31
    40f6:	da1c      	bge.n	4132 <__adddf3+0x1d2>
    40f8:	340c      	adds	r4, #12
    40fa:	dc0e      	bgt.n	411a <__adddf3+0x1ba>
    40fc:	f104 0414 	add.w	r4, r4, #20
    4100:	f1c4 0220 	rsb	r2, r4, #32
    4104:	fa20 f004 	lsr.w	r0, r0, r4
    4108:	fa01 f302 	lsl.w	r3, r1, r2
    410c:	ea40 0003 	orr.w	r0, r0, r3
    4110:	fa21 f304 	lsr.w	r3, r1, r4
    4114:	ea45 0103 	orr.w	r1, r5, r3
    4118:	bd30      	pop	{r4, r5, pc}
    411a:	f1c4 040c 	rsb	r4, r4, #12
    411e:	f1c4 0220 	rsb	r2, r4, #32
    4122:	fa20 f002 	lsr.w	r0, r0, r2
    4126:	fa01 f304 	lsl.w	r3, r1, r4
    412a:	ea40 0003 	orr.w	r0, r0, r3
    412e:	4629      	mov	r1, r5
    4130:	bd30      	pop	{r4, r5, pc}
    4132:	fa21 f004 	lsr.w	r0, r1, r4
    4136:	4629      	mov	r1, r5
    4138:	bd30      	pop	{r4, r5, pc}
    413a:	f094 0f00 	teq	r4, #0
    413e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4142:	bf06      	itte	eq
    4144:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4148:	3401      	addeq	r4, #1
    414a:	3d01      	subne	r5, #1
    414c:	e74e      	b.n	3fec <__adddf3+0x8c>
    414e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4152:	bf18      	it	ne
    4154:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4158:	d029      	beq.n	41ae <__adddf3+0x24e>
    415a:	ea94 0f05 	teq	r4, r5
    415e:	bf08      	it	eq
    4160:	ea90 0f02 	teqeq	r0, r2
    4164:	d005      	beq.n	4172 <__adddf3+0x212>
    4166:	ea54 0c00 	orrs.w	ip, r4, r0
    416a:	bf04      	itt	eq
    416c:	4619      	moveq	r1, r3
    416e:	4610      	moveq	r0, r2
    4170:	bd30      	pop	{r4, r5, pc}
    4172:	ea91 0f03 	teq	r1, r3
    4176:	bf1e      	ittt	ne
    4178:	2100      	movne	r1, #0
    417a:	2000      	movne	r0, #0
    417c:	bd30      	popne	{r4, r5, pc}
    417e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4182:	d105      	bne.n	4190 <__adddf3+0x230>
    4184:	0040      	lsls	r0, r0, #1
    4186:	4149      	adcs	r1, r1
    4188:	bf28      	it	cs
    418a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    418e:	bd30      	pop	{r4, r5, pc}
    4190:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4194:	bf3c      	itt	cc
    4196:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    419a:	bd30      	popcc	{r4, r5, pc}
    419c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    41a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    41a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    41a8:	f04f 0000 	mov.w	r0, #0
    41ac:	bd30      	pop	{r4, r5, pc}
    41ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    41b2:	bf1a      	itte	ne
    41b4:	4619      	movne	r1, r3
    41b6:	4610      	movne	r0, r2
    41b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    41bc:	bf1c      	itt	ne
    41be:	460b      	movne	r3, r1
    41c0:	4602      	movne	r2, r0
    41c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    41c6:	bf06      	itte	eq
    41c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    41cc:	ea91 0f03 	teqeq	r1, r3
    41d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    41d4:	bd30      	pop	{r4, r5, pc}
    41d6:	bf00      	nop

000041d8 <__aeabi_ui2d>:
    41d8:	f090 0f00 	teq	r0, #0
    41dc:	bf04      	itt	eq
    41de:	2100      	moveq	r1, #0
    41e0:	4770      	bxeq	lr
    41e2:	b530      	push	{r4, r5, lr}
    41e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    41e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    41ec:	f04f 0500 	mov.w	r5, #0
    41f0:	f04f 0100 	mov.w	r1, #0
    41f4:	e750      	b.n	4098 <__adddf3+0x138>
    41f6:	bf00      	nop

000041f8 <__aeabi_i2d>:
    41f8:	f090 0f00 	teq	r0, #0
    41fc:	bf04      	itt	eq
    41fe:	2100      	moveq	r1, #0
    4200:	4770      	bxeq	lr
    4202:	b530      	push	{r4, r5, lr}
    4204:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4208:	f104 0432 	add.w	r4, r4, #50	; 0x32
    420c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4210:	bf48      	it	mi
    4212:	4240      	negmi	r0, r0
    4214:	f04f 0100 	mov.w	r1, #0
    4218:	e73e      	b.n	4098 <__adddf3+0x138>
    421a:	bf00      	nop

0000421c <__aeabi_f2d>:
    421c:	0042      	lsls	r2, r0, #1
    421e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4222:	ea4f 0131 	mov.w	r1, r1, rrx
    4226:	ea4f 7002 	mov.w	r0, r2, lsl #28
    422a:	bf1f      	itttt	ne
    422c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4230:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4234:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4238:	4770      	bxne	lr
    423a:	f092 0f00 	teq	r2, #0
    423e:	bf14      	ite	ne
    4240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4244:	4770      	bxeq	lr
    4246:	b530      	push	{r4, r5, lr}
    4248:	f44f 7460 	mov.w	r4, #896	; 0x380
    424c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4254:	e720      	b.n	4098 <__adddf3+0x138>
    4256:	bf00      	nop

00004258 <__aeabi_ul2d>:
    4258:	ea50 0201 	orrs.w	r2, r0, r1
    425c:	bf08      	it	eq
    425e:	4770      	bxeq	lr
    4260:	b530      	push	{r4, r5, lr}
    4262:	f04f 0500 	mov.w	r5, #0
    4266:	e00a      	b.n	427e <__aeabi_l2d+0x16>

00004268 <__aeabi_l2d>:
    4268:	ea50 0201 	orrs.w	r2, r0, r1
    426c:	bf08      	it	eq
    426e:	4770      	bxeq	lr
    4270:	b530      	push	{r4, r5, lr}
    4272:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4276:	d502      	bpl.n	427e <__aeabi_l2d+0x16>
    4278:	4240      	negs	r0, r0
    427a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    427e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4282:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4286:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    428a:	f43f aedc 	beq.w	4046 <__adddf3+0xe6>
    428e:	f04f 0203 	mov.w	r2, #3
    4292:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4296:	bf18      	it	ne
    4298:	3203      	addne	r2, #3
    429a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    429e:	bf18      	it	ne
    42a0:	3203      	addne	r2, #3
    42a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    42a6:	f1c2 0320 	rsb	r3, r2, #32
    42aa:	fa00 fc03 	lsl.w	ip, r0, r3
    42ae:	fa20 f002 	lsr.w	r0, r0, r2
    42b2:	fa01 fe03 	lsl.w	lr, r1, r3
    42b6:	ea40 000e 	orr.w	r0, r0, lr
    42ba:	fa21 f102 	lsr.w	r1, r1, r2
    42be:	4414      	add	r4, r2
    42c0:	e6c1      	b.n	4046 <__adddf3+0xe6>
    42c2:	bf00      	nop

000042c4 <__aeabi_dmul>:
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    42ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    42ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    42d2:	bf1d      	ittte	ne
    42d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    42d8:	ea94 0f0c 	teqne	r4, ip
    42dc:	ea95 0f0c 	teqne	r5, ip
    42e0:	f000 f8de 	bleq	44a0 <__aeabi_dmul+0x1dc>
    42e4:	442c      	add	r4, r5
    42e6:	ea81 0603 	eor.w	r6, r1, r3
    42ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    42ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    42f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    42f6:	bf18      	it	ne
    42f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    42fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4304:	d038      	beq.n	4378 <__aeabi_dmul+0xb4>
    4306:	fba0 ce02 	umull	ip, lr, r0, r2
    430a:	f04f 0500 	mov.w	r5, #0
    430e:	fbe1 e502 	umlal	lr, r5, r1, r2
    4312:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4316:	fbe0 e503 	umlal	lr, r5, r0, r3
    431a:	f04f 0600 	mov.w	r6, #0
    431e:	fbe1 5603 	umlal	r5, r6, r1, r3
    4322:	f09c 0f00 	teq	ip, #0
    4326:	bf18      	it	ne
    4328:	f04e 0e01 	orrne.w	lr, lr, #1
    432c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4330:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4334:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4338:	d204      	bcs.n	4344 <__aeabi_dmul+0x80>
    433a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    433e:	416d      	adcs	r5, r5
    4340:	eb46 0606 	adc.w	r6, r6, r6
    4344:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4348:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    434c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4350:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4354:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4358:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    435c:	bf88      	it	hi
    435e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4362:	d81e      	bhi.n	43a2 <__aeabi_dmul+0xde>
    4364:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4368:	bf08      	it	eq
    436a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    436e:	f150 0000 	adcs.w	r0, r0, #0
    4372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4376:	bd70      	pop	{r4, r5, r6, pc}
    4378:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    437c:	ea46 0101 	orr.w	r1, r6, r1
    4380:	ea40 0002 	orr.w	r0, r0, r2
    4384:	ea81 0103 	eor.w	r1, r1, r3
    4388:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    438c:	bfc2      	ittt	gt
    438e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4392:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4396:	bd70      	popgt	{r4, r5, r6, pc}
    4398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    439c:	f04f 0e00 	mov.w	lr, #0
    43a0:	3c01      	subs	r4, #1
    43a2:	f300 80ab 	bgt.w	44fc <__aeabi_dmul+0x238>
    43a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    43aa:	bfde      	ittt	le
    43ac:	2000      	movle	r0, #0
    43ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    43b2:	bd70      	pople	{r4, r5, r6, pc}
    43b4:	f1c4 0400 	rsb	r4, r4, #0
    43b8:	3c20      	subs	r4, #32
    43ba:	da35      	bge.n	4428 <__aeabi_dmul+0x164>
    43bc:	340c      	adds	r4, #12
    43be:	dc1b      	bgt.n	43f8 <__aeabi_dmul+0x134>
    43c0:	f104 0414 	add.w	r4, r4, #20
    43c4:	f1c4 0520 	rsb	r5, r4, #32
    43c8:	fa00 f305 	lsl.w	r3, r0, r5
    43cc:	fa20 f004 	lsr.w	r0, r0, r4
    43d0:	fa01 f205 	lsl.w	r2, r1, r5
    43d4:	ea40 0002 	orr.w	r0, r0, r2
    43d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    43dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    43e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    43e4:	fa21 f604 	lsr.w	r6, r1, r4
    43e8:	eb42 0106 	adc.w	r1, r2, r6
    43ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    43f0:	bf08      	it	eq
    43f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    43f6:	bd70      	pop	{r4, r5, r6, pc}
    43f8:	f1c4 040c 	rsb	r4, r4, #12
    43fc:	f1c4 0520 	rsb	r5, r4, #32
    4400:	fa00 f304 	lsl.w	r3, r0, r4
    4404:	fa20 f005 	lsr.w	r0, r0, r5
    4408:	fa01 f204 	lsl.w	r2, r1, r4
    440c:	ea40 0002 	orr.w	r0, r0, r2
    4410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4414:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4418:	f141 0100 	adc.w	r1, r1, #0
    441c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4420:	bf08      	it	eq
    4422:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4426:	bd70      	pop	{r4, r5, r6, pc}
    4428:	f1c4 0520 	rsb	r5, r4, #32
    442c:	fa00 f205 	lsl.w	r2, r0, r5
    4430:	ea4e 0e02 	orr.w	lr, lr, r2
    4434:	fa20 f304 	lsr.w	r3, r0, r4
    4438:	fa01 f205 	lsl.w	r2, r1, r5
    443c:	ea43 0302 	orr.w	r3, r3, r2
    4440:	fa21 f004 	lsr.w	r0, r1, r4
    4444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4448:	fa21 f204 	lsr.w	r2, r1, r4
    444c:	ea20 0002 	bic.w	r0, r0, r2
    4450:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4458:	bf08      	it	eq
    445a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    445e:	bd70      	pop	{r4, r5, r6, pc}
    4460:	f094 0f00 	teq	r4, #0
    4464:	d10f      	bne.n	4486 <__aeabi_dmul+0x1c2>
    4466:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    446a:	0040      	lsls	r0, r0, #1
    446c:	eb41 0101 	adc.w	r1, r1, r1
    4470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4474:	bf08      	it	eq
    4476:	3c01      	subeq	r4, #1
    4478:	d0f7      	beq.n	446a <__aeabi_dmul+0x1a6>
    447a:	ea41 0106 	orr.w	r1, r1, r6
    447e:	f095 0f00 	teq	r5, #0
    4482:	bf18      	it	ne
    4484:	4770      	bxne	lr
    4486:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    448a:	0052      	lsls	r2, r2, #1
    448c:	eb43 0303 	adc.w	r3, r3, r3
    4490:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4494:	bf08      	it	eq
    4496:	3d01      	subeq	r5, #1
    4498:	d0f7      	beq.n	448a <__aeabi_dmul+0x1c6>
    449a:	ea43 0306 	orr.w	r3, r3, r6
    449e:	4770      	bx	lr
    44a0:	ea94 0f0c 	teq	r4, ip
    44a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    44a8:	bf18      	it	ne
    44aa:	ea95 0f0c 	teqne	r5, ip
    44ae:	d00c      	beq.n	44ca <__aeabi_dmul+0x206>
    44b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    44b4:	bf18      	it	ne
    44b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    44ba:	d1d1      	bne.n	4460 <__aeabi_dmul+0x19c>
    44bc:	ea81 0103 	eor.w	r1, r1, r3
    44c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    44c4:	f04f 0000 	mov.w	r0, #0
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    44ce:	bf06      	itte	eq
    44d0:	4610      	moveq	r0, r2
    44d2:	4619      	moveq	r1, r3
    44d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    44d8:	d019      	beq.n	450e <__aeabi_dmul+0x24a>
    44da:	ea94 0f0c 	teq	r4, ip
    44de:	d102      	bne.n	44e6 <__aeabi_dmul+0x222>
    44e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    44e4:	d113      	bne.n	450e <__aeabi_dmul+0x24a>
    44e6:	ea95 0f0c 	teq	r5, ip
    44ea:	d105      	bne.n	44f8 <__aeabi_dmul+0x234>
    44ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    44f0:	bf1c      	itt	ne
    44f2:	4610      	movne	r0, r2
    44f4:	4619      	movne	r1, r3
    44f6:	d10a      	bne.n	450e <__aeabi_dmul+0x24a>
    44f8:	ea81 0103 	eor.w	r1, r1, r3
    44fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4500:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4508:	f04f 0000 	mov.w	r0, #0
    450c:	bd70      	pop	{r4, r5, r6, pc}
    450e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4512:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4516:	bd70      	pop	{r4, r5, r6, pc}

00004518 <__aeabi_ddiv>:
    4518:	b570      	push	{r4, r5, r6, lr}
    451a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    451e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4526:	bf1d      	ittte	ne
    4528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    452c:	ea94 0f0c 	teqne	r4, ip
    4530:	ea95 0f0c 	teqne	r5, ip
    4534:	f000 f8a7 	bleq	4686 <__aeabi_ddiv+0x16e>
    4538:	eba4 0405 	sub.w	r4, r4, r5
    453c:	ea81 0e03 	eor.w	lr, r1, r3
    4540:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4544:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4548:	f000 8088 	beq.w	465c <__aeabi_ddiv+0x144>
    454c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4550:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4554:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4558:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    455c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4560:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4564:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    4568:	ea4f 2600 	mov.w	r6, r0, lsl #8
    456c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4570:	429d      	cmp	r5, r3
    4572:	bf08      	it	eq
    4574:	4296      	cmpeq	r6, r2
    4576:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    457a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    457e:	d202      	bcs.n	4586 <__aeabi_ddiv+0x6e>
    4580:	085b      	lsrs	r3, r3, #1
    4582:	ea4f 0232 	mov.w	r2, r2, rrx
    4586:	1ab6      	subs	r6, r6, r2
    4588:	eb65 0503 	sbc.w	r5, r5, r3
    458c:	085b      	lsrs	r3, r3, #1
    458e:	ea4f 0232 	mov.w	r2, r2, rrx
    4592:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4596:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    459a:	ebb6 0e02 	subs.w	lr, r6, r2
    459e:	eb75 0e03 	sbcs.w	lr, r5, r3
    45a2:	bf22      	ittt	cs
    45a4:	1ab6      	subcs	r6, r6, r2
    45a6:	4675      	movcs	r5, lr
    45a8:	ea40 000c 	orrcs.w	r0, r0, ip
    45ac:	085b      	lsrs	r3, r3, #1
    45ae:	ea4f 0232 	mov.w	r2, r2, rrx
    45b2:	ebb6 0e02 	subs.w	lr, r6, r2
    45b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    45ba:	bf22      	ittt	cs
    45bc:	1ab6      	subcs	r6, r6, r2
    45be:	4675      	movcs	r5, lr
    45c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    45c4:	085b      	lsrs	r3, r3, #1
    45c6:	ea4f 0232 	mov.w	r2, r2, rrx
    45ca:	ebb6 0e02 	subs.w	lr, r6, r2
    45ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    45d2:	bf22      	ittt	cs
    45d4:	1ab6      	subcs	r6, r6, r2
    45d6:	4675      	movcs	r5, lr
    45d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    45dc:	085b      	lsrs	r3, r3, #1
    45de:	ea4f 0232 	mov.w	r2, r2, rrx
    45e2:	ebb6 0e02 	subs.w	lr, r6, r2
    45e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    45ea:	bf22      	ittt	cs
    45ec:	1ab6      	subcs	r6, r6, r2
    45ee:	4675      	movcs	r5, lr
    45f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    45f4:	ea55 0e06 	orrs.w	lr, r5, r6
    45f8:	d018      	beq.n	462c <__aeabi_ddiv+0x114>
    45fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    45fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    4602:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4606:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    460a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    460e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4612:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4616:	d1c0      	bne.n	459a <__aeabi_ddiv+0x82>
    4618:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    461c:	d10b      	bne.n	4636 <__aeabi_ddiv+0x11e>
    461e:	ea41 0100 	orr.w	r1, r1, r0
    4622:	f04f 0000 	mov.w	r0, #0
    4626:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    462a:	e7b6      	b.n	459a <__aeabi_ddiv+0x82>
    462c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4630:	bf04      	itt	eq
    4632:	4301      	orreq	r1, r0
    4634:	2000      	moveq	r0, #0
    4636:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    463a:	bf88      	it	hi
    463c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4640:	f63f aeaf 	bhi.w	43a2 <__aeabi_dmul+0xde>
    4644:	ebb5 0c03 	subs.w	ip, r5, r3
    4648:	bf04      	itt	eq
    464a:	ebb6 0c02 	subseq.w	ip, r6, r2
    464e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4652:	f150 0000 	adcs.w	r0, r0, #0
    4656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    465a:	bd70      	pop	{r4, r5, r6, pc}
    465c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4660:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4664:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4668:	bfc2      	ittt	gt
    466a:	ebd4 050c 	rsbsgt	r5, r4, ip
    466e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4672:	bd70      	popgt	{r4, r5, r6, pc}
    4674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4678:	f04f 0e00 	mov.w	lr, #0
    467c:	3c01      	subs	r4, #1
    467e:	e690      	b.n	43a2 <__aeabi_dmul+0xde>
    4680:	ea45 0e06 	orr.w	lr, r5, r6
    4684:	e68d      	b.n	43a2 <__aeabi_dmul+0xde>
    4686:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    468a:	ea94 0f0c 	teq	r4, ip
    468e:	bf08      	it	eq
    4690:	ea95 0f0c 	teqeq	r5, ip
    4694:	f43f af3b 	beq.w	450e <__aeabi_dmul+0x24a>
    4698:	ea94 0f0c 	teq	r4, ip
    469c:	d10a      	bne.n	46b4 <__aeabi_ddiv+0x19c>
    469e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    46a2:	f47f af34 	bne.w	450e <__aeabi_dmul+0x24a>
    46a6:	ea95 0f0c 	teq	r5, ip
    46aa:	f47f af25 	bne.w	44f8 <__aeabi_dmul+0x234>
    46ae:	4610      	mov	r0, r2
    46b0:	4619      	mov	r1, r3
    46b2:	e72c      	b.n	450e <__aeabi_dmul+0x24a>
    46b4:	ea95 0f0c 	teq	r5, ip
    46b8:	d106      	bne.n	46c8 <__aeabi_ddiv+0x1b0>
    46ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    46be:	f43f aefd 	beq.w	44bc <__aeabi_dmul+0x1f8>
    46c2:	4610      	mov	r0, r2
    46c4:	4619      	mov	r1, r3
    46c6:	e722      	b.n	450e <__aeabi_dmul+0x24a>
    46c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    46cc:	bf18      	it	ne
    46ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    46d2:	f47f aec5 	bne.w	4460 <__aeabi_dmul+0x19c>
    46d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    46da:	f47f af0d 	bne.w	44f8 <__aeabi_dmul+0x234>
    46de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    46e2:	f47f aeeb 	bne.w	44bc <__aeabi_dmul+0x1f8>
    46e6:	e712      	b.n	450e <__aeabi_dmul+0x24a>

000046e8 <__gedf2>:
    46e8:	f04f 3cff 	mov.w	ip, #4294967295
    46ec:	e006      	b.n	46fc <__cmpdf2+0x4>
    46ee:	bf00      	nop

000046f0 <__ledf2>:
    46f0:	f04f 0c01 	mov.w	ip, #1
    46f4:	e002      	b.n	46fc <__cmpdf2+0x4>
    46f6:	bf00      	nop

000046f8 <__cmpdf2>:
    46f8:	f04f 0c01 	mov.w	ip, #1
    46fc:	f84d cd04 	str.w	ip, [sp, #-4]!
    4700:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4704:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4708:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    470c:	bf18      	it	ne
    470e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    4712:	d01b      	beq.n	474c <__cmpdf2+0x54>
    4714:	b001      	add	sp, #4
    4716:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    471a:	bf0c      	ite	eq
    471c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    4720:	ea91 0f03 	teqne	r1, r3
    4724:	bf02      	ittt	eq
    4726:	ea90 0f02 	teqeq	r0, r2
    472a:	2000      	moveq	r0, #0
    472c:	4770      	bxeq	lr
    472e:	f110 0f00 	cmn.w	r0, #0
    4732:	ea91 0f03 	teq	r1, r3
    4736:	bf58      	it	pl
    4738:	4299      	cmppl	r1, r3
    473a:	bf08      	it	eq
    473c:	4290      	cmpeq	r0, r2
    473e:	bf2c      	ite	cs
    4740:	17d8      	asrcs	r0, r3, #31
    4742:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    4746:	f040 0001 	orr.w	r0, r0, #1
    474a:	4770      	bx	lr
    474c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4754:	d102      	bne.n	475c <__cmpdf2+0x64>
    4756:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    475a:	d107      	bne.n	476c <__cmpdf2+0x74>
    475c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4764:	d1d6      	bne.n	4714 <__cmpdf2+0x1c>
    4766:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    476a:	d0d3      	beq.n	4714 <__cmpdf2+0x1c>
    476c:	f85d 0b04 	ldr.w	r0, [sp], #4
    4770:	4770      	bx	lr
    4772:	bf00      	nop

00004774 <__aeabi_cdrcmple>:
    4774:	4684      	mov	ip, r0
    4776:	4610      	mov	r0, r2
    4778:	4662      	mov	r2, ip
    477a:	468c      	mov	ip, r1
    477c:	4619      	mov	r1, r3
    477e:	4663      	mov	r3, ip
    4780:	e000      	b.n	4784 <__aeabi_cdcmpeq>
    4782:	bf00      	nop

00004784 <__aeabi_cdcmpeq>:
    4784:	b501      	push	{r0, lr}
    4786:	f7ff ffb7 	bl	46f8 <__cmpdf2>
    478a:	2800      	cmp	r0, #0
    478c:	bf48      	it	mi
    478e:	f110 0f00 	cmnmi.w	r0, #0
    4792:	bd01      	pop	{r0, pc}

00004794 <__aeabi_dcmpeq>:
    4794:	f84d ed08 	str.w	lr, [sp, #-8]!
    4798:	f7ff fff4 	bl	4784 <__aeabi_cdcmpeq>
    479c:	bf0c      	ite	eq
    479e:	2001      	moveq	r0, #1
    47a0:	2000      	movne	r0, #0
    47a2:	f85d fb08 	ldr.w	pc, [sp], #8
    47a6:	bf00      	nop

000047a8 <__aeabi_dcmplt>:
    47a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    47ac:	f7ff ffea 	bl	4784 <__aeabi_cdcmpeq>
    47b0:	bf34      	ite	cc
    47b2:	2001      	movcc	r0, #1
    47b4:	2000      	movcs	r0, #0
    47b6:	f85d fb08 	ldr.w	pc, [sp], #8
    47ba:	bf00      	nop

000047bc <__aeabi_dcmple>:
    47bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    47c0:	f7ff ffe0 	bl	4784 <__aeabi_cdcmpeq>
    47c4:	bf94      	ite	ls
    47c6:	2001      	movls	r0, #1
    47c8:	2000      	movhi	r0, #0
    47ca:	f85d fb08 	ldr.w	pc, [sp], #8
    47ce:	bf00      	nop

000047d0 <__aeabi_dcmpge>:
    47d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    47d4:	f7ff ffce 	bl	4774 <__aeabi_cdrcmple>
    47d8:	bf94      	ite	ls
    47da:	2001      	movls	r0, #1
    47dc:	2000      	movhi	r0, #0
    47de:	f85d fb08 	ldr.w	pc, [sp], #8
    47e2:	bf00      	nop

000047e4 <__aeabi_dcmpgt>:
    47e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    47e8:	f7ff ffc4 	bl	4774 <__aeabi_cdrcmple>
    47ec:	bf34      	ite	cc
    47ee:	2001      	movcc	r0, #1
    47f0:	2000      	movcs	r0, #0
    47f2:	f85d fb08 	ldr.w	pc, [sp], #8
    47f6:	bf00      	nop

000047f8 <__aeabi_dcmpun>:
    47f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    47fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4800:	d102      	bne.n	4808 <__aeabi_dcmpun+0x10>
    4802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4806:	d10a      	bne.n	481e <__aeabi_dcmpun+0x26>
    4808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    480c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4810:	d102      	bne.n	4818 <__aeabi_dcmpun+0x20>
    4812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4816:	d102      	bne.n	481e <__aeabi_dcmpun+0x26>
    4818:	f04f 0000 	mov.w	r0, #0
    481c:	4770      	bx	lr
    481e:	f04f 0001 	mov.w	r0, #1
    4822:	4770      	bx	lr

00004824 <__aeabi_d2f>:
    4824:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4828:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    482c:	bf24      	itt	cs
    482e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4832:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4836:	d90d      	bls.n	4854 <__aeabi_d2f+0x30>
    4838:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    483c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4840:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4844:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4848:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    484c:	bf08      	it	eq
    484e:	f020 0001 	biceq.w	r0, r0, #1
    4852:	4770      	bx	lr
    4854:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4858:	d121      	bne.n	489e <__aeabi_d2f+0x7a>
    485a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    485e:	bfbc      	itt	lt
    4860:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4864:	4770      	bxlt	lr
    4866:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    486a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    486e:	f1c2 0218 	rsb	r2, r2, #24
    4872:	f1c2 0c20 	rsb	ip, r2, #32
    4876:	fa10 f30c 	lsls.w	r3, r0, ip
    487a:	fa20 f002 	lsr.w	r0, r0, r2
    487e:	bf18      	it	ne
    4880:	f040 0001 	orrne.w	r0, r0, #1
    4884:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4888:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    488c:	fa03 fc0c 	lsl.w	ip, r3, ip
    4890:	ea40 000c 	orr.w	r0, r0, ip
    4894:	fa23 f302 	lsr.w	r3, r3, r2
    4898:	ea4f 0343 	mov.w	r3, r3, lsl #1
    489c:	e7cc      	b.n	4838 <__aeabi_d2f+0x14>
    489e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    48a2:	d107      	bne.n	48b4 <__aeabi_d2f+0x90>
    48a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    48a8:	bf1e      	ittt	ne
    48aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    48ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    48b2:	4770      	bxne	lr
    48b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    48b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    48bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    48c0:	4770      	bx	lr
    48c2:	bf00      	nop

000048c4 <__errno>:
    48c4:	4b01      	ldr	r3, [pc, #4]	; (48cc <__errno+0x8>)
    48c6:	6818      	ldr	r0, [r3, #0]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	200000f0 	.word	0x200000f0

000048d0 <__libc_init_array>:
    48d0:	b570      	push	{r4, r5, r6, lr}
    48d2:	4e0d      	ldr	r6, [pc, #52]	; (4908 <__libc_init_array+0x38>)
    48d4:	4c0d      	ldr	r4, [pc, #52]	; (490c <__libc_init_array+0x3c>)
    48d6:	1ba4      	subs	r4, r4, r6
    48d8:	10a4      	asrs	r4, r4, #2
    48da:	2500      	movs	r5, #0
    48dc:	42a5      	cmp	r5, r4
    48de:	d109      	bne.n	48f4 <__libc_init_array+0x24>
    48e0:	4e0b      	ldr	r6, [pc, #44]	; (4910 <__libc_init_array+0x40>)
    48e2:	4c0c      	ldr	r4, [pc, #48]	; (4914 <__libc_init_array+0x44>)
    48e4:	f000 f944 	bl	4b70 <_init>
    48e8:	1ba4      	subs	r4, r4, r6
    48ea:	10a4      	asrs	r4, r4, #2
    48ec:	2500      	movs	r5, #0
    48ee:	42a5      	cmp	r5, r4
    48f0:	d105      	bne.n	48fe <__libc_init_array+0x2e>
    48f2:	bd70      	pop	{r4, r5, r6, pc}
    48f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    48f8:	4798      	blx	r3
    48fa:	3501      	adds	r5, #1
    48fc:	e7ee      	b.n	48dc <__libc_init_array+0xc>
    48fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4902:	4798      	blx	r3
    4904:	3501      	adds	r5, #1
    4906:	e7f2      	b.n	48ee <__libc_init_array+0x1e>
    4908:	00004b7c 	.word	0x00004b7c
    490c:	00004b7c 	.word	0x00004b7c
    4910:	00004b7c 	.word	0x00004b7c
    4914:	00004b80 	.word	0x00004b80

00004918 <dummy_register>:
    4918:	20000008                                ... 

0000491c <abort_fifo_start>:
    491c:	20000012                                ... 

00004920 <wr_pdram_start>:
    4920:	2000004e                                N.. 

00004924 <cf_pdram_start>:
    4924:	20000038                                8.. 

00004928 <rd_pdram_start>:
    4928:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    4938:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    4948:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    4958:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    4968:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

00004978 <_cfgs>:
    4978:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    4a78:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4a88:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00004a98 <_usarts>:
	...

00004ab0 <_i2cms>:
    4ab0:	00000003 70200014 00000100 000000ff     ...... p........
    4ac0:	00d70000 05f5e100                       ........

00004ac8 <_i2css>:
	...

00004ad8 <sercomspi_regs>:
    4ad8:	0030000c 00020000 00000000 01ff0004     ..0.............
    4ae8:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4af8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    4b08:	74727173 00000000                       sqrt....

00004b10 <__sf_fake_stderr>:
	...

00004b30 <__sf_fake_stdin>:
	...

00004b50 <__sf_fake_stdout>:
	...

00004b70 <_init>:
    4b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b72:	bf00      	nop
    4b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b76:	bc08      	pop	{r3}
    4b78:	469e      	mov	lr, r3
    4b7a:	4770      	bx	lr

00004b7c <__init_array_start>:
    4b7c:	00000289 	.word	0x00000289

00004b80 <_fini>:
    4b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b82:	bf00      	nop
    4b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b86:	bc08      	pop	{r3}
    4b88:	469e      	mov	lr, r3
    4b8a:	4770      	bx	lr

00004b8c <__fini_array_start>:
    4b8c:	00000265 	.word	0x00000265
