
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067f4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000154  20000000  000067f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020154  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020154  2**0
                  CONTENTS
  4 .bss          00001218  20000160  00006960  00020160  2**4
                  ALLOC
  5 .stack        00010000  20001378  00007b78  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003111b  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000037bf  00000000  00000000  000512f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001025b  00000000  00000000  00054ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  00064d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e08  00000000  00000000  00065a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034c0f  00000000  00000000  00066838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015684  00000000  00000000  0009b447  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121d06  00000000  00000000  000b0acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000027cc  00000000  00000000  001d27d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 13 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     x.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	b1 0f 00 00 bd 0f 00 00 c9 0f 00 00 d5 0f 00 00     ................
      cc:	e1 0f 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	bd 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 75 22 00 00 dd 02 00 00 dd 02 00 00     ....u"..........
     204:	dd 02 00 00 41 07 00 00 dd 02 00 00 dd 02 00 00     ....A...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	000067f4 	.word	0x000067f4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000067f4 	.word	0x000067f4
     2c4:	20000164 	.word	0x20000164
     2c8:	000067f4 	.word	0x000067f4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
     2d0:	b508      	push	{r3, lr}
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000555 	.word	0x00000555

000002dc <Dummy_Handler>:
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
     2e0:	b508      	push	{r3, lr}
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	000067f4 	.word	0x000067f4
     340:	20000154 	.word	0x20000154
     344:	20000160 	.word	0x20000160
     348:	20001378 	.word	0x20001378
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00006535 	.word	0x00006535
     358:	000020e5 	.word	0x000020e5

0000035c <I2C_0_PORT_init>:
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     372:	f042 0201 	orr.w	r2, r2, #1
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     382:	f042 0202 	orr.w	r2, r2, #2
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     39e:	f042 0201 	orr.w	r2, r2, #1
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     3aa:	f002 020f 	and.w	r2, r2, #15
     3ae:	f042 0220 	orr.w	r2, r2, #32
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:
     3e0:	b508      	push	{r3, lr}
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	200003b0 	.word	0x200003b0
     400:	00000a4d 	.word	0x00000a4d
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     42c:	f042 0201 	orr.w	r2, r2, #1
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     43c:	f042 0202 	orr.w	r2, r2, #2
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     462:	f042 0201 	orr.w	r2, r2, #1
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     46e:	f002 020f 	and.w	r2, r2, #15
     472:	f042 0220 	orr.w	r2, r2, #32
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     4a0:	f042 0201 	orr.w	r2, r2, #1
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     4ac:	f002 020f 	and.w	r2, r2, #15
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:
     4f4:	b508      	push	{r3, lr}
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	20000380 	.word	0x20000380
     514:	00000b81 	.word	0x00000b81
     518:	00000409 	.word	0x00000409

0000051c <TIMER_1_CLOCK_init>:
     51c:	4a04      	ldr	r2, [pc, #16]	; (530 <TIMER_1_CLOCK_init+0x14>)
     51e:	6993      	ldr	r3, [r2, #24]
     520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     524:	6193      	str	r3, [r2, #24]
     526:	2240      	movs	r2, #64	; 0x40
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <TIMER_1_CLOCK_init+0x18>)
     52a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     52e:	4770      	bx	lr
     530:	40000800 	.word	0x40000800
     534:	40001c00 	.word	0x40001c00

00000538 <TIMER_0_CLOCK_init>:
     538:	4a04      	ldr	r2, [pc, #16]	; (54c <TIMER_0_CLOCK_init+0x14>)
     53a:	6a13      	ldr	r3, [r2, #32]
     53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     540:	6213      	str	r3, [r2, #32]
     542:	2240      	movs	r2, #64	; 0x40
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <TIMER_0_CLOCK_init+0x18>)
     546:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800
     550:	40001c00 	.word	0x40001c00

00000554 <system_init>:
     554:	b508      	push	{r3, lr}
     556:	4b18      	ldr	r3, [pc, #96]	; (5b8 <system_init+0x64>)
     558:	4798      	blx	r3
     55a:	4b18      	ldr	r3, [pc, #96]	; (5bc <system_init+0x68>)
     55c:	2240      	movs	r2, #64	; 0x40
     55e:	615a      	str	r2, [r3, #20]
     560:	609a      	str	r2, [r3, #8]
     562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     566:	629a      	str	r2, [r3, #40]	; 0x28
     568:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     56c:	6299      	str	r1, [r3, #40]	; 0x28
     56e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
     57a:	2201      	movs	r2, #1
     57c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     584:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     58c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     590:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
     594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     598:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
     59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <system_init+0x6c>)
     59e:	4798      	blx	r3
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <system_init+0x70>)
     5a2:	4798      	blx	r3
     5a4:	4b08      	ldr	r3, [pc, #32]	; (5c8 <system_init+0x74>)
     5a6:	4798      	blx	r3
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <system_init+0x78>)
     5aa:	4798      	blx	r3
     5ac:	4b08      	ldr	r3, [pc, #32]	; (5d0 <system_init+0x7c>)
     5ae:	4798      	blx	r3
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <system_init+0x80>)
     5b2:	4798      	blx	r3
     5b4:	bd08      	pop	{r3, pc}
     5b6:	bf00      	nop
     5b8:	00000c71 	.word	0x00000c71
     5bc:	41008000 	.word	0x41008000
     5c0:	000003e1 	.word	0x000003e1
     5c4:	000004f5 	.word	0x000004f5
     5c8:	0000051d 	.word	0x0000051d
     5cc:	00001ce5 	.word	0x00001ce5
     5d0:	00000539 	.word	0x00000539
     5d4:	00001da9 	.word	0x00001da9

000005d8 <LAN9252_rx_susp>:
     5d8:	2201      	movs	r2, #1
     5da:	4b11      	ldr	r3, [pc, #68]	; (620 <LAN9252_rx_susp+0x48>)
     5dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     5e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     5e6:	68da      	ldr	r2, [r3, #12]
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <LAN9252_rx_susp+0x4c>)
     5ea:	429a      	cmp	r2, r3
     5ec:	d00d      	beq.n	60a <LAN9252_rx_susp+0x32>
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <LAN9252_rx_susp+0x50>)
     5f0:	2202      	movs	r2, #2
     5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     5f6:	2001      	movs	r0, #1
     5f8:	4909      	ldr	r1, [pc, #36]	; (620 <LAN9252_rx_susp+0x48>)
     5fa:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
     5fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
     602:	2200      	movs	r2, #0
     604:	4b09      	ldr	r3, [pc, #36]	; (62c <LAN9252_rx_susp+0x54>)
     606:	701a      	strb	r2, [r3, #0]
     608:	4770      	bx	lr
     60a:	2301      	movs	r3, #1
     60c:	4a07      	ldr	r2, [pc, #28]	; (62c <LAN9252_rx_susp+0x54>)
     60e:	7013      	strb	r3, [r2, #0]
     610:	4a07      	ldr	r2, [pc, #28]	; (630 <LAN9252_rx_susp+0x58>)
     612:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     614:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <LAN9252_rx_susp+0x5c>)
     61a:	60da      	str	r2, [r3, #12]
     61c:	4770      	bx	lr
     61e:	bf00      	nop
     620:	41008000 	.word	0x41008000
     624:	20000558 	.word	0x20000558
     628:	4100a000 	.word	0x4100a000
     62c:	20000568 	.word	0x20000568
     630:	20000520 	.word	0x20000520
     634:	e000e100 	.word	0xe000e100

00000638 <setup_transfer_descriptor>:
     638:	b430      	push	{r4, r5}
     63a:	880c      	ldrh	r4, [r1, #0]
     63c:	b2a4      	uxth	r4, r4
     63e:	f044 0401 	orr.w	r4, r4, #1
     642:	800c      	strh	r4, [r1, #0]
     644:	880c      	ldrh	r4, [r1, #0]
     646:	b2a4      	uxth	r4, r4
     648:	f044 0406 	orr.w	r4, r4, #6
     64c:	800c      	strh	r4, [r1, #0]
     64e:	880c      	ldrh	r4, [r1, #0]
     650:	b2a4      	uxth	r4, r4
     652:	f024 0418 	bic.w	r4, r4, #24
     656:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     65a:	00ed      	lsls	r5, r5, #3
     65c:	f005 0518 	and.w	r5, r5, #24
     660:	432c      	orrs	r4, r5
     662:	800c      	strh	r4, [r1, #0]
     664:	880c      	ldrh	r4, [r1, #0]
     666:	b2a4      	uxth	r4, r4
     668:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     66c:	b2a4      	uxth	r4, r4
     66e:	800c      	strh	r4, [r1, #0]
     670:	2803      	cmp	r0, #3
     672:	d814      	bhi.n	69e <setup_transfer_descriptor+0x66>
     674:	e8df f000 	tbb	[pc, r0]
     678:	4b253902 	.word	0x4b253902
     67c:	8808      	ldrh	r0, [r1, #0]
     67e:	b280      	uxth	r0, r0
     680:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
     684:	8008      	strh	r0, [r1, #0]
     686:	8808      	ldrh	r0, [r1, #0]
     688:	b280      	uxth	r0, r0
     68a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     68e:	b280      	uxth	r0, r0
     690:	8008      	strh	r0, [r1, #0]
     692:	441a      	add	r2, r3
     694:	6848      	ldr	r0, [r1, #4]
     696:	604a      	str	r2, [r1, #4]
     698:	688a      	ldr	r2, [r1, #8]
     69a:	4a26      	ldr	r2, [pc, #152]	; (734 <setup_transfer_descriptor+0xfc>)
     69c:	608a      	str	r2, [r1, #8]
     69e:	880a      	ldrh	r2, [r1, #0]
     6a0:	b292      	uxth	r2, r2
     6a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     6a6:	b292      	uxth	r2, r2
     6a8:	800a      	strh	r2, [r1, #0]
     6aa:	880a      	ldrh	r2, [r1, #0]
     6ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
     6b0:	800a      	strh	r2, [r1, #0]
     6b2:	b29b      	uxth	r3, r3
     6b4:	884a      	ldrh	r2, [r1, #2]
     6b6:	804b      	strh	r3, [r1, #2]
     6b8:	68cb      	ldr	r3, [r1, #12]
     6ba:	9b02      	ldr	r3, [sp, #8]
     6bc:	60cb      	str	r3, [r1, #12]
     6be:	bc30      	pop	{r4, r5}
     6c0:	4770      	bx	lr
     6c2:	880a      	ldrh	r2, [r1, #0]
     6c4:	b292      	uxth	r2, r2
     6c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     6ca:	b292      	uxth	r2, r2
     6cc:	800a      	strh	r2, [r1, #0]
     6ce:	880a      	ldrh	r2, [r1, #0]
     6d0:	b292      	uxth	r2, r2
     6d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     6d6:	b292      	uxth	r2, r2
     6d8:	800a      	strh	r2, [r1, #0]
     6da:	4a17      	ldr	r2, [pc, #92]	; (738 <setup_transfer_descriptor+0x100>)
     6dc:	6812      	ldr	r2, [r2, #0]
     6de:	6848      	ldr	r0, [r1, #4]
     6e0:	604a      	str	r2, [r1, #4]
     6e2:	688a      	ldr	r2, [r1, #8]
     6e4:	4a13      	ldr	r2, [pc, #76]	; (734 <setup_transfer_descriptor+0xfc>)
     6e6:	608a      	str	r2, [r1, #8]
     6e8:	e7d9      	b.n	69e <setup_transfer_descriptor+0x66>
     6ea:	8808      	ldrh	r0, [r1, #0]
     6ec:	b280      	uxth	r0, r0
     6ee:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     6f2:	b280      	uxth	r0, r0
     6f4:	8008      	strh	r0, [r1, #0]
     6f6:	8808      	ldrh	r0, [r1, #0]
     6f8:	b280      	uxth	r0, r0
     6fa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
     6fe:	8008      	strh	r0, [r1, #0]
     700:	6848      	ldr	r0, [r1, #4]
     702:	480c      	ldr	r0, [pc, #48]	; (734 <setup_transfer_descriptor+0xfc>)
     704:	6048      	str	r0, [r1, #4]
     706:	441a      	add	r2, r3
     708:	6888      	ldr	r0, [r1, #8]
     70a:	608a      	str	r2, [r1, #8]
     70c:	e7c7      	b.n	69e <setup_transfer_descriptor+0x66>
     70e:	880a      	ldrh	r2, [r1, #0]
     710:	b292      	uxth	r2, r2
     712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     716:	b292      	uxth	r2, r2
     718:	800a      	strh	r2, [r1, #0]
     71a:	880a      	ldrh	r2, [r1, #0]
     71c:	b292      	uxth	r2, r2
     71e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     722:	b292      	uxth	r2, r2
     724:	800a      	strh	r2, [r1, #0]
     726:	684a      	ldr	r2, [r1, #4]
     728:	4a02      	ldr	r2, [pc, #8]	; (734 <setup_transfer_descriptor+0xfc>)
     72a:	604a      	str	r2, [r1, #4]
     72c:	688a      	ldr	r2, [r1, #8]
     72e:	4a03      	ldr	r2, [pc, #12]	; (73c <setup_transfer_descriptor+0x104>)
     730:	608a      	str	r2, [r1, #8]
     732:	e7b4      	b.n	69e <setup_transfer_descriptor+0x66>
     734:	43000428 	.word	0x43000428
     738:	0000657c 	.word	0x0000657c
     73c:	20000420 	.word	0x20000420

00000740 <TC7_Handler>:
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	b083      	sub	sp, #12
     744:	4a16      	ldr	r2, [pc, #88]	; (7a0 <TC7_Handler+0x60>)
     746:	7a93      	ldrb	r3, [r2, #10]
     748:	f043 0301 	orr.w	r3, r3, #1
     74c:	7293      	strb	r3, [r2, #10]
     74e:	2201      	movs	r2, #1
     750:	4b14      	ldr	r3, [pc, #80]	; (7a4 <TC7_Handler+0x64>)
     752:	701a      	strb	r2, [r3, #0]
     754:	4b14      	ldr	r3, [pc, #80]	; (7a8 <TC7_Handler+0x68>)
     756:	781b      	ldrb	r3, [r3, #0]
     758:	b183      	cbz	r3, 77c <TC7_Handler+0x3c>
     75a:	2300      	movs	r3, #0
     75c:	9301      	str	r3, [sp, #4]
     75e:	4611      	mov	r1, r2
     760:	4a12      	ldr	r2, [pc, #72]	; (7ac <TC7_Handler+0x6c>)
     762:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
     766:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     76a:	2102      	movs	r1, #2
     76c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
     770:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
     774:	4a0c      	ldr	r2, [pc, #48]	; (7a8 <TC7_Handler+0x68>)
     776:	7013      	strb	r3, [r2, #0]
     778:	b003      	add	sp, #12
     77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     77c:	4b0b      	ldr	r3, [pc, #44]	; (7ac <TC7_Handler+0x6c>)
     77e:	2501      	movs	r5, #1
     780:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
     784:	4e08      	ldr	r6, [pc, #32]	; (7a8 <TC7_Handler+0x68>)
     786:	2400      	movs	r4, #0
     788:	7034      	strb	r4, [r6, #0]
     78a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
     78e:	4621      	mov	r1, r4
     790:	4620      	mov	r0, r4
     792:	4f07      	ldr	r7, [pc, #28]	; (7b0 <TC7_Handler+0x70>)
     794:	47b8      	blx	r7
     796:	4621      	mov	r1, r4
     798:	4628      	mov	r0, r5
     79a:	47b8      	blx	r7
     79c:	7034      	strb	r4, [r6, #0]
     79e:	e7eb      	b.n	778 <TC7_Handler+0x38>
     7a0:	43001800 	.word	0x43001800
     7a4:	20000521 	.word	0x20000521
     7a8:	20000568 	.word	0x20000568
     7ac:	41008000 	.word	0x41008000
     7b0:	00000f65 	.word	0x00000f65

000007b4 <configure_ethercat_dma_descriptors>:
     7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b8:	b083      	sub	sp, #12
     7ba:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 974 <configure_ethercat_dma_descriptors+0x1c0>
     7be:	4f61      	ldr	r7, [pc, #388]	; (944 <configure_ethercat_dma_descriptors+0x190>)
     7c0:	2602      	movs	r6, #2
     7c2:	9601      	str	r6, [sp, #4]
     7c4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 978 <configure_ethercat_dma_descriptors+0x1c4>
     7c8:	f8cd 9000 	str.w	r9, [sp]
     7cc:	2313      	movs	r3, #19
     7ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
     7d2:	4639      	mov	r1, r7
     7d4:	2000      	movs	r0, #0
     7d6:	4d5c      	ldr	r5, [pc, #368]	; (948 <configure_ethercat_dma_descriptors+0x194>)
     7d8:	47a8      	blx	r5
     7da:	f8d8 b008 	ldr.w	fp, [r8, #8]
     7de:	9601      	str	r6, [sp, #4]
     7e0:	4c5a      	ldr	r4, [pc, #360]	; (94c <configure_ethercat_dma_descriptors+0x198>)
     7e2:	9400      	str	r4, [sp, #0]
     7e4:	2343      	movs	r3, #67	; 0x43
     7e6:	465a      	mov	r2, fp
     7e8:	4649      	mov	r1, r9
     7ea:	2000      	movs	r0, #0
     7ec:	47a8      	blx	r5
     7ee:	4b58      	ldr	r3, [pc, #352]	; (950 <configure_ethercat_dma_descriptors+0x19c>)
     7f0:	681a      	ldr	r2, [r3, #0]
     7f2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 97c <configure_ethercat_dma_descriptors+0x1c8>
     7f6:	9601      	str	r6, [sp, #4]
     7f8:	f8cd 9000 	str.w	r9, [sp]
     7fc:	230b      	movs	r3, #11
     7fe:	4621      	mov	r1, r4
     800:	2000      	movs	r0, #0
     802:	47a8      	blx	r5
     804:	2400      	movs	r4, #0
     806:	9401      	str	r4, [sp, #4]
     808:	f8df a174 	ldr.w	sl, [pc, #372]	; 980 <configure_ethercat_dma_descriptors+0x1cc>
     80c:	f8cd a000 	str.w	sl, [sp]
     810:	2303      	movs	r3, #3
     812:	465a      	mov	r2, fp
     814:	4649      	mov	r1, r9
     816:	4620      	mov	r0, r4
     818:	47a8      	blx	r5
     81a:	9601      	str	r6, [sp, #4]
     81c:	f8df b164 	ldr.w	fp, [pc, #356]	; 984 <configure_ethercat_dma_descriptors+0x1d0>
     820:	f8cd b000 	str.w	fp, [sp]
     824:	2340      	movs	r3, #64	; 0x40
     826:	4a4b      	ldr	r2, [pc, #300]	; (954 <configure_ethercat_dma_descriptors+0x1a0>)
     828:	4651      	mov	r1, sl
     82a:	4620      	mov	r0, r4
     82c:	47a8      	blx	r5
     82e:	9601      	str	r6, [sp, #4]
     830:	f8df a154 	ldr.w	sl, [pc, #340]	; 988 <configure_ethercat_dma_descriptors+0x1d4>
     834:	f8cd a000 	str.w	sl, [sp]
     838:	2313      	movs	r3, #19
     83a:	f8d8 200c 	ldr.w	r2, [r8, #12]
     83e:	4659      	mov	r1, fp
     840:	4620      	mov	r0, r4
     842:	47a8      	blx	r5
     844:	f8d8 2010 	ldr.w	r2, [r8, #16]
     848:	9401      	str	r4, [sp, #4]
     84a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 98c <configure_ethercat_dma_descriptors+0x1d8>
     84e:	f8cd 8000 	str.w	r8, [sp]
     852:	2303      	movs	r3, #3
     854:	4651      	mov	r1, sl
     856:	4620      	mov	r0, r4
     858:	47a8      	blx	r5
     85a:	9601      	str	r6, [sp, #4]
     85c:	f8cd 9000 	str.w	r9, [sp]
     860:	2340      	movs	r3, #64	; 0x40
     862:	4622      	mov	r2, r4
     864:	4641      	mov	r1, r8
     866:	4630      	mov	r0, r6
     868:	47a8      	blx	r5
     86a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 990 <configure_ethercat_dma_descriptors+0x1dc>
     86e:	9601      	str	r6, [sp, #4]
     870:	f8df 9120 	ldr.w	r9, [pc, #288]	; 994 <configure_ethercat_dma_descriptors+0x1e0>
     874:	f8cd 9000 	str.w	r9, [sp]
     878:	2313      	movs	r3, #19
     87a:	4622      	mov	r2, r4
     87c:	4641      	mov	r1, r8
     87e:	2003      	movs	r0, #3
     880:	47a8      	blx	r5
     882:	9601      	str	r6, [sp, #4]
     884:	f8df a110 	ldr.w	sl, [pc, #272]	; 998 <configure_ethercat_dma_descriptors+0x1e4>
     888:	f8cd a000 	str.w	sl, [sp]
     88c:	2343      	movs	r3, #67	; 0x43
     88e:	4622      	mov	r2, r4
     890:	4649      	mov	r1, r9
     892:	2003      	movs	r0, #3
     894:	47a8      	blx	r5
     896:	f8df 9104 	ldr.w	r9, [pc, #260]	; 99c <configure_ethercat_dma_descriptors+0x1e8>
     89a:	9601      	str	r6, [sp, #4]
     89c:	f8cd 9000 	str.w	r9, [sp]
     8a0:	230b      	movs	r3, #11
     8a2:	4622      	mov	r2, r4
     8a4:	4651      	mov	r1, sl
     8a6:	2003      	movs	r0, #3
     8a8:	47a8      	blx	r5
     8aa:	9601      	str	r6, [sp, #4]
     8ac:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 9a0 <configure_ethercat_dma_descriptors+0x1ec>
     8b0:	f8cd a000 	str.w	sl, [sp]
     8b4:	2343      	movs	r3, #67	; 0x43
     8b6:	4622      	mov	r2, r4
     8b8:	4649      	mov	r1, r9
     8ba:	2003      	movs	r0, #3
     8bc:	47a8      	blx	r5
     8be:	9601      	str	r6, [sp, #4]
     8c0:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 9a4 <configure_ethercat_dma_descriptors+0x1f0>
     8c4:	f8cd b000 	str.w	fp, [sp]
     8c8:	2313      	movs	r3, #19
     8ca:	4622      	mov	r2, r4
     8cc:	4651      	mov	r1, sl
     8ce:	2003      	movs	r0, #3
     8d0:	47a8      	blx	r5
     8d2:	9401      	str	r4, [sp, #4]
     8d4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 9a8 <configure_ethercat_dma_descriptors+0x1f4>
     8d8:	f8cd a000 	str.w	sl, [sp]
     8dc:	2303      	movs	r3, #3
     8de:	4622      	mov	r2, r4
     8e0:	4659      	mov	r1, fp
     8e2:	4618      	mov	r0, r3
     8e4:	47a8      	blx	r5
     8e6:	9601      	str	r6, [sp, #4]
     8e8:	f8cd 9000 	str.w	r9, [sp]
     8ec:	2340      	movs	r3, #64	; 0x40
     8ee:	4a19      	ldr	r2, [pc, #100]	; (954 <configure_ethercat_dma_descriptors+0x1a0>)
     8f0:	441a      	add	r2, r3
     8f2:	4651      	mov	r1, sl
     8f4:	2001      	movs	r0, #1
     8f6:	47a8      	blx	r5
     8f8:	4d17      	ldr	r5, [pc, #92]	; (958 <configure_ethercat_dma_descriptors+0x1a4>)
     8fa:	4a18      	ldr	r2, [pc, #96]	; (95c <configure_ethercat_dma_descriptors+0x1a8>)
     8fc:	4631      	mov	r1, r6
     8fe:	4628      	mov	r0, r5
     900:	4b17      	ldr	r3, [pc, #92]	; (960 <configure_ethercat_dma_descriptors+0x1ac>)
     902:	4798      	blx	r3
     904:	f8d8 300c 	ldr.w	r3, [r8, #12]
     908:	9300      	str	r3, [sp, #0]
     90a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     90e:	4620      	mov	r0, r4
     910:	4e14      	ldr	r6, [pc, #80]	; (964 <configure_ethercat_dma_descriptors+0x1b0>)
     912:	47b0      	blx	r6
     914:	68fb      	ldr	r3, [r7, #12]
     916:	9300      	str	r3, [sp, #0]
     918:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     91c:	2001      	movs	r0, #1
     91e:	47b0      	blx	r6
     920:	4628      	mov	r0, r5
     922:	4b11      	ldr	r3, [pc, #68]	; (968 <configure_ethercat_dma_descriptors+0x1b4>)
     924:	4798      	blx	r3
     926:	2601      	movs	r6, #1
     928:	4b10      	ldr	r3, [pc, #64]	; (96c <configure_ethercat_dma_descriptors+0x1b8>)
     92a:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     92e:	4621      	mov	r1, r4
     930:	4620      	mov	r0, r4
     932:	4d0f      	ldr	r5, [pc, #60]	; (970 <configure_ethercat_dma_descriptors+0x1bc>)
     934:	47a8      	blx	r5
     936:	4621      	mov	r1, r4
     938:	4630      	mov	r0, r6
     93a:	47a8      	blx	r5
     93c:	b003      	add	sp, #12
     93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     942:	bf00      	nop
     944:	20000510 	.word	0x20000510
     948:	00000639 	.word	0x00000639
     94c:	20000538 	.word	0x20000538
     950:	20000000 	.word	0x20000000
     954:	20000460 	.word	0x20000460
     958:	20000380 	.word	0x20000380
     95c:	000005d9 	.word	0x000005d9
     960:	00000bf5 	.word	0x00000bf5
     964:	00000fed 	.word	0x00000fed
     968:	00000bcd 	.word	0x00000bcd
     96c:	41008000 	.word	0x41008000
     970:	00000f65 	.word	0x00000f65
     974:	0000657c 	.word	0x0000657c
     978:	20000440 	.word	0x20000440
     97c:	200003f0 	.word	0x200003f0
     980:	20000410 	.word	0x20000410
     984:	20000500 	.word	0x20000500
     988:	20000548 	.word	0x20000548
     98c:	20000400 	.word	0x20000400
     990:	20000450 	.word	0x20000450
     994:	200004e0 	.word	0x200004e0
     998:	200004f0 	.word	0x200004f0
     99c:	20000558 	.word	0x20000558
     9a0:	200003d0 	.word	0x200003d0
     9a4:	200003e0 	.word	0x200003e0
     9a8:	20000528 	.word	0x20000528

000009ac <delay_us>:
     9ac:	b510      	push	{r4, lr}
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <delay_us+0x14>)
     9b0:	681c      	ldr	r4, [r3, #0]
     9b2:	4b04      	ldr	r3, [pc, #16]	; (9c4 <delay_us+0x18>)
     9b4:	4798      	blx	r3
     9b6:	4601      	mov	r1, r0
     9b8:	4620      	mov	r0, r4
     9ba:	4b03      	ldr	r3, [pc, #12]	; (9c8 <delay_us+0x1c>)
     9bc:	4798      	blx	r3
     9be:	bd10      	pop	{r4, pc}
     9c0:	2000017c 	.word	0x2000017c
     9c4:	00000c2d 	.word	0x00000c2d
     9c8:	00000c69 	.word	0x00000c69

000009cc <delay_ms>:
     9cc:	b510      	push	{r4, lr}
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <delay_ms+0x14>)
     9d0:	681c      	ldr	r4, [r3, #0]
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <delay_ms+0x18>)
     9d4:	4798      	blx	r3
     9d6:	4601      	mov	r1, r0
     9d8:	4620      	mov	r0, r4
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <delay_ms+0x1c>)
     9dc:	4798      	blx	r3
     9de:	bd10      	pop	{r4, pc}
     9e0:	2000017c 	.word	0x2000017c
     9e4:	00000c45 	.word	0x00000c45
     9e8:	00000c69 	.word	0x00000c69

000009ec <i2c_m_sync_write>:
     9ec:	b510      	push	{r4, lr}
     9ee:	b084      	sub	sp, #16
     9f0:	8903      	ldrh	r3, [r0, #8]
     9f2:	f8ad 3004 	strh.w	r3, [sp, #4]
     9f6:	4614      	mov	r4, r2
     9f8:	9202      	str	r2, [sp, #8]
     9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     9fe:	f8ad 3006 	strh.w	r3, [sp, #6]
     a02:	9103      	str	r1, [sp, #12]
     a04:	a901      	add	r1, sp, #4
     a06:	3814      	subs	r0, #20
     a08:	4b03      	ldr	r3, [pc, #12]	; (a18 <i2c_m_sync_write+0x2c>)
     a0a:	4798      	blx	r3
     a0c:	b910      	cbnz	r0, a14 <i2c_m_sync_write+0x28>
     a0e:	4620      	mov	r0, r4
     a10:	b004      	add	sp, #16
     a12:	bd10      	pop	{r4, pc}
     a14:	4604      	mov	r4, r0
     a16:	e7fa      	b.n	a0e <i2c_m_sync_write+0x22>
     a18:	000016ed 	.word	0x000016ed

00000a1c <i2c_m_sync_read>:
     a1c:	b510      	push	{r4, lr}
     a1e:	b084      	sub	sp, #16
     a20:	8903      	ldrh	r3, [r0, #8]
     a22:	f8ad 3004 	strh.w	r3, [sp, #4]
     a26:	4614      	mov	r4, r2
     a28:	9202      	str	r2, [sp, #8]
     a2a:	f248 0301 	movw	r3, #32769	; 0x8001
     a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
     a32:	9103      	str	r1, [sp, #12]
     a34:	a901      	add	r1, sp, #4
     a36:	3814      	subs	r0, #20
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <i2c_m_sync_read+0x2c>)
     a3a:	4798      	blx	r3
     a3c:	b910      	cbnz	r0, a44 <i2c_m_sync_read+0x28>
     a3e:	4620      	mov	r0, r4
     a40:	b004      	add	sp, #16
     a42:	bd10      	pop	{r4, pc}
     a44:	4604      	mov	r4, r0
     a46:	e7fa      	b.n	a3e <i2c_m_sync_read+0x22>
     a48:	000016ed 	.word	0x000016ed

00000a4c <i2c_m_sync_init>:
     a4c:	b538      	push	{r3, r4, r5, lr}
     a4e:	460d      	mov	r5, r1
     a50:	4604      	mov	r4, r0
     a52:	225e      	movs	r2, #94	; 0x5e
     a54:	4908      	ldr	r1, [pc, #32]	; (a78 <i2c_m_sync_init+0x2c>)
     a56:	3000      	adds	r0, #0
     a58:	bf18      	it	ne
     a5a:	2001      	movne	r0, #1
     a5c:	4b07      	ldr	r3, [pc, #28]	; (a7c <i2c_m_sync_init+0x30>)
     a5e:	4798      	blx	r3
     a60:	4629      	mov	r1, r5
     a62:	4620      	mov	r0, r4
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <i2c_m_sync_init+0x34>)
     a66:	4798      	blx	r3
     a68:	4603      	mov	r3, r0
     a6a:	b918      	cbnz	r0, a74 <i2c_m_sync_init+0x28>
     a6c:	4a05      	ldr	r2, [pc, #20]	; (a84 <i2c_m_sync_init+0x38>)
     a6e:	61a2      	str	r2, [r4, #24]
     a70:	4a05      	ldr	r2, [pc, #20]	; (a88 <i2c_m_sync_init+0x3c>)
     a72:	6162      	str	r2, [r4, #20]
     a74:	4618      	mov	r0, r3
     a76:	bd38      	pop	{r3, r4, r5, pc}
     a78:	00006590 	.word	0x00006590
     a7c:	00000c25 	.word	0x00000c25
     a80:	00001645 	.word	0x00001645
     a84:	00000a1d 	.word	0x00000a1d
     a88:	000009ed 	.word	0x000009ed

00000a8c <i2c_m_sync_enable>:
     a8c:	b508      	push	{r3, lr}
     a8e:	4b01      	ldr	r3, [pc, #4]	; (a94 <i2c_m_sync_enable+0x8>)
     a90:	4798      	blx	r3
     a92:	bd08      	pop	{r3, pc}
     a94:	00001675 	.word	0x00001675

00000a98 <i2c_m_sync_set_slaveaddr>:
     a98:	f3c1 0109 	ubfx	r1, r1, #0, #10
     a9c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     aa0:	430a      	orrs	r2, r1
     aa2:	8382      	strh	r2, [r0, #28]
     aa4:	4610      	mov	r0, r2
     aa6:	4770      	bx	lr

00000aa8 <i2c_m_sync_get_io_descriptor>:
     aa8:	3014      	adds	r0, #20
     aaa:	6008      	str	r0, [r1, #0]
     aac:	2000      	movs	r0, #0
     aae:	4770      	bx	lr

00000ab0 <io_write>:
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	460d      	mov	r5, r1
     ab4:	4616      	mov	r6, r2
     ab6:	4604      	mov	r4, r0
     ab8:	b168      	cbz	r0, ad6 <io_write+0x26>
     aba:	b151      	cbz	r1, ad2 <io_write+0x22>
     abc:	2001      	movs	r0, #1
     abe:	2234      	movs	r2, #52	; 0x34
     ac0:	4906      	ldr	r1, [pc, #24]	; (adc <io_write+0x2c>)
     ac2:	4b07      	ldr	r3, [pc, #28]	; (ae0 <io_write+0x30>)
     ac4:	4798      	blx	r3
     ac6:	6823      	ldr	r3, [r4, #0]
     ac8:	4632      	mov	r2, r6
     aca:	4629      	mov	r1, r5
     acc:	4620      	mov	r0, r4
     ace:	4798      	blx	r3
     ad0:	bd70      	pop	{r4, r5, r6, pc}
     ad2:	2000      	movs	r0, #0
     ad4:	e7f3      	b.n	abe <io_write+0xe>
     ad6:	2000      	movs	r0, #0
     ad8:	e7f1      	b.n	abe <io_write+0xe>
     ada:	bf00      	nop
     adc:	000065ac 	.word	0x000065ac
     ae0:	00000c25 	.word	0x00000c25

00000ae4 <io_read>:
     ae4:	b570      	push	{r4, r5, r6, lr}
     ae6:	460d      	mov	r5, r1
     ae8:	4616      	mov	r6, r2
     aea:	4604      	mov	r4, r0
     aec:	b168      	cbz	r0, b0a <io_read+0x26>
     aee:	b151      	cbz	r1, b06 <io_read+0x22>
     af0:	2001      	movs	r0, #1
     af2:	223d      	movs	r2, #61	; 0x3d
     af4:	4906      	ldr	r1, [pc, #24]	; (b10 <io_read+0x2c>)
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <io_read+0x30>)
     af8:	4798      	blx	r3
     afa:	6863      	ldr	r3, [r4, #4]
     afc:	4632      	mov	r2, r6
     afe:	4629      	mov	r1, r5
     b00:	4620      	mov	r0, r4
     b02:	4798      	blx	r3
     b04:	bd70      	pop	{r4, r5, r6, pc}
     b06:	2000      	movs	r0, #0
     b08:	e7f3      	b.n	af2 <io_read+0xe>
     b0a:	2000      	movs	r0, #0
     b0c:	e7f1      	b.n	af2 <io_read+0xe>
     b0e:	bf00      	nop
     b10:	000065ac 	.word	0x000065ac
     b14:	00000c25 	.word	0x00000c25

00000b18 <_spi_m_dma_io_write>:
     b18:	b570      	push	{r4, r5, r6, lr}
     b1a:	460d      	mov	r5, r1
     b1c:	4616      	mov	r6, r2
     b1e:	4604      	mov	r4, r0
     b20:	2298      	movs	r2, #152	; 0x98
     b22:	4907      	ldr	r1, [pc, #28]	; (b40 <_spi_m_dma_io_write+0x28>)
     b24:	3000      	adds	r0, #0
     b26:	bf18      	it	ne
     b28:	2001      	movne	r0, #1
     b2a:	4b06      	ldr	r3, [pc, #24]	; (b44 <_spi_m_dma_io_write+0x2c>)
     b2c:	4798      	blx	r3
     b2e:	4633      	mov	r3, r6
     b30:	2200      	movs	r2, #0
     b32:	4629      	mov	r1, r5
     b34:	f1a4 0020 	sub.w	r0, r4, #32
     b38:	4c03      	ldr	r4, [pc, #12]	; (b48 <_spi_m_dma_io_write+0x30>)
     b3a:	47a0      	blx	r4
     b3c:	bd70      	pop	{r4, r5, r6, pc}
     b3e:	bf00      	nop
     b40:	000065c0 	.word	0x000065c0
     b44:	00000c25 	.word	0x00000c25
     b48:	00001bd1 	.word	0x00001bd1

00000b4c <_spi_m_dma_io_read>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	460d      	mov	r5, r1
     b50:	4616      	mov	r6, r2
     b52:	4604      	mov	r4, r0
     b54:	2281      	movs	r2, #129	; 0x81
     b56:	4907      	ldr	r1, [pc, #28]	; (b74 <_spi_m_dma_io_read+0x28>)
     b58:	3000      	adds	r0, #0
     b5a:	bf18      	it	ne
     b5c:	2001      	movne	r0, #1
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <_spi_m_dma_io_read+0x2c>)
     b60:	4798      	blx	r3
     b62:	4633      	mov	r3, r6
     b64:	462a      	mov	r2, r5
     b66:	2100      	movs	r1, #0
     b68:	f1a4 0020 	sub.w	r0, r4, #32
     b6c:	4c03      	ldr	r4, [pc, #12]	; (b7c <_spi_m_dma_io_read+0x30>)
     b6e:	47a0      	blx	r4
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	bf00      	nop
     b74:	000065c0 	.word	0x000065c0
     b78:	00000c25 	.word	0x00000c25
     b7c:	00001bd1 	.word	0x00001bd1

00000b80 <spi_m_dma_init>:
     b80:	b538      	push	{r3, r4, r5, lr}
     b82:	460c      	mov	r4, r1
     b84:	4605      	mov	r5, r0
     b86:	b1a8      	cbz	r0, bb4 <spi_m_dma_init+0x34>
     b88:	b191      	cbz	r1, bb0 <spi_m_dma_init+0x30>
     b8a:	2001      	movs	r0, #1
     b8c:	223b      	movs	r2, #59	; 0x3b
     b8e:	490a      	ldr	r1, [pc, #40]	; (bb8 <spi_m_dma_init+0x38>)
     b90:	4b0a      	ldr	r3, [pc, #40]	; (bbc <spi_m_dma_init+0x3c>)
     b92:	4798      	blx	r3
     b94:	4628      	mov	r0, r5
     b96:	f840 4f04 	str.w	r4, [r0, #4]!
     b9a:	4621      	mov	r1, r4
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <spi_m_dma_init+0x40>)
     b9e:	4798      	blx	r3
     ba0:	4603      	mov	r3, r0
     ba2:	b918      	cbnz	r0, bac <spi_m_dma_init+0x2c>
     ba4:	4a07      	ldr	r2, [pc, #28]	; (bc4 <spi_m_dma_init+0x44>)
     ba6:	62aa      	str	r2, [r5, #40]	; 0x28
     ba8:	4a07      	ldr	r2, [pc, #28]	; (bc8 <spi_m_dma_init+0x48>)
     baa:	626a      	str	r2, [r5, #36]	; 0x24
     bac:	4618      	mov	r0, r3
     bae:	bd38      	pop	{r3, r4, r5, pc}
     bb0:	2000      	movs	r0, #0
     bb2:	e7eb      	b.n	b8c <spi_m_dma_init+0xc>
     bb4:	2000      	movs	r0, #0
     bb6:	e7e9      	b.n	b8c <spi_m_dma_init+0xc>
     bb8:	000065c0 	.word	0x000065c0
     bbc:	00000c25 	.word	0x00000c25
     bc0:	0000199d 	.word	0x0000199d
     bc4:	00000b4d 	.word	0x00000b4d
     bc8:	00000b19 	.word	0x00000b19

00000bcc <spi_m_dma_enable>:
     bcc:	b510      	push	{r4, lr}
     bce:	4604      	mov	r4, r0
     bd0:	2251      	movs	r2, #81	; 0x51
     bd2:	4905      	ldr	r1, [pc, #20]	; (be8 <spi_m_dma_enable+0x1c>)
     bd4:	3000      	adds	r0, #0
     bd6:	bf18      	it	ne
     bd8:	2001      	movne	r0, #1
     bda:	4b04      	ldr	r3, [pc, #16]	; (bec <spi_m_dma_enable+0x20>)
     bdc:	4798      	blx	r3
     bde:	1d20      	adds	r0, r4, #4
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <spi_m_dma_enable+0x24>)
     be2:	4798      	blx	r3
     be4:	bd10      	pop	{r4, pc}
     be6:	bf00      	nop
     be8:	000065c0 	.word	0x000065c0
     bec:	00000c25 	.word	0x00000c25
     bf0:	00001b19 	.word	0x00001b19

00000bf4 <spi_m_dma_register_callback>:
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	460d      	mov	r5, r1
     bf8:	4616      	mov	r6, r2
     bfa:	4604      	mov	r4, r0
     bfc:	22a8      	movs	r2, #168	; 0xa8
     bfe:	4906      	ldr	r1, [pc, #24]	; (c18 <spi_m_dma_register_callback+0x24>)
     c00:	3000      	adds	r0, #0
     c02:	bf18      	it	ne
     c04:	2001      	movne	r0, #1
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <spi_m_dma_register_callback+0x28>)
     c08:	4798      	blx	r3
     c0a:	4632      	mov	r2, r6
     c0c:	4629      	mov	r1, r5
     c0e:	1d20      	adds	r0, r4, #4
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <spi_m_dma_register_callback+0x2c>)
     c12:	4798      	blx	r3
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	bf00      	nop
     c18:	000065c0 	.word	0x000065c0
     c1c:	00000c25 	.word	0x00000c25
     c20:	00001b4d 	.word	0x00001b4d

00000c24 <assert>:
     c24:	b900      	cbnz	r0, c28 <assert+0x4>
     c26:	be00      	bkpt	0x0000
     c28:	4770      	bx	lr
	...

00000c2c <_get_cycles_for_us>:
     c2c:	2364      	movs	r3, #100	; 0x64
     c2e:	fb03 f000 	mul.w	r0, r3, r0
     c32:	3002      	adds	r0, #2
     c34:	4b02      	ldr	r3, [pc, #8]	; (c40 <_get_cycles_for_us+0x14>)
     c36:	fba3 3000 	umull	r3, r0, r3, r0
     c3a:	0840      	lsrs	r0, r0, #1
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop
     c40:	aaaaaaab 	.word	0xaaaaaaab

00000c44 <_get_cycles_for_ms>:
     c44:	2364      	movs	r3, #100	; 0x64
     c46:	fb03 f300 	mul.w	r3, r3, r0
     c4a:	3302      	adds	r3, #2
     c4c:	4804      	ldr	r0, [pc, #16]	; (c60 <_get_cycles_for_ms+0x1c>)
     c4e:	fba0 2303 	umull	r2, r3, r0, r3
     c52:	085b      	lsrs	r3, r3, #1
     c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c58:	fb00 f003 	mul.w	r0, r0, r3
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop
     c60:	aaaaaaab 	.word	0xaaaaaaab
     c64:	00000000 	.word	0x00000000

00000c68 <_delay_cycles>:
     c68:	3901      	subs	r1, #1
     c6a:	d8fd      	bhi.n	c68 <_delay_cycles>
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop

00000c70 <_init_chip>:
     c70:	b508      	push	{r3, lr}
     c72:	4a0d      	ldr	r2, [pc, #52]	; (ca8 <_init_chip+0x38>)
     c74:	8813      	ldrh	r3, [r2, #0]
     c76:	b29b      	uxth	r3, r3
     c78:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     c7c:	8013      	strh	r3, [r2, #0]
     c7e:	4b0b      	ldr	r3, [pc, #44]	; (cac <_init_chip+0x3c>)
     c80:	4798      	blx	r3
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_init_chip+0x40>)
     c84:	4798      	blx	r3
     c86:	4b0b      	ldr	r3, [pc, #44]	; (cb4 <_init_chip+0x44>)
     c88:	4798      	blx	r3
     c8a:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <_init_chip+0x48>)
     c8c:	4798      	blx	r3
     c8e:	f640 70ff 	movw	r0, #4095	; 0xfff
     c92:	4b0a      	ldr	r3, [pc, #40]	; (cbc <_init_chip+0x4c>)
     c94:	4798      	blx	r3
     c96:	4a0a      	ldr	r2, [pc, #40]	; (cc0 <_init_chip+0x50>)
     c98:	6913      	ldr	r3, [r2, #16]
     c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c9e:	6113      	str	r3, [r2, #16]
     ca0:	4b08      	ldr	r3, [pc, #32]	; (cc4 <_init_chip+0x54>)
     ca2:	4798      	blx	r3
     ca4:	bd08      	pop	{r3, pc}
     ca6:	bf00      	nop
     ca8:	41004000 	.word	0x41004000
     cac:	00001049 	.word	0x00001049
     cb0:	0000105d 	.word	0x0000105d
     cb4:	0000103d 	.word	0x0000103d
     cb8:	00001079 	.word	0x00001079
     cbc:	00001019 	.word	0x00001019
     cc0:	40000800 	.word	0x40000800
     cc4:	00000d49 	.word	0x00000d49

00000cc8 <_dmac_handler>:
     cc8:	b508      	push	{r3, lr}
     cca:	4a1d      	ldr	r2, [pc, #116]	; (d40 <_dmac_handler+0x78>)
     ccc:	8c13      	ldrh	r3, [r2, #32]
     cce:	f003 031f 	and.w	r3, r3, #31
     cd2:	481c      	ldr	r0, [pc, #112]	; (d44 <_dmac_handler+0x7c>)
     cd4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     cd8:	8c12      	ldrh	r2, [r2, #32]
     cda:	f412 7f80 	tst.w	r2, #256	; 0x100
     cde:	d10a      	bne.n	cf6 <_dmac_handler+0x2e>
     ce0:	4a17      	ldr	r2, [pc, #92]	; (d40 <_dmac_handler+0x78>)
     ce2:	8c12      	ldrh	r2, [r2, #32]
     ce4:	f412 7f00 	tst.w	r2, #512	; 0x200
     ce8:	d110      	bne.n	d0c <_dmac_handler+0x44>
     cea:	4a15      	ldr	r2, [pc, #84]	; (d40 <_dmac_handler+0x78>)
     cec:	8c12      	ldrh	r2, [r2, #32]
     cee:	f412 6f80 	tst.w	r2, #1024	; 0x400
     cf2:	d117      	bne.n	d24 <_dmac_handler+0x5c>
     cf4:	bd08      	pop	{r3, pc}
     cf6:	011b      	lsls	r3, r3, #4
     cf8:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     cfc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d00:	2101      	movs	r1, #1
     d02:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
     d06:	6843      	ldr	r3, [r0, #4]
     d08:	4798      	blx	r3
     d0a:	bd08      	pop	{r3, pc}
     d0c:	011b      	lsls	r3, r3, #4
     d0e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d12:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d16:	2102      	movs	r1, #2
     d18:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
     d1c:	4a09      	ldr	r2, [pc, #36]	; (d44 <_dmac_handler+0x7c>)
     d1e:	58d3      	ldr	r3, [r2, r3]
     d20:	4798      	blx	r3
     d22:	bd08      	pop	{r3, pc}
     d24:	011b      	lsls	r3, r3, #4
     d26:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d2a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d2e:	2104      	movs	r1, #4
     d30:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
     d34:	4a03      	ldr	r2, [pc, #12]	; (d44 <_dmac_handler+0x7c>)
     d36:	4413      	add	r3, r2
     d38:	689b      	ldr	r3, [r3, #8]
     d3a:	4798      	blx	r3
     d3c:	e7da      	b.n	cf4 <_dmac_handler+0x2c>
     d3e:	bf00      	nop
     d40:	4100a000 	.word	0x4100a000
     d44:	20000180 	.word	0x20000180

00000d48 <_dma_init>:
     d48:	b430      	push	{r4, r5}
     d4a:	4a3d      	ldr	r2, [pc, #244]	; (e40 <_dma_init+0xf8>)
     d4c:	8813      	ldrh	r3, [r2, #0]
     d4e:	b29b      	uxth	r3, r3
     d50:	f023 0302 	bic.w	r3, r3, #2
     d54:	b29b      	uxth	r3, r3
     d56:	8013      	strh	r3, [r2, #0]
     d58:	8853      	ldrh	r3, [r2, #2]
     d5a:	b29b      	uxth	r3, r3
     d5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     d60:	b29b      	uxth	r3, r3
     d62:	8053      	strh	r3, [r2, #2]
     d64:	8813      	ldrh	r3, [r2, #0]
     d66:	b29b      	uxth	r3, r3
     d68:	f043 0301 	orr.w	r3, r3, #1
     d6c:	8013      	strh	r3, [r2, #0]
     d6e:	4b34      	ldr	r3, [pc, #208]	; (e40 <_dma_init+0xf8>)
     d70:	881b      	ldrh	r3, [r3, #0]
     d72:	f013 0f01 	tst.w	r3, #1
     d76:	d1fa      	bne.n	d6e <_dma_init+0x26>
     d78:	4a31      	ldr	r2, [pc, #196]	; (e40 <_dma_init+0xf8>)
     d7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     d7e:	8013      	strh	r3, [r2, #0]
     d80:	7b53      	ldrb	r3, [r2, #13]
     d82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     d86:	f043 0301 	orr.w	r3, r3, #1
     d8a:	7353      	strb	r3, [r2, #13]
     d8c:	2300      	movs	r3, #0
     d8e:	6153      	str	r3, [r2, #20]
     d90:	492c      	ldr	r1, [pc, #176]	; (e44 <_dma_init+0xfc>)
     d92:	6351      	str	r1, [r2, #52]	; 0x34
     d94:	492c      	ldr	r1, [pc, #176]	; (e48 <_dma_init+0x100>)
     d96:	6391      	str	r1, [r2, #56]	; 0x38
     d98:	e016      	b.n	dc8 <_dma_init+0x80>
     d9a:	4a2c      	ldr	r2, [pc, #176]	; (e4c <_dma_init+0x104>)
     d9c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
     da0:	4c27      	ldr	r4, [pc, #156]	; (e40 <_dma_init+0xf8>)
     da2:	1d19      	adds	r1, r3, #4
     da4:	0109      	lsls	r1, r1, #4
     da6:	1860      	adds	r0, r4, r1
     da8:	5065      	str	r5, [r4, r1]
     daa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     dae:	7911      	ldrb	r1, [r2, #4]
     db0:	7141      	strb	r1, [r0, #5]
     db2:	7951      	ldrb	r1, [r2, #5]
     db4:	7181      	strb	r1, [r0, #6]
     db6:	88d4      	ldrh	r4, [r2, #6]
     db8:	4922      	ldr	r1, [pc, #136]	; (e44 <_dma_init+0xfc>)
     dba:	011a      	lsls	r2, r3, #4
     dbc:	1888      	adds	r0, r1, r2
     dbe:	528c      	strh	r4, [r1, r2]
     dc0:	2200      	movs	r2, #0
     dc2:	60c2      	str	r2, [r0, #12]
     dc4:	3301      	adds	r3, #1
     dc6:	b2db      	uxtb	r3, r3
     dc8:	2b1f      	cmp	r3, #31
     dca:	d9e6      	bls.n	d9a <_dma_init+0x52>
     dcc:	2300      	movs	r3, #0
     dce:	e00a      	b.n	de6 <_dma_init+0x9e>
     dd0:	f103 011f 	add.w	r1, r3, #31
     dd4:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dd6:	2a00      	cmp	r2, #0
     dd8:	da10      	bge.n	dfc <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dda:	2a00      	cmp	r2, #0
     ddc:	da1c      	bge.n	e18 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     dde:	2a00      	cmp	r2, #0
     de0:	da24      	bge.n	e2c <_dma_init+0xe4>
     de2:	3301      	adds	r3, #1
     de4:	b2db      	uxtb	r3, r3
     de6:	2b04      	cmp	r3, #4
     de8:	d9f2      	bls.n	dd0 <_dma_init+0x88>
     dea:	4a15      	ldr	r2, [pc, #84]	; (e40 <_dma_init+0xf8>)
     dec:	8813      	ldrh	r3, [r2, #0]
     dee:	b29b      	uxth	r3, r3
     df0:	f043 0302 	orr.w	r3, r3, #2
     df4:	8013      	strh	r3, [r2, #0]
     df6:	2000      	movs	r0, #0
     df8:	bc30      	pop	{r4, r5}
     dfa:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dfc:	0950      	lsrs	r0, r2, #5
     dfe:	f001 051f 	and.w	r5, r1, #31
     e02:	2401      	movs	r4, #1
     e04:	40ac      	lsls	r4, r5
     e06:	3020      	adds	r0, #32
     e08:	4d11      	ldr	r5, [pc, #68]	; (e50 <_dma_init+0x108>)
     e0a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     e0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e12:	f3bf 8f6f 	isb	sy
     e16:	e7e0      	b.n	dda <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e18:	0950      	lsrs	r0, r2, #5
     e1a:	f001 051f 	and.w	r5, r1, #31
     e1e:	2401      	movs	r4, #1
     e20:	40ac      	lsls	r4, r5
     e22:	3060      	adds	r0, #96	; 0x60
     e24:	4d0a      	ldr	r5, [pc, #40]	; (e50 <_dma_init+0x108>)
     e26:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     e2a:	e7d8      	b.n	dde <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e2c:	0952      	lsrs	r2, r2, #5
     e2e:	f001 011f 	and.w	r1, r1, #31
     e32:	2001      	movs	r0, #1
     e34:	fa00 f101 	lsl.w	r1, r0, r1
     e38:	4805      	ldr	r0, [pc, #20]	; (e50 <_dma_init+0x108>)
     e3a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     e3e:	e7d0      	b.n	de2 <_dma_init+0x9a>
     e40:	4100a000 	.word	0x4100a000
     e44:	20000570 	.word	0x20000570
     e48:	20000770 	.word	0x20000770
     e4c:	000065dc 	.word	0x000065dc
     e50:	e000e100 	.word	0xe000e100

00000e54 <_dma_set_irq_state>:
     e54:	b991      	cbnz	r1, e7c <_dma_set_irq_state+0x28>
     e56:	b942      	cbnz	r2, e6a <_dma_set_irq_state+0x16>
     e58:	0100      	lsls	r0, r0, #4
     e5a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e5e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e62:	2302      	movs	r3, #2
     e64:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     e68:	4770      	bx	lr
     e6a:	0100      	lsls	r0, r0, #4
     e6c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e70:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e74:	2302      	movs	r3, #2
     e76:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     e7a:	4770      	bx	lr
     e7c:	2901      	cmp	r1, #1
     e7e:	d002      	beq.n	e86 <_dma_set_irq_state+0x32>
     e80:	2902      	cmp	r1, #2
     e82:	d012      	beq.n	eaa <_dma_set_irq_state+0x56>
     e84:	4770      	bx	lr
     e86:	b93a      	cbnz	r2, e98 <_dma_set_irq_state+0x44>
     e88:	0100      	lsls	r0, r0, #4
     e8a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e8e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e92:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     e96:	4770      	bx	lr
     e98:	0100      	lsls	r0, r0, #4
     e9a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e9e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ea2:	2301      	movs	r3, #1
     ea4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     ea8:	4770      	bx	lr
     eaa:	b142      	cbz	r2, ebe <_dma_set_irq_state+0x6a>
     eac:	0100      	lsls	r0, r0, #4
     eae:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     eb2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     eb6:	2304      	movs	r3, #4
     eb8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     ebc:	e7e2      	b.n	e84 <_dma_set_irq_state+0x30>
     ebe:	0100      	lsls	r0, r0, #4
     ec0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     ec4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ec8:	2304      	movs	r3, #4
     eca:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     ece:	4770      	bx	lr

00000ed0 <_dma_set_destination_address>:
     ed0:	4b02      	ldr	r3, [pc, #8]	; (edc <_dma_set_destination_address+0xc>)
     ed2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ed6:	6081      	str	r1, [r0, #8]
     ed8:	2000      	movs	r0, #0
     eda:	4770      	bx	lr
     edc:	20000570 	.word	0x20000570

00000ee0 <_dma_set_source_address>:
     ee0:	4b02      	ldr	r3, [pc, #8]	; (eec <_dma_set_source_address+0xc>)
     ee2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ee6:	6041      	str	r1, [r0, #4]
     ee8:	2000      	movs	r0, #0
     eea:	4770      	bx	lr
     eec:	20000570 	.word	0x20000570

00000ef0 <_dma_srcinc_enable>:
     ef0:	4a05      	ldr	r2, [pc, #20]	; (f08 <_dma_srcinc_enable+0x18>)
     ef2:	0100      	lsls	r0, r0, #4
     ef4:	5a13      	ldrh	r3, [r2, r0]
     ef6:	b29b      	uxth	r3, r3
     ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
     efc:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     f00:	b289      	uxth	r1, r1
     f02:	5211      	strh	r1, [r2, r0]
     f04:	2000      	movs	r0, #0
     f06:	4770      	bx	lr
     f08:	20000570 	.word	0x20000570

00000f0c <_dma_set_data_amount>:
     f0c:	b430      	push	{r4, r5}
     f0e:	4c14      	ldr	r4, [pc, #80]	; (f60 <_dma_set_data_amount+0x54>)
     f10:	0102      	lsls	r2, r0, #4
     f12:	18a3      	adds	r3, r4, r2
     f14:	689d      	ldr	r5, [r3, #8]
     f16:	5aa3      	ldrh	r3, [r4, r2]
     f18:	f3c3 2301 	ubfx	r3, r3, #8, #2
     f1c:	5aa2      	ldrh	r2, [r4, r2]
     f1e:	f412 6f00 	tst.w	r2, #2048	; 0x800
     f22:	d006      	beq.n	f32 <_dma_set_data_amount+0x26>
     f24:	fa01 f403 	lsl.w	r4, r1, r3
     f28:	442c      	add	r4, r5
     f2a:	4a0d      	ldr	r2, [pc, #52]	; (f60 <_dma_set_data_amount+0x54>)
     f2c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     f30:	6094      	str	r4, [r2, #8]
     f32:	4c0b      	ldr	r4, [pc, #44]	; (f60 <_dma_set_data_amount+0x54>)
     f34:	0102      	lsls	r2, r0, #4
     f36:	18a5      	adds	r5, r4, r2
     f38:	686d      	ldr	r5, [r5, #4]
     f3a:	5aa2      	ldrh	r2, [r4, r2]
     f3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
     f40:	d005      	beq.n	f4e <_dma_set_data_amount+0x42>
     f42:	fa01 f303 	lsl.w	r3, r1, r3
     f46:	442b      	add	r3, r5
     f48:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     f4c:	6053      	str	r3, [r2, #4]
     f4e:	b289      	uxth	r1, r1
     f50:	4b03      	ldr	r3, [pc, #12]	; (f60 <_dma_set_data_amount+0x54>)
     f52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f56:	8041      	strh	r1, [r0, #2]
     f58:	2000      	movs	r0, #0
     f5a:	bc30      	pop	{r4, r5}
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	20000570 	.word	0x20000570

00000f64 <_dma_enable_transaction>:
     f64:	b410      	push	{r4}
     f66:	4c0c      	ldr	r4, [pc, #48]	; (f98 <_dma_enable_transaction+0x34>)
     f68:	0102      	lsls	r2, r0, #4
     f6a:	5aa3      	ldrh	r3, [r4, r2]
     f6c:	b29b      	uxth	r3, r3
     f6e:	f043 0301 	orr.w	r3, r3, #1
     f72:	52a3      	strh	r3, [r4, r2]
     f74:	4c09      	ldr	r4, [pc, #36]	; (f9c <_dma_enable_transaction+0x38>)
     f76:	1d03      	adds	r3, r0, #4
     f78:	011b      	lsls	r3, r3, #4
     f7a:	58e2      	ldr	r2, [r4, r3]
     f7c:	f042 0202 	orr.w	r2, r2, #2
     f80:	50e2      	str	r2, [r4, r3]
     f82:	b129      	cbz	r1, f90 <_dma_enable_transaction+0x2c>
     f84:	2301      	movs	r3, #1
     f86:	fa03 f000 	lsl.w	r0, r3, r0
     f8a:	6922      	ldr	r2, [r4, #16]
     f8c:	4310      	orrs	r0, r2
     f8e:	6120      	str	r0, [r4, #16]
     f90:	2000      	movs	r0, #0
     f92:	f85d 4b04 	ldr.w	r4, [sp], #4
     f96:	4770      	bx	lr
     f98:	20000570 	.word	0x20000570
     f9c:	4100a000 	.word	0x4100a000

00000fa0 <_dma_get_channel_resource>:
     fa0:	4b02      	ldr	r3, [pc, #8]	; (fac <_dma_get_channel_resource+0xc>)
     fa2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     fa6:	6001      	str	r1, [r0, #0]
     fa8:	2000      	movs	r0, #0
     faa:	4770      	bx	lr
     fac:	20000180 	.word	0x20000180

00000fb0 <DMAC_0_Handler>:
     fb0:	b508      	push	{r3, lr}
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <DMAC_0_Handler+0x8>)
     fb4:	4798      	blx	r3
     fb6:	bd08      	pop	{r3, pc}
     fb8:	00000cc9 	.word	0x00000cc9

00000fbc <DMAC_1_Handler>:
     fbc:	b508      	push	{r3, lr}
     fbe:	4b01      	ldr	r3, [pc, #4]	; (fc4 <DMAC_1_Handler+0x8>)
     fc0:	4798      	blx	r3
     fc2:	bd08      	pop	{r3, pc}
     fc4:	00000cc9 	.word	0x00000cc9

00000fc8 <DMAC_2_Handler>:
     fc8:	b508      	push	{r3, lr}
     fca:	4b01      	ldr	r3, [pc, #4]	; (fd0 <DMAC_2_Handler+0x8>)
     fcc:	4798      	blx	r3
     fce:	bd08      	pop	{r3, pc}
     fd0:	00000cc9 	.word	0x00000cc9

00000fd4 <DMAC_3_Handler>:
     fd4:	b508      	push	{r3, lr}
     fd6:	4b01      	ldr	r3, [pc, #4]	; (fdc <DMAC_3_Handler+0x8>)
     fd8:	4798      	blx	r3
     fda:	bd08      	pop	{r3, pc}
     fdc:	00000cc9 	.word	0x00000cc9

00000fe0 <DMAC_4_Handler>:
     fe0:	b508      	push	{r3, lr}
     fe2:	4b01      	ldr	r3, [pc, #4]	; (fe8 <DMAC_4_Handler+0x8>)
     fe4:	4798      	blx	r3
     fe6:	bd08      	pop	{r3, pc}
     fe8:	00000cc9 	.word	0x00000cc9

00000fec <_dma_set_descriptor>:
     fec:	b084      	sub	sp, #16
     fee:	b470      	push	{r4, r5, r6}
     ff0:	b085      	sub	sp, #20
     ff2:	4606      	mov	r6, r0
     ff4:	a809      	add	r0, sp, #36	; 0x24
     ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     ffa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
     ffc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    1000:	4d04      	ldr	r5, [pc, #16]	; (1014 <_dma_set_descriptor+0x28>)
    1002:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    1006:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    100a:	b005      	add	sp, #20
    100c:	bc70      	pop	{r4, r5, r6}
    100e:	b004      	add	sp, #16
    1010:	4770      	bx	lr
    1012:	bf00      	nop
    1014:	20000570 	.word	0x20000570

00001018 <_gclk_init_generators_by_fref>:
    1018:	f010 0f01 	tst.w	r0, #1
    101c:	d008      	beq.n	1030 <_gclk_init_generators_by_fref+0x18>
    101e:	4a05      	ldr	r2, [pc, #20]	; (1034 <_gclk_init_generators_by_fref+0x1c>)
    1020:	4b05      	ldr	r3, [pc, #20]	; (1038 <_gclk_init_generators_by_fref+0x20>)
    1022:	621a      	str	r2, [r3, #32]
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <_gclk_init_generators_by_fref+0x20>)
    1026:	685a      	ldr	r2, [r3, #4]
    1028:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    102c:	421a      	tst	r2, r3
    102e:	d1f9      	bne.n	1024 <_gclk_init_generators_by_fref+0xc>
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	00010108 	.word	0x00010108
    1038:	40001c00 	.word	0x40001c00

0000103c <_mclk_init>:
    103c:	2201      	movs	r2, #1
    103e:	4b01      	ldr	r3, [pc, #4]	; (1044 <_mclk_init+0x8>)
    1040:	715a      	strb	r2, [r3, #5]
    1042:	4770      	bx	lr
    1044:	40000800 	.word	0x40000800

00001048 <_osc32kctrl_init_sources>:
    1048:	4b03      	ldr	r3, [pc, #12]	; (1058 <_osc32kctrl_init_sources+0x10>)
    104a:	69da      	ldr	r2, [r3, #28]
    104c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    1050:	61da      	str	r2, [r3, #28]
    1052:	2201      	movs	r2, #1
    1054:	741a      	strb	r2, [r3, #16]
    1056:	4770      	bx	lr
    1058:	40001400 	.word	0x40001400

0000105c <_oscctrl_init_sources>:
    105c:	4a04      	ldr	r2, [pc, #16]	; (1070 <_oscctrl_init_sources+0x14>)
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <_oscctrl_init_sources+0x18>)
    1060:	619a      	str	r2, [r3, #24]
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <_oscctrl_init_sources+0x18>)
    1064:	691b      	ldr	r3, [r3, #16]
    1066:	f013 0f02 	tst.w	r3, #2
    106a:	d0fa      	beq.n	1062 <_oscctrl_init_sources+0x6>
    106c:	4770      	bx	lr
    106e:	bf00      	nop
    1070:	03002606 	.word	0x03002606
    1074:	40001000 	.word	0x40001000

00001078 <_oscctrl_init_referenced_generators>:
    1078:	2231      	movs	r2, #49	; 0x31
    107a:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    107c:	649a      	str	r2, [r3, #72]	; 0x48
    107e:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    1080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1082:	f013 0f06 	tst.w	r3, #6
    1086:	d1fa      	bne.n	107e <_oscctrl_init_referenced_generators+0x6>
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    108a:	4a0b      	ldr	r2, [pc, #44]	; (10b8 <_oscctrl_init_referenced_generators+0x40>)
    108c:	64da      	str	r2, [r3, #76]	; 0x4c
    108e:	2202      	movs	r2, #2
    1090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1094:	4b07      	ldr	r3, [pc, #28]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    1096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1098:	f013 0f02 	tst.w	r3, #2
    109c:	d1fa      	bne.n	1094 <_oscctrl_init_referenced_generators+0x1c>
    109e:	4b05      	ldr	r3, [pc, #20]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    10a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10a2:	f013 0f01 	tst.w	r3, #1
    10a6:	d104      	bne.n	10b2 <_oscctrl_init_referenced_generators+0x3a>
    10a8:	4b02      	ldr	r3, [pc, #8]	; (10b4 <_oscctrl_init_referenced_generators+0x3c>)
    10aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10ac:	f013 0f02 	tst.w	r3, #2
    10b0:	d0f5      	beq.n	109e <_oscctrl_init_referenced_generators+0x26>
    10b2:	4770      	bx	lr
    10b4:	40001000 	.word	0x40001000
    10b8:	00020060 	.word	0x00020060

000010bc <RAMECC_Handler>:
    10bc:	b500      	push	{lr}
    10be:	b083      	sub	sp, #12
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <RAMECC_Handler+0x3c>)
    10c2:	789b      	ldrb	r3, [r3, #2]
    10c4:	b2db      	uxtb	r3, r3
    10c6:	9301      	str	r3, [sp, #4]
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	f013 0f02 	tst.w	r3, #2
    10ce:	d006      	beq.n	10de <RAMECC_Handler+0x22>
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <RAMECC_Handler+0x40>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	b11b      	cbz	r3, 10de <RAMECC_Handler+0x22>
    10d6:	4a08      	ldr	r2, [pc, #32]	; (10f8 <RAMECC_Handler+0x3c>)
    10d8:	6850      	ldr	r0, [r2, #4]
    10da:	4798      	blx	r3
    10dc:	e009      	b.n	10f2 <RAMECC_Handler+0x36>
    10de:	9b01      	ldr	r3, [sp, #4]
    10e0:	f013 0f01 	tst.w	r3, #1
    10e4:	d005      	beq.n	10f2 <RAMECC_Handler+0x36>
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <RAMECC_Handler+0x40>)
    10e8:	685b      	ldr	r3, [r3, #4]
    10ea:	b113      	cbz	r3, 10f2 <RAMECC_Handler+0x36>
    10ec:	4a02      	ldr	r2, [pc, #8]	; (10f8 <RAMECC_Handler+0x3c>)
    10ee:	6850      	ldr	r0, [r2, #4]
    10f0:	4798      	blx	r3
    10f2:	b003      	add	sp, #12
    10f4:	f85d fb04 	ldr.w	pc, [sp], #4
    10f8:	41020000 	.word	0x41020000
    10fc:	20000970 	.word	0x20000970

00001100 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1100:	b470      	push	{r4, r5, r6}
    1102:	b089      	sub	sp, #36	; 0x24
    1104:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1106:	466c      	mov	r4, sp
    1108:	4d0c      	ldr	r5, [pc, #48]	; (113c <_sercom_get_hardware_index+0x3c>)
    110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    110e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1116:	2000      	movs	r0, #0
    1118:	2807      	cmp	r0, #7
    111a:	d80a      	bhi.n	1132 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    111c:	ab08      	add	r3, sp, #32
    111e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1122:	f853 3c20 	ldr.w	r3, [r3, #-32]
    1126:	42b3      	cmp	r3, r6
    1128:	d001      	beq.n	112e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    112a:	3001      	adds	r0, #1
    112c:	e7f4      	b.n	1118 <_sercom_get_hardware_index+0x18>
			return i;
    112e:	b2c0      	uxtb	r0, r0
    1130:	e000      	b.n	1134 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    1132:	2000      	movs	r0, #0
}
    1134:	b009      	add	sp, #36	; 0x24
    1136:	bc70      	pop	{r4, r5, r6}
    1138:	4770      	bx	lr
    113a:	bf00      	nop
    113c:	000066dc 	.word	0x000066dc

00001140 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1140:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1142:	f013 0f01 	tst.w	r3, #1
    1146:	d109      	bne.n	115c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1148:	6803      	ldr	r3, [r0, #0]
    114a:	f043 0302 	orr.w	r3, r3, #2
    114e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1150:	69c3      	ldr	r3, [r0, #28]
    1152:	f013 0f03 	tst.w	r3, #3
    1156:	d1fb      	bne.n	1150 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1158:	2000      	movs	r0, #0
    115a:	4770      	bx	lr
		return ERR_BUSY;
    115c:	f06f 0003 	mvn.w	r0, #3
}
    1160:	4770      	bx	lr

00001162 <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1162:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1164:	f013 0f04 	tst.w	r3, #4
    1168:	d109      	bne.n	117e <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    116a:	6843      	ldr	r3, [r0, #4]
    116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1170:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1172:	69c3      	ldr	r3, [r0, #28]
    1174:	f013 0f17 	tst.w	r3, #23
    1178:	d1fb      	bne.n	1172 <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    117a:	2000      	movs	r0, #0
    117c:	4770      	bx	lr
		return ERR_BUSY;
    117e:	f06f 0003 	mvn.w	r0, #3
}
    1182:	4770      	bx	lr

00001184 <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1184:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    1186:	f013 0f04 	tst.w	r3, #4
    118a:	d109      	bne.n	11a0 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    118c:	6843      	ldr	r3, [r0, #4]
    118e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    1192:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1194:	69c3      	ldr	r3, [r0, #28]
    1196:	f013 0f17 	tst.w	r3, #23
    119a:	d1fb      	bne.n	1194 <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    119c:	2000      	movs	r0, #0
    119e:	4770      	bx	lr
		return ERR_BUSY;
    11a0:	f06f 0003 	mvn.w	r0, #3
}
    11a4:	4770      	bx	lr

000011a6 <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11a6:	3028      	adds	r0, #40	; 0x28
    11a8:	4770      	bx	lr

000011aa <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11aa:	3028      	adds	r0, #40	; 0x28
    11ac:	4770      	bx	lr
	...

000011b0 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    11b0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11b2:	4b04      	ldr	r3, [pc, #16]	; (11c4 <_spi_get_tx_dma_channel+0x14>)
    11b4:	4798      	blx	r3

	switch (index) {
    11b6:	2805      	cmp	r0, #5
    11b8:	d001      	beq.n	11be <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    11ba:	2000      	movs	r0, #0
    11bc:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    11be:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11c0:	bd08      	pop	{r3, pc}
    11c2:	bf00      	nop
    11c4:	00001101 	.word	0x00001101

000011c8 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    11c8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <_spi_is_rx_dma_channel_enabled+0x14>)
    11cc:	4798      	blx	r3

	switch (index) {
    11ce:	2805      	cmp	r0, #5
    11d0:	d001      	beq.n	11d6 <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    11d2:	2000      	movs	r0, #0
    11d4:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    11d6:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    11d8:	bd08      	pop	{r3, pc}
    11da:	bf00      	nop
    11dc:	00001101 	.word	0x00001101

000011e0 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    11e0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11e2:	4b07      	ldr	r3, [pc, #28]	; (1200 <_spi_get_rx_dma_channel+0x20>)
    11e4:	4798      	blx	r3

	switch (index) {
    11e6:	2807      	cmp	r0, #7
    11e8:	d807      	bhi.n	11fa <_spi_get_rx_dma_channel+0x1a>
    11ea:	e8df f000 	tbb	[pc, r0]
    11ee:	0404      	.short	0x0404
    11f0:	06040404 	.word	0x06040404
    11f4:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    11f6:	2001      	movs	r0, #1
    11f8:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    11fa:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11fc:	bd08      	pop	{r3, pc}
    11fe:	bf00      	nop
    1200:	00001101 	.word	0x00001101

00001204 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    1204:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1206:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    1208:	689b      	ldr	r3, [r3, #8]
    120a:	b103      	cbz	r3, 120e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    120c:	4798      	blx	r3
    120e:	bd08      	pop	{r3, pc}

00001210 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    1210:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1212:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    1214:	68db      	ldr	r3, [r3, #12]
    1216:	b103      	cbz	r3, 121a <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    1218:	4798      	blx	r3
    121a:	bd08      	pop	{r3, pc}

0000121c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    121c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    121e:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    1220:	685b      	ldr	r3, [r3, #4]
    1222:	b103      	cbz	r3, 1226 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    1224:	4798      	blx	r3
    1226:	bd08      	pop	{r3, pc}

00001228 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1228:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    122a:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    122c:	691b      	ldr	r3, [r3, #16]
    122e:	b103      	cbz	r3, 1232 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1230:	4798      	blx	r3
    1232:	bd08      	pop	{r3, pc}

00001234 <_get_i2cm_index>:
{
    1234:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1236:	4b0d      	ldr	r3, [pc, #52]	; (126c <_get_i2cm_index+0x38>)
    1238:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    123a:	2300      	movs	r3, #0
    123c:	b143      	cbz	r3, 1250 <_get_i2cm_index+0x1c>
	ASSERT(false);
    123e:	f240 32a7 	movw	r2, #935	; 0x3a7
    1242:	490b      	ldr	r1, [pc, #44]	; (1270 <_get_i2cm_index+0x3c>)
    1244:	2000      	movs	r0, #0
    1246:	4b0b      	ldr	r3, [pc, #44]	; (1274 <_get_i2cm_index+0x40>)
    1248:	4798      	blx	r3
	return -1;
    124a:	f04f 30ff 	mov.w	r0, #4294967295
}
    124e:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1254:	00d1      	lsls	r1, r2, #3
    1256:	4a08      	ldr	r2, [pc, #32]	; (1278 <_get_i2cm_index+0x44>)
    1258:	440a      	add	r2, r1
    125a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    125e:	4290      	cmp	r0, r2
    1260:	d002      	beq.n	1268 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1262:	3301      	adds	r3, #1
    1264:	b2db      	uxtb	r3, r3
    1266:	e7e9      	b.n	123c <_get_i2cm_index+0x8>
			return i;
    1268:	b258      	sxtb	r0, r3
    126a:	bd08      	pop	{r3, pc}
    126c:	00001101 	.word	0x00001101
    1270:	00006750 	.word	0x00006750
    1274:	00000c25 	.word	0x00000c25
    1278:	000066dc 	.word	0x000066dc

0000127c <_i2c_m_sync_init_impl>:
{
    127c:	b538      	push	{r3, r4, r5, lr}
    127e:	4605      	mov	r5, r0
    1280:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1282:	4608      	mov	r0, r1
    1284:	4b33      	ldr	r3, [pc, #204]	; (1354 <_i2c_m_sync_init_impl+0xd8>)
    1286:	4798      	blx	r3
    1288:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    128a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    128c:	f013 0f01 	tst.w	r3, #1
    1290:	d122      	bne.n	12d8 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1292:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1296:	00da      	lsls	r2, r3, #3
    1298:	4b2f      	ldr	r3, [pc, #188]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    129a:	4413      	add	r3, r2
    129c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    129e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12a2:	69e3      	ldr	r3, [r4, #28]
    12a4:	f013 0f03 	tst.w	r3, #3
    12a8:	d1fb      	bne.n	12a2 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12aa:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    12ac:	f013 0f02 	tst.w	r3, #2
    12b0:	d00b      	beq.n	12ca <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12b2:	6823      	ldr	r3, [r4, #0]
    12b4:	f023 0302 	bic.w	r3, r3, #2
    12b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ba:	69e3      	ldr	r3, [r4, #28]
    12bc:	f013 0f03 	tst.w	r3, #3
    12c0:	d1fb      	bne.n	12ba <_i2c_m_sync_init_impl+0x3e>
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	f013 0f02 	tst.w	r3, #2
    12c8:	d1fb      	bne.n	12c2 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12ca:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12ce:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12d0:	69e3      	ldr	r3, [r4, #28]
    12d2:	f013 0f03 	tst.w	r3, #3
    12d6:	d1fb      	bne.n	12d0 <_i2c_m_sync_init_impl+0x54>
    12d8:	69e3      	ldr	r3, [r4, #28]
    12da:	f013 0f01 	tst.w	r3, #1
    12de:	d1fb      	bne.n	12d8 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12e0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12e4:	00da      	lsls	r2, r3, #3
    12e6:	4b1c      	ldr	r3, [pc, #112]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    12e8:	4413      	add	r3, r2
    12ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12ee:	69e3      	ldr	r3, [r4, #28]
    12f0:	f013 0f03 	tst.w	r3, #3
    12f4:	d1fb      	bne.n	12ee <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12fa:	00da      	lsls	r2, r3, #3
    12fc:	4b16      	ldr	r3, [pc, #88]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    12fe:	4413      	add	r3, r2
    1300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1302:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1304:	69e3      	ldr	r3, [r4, #28]
    1306:	f013 0f04 	tst.w	r3, #4
    130a:	d1fb      	bne.n	1304 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    130c:	0042      	lsls	r2, r0, #1
    130e:	4402      	add	r2, r0
    1310:	00d1      	lsls	r1, r2, #3
    1312:	4b11      	ldr	r3, [pc, #68]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    1314:	440b      	add	r3, r1
    1316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1318:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    131a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    131e:	f003 0303 	and.w	r3, r3, #3
    1322:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1324:	2b01      	cmp	r3, #1
    1326:	bf94      	ite	ls
    1328:	2300      	movls	r3, #0
    132a:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    132c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    132e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1332:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1336:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1338:	69e3      	ldr	r3, [r4, #28]
    133a:	f013 0f04 	tst.w	r3, #4
    133e:	d1fb      	bne.n	1338 <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    1340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1344:	00c2      	lsls	r2, r0, #3
    1346:	4b04      	ldr	r3, [pc, #16]	; (1358 <_i2c_m_sync_init_impl+0xdc>)
    1348:	4413      	add	r3, r2
    134a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    134e:	81eb      	strh	r3, [r5, #14]
}
    1350:	2000      	movs	r0, #0
    1352:	bd38      	pop	{r3, r4, r5, pc}
    1354:	00001235 	.word	0x00001235
    1358:	000066dc 	.word	0x000066dc

0000135c <_sercom_i2c_sync_send_address>:
{
    135c:	b570      	push	{r4, r5, r6, lr}
    135e:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1360:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1362:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1364:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1368:	f240 52a6 	movw	r2, #1446	; 0x5a6
    136c:	4999      	ldr	r1, [pc, #612]	; (15d4 <_sercom_i2c_sync_send_address+0x278>)
    136e:	3000      	adds	r0, #0
    1370:	bf18      	it	ne
    1372:	2001      	movne	r0, #1
    1374:	4b98      	ldr	r3, [pc, #608]	; (15d8 <_sercom_i2c_sync_send_address+0x27c>)
    1376:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1378:	686b      	ldr	r3, [r5, #4]
    137a:	2b01      	cmp	r3, #1
    137c:	d057      	beq.n	142e <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    137e:	6863      	ldr	r3, [r4, #4]
    1380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1384:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1386:	69e3      	ldr	r3, [r4, #28]
    1388:	f013 0f04 	tst.w	r3, #4
    138c:	d1fb      	bne.n	1386 <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    138e:	882b      	ldrh	r3, [r5, #0]
    1390:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1394:	d056      	beq.n	1444 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    1396:	886a      	ldrh	r2, [r5, #2]
    1398:	f012 0f01 	tst.w	r2, #1
    139c:	d004      	beq.n	13a8 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    139e:	886a      	ldrh	r2, [r5, #2]
    13a0:	b292      	uxth	r2, r2
    13a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    13a6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    13a8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    13ac:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    13b0:	69e3      	ldr	r3, [r4, #28]
    13b2:	f013 0f04 	tst.w	r3, #4
    13b6:	d1fb      	bne.n	13b0 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    13b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    13be:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    13c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    13c4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13c6:	69e3      	ldr	r3, [r4, #28]
    13c8:	f013 0f04 	tst.w	r3, #4
    13cc:	d1fb      	bne.n	13c6 <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    13ce:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    13d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    13d4:	7e33      	ldrb	r3, [r6, #24]
    13d6:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    13d8:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    13da:	1e51      	subs	r1, r2, #1
    13dc:	b11a      	cbz	r2, 13e6 <_sercom_i2c_sync_send_address+0x8a>
    13de:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    13e0:	f013 0f03 	tst.w	r3, #3
    13e4:	d0f6      	beq.n	13d4 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    13e6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    13e8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13ec:	69e3      	ldr	r3, [r4, #28]
    13ee:	f013 0f04 	tst.w	r3, #4
    13f2:	d1fb      	bne.n	13ec <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    13f4:	8b63      	ldrh	r3, [r4, #26]
    13f6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    13f8:	f010 0f01 	tst.w	r0, #1
    13fc:	f000 809c 	beq.w	1538 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1400:	f013 0f02 	tst.w	r3, #2
    1404:	d032      	beq.n	146c <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1406:	2201      	movs	r2, #1
    1408:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    140a:	886a      	ldrh	r2, [r5, #2]
    140c:	b292      	uxth	r2, r2
    140e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1412:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1414:	886a      	ldrh	r2, [r5, #2]
    1416:	b292      	uxth	r2, r2
    1418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    141c:	b292      	uxth	r2, r2
    141e:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1420:	f013 0f01 	tst.w	r3, #1
    1424:	f000 80d1 	beq.w	15ca <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    1428:	f06f 0004 	mvn.w	r0, #4
    142c:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    142e:	2e00      	cmp	r6, #0
    1430:	d0a5      	beq.n	137e <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1432:	6863      	ldr	r3, [r4, #4]
    1434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1438:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143a:	69e3      	ldr	r3, [r4, #28]
    143c:	f013 0f04 	tst.w	r3, #4
    1440:	d1fb      	bne.n	143a <_sercom_i2c_sync_send_address+0xde>
    1442:	e7a4      	b.n	138e <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1444:	005b      	lsls	r3, r3, #1
    1446:	b2db      	uxtb	r3, r3
    1448:	886a      	ldrh	r2, [r5, #2]
    144a:	f002 0201 	and.w	r2, r2, #1
    144e:	431a      	orrs	r2, r3
    1450:	69e3      	ldr	r3, [r4, #28]
    1452:	f013 0f04 	tst.w	r3, #4
    1456:	d1fb      	bne.n	1450 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1458:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    145e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1460:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1462:	69e3      	ldr	r3, [r4, #28]
    1464:	f013 0f04 	tst.w	r3, #4
    1468:	d1fb      	bne.n	1462 <_sercom_i2c_sync_send_address+0x106>
    146a:	e7b0      	b.n	13ce <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    146c:	f013 0f04 	tst.w	r3, #4
    1470:	d11f      	bne.n	14b2 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    1472:	886b      	ldrh	r3, [r5, #2]
    1474:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1478:	d039      	beq.n	14ee <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    147a:	882b      	ldrh	r3, [r5, #0]
    147c:	121b      	asrs	r3, r3, #8
    147e:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1480:	f003 0206 	and.w	r2, r3, #6
    1484:	69e3      	ldr	r3, [r4, #28]
    1486:	f013 0f04 	tst.w	r3, #4
    148a:	d1fb      	bne.n	1484 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    148c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1492:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1494:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1498:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    149a:	69e3      	ldr	r3, [r4, #28]
    149c:	f013 0f04 	tst.w	r3, #4
    14a0:	d1fb      	bne.n	149a <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    14a2:	886b      	ldrh	r3, [r5, #2]
    14a4:	b29b      	uxth	r3, r3
    14a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    14aa:	b29b      	uxth	r3, r3
    14ac:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    14ae:	2000      	movs	r0, #0
    14b0:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    14b2:	686b      	ldr	r3, [r5, #4]
    14b4:	2b00      	cmp	r3, #0
    14b6:	dd04      	ble.n	14c2 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    14b8:	886b      	ldrh	r3, [r5, #2]
    14ba:	b29b      	uxth	r3, r3
    14bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    14c0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14c2:	886b      	ldrh	r3, [r5, #2]
    14c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14c8:	d108      	bne.n	14dc <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    14ca:	886b      	ldrh	r3, [r5, #2]
    14cc:	b29b      	uxth	r3, r3
    14ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14d2:	b29b      	uxth	r3, r3
    14d4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    14d6:	f06f 0001 	mvn.w	r0, #1
    14da:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14dc:	6863      	ldr	r3, [r4, #4]
    14de:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14e2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14e4:	69e3      	ldr	r3, [r4, #28]
    14e6:	f013 0f04 	tst.w	r3, #4
    14ea:	d1fb      	bne.n	14e4 <_sercom_i2c_sync_send_address+0x188>
    14ec:	e7ed      	b.n	14ca <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    14ee:	6868      	ldr	r0, [r5, #4]
    14f0:	b998      	cbnz	r0, 151a <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    14f2:	886b      	ldrh	r3, [r5, #2]
    14f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14f8:	d106      	bne.n	1508 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    14fa:	886b      	ldrh	r3, [r5, #2]
    14fc:	b29b      	uxth	r3, r3
    14fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1502:	b29b      	uxth	r3, r3
    1504:	806b      	strh	r3, [r5, #2]
    1506:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1508:	6863      	ldr	r3, [r4, #4]
    150a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    150e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1510:	69e3      	ldr	r3, [r4, #28]
    1512:	f013 0f04 	tst.w	r3, #4
    1516:	d1fb      	bne.n	1510 <_sercom_i2c_sync_send_address+0x1b4>
    1518:	e7ef      	b.n	14fa <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    151a:	68ab      	ldr	r3, [r5, #8]
    151c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    151e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1520:	69e3      	ldr	r3, [r4, #28]
    1522:	f013 0f04 	tst.w	r3, #4
    1526:	d1fb      	bne.n	1520 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    1528:	68ab      	ldr	r3, [r5, #8]
    152a:	3301      	adds	r3, #1
    152c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    152e:	686b      	ldr	r3, [r5, #4]
    1530:	3b01      	subs	r3, #1
    1532:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1534:	2000      	movs	r0, #0
    1536:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1538:	f010 0f02 	tst.w	r0, #2
    153c:	d048      	beq.n	15d0 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    153e:	6869      	ldr	r1, [r5, #4]
    1540:	2900      	cmp	r1, #0
    1542:	d03d      	beq.n	15c0 <_sercom_i2c_sync_send_address+0x264>
    1544:	f013 0f04 	tst.w	r3, #4
    1548:	d13a      	bne.n	15c0 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    154a:	3901      	subs	r1, #1
    154c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    154e:	b901      	cbnz	r1, 1552 <_sercom_i2c_sync_send_address+0x1f6>
    1550:	b1e2      	cbz	r2, 158c <_sercom_i2c_sync_send_address+0x230>
    1552:	2901      	cmp	r1, #1
    1554:	d018      	beq.n	1588 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    1556:	686b      	ldr	r3, [r5, #4]
    1558:	b94b      	cbnz	r3, 156e <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    155a:	886b      	ldrh	r3, [r5, #2]
    155c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1560:	d11d      	bne.n	159e <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    1562:	886b      	ldrh	r3, [r5, #2]
    1564:	b29b      	uxth	r3, r3
    1566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    156a:	b29b      	uxth	r3, r3
    156c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    156e:	68aa      	ldr	r2, [r5, #8]
    1570:	1c53      	adds	r3, r2, #1
    1572:	60ab      	str	r3, [r5, #8]
    1574:	69e3      	ldr	r3, [r4, #28]
    1576:	f013 0f04 	tst.w	r3, #4
    157a:	d1fb      	bne.n	1574 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    157c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    157e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1580:	2302      	movs	r3, #2
    1582:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1584:	2000      	movs	r0, #0
    1586:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1588:	2a00      	cmp	r2, #0
    158a:	d0e4      	beq.n	1556 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    158c:	6863      	ldr	r3, [r4, #4]
    158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1592:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1594:	69e3      	ldr	r3, [r4, #28]
    1596:	f013 0f04 	tst.w	r3, #4
    159a:	d1fb      	bne.n	1594 <_sercom_i2c_sync_send_address+0x238>
    159c:	e7db      	b.n	1556 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    159e:	6863      	ldr	r3, [r4, #4]
    15a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    15a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	f013 0f04 	tst.w	r3, #4
    15ac:	d1fb      	bne.n	15a6 <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15ae:	6863      	ldr	r3, [r4, #4]
    15b0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15b6:	69e3      	ldr	r3, [r4, #28]
    15b8:	f013 0f04 	tst.w	r3, #4
    15bc:	d1fb      	bne.n	15b6 <_sercom_i2c_sync_send_address+0x25a>
    15be:	e7d0      	b.n	1562 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15c0:	2302      	movs	r3, #2
    15c2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    15c4:	f06f 0001 	mvn.w	r0, #1
    15c8:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    15ca:	f06f 0003 	mvn.w	r0, #3
    15ce:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    15d0:	2000      	movs	r0, #0
}
    15d2:	bd70      	pop	{r4, r5, r6, pc}
    15d4:	00006750 	.word	0x00006750
    15d8:	00000c25 	.word	0x00000c25

000015dc <_spi_m_dma_rx_enable>:
{
    15dc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    15de:	4604      	mov	r4, r0
    15e0:	b168      	cbz	r0, 15fe <_spi_m_dma_rx_enable+0x22>
    15e2:	6803      	ldr	r3, [r0, #0]
    15e4:	b14b      	cbz	r3, 15fa <_spi_m_dma_rx_enable+0x1e>
    15e6:	2001      	movs	r0, #1
    15e8:	f640 32fe 	movw	r2, #3070	; 0xbfe
    15ec:	4905      	ldr	r1, [pc, #20]	; (1604 <_spi_m_dma_rx_enable+0x28>)
    15ee:	4b06      	ldr	r3, [pc, #24]	; (1608 <_spi_m_dma_rx_enable+0x2c>)
    15f0:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    15f2:	6820      	ldr	r0, [r4, #0]
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <_spi_m_dma_rx_enable+0x30>)
    15f6:	4798      	blx	r3
}
    15f8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    15fa:	2000      	movs	r0, #0
    15fc:	e7f4      	b.n	15e8 <_spi_m_dma_rx_enable+0xc>
    15fe:	2000      	movs	r0, #0
    1600:	e7f2      	b.n	15e8 <_spi_m_dma_rx_enable+0xc>
    1602:	bf00      	nop
    1604:	00006750 	.word	0x00006750
    1608:	00000c25 	.word	0x00000c25
    160c:	00001163 	.word	0x00001163

00001610 <_spi_m_dma_rx_disable>:
{
    1610:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1612:	4604      	mov	r4, r0
    1614:	b168      	cbz	r0, 1632 <_spi_m_dma_rx_disable+0x22>
    1616:	6803      	ldr	r3, [r0, #0]
    1618:	b14b      	cbz	r3, 162e <_spi_m_dma_rx_disable+0x1e>
    161a:	2001      	movs	r0, #1
    161c:	f640 4205 	movw	r2, #3077	; 0xc05
    1620:	4905      	ldr	r1, [pc, #20]	; (1638 <_spi_m_dma_rx_disable+0x28>)
    1622:	4b06      	ldr	r3, [pc, #24]	; (163c <_spi_m_dma_rx_disable+0x2c>)
    1624:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    1626:	6820      	ldr	r0, [r4, #0]
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <_spi_m_dma_rx_disable+0x30>)
    162a:	4798      	blx	r3
}
    162c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    162e:	2000      	movs	r0, #0
    1630:	e7f4      	b.n	161c <_spi_m_dma_rx_disable+0xc>
    1632:	2000      	movs	r0, #0
    1634:	e7f2      	b.n	161c <_spi_m_dma_rx_disable+0xc>
    1636:	bf00      	nop
    1638:	00006750 	.word	0x00006750
    163c:	00000c25 	.word	0x00000c25
    1640:	00001185 	.word	0x00001185

00001644 <_i2c_m_sync_init>:
{
    1644:	b538      	push	{r3, r4, r5, lr}
    1646:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1648:	4604      	mov	r4, r0
    164a:	f240 5219 	movw	r2, #1305	; 0x519
    164e:	4906      	ldr	r1, [pc, #24]	; (1668 <_i2c_m_sync_init+0x24>)
    1650:	3000      	adds	r0, #0
    1652:	bf18      	it	ne
    1654:	2001      	movne	r0, #1
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <_i2c_m_sync_init+0x28>)
    1658:	4798      	blx	r3
	i2c_dev->hw = hw;
    165a:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    165c:	4629      	mov	r1, r5
    165e:	4620      	mov	r0, r4
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <_i2c_m_sync_init+0x2c>)
    1662:	4798      	blx	r3
}
    1664:	bd38      	pop	{r3, r4, r5, pc}
    1666:	bf00      	nop
    1668:	00006750 	.word	0x00006750
    166c:	00000c25 	.word	0x00000c25
    1670:	0000127d 	.word	0x0000127d

00001674 <_i2c_m_sync_enable>:
{
    1674:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    1676:	4e1b      	ldr	r6, [pc, #108]	; (16e4 <_i2c_m_sync_enable+0x70>)
    1678:	4604      	mov	r4, r0
    167a:	f240 5236 	movw	r2, #1334	; 0x536
    167e:	4631      	mov	r1, r6
    1680:	3000      	adds	r0, #0
    1682:	bf18      	it	ne
    1684:	2001      	movne	r0, #1
    1686:	4d18      	ldr	r5, [pc, #96]	; (16e8 <_i2c_m_sync_enable+0x74>)
    1688:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    168a:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    168c:	f240 6206 	movw	r2, #1542	; 0x606
    1690:	4631      	mov	r1, r6
    1692:	1c20      	adds	r0, r4, #0
    1694:	bf18      	it	ne
    1696:	2001      	movne	r0, #1
    1698:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    169a:	6823      	ldr	r3, [r4, #0]
    169c:	f043 0302 	orr.w	r3, r3, #2
    16a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16a2:	69e3      	ldr	r3, [r4, #28]
    16a4:	f013 0f03 	tst.w	r3, #3
    16a8:	d1fb      	bne.n	16a2 <_i2c_m_sync_enable+0x2e>
    16aa:	2104      	movs	r1, #4
    16ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    16b0:	69e3      	ldr	r3, [r4, #28]
    16b2:	f013 0f04 	tst.w	r3, #4
    16b6:	d1fb      	bne.n	16b0 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    16b8:	8b63      	ldrh	r3, [r4, #26]
    16ba:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    16be:	2b01      	cmp	r3, #1
    16c0:	d00b      	beq.n	16da <_i2c_m_sync_enable+0x66>
		timeout--;
    16c2:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    16c4:	2a00      	cmp	r2, #0
    16c6:	dcf3      	bgt.n	16b0 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    16c8:	3901      	subs	r1, #1
    16ca:	d008      	beq.n	16de <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    16cc:	2310      	movs	r3, #16
    16ce:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16d0:	69e3      	ldr	r3, [r4, #28]
    16d2:	f013 0f04 	tst.w	r3, #4
    16d6:	d1fb      	bne.n	16d0 <_i2c_m_sync_enable+0x5c>
    16d8:	e7e8      	b.n	16ac <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    16da:	2000      	movs	r0, #0
    16dc:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    16de:	f06f 0005 	mvn.w	r0, #5
}
    16e2:	bd70      	pop	{r4, r5, r6, pc}
    16e4:	00006750 	.word	0x00006750
    16e8:	00000c25 	.word	0x00000c25

000016ec <_i2c_m_sync_transfer>:
{
    16ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16f0:	4605      	mov	r5, r0
    16f2:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    16f4:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    16f6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1998 <_i2c_m_sync_transfer+0x2ac>
    16fa:	f240 52d1 	movw	r2, #1489	; 0x5d1
    16fe:	4641      	mov	r1, r8
    1700:	3000      	adds	r0, #0
    1702:	bf18      	it	ne
    1704:	2001      	movne	r0, #1
    1706:	4fa2      	ldr	r7, [pc, #648]	; (1990 <_i2c_m_sync_transfer+0x2a4>)
    1708:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    170a:	6928      	ldr	r0, [r5, #16]
    170c:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1710:	4641      	mov	r1, r8
    1712:	3000      	adds	r0, #0
    1714:	bf18      	it	ne
    1716:	2001      	movne	r0, #1
    1718:	47b8      	blx	r7
	ASSERT(msg);
    171a:	f240 52d3 	movw	r2, #1491	; 0x5d3
    171e:	4641      	mov	r1, r8
    1720:	1c30      	adds	r0, r6, #0
    1722:	bf18      	it	ne
    1724:	2001      	movne	r0, #1
    1726:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1728:	886b      	ldrh	r3, [r5, #2]
    172a:	f413 7f80 	tst.w	r3, #256	; 0x100
    172e:	f040 812a 	bne.w	1986 <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    1732:	8873      	ldrh	r3, [r6, #2]
    1734:	b29b      	uxth	r3, r3
    1736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    173a:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    173c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1740:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1744:	6863      	ldr	r3, [r4, #4]
    1746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    174a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    174c:	69e3      	ldr	r3, [r4, #28]
    174e:	f013 0f04 	tst.w	r3, #4
    1752:	d1fb      	bne.n	174c <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1754:	4628      	mov	r0, r5
    1756:	4b8f      	ldr	r3, [pc, #572]	; (1994 <_i2c_m_sync_transfer+0x2a8>)
    1758:	4798      	blx	r3
	if (ret) {
    175a:	4603      	mov	r3, r0
    175c:	2800      	cmp	r0, #0
    175e:	f000 80b0 	beq.w	18c2 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1762:	886a      	ldrh	r2, [r5, #2]
    1764:	b292      	uxth	r2, r2
    1766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    176a:	b292      	uxth	r2, r2
    176c:	806a      	strh	r2, [r5, #2]
		return ret;
    176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1772:	f06f 0004 	mvn.w	r0, #4
    1776:	e0b7      	b.n	18e8 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1778:	8873      	ldrh	r3, [r6, #2]
    177a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    177e:	d107      	bne.n	1790 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1780:	886b      	ldrh	r3, [r5, #2]
    1782:	b29b      	uxth	r3, r3
    1784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1788:	b29b      	uxth	r3, r3
    178a:	806b      	strh	r3, [r5, #2]
			return ret;
    178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1790:	6863      	ldr	r3, [r4, #4]
    1792:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1796:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1798:	69e3      	ldr	r3, [r4, #28]
    179a:	f013 0f04 	tst.w	r3, #4
    179e:	d1fb      	bne.n	1798 <_i2c_m_sync_transfer+0xac>
    17a0:	e7ee      	b.n	1780 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    17a2:	f013 0f04 	tst.w	r3, #4
    17a6:	d11f      	bne.n	17e8 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    17a8:	886b      	ldrh	r3, [r5, #2]
    17aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17ae:	d039      	beq.n	1824 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    17b0:	882b      	ldrh	r3, [r5, #0]
    17b2:	121b      	asrs	r3, r3, #8
    17b4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17b6:	f003 0206 	and.w	r2, r3, #6
    17ba:	69e3      	ldr	r3, [r4, #28]
    17bc:	f013 0f04 	tst.w	r3, #4
    17c0:	d1fb      	bne.n	17ba <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    17c8:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    17ca:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17ce:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17d0:	69e3      	ldr	r3, [r4, #28]
    17d2:	f013 0f04 	tst.w	r3, #4
    17d6:	d1fb      	bne.n	17d0 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    17d8:	886b      	ldrh	r3, [r5, #2]
    17da:	b29b      	uxth	r3, r3
    17dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    17e0:	b29b      	uxth	r3, r3
    17e2:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    17e4:	2000      	movs	r0, #0
    17e6:	e06b      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    17e8:	686b      	ldr	r3, [r5, #4]
    17ea:	2b00      	cmp	r3, #0
    17ec:	dd04      	ble.n	17f8 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    17ee:	886b      	ldrh	r3, [r5, #2]
    17f0:	b29b      	uxth	r3, r3
    17f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17f6:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    17f8:	886b      	ldrh	r3, [r5, #2]
    17fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17fe:	d108      	bne.n	1812 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    1800:	886b      	ldrh	r3, [r5, #2]
    1802:	b29b      	uxth	r3, r3
    1804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1808:	b29b      	uxth	r3, r3
    180a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    180c:	f06f 0001 	mvn.w	r0, #1
    1810:	e056      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1812:	6863      	ldr	r3, [r4, #4]
    1814:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1818:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    181a:	69e3      	ldr	r3, [r4, #28]
    181c:	f013 0f04 	tst.w	r3, #4
    1820:	d1fb      	bne.n	181a <_i2c_m_sync_transfer+0x12e>
    1822:	e7ed      	b.n	1800 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    1824:	6868      	ldr	r0, [r5, #4]
    1826:	b998      	cbnz	r0, 1850 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1828:	886b      	ldrh	r3, [r5, #2]
    182a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    182e:	d106      	bne.n	183e <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1830:	886b      	ldrh	r3, [r5, #2]
    1832:	b29b      	uxth	r3, r3
    1834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1838:	b29b      	uxth	r3, r3
    183a:	806b      	strh	r3, [r5, #2]
    183c:	e040      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    183e:	6863      	ldr	r3, [r4, #4]
    1840:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1844:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1846:	69e3      	ldr	r3, [r4, #28]
    1848:	f013 0f04 	tst.w	r3, #4
    184c:	d1fb      	bne.n	1846 <_i2c_m_sync_transfer+0x15a>
    184e:	e7ef      	b.n	1830 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1850:	68ab      	ldr	r3, [r5, #8]
    1852:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1854:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1856:	69e3      	ldr	r3, [r4, #28]
    1858:	f013 0f04 	tst.w	r3, #4
    185c:	d1fb      	bne.n	1856 <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    185e:	68ab      	ldr	r3, [r5, #8]
    1860:	3301      	adds	r3, #1
    1862:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1864:	686b      	ldr	r3, [r5, #4]
    1866:	3b01      	subs	r3, #1
    1868:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    186a:	2000      	movs	r0, #0
    186c:	e028      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    186e:	f017 0f02 	tst.w	r7, #2
    1872:	f000 8083 	beq.w	197c <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1876:	6869      	ldr	r1, [r5, #4]
    1878:	2900      	cmp	r1, #0
    187a:	d077      	beq.n	196c <_i2c_m_sync_transfer+0x280>
    187c:	f013 0f04 	tst.w	r3, #4
    1880:	d174      	bne.n	196c <_i2c_m_sync_transfer+0x280>
			msg->len--;
    1882:	3901      	subs	r1, #1
    1884:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1886:	b909      	cbnz	r1, 188c <_i2c_m_sync_transfer+0x1a0>
    1888:	2a00      	cmp	r2, #0
    188a:	d055      	beq.n	1938 <_i2c_m_sync_transfer+0x24c>
    188c:	2901      	cmp	r1, #1
    188e:	d051      	beq.n	1934 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1890:	686b      	ldr	r3, [r5, #4]
    1892:	b94b      	cbnz	r3, 18a8 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    1894:	886b      	ldrh	r3, [r5, #2]
    1896:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    189a:	d156      	bne.n	194a <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    189c:	886b      	ldrh	r3, [r5, #2]
    189e:	b29b      	uxth	r3, r3
    18a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    18a4:	b29b      	uxth	r3, r3
    18a6:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    18a8:	68aa      	ldr	r2, [r5, #8]
    18aa:	1c53      	adds	r3, r2, #1
    18ac:	60ab      	str	r3, [r5, #8]
    18ae:	69e3      	ldr	r3, [r4, #28]
    18b0:	f013 0f04 	tst.w	r3, #4
    18b4:	d1fb      	bne.n	18ae <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    18b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18b8:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    18ba:	2302      	movs	r3, #2
    18bc:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    18be:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    18c0:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    18c2:	886a      	ldrh	r2, [r5, #2]
    18c4:	f412 7f80 	tst.w	r2, #256	; 0x100
    18c8:	d05a      	beq.n	1980 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    18ca:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    18cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    18d0:	7e03      	ldrb	r3, [r0, #24]
    18d2:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    18d4:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    18d6:	1e51      	subs	r1, r2, #1
    18d8:	2a00      	cmp	r2, #0
    18da:	f43f af4a 	beq.w	1772 <_i2c_m_sync_transfer+0x86>
    18de:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    18e0:	f013 0f03 	tst.w	r3, #3
    18e4:	d0f4      	beq.n	18d0 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    18e6:	2000      	movs	r0, #0
		if (ret) {
    18e8:	2800      	cmp	r0, #0
    18ea:	f47f af45 	bne.w	1778 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    18ee:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18f0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18f4:	69e3      	ldr	r3, [r4, #28]
    18f6:	f013 0f04 	tst.w	r3, #4
    18fa:	d1fb      	bne.n	18f4 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    18fc:	8b63      	ldrh	r3, [r4, #26]
    18fe:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1900:	f017 0f01 	tst.w	r7, #1
    1904:	d0b3      	beq.n	186e <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1906:	f013 0f02 	tst.w	r3, #2
    190a:	f43f af4a 	beq.w	17a2 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    190e:	2201      	movs	r2, #1
    1910:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1912:	886a      	ldrh	r2, [r5, #2]
    1914:	b292      	uxth	r2, r2
    1916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    191a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    191c:	886a      	ldrh	r2, [r5, #2]
    191e:	b292      	uxth	r2, r2
    1920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1924:	b292      	uxth	r2, r2
    1926:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1928:	f013 0f01 	tst.w	r3, #1
    192c:	d023      	beq.n	1976 <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    192e:	f06f 0004 	mvn.w	r0, #4
    1932:	e7c5      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1934:	2a00      	cmp	r2, #0
    1936:	d0ab      	beq.n	1890 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1938:	6863      	ldr	r3, [r4, #4]
    193a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    193e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1940:	69e3      	ldr	r3, [r4, #28]
    1942:	f013 0f04 	tst.w	r3, #4
    1946:	d1fb      	bne.n	1940 <_i2c_m_sync_transfer+0x254>
    1948:	e7a2      	b.n	1890 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    194a:	6863      	ldr	r3, [r4, #4]
    194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1950:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1952:	69e3      	ldr	r3, [r4, #28]
    1954:	f013 0f04 	tst.w	r3, #4
    1958:	d1fb      	bne.n	1952 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    195a:	6863      	ldr	r3, [r4, #4]
    195c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1960:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	f013 0f04 	tst.w	r3, #4
    1968:	d1fb      	bne.n	1962 <_i2c_m_sync_transfer+0x276>
    196a:	e797      	b.n	189c <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    196c:	2302      	movs	r3, #2
    196e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1970:	f06f 0001 	mvn.w	r0, #1
    1974:	e7a4      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    1976:	f06f 0003 	mvn.w	r0, #3
    197a:	e7a1      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    197c:	2000      	movs	r0, #0
    197e:	e79f      	b.n	18c0 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1980:	4618      	mov	r0, r3
    1982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    1986:	f06f 0005 	mvn.w	r0, #5
}
    198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    198e:	bf00      	nop
    1990:	00000c25 	.word	0x00000c25
    1994:	0000135d 	.word	0x0000135d
    1998:	00006750 	.word	0x00006750

0000199c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	4605      	mov	r5, r0
    19a0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    19a2:	4608      	mov	r0, r1
    19a4:	4b50      	ldr	r3, [pc, #320]	; (1ae8 <_spi_m_dma_init+0x14c>)
    19a6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    19a8:	2300      	movs	r3, #0
    19aa:	2b00      	cmp	r3, #0
    19ac:	d072      	beq.n	1a94 <_spi_m_dma_init+0xf8>
	return NULL;
    19ae:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    19b0:	2d00      	cmp	r5, #0
    19b2:	d07b      	beq.n	1aac <_spi_m_dma_init+0x110>
    19b4:	2c00      	cmp	r4, #0
    19b6:	d077      	beq.n	1aa8 <_spi_m_dma_init+0x10c>
    19b8:	2001      	movs	r0, #1
    19ba:	f640 42b3 	movw	r2, #3251	; 0xcb3
    19be:	494b      	ldr	r1, [pc, #300]	; (1aec <_spi_m_dma_init+0x150>)
    19c0:	4b4b      	ldr	r3, [pc, #300]	; (1af0 <_spi_m_dma_init+0x154>)
    19c2:	4798      	blx	r3

	if (regs == NULL) {
    19c4:	2e00      	cmp	r6, #0
    19c6:	f000 808b 	beq.w	1ae0 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19ca:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19cc:	f013 0f01 	tst.w	r3, #1
    19d0:	d11d      	bne.n	1a0e <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19d2:	6833      	ldr	r3, [r6, #0]
    19d4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d8:	69e3      	ldr	r3, [r4, #28]
    19da:	f013 0f03 	tst.w	r3, #3
    19de:	d1fb      	bne.n	19d8 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19e0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19e2:	f013 0f02 	tst.w	r3, #2
    19e6:	d00b      	beq.n	1a00 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19e8:	6823      	ldr	r3, [r4, #0]
    19ea:	f023 0302 	bic.w	r3, r3, #2
    19ee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19f0:	69e3      	ldr	r3, [r4, #28]
    19f2:	f013 0f03 	tst.w	r3, #3
    19f6:	d1fb      	bne.n	19f0 <_spi_m_dma_init+0x54>
    19f8:	69e3      	ldr	r3, [r4, #28]
    19fa:	f013 0f02 	tst.w	r3, #2
    19fe:	d1fb      	bne.n	19f8 <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1a00:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a04:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f03 	tst.w	r3, #3
    1a0c:	d1fb      	bne.n	1a06 <_spi_m_dma_init+0x6a>
    1a0e:	69e3      	ldr	r3, [r4, #28]
    1a10:	f013 0f01 	tst.w	r3, #1
    1a14:	d1fb      	bne.n	1a0e <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1a16:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1a18:	2c00      	cmp	r4, #0
    1a1a:	d04b      	beq.n	1ab4 <_spi_m_dma_init+0x118>
    1a1c:	2e00      	cmp	r6, #0
    1a1e:	d047      	beq.n	1ab0 <_spi_m_dma_init+0x114>
    1a20:	2001      	movs	r0, #1
    1a22:	f640 120a 	movw	r2, #2314	; 0x90a
    1a26:	4931      	ldr	r1, [pc, #196]	; (1aec <_spi_m_dma_init+0x150>)
    1a28:	4b31      	ldr	r3, [pc, #196]	; (1af0 <_spi_m_dma_init+0x154>)
    1a2a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a2c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a2e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a32:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a36:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a38:	69e3      	ldr	r3, [r4, #28]
    1a3a:	f013 0f03 	tst.w	r3, #3
    1a3e:	d1fb      	bne.n	1a38 <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1a40:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a42:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a46:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a4e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a50:	69e3      	ldr	r3, [r4, #28]
    1a52:	f013 0f17 	tst.w	r3, #23
    1a56:	d1fb      	bne.n	1a50 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a58:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a5a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a5c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1a62:	4620      	mov	r0, r4
    1a64:	4b23      	ldr	r3, [pc, #140]	; (1af4 <_spi_m_dma_init+0x158>)
    1a66:	4798      	blx	r3
    1a68:	bb30      	cbnz	r0, 1ab8 <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1a6a:	4620      	mov	r0, r4
    1a6c:	4b22      	ldr	r3, [pc, #136]	; (1af8 <_spi_m_dma_init+0x15c>)
    1a6e:	4798      	blx	r3
    1a70:	4601      	mov	r1, r0
    1a72:	f105 001c 	add.w	r0, r5, #28
    1a76:	4b21      	ldr	r3, [pc, #132]	; (1afc <_spi_m_dma_init+0x160>)
    1a78:	4798      	blx	r3
	dev->resource->back                 = dev;
    1a7a:	69eb      	ldr	r3, [r5, #28]
    1a7c:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1a7e:	69eb      	ldr	r3, [r5, #28]
    1a80:	4a1f      	ldr	r2, [pc, #124]	; (1b00 <_spi_m_dma_init+0x164>)
    1a82:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1a84:	69eb      	ldr	r3, [r5, #28]
    1a86:	4a1f      	ldr	r2, [pc, #124]	; (1b04 <_spi_m_dma_init+0x168>)
    1a88:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1a8a:	69eb      	ldr	r3, [r5, #28]
    1a8c:	4a1e      	ldr	r2, [pc, #120]	; (1b08 <_spi_m_dma_init+0x16c>)
    1a8e:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1a90:	2000      	movs	r0, #0
    1a92:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a94:	2805      	cmp	r0, #5
    1a96:	d002      	beq.n	1a9e <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a98:	3301      	adds	r3, #1
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	e785      	b.n	19aa <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1a9e:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1aa2:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <_spi_m_dma_init+0x170>)
    1aa4:	441e      	add	r6, r3
    1aa6:	e783      	b.n	19b0 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1aa8:	2000      	movs	r0, #0
    1aaa:	e786      	b.n	19ba <_spi_m_dma_init+0x1e>
    1aac:	2000      	movs	r0, #0
    1aae:	e784      	b.n	19ba <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1ab0:	2000      	movs	r0, #0
    1ab2:	e7b6      	b.n	1a22 <_spi_m_dma_init+0x86>
    1ab4:	2000      	movs	r0, #0
    1ab6:	e7b4      	b.n	1a22 <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1ab8:	4620      	mov	r0, r4
    1aba:	4b15      	ldr	r3, [pc, #84]	; (1b10 <_spi_m_dma_init+0x174>)
    1abc:	4798      	blx	r3
    1abe:	4601      	mov	r1, r0
    1ac0:	f105 001c 	add.w	r0, r5, #28
    1ac4:	4b0d      	ldr	r3, [pc, #52]	; (1afc <_spi_m_dma_init+0x160>)
    1ac6:	4798      	blx	r3
		dev->resource->back                 = dev;
    1ac8:	69eb      	ldr	r3, [r5, #28]
    1aca:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1acc:	69eb      	ldr	r3, [r5, #28]
    1ace:	4a11      	ldr	r2, [pc, #68]	; (1b14 <_spi_m_dma_init+0x178>)
    1ad0:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1ad2:	69eb      	ldr	r3, [r5, #28]
    1ad4:	4a0b      	ldr	r2, [pc, #44]	; (1b04 <_spi_m_dma_init+0x168>)
    1ad6:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1ad8:	69eb      	ldr	r3, [r5, #28]
    1ada:	4a0b      	ldr	r2, [pc, #44]	; (1b08 <_spi_m_dma_init+0x16c>)
    1adc:	609a      	str	r2, [r3, #8]
    1ade:	e7c4      	b.n	1a6a <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1ae0:	f06f 000c 	mvn.w	r0, #12
}
    1ae4:	bd70      	pop	{r4, r5, r6, pc}
    1ae6:	bf00      	nop
    1ae8:	00001101 	.word	0x00001101
    1aec:	00006750 	.word	0x00006750
    1af0:	00000c25 	.word	0x00000c25
    1af4:	000011c9 	.word	0x000011c9
    1af8:	000011b1 	.word	0x000011b1
    1afc:	00000fa1 	.word	0x00000fa1
    1b00:	0000121d 	.word	0x0000121d
    1b04:	00001229 	.word	0x00001229
    1b08:	00001211 	.word	0x00001211
    1b0c:	0000673c 	.word	0x0000673c
    1b10:	000011e1 	.word	0x000011e1
    1b14:	00001205 	.word	0x00001205

00001b18 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1b18:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b1a:	4604      	mov	r4, r0
    1b1c:	b168      	cbz	r0, 1b3a <_spi_m_dma_enable+0x22>
    1b1e:	6803      	ldr	r3, [r0, #0]
    1b20:	b14b      	cbz	r3, 1b36 <_spi_m_dma_enable+0x1e>
    1b22:	2001      	movs	r0, #1
    1b24:	f640 42e1 	movw	r2, #3297	; 0xce1
    1b28:	4905      	ldr	r1, [pc, #20]	; (1b40 <_spi_m_dma_enable+0x28>)
    1b2a:	4b06      	ldr	r3, [pc, #24]	; (1b44 <_spi_m_dma_enable+0x2c>)
    1b2c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1b2e:	6820      	ldr	r0, [r4, #0]
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <_spi_m_dma_enable+0x30>)
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1b36:	2000      	movs	r0, #0
    1b38:	e7f4      	b.n	1b24 <_spi_m_dma_enable+0xc>
    1b3a:	2000      	movs	r0, #0
    1b3c:	e7f2      	b.n	1b24 <_spi_m_dma_enable+0xc>
    1b3e:	bf00      	nop
    1b40:	00006750 	.word	0x00006750
    1b44:	00000c25 	.word	0x00000c25
    1b48:	00001141 	.word	0x00001141

00001b4c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	4605      	mov	r5, r0
    1b50:	4614      	mov	r4, r2
	switch (type) {
    1b52:	2903      	cmp	r1, #3
    1b54:	d835      	bhi.n	1bc2 <_spi_m_dma_register_callback+0x76>
    1b56:	e8df f001 	tbb	[pc, r1]
    1b5a:	0d02      	.short	0x0d02
    1b5c:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1b5e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b60:	6800      	ldr	r0, [r0, #0]
    1b62:	4b18      	ldr	r3, [pc, #96]	; (1bc4 <_spi_m_dma_register_callback+0x78>)
    1b64:	4798      	blx	r3
    1b66:	1c22      	adds	r2, r4, #0
    1b68:	bf18      	it	ne
    1b6a:	2201      	movne	r2, #1
    1b6c:	2100      	movs	r1, #0
    1b6e:	4b16      	ldr	r3, [pc, #88]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b70:	4798      	blx	r3
		break;
    1b72:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1b74:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b76:	6800      	ldr	r0, [r0, #0]
    1b78:	4b14      	ldr	r3, [pc, #80]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1b7a:	4798      	blx	r3
    1b7c:	1c22      	adds	r2, r4, #0
    1b7e:	bf18      	it	ne
    1b80:	2201      	movne	r2, #1
    1b82:	2100      	movs	r1, #0
    1b84:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b86:	4798      	blx	r3
		break;
    1b88:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1b8a:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b8c:	6800      	ldr	r0, [r0, #0]
    1b8e:	4b0f      	ldr	r3, [pc, #60]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1b90:	4798      	blx	r3
    1b92:	3400      	adds	r4, #0
    1b94:	bf18      	it	ne
    1b96:	2401      	movne	r4, #1
    1b98:	4622      	mov	r2, r4
    1b9a:	2101      	movs	r1, #1
    1b9c:	4e0a      	ldr	r6, [pc, #40]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1b9e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1ba0:	6828      	ldr	r0, [r5, #0]
    1ba2:	4b08      	ldr	r3, [pc, #32]	; (1bc4 <_spi_m_dma_register_callback+0x78>)
    1ba4:	4798      	blx	r3
    1ba6:	4622      	mov	r2, r4
    1ba8:	2101      	movs	r1, #1
    1baa:	47b0      	blx	r6
		break;
    1bac:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1bae:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1bb0:	6800      	ldr	r0, [r0, #0]
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <_spi_m_dma_register_callback+0x80>)
    1bb4:	4798      	blx	r3
    1bb6:	1c22      	adds	r2, r4, #0
    1bb8:	bf18      	it	ne
    1bba:	2201      	movne	r2, #1
    1bbc:	2102      	movs	r1, #2
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <_spi_m_dma_register_callback+0x7c>)
    1bc0:	4798      	blx	r3
    1bc2:	bd70      	pop	{r4, r5, r6, pc}
    1bc4:	000011b1 	.word	0x000011b1
    1bc8:	00000e55 	.word	0x00000e55
    1bcc:	000011e1 	.word	0x000011e1

00001bd0 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bd4:	4605      	mov	r5, r0
    1bd6:	4689      	mov	r9, r1
    1bd8:	4690      	mov	r8, r2
    1bda:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1bdc:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1bde:	4620      	mov	r0, r4
    1be0:	4b33      	ldr	r3, [pc, #204]	; (1cb0 <_spi_m_dma_transfer+0xe0>)
    1be2:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1be4:	2300      	movs	r3, #0
    1be6:	2b00      	cmp	r3, #0
    1be8:	d03f      	beq.n	1c6a <_spi_m_dma_transfer+0x9a>
	return NULL;
    1bea:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1bee:	4620      	mov	r0, r4
    1bf0:	4b30      	ldr	r3, [pc, #192]	; (1cb4 <_spi_m_dma_transfer+0xe4>)
    1bf2:	4798      	blx	r3
    1bf4:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1bf6:	4620      	mov	r0, r4
    1bf8:	4b2f      	ldr	r3, [pc, #188]	; (1cb8 <_spi_m_dma_transfer+0xe8>)
    1bfa:	4798      	blx	r3
    1bfc:	4604      	mov	r4, r0

	if (rxbuf) {
    1bfe:	f1b8 0f00 	cmp.w	r8, #0
    1c02:	d03c      	beq.n	1c7e <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1c04:	4628      	mov	r0, r5
    1c06:	4b2d      	ldr	r3, [pc, #180]	; (1cbc <_spi_m_dma_transfer+0xec>)
    1c08:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1c0a:	6828      	ldr	r0, [r5, #0]
    1c0c:	4b2c      	ldr	r3, [pc, #176]	; (1cc0 <_spi_m_dma_transfer+0xf0>)
    1c0e:	4798      	blx	r3
    1c10:	4601      	mov	r1, r0
    1c12:	4630      	mov	r0, r6
    1c14:	4b2b      	ldr	r3, [pc, #172]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c16:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1c18:	4641      	mov	r1, r8
    1c1a:	4630      	mov	r0, r6
    1c1c:	4b2a      	ldr	r3, [pc, #168]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c1e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1c20:	4639      	mov	r1, r7
    1c22:	4630      	mov	r0, r6
    1c24:	4b29      	ldr	r3, [pc, #164]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1c26:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1c28:	2100      	movs	r1, #0
    1c2a:	4630      	mov	r0, r6
    1c2c:	4b28      	ldr	r3, [pc, #160]	; (1cd0 <_spi_m_dma_transfer+0x100>)
    1c2e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1c30:	f1b9 0f00 	cmp.w	r9, #0
    1c34:	d027      	beq.n	1c86 <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1c36:	4649      	mov	r1, r9
    1c38:	4620      	mov	r0, r4
    1c3a:	4b22      	ldr	r3, [pc, #136]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c3c:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c3e:	6828      	ldr	r0, [r5, #0]
    1c40:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <_spi_m_dma_transfer+0x104>)
    1c42:	4798      	blx	r3
    1c44:	4601      	mov	r1, r0
    1c46:	4620      	mov	r0, r4
    1c48:	4b1f      	ldr	r3, [pc, #124]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c4a:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1c4c:	2101      	movs	r1, #1
    1c4e:	4620      	mov	r0, r4
    1c50:	4b21      	ldr	r3, [pc, #132]	; (1cd8 <_spi_m_dma_transfer+0x108>)
    1c52:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c54:	4639      	mov	r1, r7
    1c56:	4620      	mov	r0, r4
    1c58:	4b1c      	ldr	r3, [pc, #112]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1c5a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1c5c:	2100      	movs	r1, #0
    1c5e:	4620      	mov	r0, r4
    1c60:	4b1b      	ldr	r3, [pc, #108]	; (1cd0 <_spi_m_dma_transfer+0x100>)
    1c62:	4798      	blx	r3

	return ERR_NONE;
}
    1c64:	2000      	movs	r0, #0
    1c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1c6a:	2805      	cmp	r0, #5
    1c6c:	d002      	beq.n	1c74 <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c6e:	3301      	adds	r3, #1
    1c70:	b2db      	uxtb	r3, r3
    1c72:	e7b8      	b.n	1be6 <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1c74:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1c78:	4b18      	ldr	r3, [pc, #96]	; (1cdc <_spi_m_dma_transfer+0x10c>)
    1c7a:	449a      	add	sl, r3
    1c7c:	e7b7      	b.n	1bee <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1c7e:	4628      	mov	r0, r5
    1c80:	4b17      	ldr	r3, [pc, #92]	; (1ce0 <_spi_m_dma_transfer+0x110>)
    1c82:	4798      	blx	r3
    1c84:	e7d4      	b.n	1c30 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1c86:	f10a 010e 	add.w	r1, sl, #14
    1c8a:	4620      	mov	r0, r4
    1c8c:	4b0d      	ldr	r3, [pc, #52]	; (1cc4 <_spi_m_dma_transfer+0xf4>)
    1c8e:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c90:	6828      	ldr	r0, [r5, #0]
    1c92:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <_spi_m_dma_transfer+0x104>)
    1c94:	4798      	blx	r3
    1c96:	4601      	mov	r1, r0
    1c98:	4620      	mov	r0, r4
    1c9a:	4b0b      	ldr	r3, [pc, #44]	; (1cc8 <_spi_m_dma_transfer+0xf8>)
    1c9c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1c9e:	2100      	movs	r1, #0
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b0d      	ldr	r3, [pc, #52]	; (1cd8 <_spi_m_dma_transfer+0x108>)
    1ca4:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1ca6:	4639      	mov	r1, r7
    1ca8:	4620      	mov	r0, r4
    1caa:	4b08      	ldr	r3, [pc, #32]	; (1ccc <_spi_m_dma_transfer+0xfc>)
    1cac:	4798      	blx	r3
    1cae:	e7d5      	b.n	1c5c <_spi_m_dma_transfer+0x8c>
    1cb0:	00001101 	.word	0x00001101
    1cb4:	000011e1 	.word	0x000011e1
    1cb8:	000011b1 	.word	0x000011b1
    1cbc:	000015dd 	.word	0x000015dd
    1cc0:	000011a7 	.word	0x000011a7
    1cc4:	00000ee1 	.word	0x00000ee1
    1cc8:	00000ed1 	.word	0x00000ed1
    1ccc:	00000f0d 	.word	0x00000f0d
    1cd0:	00000f65 	.word	0x00000f65
    1cd4:	000011ab 	.word	0x000011ab
    1cd8:	00000ef1 	.word	0x00000ef1
    1cdc:	0000673c 	.word	0x0000673c
    1ce0:	00001611 	.word	0x00001611

00001ce4 <TIMER_1_init>:
    1ce4:	4b2f      	ldr	r3, [pc, #188]	; (1da4 <TIMER_1_init+0xc0>)
    1ce6:	691b      	ldr	r3, [r3, #16]
    1ce8:	f013 0f01 	tst.w	r3, #1
    1cec:	d120      	bne.n	1d30 <TIMER_1_init+0x4c>
    1cee:	4b2d      	ldr	r3, [pc, #180]	; (1da4 <TIMER_1_init+0xc0>)
    1cf0:	691b      	ldr	r3, [r3, #16]
    1cf2:	f013 0f03 	tst.w	r3, #3
    1cf6:	d1fa      	bne.n	1cee <TIMER_1_init+0xa>
    1cf8:	4b2a      	ldr	r3, [pc, #168]	; (1da4 <TIMER_1_init+0xc0>)
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	f013 0f02 	tst.w	r3, #2
    1d00:	d00e      	beq.n	1d20 <TIMER_1_init+0x3c>
    1d02:	4a28      	ldr	r2, [pc, #160]	; (1da4 <TIMER_1_init+0xc0>)
    1d04:	6813      	ldr	r3, [r2, #0]
    1d06:	f023 0302 	bic.w	r3, r3, #2
    1d0a:	6013      	str	r3, [r2, #0]
    1d0c:	4b25      	ldr	r3, [pc, #148]	; (1da4 <TIMER_1_init+0xc0>)
    1d0e:	691b      	ldr	r3, [r3, #16]
    1d10:	f013 0f03 	tst.w	r3, #3
    1d14:	d1fa      	bne.n	1d0c <TIMER_1_init+0x28>
    1d16:	4b23      	ldr	r3, [pc, #140]	; (1da4 <TIMER_1_init+0xc0>)
    1d18:	691b      	ldr	r3, [r3, #16]
    1d1a:	f013 0f02 	tst.w	r3, #2
    1d1e:	d1fa      	bne.n	1d16 <TIMER_1_init+0x32>
    1d20:	2201      	movs	r2, #1
    1d22:	4b20      	ldr	r3, [pc, #128]	; (1da4 <TIMER_1_init+0xc0>)
    1d24:	601a      	str	r2, [r3, #0]
    1d26:	4b1f      	ldr	r3, [pc, #124]	; (1da4 <TIMER_1_init+0xc0>)
    1d28:	691b      	ldr	r3, [r3, #16]
    1d2a:	f013 0f03 	tst.w	r3, #3
    1d2e:	d1fa      	bne.n	1d26 <TIMER_1_init+0x42>
    1d30:	4b1c      	ldr	r3, [pc, #112]	; (1da4 <TIMER_1_init+0xc0>)
    1d32:	691b      	ldr	r3, [r3, #16]
    1d34:	f013 0f01 	tst.w	r3, #1
    1d38:	d1fa      	bne.n	1d30 <TIMER_1_init+0x4c>
    1d3a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1d3e:	4b19      	ldr	r3, [pc, #100]	; (1da4 <TIMER_1_init+0xc0>)
    1d40:	601a      	str	r2, [r3, #0]
    1d42:	4b18      	ldr	r3, [pc, #96]	; (1da4 <TIMER_1_init+0xc0>)
    1d44:	691b      	ldr	r3, [r3, #16]
    1d46:	f013 0f03 	tst.w	r3, #3
    1d4a:	d1fa      	bne.n	1d42 <TIMER_1_init+0x5e>
    1d4c:	4b15      	ldr	r3, [pc, #84]	; (1da4 <TIMER_1_init+0xc0>)
    1d4e:	2200      	movs	r2, #0
    1d50:	715a      	strb	r2, [r3, #5]
    1d52:	22ff      	movs	r2, #255	; 0xff
    1d54:	711a      	strb	r2, [r3, #4]
    1d56:	2201      	movs	r2, #1
    1d58:	731a      	strb	r2, [r3, #12]
    1d5a:	f643 5208 	movw	r2, #15624	; 0x3d08
    1d5e:	839a      	strh	r2, [r3, #28]
    1d60:	4b10      	ldr	r3, [pc, #64]	; (1da4 <TIMER_1_init+0xc0>)
    1d62:	691b      	ldr	r3, [r3, #16]
    1d64:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d68:	d1fa      	bne.n	1d60 <TIMER_1_init+0x7c>
    1d6a:	f641 0269 	movw	r2, #6249	; 0x1869
    1d6e:	4b0d      	ldr	r3, [pc, #52]	; (1da4 <TIMER_1_init+0xc0>)
    1d70:	83da      	strh	r2, [r3, #30]
    1d72:	4b0c      	ldr	r3, [pc, #48]	; (1da4 <TIMER_1_init+0xc0>)
    1d74:	691b      	ldr	r3, [r3, #16]
    1d76:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d7a:	d1fa      	bne.n	1d72 <TIMER_1_init+0x8e>
    1d7c:	4b09      	ldr	r3, [pc, #36]	; (1da4 <TIMER_1_init+0xc0>)
    1d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d82:	80da      	strh	r2, [r3, #6]
    1d84:	2221      	movs	r2, #33	; 0x21
    1d86:	725a      	strb	r2, [r3, #9]
    1d88:	22de      	movs	r2, #222	; 0xde
    1d8a:	721a      	strb	r2, [r3, #8]
    1d8c:	681a      	ldr	r2, [r3, #0]
    1d8e:	f042 0202 	orr.w	r2, r2, #2
    1d92:	601a      	str	r2, [r3, #0]
    1d94:	4b03      	ldr	r3, [pc, #12]	; (1da4 <TIMER_1_init+0xc0>)
    1d96:	691b      	ldr	r3, [r3, #16]
    1d98:	f013 0f03 	tst.w	r3, #3
    1d9c:	d1fa      	bne.n	1d94 <TIMER_1_init+0xb0>
    1d9e:	2000      	movs	r0, #0
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop
    1da4:	4101c000 	.word	0x4101c000

00001da8 <TIMER_0_init>:
    1da8:	4b29      	ldr	r3, [pc, #164]	; (1e50 <TIMER_0_init+0xa8>)
    1daa:	691b      	ldr	r3, [r3, #16]
    1dac:	f013 0f01 	tst.w	r3, #1
    1db0:	d120      	bne.n	1df4 <TIMER_0_init+0x4c>
    1db2:	4b27      	ldr	r3, [pc, #156]	; (1e50 <TIMER_0_init+0xa8>)
    1db4:	691b      	ldr	r3, [r3, #16]
    1db6:	f013 0f03 	tst.w	r3, #3
    1dba:	d1fa      	bne.n	1db2 <TIMER_0_init+0xa>
    1dbc:	4b24      	ldr	r3, [pc, #144]	; (1e50 <TIMER_0_init+0xa8>)
    1dbe:	681b      	ldr	r3, [r3, #0]
    1dc0:	f013 0f02 	tst.w	r3, #2
    1dc4:	d00e      	beq.n	1de4 <TIMER_0_init+0x3c>
    1dc6:	4a22      	ldr	r2, [pc, #136]	; (1e50 <TIMER_0_init+0xa8>)
    1dc8:	6813      	ldr	r3, [r2, #0]
    1dca:	f023 0302 	bic.w	r3, r3, #2
    1dce:	6013      	str	r3, [r2, #0]
    1dd0:	4b1f      	ldr	r3, [pc, #124]	; (1e50 <TIMER_0_init+0xa8>)
    1dd2:	691b      	ldr	r3, [r3, #16]
    1dd4:	f013 0f03 	tst.w	r3, #3
    1dd8:	d1fa      	bne.n	1dd0 <TIMER_0_init+0x28>
    1dda:	4b1d      	ldr	r3, [pc, #116]	; (1e50 <TIMER_0_init+0xa8>)
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	f013 0f02 	tst.w	r3, #2
    1de2:	d1fa      	bne.n	1dda <TIMER_0_init+0x32>
    1de4:	2201      	movs	r2, #1
    1de6:	4b1a      	ldr	r3, [pc, #104]	; (1e50 <TIMER_0_init+0xa8>)
    1de8:	601a      	str	r2, [r3, #0]
    1dea:	4b19      	ldr	r3, [pc, #100]	; (1e50 <TIMER_0_init+0xa8>)
    1dec:	691b      	ldr	r3, [r3, #16]
    1dee:	f013 0f03 	tst.w	r3, #3
    1df2:	d1fa      	bne.n	1dea <TIMER_0_init+0x42>
    1df4:	4b16      	ldr	r3, [pc, #88]	; (1e50 <TIMER_0_init+0xa8>)
    1df6:	691b      	ldr	r3, [r3, #16]
    1df8:	f013 0f01 	tst.w	r3, #1
    1dfc:	d1fa      	bne.n	1df4 <TIMER_0_init+0x4c>
    1dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1e02:	4b13      	ldr	r3, [pc, #76]	; (1e50 <TIMER_0_init+0xa8>)
    1e04:	601a      	str	r2, [r3, #0]
    1e06:	4b12      	ldr	r3, [pc, #72]	; (1e50 <TIMER_0_init+0xa8>)
    1e08:	691b      	ldr	r3, [r3, #16]
    1e0a:	f013 0f03 	tst.w	r3, #3
    1e0e:	d1fa      	bne.n	1e06 <TIMER_0_init+0x5e>
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <TIMER_0_init+0xa8>)
    1e12:	2200      	movs	r2, #0
    1e14:	715a      	strb	r2, [r3, #5]
    1e16:	22ff      	movs	r2, #255	; 0xff
    1e18:	711a      	strb	r2, [r3, #4]
    1e1a:	2201      	movs	r2, #1
    1e1c:	731a      	strb	r2, [r3, #12]
    1e1e:	f641 0269 	movw	r2, #6249	; 0x1869
    1e22:	839a      	strh	r2, [r3, #28]
    1e24:	4b0a      	ldr	r3, [pc, #40]	; (1e50 <TIMER_0_init+0xa8>)
    1e26:	691b      	ldr	r3, [r3, #16]
    1e28:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e2c:	d1fa      	bne.n	1e24 <TIMER_0_init+0x7c>
    1e2e:	4b08      	ldr	r3, [pc, #32]	; (1e50 <TIMER_0_init+0xa8>)
    1e30:	2201      	movs	r2, #1
    1e32:	725a      	strb	r2, [r3, #9]
    1e34:	22fe      	movs	r2, #254	; 0xfe
    1e36:	721a      	strb	r2, [r3, #8]
    1e38:	681a      	ldr	r2, [r3, #0]
    1e3a:	f042 0202 	orr.w	r2, r2, #2
    1e3e:	601a      	str	r2, [r3, #0]
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <TIMER_0_init+0xa8>)
    1e42:	691b      	ldr	r3, [r3, #16]
    1e44:	f013 0f03 	tst.w	r3, #3
    1e48:	d1fa      	bne.n	1e40 <TIMER_0_init+0x98>
    1e4a:	2000      	movs	r0, #0
    1e4c:	4770      	bx	lr
    1e4e:	bf00      	nop
    1e50:	43001800 	.word	0x43001800

00001e54 <SensorRowUpdate>:
	//timer_start(&TIMER_0);
};
*/

void SensorRowUpdate(uint8_t row_select, uint8_t output_mode_select)
{
    1e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e58:	460d      	mov	r5, r1
	switch(row_select){
    1e5a:	2802      	cmp	r0, #2
    1e5c:	d05c      	beq.n	1f18 <SensorRowUpdate+0xc4>
    1e5e:	2803      	cmp	r0, #3
    1e60:	f000 80b0 	beq.w	1fc4 <SensorRowUpdate+0x170>
    1e64:	2801      	cmp	r0, #1
    1e66:	d001      	beq.n	1e6c <SensorRowUpdate+0x18>
    1e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		case 1: ;
			
			update_struct_values(&sensorRow_Values_Left, &sensor7, &sensor4, &sensor1);
    1e6c:	4c7f      	ldr	r4, [pc, #508]	; (206c <SensorRowUpdate+0x218>)
    1e6e:	4b80      	ldr	r3, [pc, #512]	; (2070 <SensorRowUpdate+0x21c>)
    1e70:	4a80      	ldr	r2, [pc, #512]	; (2074 <SensorRowUpdate+0x220>)
    1e72:	4981      	ldr	r1, [pc, #516]	; (2078 <SensorRowUpdate+0x224>)
    1e74:	4620      	mov	r0, r4
    1e76:	4e81      	ldr	r6, [pc, #516]	; (207c <SensorRowUpdate+0x228>)
    1e78:	47b0      	blx	r6
			mag_to_force(1, &sensorRow_Values_Left);
    1e7a:	4621      	mov	r1, r4
    1e7c:	2001      	movs	r0, #1
    1e7e:	4b80      	ldr	r3, [pc, #512]	; (2080 <SensorRowUpdate+0x22c>)
    1e80:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Left, &neuron_pair_1_top, &neuron_pair_1_middle, &neuron_pair_1_bottom);
    1e82:	f8df 8250 	ldr.w	r8, [pc, #592]	; 20d4 <SensorRowUpdate+0x280>
    1e86:	4f7f      	ldr	r7, [pc, #508]	; (2084 <SensorRowUpdate+0x230>)
    1e88:	4e7f      	ldr	r6, [pc, #508]	; (2088 <SensorRowUpdate+0x234>)
    1e8a:	4643      	mov	r3, r8
    1e8c:	463a      	mov	r2, r7
    1e8e:	4631      	mov	r1, r6
    1e90:	4620      	mov	r0, r4
    1e92:	f8df 9244 	ldr.w	r9, [pc, #580]	; 20d8 <SensorRowUpdate+0x284>
    1e96:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Left, &neuron_pair_1_top, &neuron_pair_1_middle, &neuron_pair_1_bottom);
    1e98:	4643      	mov	r3, r8
    1e9a:	463a      	mov	r2, r7
    1e9c:	4631      	mov	r1, r6
    1e9e:	487b      	ldr	r0, [pc, #492]	; (208c <SensorRowUpdate+0x238>)
    1ea0:	4e7b      	ldr	r6, [pc, #492]	; (2090 <SensorRowUpdate+0x23c>)
    1ea2:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Left.b_x_top; //data7,8,9
    1ea4:	4b7b      	ldr	r3, [pc, #492]	; (2094 <SensorRowUpdate+0x240>)
    1ea6:	681a      	ldr	r2, [r3, #0]
    1ea8:	6821      	ldr	r1, [r4, #0]
    1eaa:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Left.b_y_top;
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	68e2      	ldr	r2, [r4, #12]
    1eb0:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Left.b_z_top;
    1eb2:	69a2      	ldr	r2, [r4, #24]
    1eb4:	609a      	str	r2, [r3, #8]
				
			BLDC_OUT->hall_middle_x = sensorRow_Values_Left.b_x_middle; //data4,5,6
    1eb6:	6862      	ldr	r2, [r4, #4]
    1eb8:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Left.b_y_middle;
    1eba:	6922      	ldr	r2, [r4, #16]
    1ebc:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Left.b_z_middle;
    1ebe:	69e2      	ldr	r2, [r4, #28]
    1ec0:	61da      	str	r2, [r3, #28]

				
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Left.b_x_bottom; //data1,2,3
    1ec2:	68a2      	ldr	r2, [r4, #8]
    1ec4:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Left.b_y_bottom;
    1ec6:	6962      	ldr	r2, [r4, #20]
    1ec8:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Left.b_z_bottom;
    1eca:	6a22      	ldr	r2, [r4, #32]
    1ecc:	635a      	str	r2, [r3, #52]	; 0x34
			BLDC_OUT->hall_top_x = sensor7.data.x; //data7,8,9
			BLDC_OUT->hall_top_y = sensor7.data.y;
			BLDC_OUT->hall_top_z = sensor7.data.z;
			*/
			
			switch(output_mode_select){
    1ece:	2d01      	cmp	r5, #1
    1ed0:	d006      	beq.n	1ee0 <SensorRowUpdate+0x8c>
    1ed2:	2d02      	cmp	r5, #2
    1ed4:	d012      	beq.n	1efc <SensorRowUpdate+0xa8>
			}
			
			//mag_to_force(&sensorRow_Values_1, &sensor1, &sensor4, &sensor7);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 1;
    1ed6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1eda:	621a      	str	r2, [r3, #32]
			break;
    1edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					BLDC_OUT->neuron_top_normal = sensorRow_Values_Left.force_z_top;
    1ee0:	4a62      	ldr	r2, [pc, #392]	; (206c <SensorRowUpdate+0x218>)
    1ee2:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1ee4:	60d9      	str	r1, [r3, #12]
					BLDC_OUT->neuron_top_shear = sensorRow_Values_Left.force_r_top;
    1ee6:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1ee8:	6119      	str	r1, [r3, #16]
					BLDC_OUT->neuron_middle_normal = sensorRow_Values_Left.force_z_middle;
    1eea:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1eec:	6259      	str	r1, [r3, #36]	; 0x24
					BLDC_OUT->neuron_middle_shear = sensorRow_Values_Left.force_r_middle;
    1eee:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1ef0:	6299      	str	r1, [r3, #40]	; 0x28
					BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Left.force_z_bottom;
    1ef2:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1ef4:	6399      	str	r1, [r3, #56]	; 0x38
					BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Left.force_r_bottom;
    1ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1ef8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1efa:	e7ec      	b.n	1ed6 <SensorRowUpdate+0x82>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Left.neuron_top_normal;
    1efc:	4a63      	ldr	r2, [pc, #396]	; (208c <SensorRowUpdate+0x238>)
    1efe:	6811      	ldr	r1, [r2, #0]
    1f00:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Left.neuron_top_shear;
    1f02:	6851      	ldr	r1, [r2, #4]
    1f04:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Left.neuron_middle_normal;
    1f06:	6891      	ldr	r1, [r2, #8]
    1f08:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Left.neuron_middle_shear;
    1f0a:	68d1      	ldr	r1, [r2, #12]
    1f0c:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Left.neuron_bottom_normal;
    1f0e:	6911      	ldr	r1, [r2, #16]
    1f10:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Left.neuron_bottom_shear;
    1f12:	6952      	ldr	r2, [r2, #20]
    1f14:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1f16:	e7de      	b.n	1ed6 <SensorRowUpdate+0x82>
		
		case 2: ;
			update_struct_values(&sensorRow_Values_Middle, &sensor8, &sensor5, &sensor2);
    1f18:	4c5f      	ldr	r4, [pc, #380]	; (2098 <SensorRowUpdate+0x244>)
    1f1a:	4b60      	ldr	r3, [pc, #384]	; (209c <SensorRowUpdate+0x248>)
    1f1c:	4a60      	ldr	r2, [pc, #384]	; (20a0 <SensorRowUpdate+0x24c>)
    1f1e:	4961      	ldr	r1, [pc, #388]	; (20a4 <SensorRowUpdate+0x250>)
    1f20:	4620      	mov	r0, r4
    1f22:	4e56      	ldr	r6, [pc, #344]	; (207c <SensorRowUpdate+0x228>)
    1f24:	47b0      	blx	r6
			mag_to_force(2, &sensorRow_Values_Middle);
    1f26:	4621      	mov	r1, r4
    1f28:	2002      	movs	r0, #2
    1f2a:	4b55      	ldr	r3, [pc, #340]	; (2080 <SensorRowUpdate+0x22c>)
    1f2c:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Middle, &neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    1f2e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 20dc <SensorRowUpdate+0x288>
    1f32:	4f5d      	ldr	r7, [pc, #372]	; (20a8 <SensorRowUpdate+0x254>)
    1f34:	4e5d      	ldr	r6, [pc, #372]	; (20ac <SensorRowUpdate+0x258>)
    1f36:	4643      	mov	r3, r8
    1f38:	463a      	mov	r2, r7
    1f3a:	4631      	mov	r1, r6
    1f3c:	4620      	mov	r0, r4
    1f3e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 20d8 <SensorRowUpdate+0x284>
    1f42:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Middle, &neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    1f44:	4643      	mov	r3, r8
    1f46:	463a      	mov	r2, r7
    1f48:	4631      	mov	r1, r6
    1f4a:	4859      	ldr	r0, [pc, #356]	; (20b0 <SensorRowUpdate+0x25c>)
    1f4c:	4e50      	ldr	r6, [pc, #320]	; (2090 <SensorRowUpdate+0x23c>)
    1f4e:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Middle.b_x_top; //data7,8,9
    1f50:	4b50      	ldr	r3, [pc, #320]	; (2094 <SensorRowUpdate+0x240>)
    1f52:	681a      	ldr	r2, [r3, #0]
    1f54:	6821      	ldr	r1, [r4, #0]
    1f56:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Middle.b_y_top;
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	68e2      	ldr	r2, [r4, #12]
    1f5c:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Middle.b_z_top;
    1f5e:	69a2      	ldr	r2, [r4, #24]
    1f60:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Middle.b_x_middle; //data4,5,6
    1f62:	6862      	ldr	r2, [r4, #4]
    1f64:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Middle.b_y_middle;
    1f66:	6922      	ldr	r2, [r4, #16]
    1f68:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Middle.b_z_middle;
    1f6a:	69e2      	ldr	r2, [r4, #28]
    1f6c:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Middle.b_x_bottom; //data1,2,3
    1f6e:	68a2      	ldr	r2, [r4, #8]
    1f70:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Middle.b_y_bottom;
    1f72:	6962      	ldr	r2, [r4, #20]
    1f74:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Middle.b_z_bottom;
    1f76:	6a22      	ldr	r2, [r4, #32]
    1f78:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    1f7a:	2d01      	cmp	r5, #1
    1f7c:	d006      	beq.n	1f8c <SensorRowUpdate+0x138>
    1f7e:	2d02      	cmp	r5, #2
    1f80:	d012      	beq.n	1fa8 <SensorRowUpdate+0x154>
			BLDC_OUT->hall_top_z = sensor8.data.z;
		*/
			//mag_to_force(&sensorRow_Values_1, &sensor2, &sensor5, &sensor8);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 2;
    1f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1f86:	621a      	str	r2, [r3, #32]
			break;
    1f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Middle.force_z_top;
    1f8c:	4a42      	ldr	r2, [pc, #264]	; (2098 <SensorRowUpdate+0x244>)
    1f8e:	6c91      	ldr	r1, [r2, #72]	; 0x48
    1f90:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Middle.force_r_top;
    1f92:	6d51      	ldr	r1, [r2, #84]	; 0x54
    1f94:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Middle.force_z_middle;
    1f96:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    1f98:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Middle.force_r_middle;
    1f9a:	6d91      	ldr	r1, [r2, #88]	; 0x58
    1f9c:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Middle.force_z_bottom;
    1f9e:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1fa0:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Middle.force_r_bottom;
    1fa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    1fa4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fa6:	e7ec      	b.n	1f82 <SensorRowUpdate+0x12e>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Middle.neuron_top_normal;
    1fa8:	4a41      	ldr	r2, [pc, #260]	; (20b0 <SensorRowUpdate+0x25c>)
    1faa:	6811      	ldr	r1, [r2, #0]
    1fac:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Middle.neuron_top_shear;
    1fae:	6851      	ldr	r1, [r2, #4]
    1fb0:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Middle.neuron_middle_normal;
    1fb2:	6891      	ldr	r1, [r2, #8]
    1fb4:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Middle.neuron_middle_shear;
    1fb6:	68d1      	ldr	r1, [r2, #12]
    1fb8:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Middle.neuron_bottom_normal;
    1fba:	6911      	ldr	r1, [r2, #16]
    1fbc:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Middle.neuron_bottom_shear;
    1fbe:	6952      	ldr	r2, [r2, #20]
    1fc0:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    1fc2:	e7de      	b.n	1f82 <SensorRowUpdate+0x12e>
			
		case 3: ;
			update_struct_values(&sensorRow_Values_Right, &sensor9, &sensor6, &sensor3);
    1fc4:	4c3b      	ldr	r4, [pc, #236]	; (20b4 <SensorRowUpdate+0x260>)
    1fc6:	4b3c      	ldr	r3, [pc, #240]	; (20b8 <SensorRowUpdate+0x264>)
    1fc8:	4a3c      	ldr	r2, [pc, #240]	; (20bc <SensorRowUpdate+0x268>)
    1fca:	493d      	ldr	r1, [pc, #244]	; (20c0 <SensorRowUpdate+0x26c>)
    1fcc:	4620      	mov	r0, r4
    1fce:	4e2b      	ldr	r6, [pc, #172]	; (207c <SensorRowUpdate+0x228>)
    1fd0:	47b0      	blx	r6
			mag_to_force(3, &sensorRow_Values_Right);
    1fd2:	4621      	mov	r1, r4
    1fd4:	2003      	movs	r0, #3
    1fd6:	4b2a      	ldr	r3, [pc, #168]	; (2080 <SensorRowUpdate+0x22c>)
    1fd8:	4798      	blx	r3
			neuron_calc_row(&sensorRow_Values_Right, &neuron_pair_3_top, &neuron_pair_3_middle, &neuron_pair_3_bottom);
    1fda:	f8df 8104 	ldr.w	r8, [pc, #260]	; 20e0 <SensorRowUpdate+0x28c>
    1fde:	4f39      	ldr	r7, [pc, #228]	; (20c4 <SensorRowUpdate+0x270>)
    1fe0:	4e39      	ldr	r6, [pc, #228]	; (20c8 <SensorRowUpdate+0x274>)
    1fe2:	4643      	mov	r3, r8
    1fe4:	463a      	mov	r2, r7
    1fe6:	4631      	mov	r1, r6
    1fe8:	4620      	mov	r0, r4
    1fea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 20d8 <SensorRowUpdate+0x284>
    1fee:	47c8      	blx	r9
			update_struct_values_neural(&neuronRow_Values_Right, &neuron_pair_3_top, &neuron_pair_3_middle, &neuron_pair_3_bottom);
    1ff0:	4643      	mov	r3, r8
    1ff2:	463a      	mov	r2, r7
    1ff4:	4631      	mov	r1, r6
    1ff6:	4835      	ldr	r0, [pc, #212]	; (20cc <SensorRowUpdate+0x278>)
    1ff8:	4e25      	ldr	r6, [pc, #148]	; (2090 <SensorRowUpdate+0x23c>)
    1ffa:	47b0      	blx	r6
			
			BLDC_OUT->hall_top_x = sensorRow_Values_Right.b_x_top; //data7,8,9
    1ffc:	4b25      	ldr	r3, [pc, #148]	; (2094 <SensorRowUpdate+0x240>)
    1ffe:	681a      	ldr	r2, [r3, #0]
    2000:	6821      	ldr	r1, [r4, #0]
    2002:	6011      	str	r1, [r2, #0]
			BLDC_OUT->hall_top_y = sensorRow_Values_Right.b_y_top;
    2004:	681b      	ldr	r3, [r3, #0]
    2006:	68e2      	ldr	r2, [r4, #12]
    2008:	605a      	str	r2, [r3, #4]
			BLDC_OUT->hall_top_z = sensorRow_Values_Right.b_z_top;
    200a:	69a2      	ldr	r2, [r4, #24]
    200c:	609a      	str	r2, [r3, #8]
			
			BLDC_OUT->hall_middle_x = sensorRow_Values_Right.b_x_middle; //data4,5,6
    200e:	6862      	ldr	r2, [r4, #4]
    2010:	615a      	str	r2, [r3, #20]
			BLDC_OUT->hall_middle_y = sensorRow_Values_Right.b_y_middle;
    2012:	6922      	ldr	r2, [r4, #16]
    2014:	619a      	str	r2, [r3, #24]
			BLDC_OUT->hall_middle_z = sensorRow_Values_Right.b_z_middle;
    2016:	69e2      	ldr	r2, [r4, #28]
    2018:	61da      	str	r2, [r3, #28]

			
			BLDC_OUT->hall_bottom_x = sensorRow_Values_Right.b_x_bottom; //data1,2,3
    201a:	68a2      	ldr	r2, [r4, #8]
    201c:	62da      	str	r2, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensorRow_Values_Right.b_y_bottom;
    201e:	6962      	ldr	r2, [r4, #20]
    2020:	631a      	str	r2, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensorRow_Values_Right.b_z_bottom;
    2022:	6a22      	ldr	r2, [r4, #32]
    2024:	635a      	str	r2, [r3, #52]	; 0x34
			
			switch(output_mode_select){
    2026:	2d01      	cmp	r5, #1
    2028:	d004      	beq.n	2034 <SensorRowUpdate+0x1e0>
    202a:	2d02      	cmp	r5, #2
    202c:	d010      	beq.n	2050 <SensorRowUpdate+0x1fc>
			BLDC_OUT->hall_top_z = sensor9.data.z;
			*/
			//mag_to_force(&sensorRow_Values_1, &sensor3, &sensor6, &sensor9);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 3;
    202e:	4a28      	ldr	r2, [pc, #160]	; (20d0 <SensorRowUpdate+0x27c>)
    2030:	621a      	str	r2, [r3, #32]
			break;
		}
};
    2032:	e719      	b.n	1e68 <SensorRowUpdate+0x14>
				BLDC_OUT->neuron_top_normal = sensorRow_Values_Right.force_z_top;
    2034:	4a1f      	ldr	r2, [pc, #124]	; (20b4 <SensorRowUpdate+0x260>)
    2036:	6c91      	ldr	r1, [r2, #72]	; 0x48
    2038:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = sensorRow_Values_Right.force_r_top;
    203a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    203c:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = sensorRow_Values_Right.force_z_middle;
    203e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    2040:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = sensorRow_Values_Right.force_r_middle;
    2042:	6d91      	ldr	r1, [r2, #88]	; 0x58
    2044:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = sensorRow_Values_Right.force_z_bottom;
    2046:	6d11      	ldr	r1, [r2, #80]	; 0x50
    2048:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = sensorRow_Values_Right.force_r_bottom;
    204a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    204c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    204e:	e7ee      	b.n	202e <SensorRowUpdate+0x1da>
				BLDC_OUT->neuron_top_normal = neuronRow_Values_Right.neuron_top_normal;
    2050:	4a1e      	ldr	r2, [pc, #120]	; (20cc <SensorRowUpdate+0x278>)
    2052:	6811      	ldr	r1, [r2, #0]
    2054:	60d9      	str	r1, [r3, #12]
				BLDC_OUT->neuron_top_shear = neuronRow_Values_Right.neuron_top_shear;
    2056:	6851      	ldr	r1, [r2, #4]
    2058:	6119      	str	r1, [r3, #16]
				BLDC_OUT->neuron_middle_normal = neuronRow_Values_Right.neuron_middle_normal;
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	6259      	str	r1, [r3, #36]	; 0x24
				BLDC_OUT->neuron_middle_shear = neuronRow_Values_Right.neuron_middle_shear;
    205e:	68d1      	ldr	r1, [r2, #12]
    2060:	6299      	str	r1, [r3, #40]	; 0x28
				BLDC_OUT->neuron_bottom_normal = neuronRow_Values_Right.neuron_bottom_normal;
    2062:	6911      	ldr	r1, [r2, #16]
    2064:	6399      	str	r1, [r3, #56]	; 0x38
				BLDC_OUT->neuron_bottom_shear = neuronRow_Values_Right.neuron_bottom_shear;
    2066:	6952      	ldr	r2, [r2, #20]
    2068:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
    206a:	e7e0      	b.n	202e <SensorRowUpdate+0x1da>
    206c:	20001314 	.word	0x20001314
    2070:	20001040 	.word	0x20001040
    2074:	20000fe8 	.word	0x20000fe8
    2078:	20000bc8 	.word	0x20000bc8
    207c:	000030f1 	.word	0x000030f1
    2080:	00003199 	.word	0x00003199
    2084:	20001224 	.word	0x20001224
    2088:	20000d6c 	.word	0x20000d6c
    208c:	20000d50 	.word	0x20000d50
    2090:	00005961 	.word	0x00005961
    2094:	20000074 	.word	0x20000074
    2098:	20000b68 	.word	0x20000b68
    209c:	200012bc 	.word	0x200012bc
    20a0:	20000ef8 	.word	0x20000ef8
    20a4:	200011cc 	.word	0x200011cc
    20a8:	20000980 	.word	0x20000980
    20ac:	20000f50 	.word	0x20000f50
    20b0:	20000c28 	.word	0x20000c28
    20b4:	20000c40 	.word	0x20000c40
    20b8:	20000cf8 	.word	0x20000cf8
    20bc:	20000ca0 	.word	0x20000ca0
    20c0:	20000e9c 	.word	0x20000e9c
    20c4:	2000109c 	.word	0x2000109c
    20c8:	20000a34 	.word	0x20000a34
    20cc:	20000a18 	.word	0x20000a18
    20d0:	40400000 	.word	0x40400000
    20d4:	20000e04 	.word	0x20000e04
    20d8:	000058a9 	.word	0x000058a9
    20dc:	20001134 	.word	0x20001134
    20e0:	20000ad0 	.word	0x20000ad0

000020e4 <main>:


int main(void)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b086      	sub	sp, #24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    20e8:	4b41      	ldr	r3, [pc, #260]	; (21f0 <main+0x10c>)
    20ea:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    20ec:	4b41      	ldr	r3, [pc, #260]	; (21f4 <main+0x110>)
    20ee:	4798      	blx	r3
	
	//Initialize I2C communication
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    20f0:	4e41      	ldr	r6, [pc, #260]	; (21f8 <main+0x114>)
    20f2:	4c42      	ldr	r4, [pc, #264]	; (21fc <main+0x118>)
    20f4:	4631      	mov	r1, r6
    20f6:	4620      	mov	r0, r4
    20f8:	4b41      	ldr	r3, [pc, #260]	; (2200 <main+0x11c>)
    20fa:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    20fc:	4620      	mov	r0, r4
    20fe:	4b41      	ldr	r3, [pc, #260]	; (2204 <main+0x120>)
    2100:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2102:	4c41      	ldr	r4, [pc, #260]	; (2208 <main+0x124>)
    2104:	2540      	movs	r5, #64	; 0x40
    2106:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2108:	61a5      	str	r5, [r4, #24]
	// for testing purposes
	gpio_set_pin_level(TRG,false);
	gpio_set_pin_level(TRG,true);
	
	// Initialize Sensor Array
	SensorArray_Init(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    210a:	6833      	ldr	r3, [r6, #0]
    210c:	9305      	str	r3, [sp, #20]
    210e:	4e3f      	ldr	r6, [pc, #252]	; (220c <main+0x128>)
    2110:	9604      	str	r6, [sp, #16]
    2112:	4b3f      	ldr	r3, [pc, #252]	; (2210 <main+0x12c>)
    2114:	9303      	str	r3, [sp, #12]
    2116:	4b3f      	ldr	r3, [pc, #252]	; (2214 <main+0x130>)
    2118:	9302      	str	r3, [sp, #8]
    211a:	4b3f      	ldr	r3, [pc, #252]	; (2218 <main+0x134>)
    211c:	9301      	str	r3, [sp, #4]
    211e:	4b3f      	ldr	r3, [pc, #252]	; (221c <main+0x138>)
    2120:	9300      	str	r3, [sp, #0]
    2122:	4b3f      	ldr	r3, [pc, #252]	; (2220 <main+0x13c>)
    2124:	4a3f      	ldr	r2, [pc, #252]	; (2224 <main+0x140>)
    2126:	4940      	ldr	r1, [pc, #256]	; (2228 <main+0x144>)
    2128:	4840      	ldr	r0, [pc, #256]	; (222c <main+0x148>)
    212a:	4f41      	ldr	r7, [pc, #260]	; (2230 <main+0x14c>)
    212c:	47b8      	blx	r7
	neuron_init_row(&neuron_pair_2_top, &neuron_pair_2_middle, &neuron_pair_2_bottom);
    212e:	4a41      	ldr	r2, [pc, #260]	; (2234 <main+0x150>)
    2130:	4941      	ldr	r1, [pc, #260]	; (2238 <main+0x154>)
    2132:	4842      	ldr	r0, [pc, #264]	; (223c <main+0x158>)
    2134:	4b42      	ldr	r3, [pc, #264]	; (2240 <main+0x15c>)
    2136:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2138:	6165      	str	r5, [r4, #20]

	gpio_set_pin_level(TRG,false);
	
	//Initialize ReadoutVariables
	new_data = false;
    213a:	2300      	movs	r3, #0
    213c:	4a41      	ldr	r2, [pc, #260]	; (2244 <main+0x160>)
    213e:	7013      	strb	r3, [r2, #0]
	triggered = false;
    2140:	4a41      	ldr	r2, [pc, #260]	; (2248 <main+0x164>)
    2142:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    2144:	4a41      	ldr	r2, [pc, #260]	; (224c <main+0x168>)
    2146:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&sensor9);
    2148:	4630      	mov	r0, r6
    214a:	4b41      	ldr	r3, [pc, #260]	; (2250 <main+0x16c>)
    214c:	4798      	blx	r3
    214e:	4b41      	ldr	r3, [pc, #260]	; (2254 <main+0x170>)
    2150:	8018      	strh	r0, [r3, #0]
    2152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2156:	4b40      	ldr	r3, [pc, #256]	; (2258 <main+0x174>)
    2158:	60da      	str	r2, [r3, #12]
	//TIMER_init(wait_time);
	NVIC_EnableIRQ(TC3_IRQn);
	selected_row = 1; //1 = left, 2 = middle, 3 = right
    215a:	2301      	movs	r3, #1
    215c:	4a3f      	ldr	r2, [pc, #252]	; (225c <main+0x178>)
    215e:	7013      	strb	r3, [r2, #0]
	selected_output_mode = 1; //1 = Force, 2 = Neural Spikes
    2160:	4a3f      	ldr	r2, [pc, #252]	; (2260 <main+0x17c>)
    2162:	7013      	strb	r3, [r2, #0]
	/* Replace with your application code */
	 
	while (1) 
	{
		
		if (triggered == false)	
    2164:	4b38      	ldr	r3, [pc, #224]	; (2248 <main+0x164>)
    2166:	781b      	ldrb	r3, [r3, #0]
    2168:	b1f3      	cbz	r3, 21a8 <main+0xc4>
			triggerSensor(50);
			triggered = true;
			data_readout = false;
		}
		
		if(new_data == true && data_readout == false)
    216a:	4b36      	ldr	r3, [pc, #216]	; (2244 <main+0x160>)
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	b113      	cbz	r3, 2176 <main+0x92>
    2170:	4b36      	ldr	r3, [pc, #216]	; (224c <main+0x168>)
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	b313      	cbz	r3, 21bc <main+0xd8>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
			new_data = false; 
			data_readout = true;
		}
		
		if(data_readout == true && row_change_possible == true )
    2176:	4b35      	ldr	r3, [pc, #212]	; (224c <main+0x168>)
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	2b00      	cmp	r3, #0
    217c:	d0f2      	beq.n	2164 <main+0x80>
    217e:	4b39      	ldr	r3, [pc, #228]	; (2264 <main+0x180>)
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d0ee      	beq.n	2164 <main+0x80>
		{
				SensorRowUpdate(selected_row, selected_output_mode); //must be modified later to allow readout of whole array - for loop where every row is selected once
    2186:	4c35      	ldr	r4, [pc, #212]	; (225c <main+0x178>)
    2188:	4b35      	ldr	r3, [pc, #212]	; (2260 <main+0x17c>)
    218a:	7819      	ldrb	r1, [r3, #0]
    218c:	7820      	ldrb	r0, [r4, #0]
    218e:	4b36      	ldr	r3, [pc, #216]	; (2268 <main+0x184>)
    2190:	4798      	blx	r3
				selected_row++;	
    2192:	7823      	ldrb	r3, [r4, #0]
    2194:	3301      	adds	r3, #1
    2196:	b2db      	uxtb	r3, r3
    2198:	7023      	strb	r3, [r4, #0]
				row_change_possible == false;
    219a:	4a32      	ldr	r2, [pc, #200]	; (2264 <main+0x180>)
    219c:	7812      	ldrb	r2, [r2, #0]
				if (selected_row == 4)
    219e:	2b04      	cmp	r3, #4
    21a0:	d1e0      	bne.n	2164 <main+0x80>
				{
					selected_row = 1 ;
    21a2:	2201      	movs	r2, #1
    21a4:	7022      	strb	r2, [r4, #0]
    21a6:	e7dd      	b.n	2164 <main+0x80>
			triggerSensor(50);
    21a8:	2032      	movs	r0, #50	; 0x32
    21aa:	4b30      	ldr	r3, [pc, #192]	; (226c <main+0x188>)
    21ac:	4798      	blx	r3
			triggered = true;
    21ae:	2201      	movs	r2, #1
    21b0:	4b25      	ldr	r3, [pc, #148]	; (2248 <main+0x164>)
    21b2:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    21b4:	2200      	movs	r2, #0
    21b6:	4b25      	ldr	r3, [pc, #148]	; (224c <main+0x168>)
    21b8:	701a      	strb	r2, [r3, #0]
    21ba:	e7d6      	b.n	216a <main+0x86>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    21bc:	4b0e      	ldr	r3, [pc, #56]	; (21f8 <main+0x114>)
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	9305      	str	r3, [sp, #20]
    21c2:	4b12      	ldr	r3, [pc, #72]	; (220c <main+0x128>)
    21c4:	9304      	str	r3, [sp, #16]
    21c6:	4b12      	ldr	r3, [pc, #72]	; (2210 <main+0x12c>)
    21c8:	9303      	str	r3, [sp, #12]
    21ca:	4b12      	ldr	r3, [pc, #72]	; (2214 <main+0x130>)
    21cc:	9302      	str	r3, [sp, #8]
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <main+0x134>)
    21d0:	9301      	str	r3, [sp, #4]
    21d2:	4b12      	ldr	r3, [pc, #72]	; (221c <main+0x138>)
    21d4:	9300      	str	r3, [sp, #0]
    21d6:	4b12      	ldr	r3, [pc, #72]	; (2220 <main+0x13c>)
    21d8:	4a12      	ldr	r2, [pc, #72]	; (2224 <main+0x140>)
    21da:	4913      	ldr	r1, [pc, #76]	; (2228 <main+0x144>)
    21dc:	4813      	ldr	r0, [pc, #76]	; (222c <main+0x148>)
    21de:	4c24      	ldr	r4, [pc, #144]	; (2270 <main+0x18c>)
    21e0:	47a0      	blx	r4
			new_data = false; 
    21e2:	2200      	movs	r2, #0
    21e4:	4b17      	ldr	r3, [pc, #92]	; (2244 <main+0x160>)
    21e6:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    21e8:	2201      	movs	r2, #1
    21ea:	4b18      	ldr	r3, [pc, #96]	; (224c <main+0x168>)
    21ec:	701a      	strb	r2, [r3, #0]
    21ee:	e7c2      	b.n	2176 <main+0x92>
    21f0:	000002d1 	.word	0x000002d1
    21f4:	000007b5 	.word	0x000007b5
    21f8:	20000c20 	.word	0x20000c20
    21fc:	200003b0 	.word	0x200003b0
    2200:	00000aa9 	.word	0x00000aa9
    2204:	00000a8d 	.word	0x00000a8d
    2208:	41008000 	.word	0x41008000
    220c:	20000e9c 	.word	0x20000e9c
    2210:	200011cc 	.word	0x200011cc
    2214:	20000bc8 	.word	0x20000bc8
    2218:	20000ca0 	.word	0x20000ca0
    221c:	20000ef8 	.word	0x20000ef8
    2220:	20000fe8 	.word	0x20000fe8
    2224:	20000cf8 	.word	0x20000cf8
    2228:	200012bc 	.word	0x200012bc
    222c:	20001040 	.word	0x20001040
    2230:	00002fbd 	.word	0x00002fbd
    2234:	20001134 	.word	0x20001134
    2238:	20000980 	.word	0x20000980
    223c:	20000f50 	.word	0x20000f50
    2240:	00005859 	.word	0x00005859
    2244:	20000acc 	.word	0x20000acc
    2248:	20000ef4 	.word	0x20000ef4
    224c:	20000c25 	.word	0x20000c25
    2250:	00002a4d 	.word	0x00002a4d
    2254:	20000d68 	.word	0x20000d68
    2258:	e000e100 	.word	0xe000e100
    225c:	20000a30 	.word	0x20000a30
    2260:	20001098 	.word	0x20001098
    2264:	20000520 	.word	0x20000520
    2268:	00001e55 	.word	0x00001e55
    226c:	00002ed1 	.word	0x00002ed1
    2270:	00002f11 	.word	0x00002f11

00002274 <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    2274:	4b0d      	ldr	r3, [pc, #52]	; (22ac <TC3_Handler+0x38>)
    2276:	7a9b      	ldrb	r3, [r3, #10]
    2278:	f013 0f01 	tst.w	r3, #1
    227c:	d10d      	bne.n	229a <TC3_Handler+0x26>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    227e:	4b0b      	ldr	r3, [pc, #44]	; (22ac <TC3_Handler+0x38>)
    2280:	7a9b      	ldrb	r3, [r3, #10]
    2282:	f013 0f20 	tst.w	r3, #32
    2286:	d007      	beq.n	2298 <TC3_Handler+0x24>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    2288:	4a08      	ldr	r2, [pc, #32]	; (22ac <TC3_Handler+0x38>)
    228a:	7a93      	ldrb	r3, [r2, #10]
    228c:	f043 0320 	orr.w	r3, r3, #32
    2290:	7293      	strb	r3, [r2, #10]
		new_data = true;
    2292:	2201      	movs	r2, #1
    2294:	4b06      	ldr	r3, [pc, #24]	; (22b0 <TC3_Handler+0x3c>)
    2296:	701a      	strb	r2, [r3, #0]
    2298:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    229a:	4a04      	ldr	r2, [pc, #16]	; (22ac <TC3_Handler+0x38>)
    229c:	7a93      	ldrb	r3, [r2, #10]
    229e:	f043 0301 	orr.w	r3, r3, #1
    22a2:	7293      	strb	r3, [r2, #10]
		triggered = false;
    22a4:	2200      	movs	r2, #0
    22a6:	4b03      	ldr	r3, [pc, #12]	; (22b4 <TC3_Handler+0x40>)
    22a8:	701a      	strb	r2, [r3, #0]
    22aa:	4770      	bx	lr
    22ac:	4101c000 	.word	0x4101c000
    22b0:	20000acc 	.word	0x20000acc
    22b4:	20000ef4 	.word	0x20000ef4

000022b8 <select_prefix>:
    22b8:	3901      	subs	r1, #1
    22ba:	2903      	cmp	r1, #3
    22bc:	d805      	bhi.n	22ca <select_prefix+0x12>
    22be:	e8df f001 	tbb	[pc, r1]
    22c2:	0602      	.short	0x0602
    22c4:	0c09      	.short	0x0c09
    22c6:	230c      	movs	r3, #12
    22c8:	7043      	strb	r3, [r0, #1]
    22ca:	7840      	ldrb	r0, [r0, #1]
    22cc:	4770      	bx	lr
    22ce:	2310      	movs	r3, #16
    22d0:	7043      	strb	r3, [r0, #1]
    22d2:	e7fa      	b.n	22ca <select_prefix+0x12>
    22d4:	2314      	movs	r3, #20
    22d6:	7043      	strb	r3, [r0, #1]
    22d8:	e7f7      	b.n	22ca <select_prefix+0x12>
    22da:	2318      	movs	r3, #24
    22dc:	7043      	strb	r3, [r0, #1]
    22de:	e7f4      	b.n	22ca <select_prefix+0x12>

000022e0 <i2c_m_sync_cmd_write_easy>:
    22e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e2:	b083      	sub	sp, #12
    22e4:	4606      	mov	r6, r0
    22e6:	4617      	mov	r7, r2
    22e8:	461d      	mov	r5, r3
    22ea:	ab02      	add	r3, sp, #8
    22ec:	f803 1d04 	strb.w	r1, [r3, #-4]!
    22f0:	2201      	movs	r2, #1
    22f2:	4619      	mov	r1, r3
    22f4:	4b0a      	ldr	r3, [pc, #40]	; (2320 <i2c_m_sync_cmd_write_easy+0x40>)
    22f6:	4798      	blx	r3
    22f8:	2801      	cmp	r0, #1
    22fa:	d10d      	bne.n	2318 <i2c_m_sync_cmd_write_easy+0x38>
    22fc:	4604      	mov	r4, r0
    22fe:	462a      	mov	r2, r5
    2300:	4639      	mov	r1, r7
    2302:	4630      	mov	r0, r6
    2304:	4b07      	ldr	r3, [pc, #28]	; (2324 <i2c_m_sync_cmd_write_easy+0x44>)
    2306:	4798      	blx	r3
    2308:	42a8      	cmp	r0, r5
    230a:	d102      	bne.n	2312 <i2c_m_sync_cmd_write_easy+0x32>
    230c:	4620      	mov	r0, r4
    230e:	b003      	add	sp, #12
    2310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2312:	f04f 34ff 	mov.w	r4, #4294967295
    2316:	e7f9      	b.n	230c <i2c_m_sync_cmd_write_easy+0x2c>
    2318:	f04f 34ff 	mov.w	r4, #4294967295
    231c:	e7f6      	b.n	230c <i2c_m_sync_cmd_write_easy+0x2c>
    231e:	bf00      	nop
    2320:	00000ab1 	.word	0x00000ab1
    2324:	00000ae5 	.word	0x00000ae5

00002328 <sendCommand>:
    2328:	b530      	push	{r4, r5, lr}
    232a:	b083      	sub	sp, #12
    232c:	460d      	mov	r5, r1
    232e:	4614      	mov	r4, r2
    2330:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2334:	7801      	ldrb	r1, [r0, #0]
    2336:	4808      	ldr	r0, [pc, #32]	; (2358 <sendCommand+0x30>)
    2338:	4b08      	ldr	r3, [pc, #32]	; (235c <sendCommand+0x34>)
    233a:	4798      	blx	r3
    233c:	2301      	movs	r3, #1
    233e:	aa01      	add	r2, sp, #4
    2340:	4629      	mov	r1, r5
    2342:	4620      	mov	r0, r4
    2344:	4c06      	ldr	r4, [pc, #24]	; (2360 <sendCommand+0x38>)
    2346:	47a0      	blx	r4
    2348:	2800      	cmp	r0, #0
    234a:	dd03      	ble.n	2354 <sendCommand+0x2c>
    234c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2350:	b003      	add	sp, #12
    2352:	bd30      	pop	{r4, r5, pc}
    2354:	20ff      	movs	r0, #255	; 0xff
    2356:	e7fb      	b.n	2350 <sendCommand+0x28>
    2358:	200003b0 	.word	0x200003b0
    235c:	00000a99 	.word	0x00000a99
    2360:	000022e1 	.word	0x000022e1

00002364 <i2c_m_sync_reg_read_easy>:
    2364:	b570      	push	{r4, r5, r6, lr}
    2366:	b082      	sub	sp, #8
    2368:	4605      	mov	r5, r0
    236a:	461e      	mov	r6, r3
    236c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    2370:	f88d 1004 	strb.w	r1, [sp, #4]
    2374:	f88d 2005 	strb.w	r2, [sp, #5]
    2378:	2202      	movs	r2, #2
    237a:	a901      	add	r1, sp, #4
    237c:	4b09      	ldr	r3, [pc, #36]	; (23a4 <i2c_m_sync_reg_read_easy+0x40>)
    237e:	4798      	blx	r3
    2380:	2802      	cmp	r0, #2
    2382:	d10c      	bne.n	239e <i2c_m_sync_reg_read_easy+0x3a>
    2384:	4622      	mov	r2, r4
    2386:	4631      	mov	r1, r6
    2388:	4628      	mov	r0, r5
    238a:	4b07      	ldr	r3, [pc, #28]	; (23a8 <i2c_m_sync_reg_read_easy+0x44>)
    238c:	4798      	blx	r3
    238e:	42a0      	cmp	r0, r4
    2390:	d102      	bne.n	2398 <i2c_m_sync_reg_read_easy+0x34>
    2392:	2001      	movs	r0, #1
    2394:	b002      	add	sp, #8
    2396:	bd70      	pop	{r4, r5, r6, pc}
    2398:	f04f 30ff 	mov.w	r0, #4294967295
    239c:	e7fa      	b.n	2394 <i2c_m_sync_reg_read_easy+0x30>
    239e:	f04f 30ff 	mov.w	r0, #4294967295
    23a2:	e7f7      	b.n	2394 <i2c_m_sync_reg_read_easy+0x30>
    23a4:	00000ab1 	.word	0x00000ab1
    23a8:	00000ae5 	.word	0x00000ae5

000023ac <i2c_m_sync_reg_write_easy>:
    23ac:	b510      	push	{r4, lr}
    23ae:	b082      	sub	sp, #8
    23b0:	4604      	mov	r4, r0
    23b2:	f88d 1004 	strb.w	r1, [sp, #4]
    23b6:	0a11      	lsrs	r1, r2, #8
    23b8:	f88d 1005 	strb.w	r1, [sp, #5]
    23bc:	f88d 2006 	strb.w	r2, [sp, #6]
    23c0:	f88d 3007 	strb.w	r3, [sp, #7]
    23c4:	2204      	movs	r2, #4
    23c6:	eb0d 0102 	add.w	r1, sp, r2
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <i2c_m_sync_reg_write_easy+0x44>)
    23cc:	4798      	blx	r3
    23ce:	2804      	cmp	r0, #4
    23d0:	d10b      	bne.n	23ea <i2c_m_sync_reg_write_easy+0x3e>
    23d2:	2201      	movs	r2, #1
    23d4:	9904      	ldr	r1, [sp, #16]
    23d6:	4620      	mov	r0, r4
    23d8:	4b06      	ldr	r3, [pc, #24]	; (23f4 <i2c_m_sync_reg_write_easy+0x48>)
    23da:	4798      	blx	r3
    23dc:	2801      	cmp	r0, #1
    23de:	d101      	bne.n	23e4 <i2c_m_sync_reg_write_easy+0x38>
    23e0:	b002      	add	sp, #8
    23e2:	bd10      	pop	{r4, pc}
    23e4:	f04f 30ff 	mov.w	r0, #4294967295
    23e8:	e7fa      	b.n	23e0 <i2c_m_sync_reg_write_easy+0x34>
    23ea:	f04f 30ff 	mov.w	r0, #4294967295
    23ee:	e7f7      	b.n	23e0 <i2c_m_sync_reg_write_easy+0x34>
    23f0:	00000ab1 	.word	0x00000ab1
    23f4:	00000ae5 	.word	0x00000ae5

000023f8 <cache_invalidate>:
    23f8:	2308      	movs	r3, #8
    23fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    23fe:	4770      	bx	lr

00002400 <initialize>:
    2400:	b508      	push	{r3, lr}
    2402:	2200      	movs	r2, #0
    2404:	7042      	strb	r2, [r0, #1]
    2406:	7002      	strb	r2, [r0, #0]
    2408:	4a0e      	ldr	r2, [pc, #56]	; (2444 <initialize+0x44>)
    240a:	6082      	str	r2, [r0, #8]
    240c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    2410:	60c2      	str	r2, [r0, #12]
    2412:	4a0d      	ldr	r2, [pc, #52]	; (2448 <initialize+0x48>)
    2414:	6102      	str	r2, [r0, #16]
    2416:	4a0d      	ldr	r2, [pc, #52]	; (244c <initialize+0x4c>)
    2418:	6142      	str	r2, [r0, #20]
    241a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    241e:	6182      	str	r2, [r0, #24]
    2420:	4a0b      	ldr	r2, [pc, #44]	; (2450 <initialize+0x50>)
    2422:	61c2      	str	r2, [r0, #28]
    2424:	4a0b      	ldr	r2, [pc, #44]	; (2454 <initialize+0x54>)
    2426:	6202      	str	r2, [r0, #32]
    2428:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    242c:	6242      	str	r2, [r0, #36]	; 0x24
    242e:	4a0a      	ldr	r2, [pc, #40]	; (2458 <initialize+0x58>)
    2430:	6282      	str	r2, [r0, #40]	; 0x28
    2432:	4a0a      	ldr	r2, [pc, #40]	; (245c <initialize+0x5c>)
    2434:	62c2      	str	r2, [r0, #44]	; 0x2c
    2436:	4a0a      	ldr	r2, [pc, #40]	; (2460 <initialize+0x60>)
    2438:	6302      	str	r2, [r0, #48]	; 0x30
    243a:	4a0a      	ldr	r2, [pc, #40]	; (2464 <initialize+0x64>)
    243c:	6342      	str	r2, [r0, #52]	; 0x34
    243e:	4b0a      	ldr	r3, [pc, #40]	; (2468 <initialize+0x68>)
    2440:	4798      	blx	r3
    2442:	bd08      	pop	{r3, pc}
    2444:	40a00000 	.word	0x40a00000
    2448:	40400000 	.word	0x40400000
    244c:	40200000 	.word	0x40200000
    2450:	3fd55555 	.word	0x3fd55555
    2454:	3faaaaab 	.word	0x3faaaaab
    2458:	3e48b439 	.word	0x3e48b439
    245c:	3ea1cac1 	.word	0x3ea1cac1
    2460:	3e19999a 	.word	0x3e19999a
    2464:	3e77ced9 	.word	0x3e77ced9
    2468:	000023f9 	.word	0x000023f9

0000246c <cache_invalidate_address>:
    246c:	2301      	movs	r3, #1
    246e:	fa03 f101 	lsl.w	r1, r3, r1
    2472:	f001 0108 	and.w	r1, r1, #8
    2476:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    247a:	4319      	orrs	r1, r3
    247c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    2480:	4770      	bx	lr

00002482 <cache_set>:
    2482:	2902      	cmp	r1, #2
    2484:	d80c      	bhi.n	24a0 <cache_set+0x1e>
    2486:	f101 031c 	add.w	r3, r1, #28
    248a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    248e:	805a      	strh	r2, [r3, #2]
    2490:	2301      	movs	r3, #1
    2492:	408b      	lsls	r3, r1
    2494:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    2498:	ea21 0103 	bic.w	r1, r1, r3
    249c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    24a0:	4770      	bx	lr
	...

000024a4 <readRegister>:
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a6:	b085      	sub	sp, #20
    24a8:	4604      	mov	r4, r0
    24aa:	460d      	mov	r5, r1
    24ac:	4617      	mov	r7, r2
    24ae:	461e      	mov	r6, r3
    24b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    24b4:	7801      	ldrb	r1, [r0, #0]
    24b6:	4810      	ldr	r0, [pc, #64]	; (24f8 <readRegister+0x54>)
    24b8:	4b10      	ldr	r3, [pc, #64]	; (24fc <readRegister+0x58>)
    24ba:	4798      	blx	r3
    24bc:	00aa      	lsls	r2, r5, #2
    24be:	2303      	movs	r3, #3
    24c0:	9300      	str	r3, [sp, #0]
    24c2:	ab03      	add	r3, sp, #12
    24c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    24c8:	2150      	movs	r1, #80	; 0x50
    24ca:	4630      	mov	r0, r6
    24cc:	4e0c      	ldr	r6, [pc, #48]	; (2500 <readRegister+0x5c>)
    24ce:	47b0      	blx	r6
    24d0:	2800      	cmp	r0, #0
    24d2:	dc03      	bgt.n	24dc <readRegister+0x38>
    24d4:	26ff      	movs	r6, #255	; 0xff
    24d6:	4630      	mov	r0, r6
    24d8:	b005      	add	sp, #20
    24da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24dc:	f89d 600c 	ldrb.w	r6, [sp, #12]
    24e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    24e4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    24e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    24ec:	803a      	strh	r2, [r7, #0]
    24ee:	4629      	mov	r1, r5
    24f0:	4620      	mov	r0, r4
    24f2:	4b04      	ldr	r3, [pc, #16]	; (2504 <readRegister+0x60>)
    24f4:	4798      	blx	r3
    24f6:	e7ee      	b.n	24d6 <readRegister+0x32>
    24f8:	200003b0 	.word	0x200003b0
    24fc:	00000a99 	.word	0x00000a99
    2500:	00002365 	.word	0x00002365
    2504:	00002483 	.word	0x00002483

00002508 <reset>:
    2508:	b538      	push	{r3, r4, r5, lr}
    250a:	4604      	mov	r4, r0
    250c:	460d      	mov	r5, r1
    250e:	4b06      	ldr	r3, [pc, #24]	; (2528 <reset+0x20>)
    2510:	4798      	blx	r3
    2512:	462a      	mov	r2, r5
    2514:	21f0      	movs	r1, #240	; 0xf0
    2516:	4620      	mov	r0, r4
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <reset+0x24>)
    251a:	4798      	blx	r3
    251c:	4604      	mov	r4, r0
    251e:	2003      	movs	r0, #3
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <reset+0x28>)
    2522:	4798      	blx	r3
    2524:	4620      	mov	r0, r4
    2526:	bd38      	pop	{r3, r4, r5, pc}
    2528:	000023f9 	.word	0x000023f9
    252c:	00002329 	.word	0x00002329
    2530:	000009cd 	.word	0x000009cd

00002534 <exit_command>:
    2534:	b508      	push	{r3, lr}
    2536:	460a      	mov	r2, r1
    2538:	2180      	movs	r1, #128	; 0x80
    253a:	4b01      	ldr	r3, [pc, #4]	; (2540 <exit_command+0xc>)
    253c:	4798      	blx	r3
    253e:	bd08      	pop	{r3, pc}
    2540:	00002329 	.word	0x00002329

00002544 <readMeasurement>:
    2544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2548:	b084      	sub	sp, #16
    254a:	4605      	mov	r5, r0
    254c:	460c      	mov	r4, r1
    254e:	4690      	mov	r8, r2
    2550:	f001 060f 	and.w	r6, r1, #15
    2554:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    2558:	f44f 6200 	mov.w	r2, #2048	; 0x800
    255c:	7801      	ldrb	r1, [r0, #0]
    255e:	483d      	ldr	r0, [pc, #244]	; (2654 <readMeasurement+0x110>)
    2560:	4b3d      	ldr	r3, [pc, #244]	; (2658 <readMeasurement+0x114>)
    2562:	4798      	blx	r3
    2564:	f014 0908 	ands.w	r9, r4, #8
    2568:	d05b      	beq.n	2622 <readMeasurement+0xde>
    256a:	2302      	movs	r3, #2
    256c:	f014 0a04 	ands.w	sl, r4, #4
    2570:	d059      	beq.n	2626 <readMeasurement+0xe2>
    2572:	2202      	movs	r2, #2
    2574:	4413      	add	r3, r2
    2576:	f004 0702 	and.w	r7, r4, #2
    257a:	443b      	add	r3, r7
    257c:	b2da      	uxtb	r2, r3
    257e:	f014 0401 	ands.w	r4, r4, #1
    2582:	d052      	beq.n	262a <readMeasurement+0xe6>
    2584:	2302      	movs	r3, #2
    2586:	4413      	add	r3, r2
    2588:	b2db      	uxtb	r3, r3
    258a:	3301      	adds	r3, #1
    258c:	b2db      	uxtb	r3, r3
    258e:	aa01      	add	r2, sp, #4
    2590:	4631      	mov	r1, r6
    2592:	4640      	mov	r0, r8
    2594:	4e31      	ldr	r6, [pc, #196]	; (265c <readMeasurement+0x118>)
    2596:	47b0      	blx	r6
    2598:	2800      	cmp	r0, #0
    259a:	dd59      	ble.n	2650 <readMeasurement+0x10c>
    259c:	2c00      	cmp	r4, #0
    259e:	d046      	beq.n	262e <readMeasurement+0xea>
    25a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    25a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    25a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    25ac:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    25b0:	2303      	movs	r3, #3
    25b2:	2f00      	cmp	r7, #0
    25b4:	d040      	beq.n	2638 <readMeasurement+0xf4>
    25b6:	aa04      	add	r2, sp, #16
    25b8:	441a      	add	r2, r3
    25ba:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    25be:	1c59      	adds	r1, r3, #1
    25c0:	aa04      	add	r2, sp, #16
    25c2:	4411      	add	r1, r2
    25c4:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    25c8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    25cc:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    25d0:	3302      	adds	r3, #2
    25d2:	b2db      	uxtb	r3, r3
    25d4:	f1ba 0f00 	cmp.w	sl, #0
    25d8:	d032      	beq.n	2640 <readMeasurement+0xfc>
    25da:	aa04      	add	r2, sp, #16
    25dc:	441a      	add	r2, r3
    25de:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    25e2:	1c59      	adds	r1, r3, #1
    25e4:	aa04      	add	r2, sp, #16
    25e6:	4411      	add	r1, r2
    25e8:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    25ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    25f0:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    25f4:	3302      	adds	r3, #2
    25f6:	b2db      	uxtb	r3, r3
    25f8:	f1b9 0f00 	cmp.w	r9, #0
    25fc:	d024      	beq.n	2648 <readMeasurement+0x104>
    25fe:	aa04      	add	r2, sp, #16
    2600:	441a      	add	r2, r3
    2602:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    2606:	3301      	adds	r3, #1
    2608:	a904      	add	r1, sp, #16
    260a:	440b      	add	r3, r1
    260c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    2610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2614:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    2618:	f89d 0004 	ldrb.w	r0, [sp, #4]
    261c:	b004      	add	sp, #16
    261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2622:	2300      	movs	r3, #0
    2624:	e7a2      	b.n	256c <readMeasurement+0x28>
    2626:	2200      	movs	r2, #0
    2628:	e7a4      	b.n	2574 <readMeasurement+0x30>
    262a:	2300      	movs	r3, #0
    262c:	e7ab      	b.n	2586 <readMeasurement+0x42>
    262e:	2300      	movs	r3, #0
    2630:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    2634:	2301      	movs	r3, #1
    2636:	e7bc      	b.n	25b2 <readMeasurement+0x6e>
    2638:	2200      	movs	r2, #0
    263a:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    263e:	e7c9      	b.n	25d4 <readMeasurement+0x90>
    2640:	2200      	movs	r2, #0
    2642:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    2646:	e7d7      	b.n	25f8 <readMeasurement+0xb4>
    2648:	2300      	movs	r3, #0
    264a:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    264e:	e7e3      	b.n	2618 <readMeasurement+0xd4>
    2650:	20ff      	movs	r0, #255	; 0xff
    2652:	e7e3      	b.n	261c <readMeasurement+0xd8>
    2654:	200003b0 	.word	0x200003b0
    2658:	00000a99 	.word	0x00000a99
    265c:	000022e1 	.word	0x000022e1

00002660 <convertRaw>:
    2660:	b470      	push	{r4, r5, r6}
    2662:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    2664:	f3c2 1302 	ubfx	r3, r2, #4, #3
    2668:	f002 020f 	and.w	r2, r2, #15
    266c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    266e:	f3c1 1147 	ubfx	r1, r1, #5, #8
    2672:	f001 053f 	and.w	r5, r1, #63	; 0x3f
    2676:	f001 0103 	and.w	r1, r1, #3
    267a:	f3c5 0681 	ubfx	r6, r5, #2, #2
    267e:	092d      	lsrs	r5, r5, #4
    2680:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    2682:	f3c4 2480 	ubfx	r4, r4, #10, #1
    2686:	2a0c      	cmp	r2, #12
    2688:	f000 8091 	beq.w	27ae <convertRaw+0x14e>
    268c:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    2690:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    2694:	3302      	adds	r3, #2
    2696:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    269a:	edd3 5a00 	vldr	s11, [r3]
    269e:	2c00      	cmp	r4, #0
    26a0:	f000 808a 	beq.w	27b8 <convertRaw+0x158>
    26a4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    26a8:	ee06 3a90 	vmov	s13, r3
    26ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    26b0:	eddf 7ae0 	vldr	s15, [pc, #896]	; 2a34 <convertRaw+0x3d4>
    26b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    26b8:	ee65 6a26 	vmul.f32	s13, s10, s13
    26bc:	ee65 6aa6 	vmul.f32	s13, s11, s13
    26c0:	2201      	movs	r2, #1
    26c2:	fa02 f101 	lsl.w	r1, r2, r1
    26c6:	ee07 1a90 	vmov	s15, r1
    26ca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    26ce:	ee66 6a26 	vmul.f32	s13, s12, s13
    26d2:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
    26d6:	2c00      	cmp	r4, #0
    26d8:	f000 80d4 	beq.w	2884 <convertRaw+0x224>
    26dc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    26e0:	ee07 3a10 	vmov	s14, r3
    26e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    26e8:	eddf 7ad2 	vldr	s15, [pc, #840]	; 2a34 <convertRaw+0x3d4>
    26ec:	ee37 7a67 	vsub.f32	s14, s14, s15
    26f0:	ee25 7a07 	vmul.f32	s14, s10, s14
    26f4:	ee25 7a87 	vmul.f32	s14, s11, s14
    26f8:	2301      	movs	r3, #1
    26fa:	40b3      	lsls	r3, r6
    26fc:	ee07 3a90 	vmov	s15, r3
    2700:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2704:	ee26 7a87 	vmul.f32	s14, s13, s14
    2708:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    270c:	2c00      	cmp	r4, #0
    270e:	f000 811c 	beq.w	294a <convertRaw+0x2ea>
    2712:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2716:	ee07 3a90 	vmov	s15, r3
    271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    271e:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2a34 <convertRaw+0x3d4>
    2722:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2726:	ee64 7aa7 	vmul.f32	s15, s9, s15
    272a:	ee65 7aa7 	vmul.f32	s15, s11, s15
    272e:	2301      	movs	r3, #1
    2730:	fa03 f505 	lsl.w	r5, r3, r5
    2734:	ee07 5a10 	vmov	s14, r5
    2738:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    273c:	ee67 7a27 	vmul.f32	s15, s14, s15
    2740:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
    2744:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2748:	ee07 3a90 	vmov	s15, r3
    274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2750:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 2a38 <convertRaw+0x3d8>
    2754:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2758:	eddf 6ab8 	vldr	s13, [pc, #736]	; 2a3c <convertRaw+0x3dc>
    275c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2760:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    2764:	ee77 7a27 	vadd.f32	s15, s14, s15
    2768:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
    276c:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    2770:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 2a40 <convertRaw+0x3e0>
    2774:	eef4 7ac7 	vcmpe.f32	s15, s14
    2778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    277c:	f340 814a 	ble.w	2a14 <convertRaw+0x3b4>
    2780:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2784:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    2788:	ed9f 7aad 	vldr	s14, [pc, #692]	; 2a40 <convertRaw+0x3e0>
    278c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2794:	f300 8149 	bgt.w	2a2a <convertRaw+0x3ca>
    2798:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 2a44 <convertRaw+0x3e4>
    279c:	eef4 7ac7 	vcmpe.f32	s15, s14
    27a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27a4:	f140 8143 	bpl.w	2a2e <convertRaw+0x3ce>
    27a8:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    27ac:	e13f      	b.n	2a2e <convertRaw+0x3ce>
    27ae:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    27b2:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    27b6:	e76d      	b.n	2694 <convertRaw+0x34>
    27b8:	2903      	cmp	r1, #3
    27ba:	d88c      	bhi.n	26d6 <convertRaw+0x76>
    27bc:	e8df f001 	tbb	[pc, r1]
    27c0:	482e1802 	.word	0x482e1802
    27c4:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    27c8:	ee07 3a90 	vmov	s15, r3
    27cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27d0:	ee67 7a85 	vmul.f32	s15, s15, s10
    27d4:	ee25 7aa7 	vmul.f32	s14, s11, s15
    27d8:	2301      	movs	r3, #1
    27da:	fa03 f101 	lsl.w	r1, r3, r1
    27de:	ee07 1a90 	vmov	s15, r1
    27e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    27ea:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
    27ee:	e772      	b.n	26d6 <convertRaw+0x76>
    27f0:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    27f4:	ee07 3a90 	vmov	s15, r3
    27f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27fc:	ee67 7a85 	vmul.f32	s15, s15, s10
    2800:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2804:	2301      	movs	r3, #1
    2806:	fa03 f101 	lsl.w	r1, r3, r1
    280a:	ee07 1a90 	vmov	s15, r1
    280e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2812:	ee67 7a87 	vmul.f32	s15, s15, s14
    2816:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
    281a:	e75c      	b.n	26d6 <convertRaw+0x76>
    281c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2820:	ee07 3a90 	vmov	s15, r3
    2824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2828:	ed9f 7a82 	vldr	s14, [pc, #520]	; 2a34 <convertRaw+0x3d4>
    282c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2830:	ee65 7a27 	vmul.f32	s15, s10, s15
    2834:	ee65 7aa7 	vmul.f32	s15, s11, s15
    2838:	2301      	movs	r3, #1
    283a:	fa03 f101 	lsl.w	r1, r3, r1
    283e:	ee07 1a10 	vmov	s14, r1
    2842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2846:	ee67 7a27 	vmul.f32	s15, s14, s15
    284a:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
    284e:	e742      	b.n	26d6 <convertRaw+0x76>
    2850:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2854:	ee07 3a90 	vmov	s15, r3
    2858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    285c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 2a48 <convertRaw+0x3e8>
    2860:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2864:	ee65 7a27 	vmul.f32	s15, s10, s15
    2868:	ee65 7aa7 	vmul.f32	s15, s11, s15
    286c:	2301      	movs	r3, #1
    286e:	fa03 f101 	lsl.w	r1, r3, r1
    2872:	ee07 1a10 	vmov	s14, r1
    2876:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    287a:	ee67 7a27 	vmul.f32	s15, s14, s15
    287e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
    2882:	e728      	b.n	26d6 <convertRaw+0x76>
    2884:	2e03      	cmp	r6, #3
    2886:	f63f af41 	bhi.w	270c <convertRaw+0xac>
    288a:	e8df f006 	tbb	[pc, r6]
    288e:	1702      	.short	0x1702
    2890:	452c      	.short	0x452c
    2892:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    2896:	ee07 3a10 	vmov	s14, r3
    289a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    289e:	ee27 7a05 	vmul.f32	s14, s14, s10
    28a2:	ee25 5a87 	vmul.f32	s10, s11, s14
    28a6:	2301      	movs	r3, #1
    28a8:	40b3      	lsls	r3, r6
    28aa:	ee07 3a90 	vmov	s15, r3
    28ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    28b2:	ee27 7a05 	vmul.f32	s14, s14, s10
    28b6:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    28ba:	e727      	b.n	270c <convertRaw+0xac>
    28bc:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    28c0:	ee07 3a10 	vmov	s14, r3
    28c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    28c8:	ee27 7a05 	vmul.f32	s14, s14, s10
    28cc:	ee25 5a87 	vmul.f32	s10, s11, s14
    28d0:	2301      	movs	r3, #1
    28d2:	40b3      	lsls	r3, r6
    28d4:	ee07 3a90 	vmov	s15, r3
    28d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    28dc:	ee27 7a05 	vmul.f32	s14, s14, s10
    28e0:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    28e4:	e712      	b.n	270c <convertRaw+0xac>
    28e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    28ea:	ee07 3a10 	vmov	s14, r3
    28ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    28f2:	eddf 7a50 	vldr	s15, [pc, #320]	; 2a34 <convertRaw+0x3d4>
    28f6:	ee37 7a67 	vsub.f32	s14, s14, s15
    28fa:	ee25 7a07 	vmul.f32	s14, s10, s14
    28fe:	ee25 7a87 	vmul.f32	s14, s11, s14
    2902:	2301      	movs	r3, #1
    2904:	40b3      	lsls	r3, r6
    2906:	ee07 3a90 	vmov	s15, r3
    290a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    290e:	ee25 7a07 	vmul.f32	s14, s10, s14
    2912:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    2916:	e6f9      	b.n	270c <convertRaw+0xac>
    2918:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    291c:	ee07 3a10 	vmov	s14, r3
    2920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2924:	eddf 7a48 	vldr	s15, [pc, #288]	; 2a48 <convertRaw+0x3e8>
    2928:	ee37 7a67 	vsub.f32	s14, s14, s15
    292c:	ee25 7a07 	vmul.f32	s14, s10, s14
    2930:	ee25 7a87 	vmul.f32	s14, s11, s14
    2934:	2301      	movs	r3, #1
    2936:	40b3      	lsls	r3, r6
    2938:	ee07 3a90 	vmov	s15, r3
    293c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    2940:	ee25 7a07 	vmul.f32	s14, s10, s14
    2944:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    2948:	e6e0      	b.n	270c <convertRaw+0xac>
    294a:	2d03      	cmp	r5, #3
    294c:	f63f aefa 	bhi.w	2744 <convertRaw+0xe4>
    2950:	e8df f005 	tbb	[pc, r5]
    2954:	462c1702 	.word	0x462c1702
    2958:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    295c:	ee07 3a90 	vmov	s15, r3
    2960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2964:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2968:	ee65 5aa7 	vmul.f32	s11, s11, s15
    296c:	2301      	movs	r3, #1
    296e:	40ab      	lsls	r3, r5
    2970:	ee07 3a90 	vmov	s15, r3
    2974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2978:	ee67 7aa5 	vmul.f32	s15, s15, s11
    297c:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
    2980:	e6e0      	b.n	2744 <convertRaw+0xe4>
    2982:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2986:	ee07 3a90 	vmov	s15, r3
    298a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    298e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2992:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2996:	2301      	movs	r3, #1
    2998:	40ab      	lsls	r3, r5
    299a:	ee07 3a90 	vmov	s15, r3
    299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
    29a6:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
    29aa:	e6cb      	b.n	2744 <convertRaw+0xe4>
    29ac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    29b0:	ee07 3a90 	vmov	s15, r3
    29b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2a34 <convertRaw+0x3d4>
    29bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    29c0:	ee64 7aa7 	vmul.f32	s15, s9, s15
    29c4:	ee65 7aa7 	vmul.f32	s15, s11, s15
    29c8:	2301      	movs	r3, #1
    29ca:	fa03 f505 	lsl.w	r5, r3, r5
    29ce:	ee07 5a10 	vmov	s14, r5
    29d2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    29d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
    29da:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
    29de:	e6b1      	b.n	2744 <convertRaw+0xe4>
    29e0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    29e4:	ee07 3a90 	vmov	s15, r3
    29e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2a48 <convertRaw+0x3e8>
    29f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    29f4:	ee64 7aa7 	vmul.f32	s15, s9, s15
    29f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
    29fc:	2301      	movs	r3, #1
    29fe:	fa03 f505 	lsl.w	r5, r3, r5
    2a02:	ee07 5a10 	vmov	s14, r5
    2a06:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2a0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
    2a0e:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
    2a12:	e697      	b.n	2744 <convertRaw+0xe4>
    2a14:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2a44 <convertRaw+0x3e4>
    2a18:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a20:	f57f aeb0 	bpl.w	2784 <convertRaw+0x124>
    2a24:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2a28:	e6ac      	b.n	2784 <convertRaw+0x124>
    2a2a:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
    2a2e:	bc70      	pop	{r4, r5, r6}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	47000000 	.word	0x47000000
    2a38:	4734a400 	.word	0x4734a400
    2a3c:	4234cccd 	.word	0x4234cccd
    2a40:	47435000 	.word	0x47435000
    2a44:	c7435000 	.word	0xc7435000
    2a48:	46800000 	.word	0x46800000

00002a4c <convDelayMicro>:
    2a4c:	b410      	push	{r4}
    2a4e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2a50:	f002 0303 	and.w	r3, r2, #3
    2a54:	f3c2 24c1 	ubfx	r4, r2, #11, #2
    2a58:	f3c2 0182 	ubfx	r1, r2, #2, #3
    2a5c:	2201      	movs	r2, #1
    2a5e:	408a      	lsls	r2, r1
    2a60:	3202      	adds	r2, #2
    2a62:	409a      	lsls	r2, r3
    2a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2a68:	0193      	lsls	r3, r2, #6
    2a6a:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    2a6e:	23c0      	movs	r3, #192	; 0xc0
    2a70:	40a3      	lsls	r3, r4
    2a72:	3343      	adds	r3, #67	; 0x43
    2a74:	4418      	add	r0, r3
    2a76:	4b05      	ldr	r3, [pc, #20]	; (2a8c <convDelayMicro+0x40>)
    2a78:	fba3 3000 	umull	r3, r0, r3, r0
    2a7c:	f3c0 104f 	ubfx	r0, r0, #5, #16
    2a80:	3008      	adds	r0, #8
    2a82:	b280      	uxth	r0, r0
    2a84:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a88:	4770      	bx	lr
    2a8a:	bf00      	nop
    2a8c:	51eb851f 	.word	0x51eb851f

00002a90 <isOK>:
    2a90:	0900      	lsrs	r0, r0, #4
    2a92:	f080 0001 	eor.w	r0, r0, #1
    2a96:	f000 0001 	and.w	r0, r0, #1
    2a9a:	4770      	bx	lr

00002a9c <writeRegister>:
    2a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9e:	b085      	sub	sp, #20
    2aa0:	4605      	mov	r5, r0
    2aa2:	460e      	mov	r6, r1
    2aa4:	4617      	mov	r7, r2
    2aa6:	461c      	mov	r4, r3
    2aa8:	4b12      	ldr	r3, [pc, #72]	; (2af4 <writeRegister+0x58>)
    2aaa:	4798      	blx	r3
    2aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2ab0:	7829      	ldrb	r1, [r5, #0]
    2ab2:	4811      	ldr	r0, [pc, #68]	; (2af8 <writeRegister+0x5c>)
    2ab4:	4b11      	ldr	r3, [pc, #68]	; (2afc <writeRegister+0x60>)
    2ab6:	4798      	blx	r3
    2ab8:	00b3      	lsls	r3, r6, #2
    2aba:	aa03      	add	r2, sp, #12
    2abc:	9200      	str	r2, [sp, #0]
    2abe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2ac2:	463a      	mov	r2, r7
    2ac4:	2160      	movs	r1, #96	; 0x60
    2ac6:	4620      	mov	r0, r4
    2ac8:	4c0d      	ldr	r4, [pc, #52]	; (2b00 <writeRegister+0x64>)
    2aca:	47a0      	blx	r4
    2acc:	2800      	cmp	r0, #0
    2ace:	dd0e      	ble.n	2aee <writeRegister+0x52>
    2ad0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2ad4:	4620      	mov	r0, r4
    2ad6:	4b0b      	ldr	r3, [pc, #44]	; (2b04 <writeRegister+0x68>)
    2ad8:	4798      	blx	r3
    2ada:	b908      	cbnz	r0, 2ae0 <writeRegister+0x44>
    2adc:	4620      	mov	r0, r4
    2ade:	e007      	b.n	2af0 <writeRegister+0x54>
    2ae0:	463a      	mov	r2, r7
    2ae2:	4631      	mov	r1, r6
    2ae4:	4628      	mov	r0, r5
    2ae6:	4b08      	ldr	r3, [pc, #32]	; (2b08 <writeRegister+0x6c>)
    2ae8:	4798      	blx	r3
    2aea:	4620      	mov	r0, r4
    2aec:	e000      	b.n	2af0 <writeRegister+0x54>
    2aee:	20ff      	movs	r0, #255	; 0xff
    2af0:	b005      	add	sp, #20
    2af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af4:	0000246d 	.word	0x0000246d
    2af8:	200003b0 	.word	0x200003b0
    2afc:	00000a99 	.word	0x00000a99
    2b00:	000023ad 	.word	0x000023ad
    2b04:	00002a91 	.word	0x00002a91
    2b08:	00002483 	.word	0x00002483

00002b0c <hasError>:
    2b0c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    2b10:	4770      	bx	lr
	...

00002b14 <cache_fill>:
    2b14:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    2b18:	b30a      	cbz	r2, 2b5e <cache_fill+0x4a>
    2b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b1c:	460e      	mov	r6, r1
    2b1e:	4605      	mov	r5, r0
    2b20:	2400      	movs	r4, #0
    2b22:	e001      	b.n	2b28 <cache_fill+0x14>
    2b24:	3401      	adds	r4, #1
    2b26:	b2e4      	uxtb	r4, r4
    2b28:	2c02      	cmp	r4, #2
    2b2a:	d815      	bhi.n	2b58 <cache_fill+0x44>
    2b2c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2b30:	4123      	asrs	r3, r4
    2b32:	f013 0f01 	tst.w	r3, #1
    2b36:	d0f5      	beq.n	2b24 <cache_fill+0x10>
    2b38:	f104 021c 	add.w	r2, r4, #28
    2b3c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2b40:	4633      	mov	r3, r6
    2b42:	3202      	adds	r2, #2
    2b44:	4621      	mov	r1, r4
    2b46:	4628      	mov	r0, r5
    2b48:	4f06      	ldr	r7, [pc, #24]	; (2b64 <cache_fill+0x50>)
    2b4a:	47b8      	blx	r7
    2b4c:	4b06      	ldr	r3, [pc, #24]	; (2b68 <cache_fill+0x54>)
    2b4e:	4798      	blx	r3
    2b50:	2800      	cmp	r0, #0
    2b52:	d0e7      	beq.n	2b24 <cache_fill+0x10>
    2b54:	22ff      	movs	r2, #255	; 0xff
    2b56:	e000      	b.n	2b5a <cache_fill+0x46>
    2b58:	2200      	movs	r2, #0
    2b5a:	4610      	mov	r0, r2
    2b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b5e:	4610      	mov	r0, r2
    2b60:	4770      	bx	lr
    2b62:	bf00      	nop
    2b64:	000024a5 	.word	0x000024a5
    2b68:	00002b0d 	.word	0x00002b0d

00002b6c <startMeasurement>:
    2b6c:	b570      	push	{r4, r5, r6, lr}
    2b6e:	4606      	mov	r6, r0
    2b70:	460c      	mov	r4, r1
    2b72:	4615      	mov	r5, r2
    2b74:	4611      	mov	r1, r2
    2b76:	4b05      	ldr	r3, [pc, #20]	; (2b8c <startMeasurement+0x20>)
    2b78:	4798      	blx	r3
    2b7a:	f004 010f 	and.w	r1, r4, #15
    2b7e:	462a      	mov	r2, r5
    2b80:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2b84:	4630      	mov	r0, r6
    2b86:	4b02      	ldr	r3, [pc, #8]	; (2b90 <startMeasurement+0x24>)
    2b88:	4798      	blx	r3
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
    2b8c:	00002b15 	.word	0x00002b15
    2b90:	00002329 	.word	0x00002329

00002b94 <checkStatus>:
    2b94:	f010 0f10 	tst.w	r0, #16
    2b98:	d001      	beq.n	2b9e <checkStatus+0xa>
    2b9a:	20ff      	movs	r0, #255	; 0xff
    2b9c:	4770      	bx	lr
    2b9e:	2000      	movs	r0, #0
    2ba0:	4770      	bx	lr
	...

00002ba4 <setGainSel>:
    2ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba8:	b082      	sub	sp, #8
    2baa:	4607      	mov	r7, r0
    2bac:	4688      	mov	r8, r1
    2bae:	4615      	mov	r5, r2
    2bb0:	2400      	movs	r4, #0
    2bb2:	aa02      	add	r2, sp, #8
    2bb4:	f822 4d02 	strh.w	r4, [r2, #-2]!
    2bb8:	462b      	mov	r3, r5
    2bba:	4621      	mov	r1, r4
    2bbc:	4e0f      	ldr	r6, [pc, #60]	; (2bfc <setGainSel+0x58>)
    2bbe:	47b0      	blx	r6
    2bc0:	4606      	mov	r6, r0
    2bc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2bc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2bca:	b212      	sxth	r2, r2
    2bcc:	ea4f 1808 	mov.w	r8, r8, lsl #4
    2bd0:	f008 0870 	and.w	r8, r8, #112	; 0x70
    2bd4:	ea42 0208 	orr.w	r2, r2, r8
    2bd8:	462b      	mov	r3, r5
    2bda:	b292      	uxth	r2, r2
    2bdc:	4621      	mov	r1, r4
    2bde:	4638      	mov	r0, r7
    2be0:	4c07      	ldr	r4, [pc, #28]	; (2c00 <setGainSel+0x5c>)
    2be2:	47a0      	blx	r4
    2be4:	4607      	mov	r7, r0
    2be6:	4630      	mov	r0, r6
    2be8:	4d06      	ldr	r5, [pc, #24]	; (2c04 <setGainSel+0x60>)
    2bea:	47a8      	blx	r5
    2bec:	4604      	mov	r4, r0
    2bee:	4638      	mov	r0, r7
    2bf0:	47a8      	blx	r5
    2bf2:	4320      	orrs	r0, r4
    2bf4:	b2c0      	uxtb	r0, r0
    2bf6:	b002      	add	sp, #8
    2bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bfc:	000024a5 	.word	0x000024a5
    2c00:	00002a9d 	.word	0x00002a9d
    2c04:	00002b95 	.word	0x00002b95

00002c08 <setResolution>:
    2c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c0a:	b083      	sub	sp, #12
    2c0c:	4605      	mov	r5, r0
    2c0e:	011b      	lsls	r3, r3, #4
    2c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2c14:	0092      	lsls	r2, r2, #2
    2c16:	f002 020c 	and.w	r2, r2, #12
    2c1a:	431a      	orrs	r2, r3
    2c1c:	f001 0103 	and.w	r1, r1, #3
    2c20:	ea42 0401 	orr.w	r4, r2, r1
    2c24:	aa02      	add	r2, sp, #8
    2c26:	2300      	movs	r3, #0
    2c28:	f822 3d02 	strh.w	r3, [r2, #-2]!
    2c2c:	9b08      	ldr	r3, [sp, #32]
    2c2e:	2102      	movs	r1, #2
    2c30:	4e0d      	ldr	r6, [pc, #52]	; (2c68 <setResolution+0x60>)
    2c32:	47b0      	blx	r6
    2c34:	4607      	mov	r7, r0
    2c36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2c3e:	b212      	sxth	r2, r2
    2c40:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2c44:	9b08      	ldr	r3, [sp, #32]
    2c46:	b292      	uxth	r2, r2
    2c48:	2102      	movs	r1, #2
    2c4a:	4628      	mov	r0, r5
    2c4c:	4c07      	ldr	r4, [pc, #28]	; (2c6c <setResolution+0x64>)
    2c4e:	47a0      	blx	r4
    2c50:	4606      	mov	r6, r0
    2c52:	4638      	mov	r0, r7
    2c54:	4d06      	ldr	r5, [pc, #24]	; (2c70 <setResolution+0x68>)
    2c56:	47a8      	blx	r5
    2c58:	4604      	mov	r4, r0
    2c5a:	4630      	mov	r0, r6
    2c5c:	47a8      	blx	r5
    2c5e:	4320      	orrs	r0, r4
    2c60:	b2c0      	uxtb	r0, r0
    2c62:	b003      	add	sp, #12
    2c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c66:	bf00      	nop
    2c68:	000024a5 	.word	0x000024a5
    2c6c:	00002a9d 	.word	0x00002a9d
    2c70:	00002b95 	.word	0x00002b95

00002c74 <setOverSampling>:
    2c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c76:	b083      	sub	sp, #12
    2c78:	4607      	mov	r7, r0
    2c7a:	460c      	mov	r4, r1
    2c7c:	4615      	mov	r5, r2
    2c7e:	aa02      	add	r2, sp, #8
    2c80:	2300      	movs	r3, #0
    2c82:	f822 3d02 	strh.w	r3, [r2, #-2]!
    2c86:	462b      	mov	r3, r5
    2c88:	2102      	movs	r1, #2
    2c8a:	4e0e      	ldr	r6, [pc, #56]	; (2cc4 <setOverSampling+0x50>)
    2c8c:	47b0      	blx	r6
    2c8e:	4606      	mov	r6, r0
    2c90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c94:	f022 0203 	bic.w	r2, r2, #3
    2c98:	b212      	sxth	r2, r2
    2c9a:	f004 0403 	and.w	r4, r4, #3
    2c9e:	4322      	orrs	r2, r4
    2ca0:	462b      	mov	r3, r5
    2ca2:	b292      	uxth	r2, r2
    2ca4:	2102      	movs	r1, #2
    2ca6:	4638      	mov	r0, r7
    2ca8:	4c07      	ldr	r4, [pc, #28]	; (2cc8 <setOverSampling+0x54>)
    2caa:	47a0      	blx	r4
    2cac:	4607      	mov	r7, r0
    2cae:	4630      	mov	r0, r6
    2cb0:	4d06      	ldr	r5, [pc, #24]	; (2ccc <setOverSampling+0x58>)
    2cb2:	47a8      	blx	r5
    2cb4:	4604      	mov	r4, r0
    2cb6:	4638      	mov	r0, r7
    2cb8:	47a8      	blx	r5
    2cba:	4320      	orrs	r0, r4
    2cbc:	b2c0      	uxtb	r0, r0
    2cbe:	b003      	add	sp, #12
    2cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cc2:	bf00      	nop
    2cc4:	000024a5 	.word	0x000024a5
    2cc8:	00002a9d 	.word	0x00002a9d
    2ccc:	00002b95 	.word	0x00002b95

00002cd0 <setDigitalFiltering>:
    2cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	4607      	mov	r7, r0
    2cd6:	460c      	mov	r4, r1
    2cd8:	4615      	mov	r5, r2
    2cda:	aa02      	add	r2, sp, #8
    2cdc:	2300      	movs	r3, #0
    2cde:	f822 3d02 	strh.w	r3, [r2, #-2]!
    2ce2:	462b      	mov	r3, r5
    2ce4:	2102      	movs	r1, #2
    2ce6:	4e0e      	ldr	r6, [pc, #56]	; (2d20 <setDigitalFiltering+0x50>)
    2ce8:	47b0      	blx	r6
    2cea:	4606      	mov	r6, r0
    2cec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2cf0:	f022 021c 	bic.w	r2, r2, #28
    2cf4:	b212      	sxth	r2, r2
    2cf6:	00a4      	lsls	r4, r4, #2
    2cf8:	f004 041c 	and.w	r4, r4, #28
    2cfc:	4322      	orrs	r2, r4
    2cfe:	462b      	mov	r3, r5
    2d00:	b292      	uxth	r2, r2
    2d02:	2102      	movs	r1, #2
    2d04:	4638      	mov	r0, r7
    2d06:	4c07      	ldr	r4, [pc, #28]	; (2d24 <setDigitalFiltering+0x54>)
    2d08:	47a0      	blx	r4
    2d0a:	4607      	mov	r7, r0
    2d0c:	4630      	mov	r0, r6
    2d0e:	4d06      	ldr	r5, [pc, #24]	; (2d28 <setDigitalFiltering+0x58>)
    2d10:	47a8      	blx	r5
    2d12:	4604      	mov	r4, r0
    2d14:	4638      	mov	r0, r7
    2d16:	47a8      	blx	r5
    2d18:	4320      	orrs	r0, r4
    2d1a:	b2c0      	uxtb	r0, r0
    2d1c:	b003      	add	sp, #12
    2d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d20:	000024a5 	.word	0x000024a5
    2d24:	00002a9d 	.word	0x00002a9d
    2d28:	00002b95 	.word	0x00002b95

00002d2c <setTemperatureCompensation>:
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	b083      	sub	sp, #12
    2d30:	4606      	mov	r6, r0
    2d32:	4614      	mov	r4, r2
    2d34:	1c0f      	adds	r7, r1, #0
    2d36:	bf18      	it	ne
    2d38:	2701      	movne	r7, #1
    2d3a:	aa02      	add	r2, sp, #8
    2d3c:	2300      	movs	r3, #0
    2d3e:	f822 3d02 	strh.w	r3, [r2, #-2]!
    2d42:	4623      	mov	r3, r4
    2d44:	2101      	movs	r1, #1
    2d46:	4d0d      	ldr	r5, [pc, #52]	; (2d7c <setTemperatureCompensation+0x50>)
    2d48:	47a8      	blx	r5
    2d4a:	4605      	mov	r5, r0
    2d4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2d54:	b212      	sxth	r2, r2
    2d56:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
    2d5a:	4623      	mov	r3, r4
    2d5c:	b292      	uxth	r2, r2
    2d5e:	2101      	movs	r1, #1
    2d60:	4630      	mov	r0, r6
    2d62:	4c07      	ldr	r4, [pc, #28]	; (2d80 <setTemperatureCompensation+0x54>)
    2d64:	47a0      	blx	r4
    2d66:	4606      	mov	r6, r0
    2d68:	4628      	mov	r0, r5
    2d6a:	4d06      	ldr	r5, [pc, #24]	; (2d84 <setTemperatureCompensation+0x58>)
    2d6c:	47a8      	blx	r5
    2d6e:	4604      	mov	r4, r0
    2d70:	4630      	mov	r0, r6
    2d72:	47a8      	blx	r5
    2d74:	4320      	orrs	r0, r4
    2d76:	b2c0      	uxtb	r0, r0
    2d78:	b003      	add	sp, #12
    2d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d7c:	000024a5 	.word	0x000024a5
    2d80:	00002a9d 	.word	0x00002a9d
    2d84:	00002b95 	.word	0x00002b95

00002d88 <begin>:
    2d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d8c:	b082      	sub	sp, #8
    2d8e:	4604      	mov	r4, r0
    2d90:	4617      	mov	r7, r2
    2d92:	461e      	mov	r6, r3
    2d94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2d96:	4b24      	ldr	r3, [pc, #144]	; (2e28 <begin+0xa0>)
    2d98:	4798      	blx	r3
    2d9a:	f994 2001 	ldrsb.w	r2, [r4, #1]
    2d9e:	2f00      	cmp	r7, #0
    2da0:	d13f      	bne.n	2e22 <begin+0x9a>
    2da2:	2300      	movs	r3, #0
    2da4:	4313      	orrs	r3, r2
    2da6:	2e00      	cmp	r6, #0
    2da8:	bf18      	it	ne
    2daa:	f043 0301 	orrne.w	r3, r3, #1
    2dae:	7023      	strb	r3, [r4, #0]
    2db0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2db4:	70a3      	strb	r3, [r4, #2]
    2db6:	4629      	mov	r1, r5
    2db8:	4620      	mov	r0, r4
    2dba:	4b1c      	ldr	r3, [pc, #112]	; (2e2c <begin+0xa4>)
    2dbc:	4798      	blx	r3
    2dbe:	4629      	mov	r1, r5
    2dc0:	4620      	mov	r0, r4
    2dc2:	4b1b      	ldr	r3, [pc, #108]	; (2e30 <begin+0xa8>)
    2dc4:	4798      	blx	r3
    2dc6:	4b1b      	ldr	r3, [pc, #108]	; (2e34 <begin+0xac>)
    2dc8:	4798      	blx	r3
    2dca:	4681      	mov	r9, r0
    2dcc:	462a      	mov	r2, r5
    2dce:	2101      	movs	r1, #1
    2dd0:	4620      	mov	r0, r4
    2dd2:	4b19      	ldr	r3, [pc, #100]	; (2e38 <begin+0xb0>)
    2dd4:	4798      	blx	r3
    2dd6:	4682      	mov	sl, r0
    2dd8:	9500      	str	r5, [sp, #0]
    2dda:	2300      	movs	r3, #0
    2ddc:	461a      	mov	r2, r3
    2dde:	4619      	mov	r1, r3
    2de0:	4620      	mov	r0, r4
    2de2:	4e16      	ldr	r6, [pc, #88]	; (2e3c <begin+0xb4>)
    2de4:	47b0      	blx	r6
    2de6:	4680      	mov	r8, r0
    2de8:	462a      	mov	r2, r5
    2dea:	2101      	movs	r1, #1
    2dec:	4620      	mov	r0, r4
    2dee:	4b14      	ldr	r3, [pc, #80]	; (2e40 <begin+0xb8>)
    2df0:	4798      	blx	r3
    2df2:	4607      	mov	r7, r0
    2df4:	462a      	mov	r2, r5
    2df6:	2102      	movs	r1, #2
    2df8:	4620      	mov	r0, r4
    2dfa:	4b12      	ldr	r3, [pc, #72]	; (2e44 <begin+0xbc>)
    2dfc:	4798      	blx	r3
    2dfe:	4606      	mov	r6, r0
    2e00:	462a      	mov	r2, r5
    2e02:	2100      	movs	r1, #0
    2e04:	4620      	mov	r0, r4
    2e06:	4b10      	ldr	r3, [pc, #64]	; (2e48 <begin+0xc0>)
    2e08:	4798      	blx	r3
    2e0a:	ea49 090a 	orr.w	r9, r9, sl
    2e0e:	ea48 0809 	orr.w	r8, r8, r9
    2e12:	ea47 0708 	orr.w	r7, r7, r8
    2e16:	433e      	orrs	r6, r7
    2e18:	4330      	orrs	r0, r6
    2e1a:	b2c0      	uxtb	r0, r0
    2e1c:	b002      	add	sp, #8
    2e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e22:	2302      	movs	r3, #2
    2e24:	e7be      	b.n	2da4 <begin+0x1c>
    2e26:	bf00      	nop
    2e28:	000022b9 	.word	0x000022b9
    2e2c:	00002535 	.word	0x00002535
    2e30:	00002509 	.word	0x00002509
    2e34:	00002b95 	.word	0x00002b95
    2e38:	00002ba5 	.word	0x00002ba5
    2e3c:	00002c09 	.word	0x00002c09
    2e40:	00002c75 	.word	0x00002c75
    2e44:	00002cd1 	.word	0x00002cd1
    2e48:	00002d2d 	.word	0x00002d2d

00002e4c <setExtTrig>:
    2e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e4e:	b083      	sub	sp, #12
    2e50:	4607      	mov	r7, r0
    2e52:	460c      	mov	r4, r1
    2e54:	4615      	mov	r5, r2
    2e56:	aa02      	add	r2, sp, #8
    2e58:	2300      	movs	r3, #0
    2e5a:	f822 3d02 	strh.w	r3, [r2, #-2]!
    2e5e:	462b      	mov	r3, r5
    2e60:	2101      	movs	r1, #1
    2e62:	4e0f      	ldr	r6, [pc, #60]	; (2ea0 <setExtTrig+0x54>)
    2e64:	47b0      	blx	r6
    2e66:	4606      	mov	r6, r0
    2e68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    2e70:	b213      	sxth	r3, r2
    2e72:	b2a2      	uxth	r2, r4
    2e74:	02d2      	lsls	r2, r2, #11
    2e76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    2e7a:	431a      	orrs	r2, r3
    2e7c:	462b      	mov	r3, r5
    2e7e:	b292      	uxth	r2, r2
    2e80:	2101      	movs	r1, #1
    2e82:	4638      	mov	r0, r7
    2e84:	4c07      	ldr	r4, [pc, #28]	; (2ea4 <setExtTrig+0x58>)
    2e86:	47a0      	blx	r4
    2e88:	4607      	mov	r7, r0
    2e8a:	4630      	mov	r0, r6
    2e8c:	4d06      	ldr	r5, [pc, #24]	; (2ea8 <setExtTrig+0x5c>)
    2e8e:	47a8      	blx	r5
    2e90:	4604      	mov	r4, r0
    2e92:	4638      	mov	r0, r7
    2e94:	47a8      	blx	r5
    2e96:	4320      	orrs	r0, r4
    2e98:	b2c0      	uxtb	r0, r0
    2e9a:	b003      	add	sp, #12
    2e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e9e:	bf00      	nop
    2ea0:	000024a5 	.word	0x000024a5
    2ea4:	00002a9d 	.word	0x00002a9d
    2ea8:	00002b95 	.word	0x00002b95

00002eac <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include <math.h>


void triggerInitialize(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2eac:	b538      	push	{r3, r4, r5, lr}
    2eae:	4605      	mov	r5, r0
    2eb0:	460c      	mov	r4, r1
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,io);
    2eb2:	460a      	mov	r2, r1
    2eb4:	2101      	movs	r1, #1
    2eb6:	4b04      	ldr	r3, [pc, #16]	; (2ec8 <triggerInitialize+0x1c>)
    2eb8:	4798      	blx	r3
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, io);
    2eba:	4622      	mov	r2, r4
    2ebc:	210e      	movs	r1, #14
    2ebe:	4628      	mov	r0, r5
    2ec0:	4b02      	ldr	r3, [pc, #8]	; (2ecc <triggerInitialize+0x20>)
    2ec2:	4798      	blx	r3
    2ec4:	bd38      	pop	{r3, r4, r5, pc}
    2ec6:	bf00      	nop
    2ec8:	00002e4d 	.word	0x00002e4d
    2ecc:	00002b6d 	.word	0x00002b6d

00002ed0 <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    2ed0:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ed2:	4c03      	ldr	r4, [pc, #12]	; (2ee0 <triggerSensor+0x10>)
    2ed4:	2540      	movs	r5, #64	; 0x40
    2ed6:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    2ed8:	4b02      	ldr	r3, [pc, #8]	; (2ee4 <triggerSensor+0x14>)
    2eda:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2edc:	6165      	str	r5, [r4, #20]
    2ede:	bd38      	pop	{r3, r4, r5, pc}
    2ee0:	41008000 	.word	0x41008000
    2ee4:	000009ad 	.word	0x000009ad

00002ee8 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2ee8:	b538      	push	{r3, r4, r5, lr}
    2eea:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , io);
    2eec:	460a      	mov	r2, r1
    2eee:	210e      	movs	r1, #14
    2ef0:	4b04      	ldr	r3, [pc, #16]	; (2f04 <triggerReadout+0x1c>)
    2ef2:	4798      	blx	r3
    2ef4:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    2ef6:	4628      	mov	r0, r5
    2ef8:	4b03      	ldr	r3, [pc, #12]	; (2f08 <triggerReadout+0x20>)
    2efa:	4798      	blx	r3
	return checkStatus(status);
    2efc:	4620      	mov	r0, r4
    2efe:	4b03      	ldr	r3, [pc, #12]	; (2f0c <triggerReadout+0x24>)
    2f00:	4798      	blx	r3
};
    2f02:	bd38      	pop	{r3, r4, r5, pc}
    2f04:	00002545 	.word	0x00002545
    2f08:	00002661 	.word	0x00002661
    2f0c:	00002b95 	.word	0x00002b95

00002f10 <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct io_descriptor *io)
{
    2f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f14:	b083      	sub	sp, #12
    2f16:	4688      	mov	r8, r1
    2f18:	4617      	mov	r7, r2
    2f1a:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,io);
    2f1c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f1e:	4c25      	ldr	r4, [pc, #148]	; (2fb4 <triggerReadoutArray+0xa4>)
    2f20:	47a0      	blx	r4
    2f22:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,io);
    2f24:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f26:	4640      	mov	r0, r8
    2f28:	47a0      	blx	r4
    2f2a:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,io);
    2f2c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f2e:	4638      	mov	r0, r7
    2f30:	47a0      	blx	r4
    2f32:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,io);
    2f34:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f36:	4630      	mov	r0, r6
    2f38:	47a0      	blx	r4
    2f3a:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,io);
    2f3c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f40:	47a0      	blx	r4
    2f42:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,io);
    2f44:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f46:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f48:	47a0      	blx	r4
    2f4a:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,io);
    2f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f4e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2f50:	47a0      	blx	r4
    2f52:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,io);
    2f54:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f56:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2f58:	47a0      	blx	r4
    2f5a:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,io);
    2f5c:	9911      	ldr	r1, [sp, #68]	; 0x44
    2f5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    2f60:	47a0      	blx	r4
    2f62:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    2f64:	4628      	mov	r0, r5
    2f66:	4d14      	ldr	r5, [pc, #80]	; (2fb8 <triggerReadoutArray+0xa8>)
    2f68:	47a8      	blx	r5
    2f6a:	4604      	mov	r4, r0
    2f6c:	4658      	mov	r0, fp
    2f6e:	47a8      	blx	r5
    2f70:	4304      	orrs	r4, r0
    2f72:	b2e4      	uxtb	r4, r4
    2f74:	4650      	mov	r0, sl
    2f76:	47a8      	blx	r5
    2f78:	4304      	orrs	r4, r0
    2f7a:	b2e4      	uxtb	r4, r4
    2f7c:	4648      	mov	r0, r9
    2f7e:	47a8      	blx	r5
    2f80:	4304      	orrs	r4, r0
    2f82:	b2e4      	uxtb	r4, r4
    2f84:	4640      	mov	r0, r8
    2f86:	47a8      	blx	r5
    2f88:	4304      	orrs	r4, r0
    2f8a:	b2e4      	uxtb	r4, r4
    2f8c:	4638      	mov	r0, r7
    2f8e:	47a8      	blx	r5
    2f90:	4304      	orrs	r4, r0
    2f92:	b2e4      	uxtb	r4, r4
    2f94:	4630      	mov	r0, r6
    2f96:	47a8      	blx	r5
    2f98:	4304      	orrs	r4, r0
    2f9a:	b2e4      	uxtb	r4, r4
    2f9c:	9800      	ldr	r0, [sp, #0]
    2f9e:	47a8      	blx	r5
    2fa0:	4304      	orrs	r4, r0
    2fa2:	b2e4      	uxtb	r4, r4
    2fa4:	9801      	ldr	r0, [sp, #4]
    2fa6:	47a8      	blx	r5
    2fa8:	4320      	orrs	r0, r4
};
    2faa:	b2c0      	uxtb	r0, r0
    2fac:	b003      	add	sp, #12
    2fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fb2:	bf00      	nop
    2fb4:	00002ee9 	.word	0x00002ee9
    2fb8:	00002b95 	.word	0x00002b95

00002fbc <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
struct io_descriptor *io)
{
    2fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fc0:	b085      	sub	sp, #20
    2fc2:	4606      	mov	r6, r0
    2fc4:	468b      	mov	fp, r1
    2fc6:	4692      	mov	sl, r2
    2fc8:	9303      	str	r3, [sp, #12]
    2fca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	//bottom row left
	initialize(hall_sensor_1);
    2fcc:	f8df 9118 	ldr.w	r9, [pc, #280]	; 30e8 <SensorArray_Init+0x12c>
    2fd0:	47c8      	blx	r9
	begin(hall_sensor_1,1,0,0,false, io);
    2fd2:	9501      	str	r5, [sp, #4]
    2fd4:	2400      	movs	r4, #0
    2fd6:	9400      	str	r4, [sp, #0]
    2fd8:	4623      	mov	r3, r4
    2fda:	4622      	mov	r2, r4
    2fdc:	2101      	movs	r1, #1
    2fde:	4630      	mov	r0, r6
    2fe0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 30ec <SensorArray_Init+0x130>
    2fe4:	47c0      	blx	r8
	triggerInitialize(hall_sensor_1, io);
    2fe6:	4629      	mov	r1, r5
    2fe8:	4630      	mov	r0, r6
    2fea:	4f3d      	ldr	r7, [pc, #244]	; (30e0 <SensorArray_Init+0x124>)
    2fec:	47b8      	blx	r7
	delay_ms(5);
    2fee:	2005      	movs	r0, #5
    2ff0:	4e3c      	ldr	r6, [pc, #240]	; (30e4 <SensorArray_Init+0x128>)
    2ff2:	47b0      	blx	r6
	
	//bottom row middle
	initialize(hall_sensor_2);
    2ff4:	4658      	mov	r0, fp
    2ff6:	47c8      	blx	r9
	begin(hall_sensor_2,1,0,1,false, io);
    2ff8:	9501      	str	r5, [sp, #4]
    2ffa:	9400      	str	r4, [sp, #0]
    2ffc:	2301      	movs	r3, #1
    2ffe:	4622      	mov	r2, r4
    3000:	4619      	mov	r1, r3
    3002:	4658      	mov	r0, fp
    3004:	47c0      	blx	r8
	triggerInitialize(hall_sensor_2, io);
    3006:	4629      	mov	r1, r5
    3008:	4658      	mov	r0, fp
    300a:	47b8      	blx	r7
	delay_ms(5);
    300c:	2005      	movs	r0, #5
    300e:	47b0      	blx	r6
	
	//bottom row right
	initialize(hall_sensor_3);
    3010:	4650      	mov	r0, sl
    3012:	47c8      	blx	r9
	begin(hall_sensor_3,1,1,0,false, io);
    3014:	9501      	str	r5, [sp, #4]
    3016:	9400      	str	r4, [sp, #0]
    3018:	4623      	mov	r3, r4
    301a:	2201      	movs	r2, #1
    301c:	4611      	mov	r1, r2
    301e:	4650      	mov	r0, sl
    3020:	47c0      	blx	r8
	triggerInitialize(hall_sensor_3, io);
    3022:	4629      	mov	r1, r5
    3024:	4650      	mov	r0, sl
    3026:	47b8      	blx	r7
	delay_ms(5);
    3028:	2005      	movs	r0, #5
    302a:	47b0      	blx	r6
	
	//middle row left
	initialize(hall_sensor_4);
    302c:	f8dd a00c 	ldr.w	sl, [sp, #12]
    3030:	4650      	mov	r0, sl
    3032:	47c8      	blx	r9
	begin(hall_sensor_4,2,0,0,false, io);
    3034:	9501      	str	r5, [sp, #4]
    3036:	9400      	str	r4, [sp, #0]
    3038:	4623      	mov	r3, r4
    303a:	4622      	mov	r2, r4
    303c:	2102      	movs	r1, #2
    303e:	4650      	mov	r0, sl
    3040:	47c0      	blx	r8
	triggerInitialize(hall_sensor_4, io);
    3042:	4629      	mov	r1, r5
    3044:	4650      	mov	r0, sl
    3046:	47b8      	blx	r7
	delay_ms(5);
    3048:	2005      	movs	r0, #5
    304a:	47b0      	blx	r6
	
	//middle row middle
	initialize(hall_sensor_5);
    304c:	980e      	ldr	r0, [sp, #56]	; 0x38
    304e:	47c8      	blx	r9
	begin(hall_sensor_5,2,0,1,false, io);
    3050:	9501      	str	r5, [sp, #4]
    3052:	9400      	str	r4, [sp, #0]
    3054:	2301      	movs	r3, #1
    3056:	4622      	mov	r2, r4
    3058:	2102      	movs	r1, #2
    305a:	980e      	ldr	r0, [sp, #56]	; 0x38
    305c:	47c0      	blx	r8
	triggerInitialize(hall_sensor_5, io);
    305e:	4629      	mov	r1, r5
    3060:	980e      	ldr	r0, [sp, #56]	; 0x38
    3062:	47b8      	blx	r7
	delay_ms(5);
    3064:	2005      	movs	r0, #5
    3066:	47b0      	blx	r6
	
	//middle row right
	initialize(hall_sensor_6);
    3068:	980f      	ldr	r0, [sp, #60]	; 0x3c
    306a:	47c8      	blx	r9
	begin(hall_sensor_6,2,1,0,false, io);
    306c:	9501      	str	r5, [sp, #4]
    306e:	9400      	str	r4, [sp, #0]
    3070:	4623      	mov	r3, r4
    3072:	2201      	movs	r2, #1
    3074:	2102      	movs	r1, #2
    3076:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3078:	47c0      	blx	r8
	triggerInitialize(hall_sensor_6, io);
    307a:	4629      	mov	r1, r5
    307c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    307e:	47b8      	blx	r7
	delay_ms(5);
    3080:	2005      	movs	r0, #5
    3082:	47b0      	blx	r6
	
	//top row left
	initialize(hall_sensor_7);
    3084:	9810      	ldr	r0, [sp, #64]	; 0x40
    3086:	47c8      	blx	r9
	begin(hall_sensor_7,3,0,0,false, io);
    3088:	9501      	str	r5, [sp, #4]
    308a:	9400      	str	r4, [sp, #0]
    308c:	4623      	mov	r3, r4
    308e:	4622      	mov	r2, r4
    3090:	2103      	movs	r1, #3
    3092:	9810      	ldr	r0, [sp, #64]	; 0x40
    3094:	47c0      	blx	r8
	triggerInitialize(hall_sensor_7, io);
    3096:	4629      	mov	r1, r5
    3098:	9810      	ldr	r0, [sp, #64]	; 0x40
    309a:	47b8      	blx	r7
	delay_ms(5);
    309c:	2005      	movs	r0, #5
    309e:	47b0      	blx	r6
	
	//top row middle
	initialize(hall_sensor_8);
    30a0:	9811      	ldr	r0, [sp, #68]	; 0x44
    30a2:	47c8      	blx	r9
	begin(hall_sensor_8,3,0,1,false, io);
    30a4:	9501      	str	r5, [sp, #4]
    30a6:	9400      	str	r4, [sp, #0]
    30a8:	2301      	movs	r3, #1
    30aa:	4622      	mov	r2, r4
    30ac:	2103      	movs	r1, #3
    30ae:	9811      	ldr	r0, [sp, #68]	; 0x44
    30b0:	47c0      	blx	r8
	triggerInitialize(hall_sensor_8, io);
    30b2:	4629      	mov	r1, r5
    30b4:	9811      	ldr	r0, [sp, #68]	; 0x44
    30b6:	47b8      	blx	r7
	delay_ms(5);
    30b8:	2005      	movs	r0, #5
    30ba:	47b0      	blx	r6
	
	//top row right
	initialize(hall_sensor_9);
    30bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    30be:	47c8      	blx	r9
	begin(hall_sensor_9,3,1,0,false, io);
    30c0:	9501      	str	r5, [sp, #4]
    30c2:	9400      	str	r4, [sp, #0]
    30c4:	4623      	mov	r3, r4
    30c6:	2201      	movs	r2, #1
    30c8:	2103      	movs	r1, #3
    30ca:	9812      	ldr	r0, [sp, #72]	; 0x48
    30cc:	47c0      	blx	r8
	triggerInitialize(hall_sensor_9, io);
    30ce:	4629      	mov	r1, r5
    30d0:	9812      	ldr	r0, [sp, #72]	; 0x48
    30d2:	47b8      	blx	r7
	delay_ms(5);
    30d4:	2005      	movs	r0, #5
    30d6:	47b0      	blx	r6
}
    30d8:	b005      	add	sp, #20
    30da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30de:	bf00      	nop
    30e0:	00002ead 	.word	0x00002ead
    30e4:	000009cd 	.word	0x000009cd
    30e8:	00002401 	.word	0x00002401
    30ec:	00002d89 	.word	0x00002d89

000030f0 <update_struct_values>:


void update_struct_values(struct sensorRow_Values *sensor_row, struct MLX90393 *hall_sensor_top, struct MLX90393 *hall_sensor_middle, struct MLX90393 *hall_sensor_bottom){
    30f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30f2:	4604      	mov	r4, r0
		//allocate every data to corresponding struct value
		sensor_row->b_x_top = hall_sensor_top->data.x;
    30f4:	edd1 7a13 	vldr	s15, [r1, #76]	; 0x4c
    30f8:	edc0 7a00 	vstr	s15, [r0]
		sensor_row->b_y_top = hall_sensor_top->data.y;
    30fc:	ed91 7a14 	vldr	s14, [r1, #80]	; 0x50
    3100:	ed80 7a03 	vstr	s14, [r0, #12]
		sensor_row->b_z_top = hall_sensor_top->data.z;
    3104:	6d49      	ldr	r1, [r1, #84]	; 0x54
    3106:	6181      	str	r1, [r0, #24]
		
		sensor_row->b_x_middle = hall_sensor_middle->data.x;
    3108:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    310a:	6041      	str	r1, [r0, #4]
		sensor_row->b_y_middle = hall_sensor_middle->data.y;
    310c:	6d11      	ldr	r1, [r2, #80]	; 0x50
    310e:	6101      	str	r1, [r0, #16]
		sensor_row->b_z_middle = hall_sensor_middle->data.z;
    3110:	6d52      	ldr	r2, [r2, #84]	; 0x54
    3112:	61c2      	str	r2, [r0, #28]
		
		sensor_row->b_x_bottom = hall_sensor_bottom->data.x;
    3114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3116:	6082      	str	r2, [r0, #8]
		sensor_row->b_y_bottom = hall_sensor_bottom->data.y;
    3118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    311a:	6142      	str	r2, [r0, #20]
		sensor_row->b_z_bottom = hall_sensor_bottom->data.z;
    311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    311e:	6203      	str	r3, [r0, #32]
		
		//Combine X and Y Axis Into Br
		sensor_row->b_r_top = (sensor_row->b_x_top*sensor_row->b_x_top) + (sensor_row->b_y_top*sensor_row->b_y_top);
    3120:	ee67 7aa7 	vmul.f32	s15, s15, s15
    3124:	ee27 7a07 	vmul.f32	s14, s14, s14
    3128:	ee77 7a87 	vadd.f32	s15, s15, s14
    312c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
		sensor_row->b_r_top = sqrt(sensor_row->b_r_top);
    3130:	4f16      	ldr	r7, [pc, #88]	; (318c <update_struct_values+0x9c>)
    3132:	ee17 0a90 	vmov	r0, s15
    3136:	47b8      	blx	r7
    3138:	4e15      	ldr	r6, [pc, #84]	; (3190 <update_struct_values+0xa0>)
    313a:	47b0      	blx	r6
    313c:	4d15      	ldr	r5, [pc, #84]	; (3194 <update_struct_values+0xa4>)
    313e:	47a8      	blx	r5
    3140:	6260      	str	r0, [r4, #36]	; 0x24

		sensor_row->b_r_middle = (sensor_row->b_x_middle*sensor_row->b_x_middle) + (sensor_row->b_y_middle*sensor_row->b_y_middle);
    3142:	edd4 7a01 	vldr	s15, [r4, #4]
    3146:	ee67 7aa7 	vmul.f32	s15, s15, s15
    314a:	ed94 7a04 	vldr	s14, [r4, #16]
    314e:	ee27 7a07 	vmul.f32	s14, s14, s14
    3152:	ee77 7a87 	vadd.f32	s15, s15, s14
    3156:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		sensor_row->b_r_middle = sqrt(sensor_row->b_r_middle);
    315a:	ee17 0a90 	vmov	r0, s15
    315e:	47b8      	blx	r7
    3160:	47b0      	blx	r6
    3162:	47a8      	blx	r5
    3164:	62a0      	str	r0, [r4, #40]	; 0x28
		
		sensor_row->b_r_bottom = (sensor_row->b_x_bottom*sensor_row->b_x_bottom) + (sensor_row->b_y_bottom *sensor_row->b_y_bottom );
    3166:	edd4 7a02 	vldr	s15, [r4, #8]
    316a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    316e:	ed94 7a05 	vldr	s14, [r4, #20]
    3172:	ee27 7a07 	vmul.f32	s14, s14, s14
    3176:	ee77 7a87 	vadd.f32	s15, s15, s14
    317a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
    317e:	ee17 0a90 	vmov	r0, s15
    3182:	47b8      	blx	r7
    3184:	47b0      	blx	r6
    3186:	47a8      	blx	r5
    3188:	62e0      	str	r0, [r4, #44]	; 0x2c
    318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    318c:	00005e81 	.word	0x00005e81
    3190:	00005981 	.word	0x00005981
    3194:	00006489 	.word	0x00006489

00003198 <mag_to_force>:
		sensor_row->b_r_bottom = sqrt(sensor_row->b_r_bottom);
		*/
}


void mag_to_force(uint8_t row_select, struct sensorRow_Values *sensor_row){
    3198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    319c:	ed2d 8b06 	vpush	{d8-d10}
    31a0:	b089      	sub	sp, #36	; 0x24
    31a2:	468a      	mov	sl, r1
	
	switch(row_select){
    31a4:	2802      	cmp	r0, #2
    31a6:	f000 862d 	beq.w	3e04 <mag_to_force+0xc6c>
    31aa:	2803      	cmp	r0, #3
    31ac:	f001 844e 	beq.w	4a4c <mag_to_force+0x18b4>
    31b0:	2801      	cmp	r0, #1
    31b2:	d004      	beq.n	31be <mag_to_force+0x26>
	
	sensor_row->force_z_bottom = 35.2728 + (-0.0130*sensor_row->b_r_top) + (0.0084*hall_sensor_bottom->data.z);
	sensor_row->force_r_bottom = 9.9403 + (-0.0075*sensor_row->b_r_top) + (0.0013*hall_sensor_bottom->data.z);
	*/
	}
    31b4:	b009      	add	sp, #36	; 0x24
    31b6:	ecbd 8b06 	vpop	{d8-d10}
    31ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    31be:	edd1 8a00 	vldr	s17, [r1]
    31c2:	4dcb      	ldr	r5, [pc, #812]	; (34f0 <mag_to_force+0x358>)
    31c4:	ee18 0a90 	vmov	r0, s17
    31c8:	47a8      	blx	r5
    31ca:	4cca      	ldr	r4, [pc, #808]	; (34f4 <mag_to_force+0x35c>)
    31cc:	a39c      	add	r3, pc, #624	; (adr r3, 3440 <mag_to_force+0x2a8>)
    31ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    31d2:	47a0      	blx	r4
    31d4:	4ec8      	ldr	r6, [pc, #800]	; (34f8 <mag_to_force+0x360>)
    31d6:	4602      	mov	r2, r0
    31d8:	460b      	mov	r3, r1
    31da:	a19b      	add	r1, pc, #620	; (adr r1, 3448 <mag_to_force+0x2b0>)
    31dc:	e9d1 0100 	ldrd	r0, r1, [r1]
    31e0:	47b0      	blx	r6
    31e2:	4680      	mov	r8, r0
    31e4:	4689      	mov	r9, r1
    31e6:	ed9a 8a06 	vldr	s16, [sl, #24]
    31ea:	ee18 0a10 	vmov	r0, s16
    31ee:	47a8      	blx	r5
    31f0:	e9cd 0100 	strd	r0, r1, [sp]
    31f4:	a396      	add	r3, pc, #600	; (adr r3, 3450 <mag_to_force+0x2b8>)
    31f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31fa:	47a0      	blx	r4
    31fc:	4fbf      	ldr	r7, [pc, #764]	; (34fc <mag_to_force+0x364>)
    31fe:	4602      	mov	r2, r0
    3200:	460b      	mov	r3, r1
    3202:	4640      	mov	r0, r8
    3204:	4649      	mov	r1, r9
    3206:	47b8      	blx	r7
    3208:	4680      	mov	r8, r0
    320a:	4689      	mov	r9, r1
    320c:	ee28 9aa8 	vmul.f32	s18, s17, s17
    3210:	ee19 0a10 	vmov	r0, s18
    3214:	47a8      	blx	r5
    3216:	a390      	add	r3, pc, #576	; (adr r3, 3458 <mag_to_force+0x2c0>)
    3218:	e9d3 2300 	ldrd	r2, r3, [r3]
    321c:	47a0      	blx	r4
    321e:	4602      	mov	r2, r0
    3220:	460b      	mov	r3, r1
    3222:	4640      	mov	r0, r8
    3224:	4649      	mov	r1, r9
    3226:	47b8      	blx	r7
    3228:	4680      	mov	r8, r0
    322a:	4689      	mov	r9, r1
    322c:	ee68 7a88 	vmul.f32	s15, s17, s16
    3230:	ee17 0a90 	vmov	r0, s15
    3234:	47a8      	blx	r5
    3236:	a38a      	add	r3, pc, #552	; (adr r3, 3460 <mag_to_force+0x2c8>)
    3238:	e9d3 2300 	ldrd	r2, r3, [r3]
    323c:	47a0      	blx	r4
    323e:	4602      	mov	r2, r0
    3240:	460b      	mov	r3, r1
    3242:	4640      	mov	r0, r8
    3244:	4649      	mov	r1, r9
    3246:	47b0      	blx	r6
    3248:	4680      	mov	r8, r0
    324a:	4689      	mov	r9, r1
    324c:	ee28 aa08 	vmul.f32	s20, s16, s16
    3250:	ee1a 0a10 	vmov	r0, s20
    3254:	47a8      	blx	r5
    3256:	e9cd 0102 	strd	r0, r1, [sp, #8]
    325a:	a383      	add	r3, pc, #524	; (adr r3, 3468 <mag_to_force+0x2d0>)
    325c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3260:	47a0      	blx	r4
    3262:	4602      	mov	r2, r0
    3264:	460b      	mov	r3, r1
    3266:	4640      	mov	r0, r8
    3268:	4649      	mov	r1, r9
    326a:	47b8      	blx	r7
    326c:	4680      	mov	r8, r0
    326e:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3270:	ee68 7a09 	vmul.f32	s15, s16, s18
    3274:	ee17 0a90 	vmov	r0, s15
    3278:	47a8      	blx	r5
    327a:	a37d      	add	r3, pc, #500	; (adr r3, 3470 <mag_to_force+0x2d8>)
    327c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3280:	47a0      	blx	r4
    3282:	4602      	mov	r2, r0
    3284:	460b      	mov	r3, r1
    3286:	4640      	mov	r0, r8
    3288:	4649      	mov	r1, r9
    328a:	47b8      	blx	r7
    328c:	4680      	mov	r8, r0
    328e:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3290:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3294:	ee17 0a90 	vmov	r0, s15
    3298:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    329a:	a377      	add	r3, pc, #476	; (adr r3, 3478 <mag_to_force+0x2e0>)
    329c:	e9d3 2300 	ldrd	r2, r3, [r3]
    32a0:	47a0      	blx	r4
    32a2:	4602      	mov	r2, r0
    32a4:	460b      	mov	r3, r1
    32a6:	4640      	mov	r0, r8
    32a8:	4649      	mov	r1, r9
    32aa:	47b0      	blx	r6
    32ac:	4680      	mov	r8, r0
    32ae:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    32b0:	ee68 7a0a 	vmul.f32	s15, s16, s20
    32b4:	ee17 0a90 	vmov	r0, s15
    32b8:	47a8      	blx	r5
    32ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
    32be:	a370      	add	r3, pc, #448	; (adr r3, 3480 <mag_to_force+0x2e8>)
    32c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c4:	47a0      	blx	r4
    32c6:	4602      	mov	r2, r0
    32c8:	460b      	mov	r3, r1
    32ca:	4640      	mov	r0, r8
    32cc:	4649      	mov	r1, r9
    32ce:	47b8      	blx	r7
    32d0:	f8df b22c 	ldr.w	fp, [pc, #556]	; 3500 <mag_to_force+0x368>
    32d4:	47d8      	blx	fp
    32d6:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32da:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    32de:	ed9a 9a03 	vldr	s18, [sl, #12]
    32e2:	ee19 0a10 	vmov	r0, s18
    32e6:	47a8      	blx	r5
    32e8:	a367      	add	r3, pc, #412	; (adr r3, 3488 <mag_to_force+0x2f0>)
    32ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    32ee:	47a0      	blx	r4
    32f0:	4602      	mov	r2, r0
    32f2:	460b      	mov	r3, r1
    32f4:	a166      	add	r1, pc, #408	; (adr r1, 3490 <mag_to_force+0x2f8>)
    32f6:	e9d1 0100 	ldrd	r0, r1, [r1]
    32fa:	47b0      	blx	r6
    32fc:	4680      	mov	r8, r0
    32fe:	4689      	mov	r9, r1
    3300:	a365      	add	r3, pc, #404	; (adr r3, 3498 <mag_to_force+0x300>)
    3302:	e9d3 2300 	ldrd	r2, r3, [r3]
    3306:	e9dd 0100 	ldrd	r0, r1, [sp]
    330a:	47a0      	blx	r4
    330c:	4602      	mov	r2, r0
    330e:	460b      	mov	r3, r1
    3310:	4640      	mov	r0, r8
    3312:	4649      	mov	r1, r9
    3314:	47b8      	blx	r7
    3316:	4680      	mov	r8, r0
    3318:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    331a:	ee69 9a09 	vmul.f32	s19, s18, s18
    331e:	ee19 0a90 	vmov	r0, s19
    3322:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3324:	a35e      	add	r3, pc, #376	; (adr r3, 34a0 <mag_to_force+0x308>)
    3326:	e9d3 2300 	ldrd	r2, r3, [r3]
    332a:	47a0      	blx	r4
    332c:	4602      	mov	r2, r0
    332e:	460b      	mov	r3, r1
    3330:	4640      	mov	r0, r8
    3332:	4649      	mov	r1, r9
    3334:	47b8      	blx	r7
    3336:	4680      	mov	r8, r0
    3338:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    333a:	ee68 7a09 	vmul.f32	s15, s16, s18
    333e:	ee17 0a90 	vmov	r0, s15
    3342:	47a8      	blx	r5
    3344:	a358      	add	r3, pc, #352	; (adr r3, 34a8 <mag_to_force+0x310>)
    3346:	e9d3 2300 	ldrd	r2, r3, [r3]
    334a:	47a0      	blx	r4
    334c:	4602      	mov	r2, r0
    334e:	460b      	mov	r3, r1
    3350:	4640      	mov	r0, r8
    3352:	4649      	mov	r1, r9
    3354:	47b0      	blx	r6
    3356:	4680      	mov	r8, r0
    3358:	4689      	mov	r9, r1
    335a:	a355      	add	r3, pc, #340	; (adr r3, 34b0 <mag_to_force+0x318>)
    335c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3364:	47a0      	blx	r4
    3366:	4602      	mov	r2, r0
    3368:	460b      	mov	r3, r1
    336a:	4640      	mov	r0, r8
    336c:	4649      	mov	r1, r9
    336e:	47b8      	blx	r7
    3370:	4680      	mov	r8, r0
    3372:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3374:	ee68 7a29 	vmul.f32	s15, s16, s19
    3378:	ee17 0a90 	vmov	r0, s15
    337c:	47a8      	blx	r5
    337e:	a34e      	add	r3, pc, #312	; (adr r3, 34b8 <mag_to_force+0x320>)
    3380:	e9d3 2300 	ldrd	r2, r3, [r3]
    3384:	47a0      	blx	r4
    3386:	4602      	mov	r2, r0
    3388:	460b      	mov	r3, r1
    338a:	4640      	mov	r0, r8
    338c:	4649      	mov	r1, r9
    338e:	47b8      	blx	r7
    3390:	4680      	mov	r8, r0
    3392:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3394:	ee6a 7a09 	vmul.f32	s15, s20, s18
    3398:	ee17 0a90 	vmov	r0, s15
    339c:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    339e:	a348      	add	r3, pc, #288	; (adr r3, 34c0 <mag_to_force+0x328>)
    33a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    33a4:	47a0      	blx	r4
    33a6:	4602      	mov	r2, r0
    33a8:	460b      	mov	r3, r1
    33aa:	4640      	mov	r0, r8
    33ac:	4649      	mov	r1, r9
    33ae:	47b0      	blx	r6
    33b0:	4680      	mov	r8, r0
    33b2:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    33b4:	a344      	add	r3, pc, #272	; (adr r3, 34c8 <mag_to_force+0x330>)
    33b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    33ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    33be:	47a0      	blx	r4
    33c0:	4602      	mov	r2, r0
    33c2:	460b      	mov	r3, r1
    33c4:	4640      	mov	r0, r8
    33c6:	4649      	mov	r1, r9
    33c8:	47b8      	blx	r7
    33ca:	47d8      	blx	fp
    33cc:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    33d0:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    33d4:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    33d8:	ee19 0a90 	vmov	r0, s19
    33dc:	47a8      	blx	r5
    33de:	a33c      	add	r3, pc, #240	; (adr r3, 34d0 <mag_to_force+0x338>)
    33e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    33e4:	47a0      	blx	r4
    33e6:	4602      	mov	r2, r0
    33e8:	460b      	mov	r3, r1
    33ea:	a13b      	add	r1, pc, #236	; (adr r1, 34d8 <mag_to_force+0x340>)
    33ec:	e9d1 0100 	ldrd	r0, r1, [r1]
    33f0:	47b0      	blx	r6
    33f2:	4680      	mov	r8, r0
    33f4:	4689      	mov	r9, r1
    33f6:	a33a      	add	r3, pc, #232	; (adr r3, 34e0 <mag_to_force+0x348>)
    33f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    33fc:	e9dd 0100 	ldrd	r0, r1, [sp]
    3400:	47a0      	blx	r4
    3402:	4602      	mov	r2, r0
    3404:	460b      	mov	r3, r1
    3406:	4640      	mov	r0, r8
    3408:	4649      	mov	r1, r9
    340a:	47b8      	blx	r7
    340c:	4680      	mov	r8, r0
    340e:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3410:	ee69 aaa9 	vmul.f32	s21, s19, s19
    3414:	ee1a 0a90 	vmov	r0, s21
    3418:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    341a:	a333      	add	r3, pc, #204	; (adr r3, 34e8 <mag_to_force+0x350>)
    341c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3420:	47a0      	blx	r4
    3422:	4602      	mov	r2, r0
    3424:	460b      	mov	r3, r1
    3426:	4640      	mov	r0, r8
    3428:	4649      	mov	r1, r9
    342a:	47b8      	blx	r7
    342c:	4680      	mov	r8, r0
    342e:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3430:	ee68 7a29 	vmul.f32	s15, s16, s19
    3434:	ee17 0a90 	vmov	r0, s15
    3438:	47a8      	blx	r5
    343a:	e063      	b.n	3504 <mag_to_force+0x36c>
    343c:	f3af 8000 	nop.w
    3440:	8f041462 	.word	0x8f041462
    3444:	3f6aef6f 	.word	0x3f6aef6f
    3448:	c28f5c29 	.word	0xc28f5c29
    344c:	402aa8f5 	.word	0x402aa8f5
    3450:	229e9079 	.word	0x229e9079
    3454:	3f6b8887 	.word	0x3f6b8887
    3458:	d646eb6e 	.word	0xd646eb6e
    345c:	3ea84b1c 	.word	0x3ea84b1c
    3460:	521dd696 	.word	0x521dd696
    3464:	3ea4ce9e 	.word	0x3ea4ce9e
    3468:	8b46aa0f 	.word	0x8b46aa0f
    346c:	3e91cf89 	.word	0x3e91cf89
    3470:	05b88164 	.word	0x05b88164
    3474:	3dcadc6f 	.word	0x3dcadc6f
    3478:	c6957207 	.word	0xc6957207
    347c:	3dba9bb1 	.word	0x3dba9bb1
    3480:	54aa19eb 	.word	0x54aa19eb
    3484:	3d9d014f 	.word	0x3d9d014f
    3488:	328a96c7 	.word	0x328a96c7
    348c:	3f3faac0 	.word	0x3f3faac0
    3490:	4fdf3b64 	.word	0x4fdf3b64
    3494:	4006978d 	.word	0x4006978d
    3498:	4662bae0 	.word	0x4662bae0
    349c:	3f507b78 	.word	0x3f507b78
    34a0:	1dbb855a 	.word	0x1dbb855a
    34a4:	3ea17b5b 	.word	0x3ea17b5b
    34a8:	f2d94d7a 	.word	0xf2d94d7a
    34ac:	3e9ac354 	.word	0x3e9ac354
    34b0:	8ed8f651 	.word	0x8ed8f651
    34b4:	3e821e90 	.word	0x3e821e90
    34b8:	37757ffe 	.word	0x37757ffe
    34bc:	3dc19631 	.word	0x3dc19631
    34c0:	8cce8eea 	.word	0x8cce8eea
    34c4:	3db7f827 	.word	0x3db7f827
    34c8:	7c871c2d 	.word	0x7c871c2d
    34cc:	3d953cf8 	.word	0x3d953cf8
    34d0:	94ccab3f 	.word	0x94ccab3f
    34d4:	3f72dfd6 	.word	0x3f72dfd6
    34d8:	eb851eb8 	.word	0xeb851eb8
    34dc:	40387851 	.word	0x40387851
    34e0:	9f51697f 	.word	0x9f51697f
    34e4:	3f7b0ee4 	.word	0x3f7b0ee4
    34e8:	fec17451 	.word	0xfec17451
    34ec:	3e9ad482 	.word	0x3e9ad482
    34f0:	00005e81 	.word	0x00005e81
    34f4:	00005f29 	.word	0x00005f29
    34f8:	00005bc1 	.word	0x00005bc1
    34fc:	00005bc5 	.word	0x00005bc5
    3500:	00006489 	.word	0x00006489
    3504:	a3f5      	add	r3, pc, #980	; (adr r3, 38dc <mag_to_force+0x744>)
    3506:	e9d3 2300 	ldrd	r2, r3, [r3]
    350a:	47a0      	blx	r4
    350c:	4602      	mov	r2, r0
    350e:	460b      	mov	r3, r1
    3510:	4640      	mov	r0, r8
    3512:	4649      	mov	r1, r9
    3514:	47b0      	blx	r6
    3516:	4680      	mov	r8, r0
    3518:	4689      	mov	r9, r1
    351a:	a3f2      	add	r3, pc, #968	; (adr r3, 38e4 <mag_to_force+0x74c>)
    351c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3524:	47a0      	blx	r4
    3526:	4602      	mov	r2, r0
    3528:	460b      	mov	r3, r1
    352a:	4640      	mov	r0, r8
    352c:	4649      	mov	r1, r9
    352e:	47b8      	blx	r7
    3530:	4680      	mov	r8, r0
    3532:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3534:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3538:	ee17 0a90 	vmov	r0, s15
    353c:	47a8      	blx	r5
    353e:	a3eb      	add	r3, pc, #940	; (adr r3, 38ec <mag_to_force+0x754>)
    3540:	e9d3 2300 	ldrd	r2, r3, [r3]
    3544:	47a0      	blx	r4
    3546:	4602      	mov	r2, r0
    3548:	460b      	mov	r3, r1
    354a:	4640      	mov	r0, r8
    354c:	4649      	mov	r1, r9
    354e:	47b8      	blx	r7
    3550:	4680      	mov	r8, r0
    3552:	4689      	mov	r9, r1
	
    3554:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3558:	ee17 0a90 	vmov	r0, s15
    355c:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    355e:	a3e5      	add	r3, pc, #916	; (adr r3, 38f4 <mag_to_force+0x75c>)
    3560:	e9d3 2300 	ldrd	r2, r3, [r3]
    3564:	47a0      	blx	r4
    3566:	4602      	mov	r2, r0
    3568:	460b      	mov	r3, r1
    356a:	4640      	mov	r0, r8
    356c:	4649      	mov	r1, r9
    356e:	47b0      	blx	r6
    3570:	4680      	mov	r8, r0
    3572:	4689      	mov	r9, r1
	
    3574:	a3e1      	add	r3, pc, #900	; (adr r3, 38fc <mag_to_force+0x764>)
    3576:	e9d3 2300 	ldrd	r2, r3, [r3]
    357a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    357e:	47a0      	blx	r4
    3580:	4602      	mov	r2, r0
    3582:	460b      	mov	r3, r1
    3584:	4640      	mov	r0, r8
    3586:	4649      	mov	r1, r9
    3588:	47b8      	blx	r7
    358a:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    358c:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3590:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3594:	ee29 9a09 	vmul.f32	s18, s18, s18
    3598:	ee78 8a89 	vadd.f32	s17, s17, s18
    359c:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    35a0:	ee18 0a90 	vmov	r0, s17
    35a4:	47a8      	blx	r5
    35a6:	4bcc      	ldr	r3, [pc, #816]	; (38d8 <mag_to_force+0x740>)
    35a8:	4798      	blx	r3
    35aa:	47d8      	blx	fp
    35ac:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    35b0:	edda 8a01 	vldr	s17, [sl, #4]
    35b4:	ee18 0a90 	vmov	r0, s17
    35b8:	47a8      	blx	r5
    35ba:	a39b      	add	r3, pc, #620	; (adr r3, 3828 <mag_to_force+0x690>)
    35bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    35c0:	47a0      	blx	r4
    35c2:	4602      	mov	r2, r0
    35c4:	460b      	mov	r3, r1
    35c6:	a19a      	add	r1, pc, #616	; (adr r1, 3830 <mag_to_force+0x698>)
    35c8:	e9d1 0100 	ldrd	r0, r1, [r1]
    35cc:	47b0      	blx	r6
    35ce:	4680      	mov	r8, r0
    35d0:	4689      	mov	r9, r1
    35d2:	ed9a 8a07 	vldr	s16, [sl, #28]
    35d6:	ee18 0a10 	vmov	r0, s16
    35da:	47a8      	blx	r5
    35dc:	e9cd 0100 	strd	r0, r1, [sp]
    35e0:	a395      	add	r3, pc, #596	; (adr r3, 3838 <mag_to_force+0x6a0>)
    35e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    35e6:	47a0      	blx	r4
    35e8:	4602      	mov	r2, r0
    35ea:	460b      	mov	r3, r1
    35ec:	4640      	mov	r0, r8
    35ee:	4649      	mov	r1, r9
    35f0:	47b8      	blx	r7
    35f2:	4680      	mov	r8, r0
    35f4:	4689      	mov	r9, r1
    35f6:	ee28 9aa8 	vmul.f32	s18, s17, s17
    35fa:	ee19 0a10 	vmov	r0, s18
    35fe:	47a8      	blx	r5
    3600:	a38f      	add	r3, pc, #572	; (adr r3, 3840 <mag_to_force+0x6a8>)
    3602:	e9d3 2300 	ldrd	r2, r3, [r3]
    3606:	47a0      	blx	r4
    3608:	4602      	mov	r2, r0
    360a:	460b      	mov	r3, r1
    360c:	4640      	mov	r0, r8
    360e:	4649      	mov	r1, r9
    3610:	47b8      	blx	r7
    3612:	4680      	mov	r8, r0
    3614:	4689      	mov	r9, r1
    3616:	ee68 7a88 	vmul.f32	s15, s17, s16
    361a:	ee17 0a90 	vmov	r0, s15
    361e:	47a8      	blx	r5
    3620:	a389      	add	r3, pc, #548	; (adr r3, 3848 <mag_to_force+0x6b0>)
    3622:	e9d3 2300 	ldrd	r2, r3, [r3]
    3626:	47a0      	blx	r4
    3628:	4602      	mov	r2, r0
    362a:	460b      	mov	r3, r1
    362c:	4640      	mov	r0, r8
    362e:	4649      	mov	r1, r9
    3630:	47b0      	blx	r6
    3632:	4680      	mov	r8, r0
    3634:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3636:	ee28 aa08 	vmul.f32	s20, s16, s16
    363a:	ee1a 0a10 	vmov	r0, s20
    363e:	47a8      	blx	r5
    3640:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3644:	a382      	add	r3, pc, #520	; (adr r3, 3850 <mag_to_force+0x6b8>)
    3646:	e9d3 2300 	ldrd	r2, r3, [r3]
    364a:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    364c:	4602      	mov	r2, r0
    364e:	460b      	mov	r3, r1
    3650:	4640      	mov	r0, r8
    3652:	4649      	mov	r1, r9
    3654:	47b8      	blx	r7
    3656:	4680      	mov	r8, r0
    3658:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    365a:	ee68 7a09 	vmul.f32	s15, s16, s18
    365e:	ee17 0a90 	vmov	r0, s15
    3662:	47a8      	blx	r5
    3664:	a37c      	add	r3, pc, #496	; (adr r3, 3858 <mag_to_force+0x6c0>)
    3666:	e9d3 2300 	ldrd	r2, r3, [r3]
    366a:	47a0      	blx	r4
    366c:	4602      	mov	r2, r0
    366e:	460b      	mov	r3, r1
    3670:	4640      	mov	r0, r8
    3672:	4649      	mov	r1, r9
    3674:	47b8      	blx	r7
    3676:	4680      	mov	r8, r0
    3678:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    367a:	ee68 7a8a 	vmul.f32	s15, s17, s20
    367e:	ee17 0a90 	vmov	r0, s15
    3682:	47a8      	blx	r5
    3684:	a376      	add	r3, pc, #472	; (adr r3, 3860 <mag_to_force+0x6c8>)
    3686:	e9d3 2300 	ldrd	r2, r3, [r3]
    368a:	47a0      	blx	r4
    368c:	4602      	mov	r2, r0
    368e:	460b      	mov	r3, r1
    3690:	4640      	mov	r0, r8
    3692:	4649      	mov	r1, r9
    3694:	47b0      	blx	r6
    3696:	4680      	mov	r8, r0
    3698:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    369a:	ee68 7a0a 	vmul.f32	s15, s16, s20
    369e:	ee17 0a90 	vmov	r0, s15
    36a2:	47a8      	blx	r5
    36a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    36a8:	a36f      	add	r3, pc, #444	; (adr r3, 3868 <mag_to_force+0x6d0>)
    36aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    36ae:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    36b0:	4602      	mov	r2, r0
    36b2:	460b      	mov	r3, r1
    36b4:	4640      	mov	r0, r8
    36b6:	4649      	mov	r1, r9
    36b8:	47b8      	blx	r7
    36ba:	47d8      	blx	fp
    36bc:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36c0:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    36c4:	ed9a 9a04 	vldr	s18, [sl, #16]
    36c8:	ee19 0a10 	vmov	r0, s18
    36cc:	47a8      	blx	r5
    36ce:	a368      	add	r3, pc, #416	; (adr r3, 3870 <mag_to_force+0x6d8>)
    36d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36d4:	47a0      	blx	r4
    36d6:	4602      	mov	r2, r0
    36d8:	460b      	mov	r3, r1
    36da:	a167      	add	r1, pc, #412	; (adr r1, 3878 <mag_to_force+0x6e0>)
    36dc:	e9d1 0100 	ldrd	r0, r1, [r1]
    36e0:	47b0      	blx	r6
    36e2:	4680      	mov	r8, r0
    36e4:	4689      	mov	r9, r1
    36e6:	a366      	add	r3, pc, #408	; (adr r3, 3880 <mag_to_force+0x6e8>)
    36e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    36ec:	e9dd 0100 	ldrd	r0, r1, [sp]
    36f0:	47a0      	blx	r4
    36f2:	4602      	mov	r2, r0
    36f4:	460b      	mov	r3, r1
    36f6:	4640      	mov	r0, r8
    36f8:	4649      	mov	r1, r9
    36fa:	47b8      	blx	r7
    36fc:	4680      	mov	r8, r0
    36fe:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3700:	ee69 9a09 	vmul.f32	s19, s18, s18
    3704:	ee19 0a90 	vmov	r0, s19
    3708:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    370a:	a35f      	add	r3, pc, #380	; (adr r3, 3888 <mag_to_force+0x6f0>)
    370c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3710:	47a0      	blx	r4
    3712:	4602      	mov	r2, r0
    3714:	460b      	mov	r3, r1
    3716:	4640      	mov	r0, r8
    3718:	4649      	mov	r1, r9
    371a:	47b0      	blx	r6
    371c:	4680      	mov	r8, r0
    371e:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3720:	ee68 7a09 	vmul.f32	s15, s16, s18
    3724:	ee17 0a90 	vmov	r0, s15
    3728:	47a8      	blx	r5
    372a:	a359      	add	r3, pc, #356	; (adr r3, 3890 <mag_to_force+0x6f8>)
    372c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3730:	47a0      	blx	r4
    3732:	4602      	mov	r2, r0
    3734:	460b      	mov	r3, r1
    3736:	4640      	mov	r0, r8
    3738:	4649      	mov	r1, r9
    373a:	47b0      	blx	r6
    373c:	4680      	mov	r8, r0
    373e:	4689      	mov	r9, r1
    3740:	a355      	add	r3, pc, #340	; (adr r3, 3898 <mag_to_force+0x700>)
    3742:	e9d3 2300 	ldrd	r2, r3, [r3]
    3746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    374a:	47a0      	blx	r4
    374c:	4602      	mov	r2, r0
    374e:	460b      	mov	r3, r1
    3750:	4640      	mov	r0, r8
    3752:	4649      	mov	r1, r9
    3754:	47b8      	blx	r7
    3756:	4680      	mov	r8, r0
    3758:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    375a:	ee68 7a29 	vmul.f32	s15, s16, s19
    375e:	ee17 0a90 	vmov	r0, s15
    3762:	47a8      	blx	r5
    3764:	a34e      	add	r3, pc, #312	; (adr r3, 38a0 <mag_to_force+0x708>)
    3766:	e9d3 2300 	ldrd	r2, r3, [r3]
    376a:	47a0      	blx	r4
    376c:	4602      	mov	r2, r0
    376e:	460b      	mov	r3, r1
    3770:	4640      	mov	r0, r8
    3772:	4649      	mov	r1, r9
    3774:	47b0      	blx	r6
    3776:	4680      	mov	r8, r0
    3778:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    377a:	ee6a 7a09 	vmul.f32	s15, s20, s18
    377e:	ee17 0a90 	vmov	r0, s15
    3782:	47a8      	blx	r5
    3784:	a348      	add	r3, pc, #288	; (adr r3, 38a8 <mag_to_force+0x710>)
    3786:	e9d3 2300 	ldrd	r2, r3, [r3]
    378a:	47a0      	blx	r4
    378c:	4602      	mov	r2, r0
    378e:	460b      	mov	r3, r1
    3790:	4640      	mov	r0, r8
    3792:	4649      	mov	r1, r9
    3794:	47b0      	blx	r6
    3796:	4680      	mov	r8, r0
    3798:	4689      	mov	r9, r1
	
    379a:	a345      	add	r3, pc, #276	; (adr r3, 38b0 <mag_to_force+0x718>)
    379c:	e9d3 2300 	ldrd	r2, r3, [r3]
    37a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    37a4:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    37a6:	4602      	mov	r2, r0
    37a8:	460b      	mov	r3, r1
    37aa:	4640      	mov	r0, r8
    37ac:	4649      	mov	r1, r9
    37ae:	47b8      	blx	r7
    37b0:	47d8      	blx	fp
    37b2:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    37b6:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    37ba:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    37be:	ee19 0a90 	vmov	r0, s19
    37c2:	47a8      	blx	r5
    37c4:	a33c      	add	r3, pc, #240	; (adr r3, 38b8 <mag_to_force+0x720>)
    37c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    37ca:	47a0      	blx	r4
    37cc:	4602      	mov	r2, r0
    37ce:	460b      	mov	r3, r1
    37d0:	a13b      	add	r1, pc, #236	; (adr r1, 38c0 <mag_to_force+0x728>)
    37d2:	e9d1 0100 	ldrd	r0, r1, [r1]
    37d6:	47b0      	blx	r6
    37d8:	4680      	mov	r8, r0
    37da:	4689      	mov	r9, r1
    37dc:	a33a      	add	r3, pc, #232	; (adr r3, 38c8 <mag_to_force+0x730>)
    37de:	e9d3 2300 	ldrd	r2, r3, [r3]
    37e2:	e9dd 0100 	ldrd	r0, r1, [sp]
    37e6:	47a0      	blx	r4
    37e8:	4602      	mov	r2, r0
    37ea:	460b      	mov	r3, r1
    37ec:	4640      	mov	r0, r8
    37ee:	4649      	mov	r1, r9
    37f0:	47b8      	blx	r7
    37f2:	4680      	mov	r8, r0
    37f4:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    37f6:	ee69 aaa9 	vmul.f32	s21, s19, s19
    37fa:	ee1a 0a90 	vmov	r0, s21
    37fe:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    3800:	a333      	add	r3, pc, #204	; (adr r3, 38d0 <mag_to_force+0x738>)
    3802:	e9d3 2300 	ldrd	r2, r3, [r3]
    3806:	47a0      	blx	r4
    3808:	4602      	mov	r2, r0
    380a:	460b      	mov	r3, r1
    380c:	4640      	mov	r0, r8
    380e:	4649      	mov	r1, r9
    3810:	47b8      	blx	r7
    3812:	4680      	mov	r8, r0
    3814:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3816:	ee68 7a29 	vmul.f32	s15, s16, s19
    381a:	ee17 0a90 	vmov	r0, s15
    381e:	47a8      	blx	r5
    3820:	e070      	b.n	3904 <mag_to_force+0x76c>
    3822:	bf00      	nop
    3824:	f3af 8000 	nop.w
    3828:	412c1a3a 	.word	0x412c1a3a
    382c:	3f3286eb 	.word	0x3f3286eb
    3830:	bc6a7efa 	.word	0xbc6a7efa
    3834:	3ff69374 	.word	0x3ff69374
    3838:	92beb405 	.word	0x92beb405
    383c:	3f36e5f5 	.word	0x3f36e5f5
    3840:	a908d438 	.word	0xa908d438
    3844:	3e864e96 	.word	0x3e864e96
    3848:	17c30410 	.word	0x17c30410
    384c:	3e8a1af8 	.word	0x3e8a1af8
    3850:	3d66d634 	.word	0x3d66d634
    3854:	3e632932 	.word	0x3e632932
    3858:	1b4047b2 	.word	0x1b4047b2
    385c:	3da8a10a 	.word	0x3da8a10a
    3860:	6fcf44ac 	.word	0x6fcf44ac
    3864:	3da4129b 	.word	0x3da4129b
    3868:	29e54c52 	.word	0x29e54c52
    386c:	3d73af87 	.word	0x3d73af87
    3870:	80f98fa3 	.word	0x80f98fa3
    3874:	3f726740 	.word	0x3f726740
    3878:	ed916873 	.word	0xed916873
    387c:	401f3f7c 	.word	0x401f3f7c
    3880:	3dfb0d52 	.word	0x3dfb0d52
    3884:	3f654eb1 	.word	0x3f654eb1
    3888:	a7d49e3c 	.word	0xa7d49e3c
    388c:	3e7ceff5 	.word	0x3e7ceff5
    3890:	4fba36fa 	.word	0x4fba36fa
    3894:	3ea8b079 	.word	0x3ea8b079
    3898:	d77b216a 	.word	0xd77b216a
    389c:	3e91a9bd 	.word	0x3e91a9bd
    38a0:	9612a3e2 	.word	0x9612a3e2
    38a4:	3daa2579 	.word	0x3daa2579
    38a8:	82163668 	.word	0x82163668
    38ac:	3dbcbdc1 	.word	0x3dbcbdc1
    38b0:	9d1f8878 	.word	0x9d1f8878
    38b4:	3da13b46 	.word	0x3da13b46
    38b8:	dad31fcd 	.word	0xdad31fcd
    38bc:	3f77b634 	.word	0x3f77b634
    38c0:	1eb851ec 	.word	0x1eb851ec
    38c4:	402c6b85 	.word	0x402c6b85
    38c8:	bdcad14a 	.word	0xbdcad14a
    38cc:	3f70acc0 	.word	0x3f70acc0
    38d0:	60693e8b 	.word	0x60693e8b
    38d4:	3ea1b6a0 	.word	0x3ea1b6a0
    38d8:	00005981 	.word	0x00005981
    38dc:	f40c67fe 	.word	0xf40c67fe
    38e0:	3ea64c02 	.word	0x3ea64c02
    38e4:	02588cee 	.word	0x02588cee
    38e8:	3ea1c2a7 	.word	0x3ea1c2a7
    38ec:	884399b8 	.word	0x884399b8
    38f0:	3d9e314d 	.word	0x3d9e314d
    38f4:	3cc5c3bb 	.word	0x3cc5c3bb
    38f8:	3dbb0978 	.word	0x3dbb0978
    38fc:	fe5cd623 	.word	0xfe5cd623
    3900:	3da74f44 	.word	0x3da74f44
    3904:	a3f6      	add	r3, pc, #984	; (adr r3, 3ce0 <mag_to_force+0xb48>)
    3906:	e9d3 2300 	ldrd	r2, r3, [r3]
    390a:	47a0      	blx	r4
    390c:	4602      	mov	r2, r0
    390e:	460b      	mov	r3, r1
    3910:	4640      	mov	r0, r8
    3912:	4649      	mov	r1, r9
    3914:	47b0      	blx	r6
    3916:	4680      	mov	r8, r0
    3918:	4689      	mov	r9, r1
    391a:	a3f3      	add	r3, pc, #972	; (adr r3, 3ce8 <mag_to_force+0xb50>)
    391c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3924:	47a0      	blx	r4
    3926:	4602      	mov	r2, r0
    3928:	460b      	mov	r3, r1
    392a:	4640      	mov	r0, r8
    392c:	4649      	mov	r1, r9
    392e:	47b8      	blx	r7
    3930:	4680      	mov	r8, r0
    3932:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    3934:	ee68 7a2a 	vmul.f32	s15, s16, s21
    3938:	ee17 0a90 	vmov	r0, s15
    393c:	47a8      	blx	r5
    393e:	a3ec      	add	r3, pc, #944	; (adr r3, 3cf0 <mag_to_force+0xb58>)
    3940:	e9d3 2300 	ldrd	r2, r3, [r3]
    3944:	47a0      	blx	r4
    3946:	4602      	mov	r2, r0
    3948:	460b      	mov	r3, r1
    394a:	4640      	mov	r0, r8
    394c:	4649      	mov	r1, r9
    394e:	47b8      	blx	r7
    3950:	4680      	mov	r8, r0
    3952:	4689      	mov	r9, r1
	
    3954:	ee6a 7a29 	vmul.f32	s15, s20, s19
    3958:	ee17 0a90 	vmov	r0, s15
    395c:	47a8      	blx	r5
    395e:	a3e6      	add	r3, pc, #920	; (adr r3, 3cf8 <mag_to_force+0xb60>)
    3960:	e9d3 2300 	ldrd	r2, r3, [r3]
    3964:	47a0      	blx	r4
    3966:	4602      	mov	r2, r0
    3968:	460b      	mov	r3, r1
    396a:	4640      	mov	r0, r8
    396c:	4649      	mov	r1, r9
    396e:	47b0      	blx	r6
    3970:	4680      	mov	r8, r0
    3972:	4689      	mov	r9, r1
	
    3974:	a3e2      	add	r3, pc, #904	; (adr r3, 3d00 <mag_to_force+0xb68>)
    3976:	e9d3 2300 	ldrd	r2, r3, [r3]
    397a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    397e:	47a0      	blx	r4
	
    3980:	4602      	mov	r2, r0
    3982:	460b      	mov	r3, r1
    3984:	4640      	mov	r0, r8
    3986:	4649      	mov	r1, r9
    3988:	47b8      	blx	r7
    398a:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    398c:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    3990:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3994:	ee29 9a09 	vmul.f32	s18, s18, s18
    3998:	ee78 8a89 	vadd.f32	s17, s17, s18
    399c:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    39a0:	ee18 0a90 	vmov	r0, s17
    39a4:	47a8      	blx	r5
    39a6:	4bcc      	ldr	r3, [pc, #816]	; (3cd8 <mag_to_force+0xb40>)
    39a8:	4798      	blx	r3
    39aa:	47d8      	blx	fp
    39ac:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    39b0:	ed9a 8a02 	vldr	s16, [sl, #8]
    39b4:	ee18 0a10 	vmov	r0, s16
    39b8:	47a8      	blx	r5
    39ba:	a39b      	add	r3, pc, #620	; (adr r3, 3c28 <mag_to_force+0xa90>)
    39bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    39c0:	47a0      	blx	r4
    39c2:	4602      	mov	r2, r0
    39c4:	460b      	mov	r3, r1
    39c6:	a19a      	add	r1, pc, #616	; (adr r1, 3c30 <mag_to_force+0xa98>)
    39c8:	e9d1 0100 	ldrd	r0, r1, [r1]
    39cc:	47b0      	blx	r6
    39ce:	4680      	mov	r8, r0
    39d0:	4689      	mov	r9, r1
    39d2:	edda 8a08 	vldr	s17, [sl, #32]
    39d6:	ee18 0a90 	vmov	r0, s17
    39da:	47a8      	blx	r5
    39dc:	e9cd 0100 	strd	r0, r1, [sp]
    39e0:	a395      	add	r3, pc, #596	; (adr r3, 3c38 <mag_to_force+0xaa0>)
    39e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39e6:	47a0      	blx	r4
    39e8:	4602      	mov	r2, r0
    39ea:	460b      	mov	r3, r1
    39ec:	4640      	mov	r0, r8
    39ee:	4649      	mov	r1, r9
    39f0:	47b0      	blx	r6
    39f2:	4680      	mov	r8, r0
    39f4:	4689      	mov	r9, r1
    39f6:	ee28 9a08 	vmul.f32	s18, s16, s16
    39fa:	ee19 0a10 	vmov	r0, s18
    39fe:	47a8      	blx	r5
    3a00:	a38f      	add	r3, pc, #572	; (adr r3, 3c40 <mag_to_force+0xaa8>)
    3a02:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a06:	47a0      	blx	r4
    3a08:	4602      	mov	r2, r0
    3a0a:	460b      	mov	r3, r1
    3a0c:	4640      	mov	r0, r8
    3a0e:	4649      	mov	r1, r9
    3a10:	47b0      	blx	r6
    3a12:	4680      	mov	r8, r0
    3a14:	4689      	mov	r9, r1
    3a16:	ee68 7a28 	vmul.f32	s15, s16, s17
    3a1a:	ee17 0a90 	vmov	r0, s15
    3a1e:	47a8      	blx	r5
    3a20:	a389      	add	r3, pc, #548	; (adr r3, 3c48 <mag_to_force+0xab0>)
    3a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a26:	47a0      	blx	r4
    3a28:	4602      	mov	r2, r0
    3a2a:	460b      	mov	r3, r1
    3a2c:	4640      	mov	r0, r8
    3a2e:	4649      	mov	r1, r9
    3a30:	47b0      	blx	r6
    3a32:	4680      	mov	r8, r0
    3a34:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a36:	ee68 9aa8 	vmul.f32	s19, s17, s17
    3a3a:	ee19 0a90 	vmov	r0, s19
    3a3e:	47a8      	blx	r5
    3a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3a44:	a382      	add	r3, pc, #520	; (adr r3, 3c50 <mag_to_force+0xab8>)
    3a46:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a4a:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3a4c:	4602      	mov	r2, r0
    3a4e:	460b      	mov	r3, r1
    3a50:	4640      	mov	r0, r8
    3a52:	4649      	mov	r1, r9
    3a54:	47b0      	blx	r6
    3a56:	4680      	mov	r8, r0
    3a58:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3a5a:	ee68 7a89 	vmul.f32	s15, s17, s18
    3a5e:	ee17 0a90 	vmov	r0, s15
    3a62:	47a8      	blx	r5
    3a64:	a37c      	add	r3, pc, #496	; (adr r3, 3c58 <mag_to_force+0xac0>)
    3a66:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a6a:	47a0      	blx	r4
    3a6c:	4602      	mov	r2, r0
    3a6e:	460b      	mov	r3, r1
    3a70:	4640      	mov	r0, r8
    3a72:	4649      	mov	r1, r9
    3a74:	47b0      	blx	r6
    3a76:	4680      	mov	r8, r0
    3a78:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3a7a:	ee68 7a29 	vmul.f32	s15, s16, s19
    3a7e:	ee17 0a90 	vmov	r0, s15
    3a82:	47a8      	blx	r5
    3a84:	a376      	add	r3, pc, #472	; (adr r3, 3c60 <mag_to_force+0xac8>)
    3a86:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a8a:	47a0      	blx	r4
    3a8c:	4602      	mov	r2, r0
    3a8e:	460b      	mov	r3, r1
    3a90:	4640      	mov	r0, r8
    3a92:	4649      	mov	r1, r9
    3a94:	47b0      	blx	r6
    3a96:	4680      	mov	r8, r0
    3a98:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3a9a:	ee68 7aa9 	vmul.f32	s15, s17, s19
    3a9e:	ee17 0a90 	vmov	r0, s15
    3aa2:	47a8      	blx	r5
    3aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3aa8:	a36f      	add	r3, pc, #444	; (adr r3, 3c68 <mag_to_force+0xad0>)
    3aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    3aae:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3ab0:	4602      	mov	r2, r0
    3ab2:	460b      	mov	r3, r1
    3ab4:	4640      	mov	r0, r8
    3ab6:	4649      	mov	r1, r9
    3ab8:	47b0      	blx	r6
    3aba:	47d8      	blx	fp
    3abc:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3ac0:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3ac4:	ed9a 9a05 	vldr	s18, [sl, #20]
    3ac8:	ee19 0a10 	vmov	r0, s18
    3acc:	47a8      	blx	r5
    3ace:	a368      	add	r3, pc, #416	; (adr r3, 3c70 <mag_to_force+0xad8>)
    3ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ad4:	47a0      	blx	r4
    3ad6:	a368      	add	r3, pc, #416	; (adr r3, 3c78 <mag_to_force+0xae0>)
    3ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3adc:	47b0      	blx	r6
    3ade:	4680      	mov	r8, r0
    3ae0:	4689      	mov	r9, r1
    3ae2:	a367      	add	r3, pc, #412	; (adr r3, 3c80 <mag_to_force+0xae8>)
    3ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3aec:	47a0      	blx	r4
    3aee:	4602      	mov	r2, r0
    3af0:	460b      	mov	r3, r1
    3af2:	4640      	mov	r0, r8
    3af4:	4649      	mov	r1, r9
    3af6:	47b0      	blx	r6
    3af8:	4680      	mov	r8, r0
    3afa:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3afc:	ee29 aa09 	vmul.f32	s20, s18, s18
    3b00:	ee1a 0a10 	vmov	r0, s20
    3b04:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3b06:	a360      	add	r3, pc, #384	; (adr r3, 3c88 <mag_to_force+0xaf0>)
    3b08:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b0c:	47a0      	blx	r4
    3b0e:	4602      	mov	r2, r0
    3b10:	460b      	mov	r3, r1
    3b12:	4640      	mov	r0, r8
    3b14:	4649      	mov	r1, r9
    3b16:	47b8      	blx	r7
    3b18:	4680      	mov	r8, r0
    3b1a:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3b1c:	462e      	mov	r6, r5
    3b1e:	ee68 7a89 	vmul.f32	s15, s17, s18
    3b22:	ee17 0a90 	vmov	r0, s15
    3b26:	47a8      	blx	r5
    3b28:	a359      	add	r3, pc, #356	; (adr r3, 3c90 <mag_to_force+0xaf8>)
    3b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b2e:	47a0      	blx	r4
    3b30:	463d      	mov	r5, r7
    3b32:	4602      	mov	r2, r0
    3b34:	460b      	mov	r3, r1
    3b36:	4640      	mov	r0, r8
    3b38:	4649      	mov	r1, r9
    3b3a:	47b8      	blx	r7
    3b3c:	4680      	mov	r8, r0
    3b3e:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3b40:	a355      	add	r3, pc, #340	; (adr r3, 3c98 <mag_to_force+0xb00>)
    3b42:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3b4a:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3b4c:	4f63      	ldr	r7, [pc, #396]	; (3cdc <mag_to_force+0xb44>)
    3b4e:	4602      	mov	r2, r0
    3b50:	460b      	mov	r3, r1
    3b52:	4640      	mov	r0, r8
    3b54:	4649      	mov	r1, r9
    3b56:	47b8      	blx	r7
    3b58:	4680      	mov	r8, r0
    3b5a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3b5c:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3b60:	ee17 0a90 	vmov	r0, s15
    3b64:	47b0      	blx	r6
    3b66:	a34e      	add	r3, pc, #312	; (adr r3, 3ca0 <mag_to_force+0xb08>)
    3b68:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b6c:	47a0      	blx	r4
    3b6e:	4602      	mov	r2, r0
    3b70:	460b      	mov	r3, r1
    3b72:	4640      	mov	r0, r8
    3b74:	4649      	mov	r1, r9
    3b76:	47a8      	blx	r5
    3b78:	4680      	mov	r8, r0
    3b7a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3b7c:	ee69 7a89 	vmul.f32	s15, s19, s18
    3b80:	ee17 0a90 	vmov	r0, s15
    3b84:	47b0      	blx	r6
    3b86:	a348      	add	r3, pc, #288	; (adr r3, 3ca8 <mag_to_force+0xb10>)
    3b88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b8c:	47a0      	blx	r4
    3b8e:	4602      	mov	r2, r0
    3b90:	460b      	mov	r3, r1
    3b92:	4640      	mov	r0, r8
    3b94:	4649      	mov	r1, r9
    3b96:	47a8      	blx	r5
    3b98:	4680      	mov	r8, r0
    3b9a:	4689      	mov	r9, r1
		break;
    3b9c:	a344      	add	r3, pc, #272	; (adr r3, 3cb0 <mag_to_force+0xb18>)
    3b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3ba6:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3ba8:	4602      	mov	r2, r0
    3baa:	460b      	mov	r3, r1
    3bac:	4640      	mov	r0, r8
    3bae:	4649      	mov	r1, r9
    3bb0:	47b8      	blx	r7
    3bb2:	47d8      	blx	fp
    3bb4:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    3bb8:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3bbc:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    3bc0:	ee19 0a10 	vmov	r0, s18
    3bc4:	47b0      	blx	r6
    3bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3bca:	a33b      	add	r3, pc, #236	; (adr r3, 3cb8 <mag_to_force+0xb20>)
    3bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bd0:	47a0      	blx	r4
    3bd2:	4602      	mov	r2, r0
    3bd4:	460b      	mov	r3, r1
    3bd6:	a13a      	add	r1, pc, #232	; (adr r1, 3cc0 <mag_to_force+0xb28>)
    3bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
    3bdc:	47b8      	blx	r7
    3bde:	4680      	mov	r8, r0
    3be0:	4689      	mov	r9, r1
    3be2:	a339      	add	r3, pc, #228	; (adr r3, 3cc8 <mag_to_force+0xb30>)
    3be4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3be8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3bec:	47a0      	blx	r4
    3bee:	4602      	mov	r2, r0
    3bf0:	460b      	mov	r3, r1
    3bf2:	4640      	mov	r0, r8
    3bf4:	4649      	mov	r1, r9
    3bf6:	47a8      	blx	r5
    3bf8:	4680      	mov	r8, r0
    3bfa:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3bfc:	ee69 7a09 	vmul.f32	s15, s18, s18
    3c00:	ee17 0a90 	vmov	r0, s15
    3c04:	47b0      	blx	r6
    3c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3c0a:	a331      	add	r3, pc, #196	; (adr r3, 3cd0 <mag_to_force+0xb38>)
    3c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c10:	47a0      	blx	r4
    3c12:	4602      	mov	r2, r0
    3c14:	460b      	mov	r3, r1
    3c16:	4640      	mov	r0, r8
    3c18:	4649      	mov	r1, r9
    3c1a:	47a8      	blx	r5
    3c1c:	4680      	mov	r8, r0
    3c1e:	4689      	mov	r9, r1
    3c20:	e072      	b.n	3d08 <mag_to_force+0xb70>
    3c22:	bf00      	nop
    3c24:	f3af 8000 	nop.w
    3c28:	6b50b0f2 	.word	0x6b50b0f2
    3c2c:	3f6c779a 	.word	0x3f6c779a
    3c30:	c28f5c29 	.word	0xc28f5c29
    3c34:	c024a8f5 	.word	0xc024a8f5
    3c38:	d5171e2a 	.word	0xd5171e2a
    3c3c:	3f68a222 	.word	0x3f68a222
    3c40:	69edc5c6 	.word	0x69edc5c6
    3c44:	3ea5a9a9 	.word	0x3ea5a9a9
    3c48:	81bc997e 	.word	0x81bc997e
    3c4c:	3ea8aec1 	.word	0x3ea8aec1
    3c50:	de9fb9ed 	.word	0xde9fb9ed
    3c54:	3e9247cb 	.word	0x3e9247cb
    3c58:	82393435 	.word	0x82393435
    3c5c:	3dc8377c 	.word	0x3dc8377c
    3c60:	e19c6262 	.word	0xe19c6262
    3c64:	3dc1773a 	.word	0x3dc1773a
    3c68:	7476128f 	.word	0x7476128f
    3c6c:	3da06d3c 	.word	0x3da06d3c
    3c70:	b0fadf2f 	.word	0xb0fadf2f
    3c74:	3f65a8de 	.word	0x3f65a8de
    3c78:	9ba5e354 	.word	0x9ba5e354
    3c7c:	400120c4 	.word	0x400120c4
    3c80:	ef1fddec 	.word	0xef1fddec
    3c84:	3f432b55 	.word	0x3f432b55
    3c88:	ebb865dc 	.word	0xebb865dc
    3c8c:	3ea2ee70 	.word	0x3ea2ee70
    3c90:	ea8666cf 	.word	0xea8666cf
    3c94:	3e853bb5 	.word	0x3e853bb5
    3c98:	5799a806 	.word	0x5799a806
    3c9c:	3e6193c0 	.word	0x3e6193c0
    3ca0:	cece3cda 	.word	0xcece3cda
    3ca4:	3dc62920 	.word	0x3dc62920
    3ca8:	d5564f58 	.word	0xd5564f58
    3cac:	3d683df5 	.word	0x3d683df5
    3cb0:	664dc709 	.word	0x664dc709
    3cb4:	3d626c2b 	.word	0x3d626c2b
    3cb8:	c4cdfaca 	.word	0xc4cdfaca
    3cbc:	3f762174 	.word	0x3f762174
    3cc0:	f5c28f5c 	.word	0xf5c28f5c
    3cc4:	40399c28 	.word	0x40399c28
    3cc8:	5cc42635 	.word	0x5cc42635
    3ccc:	3f7db552 	.word	0x3f7db552
    3cd0:	88e4e2e6 	.word	0x88e4e2e6
    3cd4:	3eb215f9 	.word	0x3eb215f9
    3cd8:	00005981 	.word	0x00005981
    3cdc:	00005bc1 	.word	0x00005bc1
    3ce0:	02547d8d 	.word	0x02547d8d
    3ce4:	3ea9b22c 	.word	0x3ea9b22c
    3ce8:	227c1fc4 	.word	0x227c1fc4
    3cec:	3e96b3f3 	.word	0x3e96b3f3
    3cf0:	f946a57c 	.word	0xf946a57c
    3cf4:	3db0a587 	.word	0x3db0a587
    3cf8:	82163668 	.word	0x82163668
    3cfc:	3dbcbdc1 	.word	0x3dbcbdc1
    3d00:	02de4486 	.word	0x02de4486
    3d04:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3d08:	a334      	add	r3, pc, #208	; (adr r3, 3ddc <mag_to_force+0xc44>)
    3d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3d12:	47a0      	blx	r4
    3d14:	4602      	mov	r2, r0
    3d16:	460b      	mov	r3, r1
    3d18:	e9dd 0100 	ldrd	r0, r1, [sp]
    3d1c:	47a0      	blx	r4
    3d1e:	4602      	mov	r2, r0
    3d20:	460b      	mov	r3, r1
    3d22:	4640      	mov	r0, r8
    3d24:	4649      	mov	r1, r9
    3d26:	47b8      	blx	r7
    3d28:	4680      	mov	r8, r0
    3d2a:	4689      	mov	r9, r1
    3d2c:	a32d      	add	r3, pc, #180	; (adr r3, 3de4 <mag_to_force+0xc4c>)
    3d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d36:	47a0      	blx	r4
    3d38:	4602      	mov	r2, r0
    3d3a:	460b      	mov	r3, r1
    3d3c:	4640      	mov	r0, r8
    3d3e:	4649      	mov	r1, r9
    3d40:	47a8      	blx	r5
    3d42:	4680      	mov	r8, r0
    3d44:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3d46:	a329      	add	r3, pc, #164	; (adr r3, 3dec <mag_to_force+0xc54>)
    3d48:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3d50:	47a0      	blx	r4
    3d52:	4602      	mov	r2, r0
    3d54:	460b      	mov	r3, r1
    3d56:	e9dd 0100 	ldrd	r0, r1, [sp]
    3d5a:	47a0      	blx	r4
    3d5c:	4602      	mov	r2, r0
    3d5e:	460b      	mov	r3, r1
    3d60:	4640      	mov	r0, r8
    3d62:	4649      	mov	r1, r9
    3d64:	47a8      	blx	r5
    3d66:	4680      	mov	r8, r0
    3d68:	4689      	mov	r9, r1
		break;
    3d6a:	a322      	add	r3, pc, #136	; (adr r3, 3df4 <mag_to_force+0xc5c>)
    3d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3d74:	47a0      	blx	r4
    3d76:	4602      	mov	r2, r0
    3d78:	460b      	mov	r3, r1
    3d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d7e:	47a0      	blx	r4
    3d80:	4602      	mov	r2, r0
    3d82:	460b      	mov	r3, r1
    3d84:	4640      	mov	r0, r8
    3d86:	4649      	mov	r1, r9
    3d88:	47b8      	blx	r7
    3d8a:	4680      	mov	r8, r0
    3d8c:	4689      	mov	r9, r1
    3d8e:	a31b      	add	r3, pc, #108	; (adr r3, 3dfc <mag_to_force+0xc64>)
    3d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3d98:	47a0      	blx	r4
	
    3d9a:	4602      	mov	r2, r0
    3d9c:	460b      	mov	r3, r1
    3d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
    3da2:	47a0      	blx	r4
		break;
    3da4:	4602      	mov	r2, r0
    3da6:	460b      	mov	r3, r1
    3da8:	4640      	mov	r0, r8
    3daa:	4649      	mov	r1, r9
    3dac:	47a8      	blx	r5
    3dae:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    3db0:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    3db4:	ee28 8a08 	vmul.f32	s16, s16, s16
    3db8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    3dbc:	ee38 8a28 	vadd.f32	s16, s16, s17
    3dc0:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    3dc4:	ee18 0a10 	vmov	r0, s16
    3dc8:	47b0      	blx	r6
    3dca:	4b03      	ldr	r3, [pc, #12]	; (3dd8 <mag_to_force+0xc40>)
    3dcc:	4798      	blx	r3
    3dce:	47d8      	blx	fp
    3dd0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
		break;
    3dd4:	f7ff b9ee 	b.w	31b4 <mag_to_force+0x1c>
    3dd8:	00005981 	.word	0x00005981
    3ddc:	5a723736 	.word	0x5a723736
    3de0:	3ea77381 	.word	0x3ea77381
    3de4:	4e8b8a55 	.word	0x4e8b8a55
    3de8:	3ea47f97 	.word	0x3ea47f97
    3dec:	a48fe74d 	.word	0xa48fe74d
    3df0:	3dce7643 	.word	0x3dce7643
    3df4:	e61b6f11 	.word	0xe61b6f11
    3df8:	3db71428 	.word	0x3db71428
    3dfc:	447e7fdf 	.word	0x447e7fdf
    3e00:	3dacd9e7 	.word	0x3dacd9e7
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3e04:	edd1 8a00 	vldr	s17, [r1]
    3e08:	4dcb      	ldr	r5, [pc, #812]	; (4138 <mag_to_force+0xfa0>)
    3e0a:	ee18 0a90 	vmov	r0, s17
    3e0e:	47a8      	blx	r5
    3e10:	4cca      	ldr	r4, [pc, #808]	; (413c <mag_to_force+0xfa4>)
    3e12:	a39d      	add	r3, pc, #628	; (adr r3, 4088 <mag_to_force+0xef0>)
    3e14:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e18:	47a0      	blx	r4
    3e1a:	4ec9      	ldr	r6, [pc, #804]	; (4140 <mag_to_force+0xfa8>)
    3e1c:	4602      	mov	r2, r0
    3e1e:	460b      	mov	r3, r1
    3e20:	a19b      	add	r1, pc, #620	; (adr r1, 4090 <mag_to_force+0xef8>)
    3e22:	e9d1 0100 	ldrd	r0, r1, [r1]
    3e26:	47b0      	blx	r6
    3e28:	4680      	mov	r8, r0
    3e2a:	4689      	mov	r9, r1
    3e2c:	ed9a 8a06 	vldr	s16, [sl, #24]
    3e30:	ee18 0a10 	vmov	r0, s16
    3e34:	47a8      	blx	r5
    3e36:	e9cd 0100 	strd	r0, r1, [sp]
    3e3a:	a397      	add	r3, pc, #604	; (adr r3, 4098 <mag_to_force+0xf00>)
    3e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e40:	47a0      	blx	r4
    3e42:	4fc0      	ldr	r7, [pc, #768]	; (4144 <mag_to_force+0xfac>)
    3e44:	4602      	mov	r2, r0
    3e46:	460b      	mov	r3, r1
    3e48:	4640      	mov	r0, r8
    3e4a:	4649      	mov	r1, r9
    3e4c:	47b8      	blx	r7
    3e4e:	4680      	mov	r8, r0
    3e50:	4689      	mov	r9, r1
    3e52:	ee28 9aa8 	vmul.f32	s18, s17, s17
    3e56:	ee19 0a10 	vmov	r0, s18
    3e5a:	47a8      	blx	r5
    3e5c:	a390      	add	r3, pc, #576	; (adr r3, 40a0 <mag_to_force+0xf08>)
    3e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e62:	47a0      	blx	r4
    3e64:	4602      	mov	r2, r0
    3e66:	460b      	mov	r3, r1
    3e68:	4640      	mov	r0, r8
    3e6a:	4649      	mov	r1, r9
    3e6c:	47b8      	blx	r7
    3e6e:	4680      	mov	r8, r0
    3e70:	4689      	mov	r9, r1
    3e72:	ee68 7a88 	vmul.f32	s15, s17, s16
    3e76:	ee17 0a90 	vmov	r0, s15
    3e7a:	47a8      	blx	r5
    3e7c:	a38a      	add	r3, pc, #552	; (adr r3, 40a8 <mag_to_force+0xf10>)
    3e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e82:	47a0      	blx	r4
    3e84:	4602      	mov	r2, r0
    3e86:	460b      	mov	r3, r1
    3e88:	4640      	mov	r0, r8
    3e8a:	4649      	mov	r1, r9
    3e8c:	47b0      	blx	r6
    3e8e:	4680      	mov	r8, r0
    3e90:	4689      	mov	r9, r1
    3e92:	ee28 aa08 	vmul.f32	s20, s16, s16
    3e96:	ee1a 0a10 	vmov	r0, s20
    3e9a:	47a8      	blx	r5
    3e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3ea0:	a383      	add	r3, pc, #524	; (adr r3, 40b0 <mag_to_force+0xf18>)
    3ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ea6:	47a0      	blx	r4
    3ea8:	4602      	mov	r2, r0
    3eaa:	460b      	mov	r3, r1
    3eac:	4640      	mov	r0, r8
    3eae:	4649      	mov	r1, r9
    3eb0:	47b8      	blx	r7
    3eb2:	4680      	mov	r8, r0
    3eb4:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3eb6:	ee68 7a09 	vmul.f32	s15, s16, s18
    3eba:	ee17 0a90 	vmov	r0, s15
    3ebe:	47a8      	blx	r5
    3ec0:	a37d      	add	r3, pc, #500	; (adr r3, 40b8 <mag_to_force+0xf20>)
    3ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ec6:	47a0      	blx	r4
    3ec8:	4602      	mov	r2, r0
    3eca:	460b      	mov	r3, r1
    3ecc:	4640      	mov	r0, r8
    3ece:	4649      	mov	r1, r9
    3ed0:	47b8      	blx	r7
    3ed2:	4680      	mov	r8, r0
    3ed4:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3ed6:	ee68 7a8a 	vmul.f32	s15, s17, s20
    3eda:	ee17 0a90 	vmov	r0, s15
    3ede:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3ee0:	a377      	add	r3, pc, #476	; (adr r3, 40c0 <mag_to_force+0xf28>)
    3ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ee6:	47a0      	blx	r4
    3ee8:	4602      	mov	r2, r0
    3eea:	460b      	mov	r3, r1
    3eec:	4640      	mov	r0, r8
    3eee:	4649      	mov	r1, r9
    3ef0:	47b0      	blx	r6
    3ef2:	4680      	mov	r8, r0
    3ef4:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3ef6:	ee68 7a0a 	vmul.f32	s15, s16, s20
    3efa:	ee17 0a90 	vmov	r0, s15
    3efe:	47a8      	blx	r5
    3f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3f04:	a370      	add	r3, pc, #448	; (adr r3, 40c8 <mag_to_force+0xf30>)
    3f06:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f0a:	47a0      	blx	r4
    3f0c:	4602      	mov	r2, r0
    3f0e:	460b      	mov	r3, r1
    3f10:	4640      	mov	r0, r8
    3f12:	4649      	mov	r1, r9
    3f14:	47b8      	blx	r7
    3f16:	f8df b230 	ldr.w	fp, [pc, #560]	; 4148 <mag_to_force+0xfb0>
    3f1a:	47d8      	blx	fp
    3f1c:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3f20:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3f24:	ed9a 9a03 	vldr	s18, [sl, #12]
    3f28:	ee19 0a10 	vmov	r0, s18
    3f2c:	47a8      	blx	r5
    3f2e:	a368      	add	r3, pc, #416	; (adr r3, 40d0 <mag_to_force+0xf38>)
    3f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f34:	47a0      	blx	r4
    3f36:	4602      	mov	r2, r0
    3f38:	460b      	mov	r3, r1
    3f3a:	a167      	add	r1, pc, #412	; (adr r1, 40d8 <mag_to_force+0xf40>)
    3f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3f40:	47b0      	blx	r6
    3f42:	4680      	mov	r8, r0
    3f44:	4689      	mov	r9, r1
    3f46:	a366      	add	r3, pc, #408	; (adr r3, 40e0 <mag_to_force+0xf48>)
    3f48:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
    3f50:	47a0      	blx	r4
    3f52:	4602      	mov	r2, r0
    3f54:	460b      	mov	r3, r1
    3f56:	4640      	mov	r0, r8
    3f58:	4649      	mov	r1, r9
    3f5a:	47b8      	blx	r7
    3f5c:	4680      	mov	r8, r0
    3f5e:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3f60:	ee69 9a09 	vmul.f32	s19, s18, s18
    3f64:	ee19 0a90 	vmov	r0, s19
    3f68:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3f6a:	a35f      	add	r3, pc, #380	; (adr r3, 40e8 <mag_to_force+0xf50>)
    3f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f70:	47a0      	blx	r4
    3f72:	4602      	mov	r2, r0
    3f74:	460b      	mov	r3, r1
    3f76:	4640      	mov	r0, r8
    3f78:	4649      	mov	r1, r9
    3f7a:	47b8      	blx	r7
    3f7c:	4680      	mov	r8, r0
    3f7e:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    3f80:	ee68 7a09 	vmul.f32	s15, s16, s18
    3f84:	ee17 0a90 	vmov	r0, s15
    3f88:	47a8      	blx	r5
    3f8a:	a359      	add	r3, pc, #356	; (adr r3, 40f0 <mag_to_force+0xf58>)
    3f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f90:	47a0      	blx	r4
    3f92:	4602      	mov	r2, r0
    3f94:	460b      	mov	r3, r1
    3f96:	4640      	mov	r0, r8
    3f98:	4649      	mov	r1, r9
    3f9a:	47b0      	blx	r6
    3f9c:	4680      	mov	r8, r0
    3f9e:	4689      	mov	r9, r1
    3fa0:	a355      	add	r3, pc, #340	; (adr r3, 40f8 <mag_to_force+0xf60>)
    3fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3faa:	47a0      	blx	r4
    3fac:	4602      	mov	r2, r0
    3fae:	460b      	mov	r3, r1
    3fb0:	4640      	mov	r0, r8
    3fb2:	4649      	mov	r1, r9
    3fb4:	47b8      	blx	r7
    3fb6:	4680      	mov	r8, r0
    3fb8:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3fba:	ee68 7a29 	vmul.f32	s15, s16, s19
    3fbe:	ee17 0a90 	vmov	r0, s15
    3fc2:	47a8      	blx	r5
    3fc4:	a34e      	add	r3, pc, #312	; (adr r3, 4100 <mag_to_force+0xf68>)
    3fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fca:	47a0      	blx	r4
    3fcc:	4602      	mov	r2, r0
    3fce:	460b      	mov	r3, r1
    3fd0:	4640      	mov	r0, r8
    3fd2:	4649      	mov	r1, r9
    3fd4:	47b8      	blx	r7
    3fd6:	4680      	mov	r8, r0
    3fd8:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3fda:	ee6a 7a09 	vmul.f32	s15, s20, s18
    3fde:	ee17 0a90 	vmov	r0, s15
    3fe2:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    3fe4:	a348      	add	r3, pc, #288	; (adr r3, 4108 <mag_to_force+0xf70>)
    3fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fea:	47a0      	blx	r4
    3fec:	4602      	mov	r2, r0
    3fee:	460b      	mov	r3, r1
    3ff0:	4640      	mov	r0, r8
    3ff2:	4649      	mov	r1, r9
    3ff4:	47b0      	blx	r6
    3ff6:	4680      	mov	r8, r0
    3ff8:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    3ffa:	a345      	add	r3, pc, #276	; (adr r3, 4110 <mag_to_force+0xf78>)
    3ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4004:	47a0      	blx	r4
    4006:	4602      	mov	r2, r0
    4008:	460b      	mov	r3, r1
    400a:	4640      	mov	r0, r8
    400c:	4649      	mov	r1, r9
    400e:	47b8      	blx	r7
    4010:	47d8      	blx	fp
    4012:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4016:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    401a:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    401e:	ee19 0a90 	vmov	r0, s19
    4022:	47a8      	blx	r5
    4024:	a33c      	add	r3, pc, #240	; (adr r3, 4118 <mag_to_force+0xf80>)
    4026:	e9d3 2300 	ldrd	r2, r3, [r3]
    402a:	47a0      	blx	r4
    402c:	4602      	mov	r2, r0
    402e:	460b      	mov	r3, r1
    4030:	a13b      	add	r1, pc, #236	; (adr r1, 4120 <mag_to_force+0xf88>)
    4032:	e9d1 0100 	ldrd	r0, r1, [r1]
    4036:	47b0      	blx	r6
    4038:	4680      	mov	r8, r0
    403a:	4689      	mov	r9, r1
    403c:	a33a      	add	r3, pc, #232	; (adr r3, 4128 <mag_to_force+0xf90>)
    403e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4042:	e9dd 0100 	ldrd	r0, r1, [sp]
    4046:	47a0      	blx	r4
    4048:	4602      	mov	r2, r0
    404a:	460b      	mov	r3, r1
    404c:	4640      	mov	r0, r8
    404e:	4649      	mov	r1, r9
    4050:	47b8      	blx	r7
    4052:	4680      	mov	r8, r0
    4054:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4056:	ee69 aaa9 	vmul.f32	s21, s19, s19
    405a:	ee1a 0a90 	vmov	r0, s21
    405e:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4060:	a333      	add	r3, pc, #204	; (adr r3, 4130 <mag_to_force+0xf98>)
    4062:	e9d3 2300 	ldrd	r2, r3, [r3]
    4066:	47a0      	blx	r4
    4068:	4602      	mov	r2, r0
    406a:	460b      	mov	r3, r1
    406c:	4640      	mov	r0, r8
    406e:	4649      	mov	r1, r9
    4070:	47b8      	blx	r7
    4072:	4680      	mov	r8, r0
    4074:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4076:	ee68 7a29 	vmul.f32	s15, s16, s19
    407a:	ee17 0a90 	vmov	r0, s15
    407e:	47a8      	blx	r5
    4080:	e064      	b.n	414c <mag_to_force+0xfb4>
    4082:	bf00      	nop
    4084:	f3af 8000 	nop.w
    4088:	8f041462 	.word	0x8f041462
    408c:	3f6aef6f 	.word	0x3f6aef6f
    4090:	c28f5c29 	.word	0xc28f5c29
    4094:	402aa8f5 	.word	0x402aa8f5
    4098:	229e9079 	.word	0x229e9079
    409c:	3f6b8887 	.word	0x3f6b8887
    40a0:	d646eb6e 	.word	0xd646eb6e
    40a4:	3ea84b1c 	.word	0x3ea84b1c
    40a8:	521dd696 	.word	0x521dd696
    40ac:	3ea4ce9e 	.word	0x3ea4ce9e
    40b0:	8b46aa0f 	.word	0x8b46aa0f
    40b4:	3e91cf89 	.word	0x3e91cf89
    40b8:	05b88164 	.word	0x05b88164
    40bc:	3dcadc6f 	.word	0x3dcadc6f
    40c0:	c6957207 	.word	0xc6957207
    40c4:	3dba9bb1 	.word	0x3dba9bb1
    40c8:	54aa19eb 	.word	0x54aa19eb
    40cc:	3d9d014f 	.word	0x3d9d014f
    40d0:	328a96c7 	.word	0x328a96c7
    40d4:	3f3faac0 	.word	0x3f3faac0
    40d8:	4fdf3b64 	.word	0x4fdf3b64
    40dc:	4006978d 	.word	0x4006978d
    40e0:	4662bae0 	.word	0x4662bae0
    40e4:	3f507b78 	.word	0x3f507b78
    40e8:	1dbb855a 	.word	0x1dbb855a
    40ec:	3ea17b5b 	.word	0x3ea17b5b
    40f0:	f2d94d7a 	.word	0xf2d94d7a
    40f4:	3e9ac354 	.word	0x3e9ac354
    40f8:	8ed8f651 	.word	0x8ed8f651
    40fc:	3e821e90 	.word	0x3e821e90
    4100:	37757ffe 	.word	0x37757ffe
    4104:	3dc19631 	.word	0x3dc19631
    4108:	8cce8eea 	.word	0x8cce8eea
    410c:	3db7f827 	.word	0x3db7f827
    4110:	7c871c2d 	.word	0x7c871c2d
    4114:	3d953cf8 	.word	0x3d953cf8
    4118:	94ccab3f 	.word	0x94ccab3f
    411c:	3f72dfd6 	.word	0x3f72dfd6
    4120:	eb851eb8 	.word	0xeb851eb8
    4124:	40387851 	.word	0x40387851
    4128:	9f51697f 	.word	0x9f51697f
    412c:	3f7b0ee4 	.word	0x3f7b0ee4
    4130:	fec17451 	.word	0xfec17451
    4134:	3e9ad482 	.word	0x3e9ad482
    4138:	00005e81 	.word	0x00005e81
    413c:	00005f29 	.word	0x00005f29
    4140:	00005bc1 	.word	0x00005bc1
    4144:	00005bc5 	.word	0x00005bc5
    4148:	00006489 	.word	0x00006489
    414c:	a3f5      	add	r3, pc, #980	; (adr r3, 4524 <mag_to_force+0x138c>)
    414e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4152:	47a0      	blx	r4
    4154:	4602      	mov	r2, r0
    4156:	460b      	mov	r3, r1
    4158:	4640      	mov	r0, r8
    415a:	4649      	mov	r1, r9
    415c:	47b0      	blx	r6
    415e:	4680      	mov	r8, r0
    4160:	4689      	mov	r9, r1
    4162:	a3f2      	add	r3, pc, #968	; (adr r3, 452c <mag_to_force+0x1394>)
    4164:	e9d3 2300 	ldrd	r2, r3, [r3]
    4168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    416c:	47a0      	blx	r4
    416e:	4602      	mov	r2, r0
    4170:	460b      	mov	r3, r1
    4172:	4640      	mov	r0, r8
    4174:	4649      	mov	r1, r9
    4176:	47b8      	blx	r7
    4178:	4680      	mov	r8, r0
    417a:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    417c:	ee68 7a2a 	vmul.f32	s15, s16, s21
    4180:	ee17 0a90 	vmov	r0, s15
    4184:	47a8      	blx	r5
    4186:	a3eb      	add	r3, pc, #940	; (adr r3, 4534 <mag_to_force+0x139c>)
    4188:	e9d3 2300 	ldrd	r2, r3, [r3]
    418c:	47a0      	blx	r4
    418e:	4602      	mov	r2, r0
    4190:	460b      	mov	r3, r1
    4192:	4640      	mov	r0, r8
    4194:	4649      	mov	r1, r9
    4196:	47b8      	blx	r7
    4198:	4680      	mov	r8, r0
    419a:	4689      	mov	r9, r1
		
    419c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    41a0:	ee17 0a90 	vmov	r0, s15
    41a4:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    41a6:	a3e5      	add	r3, pc, #916	; (adr r3, 453c <mag_to_force+0x13a4>)
    41a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    41ac:	47a0      	blx	r4
    41ae:	4602      	mov	r2, r0
    41b0:	460b      	mov	r3, r1
    41b2:	4640      	mov	r0, r8
    41b4:	4649      	mov	r1, r9
    41b6:	47b0      	blx	r6
    41b8:	4680      	mov	r8, r0
    41ba:	4689      	mov	r9, r1
		
    41bc:	a3e1      	add	r3, pc, #900	; (adr r3, 4544 <mag_to_force+0x13ac>)
    41be:	e9d3 2300 	ldrd	r2, r3, [r3]
    41c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    41c6:	47a0      	blx	r4
    41c8:	4602      	mov	r2, r0
    41ca:	460b      	mov	r3, r1
    41cc:	4640      	mov	r0, r8
    41ce:	4649      	mov	r1, r9
    41d0:	47b8      	blx	r7
    41d2:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    41d4:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    41d8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    41dc:	ee29 9a09 	vmul.f32	s18, s18, s18
    41e0:	ee78 8a89 	vadd.f32	s17, s17, s18
    41e4:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    41e8:	ee18 0a90 	vmov	r0, s17
    41ec:	47a8      	blx	r5
    41ee:	4bcc      	ldr	r3, [pc, #816]	; (4520 <mag_to_force+0x1388>)
    41f0:	4798      	blx	r3
    41f2:	47d8      	blx	fp
    41f4:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    41f8:	edda 8a01 	vldr	s17, [sl, #4]
    41fc:	ee18 0a90 	vmov	r0, s17
    4200:	47a8      	blx	r5
    4202:	a39b      	add	r3, pc, #620	; (adr r3, 4470 <mag_to_force+0x12d8>)
    4204:	e9d3 2300 	ldrd	r2, r3, [r3]
    4208:	47a0      	blx	r4
    420a:	4602      	mov	r2, r0
    420c:	460b      	mov	r3, r1
    420e:	a19a      	add	r1, pc, #616	; (adr r1, 4478 <mag_to_force+0x12e0>)
    4210:	e9d1 0100 	ldrd	r0, r1, [r1]
    4214:	47b0      	blx	r6
    4216:	4680      	mov	r8, r0
    4218:	4689      	mov	r9, r1
    421a:	ed9a 8a07 	vldr	s16, [sl, #28]
    421e:	ee18 0a10 	vmov	r0, s16
    4222:	47a8      	blx	r5
    4224:	e9cd 0100 	strd	r0, r1, [sp]
    4228:	a395      	add	r3, pc, #596	; (adr r3, 4480 <mag_to_force+0x12e8>)
    422a:	e9d3 2300 	ldrd	r2, r3, [r3]
    422e:	47a0      	blx	r4
    4230:	4602      	mov	r2, r0
    4232:	460b      	mov	r3, r1
    4234:	4640      	mov	r0, r8
    4236:	4649      	mov	r1, r9
    4238:	47b8      	blx	r7
    423a:	4680      	mov	r8, r0
    423c:	4689      	mov	r9, r1
    423e:	ee28 9aa8 	vmul.f32	s18, s17, s17
    4242:	ee19 0a10 	vmov	r0, s18
    4246:	47a8      	blx	r5
    4248:	a38f      	add	r3, pc, #572	; (adr r3, 4488 <mag_to_force+0x12f0>)
    424a:	e9d3 2300 	ldrd	r2, r3, [r3]
    424e:	47a0      	blx	r4
    4250:	4602      	mov	r2, r0
    4252:	460b      	mov	r3, r1
    4254:	4640      	mov	r0, r8
    4256:	4649      	mov	r1, r9
    4258:	47b8      	blx	r7
    425a:	4680      	mov	r8, r0
    425c:	4689      	mov	r9, r1
    425e:	ee68 7a88 	vmul.f32	s15, s17, s16
    4262:	ee17 0a90 	vmov	r0, s15
    4266:	47a8      	blx	r5
    4268:	a389      	add	r3, pc, #548	; (adr r3, 4490 <mag_to_force+0x12f8>)
    426a:	e9d3 2300 	ldrd	r2, r3, [r3]
    426e:	47a0      	blx	r4
    4270:	4602      	mov	r2, r0
    4272:	460b      	mov	r3, r1
    4274:	4640      	mov	r0, r8
    4276:	4649      	mov	r1, r9
    4278:	47b0      	blx	r6
    427a:	4680      	mov	r8, r0
    427c:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    427e:	ee28 aa08 	vmul.f32	s20, s16, s16
    4282:	ee1a 0a10 	vmov	r0, s20
    4286:	47a8      	blx	r5
    4288:	e9cd 0102 	strd	r0, r1, [sp, #8]
    428c:	a382      	add	r3, pc, #520	; (adr r3, 4498 <mag_to_force+0x1300>)
    428e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4292:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4294:	4602      	mov	r2, r0
    4296:	460b      	mov	r3, r1
    4298:	4640      	mov	r0, r8
    429a:	4649      	mov	r1, r9
    429c:	47b8      	blx	r7
    429e:	4680      	mov	r8, r0
    42a0:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    42a2:	ee68 7a09 	vmul.f32	s15, s16, s18
    42a6:	ee17 0a90 	vmov	r0, s15
    42aa:	47a8      	blx	r5
    42ac:	a37c      	add	r3, pc, #496	; (adr r3, 44a0 <mag_to_force+0x1308>)
    42ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    42b2:	47a0      	blx	r4
    42b4:	4602      	mov	r2, r0
    42b6:	460b      	mov	r3, r1
    42b8:	4640      	mov	r0, r8
    42ba:	4649      	mov	r1, r9
    42bc:	47b8      	blx	r7
    42be:	4680      	mov	r8, r0
    42c0:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    42c2:	ee68 7a8a 	vmul.f32	s15, s17, s20
    42c6:	ee17 0a90 	vmov	r0, s15
    42ca:	47a8      	blx	r5
    42cc:	a376      	add	r3, pc, #472	; (adr r3, 44a8 <mag_to_force+0x1310>)
    42ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    42d2:	47a0      	blx	r4
    42d4:	4602      	mov	r2, r0
    42d6:	460b      	mov	r3, r1
    42d8:	4640      	mov	r0, r8
    42da:	4649      	mov	r1, r9
    42dc:	47b0      	blx	r6
    42de:	4680      	mov	r8, r0
    42e0:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    42e2:	ee68 7a0a 	vmul.f32	s15, s16, s20
    42e6:	ee17 0a90 	vmov	r0, s15
    42ea:	47a8      	blx	r5
    42ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    42f0:	a36f      	add	r3, pc, #444	; (adr r3, 44b0 <mag_to_force+0x1318>)
    42f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    42f6:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    42f8:	4602      	mov	r2, r0
    42fa:	460b      	mov	r3, r1
    42fc:	4640      	mov	r0, r8
    42fe:	4649      	mov	r1, r9
    4300:	47b8      	blx	r7
    4302:	47d8      	blx	fp
    4304:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4308:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    430c:	ed9a 9a04 	vldr	s18, [sl, #16]
    4310:	ee19 0a10 	vmov	r0, s18
    4314:	47a8      	blx	r5
    4316:	a368      	add	r3, pc, #416	; (adr r3, 44b8 <mag_to_force+0x1320>)
    4318:	e9d3 2300 	ldrd	r2, r3, [r3]
    431c:	47a0      	blx	r4
    431e:	4602      	mov	r2, r0
    4320:	460b      	mov	r3, r1
    4322:	a167      	add	r1, pc, #412	; (adr r1, 44c0 <mag_to_force+0x1328>)
    4324:	e9d1 0100 	ldrd	r0, r1, [r1]
    4328:	47b0      	blx	r6
    432a:	4680      	mov	r8, r0
    432c:	4689      	mov	r9, r1
    432e:	a366      	add	r3, pc, #408	; (adr r3, 44c8 <mag_to_force+0x1330>)
    4330:	e9d3 2300 	ldrd	r2, r3, [r3]
    4334:	e9dd 0100 	ldrd	r0, r1, [sp]
    4338:	47a0      	blx	r4
    433a:	4602      	mov	r2, r0
    433c:	460b      	mov	r3, r1
    433e:	4640      	mov	r0, r8
    4340:	4649      	mov	r1, r9
    4342:	47b8      	blx	r7
    4344:	4680      	mov	r8, r0
    4346:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4348:	ee69 9a09 	vmul.f32	s19, s18, s18
    434c:	ee19 0a90 	vmov	r0, s19
    4350:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4352:	a35f      	add	r3, pc, #380	; (adr r3, 44d0 <mag_to_force+0x1338>)
    4354:	e9d3 2300 	ldrd	r2, r3, [r3]
    4358:	47a0      	blx	r4
    435a:	4602      	mov	r2, r0
    435c:	460b      	mov	r3, r1
    435e:	4640      	mov	r0, r8
    4360:	4649      	mov	r1, r9
    4362:	47b0      	blx	r6
    4364:	4680      	mov	r8, r0
    4366:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4368:	ee68 7a09 	vmul.f32	s15, s16, s18
    436c:	ee17 0a90 	vmov	r0, s15
    4370:	47a8      	blx	r5
    4372:	a359      	add	r3, pc, #356	; (adr r3, 44d8 <mag_to_force+0x1340>)
    4374:	e9d3 2300 	ldrd	r2, r3, [r3]
    4378:	47a0      	blx	r4
    437a:	4602      	mov	r2, r0
    437c:	460b      	mov	r3, r1
    437e:	4640      	mov	r0, r8
    4380:	4649      	mov	r1, r9
    4382:	47b0      	blx	r6
    4384:	4680      	mov	r8, r0
    4386:	4689      	mov	r9, r1
    4388:	a355      	add	r3, pc, #340	; (adr r3, 44e0 <mag_to_force+0x1348>)
    438a:	e9d3 2300 	ldrd	r2, r3, [r3]
    438e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4392:	47a0      	blx	r4
    4394:	4602      	mov	r2, r0
    4396:	460b      	mov	r3, r1
    4398:	4640      	mov	r0, r8
    439a:	4649      	mov	r1, r9
    439c:	47b8      	blx	r7
    439e:	4680      	mov	r8, r0
    43a0:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    43a2:	ee68 7a29 	vmul.f32	s15, s16, s19
    43a6:	ee17 0a90 	vmov	r0, s15
    43aa:	47a8      	blx	r5
    43ac:	a34e      	add	r3, pc, #312	; (adr r3, 44e8 <mag_to_force+0x1350>)
    43ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    43b2:	47a0      	blx	r4
    43b4:	4602      	mov	r2, r0
    43b6:	460b      	mov	r3, r1
    43b8:	4640      	mov	r0, r8
    43ba:	4649      	mov	r1, r9
    43bc:	47b0      	blx	r6
    43be:	4680      	mov	r8, r0
    43c0:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    43c2:	ee6a 7a09 	vmul.f32	s15, s20, s18
    43c6:	ee17 0a90 	vmov	r0, s15
    43ca:	47a8      	blx	r5
    43cc:	a348      	add	r3, pc, #288	; (adr r3, 44f0 <mag_to_force+0x1358>)
    43ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    43d2:	47a0      	blx	r4
    43d4:	4602      	mov	r2, r0
    43d6:	460b      	mov	r3, r1
    43d8:	4640      	mov	r0, r8
    43da:	4649      	mov	r1, r9
    43dc:	47b0      	blx	r6
    43de:	4680      	mov	r8, r0
    43e0:	4689      	mov	r9, r1
		
    43e2:	a345      	add	r3, pc, #276	; (adr r3, 44f8 <mag_to_force+0x1360>)
    43e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    43e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    43ec:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    43ee:	4602      	mov	r2, r0
    43f0:	460b      	mov	r3, r1
    43f2:	4640      	mov	r0, r8
    43f4:	4649      	mov	r1, r9
    43f6:	47b8      	blx	r7
    43f8:	47d8      	blx	fp
    43fa:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    43fe:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4402:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    4406:	ee19 0a90 	vmov	r0, s19
    440a:	47a8      	blx	r5
    440c:	a33c      	add	r3, pc, #240	; (adr r3, 4500 <mag_to_force+0x1368>)
    440e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4412:	47a0      	blx	r4
    4414:	4602      	mov	r2, r0
    4416:	460b      	mov	r3, r1
    4418:	a13b      	add	r1, pc, #236	; (adr r1, 4508 <mag_to_force+0x1370>)
    441a:	e9d1 0100 	ldrd	r0, r1, [r1]
    441e:	47b0      	blx	r6
    4420:	4680      	mov	r8, r0
    4422:	4689      	mov	r9, r1
    4424:	a33a      	add	r3, pc, #232	; (adr r3, 4510 <mag_to_force+0x1378>)
    4426:	e9d3 2300 	ldrd	r2, r3, [r3]
    442a:	e9dd 0100 	ldrd	r0, r1, [sp]
    442e:	47a0      	blx	r4
    4430:	4602      	mov	r2, r0
    4432:	460b      	mov	r3, r1
    4434:	4640      	mov	r0, r8
    4436:	4649      	mov	r1, r9
    4438:	47b8      	blx	r7
    443a:	4680      	mov	r8, r0
    443c:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    443e:	ee69 aaa9 	vmul.f32	s21, s19, s19
    4442:	ee1a 0a90 	vmov	r0, s21
    4446:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4448:	a333      	add	r3, pc, #204	; (adr r3, 4518 <mag_to_force+0x1380>)
    444a:	e9d3 2300 	ldrd	r2, r3, [r3]
    444e:	47a0      	blx	r4
    4450:	4602      	mov	r2, r0
    4452:	460b      	mov	r3, r1
    4454:	4640      	mov	r0, r8
    4456:	4649      	mov	r1, r9
    4458:	47b8      	blx	r7
    445a:	4680      	mov	r8, r0
    445c:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    445e:	ee68 7a29 	vmul.f32	s15, s16, s19
    4462:	ee17 0a90 	vmov	r0, s15
    4466:	47a8      	blx	r5
    4468:	e070      	b.n	454c <mag_to_force+0x13b4>
    446a:	bf00      	nop
    446c:	f3af 8000 	nop.w
    4470:	412c1a3a 	.word	0x412c1a3a
    4474:	3f3286eb 	.word	0x3f3286eb
    4478:	bc6a7efa 	.word	0xbc6a7efa
    447c:	3ff69374 	.word	0x3ff69374
    4480:	92beb405 	.word	0x92beb405
    4484:	3f36e5f5 	.word	0x3f36e5f5
    4488:	a908d438 	.word	0xa908d438
    448c:	3e864e96 	.word	0x3e864e96
    4490:	17c30410 	.word	0x17c30410
    4494:	3e8a1af8 	.word	0x3e8a1af8
    4498:	3d66d634 	.word	0x3d66d634
    449c:	3e632932 	.word	0x3e632932
    44a0:	1b4047b2 	.word	0x1b4047b2
    44a4:	3da8a10a 	.word	0x3da8a10a
    44a8:	6fcf44ac 	.word	0x6fcf44ac
    44ac:	3da4129b 	.word	0x3da4129b
    44b0:	29e54c52 	.word	0x29e54c52
    44b4:	3d73af87 	.word	0x3d73af87
    44b8:	80f98fa3 	.word	0x80f98fa3
    44bc:	3f726740 	.word	0x3f726740
    44c0:	ed916873 	.word	0xed916873
    44c4:	401f3f7c 	.word	0x401f3f7c
    44c8:	3dfb0d52 	.word	0x3dfb0d52
    44cc:	3f654eb1 	.word	0x3f654eb1
    44d0:	a7d49e3c 	.word	0xa7d49e3c
    44d4:	3e7ceff5 	.word	0x3e7ceff5
    44d8:	4fba36fa 	.word	0x4fba36fa
    44dc:	3ea8b079 	.word	0x3ea8b079
    44e0:	d77b216a 	.word	0xd77b216a
    44e4:	3e91a9bd 	.word	0x3e91a9bd
    44e8:	9612a3e2 	.word	0x9612a3e2
    44ec:	3daa2579 	.word	0x3daa2579
    44f0:	82163668 	.word	0x82163668
    44f4:	3dbcbdc1 	.word	0x3dbcbdc1
    44f8:	9d1f8878 	.word	0x9d1f8878
    44fc:	3da13b46 	.word	0x3da13b46
    4500:	dad31fcd 	.word	0xdad31fcd
    4504:	3f77b634 	.word	0x3f77b634
    4508:	1eb851ec 	.word	0x1eb851ec
    450c:	402c6b85 	.word	0x402c6b85
    4510:	bdcad14a 	.word	0xbdcad14a
    4514:	3f70acc0 	.word	0x3f70acc0
    4518:	60693e8b 	.word	0x60693e8b
    451c:	3ea1b6a0 	.word	0x3ea1b6a0
    4520:	00005981 	.word	0x00005981
    4524:	f40c67fe 	.word	0xf40c67fe
    4528:	3ea64c02 	.word	0x3ea64c02
    452c:	02588cee 	.word	0x02588cee
    4530:	3ea1c2a7 	.word	0x3ea1c2a7
    4534:	884399b8 	.word	0x884399b8
    4538:	3d9e314d 	.word	0x3d9e314d
    453c:	3cc5c3bb 	.word	0x3cc5c3bb
    4540:	3dbb0978 	.word	0x3dbb0978
    4544:	fe5cd623 	.word	0xfe5cd623
    4548:	3da74f44 	.word	0x3da74f44
    454c:	a3f6      	add	r3, pc, #984	; (adr r3, 4928 <mag_to_force+0x1790>)
    454e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4552:	47a0      	blx	r4
    4554:	4602      	mov	r2, r0
    4556:	460b      	mov	r3, r1
    4558:	4640      	mov	r0, r8
    455a:	4649      	mov	r1, r9
    455c:	47b0      	blx	r6
    455e:	4680      	mov	r8, r0
    4560:	4689      	mov	r9, r1
    4562:	a3f3      	add	r3, pc, #972	; (adr r3, 4930 <mag_to_force+0x1798>)
    4564:	e9d3 2300 	ldrd	r2, r3, [r3]
    4568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    456c:	47a0      	blx	r4
    456e:	4602      	mov	r2, r0
    4570:	460b      	mov	r3, r1
    4572:	4640      	mov	r0, r8
    4574:	4649      	mov	r1, r9
    4576:	47b8      	blx	r7
    4578:	4680      	mov	r8, r0
    457a:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    457c:	ee68 7a2a 	vmul.f32	s15, s16, s21
    4580:	ee17 0a90 	vmov	r0, s15
    4584:	47a8      	blx	r5
    4586:	a3ec      	add	r3, pc, #944	; (adr r3, 4938 <mag_to_force+0x17a0>)
    4588:	e9d3 2300 	ldrd	r2, r3, [r3]
    458c:	47a0      	blx	r4
    458e:	4602      	mov	r2, r0
    4590:	460b      	mov	r3, r1
    4592:	4640      	mov	r0, r8
    4594:	4649      	mov	r1, r9
    4596:	47b8      	blx	r7
    4598:	4680      	mov	r8, r0
    459a:	4689      	mov	r9, r1
		
    459c:	ee6a 7a29 	vmul.f32	s15, s20, s19
    45a0:	ee17 0a90 	vmov	r0, s15
    45a4:	47a8      	blx	r5
    45a6:	a3e6      	add	r3, pc, #920	; (adr r3, 4940 <mag_to_force+0x17a8>)
    45a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    45ac:	47a0      	blx	r4
    45ae:	4602      	mov	r2, r0
    45b0:	460b      	mov	r3, r1
    45b2:	4640      	mov	r0, r8
    45b4:	4649      	mov	r1, r9
    45b6:	47b0      	blx	r6
    45b8:	4680      	mov	r8, r0
    45ba:	4689      	mov	r9, r1
		
    45bc:	a3e2      	add	r3, pc, #904	; (adr r3, 4948 <mag_to_force+0x17b0>)
    45be:	e9d3 2300 	ldrd	r2, r3, [r3]
    45c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    45c6:	47a0      	blx	r4
		
    45c8:	4602      	mov	r2, r0
    45ca:	460b      	mov	r3, r1
    45cc:	4640      	mov	r0, r8
    45ce:	4649      	mov	r1, r9
    45d0:	47b8      	blx	r7
    45d2:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    45d4:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    45d8:	ee68 8aa8 	vmul.f32	s17, s17, s17
    45dc:	ee29 9a09 	vmul.f32	s18, s18, s18
    45e0:	ee78 8a89 	vadd.f32	s17, s17, s18
    45e4:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    45e8:	ee18 0a90 	vmov	r0, s17
    45ec:	47a8      	blx	r5
    45ee:	4bcc      	ldr	r3, [pc, #816]	; (4920 <mag_to_force+0x1788>)
    45f0:	4798      	blx	r3
    45f2:	47d8      	blx	fp
    45f4:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    45f8:	ed9a 8a02 	vldr	s16, [sl, #8]
    45fc:	ee18 0a10 	vmov	r0, s16
    4600:	47a8      	blx	r5
    4602:	a39b      	add	r3, pc, #620	; (adr r3, 4870 <mag_to_force+0x16d8>)
    4604:	e9d3 2300 	ldrd	r2, r3, [r3]
    4608:	47a0      	blx	r4
    460a:	4602      	mov	r2, r0
    460c:	460b      	mov	r3, r1
    460e:	a19a      	add	r1, pc, #616	; (adr r1, 4878 <mag_to_force+0x16e0>)
    4610:	e9d1 0100 	ldrd	r0, r1, [r1]
    4614:	47b0      	blx	r6
    4616:	4680      	mov	r8, r0
    4618:	4689      	mov	r9, r1
    461a:	edda 8a08 	vldr	s17, [sl, #32]
    461e:	ee18 0a90 	vmov	r0, s17
    4622:	47a8      	blx	r5
    4624:	e9cd 0100 	strd	r0, r1, [sp]
    4628:	a395      	add	r3, pc, #596	; (adr r3, 4880 <mag_to_force+0x16e8>)
    462a:	e9d3 2300 	ldrd	r2, r3, [r3]
    462e:	47a0      	blx	r4
    4630:	4602      	mov	r2, r0
    4632:	460b      	mov	r3, r1
    4634:	4640      	mov	r0, r8
    4636:	4649      	mov	r1, r9
    4638:	47b0      	blx	r6
    463a:	4680      	mov	r8, r0
    463c:	4689      	mov	r9, r1
    463e:	ee28 9a08 	vmul.f32	s18, s16, s16
    4642:	ee19 0a10 	vmov	r0, s18
    4646:	47a8      	blx	r5
    4648:	a38f      	add	r3, pc, #572	; (adr r3, 4888 <mag_to_force+0x16f0>)
    464a:	e9d3 2300 	ldrd	r2, r3, [r3]
    464e:	47a0      	blx	r4
    4650:	4602      	mov	r2, r0
    4652:	460b      	mov	r3, r1
    4654:	4640      	mov	r0, r8
    4656:	4649      	mov	r1, r9
    4658:	47b0      	blx	r6
    465a:	4680      	mov	r8, r0
    465c:	4689      	mov	r9, r1
    465e:	ee68 7a28 	vmul.f32	s15, s16, s17
    4662:	ee17 0a90 	vmov	r0, s15
    4666:	47a8      	blx	r5
    4668:	a389      	add	r3, pc, #548	; (adr r3, 4890 <mag_to_force+0x16f8>)
    466a:	e9d3 2300 	ldrd	r2, r3, [r3]
    466e:	47a0      	blx	r4
    4670:	4602      	mov	r2, r0
    4672:	460b      	mov	r3, r1
    4674:	4640      	mov	r0, r8
    4676:	4649      	mov	r1, r9
    4678:	47b0      	blx	r6
    467a:	4680      	mov	r8, r0
    467c:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    467e:	ee68 9aa8 	vmul.f32	s19, s17, s17
    4682:	ee19 0a90 	vmov	r0, s19
    4686:	47a8      	blx	r5
    4688:	e9cd 0102 	strd	r0, r1, [sp, #8]
    468c:	a382      	add	r3, pc, #520	; (adr r3, 4898 <mag_to_force+0x1700>)
    468e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4692:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4694:	4602      	mov	r2, r0
    4696:	460b      	mov	r3, r1
    4698:	4640      	mov	r0, r8
    469a:	4649      	mov	r1, r9
    469c:	47b0      	blx	r6
    469e:	4680      	mov	r8, r0
    46a0:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    46a2:	ee68 7a89 	vmul.f32	s15, s17, s18
    46a6:	ee17 0a90 	vmov	r0, s15
    46aa:	47a8      	blx	r5
    46ac:	a37c      	add	r3, pc, #496	; (adr r3, 48a0 <mag_to_force+0x1708>)
    46ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    46b2:	47a0      	blx	r4
    46b4:	4602      	mov	r2, r0
    46b6:	460b      	mov	r3, r1
    46b8:	4640      	mov	r0, r8
    46ba:	4649      	mov	r1, r9
    46bc:	47b0      	blx	r6
    46be:	4680      	mov	r8, r0
    46c0:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    46c2:	ee68 7a29 	vmul.f32	s15, s16, s19
    46c6:	ee17 0a90 	vmov	r0, s15
    46ca:	47a8      	blx	r5
    46cc:	a376      	add	r3, pc, #472	; (adr r3, 48a8 <mag_to_force+0x1710>)
    46ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    46d2:	47a0      	blx	r4
    46d4:	4602      	mov	r2, r0
    46d6:	460b      	mov	r3, r1
    46d8:	4640      	mov	r0, r8
    46da:	4649      	mov	r1, r9
    46dc:	47b0      	blx	r6
    46de:	4680      	mov	r8, r0
    46e0:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    46e2:	ee68 7aa9 	vmul.f32	s15, s17, s19
    46e6:	ee17 0a90 	vmov	r0, s15
    46ea:	47a8      	blx	r5
    46ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    46f0:	a36f      	add	r3, pc, #444	; (adr r3, 48b0 <mag_to_force+0x1718>)
    46f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    46f6:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    46f8:	4602      	mov	r2, r0
    46fa:	460b      	mov	r3, r1
    46fc:	4640      	mov	r0, r8
    46fe:	4649      	mov	r1, r9
    4700:	47b0      	blx	r6
    4702:	47d8      	blx	fp
    4704:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4708:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    470c:	ed9a 9a05 	vldr	s18, [sl, #20]
    4710:	ee19 0a10 	vmov	r0, s18
    4714:	47a8      	blx	r5
    4716:	a368      	add	r3, pc, #416	; (adr r3, 48b8 <mag_to_force+0x1720>)
    4718:	e9d3 2300 	ldrd	r2, r3, [r3]
    471c:	47a0      	blx	r4
    471e:	a368      	add	r3, pc, #416	; (adr r3, 48c0 <mag_to_force+0x1728>)
    4720:	e9d3 2300 	ldrd	r2, r3, [r3]
    4724:	47b0      	blx	r6
    4726:	4680      	mov	r8, r0
    4728:	4689      	mov	r9, r1
    472a:	a367      	add	r3, pc, #412	; (adr r3, 48c8 <mag_to_force+0x1730>)
    472c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4730:	e9dd 0100 	ldrd	r0, r1, [sp]
    4734:	47a0      	blx	r4
    4736:	4602      	mov	r2, r0
    4738:	460b      	mov	r3, r1
    473a:	4640      	mov	r0, r8
    473c:	4649      	mov	r1, r9
    473e:	47b0      	blx	r6
    4740:	4680      	mov	r8, r0
    4742:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4744:	ee29 aa09 	vmul.f32	s20, s18, s18
    4748:	ee1a 0a10 	vmov	r0, s20
    474c:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    474e:	a360      	add	r3, pc, #384	; (adr r3, 48d0 <mag_to_force+0x1738>)
    4750:	e9d3 2300 	ldrd	r2, r3, [r3]
    4754:	47a0      	blx	r4
    4756:	4602      	mov	r2, r0
    4758:	460b      	mov	r3, r1
    475a:	4640      	mov	r0, r8
    475c:	4649      	mov	r1, r9
    475e:	47b8      	blx	r7
    4760:	4680      	mov	r8, r0
    4762:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4764:	462e      	mov	r6, r5
    4766:	ee68 7a89 	vmul.f32	s15, s17, s18
    476a:	ee17 0a90 	vmov	r0, s15
    476e:	47a8      	blx	r5
    4770:	a359      	add	r3, pc, #356	; (adr r3, 48d8 <mag_to_force+0x1740>)
    4772:	e9d3 2300 	ldrd	r2, r3, [r3]
    4776:	47a0      	blx	r4
    4778:	463d      	mov	r5, r7
    477a:	4602      	mov	r2, r0
    477c:	460b      	mov	r3, r1
    477e:	4640      	mov	r0, r8
    4780:	4649      	mov	r1, r9
    4782:	47b8      	blx	r7
    4784:	4680      	mov	r8, r0
    4786:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4788:	a355      	add	r3, pc, #340	; (adr r3, 48e0 <mag_to_force+0x1748>)
    478a:	e9d3 2300 	ldrd	r2, r3, [r3]
    478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4792:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4794:	4f63      	ldr	r7, [pc, #396]	; (4924 <mag_to_force+0x178c>)
    4796:	4602      	mov	r2, r0
    4798:	460b      	mov	r3, r1
    479a:	4640      	mov	r0, r8
    479c:	4649      	mov	r1, r9
    479e:	47b8      	blx	r7
    47a0:	4680      	mov	r8, r0
    47a2:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    47a4:	ee68 7a8a 	vmul.f32	s15, s17, s20
    47a8:	ee17 0a90 	vmov	r0, s15
    47ac:	47b0      	blx	r6
    47ae:	a34e      	add	r3, pc, #312	; (adr r3, 48e8 <mag_to_force+0x1750>)
    47b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    47b4:	47a0      	blx	r4
    47b6:	4602      	mov	r2, r0
    47b8:	460b      	mov	r3, r1
    47ba:	4640      	mov	r0, r8
    47bc:	4649      	mov	r1, r9
    47be:	47a8      	blx	r5
    47c0:	4680      	mov	r8, r0
    47c2:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    47c4:	ee69 7a89 	vmul.f32	s15, s19, s18
    47c8:	ee17 0a90 	vmov	r0, s15
    47cc:	47b0      	blx	r6
    47ce:	a348      	add	r3, pc, #288	; (adr r3, 48f0 <mag_to_force+0x1758>)
    47d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    47d4:	47a0      	blx	r4
    47d6:	4602      	mov	r2, r0
    47d8:	460b      	mov	r3, r1
    47da:	4640      	mov	r0, r8
    47dc:	4649      	mov	r1, r9
    47de:	47a8      	blx	r5
    47e0:	4680      	mov	r8, r0
    47e2:	4689      	mov	r9, r1
		break;
    47e4:	a344      	add	r3, pc, #272	; (adr r3, 48f8 <mag_to_force+0x1760>)
    47e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    47ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    47ee:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    47f0:	4602      	mov	r2, r0
    47f2:	460b      	mov	r3, r1
    47f4:	4640      	mov	r0, r8
    47f6:	4649      	mov	r1, r9
    47f8:	47b8      	blx	r7
    47fa:	47d8      	blx	fp
    47fc:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    4800:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4804:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    4808:	ee19 0a10 	vmov	r0, s18
    480c:	47b0      	blx	r6
    480e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4812:	a33b      	add	r3, pc, #236	; (adr r3, 4900 <mag_to_force+0x1768>)
    4814:	e9d3 2300 	ldrd	r2, r3, [r3]
    4818:	47a0      	blx	r4
    481a:	4602      	mov	r2, r0
    481c:	460b      	mov	r3, r1
    481e:	a13a      	add	r1, pc, #232	; (adr r1, 4908 <mag_to_force+0x1770>)
    4820:	e9d1 0100 	ldrd	r0, r1, [r1]
    4824:	47b8      	blx	r7
    4826:	4680      	mov	r8, r0
    4828:	4689      	mov	r9, r1
    482a:	a339      	add	r3, pc, #228	; (adr r3, 4910 <mag_to_force+0x1778>)
    482c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4830:	e9dd 0100 	ldrd	r0, r1, [sp]
    4834:	47a0      	blx	r4
    4836:	4602      	mov	r2, r0
    4838:	460b      	mov	r3, r1
    483a:	4640      	mov	r0, r8
    483c:	4649      	mov	r1, r9
    483e:	47a8      	blx	r5
    4840:	4680      	mov	r8, r0
    4842:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4844:	ee69 7a09 	vmul.f32	s15, s18, s18
    4848:	ee17 0a90 	vmov	r0, s15
    484c:	47b0      	blx	r6
    484e:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    4852:	a331      	add	r3, pc, #196	; (adr r3, 4918 <mag_to_force+0x1780>)
    4854:	e9d3 2300 	ldrd	r2, r3, [r3]
    4858:	47a0      	blx	r4
    485a:	4602      	mov	r2, r0
    485c:	460b      	mov	r3, r1
    485e:	4640      	mov	r0, r8
    4860:	4649      	mov	r1, r9
    4862:	47a8      	blx	r5
    4864:	4680      	mov	r8, r0
    4866:	4689      	mov	r9, r1
    4868:	e072      	b.n	4950 <mag_to_force+0x17b8>
    486a:	bf00      	nop
    486c:	f3af 8000 	nop.w
    4870:	6b50b0f2 	.word	0x6b50b0f2
    4874:	3f6c779a 	.word	0x3f6c779a
    4878:	c28f5c29 	.word	0xc28f5c29
    487c:	c024a8f5 	.word	0xc024a8f5
    4880:	d5171e2a 	.word	0xd5171e2a
    4884:	3f68a222 	.word	0x3f68a222
    4888:	69edc5c6 	.word	0x69edc5c6
    488c:	3ea5a9a9 	.word	0x3ea5a9a9
    4890:	81bc997e 	.word	0x81bc997e
    4894:	3ea8aec1 	.word	0x3ea8aec1
    4898:	de9fb9ed 	.word	0xde9fb9ed
    489c:	3e9247cb 	.word	0x3e9247cb
    48a0:	82393435 	.word	0x82393435
    48a4:	3dc8377c 	.word	0x3dc8377c
    48a8:	e19c6262 	.word	0xe19c6262
    48ac:	3dc1773a 	.word	0x3dc1773a
    48b0:	7476128f 	.word	0x7476128f
    48b4:	3da06d3c 	.word	0x3da06d3c
    48b8:	b0fadf2f 	.word	0xb0fadf2f
    48bc:	3f65a8de 	.word	0x3f65a8de
    48c0:	9ba5e354 	.word	0x9ba5e354
    48c4:	400120c4 	.word	0x400120c4
    48c8:	ef1fddec 	.word	0xef1fddec
    48cc:	3f432b55 	.word	0x3f432b55
    48d0:	ebb865dc 	.word	0xebb865dc
    48d4:	3ea2ee70 	.word	0x3ea2ee70
    48d8:	ea8666cf 	.word	0xea8666cf
    48dc:	3e853bb5 	.word	0x3e853bb5
    48e0:	5799a806 	.word	0x5799a806
    48e4:	3e6193c0 	.word	0x3e6193c0
    48e8:	cece3cda 	.word	0xcece3cda
    48ec:	3dc62920 	.word	0x3dc62920
    48f0:	d5564f58 	.word	0xd5564f58
    48f4:	3d683df5 	.word	0x3d683df5
    48f8:	664dc709 	.word	0x664dc709
    48fc:	3d626c2b 	.word	0x3d626c2b
    4900:	c4cdfaca 	.word	0xc4cdfaca
    4904:	3f762174 	.word	0x3f762174
    4908:	f5c28f5c 	.word	0xf5c28f5c
    490c:	40399c28 	.word	0x40399c28
    4910:	5cc42635 	.word	0x5cc42635
    4914:	3f7db552 	.word	0x3f7db552
    4918:	88e4e2e6 	.word	0x88e4e2e6
    491c:	3eb215f9 	.word	0x3eb215f9
    4920:	00005981 	.word	0x00005981
    4924:	00005bc1 	.word	0x00005bc1
    4928:	02547d8d 	.word	0x02547d8d
    492c:	3ea9b22c 	.word	0x3ea9b22c
    4930:	227c1fc4 	.word	0x227c1fc4
    4934:	3e96b3f3 	.word	0x3e96b3f3
    4938:	f946a57c 	.word	0xf946a57c
    493c:	3db0a587 	.word	0x3db0a587
    4940:	82163668 	.word	0x82163668
    4944:	3dbcbdc1 	.word	0x3dbcbdc1
    4948:	02de4486 	.word	0x02de4486
    494c:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    4950:	a334      	add	r3, pc, #208	; (adr r3, 4a24 <mag_to_force+0x188c>)
    4952:	e9d3 2300 	ldrd	r2, r3, [r3]
    4956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    495a:	47a0      	blx	r4
    495c:	4602      	mov	r2, r0
    495e:	460b      	mov	r3, r1
    4960:	e9dd 0100 	ldrd	r0, r1, [sp]
    4964:	47a0      	blx	r4
    4966:	4602      	mov	r2, r0
    4968:	460b      	mov	r3, r1
    496a:	4640      	mov	r0, r8
    496c:	4649      	mov	r1, r9
    496e:	47b8      	blx	r7
    4970:	4680      	mov	r8, r0
    4972:	4689      	mov	r9, r1
    4974:	a32d      	add	r3, pc, #180	; (adr r3, 4a2c <mag_to_force+0x1894>)
    4976:	e9d3 2300 	ldrd	r2, r3, [r3]
    497a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    497e:	47a0      	blx	r4
    4980:	4602      	mov	r2, r0
    4982:	460b      	mov	r3, r1
    4984:	4640      	mov	r0, r8
    4986:	4649      	mov	r1, r9
    4988:	47a8      	blx	r5
    498a:	4680      	mov	r8, r0
    498c:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    498e:	a329      	add	r3, pc, #164	; (adr r3, 4a34 <mag_to_force+0x189c>)
    4990:	e9d3 2300 	ldrd	r2, r3, [r3]
    4994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4998:	47a0      	blx	r4
    499a:	4602      	mov	r2, r0
    499c:	460b      	mov	r3, r1
    499e:	e9dd 0100 	ldrd	r0, r1, [sp]
    49a2:	47a0      	blx	r4
    49a4:	4602      	mov	r2, r0
    49a6:	460b      	mov	r3, r1
    49a8:	4640      	mov	r0, r8
    49aa:	4649      	mov	r1, r9
    49ac:	47a8      	blx	r5
    49ae:	4680      	mov	r8, r0
    49b0:	4689      	mov	r9, r1
		break;
    49b2:	a322      	add	r3, pc, #136	; (adr r3, 4a3c <mag_to_force+0x18a4>)
    49b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    49b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    49bc:	47a0      	blx	r4
    49be:	4602      	mov	r2, r0
    49c0:	460b      	mov	r3, r1
    49c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    49c6:	47a0      	blx	r4
    49c8:	4602      	mov	r2, r0
    49ca:	460b      	mov	r3, r1
    49cc:	4640      	mov	r0, r8
    49ce:	4649      	mov	r1, r9
    49d0:	47b8      	blx	r7
    49d2:	4680      	mov	r8, r0
    49d4:	4689      	mov	r9, r1
    49d6:	a31b      	add	r3, pc, #108	; (adr r3, 4a44 <mag_to_force+0x18ac>)
    49d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    49dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    49e0:	47a0      	blx	r4
	
    49e2:	4602      	mov	r2, r0
    49e4:	460b      	mov	r3, r1
    49e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    49ea:	47a0      	blx	r4
		break;
    49ec:	4602      	mov	r2, r0
    49ee:	460b      	mov	r3, r1
    49f0:	4640      	mov	r0, r8
    49f2:	4649      	mov	r1, r9
    49f4:	47a8      	blx	r5
    49f6:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    49f8:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    49fc:	ee28 8a08 	vmul.f32	s16, s16, s16
    4a00:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4a04:	ee38 8a28 	vadd.f32	s16, s16, s17
    4a08:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    4a0c:	ee18 0a10 	vmov	r0, s16
    4a10:	47b0      	blx	r6
    4a12:	4b03      	ldr	r3, [pc, #12]	; (4a20 <mag_to_force+0x1888>)
    4a14:	4798      	blx	r3
    4a16:	47d8      	blx	fp
    4a18:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
		break;
    4a1c:	f7fe bbca 	b.w	31b4 <mag_to_force+0x1c>
    4a20:	00005981 	.word	0x00005981
    4a24:	5a723736 	.word	0x5a723736
    4a28:	3ea77381 	.word	0x3ea77381
    4a2c:	4e8b8a55 	.word	0x4e8b8a55
    4a30:	3ea47f97 	.word	0x3ea47f97
    4a34:	a48fe74d 	.word	0xa48fe74d
    4a38:	3dce7643 	.word	0x3dce7643
    4a3c:	e61b6f11 	.word	0xe61b6f11
    4a40:	3db71428 	.word	0x3db71428
    4a44:	447e7fdf 	.word	0x447e7fdf
    4a48:	3dacd9e7 	.word	0x3dacd9e7
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4a4c:	edd1 8a00 	vldr	s17, [r1]
    4a50:	4dcb      	ldr	r5, [pc, #812]	; (4d80 <mag_to_force+0x1be8>)
    4a52:	ee18 0a90 	vmov	r0, s17
    4a56:	47a8      	blx	r5
    4a58:	4cca      	ldr	r4, [pc, #808]	; (4d84 <mag_to_force+0x1bec>)
    4a5a:	a39d      	add	r3, pc, #628	; (adr r3, 4cd0 <mag_to_force+0x1b38>)
    4a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a60:	47a0      	blx	r4
    4a62:	4ec9      	ldr	r6, [pc, #804]	; (4d88 <mag_to_force+0x1bf0>)
    4a64:	4602      	mov	r2, r0
    4a66:	460b      	mov	r3, r1
    4a68:	a19b      	add	r1, pc, #620	; (adr r1, 4cd8 <mag_to_force+0x1b40>)
    4a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a6e:	47b0      	blx	r6
    4a70:	4680      	mov	r8, r0
    4a72:	4689      	mov	r9, r1
    4a74:	ed9a 8a06 	vldr	s16, [sl, #24]
    4a78:	ee18 0a10 	vmov	r0, s16
    4a7c:	47a8      	blx	r5
    4a7e:	e9cd 0100 	strd	r0, r1, [sp]
    4a82:	a397      	add	r3, pc, #604	; (adr r3, 4ce0 <mag_to_force+0x1b48>)
    4a84:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a88:	47a0      	blx	r4
    4a8a:	4fc0      	ldr	r7, [pc, #768]	; (4d8c <mag_to_force+0x1bf4>)
    4a8c:	4602      	mov	r2, r0
    4a8e:	460b      	mov	r3, r1
    4a90:	4640      	mov	r0, r8
    4a92:	4649      	mov	r1, r9
    4a94:	47b8      	blx	r7
    4a96:	4680      	mov	r8, r0
    4a98:	4689      	mov	r9, r1
    4a9a:	ee28 9aa8 	vmul.f32	s18, s17, s17
    4a9e:	ee19 0a10 	vmov	r0, s18
    4aa2:	47a8      	blx	r5
    4aa4:	a390      	add	r3, pc, #576	; (adr r3, 4ce8 <mag_to_force+0x1b50>)
    4aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aaa:	47a0      	blx	r4
    4aac:	4602      	mov	r2, r0
    4aae:	460b      	mov	r3, r1
    4ab0:	4640      	mov	r0, r8
    4ab2:	4649      	mov	r1, r9
    4ab4:	47b8      	blx	r7
    4ab6:	4680      	mov	r8, r0
    4ab8:	4689      	mov	r9, r1
    4aba:	ee68 7a88 	vmul.f32	s15, s17, s16
    4abe:	ee17 0a90 	vmov	r0, s15
    4ac2:	47a8      	blx	r5
    4ac4:	a38a      	add	r3, pc, #552	; (adr r3, 4cf0 <mag_to_force+0x1b58>)
    4ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aca:	47a0      	blx	r4
    4acc:	4602      	mov	r2, r0
    4ace:	460b      	mov	r3, r1
    4ad0:	4640      	mov	r0, r8
    4ad2:	4649      	mov	r1, r9
    4ad4:	47b0      	blx	r6
    4ad6:	4680      	mov	r8, r0
    4ad8:	4689      	mov	r9, r1
    4ada:	ee28 aa08 	vmul.f32	s20, s16, s16
    4ade:	ee1a 0a10 	vmov	r0, s20
    4ae2:	47a8      	blx	r5
    4ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4ae8:	a383      	add	r3, pc, #524	; (adr r3, 4cf8 <mag_to_force+0x1b60>)
    4aea:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aee:	47a0      	blx	r4
    4af0:	4602      	mov	r2, r0
    4af2:	460b      	mov	r3, r1
    4af4:	4640      	mov	r0, r8
    4af6:	4649      	mov	r1, r9
    4af8:	47b8      	blx	r7
    4afa:	4680      	mov	r8, r0
    4afc:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4afe:	ee68 7a09 	vmul.f32	s15, s16, s18
    4b02:	ee17 0a90 	vmov	r0, s15
    4b06:	47a8      	blx	r5
    4b08:	a37d      	add	r3, pc, #500	; (adr r3, 4d00 <mag_to_force+0x1b68>)
    4b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b0e:	47a0      	blx	r4
    4b10:	4602      	mov	r2, r0
    4b12:	460b      	mov	r3, r1
    4b14:	4640      	mov	r0, r8
    4b16:	4649      	mov	r1, r9
    4b18:	47b8      	blx	r7
    4b1a:	4680      	mov	r8, r0
    4b1c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4b1e:	ee68 7a8a 	vmul.f32	s15, s17, s20
    4b22:	ee17 0a90 	vmov	r0, s15
    4b26:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4b28:	a377      	add	r3, pc, #476	; (adr r3, 4d08 <mag_to_force+0x1b70>)
    4b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b2e:	47a0      	blx	r4
    4b30:	4602      	mov	r2, r0
    4b32:	460b      	mov	r3, r1
    4b34:	4640      	mov	r0, r8
    4b36:	4649      	mov	r1, r9
    4b38:	47b0      	blx	r6
    4b3a:	4680      	mov	r8, r0
    4b3c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4b3e:	ee68 7a0a 	vmul.f32	s15, s16, s20
    4b42:	ee17 0a90 	vmov	r0, s15
    4b46:	47a8      	blx	r5
    4b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4b4c:	a370      	add	r3, pc, #448	; (adr r3, 4d10 <mag_to_force+0x1b78>)
    4b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b52:	47a0      	blx	r4
    4b54:	4602      	mov	r2, r0
    4b56:	460b      	mov	r3, r1
    4b58:	4640      	mov	r0, r8
    4b5a:	4649      	mov	r1, r9
    4b5c:	47b8      	blx	r7
    4b5e:	f8df b230 	ldr.w	fp, [pc, #560]	; 4d90 <mag_to_force+0x1bf8>
    4b62:	47d8      	blx	fp
    4b64:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_top= 13.33 - (0.003288*sensor_row->b_x_top) + (0.003361*sensor_row->b_z_top) + (0.000000724*(sensor_row->b_x_top*sensor_row->b_x_top)) - (0.0000006201*(sensor_row->b_x_top*sensor_row->b_z_top)) + (0.0000002654*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000004886*((sensor_row->b_x_top*sensor_row->b_x_top)*sensor_row->b_z_top)) - (0.0000000000242*(sensor_row->b_x_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000006595*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4b68:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4b6c:	ed9a 9a03 	vldr	s18, [sl, #12]
    4b70:	ee19 0a10 	vmov	r0, s18
    4b74:	47a8      	blx	r5
    4b76:	a368      	add	r3, pc, #416	; (adr r3, 4d18 <mag_to_force+0x1b80>)
    4b78:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b7c:	47a0      	blx	r4
    4b7e:	4602      	mov	r2, r0
    4b80:	460b      	mov	r3, r1
    4b82:	a167      	add	r1, pc, #412	; (adr r1, 4d20 <mag_to_force+0x1b88>)
    4b84:	e9d1 0100 	ldrd	r0, r1, [r1]
    4b88:	47b0      	blx	r6
    4b8a:	4680      	mov	r8, r0
    4b8c:	4689      	mov	r9, r1
    4b8e:	a366      	add	r3, pc, #408	; (adr r3, 4d28 <mag_to_force+0x1b90>)
    4b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b94:	e9dd 0100 	ldrd	r0, r1, [sp]
    4b98:	47a0      	blx	r4
    4b9a:	4602      	mov	r2, r0
    4b9c:	460b      	mov	r3, r1
    4b9e:	4640      	mov	r0, r8
    4ba0:	4649      	mov	r1, r9
    4ba2:	47b8      	blx	r7
    4ba4:	4680      	mov	r8, r0
    4ba6:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4ba8:	ee69 9a09 	vmul.f32	s19, s18, s18
    4bac:	ee19 0a90 	vmov	r0, s19
    4bb0:	47a8      	blx	r5
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4bb2:	a35f      	add	r3, pc, #380	; (adr r3, 4d30 <mag_to_force+0x1b98>)
    4bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bb8:	47a0      	blx	r4
    4bba:	4602      	mov	r2, r0
    4bbc:	460b      	mov	r3, r1
    4bbe:	4640      	mov	r0, r8
    4bc0:	4649      	mov	r1, r9
    4bc2:	47b8      	blx	r7
    4bc4:	4680      	mov	r8, r0
    4bc6:	4689      	mov	r9, r1
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4bc8:	ee68 7a09 	vmul.f32	s15, s16, s18
    4bcc:	ee17 0a90 	vmov	r0, s15
    4bd0:	47a8      	blx	r5
    4bd2:	a359      	add	r3, pc, #356	; (adr r3, 4d38 <mag_to_force+0x1ba0>)
    4bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bd8:	47a0      	blx	r4
    4bda:	4602      	mov	r2, r0
    4bdc:	460b      	mov	r3, r1
    4bde:	4640      	mov	r0, r8
    4be0:	4649      	mov	r1, r9
    4be2:	47b0      	blx	r6
    4be4:	4680      	mov	r8, r0
    4be6:	4689      	mov	r9, r1
    4be8:	a355      	add	r3, pc, #340	; (adr r3, 4d40 <mag_to_force+0x1ba8>)
    4bea:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4bf2:	47a0      	blx	r4
    4bf4:	4602      	mov	r2, r0
    4bf6:	460b      	mov	r3, r1
    4bf8:	4640      	mov	r0, r8
    4bfa:	4649      	mov	r1, r9
    4bfc:	47b8      	blx	r7
    4bfe:	4680      	mov	r8, r0
    4c00:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4c02:	ee68 7a29 	vmul.f32	s15, s16, s19
    4c06:	ee17 0a90 	vmov	r0, s15
    4c0a:	47a8      	blx	r5
    4c0c:	a34e      	add	r3, pc, #312	; (adr r3, 4d48 <mag_to_force+0x1bb0>)
    4c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c12:	47a0      	blx	r4
    4c14:	4602      	mov	r2, r0
    4c16:	460b      	mov	r3, r1
    4c18:	4640      	mov	r0, r8
    4c1a:	4649      	mov	r1, r9
    4c1c:	47b8      	blx	r7
    4c1e:	4680      	mov	r8, r0
    4c20:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4c22:	ee6a 7a09 	vmul.f32	s15, s20, s18
    4c26:	ee17 0a90 	vmov	r0, s15
    4c2a:	47a8      	blx	r5
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4c2c:	a348      	add	r3, pc, #288	; (adr r3, 4d50 <mag_to_force+0x1bb8>)
    4c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c32:	47a0      	blx	r4
    4c34:	4602      	mov	r2, r0
    4c36:	460b      	mov	r3, r1
    4c38:	4640      	mov	r0, r8
    4c3a:	4649      	mov	r1, r9
    4c3c:	47b0      	blx	r6
    4c3e:	4680      	mov	r8, r0
    4c40:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4c42:	a345      	add	r3, pc, #276	; (adr r3, 4d58 <mag_to_force+0x1bc0>)
    4c44:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4c4c:	47a0      	blx	r4
    4c4e:	4602      	mov	r2, r0
    4c50:	460b      	mov	r3, r1
    4c52:	4640      	mov	r0, r8
    4c54:	4649      	mov	r1, r9
    4c56:	47b8      	blx	r7
    4c58:	47d8      	blx	fp
    4c5a:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_top= 2.824 - (0.0004832*sensor_row->b_y_top) + (0.001006*sensor_row->b_z_top) + (0.000000521*(sensor_row->b_y_top*sensor_row->b_y_top)) - (0.0000003988*(sensor_row->b_y_top*sensor_row->b_z_top)) + (0.000000135*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.00000000003199*((sensor_row->b_y_top*sensor_row->b_y_top)*sensor_row->b_z_top)) - (0.0000000000218*(sensor_row->b_y_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.000000000004829*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4c5e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4c62:	edda 9a09 	vldr	s19, [sl, #36]	; 0x24
    4c66:	ee19 0a90 	vmov	r0, s19
    4c6a:	47a8      	blx	r5
    4c6c:	a33c      	add	r3, pc, #240	; (adr r3, 4d60 <mag_to_force+0x1bc8>)
    4c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c72:	47a0      	blx	r4
    4c74:	4602      	mov	r2, r0
    4c76:	460b      	mov	r3, r1
    4c78:	a13b      	add	r1, pc, #236	; (adr r1, 4d68 <mag_to_force+0x1bd0>)
    4c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
    4c7e:	47b0      	blx	r6
    4c80:	4680      	mov	r8, r0
    4c82:	4689      	mov	r9, r1
    4c84:	a33a      	add	r3, pc, #232	; (adr r3, 4d70 <mag_to_force+0x1bd8>)
    4c86:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
    4c8e:	47a0      	blx	r4
    4c90:	4602      	mov	r2, r0
    4c92:	460b      	mov	r3, r1
    4c94:	4640      	mov	r0, r8
    4c96:	4649      	mov	r1, r9
    4c98:	47b8      	blx	r7
    4c9a:	4680      	mov	r8, r0
    4c9c:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4c9e:	ee69 aaa9 	vmul.f32	s21, s19, s19
    4ca2:	ee1a 0a90 	vmov	r0, s21
    4ca6:	47a8      	blx	r5
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4ca8:	a333      	add	r3, pc, #204	; (adr r3, 4d78 <mag_to_force+0x1be0>)
    4caa:	e9d3 2300 	ldrd	r2, r3, [r3]
    4cae:	47a0      	blx	r4
    4cb0:	4602      	mov	r2, r0
    4cb2:	460b      	mov	r3, r1
    4cb4:	4640      	mov	r0, r8
    4cb6:	4649      	mov	r1, r9
    4cb8:	47b8      	blx	r7
    4cba:	4680      	mov	r8, r0
    4cbc:	4689      	mov	r9, r1
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4cbe:	ee68 7a29 	vmul.f32	s15, s16, s19
    4cc2:	ee17 0a90 	vmov	r0, s15
    4cc6:	47a8      	blx	r5
    4cc8:	e064      	b.n	4d94 <mag_to_force+0x1bfc>
    4cca:	bf00      	nop
    4ccc:	f3af 8000 	nop.w
    4cd0:	8f041462 	.word	0x8f041462
    4cd4:	3f6aef6f 	.word	0x3f6aef6f
    4cd8:	c28f5c29 	.word	0xc28f5c29
    4cdc:	402aa8f5 	.word	0x402aa8f5
    4ce0:	229e9079 	.word	0x229e9079
    4ce4:	3f6b8887 	.word	0x3f6b8887
    4ce8:	d646eb6e 	.word	0xd646eb6e
    4cec:	3ea84b1c 	.word	0x3ea84b1c
    4cf0:	521dd696 	.word	0x521dd696
    4cf4:	3ea4ce9e 	.word	0x3ea4ce9e
    4cf8:	8b46aa0f 	.word	0x8b46aa0f
    4cfc:	3e91cf89 	.word	0x3e91cf89
    4d00:	05b88164 	.word	0x05b88164
    4d04:	3dcadc6f 	.word	0x3dcadc6f
    4d08:	c6957207 	.word	0xc6957207
    4d0c:	3dba9bb1 	.word	0x3dba9bb1
    4d10:	54aa19eb 	.word	0x54aa19eb
    4d14:	3d9d014f 	.word	0x3d9d014f
    4d18:	328a96c7 	.word	0x328a96c7
    4d1c:	3f3faac0 	.word	0x3f3faac0
    4d20:	4fdf3b64 	.word	0x4fdf3b64
    4d24:	4006978d 	.word	0x4006978d
    4d28:	4662bae0 	.word	0x4662bae0
    4d2c:	3f507b78 	.word	0x3f507b78
    4d30:	1dbb855a 	.word	0x1dbb855a
    4d34:	3ea17b5b 	.word	0x3ea17b5b
    4d38:	f2d94d7a 	.word	0xf2d94d7a
    4d3c:	3e9ac354 	.word	0x3e9ac354
    4d40:	8ed8f651 	.word	0x8ed8f651
    4d44:	3e821e90 	.word	0x3e821e90
    4d48:	37757ffe 	.word	0x37757ffe
    4d4c:	3dc19631 	.word	0x3dc19631
    4d50:	8cce8eea 	.word	0x8cce8eea
    4d54:	3db7f827 	.word	0x3db7f827
    4d58:	7c871c2d 	.word	0x7c871c2d
    4d5c:	3d953cf8 	.word	0x3d953cf8
    4d60:	94ccab3f 	.word	0x94ccab3f
    4d64:	3f72dfd6 	.word	0x3f72dfd6
    4d68:	eb851eb8 	.word	0xeb851eb8
    4d6c:	40387851 	.word	0x40387851
    4d70:	9f51697f 	.word	0x9f51697f
    4d74:	3f7b0ee4 	.word	0x3f7b0ee4
    4d78:	fec17451 	.word	0xfec17451
    4d7c:	3e9ad482 	.word	0x3e9ad482
    4d80:	00005e81 	.word	0x00005e81
    4d84:	00005f29 	.word	0x00005f29
    4d88:	00005bc1 	.word	0x00005bc1
    4d8c:	00005bc5 	.word	0x00005bc5
    4d90:	00006489 	.word	0x00006489
    4d94:	a3f5      	add	r3, pc, #980	; (adr r3, 516c <mag_to_force+0x1fd4>)
    4d96:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d9a:	47a0      	blx	r4
    4d9c:	4602      	mov	r2, r0
    4d9e:	460b      	mov	r3, r1
    4da0:	4640      	mov	r0, r8
    4da2:	4649      	mov	r1, r9
    4da4:	47b0      	blx	r6
    4da6:	4680      	mov	r8, r0
    4da8:	4689      	mov	r9, r1
    4daa:	a3f2      	add	r3, pc, #968	; (adr r3, 5174 <mag_to_force+0x1fdc>)
    4dac:	e9d3 2300 	ldrd	r2, r3, [r3]
    4db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4db4:	47a0      	blx	r4
    4db6:	4602      	mov	r2, r0
    4db8:	460b      	mov	r3, r1
    4dba:	4640      	mov	r0, r8
    4dbc:	4649      	mov	r1, r9
    4dbe:	47b8      	blx	r7
    4dc0:	4680      	mov	r8, r0
    4dc2:	4689      	mov	r9, r1
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4dc4:	ee68 7a2a 	vmul.f32	s15, s16, s21
    4dc8:	ee17 0a90 	vmov	r0, s15
    4dcc:	47a8      	blx	r5
    4dce:	a3eb      	add	r3, pc, #940	; (adr r3, 517c <mag_to_force+0x1fe4>)
    4dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dd4:	47a0      	blx	r4
    4dd6:	4602      	mov	r2, r0
    4dd8:	460b      	mov	r3, r1
    4dda:	4640      	mov	r0, r8
    4ddc:	4649      	mov	r1, r9
    4dde:	47b8      	blx	r7
    4de0:	4680      	mov	r8, r0
    4de2:	4689      	mov	r9, r1
			
    4de4:	ee6a 7a29 	vmul.f32	s15, s20, s19
    4de8:	ee17 0a90 	vmov	r0, s15
    4dec:	47a8      	blx	r5
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4dee:	a3e5      	add	r3, pc, #916	; (adr r3, 5184 <mag_to_force+0x1fec>)
    4df0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4df4:	47a0      	blx	r4
    4df6:	4602      	mov	r2, r0
    4df8:	460b      	mov	r3, r1
    4dfa:	4640      	mov	r0, r8
    4dfc:	4649      	mov	r1, r9
    4dfe:	47b0      	blx	r6
    4e00:	4680      	mov	r8, r0
    4e02:	4689      	mov	r9, r1
			
    4e04:	a3e1      	add	r3, pc, #900	; (adr r3, 518c <mag_to_force+0x1ff4>)
    4e06:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4e0e:	47a0      	blx	r4
    4e10:	4602      	mov	r2, r0
    4e12:	460b      	mov	r3, r1
    4e14:	4640      	mov	r0, r8
    4e16:	4649      	mov	r1, r9
    4e18:	47b8      	blx	r7
    4e1a:	47d8      	blx	fp
			sensor_row->force_z_top= 24.47 - (0.004608*sensor_row->b_r_top) + (0.006606*sensor_row->b_z_top) + (0.0000003998*(sensor_row->b_r_top*sensor_row->b_r_top)) - (0.0000006645*(sensor_row->b_r_top*sensor_row->b_z_top)) + (0.0000005293*(sensor_row->b_z_top*sensor_row->b_z_top)) + (0.000000000006865*((sensor_row->b_r_top*sensor_row->b_r_top)*sensor_row->b_z_top)) - (0.00000000002459*(sensor_row->b_r_top*(sensor_row->b_z_top*sensor_row->b_z_top))) + (0.0000000000106*((sensor_row->b_z_top*sensor_row->b_z_top)*sensor_row->b_z_top));
    4e1c:	f8ca 0048 	str.w	r0, [sl, #72]	; 0x48
			sensor_row->force_r_top= (sensor_row->force_x_top*sensor_row->force_x_top) + (sensor_row->force_y_top*sensor_row->force_y_top);
    4e20:	ee68 8aa8 	vmul.f32	s17, s17, s17
    4e24:	ee29 9a09 	vmul.f32	s18, s18, s18
    4e28:	ee78 8a89 	vadd.f32	s17, s17, s18
    4e2c:	edca 8a15 	vstr	s17, [sl, #84]	; 0x54
			sensor_row->force_r_top = sqrt(sensor_row->force_r_top);
    4e30:	ee18 0a90 	vmov	r0, s17
    4e34:	47a8      	blx	r5
    4e36:	4bcc      	ldr	r3, [pc, #816]	; (5168 <mag_to_force+0x1fd0>)
    4e38:	4798      	blx	r3
    4e3a:	47d8      	blx	fp
    4e3c:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4e40:	edda 8a01 	vldr	s17, [sl, #4]
    4e44:	ee18 0a90 	vmov	r0, s17
    4e48:	47a8      	blx	r5
    4e4a:	a39b      	add	r3, pc, #620	; (adr r3, 50b8 <mag_to_force+0x1f20>)
    4e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e50:	47a0      	blx	r4
    4e52:	4602      	mov	r2, r0
    4e54:	460b      	mov	r3, r1
    4e56:	a19a      	add	r1, pc, #616	; (adr r1, 50c0 <mag_to_force+0x1f28>)
    4e58:	e9d1 0100 	ldrd	r0, r1, [r1]
    4e5c:	47b0      	blx	r6
    4e5e:	4680      	mov	r8, r0
    4e60:	4689      	mov	r9, r1
    4e62:	ed9a 8a07 	vldr	s16, [sl, #28]
    4e66:	ee18 0a10 	vmov	r0, s16
    4e6a:	47a8      	blx	r5
    4e6c:	e9cd 0100 	strd	r0, r1, [sp]
    4e70:	a395      	add	r3, pc, #596	; (adr r3, 50c8 <mag_to_force+0x1f30>)
    4e72:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e76:	47a0      	blx	r4
    4e78:	4602      	mov	r2, r0
    4e7a:	460b      	mov	r3, r1
    4e7c:	4640      	mov	r0, r8
    4e7e:	4649      	mov	r1, r9
    4e80:	47b8      	blx	r7
    4e82:	4680      	mov	r8, r0
    4e84:	4689      	mov	r9, r1
    4e86:	ee28 9aa8 	vmul.f32	s18, s17, s17
    4e8a:	ee19 0a10 	vmov	r0, s18
    4e8e:	47a8      	blx	r5
    4e90:	a38f      	add	r3, pc, #572	; (adr r3, 50d0 <mag_to_force+0x1f38>)
    4e92:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e96:	47a0      	blx	r4
    4e98:	4602      	mov	r2, r0
    4e9a:	460b      	mov	r3, r1
    4e9c:	4640      	mov	r0, r8
    4e9e:	4649      	mov	r1, r9
    4ea0:	47b8      	blx	r7
    4ea2:	4680      	mov	r8, r0
    4ea4:	4689      	mov	r9, r1
    4ea6:	ee68 7a88 	vmul.f32	s15, s17, s16
    4eaa:	ee17 0a90 	vmov	r0, s15
    4eae:	47a8      	blx	r5
    4eb0:	a389      	add	r3, pc, #548	; (adr r3, 50d8 <mag_to_force+0x1f40>)
    4eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eb6:	47a0      	blx	r4
    4eb8:	4602      	mov	r2, r0
    4eba:	460b      	mov	r3, r1
    4ebc:	4640      	mov	r0, r8
    4ebe:	4649      	mov	r1, r9
    4ec0:	47b0      	blx	r6
    4ec2:	4680      	mov	r8, r0
    4ec4:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4ec6:	ee28 aa08 	vmul.f32	s20, s16, s16
    4eca:	ee1a 0a10 	vmov	r0, s20
    4ece:	47a8      	blx	r5
    4ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4ed4:	a382      	add	r3, pc, #520	; (adr r3, 50e0 <mag_to_force+0x1f48>)
    4ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eda:	47a0      	blx	r4
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4edc:	4602      	mov	r2, r0
    4ede:	460b      	mov	r3, r1
    4ee0:	4640      	mov	r0, r8
    4ee2:	4649      	mov	r1, r9
    4ee4:	47b8      	blx	r7
    4ee6:	4680      	mov	r8, r0
    4ee8:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4eea:	ee68 7a09 	vmul.f32	s15, s16, s18
    4eee:	ee17 0a90 	vmov	r0, s15
    4ef2:	47a8      	blx	r5
    4ef4:	a37c      	add	r3, pc, #496	; (adr r3, 50e8 <mag_to_force+0x1f50>)
    4ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4efa:	47a0      	blx	r4
    4efc:	4602      	mov	r2, r0
    4efe:	460b      	mov	r3, r1
    4f00:	4640      	mov	r0, r8
    4f02:	4649      	mov	r1, r9
    4f04:	47b8      	blx	r7
    4f06:	4680      	mov	r8, r0
    4f08:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    4f0a:	ee68 7a8a 	vmul.f32	s15, s17, s20
    4f0e:	ee17 0a90 	vmov	r0, s15
    4f12:	47a8      	blx	r5
    4f14:	a376      	add	r3, pc, #472	; (adr r3, 50f0 <mag_to_force+0x1f58>)
    4f16:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f1a:	47a0      	blx	r4
    4f1c:	4602      	mov	r2, r0
    4f1e:	460b      	mov	r3, r1
    4f20:	4640      	mov	r0, r8
    4f22:	4649      	mov	r1, r9
    4f24:	47b0      	blx	r6
    4f26:	4680      	mov	r8, r0
    4f28:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    4f2a:	ee68 7a0a 	vmul.f32	s15, s16, s20
    4f2e:	ee17 0a90 	vmov	r0, s15
    4f32:	47a8      	blx	r5
    4f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4f38:	a36f      	add	r3, pc, #444	; (adr r3, 50f8 <mag_to_force+0x1f60>)
    4f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f3e:	47a0      	blx	r4
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    4f40:	4602      	mov	r2, r0
    4f42:	460b      	mov	r3, r1
    4f44:	4640      	mov	r0, r8
    4f46:	4649      	mov	r1, r9
    4f48:	47b8      	blx	r7
    4f4a:	47d8      	blx	fp
    4f4c:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_x_middle= 1.411 - (0.0002827*sensor_row->b_x_middle) + (0.0003494*sensor_row->b_z_middle) + (0.0000001662*(sensor_row->b_x_middle*sensor_row->b_x_middle)) - (0.0000001945*(sensor_row->b_x_middle*sensor_row->b_z_middle)) + (0.00000003569*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.0000000000112*((sensor_row->b_x_middle*sensor_row->b_x_middle)*sensor_row->b_z_middle)) - (0.000000000009128*(sensor_row->b_x_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000001119*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4f50:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4f54:	ed9a 9a04 	vldr	s18, [sl, #16]
    4f58:	ee19 0a10 	vmov	r0, s18
    4f5c:	47a8      	blx	r5
    4f5e:	a368      	add	r3, pc, #416	; (adr r3, 5100 <mag_to_force+0x1f68>)
    4f60:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f64:	47a0      	blx	r4
    4f66:	4602      	mov	r2, r0
    4f68:	460b      	mov	r3, r1
    4f6a:	a167      	add	r1, pc, #412	; (adr r1, 5108 <mag_to_force+0x1f70>)
    4f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
    4f70:	47b0      	blx	r6
    4f72:	4680      	mov	r8, r0
    4f74:	4689      	mov	r9, r1
    4f76:	a366      	add	r3, pc, #408	; (adr r3, 5110 <mag_to_force+0x1f78>)
    4f78:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
    4f80:	47a0      	blx	r4
    4f82:	4602      	mov	r2, r0
    4f84:	460b      	mov	r3, r1
    4f86:	4640      	mov	r0, r8
    4f88:	4649      	mov	r1, r9
    4f8a:	47b8      	blx	r7
    4f8c:	4680      	mov	r8, r0
    4f8e:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4f90:	ee69 9a09 	vmul.f32	s19, s18, s18
    4f94:	ee19 0a90 	vmov	r0, s19
    4f98:	47a8      	blx	r5
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4f9a:	a35f      	add	r3, pc, #380	; (adr r3, 5118 <mag_to_force+0x1f80>)
    4f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fa0:	47a0      	blx	r4
    4fa2:	4602      	mov	r2, r0
    4fa4:	460b      	mov	r3, r1
    4fa6:	4640      	mov	r0, r8
    4fa8:	4649      	mov	r1, r9
    4faa:	47b0      	blx	r6
    4fac:	4680      	mov	r8, r0
    4fae:	4689      	mov	r9, r1
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    4fb0:	ee68 7a09 	vmul.f32	s15, s16, s18
    4fb4:	ee17 0a90 	vmov	r0, s15
    4fb8:	47a8      	blx	r5
    4fba:	a359      	add	r3, pc, #356	; (adr r3, 5120 <mag_to_force+0x1f88>)
    4fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fc0:	47a0      	blx	r4
    4fc2:	4602      	mov	r2, r0
    4fc4:	460b      	mov	r3, r1
    4fc6:	4640      	mov	r0, r8
    4fc8:	4649      	mov	r1, r9
    4fca:	47b0      	blx	r6
    4fcc:	4680      	mov	r8, r0
    4fce:	4689      	mov	r9, r1
    4fd0:	a355      	add	r3, pc, #340	; (adr r3, 5128 <mag_to_force+0x1f90>)
    4fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4fda:	47a0      	blx	r4
    4fdc:	4602      	mov	r2, r0
    4fde:	460b      	mov	r3, r1
    4fe0:	4640      	mov	r0, r8
    4fe2:	4649      	mov	r1, r9
    4fe4:	47b8      	blx	r7
    4fe6:	4680      	mov	r8, r0
    4fe8:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    4fea:	ee68 7a29 	vmul.f32	s15, s16, s19
    4fee:	ee17 0a90 	vmov	r0, s15
    4ff2:	47a8      	blx	r5
    4ff4:	a34e      	add	r3, pc, #312	; (adr r3, 5130 <mag_to_force+0x1f98>)
    4ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ffa:	47a0      	blx	r4
    4ffc:	4602      	mov	r2, r0
    4ffe:	460b      	mov	r3, r1
    5000:	4640      	mov	r0, r8
    5002:	4649      	mov	r1, r9
    5004:	47b0      	blx	r6
    5006:	4680      	mov	r8, r0
    5008:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    500a:	ee6a 7a09 	vmul.f32	s15, s20, s18
    500e:	ee17 0a90 	vmov	r0, s15
    5012:	47a8      	blx	r5
    5014:	a348      	add	r3, pc, #288	; (adr r3, 5138 <mag_to_force+0x1fa0>)
    5016:	e9d3 2300 	ldrd	r2, r3, [r3]
    501a:	47a0      	blx	r4
    501c:	4602      	mov	r2, r0
    501e:	460b      	mov	r3, r1
    5020:	4640      	mov	r0, r8
    5022:	4649      	mov	r1, r9
    5024:	47b0      	blx	r6
    5026:	4680      	mov	r8, r0
    5028:	4689      	mov	r9, r1
			
    502a:	a345      	add	r3, pc, #276	; (adr r3, 5140 <mag_to_force+0x1fa8>)
    502c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5034:	47a0      	blx	r4
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    5036:	4602      	mov	r2, r0
    5038:	460b      	mov	r3, r1
    503a:	4640      	mov	r0, r8
    503c:	4649      	mov	r1, r9
    503e:	47b8      	blx	r7
    5040:	47d8      	blx	fp
    5042:	ee09 0a10 	vmov	s18, r0
			sensor_row->force_y_middle= 7.812 - (0.004493*sensor_row->b_y_middle) + (0.002601*sensor_row->b_z_middle) - (0.0000001078*(sensor_row->b_y_middle*sensor_row->b_y_middle)) - (0.0000007358*(sensor_row->b_y_middle*sensor_row->b_z_middle)) + (0.0000002632*(sensor_row->b_z_middle*sensor_row->b_z_middle)) - (0.00000000001189*((sensor_row->b_y_middle*sensor_row->b_y_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_y_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000007836*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5046:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    504a:	edda 9a0a 	vldr	s19, [sl, #40]	; 0x28
    504e:	ee19 0a90 	vmov	r0, s19
    5052:	47a8      	blx	r5
    5054:	a33c      	add	r3, pc, #240	; (adr r3, 5148 <mag_to_force+0x1fb0>)
    5056:	e9d3 2300 	ldrd	r2, r3, [r3]
    505a:	47a0      	blx	r4
    505c:	4602      	mov	r2, r0
    505e:	460b      	mov	r3, r1
    5060:	a13b      	add	r1, pc, #236	; (adr r1, 5150 <mag_to_force+0x1fb8>)
    5062:	e9d1 0100 	ldrd	r0, r1, [r1]
    5066:	47b0      	blx	r6
    5068:	4680      	mov	r8, r0
    506a:	4689      	mov	r9, r1
    506c:	a33a      	add	r3, pc, #232	; (adr r3, 5158 <mag_to_force+0x1fc0>)
    506e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5072:	e9dd 0100 	ldrd	r0, r1, [sp]
    5076:	47a0      	blx	r4
    5078:	4602      	mov	r2, r0
    507a:	460b      	mov	r3, r1
    507c:	4640      	mov	r0, r8
    507e:	4649      	mov	r1, r9
    5080:	47b8      	blx	r7
    5082:	4680      	mov	r8, r0
    5084:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    5086:	ee69 aaa9 	vmul.f32	s21, s19, s19
    508a:	ee1a 0a90 	vmov	r0, s21
    508e:	47a8      	blx	r5
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    5090:	a333      	add	r3, pc, #204	; (adr r3, 5160 <mag_to_force+0x1fc8>)
    5092:	e9d3 2300 	ldrd	r2, r3, [r3]
    5096:	47a0      	blx	r4
    5098:	4602      	mov	r2, r0
    509a:	460b      	mov	r3, r1
    509c:	4640      	mov	r0, r8
    509e:	4649      	mov	r1, r9
    50a0:	47b8      	blx	r7
    50a2:	4680      	mov	r8, r0
    50a4:	4689      	mov	r9, r1
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    50a6:	ee68 7a29 	vmul.f32	s15, s16, s19
    50aa:	ee17 0a90 	vmov	r0, s15
    50ae:	47a8      	blx	r5
    50b0:	e070      	b.n	5194 <mag_to_force+0x1ffc>
    50b2:	bf00      	nop
    50b4:	f3af 8000 	nop.w
    50b8:	412c1a3a 	.word	0x412c1a3a
    50bc:	3f3286eb 	.word	0x3f3286eb
    50c0:	bc6a7efa 	.word	0xbc6a7efa
    50c4:	3ff69374 	.word	0x3ff69374
    50c8:	92beb405 	.word	0x92beb405
    50cc:	3f36e5f5 	.word	0x3f36e5f5
    50d0:	a908d438 	.word	0xa908d438
    50d4:	3e864e96 	.word	0x3e864e96
    50d8:	17c30410 	.word	0x17c30410
    50dc:	3e8a1af8 	.word	0x3e8a1af8
    50e0:	3d66d634 	.word	0x3d66d634
    50e4:	3e632932 	.word	0x3e632932
    50e8:	1b4047b2 	.word	0x1b4047b2
    50ec:	3da8a10a 	.word	0x3da8a10a
    50f0:	6fcf44ac 	.word	0x6fcf44ac
    50f4:	3da4129b 	.word	0x3da4129b
    50f8:	29e54c52 	.word	0x29e54c52
    50fc:	3d73af87 	.word	0x3d73af87
    5100:	80f98fa3 	.word	0x80f98fa3
    5104:	3f726740 	.word	0x3f726740
    5108:	ed916873 	.word	0xed916873
    510c:	401f3f7c 	.word	0x401f3f7c
    5110:	3dfb0d52 	.word	0x3dfb0d52
    5114:	3f654eb1 	.word	0x3f654eb1
    5118:	a7d49e3c 	.word	0xa7d49e3c
    511c:	3e7ceff5 	.word	0x3e7ceff5
    5120:	4fba36fa 	.word	0x4fba36fa
    5124:	3ea8b079 	.word	0x3ea8b079
    5128:	d77b216a 	.word	0xd77b216a
    512c:	3e91a9bd 	.word	0x3e91a9bd
    5130:	9612a3e2 	.word	0x9612a3e2
    5134:	3daa2579 	.word	0x3daa2579
    5138:	82163668 	.word	0x82163668
    513c:	3dbcbdc1 	.word	0x3dbcbdc1
    5140:	9d1f8878 	.word	0x9d1f8878
    5144:	3da13b46 	.word	0x3da13b46
    5148:	dad31fcd 	.word	0xdad31fcd
    514c:	3f77b634 	.word	0x3f77b634
    5150:	1eb851ec 	.word	0x1eb851ec
    5154:	402c6b85 	.word	0x402c6b85
    5158:	bdcad14a 	.word	0xbdcad14a
    515c:	3f70acc0 	.word	0x3f70acc0
    5160:	60693e8b 	.word	0x60693e8b
    5164:	3ea1b6a0 	.word	0x3ea1b6a0
    5168:	00005981 	.word	0x00005981
    516c:	f40c67fe 	.word	0xf40c67fe
    5170:	3ea64c02 	.word	0x3ea64c02
    5174:	02588cee 	.word	0x02588cee
    5178:	3ea1c2a7 	.word	0x3ea1c2a7
    517c:	884399b8 	.word	0x884399b8
    5180:	3d9e314d 	.word	0x3d9e314d
    5184:	3cc5c3bb 	.word	0x3cc5c3bb
    5188:	3dbb0978 	.word	0x3dbb0978
    518c:	fe5cd623 	.word	0xfe5cd623
    5190:	3da74f44 	.word	0x3da74f44
    5194:	a3f6      	add	r3, pc, #984	; (adr r3, 5570 <mag_to_force+0x23d8>)
    5196:	e9d3 2300 	ldrd	r2, r3, [r3]
    519a:	47a0      	blx	r4
    519c:	4602      	mov	r2, r0
    519e:	460b      	mov	r3, r1
    51a0:	4640      	mov	r0, r8
    51a2:	4649      	mov	r1, r9
    51a4:	47b0      	blx	r6
    51a6:	4680      	mov	r8, r0
    51a8:	4689      	mov	r9, r1
    51aa:	a3f3      	add	r3, pc, #972	; (adr r3, 5578 <mag_to_force+0x23e0>)
    51ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    51b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    51b4:	47a0      	blx	r4
    51b6:	4602      	mov	r2, r0
    51b8:	460b      	mov	r3, r1
    51ba:	4640      	mov	r0, r8
    51bc:	4649      	mov	r1, r9
    51be:	47b8      	blx	r7
    51c0:	4680      	mov	r8, r0
    51c2:	4689      	mov	r9, r1
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    51c4:	ee68 7a2a 	vmul.f32	s15, s16, s21
    51c8:	ee17 0a90 	vmov	r0, s15
    51cc:	47a8      	blx	r5
    51ce:	a3ec      	add	r3, pc, #944	; (adr r3, 5580 <mag_to_force+0x23e8>)
    51d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    51d4:	47a0      	blx	r4
    51d6:	4602      	mov	r2, r0
    51d8:	460b      	mov	r3, r1
    51da:	4640      	mov	r0, r8
    51dc:	4649      	mov	r1, r9
    51de:	47b8      	blx	r7
    51e0:	4680      	mov	r8, r0
    51e2:	4689      	mov	r9, r1
			
    51e4:	ee6a 7a29 	vmul.f32	s15, s20, s19
    51e8:	ee17 0a90 	vmov	r0, s15
    51ec:	47a8      	blx	r5
    51ee:	a3e6      	add	r3, pc, #920	; (adr r3, 5588 <mag_to_force+0x23f0>)
    51f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    51f4:	47a0      	blx	r4
    51f6:	4602      	mov	r2, r0
    51f8:	460b      	mov	r3, r1
    51fa:	4640      	mov	r0, r8
    51fc:	4649      	mov	r1, r9
    51fe:	47b0      	blx	r6
    5200:	4680      	mov	r8, r0
    5202:	4689      	mov	r9, r1
			
    5204:	a3e2      	add	r3, pc, #904	; (adr r3, 5590 <mag_to_force+0x23f8>)
    5206:	e9d3 2300 	ldrd	r2, r3, [r3]
    520a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    520e:	47a0      	blx	r4
			
    5210:	4602      	mov	r2, r0
    5212:	460b      	mov	r3, r1
    5214:	4640      	mov	r0, r8
    5216:	4649      	mov	r1, r9
    5218:	47b8      	blx	r7
    521a:	47d8      	blx	fp
			sensor_row->force_z_middle= 14.21 - (0.005789*sensor_row->b_r_middle) + (0.004071*sensor_row->b_z_middle) + (0.0000005279*(sensor_row->b_r_middle*sensor_row->b_r_middle)) - (0.0000007658*(sensor_row->b_r_middle*sensor_row->b_z_middle)) + (0.0000003383*(sensor_row->b_z_middle*sensor_row->b_z_middle)) + (0.00000000001514*((sensor_row->b_r_middle*sensor_row->b_r_middle)*sensor_row->b_z_middle)) - (0.00000000002614*(sensor_row->b_r_middle*(sensor_row->b_z_middle*sensor_row->b_z_middle))) + (0.000000000006038*((sensor_row->b_z_middle*sensor_row->b_z_middle)*sensor_row->b_z_middle));
    521c:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
			sensor_row->force_r_middle= (sensor_row->force_x_middle*sensor_row->force_x_middle) + (sensor_row->force_y_middle*sensor_row->force_y_middle);
    5220:	ee68 8aa8 	vmul.f32	s17, s17, s17
    5224:	ee29 9a09 	vmul.f32	s18, s18, s18
    5228:	ee78 8a89 	vadd.f32	s17, s17, s18
    522c:	edca 8a16 	vstr	s17, [sl, #88]	; 0x58
			sensor_row->force_r_middle = sqrt(sensor_row->force_r_middle);
    5230:	ee18 0a90 	vmov	r0, s17
    5234:	47a8      	blx	r5
    5236:	4bcc      	ldr	r3, [pc, #816]	; (5568 <mag_to_force+0x23d0>)
    5238:	4798      	blx	r3
    523a:	47d8      	blx	fp
    523c:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5240:	ed9a 8a02 	vldr	s16, [sl, #8]
    5244:	ee18 0a10 	vmov	r0, s16
    5248:	47a8      	blx	r5
    524a:	a39b      	add	r3, pc, #620	; (adr r3, 54b8 <mag_to_force+0x2320>)
    524c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5250:	47a0      	blx	r4
    5252:	4602      	mov	r2, r0
    5254:	460b      	mov	r3, r1
    5256:	a19a      	add	r1, pc, #616	; (adr r1, 54c0 <mag_to_force+0x2328>)
    5258:	e9d1 0100 	ldrd	r0, r1, [r1]
    525c:	47b0      	blx	r6
    525e:	4680      	mov	r8, r0
    5260:	4689      	mov	r9, r1
    5262:	edda 8a08 	vldr	s17, [sl, #32]
    5266:	ee18 0a90 	vmov	r0, s17
    526a:	47a8      	blx	r5
    526c:	e9cd 0100 	strd	r0, r1, [sp]
    5270:	a395      	add	r3, pc, #596	; (adr r3, 54c8 <mag_to_force+0x2330>)
    5272:	e9d3 2300 	ldrd	r2, r3, [r3]
    5276:	47a0      	blx	r4
    5278:	4602      	mov	r2, r0
    527a:	460b      	mov	r3, r1
    527c:	4640      	mov	r0, r8
    527e:	4649      	mov	r1, r9
    5280:	47b0      	blx	r6
    5282:	4680      	mov	r8, r0
    5284:	4689      	mov	r9, r1
    5286:	ee28 9a08 	vmul.f32	s18, s16, s16
    528a:	ee19 0a10 	vmov	r0, s18
    528e:	47a8      	blx	r5
    5290:	a38f      	add	r3, pc, #572	; (adr r3, 54d0 <mag_to_force+0x2338>)
    5292:	e9d3 2300 	ldrd	r2, r3, [r3]
    5296:	47a0      	blx	r4
    5298:	4602      	mov	r2, r0
    529a:	460b      	mov	r3, r1
    529c:	4640      	mov	r0, r8
    529e:	4649      	mov	r1, r9
    52a0:	47b0      	blx	r6
    52a2:	4680      	mov	r8, r0
    52a4:	4689      	mov	r9, r1
    52a6:	ee68 7a28 	vmul.f32	s15, s16, s17
    52aa:	ee17 0a90 	vmov	r0, s15
    52ae:	47a8      	blx	r5
    52b0:	a389      	add	r3, pc, #548	; (adr r3, 54d8 <mag_to_force+0x2340>)
    52b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    52b6:	47a0      	blx	r4
    52b8:	4602      	mov	r2, r0
    52ba:	460b      	mov	r3, r1
    52bc:	4640      	mov	r0, r8
    52be:	4649      	mov	r1, r9
    52c0:	47b0      	blx	r6
    52c2:	4680      	mov	r8, r0
    52c4:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    52c6:	ee68 9aa8 	vmul.f32	s19, s17, s17
    52ca:	ee19 0a90 	vmov	r0, s19
    52ce:	47a8      	blx	r5
    52d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    52d4:	a382      	add	r3, pc, #520	; (adr r3, 54e0 <mag_to_force+0x2348>)
    52d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    52da:	47a0      	blx	r4
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    52dc:	4602      	mov	r2, r0
    52de:	460b      	mov	r3, r1
    52e0:	4640      	mov	r0, r8
    52e2:	4649      	mov	r1, r9
    52e4:	47b0      	blx	r6
    52e6:	4680      	mov	r8, r0
    52e8:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    52ea:	ee68 7a89 	vmul.f32	s15, s17, s18
    52ee:	ee17 0a90 	vmov	r0, s15
    52f2:	47a8      	blx	r5
    52f4:	a37c      	add	r3, pc, #496	; (adr r3, 54e8 <mag_to_force+0x2350>)
    52f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    52fa:	47a0      	blx	r4
    52fc:	4602      	mov	r2, r0
    52fe:	460b      	mov	r3, r1
    5300:	4640      	mov	r0, r8
    5302:	4649      	mov	r1, r9
    5304:	47b0      	blx	r6
    5306:	4680      	mov	r8, r0
    5308:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    530a:	ee68 7a29 	vmul.f32	s15, s16, s19
    530e:	ee17 0a90 	vmov	r0, s15
    5312:	47a8      	blx	r5
    5314:	a376      	add	r3, pc, #472	; (adr r3, 54f0 <mag_to_force+0x2358>)
    5316:	e9d3 2300 	ldrd	r2, r3, [r3]
    531a:	47a0      	blx	r4
    531c:	4602      	mov	r2, r0
    531e:	460b      	mov	r3, r1
    5320:	4640      	mov	r0, r8
    5322:	4649      	mov	r1, r9
    5324:	47b0      	blx	r6
    5326:	4680      	mov	r8, r0
    5328:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    532a:	ee68 7aa9 	vmul.f32	s15, s17, s19
    532e:	ee17 0a90 	vmov	r0, s15
    5332:	47a8      	blx	r5
    5334:	e9cd 0104 	strd	r0, r1, [sp, #16]
    5338:	a36f      	add	r3, pc, #444	; (adr r3, 54f8 <mag_to_force+0x2360>)
    533a:	e9d3 2300 	ldrd	r2, r3, [r3]
    533e:	47a0      	blx	r4
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5340:	4602      	mov	r2, r0
    5342:	460b      	mov	r3, r1
    5344:	4640      	mov	r0, r8
    5346:	4649      	mov	r1, r9
    5348:	47b0      	blx	r6
    534a:	47d8      	blx	fp
    534c:	ee08 0a10 	vmov	s16, r0
			sensor_row->force_x_bottom= -10.33 - (0.003475*sensor_row->b_x_bottom) - (0.003007 *sensor_row->b_z_bottom) - (0.0000006456*(sensor_row->b_x_bottom*sensor_row->b_x_bottom)) - (0.0000007356*(sensor_row->b_x_bottom*sensor_row->b_z_bottom)) - (0.0000002724*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) - (0.00000000004405*((sensor_row->b_x_bottom*sensor_row->b_x_bottom)*sensor_row->b_z_bottom)) - (0.00000000003177*(sensor_row->b_x_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.00000000000747*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5350:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5354:	ed9a 9a05 	vldr	s18, [sl, #20]
    5358:	ee19 0a10 	vmov	r0, s18
    535c:	47a8      	blx	r5
    535e:	a368      	add	r3, pc, #416	; (adr r3, 5500 <mag_to_force+0x2368>)
    5360:	e9d3 2300 	ldrd	r2, r3, [r3]
    5364:	47a0      	blx	r4
    5366:	a368      	add	r3, pc, #416	; (adr r3, 5508 <mag_to_force+0x2370>)
    5368:	e9d3 2300 	ldrd	r2, r3, [r3]
    536c:	47b0      	blx	r6
    536e:	4680      	mov	r8, r0
    5370:	4689      	mov	r9, r1
    5372:	a367      	add	r3, pc, #412	; (adr r3, 5510 <mag_to_force+0x2378>)
    5374:	e9d3 2300 	ldrd	r2, r3, [r3]
    5378:	e9dd 0100 	ldrd	r0, r1, [sp]
    537c:	47a0      	blx	r4
    537e:	4602      	mov	r2, r0
    5380:	460b      	mov	r3, r1
    5382:	4640      	mov	r0, r8
    5384:	4649      	mov	r1, r9
    5386:	47b0      	blx	r6
    5388:	4680      	mov	r8, r0
    538a:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    538c:	ee29 aa09 	vmul.f32	s20, s18, s18
    5390:	ee1a 0a10 	vmov	r0, s20
    5394:	47a8      	blx	r5
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5396:	a360      	add	r3, pc, #384	; (adr r3, 5518 <mag_to_force+0x2380>)
    5398:	e9d3 2300 	ldrd	r2, r3, [r3]
    539c:	47a0      	blx	r4
    539e:	4602      	mov	r2, r0
    53a0:	460b      	mov	r3, r1
    53a2:	4640      	mov	r0, r8
    53a4:	4649      	mov	r1, r9
    53a6:	47b8      	blx	r7
    53a8:	4680      	mov	r8, r0
    53aa:	4689      	mov	r9, r1
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    53ac:	462e      	mov	r6, r5
    53ae:	ee68 7a89 	vmul.f32	s15, s17, s18
    53b2:	ee17 0a90 	vmov	r0, s15
    53b6:	47a8      	blx	r5
    53b8:	a359      	add	r3, pc, #356	; (adr r3, 5520 <mag_to_force+0x2388>)
    53ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    53be:	47a0      	blx	r4
    53c0:	463d      	mov	r5, r7
    53c2:	4602      	mov	r2, r0
    53c4:	460b      	mov	r3, r1
    53c6:	4640      	mov	r0, r8
    53c8:	4649      	mov	r1, r9
    53ca:	47b8      	blx	r7
    53cc:	4680      	mov	r8, r0
    53ce:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    53d0:	a355      	add	r3, pc, #340	; (adr r3, 5528 <mag_to_force+0x2390>)
    53d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    53d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    53da:	47a0      	blx	r4
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    53dc:	4f63      	ldr	r7, [pc, #396]	; (556c <mag_to_force+0x23d4>)
    53de:	4602      	mov	r2, r0
    53e0:	460b      	mov	r3, r1
    53e2:	4640      	mov	r0, r8
    53e4:	4649      	mov	r1, r9
    53e6:	47b8      	blx	r7
    53e8:	4680      	mov	r8, r0
    53ea:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    53ec:	ee68 7a8a 	vmul.f32	s15, s17, s20
    53f0:	ee17 0a90 	vmov	r0, s15
    53f4:	47b0      	blx	r6
    53f6:	a34e      	add	r3, pc, #312	; (adr r3, 5530 <mag_to_force+0x2398>)
    53f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    53fc:	47a0      	blx	r4
    53fe:	4602      	mov	r2, r0
    5400:	460b      	mov	r3, r1
    5402:	4640      	mov	r0, r8
    5404:	4649      	mov	r1, r9
    5406:	47a8      	blx	r5
    5408:	4680      	mov	r8, r0
    540a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    540c:	ee69 7a89 	vmul.f32	s15, s19, s18
    5410:	ee17 0a90 	vmov	r0, s15
    5414:	47b0      	blx	r6
    5416:	a348      	add	r3, pc, #288	; (adr r3, 5538 <mag_to_force+0x23a0>)
    5418:	e9d3 2300 	ldrd	r2, r3, [r3]
    541c:	47a0      	blx	r4
    541e:	4602      	mov	r2, r0
    5420:	460b      	mov	r3, r1
    5422:	4640      	mov	r0, r8
    5424:	4649      	mov	r1, r9
    5426:	47a8      	blx	r5
    5428:	4680      	mov	r8, r0
    542a:	4689      	mov	r9, r1
			break;
    542c:	a344      	add	r3, pc, #272	; (adr r3, 5540 <mag_to_force+0x23a8>)
    542e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5436:	47a0      	blx	r4
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    5438:	4602      	mov	r2, r0
    543a:	460b      	mov	r3, r1
    543c:	4640      	mov	r0, r8
    543e:	4649      	mov	r1, r9
    5440:	47b8      	blx	r7
    5442:	47d8      	blx	fp
    5444:	ee08 0a90 	vmov	s17, r0
			sensor_row->force_y_bottom= -2.141 + (0.002644*sensor_row->b_y_bottom) - (0.000585*sensor_row->b_z_bottom) + (0.0000005642*(sensor_row->b_y_bottom*sensor_row->b_y_bottom)) + (0.0000001582*(sensor_row->b_y_bottom*sensor_row->b_z_bottom)) - (0.00000003274*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000004031*((sensor_row->b_y_bottom*sensor_row->b_y_bottom)*sensor_row->b_z_bottom)) + (0.000000000000689*(sensor_row->b_y_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom))) - (0.0000000000005236*((sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom));
    5448:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    544c:	ed9a 9a0b 	vldr	s18, [sl, #44]	; 0x2c
    5450:	ee19 0a10 	vmov	r0, s18
    5454:	47b0      	blx	r6
    5456:	e9cd 0104 	strd	r0, r1, [sp, #16]
    545a:	a33b      	add	r3, pc, #236	; (adr r3, 5548 <mag_to_force+0x23b0>)
    545c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5460:	47a0      	blx	r4
    5462:	4602      	mov	r2, r0
    5464:	460b      	mov	r3, r1
    5466:	a13a      	add	r1, pc, #232	; (adr r1, 5550 <mag_to_force+0x23b8>)
    5468:	e9d1 0100 	ldrd	r0, r1, [r1]
    546c:	47b8      	blx	r7
    546e:	4680      	mov	r8, r0
    5470:	4689      	mov	r9, r1
    5472:	a339      	add	r3, pc, #228	; (adr r3, 5558 <mag_to_force+0x23c0>)
    5474:	e9d3 2300 	ldrd	r2, r3, [r3]
    5478:	e9dd 0100 	ldrd	r0, r1, [sp]
    547c:	47a0      	blx	r4
    547e:	4602      	mov	r2, r0
    5480:	460b      	mov	r3, r1
    5482:	4640      	mov	r0, r8
    5484:	4649      	mov	r1, r9
    5486:	47a8      	blx	r5
    5488:	4680      	mov	r8, r0
    548a:	4689      	mov	r9, r1
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    548c:	ee69 7a09 	vmul.f32	s15, s18, s18
    5490:	ee17 0a90 	vmov	r0, s15
    5494:	47b0      	blx	r6
    5496:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    549a:	a331      	add	r3, pc, #196	; (adr r3, 5560 <mag_to_force+0x23c8>)
    549c:	e9d3 2300 	ldrd	r2, r3, [r3]
    54a0:	47a0      	blx	r4
    54a2:	4602      	mov	r2, r0
    54a4:	460b      	mov	r3, r1
    54a6:	4640      	mov	r0, r8
    54a8:	4649      	mov	r1, r9
    54aa:	47a8      	blx	r5
    54ac:	4680      	mov	r8, r0
    54ae:	4689      	mov	r9, r1
    54b0:	e072      	b.n	5598 <mag_to_force+0x2400>
    54b2:	bf00      	nop
    54b4:	f3af 8000 	nop.w
    54b8:	6b50b0f2 	.word	0x6b50b0f2
    54bc:	3f6c779a 	.word	0x3f6c779a
    54c0:	c28f5c29 	.word	0xc28f5c29
    54c4:	c024a8f5 	.word	0xc024a8f5
    54c8:	d5171e2a 	.word	0xd5171e2a
    54cc:	3f68a222 	.word	0x3f68a222
    54d0:	69edc5c6 	.word	0x69edc5c6
    54d4:	3ea5a9a9 	.word	0x3ea5a9a9
    54d8:	81bc997e 	.word	0x81bc997e
    54dc:	3ea8aec1 	.word	0x3ea8aec1
    54e0:	de9fb9ed 	.word	0xde9fb9ed
    54e4:	3e9247cb 	.word	0x3e9247cb
    54e8:	82393435 	.word	0x82393435
    54ec:	3dc8377c 	.word	0x3dc8377c
    54f0:	e19c6262 	.word	0xe19c6262
    54f4:	3dc1773a 	.word	0x3dc1773a
    54f8:	7476128f 	.word	0x7476128f
    54fc:	3da06d3c 	.word	0x3da06d3c
    5500:	b0fadf2f 	.word	0xb0fadf2f
    5504:	3f65a8de 	.word	0x3f65a8de
    5508:	9ba5e354 	.word	0x9ba5e354
    550c:	400120c4 	.word	0x400120c4
    5510:	ef1fddec 	.word	0xef1fddec
    5514:	3f432b55 	.word	0x3f432b55
    5518:	ebb865dc 	.word	0xebb865dc
    551c:	3ea2ee70 	.word	0x3ea2ee70
    5520:	ea8666cf 	.word	0xea8666cf
    5524:	3e853bb5 	.word	0x3e853bb5
    5528:	5799a806 	.word	0x5799a806
    552c:	3e6193c0 	.word	0x3e6193c0
    5530:	cece3cda 	.word	0xcece3cda
    5534:	3dc62920 	.word	0x3dc62920
    5538:	d5564f58 	.word	0xd5564f58
    553c:	3d683df5 	.word	0x3d683df5
    5540:	664dc709 	.word	0x664dc709
    5544:	3d626c2b 	.word	0x3d626c2b
    5548:	c4cdfaca 	.word	0xc4cdfaca
    554c:	3f762174 	.word	0x3f762174
    5550:	f5c28f5c 	.word	0xf5c28f5c
    5554:	40399c28 	.word	0x40399c28
    5558:	5cc42635 	.word	0x5cc42635
    555c:	3f7db552 	.word	0x3f7db552
    5560:	88e4e2e6 	.word	0x88e4e2e6
    5564:	3eb215f9 	.word	0x3eb215f9
    5568:	00005981 	.word	0x00005981
    556c:	00005bc1 	.word	0x00005bc1
    5570:	02547d8d 	.word	0x02547d8d
    5574:	3ea9b22c 	.word	0x3ea9b22c
    5578:	227c1fc4 	.word	0x227c1fc4
    557c:	3e96b3f3 	.word	0x3e96b3f3
    5580:	f946a57c 	.word	0xf946a57c
    5584:	3db0a587 	.word	0x3db0a587
    5588:	82163668 	.word	0x82163668
    558c:	3dbcbdc1 	.word	0x3dbcbdc1
    5590:	02de4486 	.word	0x02de4486
    5594:	3d9a8e2f 	.word	0x3d9a8e2f
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5598:	a334      	add	r3, pc, #208	; (adr r3, 566c <mag_to_force+0x24d4>)
    559a:	e9d3 2300 	ldrd	r2, r3, [r3]
    559e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    55a2:	47a0      	blx	r4
    55a4:	4602      	mov	r2, r0
    55a6:	460b      	mov	r3, r1
    55a8:	e9dd 0100 	ldrd	r0, r1, [sp]
    55ac:	47a0      	blx	r4
    55ae:	4602      	mov	r2, r0
    55b0:	460b      	mov	r3, r1
    55b2:	4640      	mov	r0, r8
    55b4:	4649      	mov	r1, r9
    55b6:	47b8      	blx	r7
    55b8:	4680      	mov	r8, r0
    55ba:	4689      	mov	r9, r1
    55bc:	a32d      	add	r3, pc, #180	; (adr r3, 5674 <mag_to_force+0x24dc>)
    55be:	e9d3 2300 	ldrd	r2, r3, [r3]
    55c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    55c6:	47a0      	blx	r4
    55c8:	4602      	mov	r2, r0
    55ca:	460b      	mov	r3, r1
    55cc:	4640      	mov	r0, r8
    55ce:	4649      	mov	r1, r9
    55d0:	47a8      	blx	r5
    55d2:	4680      	mov	r8, r0
    55d4:	4689      	mov	r9, r1
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    55d6:	a329      	add	r3, pc, #164	; (adr r3, 567c <mag_to_force+0x24e4>)
    55d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    55dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    55e0:	47a0      	blx	r4
    55e2:	4602      	mov	r2, r0
    55e4:	460b      	mov	r3, r1
    55e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    55ea:	47a0      	blx	r4
    55ec:	4602      	mov	r2, r0
    55ee:	460b      	mov	r3, r1
    55f0:	4640      	mov	r0, r8
    55f2:	4649      	mov	r1, r9
    55f4:	47a8      	blx	r5
    55f6:	4680      	mov	r8, r0
    55f8:	4689      	mov	r9, r1
			break;
    55fa:	a322      	add	r3, pc, #136	; (adr r3, 5684 <mag_to_force+0x24ec>)
    55fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    5600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5604:	47a0      	blx	r4
    5606:	4602      	mov	r2, r0
    5608:	460b      	mov	r3, r1
    560a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    560e:	47a0      	blx	r4
    5610:	4602      	mov	r2, r0
    5612:	460b      	mov	r3, r1
    5614:	4640      	mov	r0, r8
    5616:	4649      	mov	r1, r9
    5618:	47b8      	blx	r7
    561a:	4680      	mov	r8, r0
    561c:	4689      	mov	r9, r1
    561e:	a31b      	add	r3, pc, #108	; (adr r3, 568c <mag_to_force+0x24f4>)
    5620:	e9d3 2300 	ldrd	r2, r3, [r3]
    5624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5628:	47a0      	blx	r4
	
    562a:	4602      	mov	r2, r0
    562c:	460b      	mov	r3, r1
    562e:	e9dd 0100 	ldrd	r0, r1, [sp]
    5632:	47a0      	blx	r4
			break;
    5634:	4602      	mov	r2, r0
    5636:	460b      	mov	r3, r1
    5638:	4640      	mov	r0, r8
    563a:	4649      	mov	r1, r9
    563c:	47a8      	blx	r5
    563e:	47d8      	blx	fp
			sensor_row->force_z_bottom= 25.61 - (0.005403*sensor_row->b_r_bottom) + (0.007253*sensor_row->b_z_bottom) + (0.000001078*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)) - (0.0000006989*sensor_row->b_r_bottom*sensor_row->b_z_bottom) + (0.0000006109*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000005541*(sensor_row->b_r_bottom*sensor_row->b_r_bottom)*sensor_row->b_z_bottom) - (0.00000000002099*sensor_row->b_r_bottom*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)) + (0.00000000001312*(sensor_row->b_z_bottom*sensor_row->b_z_bottom)*sensor_row->b_z_bottom);
    5640:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
			sensor_row->force_r_bottom= (sensor_row->force_x_bottom*sensor_row->force_x_bottom) + (sensor_row->force_y_bottom*sensor_row->force_y_bottom);
    5644:	ee28 8a08 	vmul.f32	s16, s16, s16
    5648:	ee68 8aa8 	vmul.f32	s17, s17, s17
    564c:	ee38 8a28 	vadd.f32	s16, s16, s17
    5650:	ed8a 8a17 	vstr	s16, [sl, #92]	; 0x5c
			sensor_row->force_r_bottom = sqrt(sensor_row->force_r_bottom);
    5654:	ee18 0a10 	vmov	r0, s16
    5658:	47b0      	blx	r6
    565a:	4b03      	ldr	r3, [pc, #12]	; (5668 <mag_to_force+0x24d0>)
    565c:	4798      	blx	r3
    565e:	47d8      	blx	fp
    5660:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    5664:	f7fd bda6 	b.w	31b4 <mag_to_force+0x1c>
    5668:	00005981 	.word	0x00005981
    566c:	5a723736 	.word	0x5a723736
    5670:	3ea77381 	.word	0x3ea77381
    5674:	4e8b8a55 	.word	0x4e8b8a55
    5678:	3ea47f97 	.word	0x3ea47f97
    567c:	a48fe74d 	.word	0xa48fe74d
    5680:	3dce7643 	.word	0x3dce7643
    5684:	e61b6f11 	.word	0xe61b6f11
    5688:	3db71428 	.word	0x3db71428
    568c:	447e7fdf 	.word	0x447e7fdf
    5690:	3dacd9e7 	.word	0x3dacd9e7

00005694 <RS>:
#include "math.h"
#include <Tactile_Sensor/neural_spikes.h>

void RS(struct fneuron_t *neuron) {
	// create a "regular spiking" floating point neuron
	neuron->a = 0.02;
    5694:	4b07      	ldr	r3, [pc, #28]	; (56b4 <RS+0x20>)
    5696:	6003      	str	r3, [r0, #0]
	neuron->b = 0.2;
    5698:	4b07      	ldr	r3, [pc, #28]	; (56b8 <RS+0x24>)
    569a:	6043      	str	r3, [r0, #4]
	neuron->c = -65;
    569c:	4b07      	ldr	r3, [pc, #28]	; (56bc <RS+0x28>)
    569e:	6083      	str	r3, [r0, #8]
	neuron->d = 6;
    56a0:	4b07      	ldr	r3, [pc, #28]	; (56c0 <RS+0x2c>)
    56a2:	60c3      	str	r3, [r0, #12]
	neuron->potential = neuron->recovery = 0;
    56a4:	2300      	movs	r3, #0
    56a6:	6143      	str	r3, [r0, #20]
    56a8:	6103      	str	r3, [r0, #16]
	neuron->timestep_neuron = 1; // junan recommendation 0.05, bigger timesteps till 1.5 is fine (see paper) 
    56aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    56ae:	61c3      	str	r3, [r0, #28]
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop
    56b4:	3ca3d70a 	.word	0x3ca3d70a
    56b8:	3e4ccccd 	.word	0x3e4ccccd
    56bc:	c2820000 	.word	0xc2820000
    56c0:	40c00000 	.word	0x40c00000

000056c4 <force_parameters>:
}

void force_parameters (struct fneuron_t *neuron) {
	// initiate parameters for normal and shear force
	// parameters normal force
	neuron->beta = 0;
    56c4:	2300      	movs	r3, #0
    56c6:	6303      	str	r3, [r0, #48]	; 0x30
	neuron->k_s	= 1.2; //0.0000003
    56c8:	4a05      	ldr	r2, [pc, #20]	; (56e0 <force_parameters+0x1c>)
    56ca:	6342      	str	r2, [r0, #52]	; 0x34
	neuron->k_d = 0;//0.003
    56cc:	6383      	str	r3, [r0, #56]	; 0x38
	neuron-> normal_force_past = 0; 
    56ce:	6283      	str	r3, [r0, #40]	; 0x28
	// parameters shear force
	neuron->theta = 0;
    56d0:	63c3      	str	r3, [r0, #60]	; 0x3c
	neuron->r_s = 4.8;
    56d2:	4a04      	ldr	r2, [pc, #16]	; (56e4 <force_parameters+0x20>)
    56d4:	6402      	str	r2, [r0, #64]	; 0x40
	neuron->r_d = 0;
    56d6:	6443      	str	r3, [r0, #68]	; 0x44
	neuron-> shear_force_past = 0; 
    56d8:	62c3      	str	r3, [r0, #44]	; 0x2c
	neuron->timestep_force = 10; 
    56da:	4b03      	ldr	r3, [pc, #12]	; (56e8 <force_parameters+0x24>)
    56dc:	6483      	str	r3, [r0, #72]	; 0x48
    56de:	4770      	bx	lr
    56e0:	3f99999a 	.word	0x3f99999a
    56e4:	4099999a 	.word	0x4099999a
    56e8:	41200000 	.word	0x41200000

000056ec <calc_current_normal_force>:
}

void calc_current_normal_force(struct fneuron_t *neuron, float force_z){
    56ec:	ee07 1a90 	vmov	s15, r1
	neuron->normal_force = force_z;
    56f0:	6201      	str	r1, [r0, #32]
	neuron->cell_current = neuron->beta + (neuron->k_s * neuron->normal_force);
    56f2:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    56f6:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
    56fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
    56fe:	ee37 7a26 	vadd.f32	s14, s14, s13
    5702:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->normal_force_past = neuron->normal_force;
    5706:	6281      	str	r1, [r0, #40]	; 0x28
    5708:	4770      	bx	lr

0000570a <calc_current_shear_force>:
}

void calc_current_shear_force(struct fneuron_t *neuron,float force_r){//(fneuron_t *neuron, bool start, float force_x, float force_y
    570a:	ee07 1a90 	vmov	s15, r1
	
	neuron->shear_force = force_r;
    570e:	6241      	str	r1, [r0, #36]	; 0x24
	neuron->cell_current = neuron->theta + (neuron->r_s * neuron->shear_force);
    5710:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    5714:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
    5718:	ee67 6aa6 	vmul.f32	s13, s15, s13
    571c:	ee37 7a26 	vadd.f32	s14, s14, s13
    5720:	ed80 7a06 	vstr	s14, [r0, #24]
	neuron->shear_force_past = neuron->shear_force;
    5724:	62c1      	str	r1, [r0, #44]	; 0x2c
    5726:	4770      	bx	lr

00005728 <step_f>:
	
}

void step_f(struct fneuron_t *neuron, float synapse, float ms) {
    5728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    572c:	ed2d 8b04 	vpush	{d8-d9}
    5730:	b082      	sub	sp, #8
	// step a neuron through ms milliseconds with synapse input
	//   if you don't have a good reason to do otherwise, keep ms between 0.1
	//   and 1.0
	if (neuron->potential >= 30) {
    5732:	ed90 8a04 	vldr	s16, [r0, #16]
    5736:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    573a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    573e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5742:	da6c      	bge.n	581e <step_f+0xf6>
    5744:	ee08 2a90 	vmov	s17, r2
    5748:	468a      	mov	sl, r1
    574a:	4604      	mov	r4, r0
		neuron->potential = neuron->c;
		neuron->recovery += neuron->d;
		return;
	}
	float v = neuron->potential;
	float u = neuron->recovery;
    574c:	ed90 9a05 	vldr	s18, [r0, #20]
	neuron->potential = v + ms * (0.04 * v * v + 5 * v + 140 - u + synapse);
    5750:	4d3b      	ldr	r5, [pc, #236]	; (5840 <step_f+0x118>)
    5752:	ee18 0a10 	vmov	r0, s16
    5756:	47a8      	blx	r5
    5758:	4680      	mov	r8, r0
    575a:	4689      	mov	r9, r1
    575c:	4f39      	ldr	r7, [pc, #228]	; (5844 <step_f+0x11c>)
    575e:	a336      	add	r3, pc, #216	; (adr r3, 5838 <step_f+0x110>)
    5760:	e9d3 2300 	ldrd	r2, r3, [r3]
    5764:	47b8      	blx	r7
    5766:	4602      	mov	r2, r0
    5768:	460b      	mov	r3, r1
    576a:	e9cd 8900 	strd	r8, r9, [sp]
    576e:	4640      	mov	r0, r8
    5770:	4649      	mov	r1, r9
    5772:	47b8      	blx	r7
    5774:	4680      	mov	r8, r0
    5776:	4689      	mov	r9, r1
    5778:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    577c:	ee68 7a27 	vmul.f32	s15, s16, s15
    5780:	ee17 0a90 	vmov	r0, s15
    5784:	47a8      	blx	r5
    5786:	4e30      	ldr	r6, [pc, #192]	; (5848 <step_f+0x120>)
    5788:	4602      	mov	r2, r0
    578a:	460b      	mov	r3, r1
    578c:	4640      	mov	r0, r8
    578e:	4649      	mov	r1, r9
    5790:	47b0      	blx	r6
    5792:	2200      	movs	r2, #0
    5794:	4b2d      	ldr	r3, [pc, #180]	; (584c <step_f+0x124>)
    5796:	47b0      	blx	r6
    5798:	4680      	mov	r8, r0
    579a:	4689      	mov	r9, r1
    579c:	ee19 0a10 	vmov	r0, s18
    57a0:	47a8      	blx	r5
    57a2:	4602      	mov	r2, r0
    57a4:	460b      	mov	r3, r1
    57a6:	4640      	mov	r0, r8
    57a8:	4649      	mov	r1, r9
    57aa:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5854 <step_f+0x12c>
    57ae:	47c0      	blx	r8
    57b0:	4680      	mov	r8, r0
    57b2:	4689      	mov	r9, r1
    57b4:	4650      	mov	r0, sl
    57b6:	47a8      	blx	r5
    57b8:	4642      	mov	r2, r8
    57ba:	464b      	mov	r3, r9
    57bc:	47b0      	blx	r6
    57be:	4680      	mov	r8, r0
    57c0:	4689      	mov	r9, r1
    57c2:	ee18 0a90 	vmov	r0, s17
    57c6:	47a8      	blx	r5
    57c8:	4642      	mov	r2, r8
    57ca:	464b      	mov	r3, r9
    57cc:	47b8      	blx	r7
    57ce:	4602      	mov	r2, r0
    57d0:	460b      	mov	r3, r1
    57d2:	e9dd 0100 	ldrd	r0, r1, [sp]
    57d6:	47b0      	blx	r6
    57d8:	4b1d      	ldr	r3, [pc, #116]	; (5850 <step_f+0x128>)
    57da:	4798      	blx	r3
    57dc:	ee07 0a90 	vmov	s15, r0
    57e0:	6120      	str	r0, [r4, #16]
	if (neuron -> potential > 30) {
    57e2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    57e6:	eef4 7ac7 	vcmpe.f32	s15, s14
    57ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57ee:	dd01      	ble.n	57f4 <step_f+0xcc>
		neuron -> potential = 30;
    57f0:	ed84 7a04 	vstr	s14, [r4, #16]
	}
	neuron->recovery = u + ms * (neuron->a * (neuron->b * v - u));
    57f4:	edd4 7a00 	vldr	s15, [r4]
    57f8:	ed94 7a01 	vldr	s14, [r4, #4]
    57fc:	ee28 8a07 	vmul.f32	s16, s16, s14
    5800:	ee38 8a49 	vsub.f32	s16, s16, s18
    5804:	ee27 8a88 	vmul.f32	s16, s15, s16
    5808:	ee68 8a88 	vmul.f32	s17, s17, s16
    580c:	ee79 8a28 	vadd.f32	s17, s18, s17
    5810:	edc4 8a05 	vstr	s17, [r4, #20]
	return;
}
    5814:	b002      	add	sp, #8
    5816:	ecbd 8b04 	vpop	{d8-d9}
    581a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		neuron->potential = neuron->c;
    581e:	6883      	ldr	r3, [r0, #8]
    5820:	6103      	str	r3, [r0, #16]
		neuron->recovery += neuron->d;
    5822:	ed90 7a03 	vldr	s14, [r0, #12]
    5826:	edd0 7a05 	vldr	s15, [r0, #20]
    582a:	ee77 7a87 	vadd.f32	s15, s15, s14
    582e:	edc0 7a05 	vstr	s15, [r0, #20]
		return;
    5832:	e7ef      	b.n	5814 <step_f+0xec>
    5834:	f3af 8000 	nop.w
    5838:	47ae147b 	.word	0x47ae147b
    583c:	3fa47ae1 	.word	0x3fa47ae1
    5840:	00005e81 	.word	0x00005e81
    5844:	00005f29 	.word	0x00005f29
    5848:	00005bc5 	.word	0x00005bc5
    584c:	40618000 	.word	0x40618000
    5850:	00006489 	.word	0x00006489
    5854:	00005bc1 	.word	0x00005bc1

00005858 <neuron_init_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}
*/

void neuron_init_row(struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    5858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    585c:	4680      	mov	r8, r0
    585e:	460f      	mov	r7, r1
    5860:	4615      	mov	r5, r2
	
	RS(&neuron_pair_top->neuron_normal);
    5862:	4e0f      	ldr	r6, [pc, #60]	; (58a0 <neuron_init_row+0x48>)
    5864:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_normal);
    5866:	4640      	mov	r0, r8
    5868:	4c0e      	ldr	r4, [pc, #56]	; (58a4 <neuron_init_row+0x4c>)
    586a:	47a0      	blx	r4
	
	RS(&neuron_pair_top->neuron_shear);
    586c:	f108 084c 	add.w	r8, r8, #76	; 0x4c
    5870:	4640      	mov	r0, r8
    5872:	47b0      	blx	r6
	force_parameters(&neuron_pair_top->neuron_shear);
    5874:	4640      	mov	r0, r8
    5876:	47a0      	blx	r4
	
	
	RS(&neuron_pair_middle->neuron_normal);
    5878:	4638      	mov	r0, r7
    587a:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_normal);
    587c:	4638      	mov	r0, r7
    587e:	47a0      	blx	r4
	
	RS(&neuron_pair_middle->neuron_shear);
    5880:	374c      	adds	r7, #76	; 0x4c
    5882:	4638      	mov	r0, r7
    5884:	47b0      	blx	r6
	force_parameters(&neuron_pair_middle->neuron_shear);
    5886:	4638      	mov	r0, r7
    5888:	47a0      	blx	r4
	
	
	RS(&neuron_pair_bottom->neuron_normal);
    588a:	4628      	mov	r0, r5
    588c:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_normal);
    588e:	4628      	mov	r0, r5
    5890:	47a0      	blx	r4
	
	RS(&neuron_pair_bottom->neuron_shear);
    5892:	354c      	adds	r5, #76	; 0x4c
    5894:	4628      	mov	r0, r5
    5896:	47b0      	blx	r6
	force_parameters(&neuron_pair_bottom->neuron_shear);
    5898:	4628      	mov	r0, r5
    589a:	47a0      	blx	r4
    589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58a0:	00005695 	.word	0x00005695
    58a4:	000056c5 	.word	0x000056c5

000058a8 <neuron_calc_row>:
	
	//repeatition = (uint8_t) (neuron_middle_normal.timestep_force/neuron_middle_normal.timestep_neuron);
}

 void neuron_calc_row(struct sensorRow_Values *sensor_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    58a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58ac:	b085      	sub	sp, #20
    58ae:	4604      	mov	r4, r0
    58b0:	460d      	mov	r5, r1
    58b2:	4617      	mov	r7, r2
    58b4:	461e      	mov	r6, r3
	 
	 uint8_t repeatition = (uint8_t) (neuron_pair_top->neuron_normal.timestep_force/neuron_pair_top->neuron_normal.timestep_neuron);
    58b6:	edd1 6a12 	vldr	s13, [r1, #72]	; 0x48
    58ba:	ed91 7a07 	vldr	s14, [r1, #28]
    58be:	eec6 7a87 	vdiv.f32	s15, s13, s14
    58c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    58c6:	edcd 7a00 	vstr	s15, [sp]
    58ca:	f89d 9000 	ldrb.w	r9, [sp]
	 
	 calc_current_normal_force(&neuron_pair_top->neuron_normal,sensor_row->force_z_top);
    58ce:	9100      	str	r1, [sp, #0]
    58d0:	6c81      	ldr	r1, [r0, #72]	; 0x48
    58d2:	4628      	mov	r0, r5
    58d4:	f8df a080 	ldr.w	sl, [pc, #128]	; 5958 <neuron_calc_row+0xb0>
    58d8:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_top->neuron_shear,sensor_row->force_r_top);
    58da:	f105 0b4c 	add.w	fp, r5, #76	; 0x4c
    58de:	6d61      	ldr	r1, [r4, #84]	; 0x54
    58e0:	4658      	mov	r0, fp
    58e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 595c <neuron_calc_row+0xb4>
    58e6:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_middle->neuron_normal,sensor_row->force_z_middle);
    58e8:	9701      	str	r7, [sp, #4]
    58ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    58ec:	4638      	mov	r0, r7
    58ee:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_middle->neuron_shear,sensor_row->force_r_middle);
    58f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    58f4:	9302      	str	r3, [sp, #8]
    58f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    58f8:	4618      	mov	r0, r3
    58fa:	47c0      	blx	r8
	 calc_current_normal_force(&neuron_pair_bottom->neuron_normal,sensor_row->force_z_bottom);
    58fc:	9603      	str	r6, [sp, #12]
    58fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
    5900:	4630      	mov	r0, r6
    5902:	47d0      	blx	sl
	 calc_current_shear_force(&neuron_pair_bottom->neuron_shear,sensor_row->force_r_bottom);
    5904:	f106 0a4c 	add.w	sl, r6, #76	; 0x4c
    5908:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    590a:	4650      	mov	r0, sl
    590c:	47c0      	blx	r8
	 
	 for(int i = 0; i<repeatition; i++){
    590e:	f04f 0800 	mov.w	r8, #0
    5912:	e01a      	b.n	594a <neuron_calc_row+0xa2>
		step_f(&neuron_pair_top->neuron_normal, neuron_pair_top->neuron_normal.cell_current,neuron_pair_top->neuron_normal.timestep_neuron);//neuron_pair_top->neuron_normal.timestep_neuron
    5914:	69ea      	ldr	r2, [r5, #28]
    5916:	69a9      	ldr	r1, [r5, #24]
    5918:	9800      	ldr	r0, [sp, #0]
    591a:	4c0e      	ldr	r4, [pc, #56]	; (5954 <neuron_calc_row+0xac>)
    591c:	47a0      	blx	r4
		step_f(&neuron_pair_top->neuron_shear, neuron_pair_top->neuron_shear.cell_current, neuron_pair_top->neuron_shear.timestep_neuron);
    591e:	6eaa      	ldr	r2, [r5, #104]	; 0x68
    5920:	6e69      	ldr	r1, [r5, #100]	; 0x64
    5922:	4658      	mov	r0, fp
    5924:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_normal, neuron_pair_middle->neuron_normal.cell_current, neuron_pair_middle->neuron_normal.timestep_neuron);
    5926:	69fa      	ldr	r2, [r7, #28]
    5928:	69b9      	ldr	r1, [r7, #24]
    592a:	9801      	ldr	r0, [sp, #4]
    592c:	47a0      	blx	r4
		step_f(&neuron_pair_middle->neuron_shear, neuron_pair_middle->neuron_shear.cell_current, neuron_pair_middle->neuron_shear.timestep_neuron);
    592e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    5930:	6e79      	ldr	r1, [r7, #100]	; 0x64
    5932:	9802      	ldr	r0, [sp, #8]
    5934:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_normal, neuron_pair_bottom->neuron_normal.cell_current, neuron_pair_bottom->neuron_normal.timestep_neuron);
    5936:	69f2      	ldr	r2, [r6, #28]
    5938:	69b1      	ldr	r1, [r6, #24]
    593a:	9803      	ldr	r0, [sp, #12]
    593c:	47a0      	blx	r4
		step_f(&neuron_pair_bottom->neuron_shear, neuron_pair_bottom->neuron_shear.cell_current, neuron_pair_bottom->neuron_shear.timestep_neuron);
    593e:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    5940:	6e71      	ldr	r1, [r6, #100]	; 0x64
    5942:	4650      	mov	r0, sl
    5944:	47a0      	blx	r4
	 for(int i = 0; i<repeatition; i++){
    5946:	f108 0801 	add.w	r8, r8, #1
    594a:	45c8      	cmp	r8, r9
    594c:	dbe2      	blt.n	5914 <neuron_calc_row+0x6c>
	 }
}
    594e:	b005      	add	sp, #20
    5950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5954:	00005729 	.word	0x00005729
    5958:	000056ed 	.word	0x000056ed
    595c:	0000570b 	.word	0x0000570b

00005960 <update_struct_values_neural>:
	step_f(neuron3_normal, neuron3_normal->cell_current, neuron3_normal->timestep_neuron);
	step_f(neuron3_shear, neuron3_shear->cell_current, neuron3_shear->timestep_neuron);
}
*/

void update_struct_values_neural(struct neuronRow_Values *neuron_row, struct neuron_pair *neuron_pair_top, struct neuron_pair *neuron_pair_middle, struct neuron_pair *neuron_pair_bottom){
    5960:	b410      	push	{r4}
	neuron_row->neuron_top_normal = neuron_pair_top->neuron_normal.potential;
    5962:	690c      	ldr	r4, [r1, #16]
    5964:	6004      	str	r4, [r0, #0]
	neuron_row->neuron_top_shear = neuron_pair_top->neuron_shear.potential;
    5966:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    5968:	6041      	str	r1, [r0, #4]
	
	neuron_row->neuron_middle_normal = neuron_pair_middle->neuron_normal.potential;
    596a:	6911      	ldr	r1, [r2, #16]
    596c:	6081      	str	r1, [r0, #8]
	neuron_row->neuron_middle_shear = neuron_pair_middle->neuron_shear.potential;
    596e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    5970:	60c2      	str	r2, [r0, #12]
	
	neuron_row->neuron_bottom_normal = neuron_pair_bottom->neuron_normal.potential;
    5972:	691a      	ldr	r2, [r3, #16]
    5974:	6102      	str	r2, [r0, #16]
	neuron_row->neuron_bottom_shear = neuron_pair_bottom->neuron_shear.potential;
    5976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    5978:	6143      	str	r3, [r0, #20]
    597a:	f85d 4b04 	ldr.w	r4, [sp], #4
    597e:	4770      	bx	lr

00005980 <sqrt>:
    5980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5984:	b08b      	sub	sp, #44	; 0x2c
    5986:	4604      	mov	r4, r0
    5988:	460d      	mov	r5, r1
    598a:	f000 f857 	bl	5a3c <__ieee754_sqrt>
    598e:	4b29      	ldr	r3, [pc, #164]	; (5a34 <sqrt+0xb4>)
    5990:	f993 a000 	ldrsb.w	sl, [r3]
    5994:	f1ba 3fff 	cmp.w	sl, #4294967295
    5998:	4606      	mov	r6, r0
    599a:	460f      	mov	r7, r1
    599c:	d012      	beq.n	59c4 <sqrt+0x44>
    599e:	4622      	mov	r2, r4
    59a0:	462b      	mov	r3, r5
    59a2:	4620      	mov	r0, r4
    59a4:	4629      	mov	r1, r5
    59a6:	f000 fd59 	bl	645c <__aeabi_dcmpun>
    59aa:	4683      	mov	fp, r0
    59ac:	b950      	cbnz	r0, 59c4 <sqrt+0x44>
    59ae:	f04f 0800 	mov.w	r8, #0
    59b2:	f04f 0900 	mov.w	r9, #0
    59b6:	4642      	mov	r2, r8
    59b8:	464b      	mov	r3, r9
    59ba:	4620      	mov	r0, r4
    59bc:	4629      	mov	r1, r5
    59be:	f000 fd25 	bl	640c <__aeabi_dcmplt>
    59c2:	b920      	cbnz	r0, 59ce <sqrt+0x4e>
    59c4:	4630      	mov	r0, r6
    59c6:	4639      	mov	r1, r7
    59c8:	b00b      	add	sp, #44	; 0x2c
    59ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59ce:	4b1a      	ldr	r3, [pc, #104]	; (5a38 <sqrt+0xb8>)
    59d0:	f8cd b020 	str.w	fp, [sp, #32]
    59d4:	2201      	movs	r2, #1
    59d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    59da:	e9cd 4502 	strd	r4, r5, [sp, #8]
    59de:	e88d 000c 	stmia.w	sp, {r2, r3}
    59e2:	f1ba 0f00 	cmp.w	sl, #0
    59e6:	d017      	beq.n	5a18 <sqrt+0x98>
    59e8:	4642      	mov	r2, r8
    59ea:	464b      	mov	r3, r9
    59ec:	4640      	mov	r0, r8
    59ee:	4649      	mov	r1, r9
    59f0:	f000 fbc4 	bl	617c <__aeabi_ddiv>
    59f4:	f1ba 0f02 	cmp.w	sl, #2
    59f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    59fc:	d10e      	bne.n	5a1c <sqrt+0x9c>
    59fe:	f000 fd93 	bl	6528 <__errno>
    5a02:	2321      	movs	r3, #33	; 0x21
    5a04:	6003      	str	r3, [r0, #0]
    5a06:	9b08      	ldr	r3, [sp, #32]
    5a08:	b973      	cbnz	r3, 5a28 <sqrt+0xa8>
    5a0a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    5a0e:	4630      	mov	r0, r6
    5a10:	4639      	mov	r1, r7
    5a12:	b00b      	add	sp, #44	; 0x2c
    5a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a18:	e9cd 8906 	strd	r8, r9, [sp, #24]
    5a1c:	4668      	mov	r0, sp
    5a1e:	f000 f8c9 	bl	5bb4 <matherr>
    5a22:	2800      	cmp	r0, #0
    5a24:	d1ef      	bne.n	5a06 <sqrt+0x86>
    5a26:	e7ea      	b.n	59fe <sqrt+0x7e>
    5a28:	f000 fd7e 	bl	6528 <__errno>
    5a2c:	9b08      	ldr	r3, [sp, #32]
    5a2e:	6003      	str	r3, [r0, #0]
    5a30:	e7eb      	b.n	5a0a <sqrt+0x8a>
    5a32:	bf00      	nop
    5a34:	200000ee 	.word	0x200000ee
    5a38:	0000676c 	.word	0x0000676c

00005a3c <__ieee754_sqrt>:
    5a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a40:	4f5b      	ldr	r7, [pc, #364]	; (5bb0 <__ieee754_sqrt+0x174>)
    5a42:	438f      	bics	r7, r1
    5a44:	4605      	mov	r5, r0
    5a46:	460c      	mov	r4, r1
    5a48:	f000 8092 	beq.w	5b70 <__ieee754_sqrt+0x134>
    5a4c:	2900      	cmp	r1, #0
    5a4e:	460b      	mov	r3, r1
    5a50:	4602      	mov	r2, r0
    5a52:	dd6f      	ble.n	5b34 <__ieee754_sqrt+0xf8>
    5a54:	150f      	asrs	r7, r1, #20
    5a56:	d07b      	beq.n	5b50 <__ieee754_sqrt+0x114>
    5a58:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    5a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a60:	07f8      	lsls	r0, r7, #31
    5a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5a66:	d45c      	bmi.n	5b22 <__ieee754_sqrt+0xe6>
    5a68:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    5a6c:	2600      	movs	r6, #0
    5a6e:	440b      	add	r3, r1
    5a70:	107f      	asrs	r7, r7, #1
    5a72:	0052      	lsls	r2, r2, #1
    5a74:	46b6      	mov	lr, r6
    5a76:	2016      	movs	r0, #22
    5a78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    5a7c:	eb0e 0401 	add.w	r4, lr, r1
    5a80:	429c      	cmp	r4, r3
    5a82:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    5a86:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5a8a:	dc03      	bgt.n	5a94 <__ieee754_sqrt+0x58>
    5a8c:	1b1b      	subs	r3, r3, r4
    5a8e:	eb04 0e01 	add.w	lr, r4, r1
    5a92:	440e      	add	r6, r1
    5a94:	3801      	subs	r0, #1
    5a96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    5a9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    5a9e:	d1ed      	bne.n	5a7c <__ieee754_sqrt+0x40>
    5aa0:	4684      	mov	ip, r0
    5aa2:	2420      	movs	r4, #32
    5aa4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5aa8:	e009      	b.n	5abe <__ieee754_sqrt+0x82>
    5aaa:	d020      	beq.n	5aee <__ieee754_sqrt+0xb2>
    5aac:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    5ab0:	3c01      	subs	r4, #1
    5ab2:	ea4f 0151 	mov.w	r1, r1, lsr #1
    5ab6:	442b      	add	r3, r5
    5ab8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5abc:	d020      	beq.n	5b00 <__ieee754_sqrt+0xc4>
    5abe:	4573      	cmp	r3, lr
    5ac0:	eb01 050c 	add.w	r5, r1, ip
    5ac4:	ddf1      	ble.n	5aaa <__ieee754_sqrt+0x6e>
    5ac6:	2d00      	cmp	r5, #0
    5ac8:	eb05 0c01 	add.w	ip, r5, r1
    5acc:	db09      	blt.n	5ae2 <__ieee754_sqrt+0xa6>
    5ace:	46f0      	mov	r8, lr
    5ad0:	4295      	cmp	r5, r2
    5ad2:	eba3 030e 	sub.w	r3, r3, lr
    5ad6:	d900      	bls.n	5ada <__ieee754_sqrt+0x9e>
    5ad8:	3b01      	subs	r3, #1
    5ada:	1b52      	subs	r2, r2, r5
    5adc:	4408      	add	r0, r1
    5ade:	46c6      	mov	lr, r8
    5ae0:	e7e4      	b.n	5aac <__ieee754_sqrt+0x70>
    5ae2:	f1bc 0f00 	cmp.w	ip, #0
    5ae6:	dbf2      	blt.n	5ace <__ieee754_sqrt+0x92>
    5ae8:	f10e 0801 	add.w	r8, lr, #1
    5aec:	e7f0      	b.n	5ad0 <__ieee754_sqrt+0x94>
    5aee:	4295      	cmp	r5, r2
    5af0:	d8dc      	bhi.n	5aac <__ieee754_sqrt+0x70>
    5af2:	2d00      	cmp	r5, #0
    5af4:	eb05 0c01 	add.w	ip, r5, r1
    5af8:	db44      	blt.n	5b84 <__ieee754_sqrt+0x148>
    5afa:	4698      	mov	r8, r3
    5afc:	2300      	movs	r3, #0
    5afe:	e7ec      	b.n	5ada <__ieee754_sqrt+0x9e>
    5b00:	4313      	orrs	r3, r2
    5b02:	d113      	bne.n	5b2c <__ieee754_sqrt+0xf0>
    5b04:	0840      	lsrs	r0, r0, #1
    5b06:	1073      	asrs	r3, r6, #1
    5b08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    5b0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5b10:	07f2      	lsls	r2, r6, #31
    5b12:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    5b16:	bf48      	it	mi
    5b18:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    5b1c:	4649      	mov	r1, r9
    5b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b22:	005b      	lsls	r3, r3, #1
    5b24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    5b28:	0052      	lsls	r2, r2, #1
    5b2a:	e79d      	b.n	5a68 <__ieee754_sqrt+0x2c>
    5b2c:	1c41      	adds	r1, r0, #1
    5b2e:	d02d      	beq.n	5b8c <__ieee754_sqrt+0x150>
    5b30:	3001      	adds	r0, #1
    5b32:	e7e7      	b.n	5b04 <__ieee754_sqrt+0xc8>
    5b34:	4606      	mov	r6, r0
    5b36:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    5b3a:	433e      	orrs	r6, r7
    5b3c:	d0ef      	beq.n	5b1e <__ieee754_sqrt+0xe2>
    5b3e:	bb69      	cbnz	r1, 5b9c <__ieee754_sqrt+0x160>
    5b40:	460f      	mov	r7, r1
    5b42:	0ad3      	lsrs	r3, r2, #11
    5b44:	3f15      	subs	r7, #21
    5b46:	0552      	lsls	r2, r2, #21
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d0fa      	beq.n	5b42 <__ieee754_sqrt+0x106>
    5b4c:	02de      	lsls	r6, r3, #11
    5b4e:	d420      	bmi.n	5b92 <__ieee754_sqrt+0x156>
    5b50:	2400      	movs	r4, #0
    5b52:	e000      	b.n	5b56 <__ieee754_sqrt+0x11a>
    5b54:	4604      	mov	r4, r0
    5b56:	005b      	lsls	r3, r3, #1
    5b58:	02dd      	lsls	r5, r3, #11
    5b5a:	f104 0001 	add.w	r0, r4, #1
    5b5e:	d5f9      	bpl.n	5b54 <__ieee754_sqrt+0x118>
    5b60:	f1c0 0120 	rsb	r1, r0, #32
    5b64:	fa22 f101 	lsr.w	r1, r2, r1
    5b68:	430b      	orrs	r3, r1
    5b6a:	1b3f      	subs	r7, r7, r4
    5b6c:	4082      	lsls	r2, r0
    5b6e:	e773      	b.n	5a58 <__ieee754_sqrt+0x1c>
    5b70:	4602      	mov	r2, r0
    5b72:	460b      	mov	r3, r1
    5b74:	f000 f9d8 	bl	5f28 <__aeabi_dmul>
    5b78:	462a      	mov	r2, r5
    5b7a:	4623      	mov	r3, r4
    5b7c:	f000 f822 	bl	5bc4 <__adddf3>
    5b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b84:	f1bc 0f00 	cmp.w	ip, #0
    5b88:	daae      	bge.n	5ae8 <__ieee754_sqrt+0xac>
    5b8a:	e7b6      	b.n	5afa <__ieee754_sqrt+0xbe>
    5b8c:	3601      	adds	r6, #1
    5b8e:	4620      	mov	r0, r4
    5b90:	e7b9      	b.n	5b06 <__ieee754_sqrt+0xca>
    5b92:	2000      	movs	r0, #0
    5b94:	2120      	movs	r1, #32
    5b96:	f04f 34ff 	mov.w	r4, #4294967295
    5b9a:	e7e3      	b.n	5b64 <__ieee754_sqrt+0x128>
    5b9c:	4602      	mov	r2, r0
    5b9e:	460b      	mov	r3, r1
    5ba0:	f000 f80e 	bl	5bc0 <__aeabi_dsub>
    5ba4:	4602      	mov	r2, r0
    5ba6:	460b      	mov	r3, r1
    5ba8:	f000 fae8 	bl	617c <__aeabi_ddiv>
    5bac:	e7b7      	b.n	5b1e <__ieee754_sqrt+0xe2>
    5bae:	bf00      	nop
    5bb0:	7ff00000 	.word	0x7ff00000

00005bb4 <matherr>:
    5bb4:	2000      	movs	r0, #0
    5bb6:	4770      	bx	lr

00005bb8 <__aeabi_drsub>:
    5bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    5bbc:	e002      	b.n	5bc4 <__adddf3>
    5bbe:	bf00      	nop

00005bc0 <__aeabi_dsub>:
    5bc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005bc4 <__adddf3>:
    5bc4:	b530      	push	{r4, r5, lr}
    5bc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5bca:	ea4f 0543 	mov.w	r5, r3, lsl #1
    5bce:	ea94 0f05 	teq	r4, r5
    5bd2:	bf08      	it	eq
    5bd4:	ea90 0f02 	teqeq	r0, r2
    5bd8:	bf1f      	itttt	ne
    5bda:	ea54 0c00 	orrsne.w	ip, r4, r0
    5bde:	ea55 0c02 	orrsne.w	ip, r5, r2
    5be2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    5be6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5bea:	f000 80e2 	beq.w	5db2 <__adddf3+0x1ee>
    5bee:	ea4f 5454 	mov.w	r4, r4, lsr #21
    5bf2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    5bf6:	bfb8      	it	lt
    5bf8:	426d      	neglt	r5, r5
    5bfa:	dd0c      	ble.n	5c16 <__adddf3+0x52>
    5bfc:	442c      	add	r4, r5
    5bfe:	ea80 0202 	eor.w	r2, r0, r2
    5c02:	ea81 0303 	eor.w	r3, r1, r3
    5c06:	ea82 0000 	eor.w	r0, r2, r0
    5c0a:	ea83 0101 	eor.w	r1, r3, r1
    5c0e:	ea80 0202 	eor.w	r2, r0, r2
    5c12:	ea81 0303 	eor.w	r3, r1, r3
    5c16:	2d36      	cmp	r5, #54	; 0x36
    5c18:	bf88      	it	hi
    5c1a:	bd30      	pophi	{r4, r5, pc}
    5c1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5c20:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5c24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    5c28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5c2c:	d002      	beq.n	5c34 <__adddf3+0x70>
    5c2e:	4240      	negs	r0, r0
    5c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5c34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    5c38:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5c3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    5c40:	d002      	beq.n	5c48 <__adddf3+0x84>
    5c42:	4252      	negs	r2, r2
    5c44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5c48:	ea94 0f05 	teq	r4, r5
    5c4c:	f000 80a7 	beq.w	5d9e <__adddf3+0x1da>
    5c50:	f1a4 0401 	sub.w	r4, r4, #1
    5c54:	f1d5 0e20 	rsbs	lr, r5, #32
    5c58:	db0d      	blt.n	5c76 <__adddf3+0xb2>
    5c5a:	fa02 fc0e 	lsl.w	ip, r2, lr
    5c5e:	fa22 f205 	lsr.w	r2, r2, r5
    5c62:	1880      	adds	r0, r0, r2
    5c64:	f141 0100 	adc.w	r1, r1, #0
    5c68:	fa03 f20e 	lsl.w	r2, r3, lr
    5c6c:	1880      	adds	r0, r0, r2
    5c6e:	fa43 f305 	asr.w	r3, r3, r5
    5c72:	4159      	adcs	r1, r3
    5c74:	e00e      	b.n	5c94 <__adddf3+0xd0>
    5c76:	f1a5 0520 	sub.w	r5, r5, #32
    5c7a:	f10e 0e20 	add.w	lr, lr, #32
    5c7e:	2a01      	cmp	r2, #1
    5c80:	fa03 fc0e 	lsl.w	ip, r3, lr
    5c84:	bf28      	it	cs
    5c86:	f04c 0c02 	orrcs.w	ip, ip, #2
    5c8a:	fa43 f305 	asr.w	r3, r3, r5
    5c8e:	18c0      	adds	r0, r0, r3
    5c90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    5c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5c98:	d507      	bpl.n	5caa <__adddf3+0xe6>
    5c9a:	f04f 0e00 	mov.w	lr, #0
    5c9e:	f1dc 0c00 	rsbs	ip, ip, #0
    5ca2:	eb7e 0000 	sbcs.w	r0, lr, r0
    5ca6:	eb6e 0101 	sbc.w	r1, lr, r1
    5caa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    5cae:	d31b      	bcc.n	5ce8 <__adddf3+0x124>
    5cb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    5cb4:	d30c      	bcc.n	5cd0 <__adddf3+0x10c>
    5cb6:	0849      	lsrs	r1, r1, #1
    5cb8:	ea5f 0030 	movs.w	r0, r0, rrx
    5cbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    5cc0:	f104 0401 	add.w	r4, r4, #1
    5cc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    5cc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    5ccc:	f080 809a 	bcs.w	5e04 <__adddf3+0x240>
    5cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5cd4:	bf08      	it	eq
    5cd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5cda:	f150 0000 	adcs.w	r0, r0, #0
    5cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5ce2:	ea41 0105 	orr.w	r1, r1, r5
    5ce6:	bd30      	pop	{r4, r5, pc}
    5ce8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    5cec:	4140      	adcs	r0, r0
    5cee:	eb41 0101 	adc.w	r1, r1, r1
    5cf2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5cf6:	f1a4 0401 	sub.w	r4, r4, #1
    5cfa:	d1e9      	bne.n	5cd0 <__adddf3+0x10c>
    5cfc:	f091 0f00 	teq	r1, #0
    5d00:	bf04      	itt	eq
    5d02:	4601      	moveq	r1, r0
    5d04:	2000      	moveq	r0, #0
    5d06:	fab1 f381 	clz	r3, r1
    5d0a:	bf08      	it	eq
    5d0c:	3320      	addeq	r3, #32
    5d0e:	f1a3 030b 	sub.w	r3, r3, #11
    5d12:	f1b3 0220 	subs.w	r2, r3, #32
    5d16:	da0c      	bge.n	5d32 <__adddf3+0x16e>
    5d18:	320c      	adds	r2, #12
    5d1a:	dd08      	ble.n	5d2e <__adddf3+0x16a>
    5d1c:	f102 0c14 	add.w	ip, r2, #20
    5d20:	f1c2 020c 	rsb	r2, r2, #12
    5d24:	fa01 f00c 	lsl.w	r0, r1, ip
    5d28:	fa21 f102 	lsr.w	r1, r1, r2
    5d2c:	e00c      	b.n	5d48 <__adddf3+0x184>
    5d2e:	f102 0214 	add.w	r2, r2, #20
    5d32:	bfd8      	it	le
    5d34:	f1c2 0c20 	rsble	ip, r2, #32
    5d38:	fa01 f102 	lsl.w	r1, r1, r2
    5d3c:	fa20 fc0c 	lsr.w	ip, r0, ip
    5d40:	bfdc      	itt	le
    5d42:	ea41 010c 	orrle.w	r1, r1, ip
    5d46:	4090      	lslle	r0, r2
    5d48:	1ae4      	subs	r4, r4, r3
    5d4a:	bfa2      	ittt	ge
    5d4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    5d50:	4329      	orrge	r1, r5
    5d52:	bd30      	popge	{r4, r5, pc}
    5d54:	ea6f 0404 	mvn.w	r4, r4
    5d58:	3c1f      	subs	r4, #31
    5d5a:	da1c      	bge.n	5d96 <__adddf3+0x1d2>
    5d5c:	340c      	adds	r4, #12
    5d5e:	dc0e      	bgt.n	5d7e <__adddf3+0x1ba>
    5d60:	f104 0414 	add.w	r4, r4, #20
    5d64:	f1c4 0220 	rsb	r2, r4, #32
    5d68:	fa20 f004 	lsr.w	r0, r0, r4
    5d6c:	fa01 f302 	lsl.w	r3, r1, r2
    5d70:	ea40 0003 	orr.w	r0, r0, r3
    5d74:	fa21 f304 	lsr.w	r3, r1, r4
    5d78:	ea45 0103 	orr.w	r1, r5, r3
    5d7c:	bd30      	pop	{r4, r5, pc}
    5d7e:	f1c4 040c 	rsb	r4, r4, #12
    5d82:	f1c4 0220 	rsb	r2, r4, #32
    5d86:	fa20 f002 	lsr.w	r0, r0, r2
    5d8a:	fa01 f304 	lsl.w	r3, r1, r4
    5d8e:	ea40 0003 	orr.w	r0, r0, r3
    5d92:	4629      	mov	r1, r5
    5d94:	bd30      	pop	{r4, r5, pc}
    5d96:	fa21 f004 	lsr.w	r0, r1, r4
    5d9a:	4629      	mov	r1, r5
    5d9c:	bd30      	pop	{r4, r5, pc}
    5d9e:	f094 0f00 	teq	r4, #0
    5da2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    5da6:	bf06      	itte	eq
    5da8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    5dac:	3401      	addeq	r4, #1
    5dae:	3d01      	subne	r5, #1
    5db0:	e74e      	b.n	5c50 <__adddf3+0x8c>
    5db2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5db6:	bf18      	it	ne
    5db8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    5dbc:	d029      	beq.n	5e12 <__adddf3+0x24e>
    5dbe:	ea94 0f05 	teq	r4, r5
    5dc2:	bf08      	it	eq
    5dc4:	ea90 0f02 	teqeq	r0, r2
    5dc8:	d005      	beq.n	5dd6 <__adddf3+0x212>
    5dca:	ea54 0c00 	orrs.w	ip, r4, r0
    5dce:	bf04      	itt	eq
    5dd0:	4619      	moveq	r1, r3
    5dd2:	4610      	moveq	r0, r2
    5dd4:	bd30      	pop	{r4, r5, pc}
    5dd6:	ea91 0f03 	teq	r1, r3
    5dda:	bf1e      	ittt	ne
    5ddc:	2100      	movne	r1, #0
    5dde:	2000      	movne	r0, #0
    5de0:	bd30      	popne	{r4, r5, pc}
    5de2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    5de6:	d105      	bne.n	5df4 <__adddf3+0x230>
    5de8:	0040      	lsls	r0, r0, #1
    5dea:	4149      	adcs	r1, r1
    5dec:	bf28      	it	cs
    5dee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    5df2:	bd30      	pop	{r4, r5, pc}
    5df4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    5df8:	bf3c      	itt	cc
    5dfa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    5dfe:	bd30      	popcc	{r4, r5, pc}
    5e00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5e04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    5e08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5e0c:	f04f 0000 	mov.w	r0, #0
    5e10:	bd30      	pop	{r4, r5, pc}
    5e12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5e16:	bf1a      	itte	ne
    5e18:	4619      	movne	r1, r3
    5e1a:	4610      	movne	r0, r2
    5e1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    5e20:	bf1c      	itt	ne
    5e22:	460b      	movne	r3, r1
    5e24:	4602      	movne	r2, r0
    5e26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5e2a:	bf06      	itte	eq
    5e2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    5e30:	ea91 0f03 	teqeq	r1, r3
    5e34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    5e38:	bd30      	pop	{r4, r5, pc}
    5e3a:	bf00      	nop

00005e3c <__aeabi_ui2d>:
    5e3c:	f090 0f00 	teq	r0, #0
    5e40:	bf04      	itt	eq
    5e42:	2100      	moveq	r1, #0
    5e44:	4770      	bxeq	lr
    5e46:	b530      	push	{r4, r5, lr}
    5e48:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5e4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5e50:	f04f 0500 	mov.w	r5, #0
    5e54:	f04f 0100 	mov.w	r1, #0
    5e58:	e750      	b.n	5cfc <__adddf3+0x138>
    5e5a:	bf00      	nop

00005e5c <__aeabi_i2d>:
    5e5c:	f090 0f00 	teq	r0, #0
    5e60:	bf04      	itt	eq
    5e62:	2100      	moveq	r1, #0
    5e64:	4770      	bxeq	lr
    5e66:	b530      	push	{r4, r5, lr}
    5e68:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5e6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5e70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5e74:	bf48      	it	mi
    5e76:	4240      	negmi	r0, r0
    5e78:	f04f 0100 	mov.w	r1, #0
    5e7c:	e73e      	b.n	5cfc <__adddf3+0x138>
    5e7e:	bf00      	nop

00005e80 <__aeabi_f2d>:
    5e80:	0042      	lsls	r2, r0, #1
    5e82:	ea4f 01e2 	mov.w	r1, r2, asr #3
    5e86:	ea4f 0131 	mov.w	r1, r1, rrx
    5e8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    5e8e:	bf1f      	itttt	ne
    5e90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    5e94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5e98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    5e9c:	4770      	bxne	lr
    5e9e:	f092 0f00 	teq	r2, #0
    5ea2:	bf14      	ite	ne
    5ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5ea8:	4770      	bxeq	lr
    5eaa:	b530      	push	{r4, r5, lr}
    5eac:	f44f 7460 	mov.w	r4, #896	; 0x380
    5eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5eb8:	e720      	b.n	5cfc <__adddf3+0x138>
    5eba:	bf00      	nop

00005ebc <__aeabi_ul2d>:
    5ebc:	ea50 0201 	orrs.w	r2, r0, r1
    5ec0:	bf08      	it	eq
    5ec2:	4770      	bxeq	lr
    5ec4:	b530      	push	{r4, r5, lr}
    5ec6:	f04f 0500 	mov.w	r5, #0
    5eca:	e00a      	b.n	5ee2 <__aeabi_l2d+0x16>

00005ecc <__aeabi_l2d>:
    5ecc:	ea50 0201 	orrs.w	r2, r0, r1
    5ed0:	bf08      	it	eq
    5ed2:	4770      	bxeq	lr
    5ed4:	b530      	push	{r4, r5, lr}
    5ed6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    5eda:	d502      	bpl.n	5ee2 <__aeabi_l2d+0x16>
    5edc:	4240      	negs	r0, r0
    5ede:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5ee2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5ee6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5eea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    5eee:	f43f aedc 	beq.w	5caa <__adddf3+0xe6>
    5ef2:	f04f 0203 	mov.w	r2, #3
    5ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5efa:	bf18      	it	ne
    5efc:	3203      	addne	r2, #3
    5efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5f02:	bf18      	it	ne
    5f04:	3203      	addne	r2, #3
    5f06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    5f0a:	f1c2 0320 	rsb	r3, r2, #32
    5f0e:	fa00 fc03 	lsl.w	ip, r0, r3
    5f12:	fa20 f002 	lsr.w	r0, r0, r2
    5f16:	fa01 fe03 	lsl.w	lr, r1, r3
    5f1a:	ea40 000e 	orr.w	r0, r0, lr
    5f1e:	fa21 f102 	lsr.w	r1, r1, r2
    5f22:	4414      	add	r4, r2
    5f24:	e6c1      	b.n	5caa <__adddf3+0xe6>
    5f26:	bf00      	nop

00005f28 <__aeabi_dmul>:
    5f28:	b570      	push	{r4, r5, r6, lr}
    5f2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5f2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5f32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5f36:	bf1d      	ittte	ne
    5f38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5f3c:	ea94 0f0c 	teqne	r4, ip
    5f40:	ea95 0f0c 	teqne	r5, ip
    5f44:	f000 f8de 	bleq	6104 <__aeabi_dmul+0x1dc>
    5f48:	442c      	add	r4, r5
    5f4a:	ea81 0603 	eor.w	r6, r1, r3
    5f4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    5f52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    5f56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    5f5a:	bf18      	it	ne
    5f5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    5f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5f68:	d038      	beq.n	5fdc <__aeabi_dmul+0xb4>
    5f6a:	fba0 ce02 	umull	ip, lr, r0, r2
    5f6e:	f04f 0500 	mov.w	r5, #0
    5f72:	fbe1 e502 	umlal	lr, r5, r1, r2
    5f76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    5f7a:	fbe0 e503 	umlal	lr, r5, r0, r3
    5f7e:	f04f 0600 	mov.w	r6, #0
    5f82:	fbe1 5603 	umlal	r5, r6, r1, r3
    5f86:	f09c 0f00 	teq	ip, #0
    5f8a:	bf18      	it	ne
    5f8c:	f04e 0e01 	orrne.w	lr, lr, #1
    5f90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    5f94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5f98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    5f9c:	d204      	bcs.n	5fa8 <__aeabi_dmul+0x80>
    5f9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    5fa2:	416d      	adcs	r5, r5
    5fa4:	eb46 0606 	adc.w	r6, r6, r6
    5fa8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    5fac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    5fb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    5fb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    5fb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    5fbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5fc0:	bf88      	it	hi
    5fc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5fc6:	d81e      	bhi.n	6006 <__aeabi_dmul+0xde>
    5fc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    5fcc:	bf08      	it	eq
    5fce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    5fd2:	f150 0000 	adcs.w	r0, r0, #0
    5fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    5fda:	bd70      	pop	{r4, r5, r6, pc}
    5fdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    5fe0:	ea46 0101 	orr.w	r1, r6, r1
    5fe4:	ea40 0002 	orr.w	r0, r0, r2
    5fe8:	ea81 0103 	eor.w	r1, r1, r3
    5fec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    5ff0:	bfc2      	ittt	gt
    5ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
    5ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5ffa:	bd70      	popgt	{r4, r5, r6, pc}
    5ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6000:	f04f 0e00 	mov.w	lr, #0
    6004:	3c01      	subs	r4, #1
    6006:	f300 80ab 	bgt.w	6160 <__aeabi_dmul+0x238>
    600a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    600e:	bfde      	ittt	le
    6010:	2000      	movle	r0, #0
    6012:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6016:	bd70      	pople	{r4, r5, r6, pc}
    6018:	f1c4 0400 	rsb	r4, r4, #0
    601c:	3c20      	subs	r4, #32
    601e:	da35      	bge.n	608c <__aeabi_dmul+0x164>
    6020:	340c      	adds	r4, #12
    6022:	dc1b      	bgt.n	605c <__aeabi_dmul+0x134>
    6024:	f104 0414 	add.w	r4, r4, #20
    6028:	f1c4 0520 	rsb	r5, r4, #32
    602c:	fa00 f305 	lsl.w	r3, r0, r5
    6030:	fa20 f004 	lsr.w	r0, r0, r4
    6034:	fa01 f205 	lsl.w	r2, r1, r5
    6038:	ea40 0002 	orr.w	r0, r0, r2
    603c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    6040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6048:	fa21 f604 	lsr.w	r6, r1, r4
    604c:	eb42 0106 	adc.w	r1, r2, r6
    6050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6054:	bf08      	it	eq
    6056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    605a:	bd70      	pop	{r4, r5, r6, pc}
    605c:	f1c4 040c 	rsb	r4, r4, #12
    6060:	f1c4 0520 	rsb	r5, r4, #32
    6064:	fa00 f304 	lsl.w	r3, r0, r4
    6068:	fa20 f005 	lsr.w	r0, r0, r5
    606c:	fa01 f204 	lsl.w	r2, r1, r4
    6070:	ea40 0002 	orr.w	r0, r0, r2
    6074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6078:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    607c:	f141 0100 	adc.w	r1, r1, #0
    6080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6084:	bf08      	it	eq
    6086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    608a:	bd70      	pop	{r4, r5, r6, pc}
    608c:	f1c4 0520 	rsb	r5, r4, #32
    6090:	fa00 f205 	lsl.w	r2, r0, r5
    6094:	ea4e 0e02 	orr.w	lr, lr, r2
    6098:	fa20 f304 	lsr.w	r3, r0, r4
    609c:	fa01 f205 	lsl.w	r2, r1, r5
    60a0:	ea43 0302 	orr.w	r3, r3, r2
    60a4:	fa21 f004 	lsr.w	r0, r1, r4
    60a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    60ac:	fa21 f204 	lsr.w	r2, r1, r4
    60b0:	ea20 0002 	bic.w	r0, r0, r2
    60b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    60b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    60bc:	bf08      	it	eq
    60be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    60c2:	bd70      	pop	{r4, r5, r6, pc}
    60c4:	f094 0f00 	teq	r4, #0
    60c8:	d10f      	bne.n	60ea <__aeabi_dmul+0x1c2>
    60ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    60ce:	0040      	lsls	r0, r0, #1
    60d0:	eb41 0101 	adc.w	r1, r1, r1
    60d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    60d8:	bf08      	it	eq
    60da:	3c01      	subeq	r4, #1
    60dc:	d0f7      	beq.n	60ce <__aeabi_dmul+0x1a6>
    60de:	ea41 0106 	orr.w	r1, r1, r6
    60e2:	f095 0f00 	teq	r5, #0
    60e6:	bf18      	it	ne
    60e8:	4770      	bxne	lr
    60ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    60ee:	0052      	lsls	r2, r2, #1
    60f0:	eb43 0303 	adc.w	r3, r3, r3
    60f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    60f8:	bf08      	it	eq
    60fa:	3d01      	subeq	r5, #1
    60fc:	d0f7      	beq.n	60ee <__aeabi_dmul+0x1c6>
    60fe:	ea43 0306 	orr.w	r3, r3, r6
    6102:	4770      	bx	lr
    6104:	ea94 0f0c 	teq	r4, ip
    6108:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    610c:	bf18      	it	ne
    610e:	ea95 0f0c 	teqne	r5, ip
    6112:	d00c      	beq.n	612e <__aeabi_dmul+0x206>
    6114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6118:	bf18      	it	ne
    611a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    611e:	d1d1      	bne.n	60c4 <__aeabi_dmul+0x19c>
    6120:	ea81 0103 	eor.w	r1, r1, r3
    6124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6128:	f04f 0000 	mov.w	r0, #0
    612c:	bd70      	pop	{r4, r5, r6, pc}
    612e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6132:	bf06      	itte	eq
    6134:	4610      	moveq	r0, r2
    6136:	4619      	moveq	r1, r3
    6138:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    613c:	d019      	beq.n	6172 <__aeabi_dmul+0x24a>
    613e:	ea94 0f0c 	teq	r4, ip
    6142:	d102      	bne.n	614a <__aeabi_dmul+0x222>
    6144:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    6148:	d113      	bne.n	6172 <__aeabi_dmul+0x24a>
    614a:	ea95 0f0c 	teq	r5, ip
    614e:	d105      	bne.n	615c <__aeabi_dmul+0x234>
    6150:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    6154:	bf1c      	itt	ne
    6156:	4610      	movne	r0, r2
    6158:	4619      	movne	r1, r3
    615a:	d10a      	bne.n	6172 <__aeabi_dmul+0x24a>
    615c:	ea81 0103 	eor.w	r1, r1, r3
    6160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6164:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6168:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    616c:	f04f 0000 	mov.w	r0, #0
    6170:	bd70      	pop	{r4, r5, r6, pc}
    6172:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6176:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    617a:	bd70      	pop	{r4, r5, r6, pc}

0000617c <__aeabi_ddiv>:
    617c:	b570      	push	{r4, r5, r6, lr}
    617e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    618a:	bf1d      	ittte	ne
    618c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6190:	ea94 0f0c 	teqne	r4, ip
    6194:	ea95 0f0c 	teqne	r5, ip
    6198:	f000 f8a7 	bleq	62ea <__aeabi_ddiv+0x16e>
    619c:	eba4 0405 	sub.w	r4, r4, r5
    61a0:	ea81 0e03 	eor.w	lr, r1, r3
    61a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    61a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    61ac:	f000 8088 	beq.w	62c0 <__aeabi_ddiv+0x144>
    61b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    61b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    61b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    61bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    61c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    61c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    61c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    61cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    61d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    61d4:	429d      	cmp	r5, r3
    61d6:	bf08      	it	eq
    61d8:	4296      	cmpeq	r6, r2
    61da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    61de:	f504 7440 	add.w	r4, r4, #768	; 0x300
    61e2:	d202      	bcs.n	61ea <__aeabi_ddiv+0x6e>
    61e4:	085b      	lsrs	r3, r3, #1
    61e6:	ea4f 0232 	mov.w	r2, r2, rrx
    61ea:	1ab6      	subs	r6, r6, r2
    61ec:	eb65 0503 	sbc.w	r5, r5, r3
    61f0:	085b      	lsrs	r3, r3, #1
    61f2:	ea4f 0232 	mov.w	r2, r2, rrx
    61f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    61fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    61fe:	ebb6 0e02 	subs.w	lr, r6, r2
    6202:	eb75 0e03 	sbcs.w	lr, r5, r3
    6206:	bf22      	ittt	cs
    6208:	1ab6      	subcs	r6, r6, r2
    620a:	4675      	movcs	r5, lr
    620c:	ea40 000c 	orrcs.w	r0, r0, ip
    6210:	085b      	lsrs	r3, r3, #1
    6212:	ea4f 0232 	mov.w	r2, r2, rrx
    6216:	ebb6 0e02 	subs.w	lr, r6, r2
    621a:	eb75 0e03 	sbcs.w	lr, r5, r3
    621e:	bf22      	ittt	cs
    6220:	1ab6      	subcs	r6, r6, r2
    6222:	4675      	movcs	r5, lr
    6224:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6228:	085b      	lsrs	r3, r3, #1
    622a:	ea4f 0232 	mov.w	r2, r2, rrx
    622e:	ebb6 0e02 	subs.w	lr, r6, r2
    6232:	eb75 0e03 	sbcs.w	lr, r5, r3
    6236:	bf22      	ittt	cs
    6238:	1ab6      	subcs	r6, r6, r2
    623a:	4675      	movcs	r5, lr
    623c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6240:	085b      	lsrs	r3, r3, #1
    6242:	ea4f 0232 	mov.w	r2, r2, rrx
    6246:	ebb6 0e02 	subs.w	lr, r6, r2
    624a:	eb75 0e03 	sbcs.w	lr, r5, r3
    624e:	bf22      	ittt	cs
    6250:	1ab6      	subcs	r6, r6, r2
    6252:	4675      	movcs	r5, lr
    6254:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6258:	ea55 0e06 	orrs.w	lr, r5, r6
    625c:	d018      	beq.n	6290 <__aeabi_ddiv+0x114>
    625e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    6262:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    6266:	ea4f 1606 	mov.w	r6, r6, lsl #4
    626a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    626e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    6272:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    6276:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    627a:	d1c0      	bne.n	61fe <__aeabi_ddiv+0x82>
    627c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6280:	d10b      	bne.n	629a <__aeabi_ddiv+0x11e>
    6282:	ea41 0100 	orr.w	r1, r1, r0
    6286:	f04f 0000 	mov.w	r0, #0
    628a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    628e:	e7b6      	b.n	61fe <__aeabi_ddiv+0x82>
    6290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6294:	bf04      	itt	eq
    6296:	4301      	orreq	r1, r0
    6298:	2000      	moveq	r0, #0
    629a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    629e:	bf88      	it	hi
    62a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    62a4:	f63f aeaf 	bhi.w	6006 <__aeabi_dmul+0xde>
    62a8:	ebb5 0c03 	subs.w	ip, r5, r3
    62ac:	bf04      	itt	eq
    62ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    62b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    62b6:	f150 0000 	adcs.w	r0, r0, #0
    62ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    62c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    62c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    62cc:	bfc2      	ittt	gt
    62ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    62d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    62d6:	bd70      	popgt	{r4, r5, r6, pc}
    62d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    62dc:	f04f 0e00 	mov.w	lr, #0
    62e0:	3c01      	subs	r4, #1
    62e2:	e690      	b.n	6006 <__aeabi_dmul+0xde>
    62e4:	ea45 0e06 	orr.w	lr, r5, r6
    62e8:	e68d      	b.n	6006 <__aeabi_dmul+0xde>
    62ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    62ee:	ea94 0f0c 	teq	r4, ip
    62f2:	bf08      	it	eq
    62f4:	ea95 0f0c 	teqeq	r5, ip
    62f8:	f43f af3b 	beq.w	6172 <__aeabi_dmul+0x24a>
    62fc:	ea94 0f0c 	teq	r4, ip
    6300:	d10a      	bne.n	6318 <__aeabi_ddiv+0x19c>
    6302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6306:	f47f af34 	bne.w	6172 <__aeabi_dmul+0x24a>
    630a:	ea95 0f0c 	teq	r5, ip
    630e:	f47f af25 	bne.w	615c <__aeabi_dmul+0x234>
    6312:	4610      	mov	r0, r2
    6314:	4619      	mov	r1, r3
    6316:	e72c      	b.n	6172 <__aeabi_dmul+0x24a>
    6318:	ea95 0f0c 	teq	r5, ip
    631c:	d106      	bne.n	632c <__aeabi_ddiv+0x1b0>
    631e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6322:	f43f aefd 	beq.w	6120 <__aeabi_dmul+0x1f8>
    6326:	4610      	mov	r0, r2
    6328:	4619      	mov	r1, r3
    632a:	e722      	b.n	6172 <__aeabi_dmul+0x24a>
    632c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6330:	bf18      	it	ne
    6332:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6336:	f47f aec5 	bne.w	60c4 <__aeabi_dmul+0x19c>
    633a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    633e:	f47f af0d 	bne.w	615c <__aeabi_dmul+0x234>
    6342:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    6346:	f47f aeeb 	bne.w	6120 <__aeabi_dmul+0x1f8>
    634a:	e712      	b.n	6172 <__aeabi_dmul+0x24a>

0000634c <__gedf2>:
    634c:	f04f 3cff 	mov.w	ip, #4294967295
    6350:	e006      	b.n	6360 <__cmpdf2+0x4>
    6352:	bf00      	nop

00006354 <__ledf2>:
    6354:	f04f 0c01 	mov.w	ip, #1
    6358:	e002      	b.n	6360 <__cmpdf2+0x4>
    635a:	bf00      	nop

0000635c <__cmpdf2>:
    635c:	f04f 0c01 	mov.w	ip, #1
    6360:	f84d cd04 	str.w	ip, [sp, #-4]!
    6364:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    636c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6370:	bf18      	it	ne
    6372:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    6376:	d01b      	beq.n	63b0 <__cmpdf2+0x54>
    6378:	b001      	add	sp, #4
    637a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    637e:	bf0c      	ite	eq
    6380:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    6384:	ea91 0f03 	teqne	r1, r3
    6388:	bf02      	ittt	eq
    638a:	ea90 0f02 	teqeq	r0, r2
    638e:	2000      	moveq	r0, #0
    6390:	4770      	bxeq	lr
    6392:	f110 0f00 	cmn.w	r0, #0
    6396:	ea91 0f03 	teq	r1, r3
    639a:	bf58      	it	pl
    639c:	4299      	cmppl	r1, r3
    639e:	bf08      	it	eq
    63a0:	4290      	cmpeq	r0, r2
    63a2:	bf2c      	ite	cs
    63a4:	17d8      	asrcs	r0, r3, #31
    63a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    63aa:	f040 0001 	orr.w	r0, r0, #1
    63ae:	4770      	bx	lr
    63b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    63b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    63b8:	d102      	bne.n	63c0 <__cmpdf2+0x64>
    63ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    63be:	d107      	bne.n	63d0 <__cmpdf2+0x74>
    63c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    63c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    63c8:	d1d6      	bne.n	6378 <__cmpdf2+0x1c>
    63ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    63ce:	d0d3      	beq.n	6378 <__cmpdf2+0x1c>
    63d0:	f85d 0b04 	ldr.w	r0, [sp], #4
    63d4:	4770      	bx	lr
    63d6:	bf00      	nop

000063d8 <__aeabi_cdrcmple>:
    63d8:	4684      	mov	ip, r0
    63da:	4610      	mov	r0, r2
    63dc:	4662      	mov	r2, ip
    63de:	468c      	mov	ip, r1
    63e0:	4619      	mov	r1, r3
    63e2:	4663      	mov	r3, ip
    63e4:	e000      	b.n	63e8 <__aeabi_cdcmpeq>
    63e6:	bf00      	nop

000063e8 <__aeabi_cdcmpeq>:
    63e8:	b501      	push	{r0, lr}
    63ea:	f7ff ffb7 	bl	635c <__cmpdf2>
    63ee:	2800      	cmp	r0, #0
    63f0:	bf48      	it	mi
    63f2:	f110 0f00 	cmnmi.w	r0, #0
    63f6:	bd01      	pop	{r0, pc}

000063f8 <__aeabi_dcmpeq>:
    63f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    63fc:	f7ff fff4 	bl	63e8 <__aeabi_cdcmpeq>
    6400:	bf0c      	ite	eq
    6402:	2001      	moveq	r0, #1
    6404:	2000      	movne	r0, #0
    6406:	f85d fb08 	ldr.w	pc, [sp], #8
    640a:	bf00      	nop

0000640c <__aeabi_dcmplt>:
    640c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6410:	f7ff ffea 	bl	63e8 <__aeabi_cdcmpeq>
    6414:	bf34      	ite	cc
    6416:	2001      	movcc	r0, #1
    6418:	2000      	movcs	r0, #0
    641a:	f85d fb08 	ldr.w	pc, [sp], #8
    641e:	bf00      	nop

00006420 <__aeabi_dcmple>:
    6420:	f84d ed08 	str.w	lr, [sp, #-8]!
    6424:	f7ff ffe0 	bl	63e8 <__aeabi_cdcmpeq>
    6428:	bf94      	ite	ls
    642a:	2001      	movls	r0, #1
    642c:	2000      	movhi	r0, #0
    642e:	f85d fb08 	ldr.w	pc, [sp], #8
    6432:	bf00      	nop

00006434 <__aeabi_dcmpge>:
    6434:	f84d ed08 	str.w	lr, [sp, #-8]!
    6438:	f7ff ffce 	bl	63d8 <__aeabi_cdrcmple>
    643c:	bf94      	ite	ls
    643e:	2001      	movls	r0, #1
    6440:	2000      	movhi	r0, #0
    6442:	f85d fb08 	ldr.w	pc, [sp], #8
    6446:	bf00      	nop

00006448 <__aeabi_dcmpgt>:
    6448:	f84d ed08 	str.w	lr, [sp, #-8]!
    644c:	f7ff ffc4 	bl	63d8 <__aeabi_cdrcmple>
    6450:	bf34      	ite	cc
    6452:	2001      	movcc	r0, #1
    6454:	2000      	movcs	r0, #0
    6456:	f85d fb08 	ldr.w	pc, [sp], #8
    645a:	bf00      	nop

0000645c <__aeabi_dcmpun>:
    645c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6464:	d102      	bne.n	646c <__aeabi_dcmpun+0x10>
    6466:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    646a:	d10a      	bne.n	6482 <__aeabi_dcmpun+0x26>
    646c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6474:	d102      	bne.n	647c <__aeabi_dcmpun+0x20>
    6476:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    647a:	d102      	bne.n	6482 <__aeabi_dcmpun+0x26>
    647c:	f04f 0000 	mov.w	r0, #0
    6480:	4770      	bx	lr
    6482:	f04f 0001 	mov.w	r0, #1
    6486:	4770      	bx	lr

00006488 <__aeabi_d2f>:
    6488:	ea4f 0241 	mov.w	r2, r1, lsl #1
    648c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6490:	bf24      	itt	cs
    6492:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6496:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    649a:	d90d      	bls.n	64b8 <__aeabi_d2f+0x30>
    649c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    64a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    64a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    64a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    64ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    64b0:	bf08      	it	eq
    64b2:	f020 0001 	biceq.w	r0, r0, #1
    64b6:	4770      	bx	lr
    64b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    64bc:	d121      	bne.n	6502 <__aeabi_d2f+0x7a>
    64be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    64c2:	bfbc      	itt	lt
    64c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    64c8:	4770      	bxlt	lr
    64ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    64ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
    64d2:	f1c2 0218 	rsb	r2, r2, #24
    64d6:	f1c2 0c20 	rsb	ip, r2, #32
    64da:	fa10 f30c 	lsls.w	r3, r0, ip
    64de:	fa20 f002 	lsr.w	r0, r0, r2
    64e2:	bf18      	it	ne
    64e4:	f040 0001 	orrne.w	r0, r0, #1
    64e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    64ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    64f0:	fa03 fc0c 	lsl.w	ip, r3, ip
    64f4:	ea40 000c 	orr.w	r0, r0, ip
    64f8:	fa23 f302 	lsr.w	r3, r3, r2
    64fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6500:	e7cc      	b.n	649c <__aeabi_d2f+0x14>
    6502:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6506:	d107      	bne.n	6518 <__aeabi_d2f+0x90>
    6508:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    650c:	bf1e      	ittt	ne
    650e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6512:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6516:	4770      	bxne	lr
    6518:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    651c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6520:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6524:	4770      	bx	lr
    6526:	bf00      	nop

00006528 <__errno>:
    6528:	4b01      	ldr	r3, [pc, #4]	; (6530 <__errno+0x8>)
    652a:	6818      	ldr	r0, [r3, #0]
    652c:	4770      	bx	lr
    652e:	bf00      	nop
    6530:	200000f0 	.word	0x200000f0

00006534 <__libc_init_array>:
    6534:	b570      	push	{r4, r5, r6, lr}
    6536:	4e0d      	ldr	r6, [pc, #52]	; (656c <__libc_init_array+0x38>)
    6538:	4c0d      	ldr	r4, [pc, #52]	; (6570 <__libc_init_array+0x3c>)
    653a:	1ba4      	subs	r4, r4, r6
    653c:	10a4      	asrs	r4, r4, #2
    653e:	2500      	movs	r5, #0
    6540:	42a5      	cmp	r5, r4
    6542:	d109      	bne.n	6558 <__libc_init_array+0x24>
    6544:	4e0b      	ldr	r6, [pc, #44]	; (6574 <__libc_init_array+0x40>)
    6546:	4c0c      	ldr	r4, [pc, #48]	; (6578 <__libc_init_array+0x44>)
    6548:	f000 f944 	bl	67d4 <_init>
    654c:	1ba4      	subs	r4, r4, r6
    654e:	10a4      	asrs	r4, r4, #2
    6550:	2500      	movs	r5, #0
    6552:	42a5      	cmp	r5, r4
    6554:	d105      	bne.n	6562 <__libc_init_array+0x2e>
    6556:	bd70      	pop	{r4, r5, r6, pc}
    6558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    655c:	4798      	blx	r3
    655e:	3501      	adds	r5, #1
    6560:	e7ee      	b.n	6540 <__libc_init_array+0xc>
    6562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6566:	4798      	blx	r3
    6568:	3501      	adds	r5, #1
    656a:	e7f2      	b.n	6552 <__libc_init_array+0x1e>
    656c:	000067e0 	.word	0x000067e0
    6570:	000067e0 	.word	0x000067e0
    6574:	000067e0 	.word	0x000067e0
    6578:	000067e4 	.word	0x000067e4

0000657c <dummy_register>:
    657c:	20000008                                ... 

00006580 <abort_fifo_start>:
    6580:	20000012                                ... 

00006584 <wr_pdram_start>:
    6584:	2000004e                                N.. 

00006588 <cf_pdram_start>:
    6588:	20000038                                8.. 

0000658c <rd_pdram_start>:
    658c:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    659c:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    65ac:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    65bc:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    65cc:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

000065dc <_cfgs>:
    65dc:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    66dc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    66ec:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000066fc <_usarts>:
	...

00006714 <_i2cms>:
    6714:	00000003 70200014 00000100 00007877     ...... p....wx..
    6724:	00d70000 05f5e100                       ........

0000672c <_i2css>:
	...

0000673c <sercomspi_regs>:
    673c:	0030000c 00020000 00000000 01ff0004     ..0.............
    674c:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    675c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    676c:	74727173 00000000                       sqrt....

00006774 <__sf_fake_stderr>:
	...

00006794 <__sf_fake_stdin>:
	...

000067b4 <__sf_fake_stdout>:
	...

000067d4 <_init>:
    67d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67d6:	bf00      	nop
    67d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    67da:	bc08      	pop	{r3}
    67dc:	469e      	mov	lr, r3
    67de:	4770      	bx	lr

000067e0 <__init_array_start>:
    67e0:	00000289 	.word	0x00000289

000067e4 <_fini>:
    67e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67e6:	bf00      	nop
    67e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    67ea:	bc08      	pop	{r3}
    67ec:	469e      	mov	lr, r3
    67ee:	4770      	bx	lr

000067f0 <__fini_array_start>:
    67f0:	00000265 	.word	0x00000265
