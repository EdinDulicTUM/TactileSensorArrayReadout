
SensorArrayReadoutEtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003124  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f0  20000000  00003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200f0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200f0  2**0
                  CONTENTS
  4 .bss          00000d40  200000f0  00003220  000200f0  2**4
                  ALLOC
  5 .stack        00010000  20000e30  00003f60  000200f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002e260  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003524  00000000  00000000  0004e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fd4b  00000000  00000000  000518fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cc0  00000000  00000000  00061646  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000db8  00000000  00000000  00062306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000341e6  00000000  00000000  000630be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001450f  00000000  00000000  000972a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121912  00000000  00000000  000ab7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002298  00000000  00000000  001cd0c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 0e 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     0.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	a9 0f 00 00 b5 0f 00 00 c1 0f 00 00 cd 0f 00 00     ................
      cc:	d9 0f 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	b5 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 81 20 00 00 dd 02 00 00 dd 02 00 00     ..... ..........
     204:	dd 02 00 00 39 07 00 00 dd 02 00 00 dd 02 00 00     ....9...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000f0 	.word	0x200000f0
     280:	00000000 	.word	0x00000000
     284:	00003124 	.word	0x00003124

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003124 	.word	0x00003124
     2c4:	200000f4 	.word	0x200000f4
     2c8:	00003124 	.word	0x00003124
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000555 	.word	0x00000555

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00003124 	.word	0x00003124
     340:	200000f0 	.word	0x200000f0
     344:	200000f0 	.word	0x200000f0
     348:	20000e30 	.word	0x20000e30
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00002ecd 	.word	0x00002ecd
     358:	00001f2d 	.word	0x00001f2d

0000035c <I2C_0_PORT_init>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <I2C_0_PORT_init+0x5c>)
     35e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     362:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     366:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     36a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     36e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     372:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     382:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     386:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     38e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     392:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     39a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ae:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3b6:	4770      	bx	lr
     3b8:	41008000 	.word	0x41008000

000003bc <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <I2C_0_CLOCK_init+0x1c>)
     3be:	2240      	movs	r2, #64	; 0x40
     3c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3c4:	2243      	movs	r2, #67	; 0x43
     3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3ca:	4a04      	ldr	r2, [pc, #16]	; (3dc <I2C_0_CLOCK_init+0x20>)
     3cc:	6993      	ldr	r3, [r2, #24]
     3ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3d2:	6193      	str	r3, [r2, #24]
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40001c00 	.word	0x40001c00
     3dc:	40000800 	.word	0x40000800

000003e0 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <I2C_0_init+0x14>)
     3e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     3e6:	4904      	ldr	r1, [pc, #16]	; (3f8 <I2C_0_init+0x18>)
     3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <I2C_0_init+0x1c>)
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <I2C_0_init+0x20>)
     3ec:	4798      	blx	r3
	I2C_0_PORT_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <I2C_0_init+0x24>)
     3f0:	4798      	blx	r3
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003bd 	.word	0x000003bd
     3f8:	41014000 	.word	0x41014000
     3fc:	20000340 	.word	0x20000340
     400:	00000a45 	.word	0x00000a45
     404:	0000035d 	.word	0x0000035d

00000408 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     408:	4b2c      	ldr	r3, [pc, #176]	; (4bc <SPI_0_PORT_init+0xb4>)
     40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     40e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     41a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     41e:	4a28      	ldr	r2, [pc, #160]	; (4c0 <SPI_0_PORT_init+0xb8>)
     420:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     454:	4a1b      	ldr	r2, [pc, #108]	; (4c4 <SPI_0_PORT_init+0xbc>)
     456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     45e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     462:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     46e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     472:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	2202      	movs	r2, #2
     47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <SPI_0_PORT_init+0xc0>)
     482:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <SPI_0_PORT_init+0xc4>)
     488:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
     490:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     494:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	41008000 	.word	0x41008000
     4c0:	c0000001 	.word	0xc0000001
     4c4:	c0000002 	.word	0xc0000002
     4c8:	40020002 	.word	0x40020002
     4cc:	c0020000 	.word	0xc0020000

000004d0 <SPI_0_CLOCK_init>:
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <SPI_0_CLOCK_init+0x1c>)
     4d2:	2240      	movs	r2, #64	; 0x40
     4d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4d8:	2243      	movs	r2, #67	; 0x43
     4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4de:	4a04      	ldr	r2, [pc, #16]	; (4f0 <SPI_0_CLOCK_init+0x20>)
     4e0:	6a13      	ldr	r3, [r2, #32]
     4e2:	f043 0302 	orr.w	r3, r3, #2
     4e6:	6213      	str	r3, [r2, #32]
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	40001c00 	.word	0x40001c00
     4f0:	40000800 	.word	0x40000800

000004f4 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SPI_0_init(void)
{
     4f4:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <SPI_0_init+0x14>)
     4f8:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <SPI_0_init+0x18>)
     4fc:	4804      	ldr	r0, [pc, #16]	; (510 <SPI_0_init+0x1c>)
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <SPI_0_init+0x20>)
     500:	4798      	blx	r3
	SPI_0_PORT_init();
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <SPI_0_init+0x24>)
     504:	4798      	blx	r3
     506:	bd08      	pop	{r3, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	43000400 	.word	0x43000400
     510:	20000310 	.word	0x20000310
     514:	00000b79 	.word	0x00000b79
     518:	00000409 	.word	0x00000409

0000051c <TIMER_1_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     51c:	4a04      	ldr	r2, [pc, #16]	; (530 <TIMER_1_CLOCK_init+0x14>)
     51e:	6993      	ldr	r3, [r2, #24]
     520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     524:	6193      	str	r3, [r2, #24]
     526:	2240      	movs	r2, #64	; 0x40
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <TIMER_1_CLOCK_init+0x18>)
     52a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     52e:	4770      	bx	lr
     530:	40000800 	.word	0x40000800
     534:	40001c00 	.word	0x40001c00

00000538 <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     538:	4a04      	ldr	r2, [pc, #16]	; (54c <TIMER_0_CLOCK_init+0x14>)
     53a:	6a13      	ldr	r3, [r2, #32]
     53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     540:	6213      	str	r3, [r2, #32]
     542:	2240      	movs	r2, #64	; 0x40
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <TIMER_0_CLOCK_init+0x18>)
     546:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800
     550:	40001c00 	.word	0x40001c00

00000554 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
     554:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     556:	4b18      	ldr	r3, [pc, #96]	; (5b8 <system_init+0x64>)
     558:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	4b18      	ldr	r3, [pc, #96]	; (5bc <system_init+0x68>)
     55c:	2240      	movs	r2, #64	; 0x40
     55e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     560:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     566:	629a      	str	r2, [r3, #40]	; 0x28
     568:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     56c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     57a:	2201      	movs	r2, #1
     57c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     584:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     58c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     590:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     598:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	// Set pin direction to output
	gpio_set_pin_direction(ECAT_SPI_CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ECAT_SPI_CS_PIN, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <system_init+0x6c>)
     59e:	4798      	blx	r3

	SPI_0_init();
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <system_init+0x70>)
     5a2:	4798      	blx	r3

	TIMER_1_CLOCK_init();
     5a4:	4b08      	ldr	r3, [pc, #32]	; (5c8 <system_init+0x74>)
     5a6:	4798      	blx	r3

	TIMER_1_init();
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <system_init+0x78>)
     5aa:	4798      	blx	r3

	TIMER_0_CLOCK_init();
     5ac:	4b08      	ldr	r3, [pc, #32]	; (5d0 <system_init+0x7c>)
     5ae:	4798      	blx	r3

	TIMER_0_init();
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <system_init+0x80>)
     5b2:	4798      	blx	r3
     5b4:	bd08      	pop	{r3, pc}
     5b6:	bf00      	nop
     5b8:	00000c69 	.word	0x00000c69
     5bc:	41008000 	.word	0x41008000
     5c0:	000003e1 	.word	0x000003e1
     5c4:	000004f5 	.word	0x000004f5
     5c8:	0000051d 	.word	0x0000051d
     5cc:	00001cdd 	.word	0x00001cdd
     5d0:	00000539 	.word	0x00000539
     5d4:	00001da1 	.word	0x00001da1

000005d8 <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5d8:	2201      	movs	r2, #1
     5da:	4b10      	ldr	r3, [pc, #64]	; (61c <LAN9252_rx_susp+0x44>)
     5dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
     5e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
     5e6:	68da      	ldr	r2, [r3, #12]
     5e8:	4b0d      	ldr	r3, [pc, #52]	; (620 <LAN9252_rx_susp+0x48>)
     5ea:	429a      	cmp	r2, r3
     5ec:	d00d      	beq.n	60a <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <LAN9252_rx_susp+0x4c>)
     5f0:	2202      	movs	r2, #2
     5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f6:	2001      	movs	r0, #1
     5f8:	4908      	ldr	r1, [pc, #32]	; (61c <LAN9252_rx_susp+0x44>)
     5fa:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     5fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
     602:	2200      	movs	r2, #0
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <LAN9252_rx_susp+0x50>)
     606:	701a      	strb	r2, [r3, #0]
     608:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
     60a:	2201      	movs	r2, #1
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <LAN9252_rx_susp+0x50>)
     60e:	701a      	strb	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     614:	4b05      	ldr	r3, [pc, #20]	; (62c <LAN9252_rx_susp+0x54>)
     616:	60da      	str	r2, [r3, #12]
     618:	4770      	bx	lr
     61a:	bf00      	nop
     61c:	41008000 	.word	0x41008000
     620:	200004e8 	.word	0x200004e8
     624:	4100a000 	.word	0x4100a000
     628:	200004f8 	.word	0x200004f8
     62c:	e000e100 	.word	0xe000e100

00000630 <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
     630:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     632:	880c      	ldrh	r4, [r1, #0]
     634:	b2a4      	uxth	r4, r4
     636:	f044 0401 	orr.w	r4, r4, #1
     63a:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     63c:	880c      	ldrh	r4, [r1, #0]
     63e:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
     640:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     644:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     646:	880c      	ldrh	r4, [r1, #0]
     648:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
     64a:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
     64e:	f8bd 500c 	ldrh.w	r5, [sp, #12]
     652:	00ed      	lsls	r5, r5, #3
     654:	f005 0518 	and.w	r5, r5, #24
     658:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     65a:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     65c:	880c      	ldrh	r4, [r1, #0]
     65e:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
     660:	f424 7440 	bic.w	r4, r4, #768	; 0x300
     664:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     666:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
     668:	2803      	cmp	r0, #3
     66a:	d814      	bhi.n	696 <setup_transfer_descriptor+0x66>
     66c:	e8df f000 	tbb	[pc, r0]
     670:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     674:	8808      	ldrh	r0, [r1, #0]
     676:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     678:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     67c:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     67e:	8808      	ldrh	r0, [r1, #0]
     680:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
     682:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
     686:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     688:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
     68a:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     68c:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     68e:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     690:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     692:	4a26      	ldr	r2, [pc, #152]	; (72c <setup_transfer_descriptor+0xfc>)
     694:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     696:	880a      	ldrh	r2, [r1, #0]
     698:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
     69a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     69e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a0:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6a2:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
     6a4:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6a8:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
     6aa:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
     6ac:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
     6ae:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
     6b0:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
     6b2:	9b02      	ldr	r3, [sp, #8]
     6b4:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
     6b6:	bc30      	pop	{r4, r5}
     6b8:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ba:	880a      	ldrh	r2, [r1, #0]
     6bc:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     6c2:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6c4:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6c6:	880a      	ldrh	r2, [r1, #0]
     6c8:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     6ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     6ce:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6d0:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
     6d2:	4a17      	ldr	r2, [pc, #92]	; (730 <setup_transfer_descriptor+0x100>)
     6d4:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6d6:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6d8:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     6da:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     6dc:	4a13      	ldr	r2, [pc, #76]	; (72c <setup_transfer_descriptor+0xfc>)
     6de:	608a      	str	r2, [r1, #8]
     6e0:	e7d9      	b.n	696 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6e2:	8808      	ldrh	r0, [r1, #0]
     6e4:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
     6e6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
     6ea:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6ec:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     6ee:	8808      	ldrh	r0, [r1, #0]
     6f0:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     6f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     6f6:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     6f8:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     6fa:	480c      	ldr	r0, [pc, #48]	; (72c <setup_transfer_descriptor+0xfc>)
     6fc:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
     6fe:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     700:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     702:	608a      	str	r2, [r1, #8]
     704:	e7c7      	b.n	696 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     706:	880a      	ldrh	r2, [r1, #0]
     708:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
     70a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
     70e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     710:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     712:	880a      	ldrh	r2, [r1, #0]
     714:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
     716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     71a:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     71c:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
     71e:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
     720:	4a02      	ldr	r2, [pc, #8]	; (72c <setup_transfer_descriptor+0xfc>)
     722:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
     724:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
     726:	4a03      	ldr	r2, [pc, #12]	; (734 <setup_transfer_descriptor+0x104>)
     728:	608a      	str	r2, [r1, #8]
     72a:	e7b4      	b.n	696 <setup_transfer_descriptor+0x66>
     72c:	43000428 	.word	0x43000428
     730:	00002f14 	.word	0x00002f14
     734:	200003b0 	.word	0x200003b0

00000738 <TC7_Handler>:
void TC7_Handler(void){
     738:	b5f0      	push	{r4, r5, r6, r7, lr}
     73a:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
     73c:	4a16      	ldr	r2, [pc, #88]	; (798 <TC7_Handler+0x60>)
     73e:	7a93      	ldrb	r3, [r2, #10]
     740:	f043 0301 	orr.w	r3, r3, #1
     744:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
     746:	2201      	movs	r2, #1
     748:	4b14      	ldr	r3, [pc, #80]	; (79c <TC7_Handler+0x64>)
     74a:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
     74c:	4b14      	ldr	r3, [pc, #80]	; (7a0 <TC7_Handler+0x68>)
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	b183      	cbz	r3, 774 <TC7_Handler+0x3c>
		volatile int i=0;
     752:	2300      	movs	r3, #0
     754:	9301      	str	r3, [sp, #4]
     756:	4611      	mov	r1, r2
     758:	4a12      	ldr	r2, [pc, #72]	; (7a4 <TC7_Handler+0x6c>)
     75a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
     75e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
     762:	2102      	movs	r1, #2
     764:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
     768:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
     76c:	4a0c      	ldr	r2, [pc, #48]	; (7a0 <TC7_Handler+0x68>)
     76e:	7013      	strb	r3, [r2, #0]
	};
     770:	b003      	add	sp, #12
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     774:	4b0b      	ldr	r3, [pc, #44]	; (7a4 <TC7_Handler+0x6c>)
     776:	2501      	movs	r5, #1
     778:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
     77c:	4e08      	ldr	r6, [pc, #32]	; (7a0 <TC7_Handler+0x68>)
     77e:	2400      	movs	r4, #0
     780:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     782:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
     786:	4621      	mov	r1, r4
     788:	4620      	mov	r0, r4
     78a:	4f07      	ldr	r7, [pc, #28]	; (7a8 <TC7_Handler+0x70>)
     78c:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
     78e:	4621      	mov	r1, r4
     790:	4628      	mov	r0, r5
     792:	47b8      	blx	r7
		tx_ethercat_done = false;
     794:	7034      	strb	r4, [r6, #0]
	};
     796:	e7eb      	b.n	770 <TC7_Handler+0x38>
     798:	43001800 	.word	0x43001800
     79c:	200004b0 	.word	0x200004b0
     7a0:	200004f8 	.word	0x200004f8
     7a4:	41008000 	.word	0x41008000
     7a8:	00000f5d 	.word	0x00000f5d

000007ac <configure_ethercat_dma_descriptors>:
{
     7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b0:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     7b2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 96c <configure_ethercat_dma_descriptors+0x1c0>
     7b6:	4f61      	ldr	r7, [pc, #388]	; (93c <configure_ethercat_dma_descriptors+0x190>)
     7b8:	2602      	movs	r6, #2
     7ba:	9601      	str	r6, [sp, #4]
     7bc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 970 <configure_ethercat_dma_descriptors+0x1c4>
     7c0:	f8cd 9000 	str.w	r9, [sp]
     7c4:	2313      	movs	r3, #19
     7c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
     7ca:	4639      	mov	r1, r7
     7cc:	2000      	movs	r0, #0
     7ce:	4d5c      	ldr	r5, [pc, #368]	; (940 <configure_ethercat_dma_descriptors+0x194>)
     7d0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+4*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     7d2:	f8d8 b008 	ldr.w	fp, [r8, #8]
     7d6:	9601      	str	r6, [sp, #4]
     7d8:	4c5a      	ldr	r4, [pc, #360]	; (944 <configure_ethercat_dma_descriptors+0x198>)
     7da:	9400      	str	r4, [sp, #0]
     7dc:	2343      	movs	r3, #67	; 0x43
     7de:	465a      	mov	r2, fp
     7e0:	4649      	mov	r1, r9
     7e2:	2000      	movs	r0, #0
     7e4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     7e6:	4b58      	ldr	r3, [pc, #352]	; (948 <configure_ethercat_dma_descriptors+0x19c>)
     7e8:	681a      	ldr	r2, [r3, #0]
     7ea:	f8df 9188 	ldr.w	r9, [pc, #392]	; 974 <configure_ethercat_dma_descriptors+0x1c8>
     7ee:	9601      	str	r6, [sp, #4]
     7f0:	f8cd 9000 	str.w	r9, [sp]
     7f4:	230b      	movs	r3, #11
     7f6:	4621      	mov	r1, r4
     7f8:	2000      	movs	r0, #0
     7fa:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
     7fc:	2400      	movs	r4, #0
     7fe:	9401      	str	r4, [sp, #4]
     800:	f8df a174 	ldr.w	sl, [pc, #372]	; 978 <configure_ethercat_dma_descriptors+0x1cc>
     804:	f8cd a000 	str.w	sl, [sp]
     808:	2303      	movs	r3, #3
     80a:	465a      	mov	r2, fp
     80c:	4649      	mov	r1, r9
     80e:	4620      	mov	r0, r4
     810:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],4*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
     812:	9601      	str	r6, [sp, #4]
     814:	f8df b164 	ldr.w	fp, [pc, #356]	; 97c <configure_ethercat_dma_descriptors+0x1d0>
     818:	f8cd b000 	str.w	fp, [sp]
     81c:	2340      	movs	r3, #64	; 0x40
     81e:	4a4b      	ldr	r2, [pc, #300]	; (94c <configure_ethercat_dma_descriptors+0x1a0>)
     820:	4651      	mov	r1, sl
     822:	4620      	mov	r0, r4
     824:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
     826:	9601      	str	r6, [sp, #4]
     828:	f8df a154 	ldr.w	sl, [pc, #340]	; 980 <configure_ethercat_dma_descriptors+0x1d4>
     82c:	f8cd a000 	str.w	sl, [sp]
     830:	2313      	movs	r3, #19
     832:	f8d8 200c 	ldr.w	r2, [r8, #12]
     836:	4659      	mov	r1, fp
     838:	4620      	mov	r0, r4
     83a:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
     83c:	f8d8 2010 	ldr.w	r2, [r8, #16]
     840:	9401      	str	r4, [sp, #4]
     842:	f8df 8140 	ldr.w	r8, [pc, #320]	; 984 <configure_ethercat_dma_descriptors+0x1d8>
     846:	f8cd 8000 	str.w	r8, [sp]
     84a:	2303      	movs	r3, #3
     84c:	4651      	mov	r1, sl
     84e:	4620      	mov	r0, r4
     850:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,4*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
     852:	9601      	str	r6, [sp, #4]
     854:	f8cd 9000 	str.w	r9, [sp]
     858:	2340      	movs	r3, #64	; 0x40
     85a:	4622      	mov	r2, r4
     85c:	4641      	mov	r1, r8
     85e:	4630      	mov	r0, r6
     860:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     862:	f8df 8124 	ldr.w	r8, [pc, #292]	; 988 <configure_ethercat_dma_descriptors+0x1dc>
     866:	9601      	str	r6, [sp, #4]
     868:	f8df 9120 	ldr.w	r9, [pc, #288]	; 98c <configure_ethercat_dma_descriptors+0x1e0>
     86c:	f8cd 9000 	str.w	r9, [sp]
     870:	2313      	movs	r3, #19
     872:	4622      	mov	r2, r4
     874:	4641      	mov	r1, r8
     876:	2003      	movs	r0, #3
     878:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+4*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
     87a:	9601      	str	r6, [sp, #4]
     87c:	f8df a110 	ldr.w	sl, [pc, #272]	; 990 <configure_ethercat_dma_descriptors+0x1e4>
     880:	f8cd a000 	str.w	sl, [sp]
     884:	2343      	movs	r3, #67	; 0x43
     886:	4622      	mov	r2, r4
     888:	4649      	mov	r1, r9
     88a:	2003      	movs	r0, #3
     88c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
     88e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 994 <configure_ethercat_dma_descriptors+0x1e8>
     892:	9601      	str	r6, [sp, #4]
     894:	f8cd 9000 	str.w	r9, [sp]
     898:	230b      	movs	r3, #11
     89a:	4622      	mov	r2, r4
     89c:	4651      	mov	r1, sl
     89e:	2003      	movs	r0, #3
     8a0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+4*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
     8a2:	9601      	str	r6, [sp, #4]
     8a4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 998 <configure_ethercat_dma_descriptors+0x1ec>
     8a8:	f8cd a000 	str.w	sl, [sp]
     8ac:	2343      	movs	r3, #67	; 0x43
     8ae:	4622      	mov	r2, r4
     8b0:	4649      	mov	r1, r9
     8b2:	2003      	movs	r0, #3
     8b4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
     8b6:	9601      	str	r6, [sp, #4]
     8b8:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 99c <configure_ethercat_dma_descriptors+0x1f0>
     8bc:	f8cd b000 	str.w	fp, [sp]
     8c0:	2313      	movs	r3, #19
     8c2:	4622      	mov	r2, r4
     8c4:	4651      	mov	r1, sl
     8c6:	2003      	movs	r0, #3
     8c8:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
     8ca:	9401      	str	r4, [sp, #4]
     8cc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 9a0 <configure_ethercat_dma_descriptors+0x1f4>
     8d0:	f8cd a000 	str.w	sl, [sp]
     8d4:	2303      	movs	r3, #3
     8d6:	4622      	mov	r2, r4
     8d8:	4659      	mov	r1, fp
     8da:	4618      	mov	r0, r3
     8dc:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],4*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
     8de:	9601      	str	r6, [sp, #4]
     8e0:	f8cd 9000 	str.w	r9, [sp]
     8e4:	2340      	movs	r3, #64	; 0x40
     8e6:	4a19      	ldr	r2, [pc, #100]	; (94c <configure_ethercat_dma_descriptors+0x1a0>)
     8e8:	441a      	add	r2, r3
     8ea:	4651      	mov	r1, sl
     8ec:	2001      	movs	r0, #1
     8ee:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
     8f0:	4d17      	ldr	r5, [pc, #92]	; (950 <configure_ethercat_dma_descriptors+0x1a4>)
     8f2:	4a18      	ldr	r2, [pc, #96]	; (954 <configure_ethercat_dma_descriptors+0x1a8>)
     8f4:	4631      	mov	r1, r6
     8f6:	4628      	mov	r0, r5
     8f8:	4b17      	ldr	r3, [pc, #92]	; (958 <configure_ethercat_dma_descriptors+0x1ac>)
     8fa:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
     8fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
     900:	9300      	str	r3, [sp, #0]
     902:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
     906:	4620      	mov	r0, r4
     908:	4e14      	ldr	r6, [pc, #80]	; (95c <configure_ethercat_dma_descriptors+0x1b0>)
     90a:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
     90c:	68fb      	ldr	r3, [r7, #12]
     90e:	9300      	str	r3, [sp, #0]
     910:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
     914:	2001      	movs	r0, #1
     916:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
     918:	4628      	mov	r0, r5
     91a:	4b11      	ldr	r3, [pc, #68]	; (960 <configure_ethercat_dma_descriptors+0x1b4>)
     91c:	4798      	blx	r3
     91e:	2601      	movs	r6, #1
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <configure_ethercat_dma_descriptors+0x1b8>)
     922:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
     926:	4621      	mov	r1, r4
     928:	4620      	mov	r0, r4
     92a:	4d0f      	ldr	r5, [pc, #60]	; (968 <configure_ethercat_dma_descriptors+0x1bc>)
     92c:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
     92e:	4621      	mov	r1, r4
     930:	4630      	mov	r0, r6
     932:	47a8      	blx	r5
}
     934:	b003      	add	sp, #12
     936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     93a:	bf00      	nop
     93c:	200004a0 	.word	0x200004a0
     940:	00000631 	.word	0x00000631
     944:	200004c8 	.word	0x200004c8
     948:	20000000 	.word	0x20000000
     94c:	200003f0 	.word	0x200003f0
     950:	20000310 	.word	0x20000310
     954:	000005d9 	.word	0x000005d9
     958:	00000bed 	.word	0x00000bed
     95c:	00000fe5 	.word	0x00000fe5
     960:	00000bc5 	.word	0x00000bc5
     964:	41008000 	.word	0x41008000
     968:	00000f5d 	.word	0x00000f5d
     96c:	00002f14 	.word	0x00002f14
     970:	200003d0 	.word	0x200003d0
     974:	20000380 	.word	0x20000380
     978:	200003a0 	.word	0x200003a0
     97c:	20000490 	.word	0x20000490
     980:	200004d8 	.word	0x200004d8
     984:	20000390 	.word	0x20000390
     988:	200003e0 	.word	0x200003e0
     98c:	20000470 	.word	0x20000470
     990:	20000480 	.word	0x20000480
     994:	200004e8 	.word	0x200004e8
     998:	20000360 	.word	0x20000360
     99c:	20000370 	.word	0x20000370
     9a0:	200004b8 	.word	0x200004b8

000009a4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     9a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9a6:	4b04      	ldr	r3, [pc, #16]	; (9b8 <delay_us+0x14>)
     9a8:	681c      	ldr	r4, [r3, #0]
     9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <delay_us+0x18>)
     9ac:	4798      	blx	r3
     9ae:	4601      	mov	r1, r0
     9b0:	4620      	mov	r0, r4
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <delay_us+0x1c>)
     9b4:	4798      	blx	r3
     9b6:	bd10      	pop	{r4, pc}
     9b8:	2000010c 	.word	0x2000010c
     9bc:	00000c25 	.word	0x00000c25
     9c0:	00000c61 	.word	0x00000c61

000009c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     9c4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     9c6:	4b04      	ldr	r3, [pc, #16]	; (9d8 <delay_ms+0x14>)
     9c8:	681c      	ldr	r4, [r3, #0]
     9ca:	4b04      	ldr	r3, [pc, #16]	; (9dc <delay_ms+0x18>)
     9cc:	4798      	blx	r3
     9ce:	4601      	mov	r1, r0
     9d0:	4620      	mov	r0, r4
     9d2:	4b03      	ldr	r3, [pc, #12]	; (9e0 <delay_ms+0x1c>)
     9d4:	4798      	blx	r3
     9d6:	bd10      	pop	{r4, pc}
     9d8:	2000010c 	.word	0x2000010c
     9dc:	00000c3d 	.word	0x00000c3d
     9e0:	00000c61 	.word	0x00000c61

000009e4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     9e8:	8903      	ldrh	r3, [r0, #8]
     9ea:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     9ee:	4614      	mov	r4, r2
     9f0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     9f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     9fa:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     9fc:	a901      	add	r1, sp, #4
     9fe:	3814      	subs	r0, #20
     a00:	4b03      	ldr	r3, [pc, #12]	; (a10 <i2c_m_sync_write+0x2c>)
     a02:	4798      	blx	r3

	if (ret) {
     a04:	b910      	cbnz	r0, a0c <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     a06:	4620      	mov	r0, r4
     a08:	b004      	add	sp, #16
     a0a:	bd10      	pop	{r4, pc}
		return ret;
     a0c:	4604      	mov	r4, r0
     a0e:	e7fa      	b.n	a06 <i2c_m_sync_write+0x22>
     a10:	000016e5 	.word	0x000016e5

00000a14 <i2c_m_sync_read>:
{
     a14:	b510      	push	{r4, lr}
     a16:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a18:	8903      	ldrh	r3, [r0, #8]
     a1a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a1e:	4614      	mov	r4, r2
     a20:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a22:	f248 0301 	movw	r3, #32769	; 0x8001
     a26:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a2a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a2c:	a901      	add	r1, sp, #4
     a2e:	3814      	subs	r0, #20
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <i2c_m_sync_read+0x2c>)
     a32:	4798      	blx	r3
	if (ret) {
     a34:	b910      	cbnz	r0, a3c <i2c_m_sync_read+0x28>
}
     a36:	4620      	mov	r0, r4
     a38:	b004      	add	sp, #16
     a3a:	bd10      	pop	{r4, pc}
		return ret;
     a3c:	4604      	mov	r4, r0
     a3e:	e7fa      	b.n	a36 <i2c_m_sync_read+0x22>
     a40:	000016e5 	.word	0x000016e5

00000a44 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a44:	b538      	push	{r3, r4, r5, lr}
     a46:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a48:	4604      	mov	r4, r0
     a4a:	225e      	movs	r2, #94	; 0x5e
     a4c:	4908      	ldr	r1, [pc, #32]	; (a70 <i2c_m_sync_init+0x2c>)
     a4e:	3000      	adds	r0, #0
     a50:	bf18      	it	ne
     a52:	2001      	movne	r0, #1
     a54:	4b07      	ldr	r3, [pc, #28]	; (a74 <i2c_m_sync_init+0x30>)
     a56:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     a58:	4629      	mov	r1, r5
     a5a:	4620      	mov	r0, r4
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <i2c_m_sync_init+0x34>)
     a5e:	4798      	blx	r3
	if (init_status) {
     a60:	4603      	mov	r3, r0
     a62:	b918      	cbnz	r0, a6c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     a64:	4a05      	ldr	r2, [pc, #20]	; (a7c <i2c_m_sync_init+0x38>)
     a66:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     a68:	4a05      	ldr	r2, [pc, #20]	; (a80 <i2c_m_sync_init+0x3c>)
     a6a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     a6c:	4618      	mov	r0, r3
     a6e:	bd38      	pop	{r3, r4, r5, pc}
     a70:	00002f28 	.word	0x00002f28
     a74:	00000c1d 	.word	0x00000c1d
     a78:	0000163d 	.word	0x0000163d
     a7c:	00000a15 	.word	0x00000a15
     a80:	000009e5 	.word	0x000009e5

00000a84 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     a84:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     a86:	4b01      	ldr	r3, [pc, #4]	; (a8c <i2c_m_sync_enable+0x8>)
     a88:	4798      	blx	r3
}
     a8a:	bd08      	pop	{r3, pc}
     a8c:	0000166d 	.word	0x0000166d

00000a90 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     a90:	f3c1 0109 	ubfx	r1, r1, #0, #10
     a94:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     a98:	430a      	orrs	r2, r1
     a9a:	8382      	strh	r2, [r0, #28]
}
     a9c:	4610      	mov	r0, r2
     a9e:	4770      	bx	lr

00000aa0 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     aa0:	3014      	adds	r0, #20
     aa2:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     aa4:	2000      	movs	r0, #0
     aa6:	4770      	bx	lr

00000aa8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	460d      	mov	r5, r1
     aac:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     aae:	4604      	mov	r4, r0
     ab0:	b168      	cbz	r0, ace <io_write+0x26>
     ab2:	b151      	cbz	r1, aca <io_write+0x22>
     ab4:	2001      	movs	r0, #1
     ab6:	2234      	movs	r2, #52	; 0x34
     ab8:	4906      	ldr	r1, [pc, #24]	; (ad4 <io_write+0x2c>)
     aba:	4b07      	ldr	r3, [pc, #28]	; (ad8 <io_write+0x30>)
     abc:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     abe:	6823      	ldr	r3, [r4, #0]
     ac0:	4632      	mov	r2, r6
     ac2:	4629      	mov	r1, r5
     ac4:	4620      	mov	r0, r4
     ac6:	4798      	blx	r3
}
     ac8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     aca:	2000      	movs	r0, #0
     acc:	e7f3      	b.n	ab6 <io_write+0xe>
     ace:	2000      	movs	r0, #0
     ad0:	e7f1      	b.n	ab6 <io_write+0xe>
     ad2:	bf00      	nop
     ad4:	00002f44 	.word	0x00002f44
     ad8:	00000c1d 	.word	0x00000c1d

00000adc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	460d      	mov	r5, r1
     ae0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     ae2:	4604      	mov	r4, r0
     ae4:	b168      	cbz	r0, b02 <io_read+0x26>
     ae6:	b151      	cbz	r1, afe <io_read+0x22>
     ae8:	2001      	movs	r0, #1
     aea:	223d      	movs	r2, #61	; 0x3d
     aec:	4906      	ldr	r1, [pc, #24]	; (b08 <io_read+0x2c>)
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <io_read+0x30>)
     af0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     af2:	6863      	ldr	r3, [r4, #4]
     af4:	4632      	mov	r2, r6
     af6:	4629      	mov	r1, r5
     af8:	4620      	mov	r0, r4
     afa:	4798      	blx	r3
}
     afc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     afe:	2000      	movs	r0, #0
     b00:	e7f3      	b.n	aea <io_read+0xe>
     b02:	2000      	movs	r0, #0
     b04:	e7f1      	b.n	aea <io_read+0xe>
     b06:	bf00      	nop
     b08:	00002f44 	.word	0x00002f44
     b0c:	00000c1d 	.word	0x00000c1d

00000b10 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	460d      	mov	r5, r1
     b14:	4616      	mov	r6, r2
	ASSERT(io);
     b16:	4604      	mov	r4, r0
     b18:	2298      	movs	r2, #152	; 0x98
     b1a:	4907      	ldr	r1, [pc, #28]	; (b38 <_spi_m_dma_io_write+0x28>)
     b1c:	3000      	adds	r0, #0
     b1e:	bf18      	it	ne
     b20:	2001      	movne	r0, #1
     b22:	4b06      	ldr	r3, [pc, #24]	; (b3c <_spi_m_dma_io_write+0x2c>)
     b24:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     b26:	4633      	mov	r3, r6
     b28:	2200      	movs	r2, #0
     b2a:	4629      	mov	r1, r5
     b2c:	f1a4 0020 	sub.w	r0, r4, #32
     b30:	4c03      	ldr	r4, [pc, #12]	; (b40 <_spi_m_dma_io_write+0x30>)
     b32:	47a0      	blx	r4
}
     b34:	bd70      	pop	{r4, r5, r6, pc}
     b36:	bf00      	nop
     b38:	00002f58 	.word	0x00002f58
     b3c:	00000c1d 	.word	0x00000c1d
     b40:	00001bc9 	.word	0x00001bc9

00000b44 <_spi_m_dma_io_read>:
{
     b44:	b570      	push	{r4, r5, r6, lr}
     b46:	460d      	mov	r5, r1
     b48:	4616      	mov	r6, r2
	ASSERT(io);
     b4a:	4604      	mov	r4, r0
     b4c:	2281      	movs	r2, #129	; 0x81
     b4e:	4907      	ldr	r1, [pc, #28]	; (b6c <_spi_m_dma_io_read+0x28>)
     b50:	3000      	adds	r0, #0
     b52:	bf18      	it	ne
     b54:	2001      	movne	r0, #1
     b56:	4b06      	ldr	r3, [pc, #24]	; (b70 <_spi_m_dma_io_read+0x2c>)
     b58:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     b5a:	4633      	mov	r3, r6
     b5c:	462a      	mov	r2, r5
     b5e:	2100      	movs	r1, #0
     b60:	f1a4 0020 	sub.w	r0, r4, #32
     b64:	4c03      	ldr	r4, [pc, #12]	; (b74 <_spi_m_dma_io_read+0x30>)
     b66:	47a0      	blx	r4
}
     b68:	bd70      	pop	{r4, r5, r6, pc}
     b6a:	bf00      	nop
     b6c:	00002f58 	.word	0x00002f58
     b70:	00000c1d 	.word	0x00000c1d
     b74:	00001bc9 	.word	0x00001bc9

00000b78 <spi_m_dma_init>:
{
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     b7c:	4605      	mov	r5, r0
     b7e:	b1a8      	cbz	r0, bac <spi_m_dma_init+0x34>
     b80:	b191      	cbz	r1, ba8 <spi_m_dma_init+0x30>
     b82:	2001      	movs	r0, #1
     b84:	223b      	movs	r2, #59	; 0x3b
     b86:	490a      	ldr	r1, [pc, #40]	; (bb0 <spi_m_dma_init+0x38>)
     b88:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <spi_m_dma_init+0x3c>)
     b8a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b8c:	4628      	mov	r0, r5
     b8e:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     b92:	4621      	mov	r1, r4
     b94:	4b08      	ldr	r3, [pc, #32]	; (bb8 <spi_m_dma_init+0x40>)
     b96:	4798      	blx	r3
	if (rc) {
     b98:	4603      	mov	r3, r0
     b9a:	b918      	cbnz	r0, ba4 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
     b9c:	4a07      	ldr	r2, [pc, #28]	; (bbc <spi_m_dma_init+0x44>)
     b9e:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
     ba0:	4a07      	ldr	r2, [pc, #28]	; (bc0 <spi_m_dma_init+0x48>)
     ba2:	626a      	str	r2, [r5, #36]	; 0x24
}
     ba4:	4618      	mov	r0, r3
     ba6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     ba8:	2000      	movs	r0, #0
     baa:	e7eb      	b.n	b84 <spi_m_dma_init+0xc>
     bac:	2000      	movs	r0, #0
     bae:	e7e9      	b.n	b84 <spi_m_dma_init+0xc>
     bb0:	00002f58 	.word	0x00002f58
     bb4:	00000c1d 	.word	0x00000c1d
     bb8:	00001995 	.word	0x00001995
     bbc:	00000b45 	.word	0x00000b45
     bc0:	00000b11 	.word	0x00000b11

00000bc4 <spi_m_dma_enable>:
{
     bc4:	b510      	push	{r4, lr}
	ASSERT(spi);
     bc6:	4604      	mov	r4, r0
     bc8:	2251      	movs	r2, #81	; 0x51
     bca:	4905      	ldr	r1, [pc, #20]	; (be0 <spi_m_dma_enable+0x1c>)
     bcc:	3000      	adds	r0, #0
     bce:	bf18      	it	ne
     bd0:	2001      	movne	r0, #1
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <spi_m_dma_enable+0x20>)
     bd4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     bd6:	1d20      	adds	r0, r4, #4
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <spi_m_dma_enable+0x24>)
     bda:	4798      	blx	r3
     bdc:	bd10      	pop	{r4, pc}
     bde:	bf00      	nop
     be0:	00002f58 	.word	0x00002f58
     be4:	00000c1d 	.word	0x00000c1d
     be8:	00001b11 	.word	0x00001b11

00000bec <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     bec:	b570      	push	{r4, r5, r6, lr}
     bee:	460d      	mov	r5, r1
     bf0:	4616      	mov	r6, r2
	ASSERT(spi);
     bf2:	4604      	mov	r4, r0
     bf4:	22a8      	movs	r2, #168	; 0xa8
     bf6:	4906      	ldr	r1, [pc, #24]	; (c10 <spi_m_dma_register_callback+0x24>)
     bf8:	3000      	adds	r0, #0
     bfa:	bf18      	it	ne
     bfc:	2001      	movne	r0, #1
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <spi_m_dma_register_callback+0x28>)
     c00:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     c02:	4632      	mov	r2, r6
     c04:	4629      	mov	r1, r5
     c06:	1d20      	adds	r0, r4, #4
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <spi_m_dma_register_callback+0x2c>)
     c0a:	4798      	blx	r3
     c0c:	bd70      	pop	{r4, r5, r6, pc}
     c0e:	bf00      	nop
     c10:	00002f58 	.word	0x00002f58
     c14:	00000c1d 	.word	0x00000c1d
     c18:	00001b45 	.word	0x00001b45

00000c1c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c1c:	b900      	cbnz	r0, c20 <assert+0x4>
		__asm("BKPT #0");
     c1e:	be00      	bkpt	0x0000
     c20:	4770      	bx	lr
	...

00000c24 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
     c24:	2364      	movs	r3, #100	; 0x64
     c26:	fb03 f000 	mul.w	r0, r3, r0
     c2a:	3002      	adds	r0, #2
     c2c:	4b02      	ldr	r3, [pc, #8]	; (c38 <_get_cycles_for_us+0x14>)
     c2e:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c32:	0840      	lsrs	r0, r0, #1
     c34:	4770      	bx	lr
     c36:	bf00      	nop
     c38:	aaaaaaab 	.word	0xaaaaaaab

00000c3c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     c3c:	2364      	movs	r3, #100	; 0x64
     c3e:	fb03 f300 	mul.w	r3, r3, r0
     c42:	3302      	adds	r3, #2
     c44:	4804      	ldr	r0, [pc, #16]	; (c58 <_get_cycles_for_ms+0x1c>)
     c46:	fba0 2303 	umull	r2, r3, r0, r3
     c4a:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c50:	fb00 f003 	mul.w	r0, r0, r3
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	aaaaaaab 	.word	0xaaaaaaab
     c5c:	00000000 	.word	0x00000000

00000c60 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     c60:	3901      	subs	r1, #1
     c62:	d8fd      	bhi.n	c60 <_delay_cycles>
     c64:	4770      	bx	lr
     c66:	bf00      	nop

00000c68 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c68:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     c6a:	4a0d      	ldr	r2, [pc, #52]	; (ca0 <_init_chip+0x38>)
     c6c:	8813      	ldrh	r3, [r2, #0]
     c6e:	b29b      	uxth	r3, r3
     c70:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
     c74:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     c76:	4b0b      	ldr	r3, [pc, #44]	; (ca4 <_init_chip+0x3c>)
     c78:	4798      	blx	r3
	_oscctrl_init_sources();
     c7a:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <_init_chip+0x40>)
     c7c:	4798      	blx	r3
	_mclk_init();
     c7e:	4b0b      	ldr	r3, [pc, #44]	; (cac <_init_chip+0x44>)
     c80:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_init_chip+0x48>)
     c84:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c86:	f640 70ff 	movw	r0, #4095	; 0xfff
     c8a:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <_init_chip+0x4c>)
     c8c:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     c8e:	4a0a      	ldr	r2, [pc, #40]	; (cb8 <_init_chip+0x50>)
     c90:	6913      	ldr	r3, [r2, #16]
     c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c96:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     c98:	4b08      	ldr	r3, [pc, #32]	; (cbc <_init_chip+0x54>)
     c9a:	4798      	blx	r3
     c9c:	bd08      	pop	{r3, pc}
     c9e:	bf00      	nop
     ca0:	41004000 	.word	0x41004000
     ca4:	00001041 	.word	0x00001041
     ca8:	00001055 	.word	0x00001055
     cac:	00001035 	.word	0x00001035
     cb0:	00001071 	.word	0x00001071
     cb4:	00001011 	.word	0x00001011
     cb8:	40000800 	.word	0x40000800
     cbc:	00000d41 	.word	0x00000d41

00000cc0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     cc0:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cc2:	4a1d      	ldr	r2, [pc, #116]	; (d38 <_dmac_handler+0x78>)
     cc4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     cc6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     cca:	481c      	ldr	r0, [pc, #112]	; (d3c <_dmac_handler+0x7c>)
     ccc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cd0:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     cd2:	f412 7f80 	tst.w	r2, #256	; 0x100
     cd6:	d10a      	bne.n	cee <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     cd8:	4a17      	ldr	r2, [pc, #92]	; (d38 <_dmac_handler+0x78>)
     cda:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     cdc:	f412 7f00 	tst.w	r2, #512	; 0x200
     ce0:	d110      	bne.n	d04 <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     ce2:	4a15      	ldr	r2, [pc, #84]	; (d38 <_dmac_handler+0x78>)
     ce4:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
     ce6:	f412 6f80 	tst.w	r2, #1024	; 0x400
     cea:	d117      	bne.n	d1c <_dmac_handler+0x5c>
     cec:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     cee:	011b      	lsls	r3, r3, #4
     cf0:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     cf4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     cf8:	2101      	movs	r1, #1
     cfa:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     cfe:	6843      	ldr	r3, [r0, #4]
     d00:	4798      	blx	r3
     d02:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     d04:	011b      	lsls	r3, r3, #4
     d06:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d0a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d0e:	2102      	movs	r1, #2
     d10:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     d14:	4a09      	ldr	r2, [pc, #36]	; (d3c <_dmac_handler+0x7c>)
     d16:	58d3      	ldr	r3, [r2, r3]
     d18:	4798      	blx	r3
     d1a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
     d1c:	011b      	lsls	r3, r3, #4
     d1e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
     d22:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     d26:	2104      	movs	r1, #4
     d28:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
     d2c:	4a03      	ldr	r2, [pc, #12]	; (d3c <_dmac_handler+0x7c>)
     d2e:	4413      	add	r3, r2
     d30:	689b      	ldr	r3, [r3, #8]
     d32:	4798      	blx	r3
	}
}
     d34:	e7da      	b.n	cec <_dmac_handler+0x2c>
     d36:	bf00      	nop
     d38:	4100a000 	.word	0x4100a000
     d3c:	20000110 	.word	0x20000110

00000d40 <_dma_init>:
{
     d40:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     d42:	4a3d      	ldr	r2, [pc, #244]	; (e38 <_dma_init+0xf8>)
     d44:	8813      	ldrh	r3, [r2, #0]
     d46:	b29b      	uxth	r3, r3
     d48:	f023 0302 	bic.w	r3, r3, #2
     d4c:	b29b      	uxth	r3, r3
     d4e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     d50:	8853      	ldrh	r3, [r2, #2]
     d52:	b29b      	uxth	r3, r3
     d54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     d58:	b29b      	uxth	r3, r3
     d5a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     d5c:	8813      	ldrh	r3, [r2, #0]
     d5e:	b29b      	uxth	r3, r3
     d60:	f043 0301 	orr.w	r3, r3, #1
     d64:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     d66:	4b34      	ldr	r3, [pc, #208]	; (e38 <_dma_init+0xf8>)
     d68:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     d6a:	f013 0f01 	tst.w	r3, #1
     d6e:	d1fa      	bne.n	d66 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     d70:	4a31      	ldr	r2, [pc, #196]	; (e38 <_dma_init+0xf8>)
     d72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
     d76:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     d78:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     d7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
     d7e:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     d82:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     d84:	2300      	movs	r3, #0
     d86:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     d88:	492c      	ldr	r1, [pc, #176]	; (e3c <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     d8a:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     d8c:	492c      	ldr	r1, [pc, #176]	; (e40 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
     d8e:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
     d90:	e016      	b.n	dc0 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     d92:	4a2c      	ldr	r2, [pc, #176]	; (e44 <_dma_init+0x104>)
     d94:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     d98:	4c27      	ldr	r4, [pc, #156]	; (e38 <_dma_init+0xf8>)
     d9a:	1d19      	adds	r1, r3, #4
     d9c:	0109      	lsls	r1, r1, #4
     d9e:	1860      	adds	r0, r4, r1
     da0:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     da2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     da6:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     da8:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     daa:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     dac:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     dae:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     db0:	4922      	ldr	r1, [pc, #136]	; (e3c <_dma_init+0xfc>)
     db2:	011a      	lsls	r2, r3, #4
     db4:	1888      	adds	r0, r1, r2
     db6:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     db8:	2200      	movs	r2, #0
     dba:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
     dbc:	3301      	adds	r3, #1
     dbe:	b2db      	uxtb	r3, r3
     dc0:	2b1f      	cmp	r3, #31
     dc2:	d9e6      	bls.n	d92 <_dma_init+0x52>
     dc4:	2300      	movs	r3, #0
     dc6:	e00a      	b.n	dde <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     dc8:	f103 011f 	add.w	r1, r3, #31
     dcc:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dce:	2a00      	cmp	r2, #0
     dd0:	da10      	bge.n	df4 <_dma_init+0xb4>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     dd2:	2a00      	cmp	r2, #0
     dd4:	da1c      	bge.n	e10 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
     dd6:	2a00      	cmp	r2, #0
     dd8:	da24      	bge.n	e24 <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
     dda:	3301      	adds	r3, #1
     ddc:	b2db      	uxtb	r3, r3
     dde:	2b04      	cmp	r3, #4
     de0:	d9f2      	bls.n	dc8 <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     de2:	4a15      	ldr	r2, [pc, #84]	; (e38 <_dma_init+0xf8>)
     de4:	8813      	ldrh	r3, [r2, #0]
     de6:	b29b      	uxth	r3, r3
     de8:	f043 0302 	orr.w	r3, r3, #2
     dec:	8013      	strh	r3, [r2, #0]
}
     dee:	2000      	movs	r0, #0
     df0:	bc30      	pop	{r4, r5}
     df2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     df4:	0950      	lsrs	r0, r2, #5
     df6:	f001 051f 	and.w	r5, r1, #31
     dfa:	2401      	movs	r4, #1
     dfc:	40ac      	lsls	r4, r5
     dfe:	3020      	adds	r0, #32
     e00:	4d11      	ldr	r5, [pc, #68]	; (e48 <_dma_init+0x108>)
     e02:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e0a:	f3bf 8f6f 	isb	sy
     e0e:	e7e0      	b.n	dd2 <_dma_init+0x92>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e10:	0950      	lsrs	r0, r2, #5
     e12:	f001 051f 	and.w	r5, r1, #31
     e16:	2401      	movs	r4, #1
     e18:	40ac      	lsls	r4, r5
     e1a:	3060      	adds	r0, #96	; 0x60
     e1c:	4d0a      	ldr	r5, [pc, #40]	; (e48 <_dma_init+0x108>)
     e1e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
     e22:	e7d8      	b.n	dd6 <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e24:	0952      	lsrs	r2, r2, #5
     e26:	f001 011f 	and.w	r1, r1, #31
     e2a:	2001      	movs	r0, #1
     e2c:	fa00 f101 	lsl.w	r1, r0, r1
     e30:	4805      	ldr	r0, [pc, #20]	; (e48 <_dma_init+0x108>)
     e32:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     e36:	e7d0      	b.n	dda <_dma_init+0x9a>
     e38:	4100a000 	.word	0x4100a000
     e3c:	20000500 	.word	0x20000500
     e40:	20000700 	.word	0x20000700
     e44:	00002f74 	.word	0x00002f74
     e48:	e000e100 	.word	0xe000e100

00000e4c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     e4c:	b991      	cbnz	r1, e74 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     e4e:	b942      	cbnz	r2, e62 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     e50:	0100      	lsls	r0, r0, #4
     e52:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e56:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e5a:	2302      	movs	r3, #2
     e5c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     e60:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     e62:	0100      	lsls	r0, r0, #4
     e64:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e68:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e6c:	2302      	movs	r3, #2
     e6e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     e72:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     e74:	2901      	cmp	r1, #1
     e76:	d002      	beq.n	e7e <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
     e78:	2902      	cmp	r1, #2
     e7a:	d012      	beq.n	ea2 <_dma_set_irq_state+0x56>
     e7c:	4770      	bx	lr
	if (value == 0x0) {
     e7e:	b93a      	cbnz	r2, e90 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     e80:	0100      	lsls	r0, r0, #4
     e82:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e86:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e8a:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     e8e:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     e90:	0100      	lsls	r0, r0, #4
     e92:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     e96:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     e9a:	2301      	movs	r3, #1
     e9c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     ea0:	4770      	bx	lr
	if (value == 0x0) {
     ea2:	b142      	cbz	r2, eb6 <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
     ea4:	0100      	lsls	r0, r0, #4
     ea6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     eaa:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     eae:	2304      	movs	r3, #4
     eb0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     eb4:	e7e2      	b.n	e7c <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
     eb6:	0100      	lsls	r0, r0, #4
     eb8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     ebc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     ec0:	2304      	movs	r3, #4
     ec2:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     ec6:	4770      	bx	lr

00000ec8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     ec8:	4b02      	ldr	r3, [pc, #8]	; (ed4 <_dma_set_destination_address+0xc>)
     eca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ece:	6081      	str	r1, [r0, #8]
}
     ed0:	2000      	movs	r0, #0
     ed2:	4770      	bx	lr
     ed4:	20000500 	.word	0x20000500

00000ed8 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     ed8:	4b02      	ldr	r3, [pc, #8]	; (ee4 <_dma_set_source_address+0xc>)
     eda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     ede:	6041      	str	r1, [r0, #4]
}
     ee0:	2000      	movs	r0, #0
     ee2:	4770      	bx	lr
     ee4:	20000500 	.word	0x20000500

00000ee8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     ee8:	4a05      	ldr	r2, [pc, #20]	; (f00 <_dma_srcinc_enable+0x18>)
     eea:	0100      	lsls	r0, r0, #4
     eec:	5a13      	ldrh	r3, [r2, r0]
     eee:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     ef4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     ef8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     efa:	5211      	strh	r1, [r2, r0]
}
     efc:	2000      	movs	r0, #0
     efe:	4770      	bx	lr
     f00:	20000500 	.word	0x20000500

00000f04 <_dma_set_data_amount>:
{
     f04:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     f06:	4c14      	ldr	r4, [pc, #80]	; (f58 <_dma_set_data_amount+0x54>)
     f08:	0102      	lsls	r2, r0, #4
     f0a:	18a3      	adds	r3, r4, r2
     f0c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f0e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     f10:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f14:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     f16:	f412 6f00 	tst.w	r2, #2048	; 0x800
     f1a:	d006      	beq.n	f2a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f1c:	fa01 f403 	lsl.w	r4, r1, r3
     f20:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     f22:	4a0d      	ldr	r2, [pc, #52]	; (f58 <_dma_set_data_amount+0x54>)
     f24:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     f28:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     f2a:	4c0b      	ldr	r4, [pc, #44]	; (f58 <_dma_set_data_amount+0x54>)
     f2c:	0102      	lsls	r2, r0, #4
     f2e:	18a5      	adds	r5, r4, r2
     f30:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     f32:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     f34:	f412 6f80 	tst.w	r2, #1024	; 0x400
     f38:	d005      	beq.n	f46 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     f3a:	fa01 f303 	lsl.w	r3, r1, r3
     f3e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     f40:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     f44:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     f46:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
     f48:	4b03      	ldr	r3, [pc, #12]	; (f58 <_dma_set_data_amount+0x54>)
     f4a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f4e:	8041      	strh	r1, [r0, #2]
}
     f50:	2000      	movs	r0, #0
     f52:	bc30      	pop	{r4, r5}
     f54:	4770      	bx	lr
     f56:	bf00      	nop
     f58:	20000500 	.word	0x20000500

00000f5c <_dma_enable_transaction>:
{
     f5c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     f5e:	4c0c      	ldr	r4, [pc, #48]	; (f90 <_dma_enable_transaction+0x34>)
     f60:	0102      	lsls	r2, r0, #4
     f62:	5aa3      	ldrh	r3, [r4, r2]
     f64:	b29b      	uxth	r3, r3
     f66:	f043 0301 	orr.w	r3, r3, #1
     f6a:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     f6c:	4c09      	ldr	r4, [pc, #36]	; (f94 <_dma_enable_transaction+0x38>)
     f6e:	1d03      	adds	r3, r0, #4
     f70:	011b      	lsls	r3, r3, #4
     f72:	58e2      	ldr	r2, [r4, r3]
     f74:	f042 0202 	orr.w	r2, r2, #2
     f78:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
     f7a:	b129      	cbz	r1, f88 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
     f7c:	2301      	movs	r3, #1
     f7e:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
     f82:	6922      	ldr	r2, [r4, #16]
     f84:	4310      	orrs	r0, r2
     f86:	6120      	str	r0, [r4, #16]
}
     f88:	2000      	movs	r0, #0
     f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
     f8e:	4770      	bx	lr
     f90:	20000500 	.word	0x20000500
     f94:	4100a000 	.word	0x4100a000

00000f98 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <_dma_get_channel_resource+0xc>)
     f9a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     f9e:	6001      	str	r1, [r0, #0]
}
     fa0:	2000      	movs	r0, #0
     fa2:	4770      	bx	lr
     fa4:	20000110 	.word	0x20000110

00000fa8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
     fa8:	b508      	push	{r3, lr}
	_dmac_handler();
     faa:	4b01      	ldr	r3, [pc, #4]	; (fb0 <DMAC_0_Handler+0x8>)
     fac:	4798      	blx	r3
     fae:	bd08      	pop	{r3, pc}
     fb0:	00000cc1 	.word	0x00000cc1

00000fb4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
     fb4:	b508      	push	{r3, lr}
	_dmac_handler();
     fb6:	4b01      	ldr	r3, [pc, #4]	; (fbc <DMAC_1_Handler+0x8>)
     fb8:	4798      	blx	r3
     fba:	bd08      	pop	{r3, pc}
     fbc:	00000cc1 	.word	0x00000cc1

00000fc0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
     fc0:	b508      	push	{r3, lr}
	_dmac_handler();
     fc2:	4b01      	ldr	r3, [pc, #4]	; (fc8 <DMAC_2_Handler+0x8>)
     fc4:	4798      	blx	r3
     fc6:	bd08      	pop	{r3, pc}
     fc8:	00000cc1 	.word	0x00000cc1

00000fcc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
     fcc:	b508      	push	{r3, lr}
	_dmac_handler();
     fce:	4b01      	ldr	r3, [pc, #4]	; (fd4 <DMAC_3_Handler+0x8>)
     fd0:	4798      	blx	r3
     fd2:	bd08      	pop	{r3, pc}
     fd4:	00000cc1 	.word	0x00000cc1

00000fd8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
     fd8:	b508      	push	{r3, lr}
	_dmac_handler();
     fda:	4b01      	ldr	r3, [pc, #4]	; (fe0 <DMAC_4_Handler+0x8>)
     fdc:	4798      	blx	r3
     fde:	bd08      	pop	{r3, pc}
     fe0:	00000cc1 	.word	0x00000cc1

00000fe4 <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
     fe4:	b084      	sub	sp, #16
     fe6:	b470      	push	{r4, r5, r6}
     fe8:	b085      	sub	sp, #20
     fea:	4606      	mov	r6, r0
     fec:	a809      	add	r0, sp, #36	; 0x24
     fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     ff2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
     ff4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
     ff8:	4d04      	ldr	r5, [pc, #16]	; (100c <_dma_set_descriptor+0x28>)
     ffa:	eb05 1506 	add.w	r5, r5, r6, lsl #4
     ffe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    1002:	b005      	add	sp, #20
    1004:	bc70      	pop	{r4, r5, r6}
    1006:	b004      	add	sp, #16
    1008:	4770      	bx	lr
    100a:	bf00      	nop
    100c:	20000500 	.word	0x20000500

00001010 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1010:	f010 0f01 	tst.w	r0, #1
    1014:	d008      	beq.n	1028 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1016:	4a05      	ldr	r2, [pc, #20]	; (102c <_gclk_init_generators_by_fref+0x1c>)
    1018:	4b05      	ldr	r3, [pc, #20]	; (1030 <_gclk_init_generators_by_fref+0x20>)
    101a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    101c:	4b04      	ldr	r3, [pc, #16]	; (1030 <_gclk_init_generators_by_fref+0x20>)
    101e:	685a      	ldr	r2, [r3, #4]
    1020:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1024:	421a      	tst	r2, r3
    1026:	d1f9      	bne.n	101c <_gclk_init_generators_by_fref+0xc>
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	00010108 	.word	0x00010108
    1030:	40001c00 	.word	0x40001c00

00001034 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1034:	2201      	movs	r2, #1
    1036:	4b01      	ldr	r3, [pc, #4]	; (103c <_mclk_init+0x8>)
    1038:	715a      	strb	r2, [r3, #5]
    103a:	4770      	bx	lr
    103c:	40000800 	.word	0x40000800

00001040 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <_osc32kctrl_init_sources+0x10>)
    1042:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1044:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1048:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    104a:	2201      	movs	r2, #1
    104c:	741a      	strb	r2, [r3, #16]
    104e:	4770      	bx	lr
    1050:	40001400 	.word	0x40001400

00001054 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1054:	4a04      	ldr	r2, [pc, #16]	; (1068 <_oscctrl_init_sources+0x14>)
    1056:	4b05      	ldr	r3, [pc, #20]	; (106c <_oscctrl_init_sources+0x18>)
    1058:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <_oscctrl_init_sources+0x18>)
    105c:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    105e:	f013 0f02 	tst.w	r3, #2
    1062:	d0fa      	beq.n	105a <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1064:	4770      	bx	lr
    1066:	bf00      	nop
    1068:	03002606 	.word	0x03002606
    106c:	40001000 	.word	0x40001000

00001070 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1070:	2231      	movs	r2, #49	; 0x31
    1072:	4b0e      	ldr	r3, [pc, #56]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1074:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1076:	4b0d      	ldr	r3, [pc, #52]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    107a:	f013 0f06 	tst.w	r3, #6
    107e:	d1fa      	bne.n	1076 <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1080:	4b0a      	ldr	r3, [pc, #40]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1082:	4a0b      	ldr	r2, [pc, #44]	; (10b0 <_oscctrl_init_referenced_generators+0x40>)
    1084:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1086:	2202      	movs	r2, #2
    1088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    108c:	4b07      	ldr	r3, [pc, #28]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    108e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1090:	f013 0f02 	tst.w	r3, #2
    1094:	d1fa      	bne.n	108c <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    1098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    109a:	f013 0f01 	tst.w	r3, #1
    109e:	d104      	bne.n	10aa <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <_oscctrl_init_referenced_generators+0x3c>)
    10a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10a4:	f013 0f02 	tst.w	r3, #2
    10a8:	d0f5      	beq.n	1096 <_oscctrl_init_referenced_generators+0x26>
    10aa:	4770      	bx	lr
    10ac:	40001000 	.word	0x40001000
    10b0:	00020060 	.word	0x00020060

000010b4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    10b4:	b500      	push	{lr}
    10b6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <RAMECC_Handler+0x3c>)
    10ba:	789b      	ldrb	r3, [r3, #2]
    10bc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    10be:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	f013 0f02 	tst.w	r3, #2
    10c6:	d006      	beq.n	10d6 <RAMECC_Handler+0x22>
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <RAMECC_Handler+0x40>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	b11b      	cbz	r3, 10d6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    10ce:	4a08      	ldr	r2, [pc, #32]	; (10f0 <RAMECC_Handler+0x3c>)
    10d0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10d2:	4798      	blx	r3
    10d4:	e009      	b.n	10ea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10d6:	9b01      	ldr	r3, [sp, #4]
    10d8:	f013 0f01 	tst.w	r3, #1
    10dc:	d005      	beq.n	10ea <RAMECC_Handler+0x36>
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <RAMECC_Handler+0x40>)
    10e0:	685b      	ldr	r3, [r3, #4]
    10e2:	b113      	cbz	r3, 10ea <RAMECC_Handler+0x36>
    10e4:	4a02      	ldr	r2, [pc, #8]	; (10f0 <RAMECC_Handler+0x3c>)
    10e6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10e8:	4798      	blx	r3
	} else {
		return;
	}
}
    10ea:	b003      	add	sp, #12
    10ec:	f85d fb04 	ldr.w	pc, [sp], #4
    10f0:	41020000 	.word	0x41020000
    10f4:	20000900 	.word	0x20000900

000010f8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10f8:	b470      	push	{r4, r5, r6}
    10fa:	b089      	sub	sp, #36	; 0x24
    10fc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10fe:	466c      	mov	r4, sp
    1100:	4d0c      	ldr	r5, [pc, #48]	; (1134 <_sercom_get_hardware_index+0x3c>)
    1102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1106:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    110a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    110e:	2000      	movs	r0, #0
    1110:	2807      	cmp	r0, #7
    1112:	d80a      	bhi.n	112a <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1114:	ab08      	add	r3, sp, #32
    1116:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    111a:	f853 3c20 	ldr.w	r3, [r3, #-32]
    111e:	42b3      	cmp	r3, r6
    1120:	d001      	beq.n	1126 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1122:	3001      	adds	r0, #1
    1124:	e7f4      	b.n	1110 <_sercom_get_hardware_index+0x18>
			return i;
    1126:	b2c0      	uxtb	r0, r0
    1128:	e000      	b.n	112c <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    112a:	2000      	movs	r0, #0
}
    112c:	b009      	add	sp, #36	; 0x24
    112e:	bc70      	pop	{r4, r5, r6}
    1130:	4770      	bx	lr
    1132:	bf00      	nop
    1134:	00003074 	.word	0x00003074

00001138 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1138:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    113a:	f013 0f01 	tst.w	r3, #1
    113e:	d109      	bne.n	1154 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1140:	6803      	ldr	r3, [r0, #0]
    1142:	f043 0302 	orr.w	r3, r3, #2
    1146:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1148:	69c3      	ldr	r3, [r0, #28]
    114a:	f013 0f03 	tst.w	r3, #3
    114e:	d1fb      	bne.n	1148 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1150:	2000      	movs	r0, #0
    1152:	4770      	bx	lr
		return ERR_BUSY;
    1154:	f06f 0003 	mvn.w	r0, #3
}
    1158:	4770      	bx	lr

0000115a <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    115a:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    115c:	f013 0f04 	tst.w	r3, #4
    1160:	d109      	bne.n	1176 <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    1162:	6843      	ldr	r3, [r0, #4]
    1164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1168:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    116a:	69c3      	ldr	r3, [r0, #28]
    116c:	f013 0f17 	tst.w	r3, #23
    1170:	d1fb      	bne.n	116a <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1172:	2000      	movs	r0, #0
    1174:	4770      	bx	lr
		return ERR_BUSY;
    1176:	f06f 0003 	mvn.w	r0, #3
}
    117a:	4770      	bx	lr

0000117c <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    117c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    117e:	f013 0f04 	tst.w	r3, #4
    1182:	d109      	bne.n	1198 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    1184:	6843      	ldr	r3, [r0, #4]
    1186:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    118a:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    118c:	69c3      	ldr	r3, [r0, #28]
    118e:	f013 0f17 	tst.w	r3, #23
    1192:	d1fb      	bne.n	118c <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    1194:	2000      	movs	r0, #0
    1196:	4770      	bx	lr
		return ERR_BUSY;
    1198:	f06f 0003 	mvn.w	r0, #3
}
    119c:	4770      	bx	lr

0000119e <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    119e:	3028      	adds	r0, #40	; 0x28
    11a0:	4770      	bx	lr

000011a2 <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    11a2:	3028      	adds	r0, #40	; 0x28
    11a4:	4770      	bx	lr
	...

000011a8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    11a8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11aa:	4b04      	ldr	r3, [pc, #16]	; (11bc <_spi_get_tx_dma_channel+0x14>)
    11ac:	4798      	blx	r3

	switch (index) {
    11ae:	2805      	cmp	r0, #5
    11b0:	d001      	beq.n	11b6 <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    11b2:	2000      	movs	r0, #0
    11b4:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    11b6:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11b8:	bd08      	pop	{r3, pc}
    11ba:	bf00      	nop
    11bc:	000010f9 	.word	0x000010f9

000011c0 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    11c0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11c2:	4b04      	ldr	r3, [pc, #16]	; (11d4 <_spi_is_rx_dma_channel_enabled+0x14>)
    11c4:	4798      	blx	r3

	switch (index) {
    11c6:	2805      	cmp	r0, #5
    11c8:	d001      	beq.n	11ce <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    11ca:	2000      	movs	r0, #0
    11cc:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    11ce:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    11d0:	bd08      	pop	{r3, pc}
    11d2:	bf00      	nop
    11d4:	000010f9 	.word	0x000010f9

000011d8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    11d8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    11da:	4b07      	ldr	r3, [pc, #28]	; (11f8 <_spi_get_rx_dma_channel+0x20>)
    11dc:	4798      	blx	r3

	switch (index) {
    11de:	2807      	cmp	r0, #7
    11e0:	d807      	bhi.n	11f2 <_spi_get_rx_dma_channel+0x1a>
    11e2:	e8df f000 	tbb	[pc, r0]
    11e6:	0404      	.short	0x0404
    11e8:	06040404 	.word	0x06040404
    11ec:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    11ee:	2001      	movs	r0, #1
    11f0:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    11f2:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    11f4:	bd08      	pop	{r3, pc}
    11f6:	bf00      	nop
    11f8:	000010f9 	.word	0x000010f9

000011fc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    11fc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    11fe:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    1200:	689b      	ldr	r3, [r3, #8]
    1202:	b103      	cbz	r3, 1206 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    1204:	4798      	blx	r3
    1206:	bd08      	pop	{r3, pc}

00001208 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    1208:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    120a:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    120c:	68db      	ldr	r3, [r3, #12]
    120e:	b103      	cbz	r3, 1212 <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    1210:	4798      	blx	r3
    1212:	bd08      	pop	{r3, pc}

00001214 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    1214:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1216:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    1218:	685b      	ldr	r3, [r3, #4]
    121a:	b103      	cbz	r3, 121e <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    121c:	4798      	blx	r3
    121e:	bd08      	pop	{r3, pc}

00001220 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1220:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    1222:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    1224:	691b      	ldr	r3, [r3, #16]
    1226:	b103      	cbz	r3, 122a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1228:	4798      	blx	r3
    122a:	bd08      	pop	{r3, pc}

0000122c <_get_i2cm_index>:
{
    122c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    122e:	4b0d      	ldr	r3, [pc, #52]	; (1264 <_get_i2cm_index+0x38>)
    1230:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1232:	2300      	movs	r3, #0
    1234:	b143      	cbz	r3, 1248 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1236:	f240 32a7 	movw	r2, #935	; 0x3a7
    123a:	490b      	ldr	r1, [pc, #44]	; (1268 <_get_i2cm_index+0x3c>)
    123c:	2000      	movs	r0, #0
    123e:	4b0b      	ldr	r3, [pc, #44]	; (126c <_get_i2cm_index+0x40>)
    1240:	4798      	blx	r3
	return -1;
    1242:	f04f 30ff 	mov.w	r0, #4294967295
}
    1246:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1248:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    124c:	00d1      	lsls	r1, r2, #3
    124e:	4a08      	ldr	r2, [pc, #32]	; (1270 <_get_i2cm_index+0x44>)
    1250:	440a      	add	r2, r1
    1252:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    1256:	4290      	cmp	r0, r2
    1258:	d002      	beq.n	1260 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    125a:	3301      	adds	r3, #1
    125c:	b2db      	uxtb	r3, r3
    125e:	e7e9      	b.n	1234 <_get_i2cm_index+0x8>
			return i;
    1260:	b258      	sxtb	r0, r3
    1262:	bd08      	pop	{r3, pc}
    1264:	000010f9 	.word	0x000010f9
    1268:	000030e8 	.word	0x000030e8
    126c:	00000c1d 	.word	0x00000c1d
    1270:	00003074 	.word	0x00003074

00001274 <_i2c_m_sync_init_impl>:
{
    1274:	b538      	push	{r3, r4, r5, lr}
    1276:	4605      	mov	r5, r0
    1278:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    127a:	4608      	mov	r0, r1
    127c:	4b33      	ldr	r3, [pc, #204]	; (134c <_i2c_m_sync_init_impl+0xd8>)
    127e:	4798      	blx	r3
    1280:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1282:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1284:	f013 0f01 	tst.w	r3, #1
    1288:	d122      	bne.n	12d0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    128a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    128e:	00da      	lsls	r2, r3, #3
    1290:	4b2f      	ldr	r3, [pc, #188]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    1292:	4413      	add	r3, r2
    1294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1296:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    129a:	69e3      	ldr	r3, [r4, #28]
    129c:	f013 0f03 	tst.w	r3, #3
    12a0:	d1fb      	bne.n	129a <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12a2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    12a4:	f013 0f02 	tst.w	r3, #2
    12a8:	d00b      	beq.n	12c2 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    12aa:	6823      	ldr	r3, [r4, #0]
    12ac:	f023 0302 	bic.w	r3, r3, #2
    12b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12b2:	69e3      	ldr	r3, [r4, #28]
    12b4:	f013 0f03 	tst.w	r3, #3
    12b8:	d1fb      	bne.n	12b2 <_i2c_m_sync_init_impl+0x3e>
    12ba:	69e3      	ldr	r3, [r4, #28]
    12bc:	f013 0f02 	tst.w	r3, #2
    12c0:	d1fb      	bne.n	12ba <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    12c2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12c6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12c8:	69e3      	ldr	r3, [r4, #28]
    12ca:	f013 0f03 	tst.w	r3, #3
    12ce:	d1fb      	bne.n	12c8 <_i2c_m_sync_init_impl+0x54>
    12d0:	69e3      	ldr	r3, [r4, #28]
    12d2:	f013 0f01 	tst.w	r3, #1
    12d6:	d1fb      	bne.n	12d0 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    12d8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12dc:	00da      	lsls	r2, r3, #3
    12de:	4b1c      	ldr	r3, [pc, #112]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    12e0:	4413      	add	r3, r2
    12e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12e6:	69e3      	ldr	r3, [r4, #28]
    12e8:	f013 0f03 	tst.w	r3, #3
    12ec:	d1fb      	bne.n	12e6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12ee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12f2:	00da      	lsls	r2, r3, #3
    12f4:	4b16      	ldr	r3, [pc, #88]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    12f6:	4413      	add	r3, r2
    12f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    12fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12fc:	69e3      	ldr	r3, [r4, #28]
    12fe:	f013 0f04 	tst.w	r3, #4
    1302:	d1fb      	bne.n	12fc <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1304:	0042      	lsls	r2, r0, #1
    1306:	4402      	add	r2, r0
    1308:	00d1      	lsls	r1, r2, #3
    130a:	4b11      	ldr	r3, [pc, #68]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    130c:	440b      	add	r3, r1
    130e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1310:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1312:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    1316:	f003 0303 	and.w	r3, r3, #3
    131a:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    131c:	2b01      	cmp	r3, #1
    131e:	bf94      	ite	ls
    1320:	2300      	movls	r3, #0
    1322:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1324:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    132a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    132e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1330:	69e3      	ldr	r3, [r4, #28]
    1332:	f013 0f04 	tst.w	r3, #4
    1336:	d1fb      	bne.n	1330 <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    1338:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    133c:	00c2      	lsls	r2, r0, #3
    133e:	4b04      	ldr	r3, [pc, #16]	; (1350 <_i2c_m_sync_init_impl+0xdc>)
    1340:	4413      	add	r3, r2
    1342:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1346:	81eb      	strh	r3, [r5, #14]
}
    1348:	2000      	movs	r0, #0
    134a:	bd38      	pop	{r3, r4, r5, pc}
    134c:	0000122d 	.word	0x0000122d
    1350:	00003074 	.word	0x00003074

00001354 <_sercom_i2c_sync_send_address>:
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1358:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    135a:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    135c:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1360:	f240 52a6 	movw	r2, #1446	; 0x5a6
    1364:	4999      	ldr	r1, [pc, #612]	; (15cc <_sercom_i2c_sync_send_address+0x278>)
    1366:	3000      	adds	r0, #0
    1368:	bf18      	it	ne
    136a:	2001      	movne	r0, #1
    136c:	4b98      	ldr	r3, [pc, #608]	; (15d0 <_sercom_i2c_sync_send_address+0x27c>)
    136e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1370:	686b      	ldr	r3, [r5, #4]
    1372:	2b01      	cmp	r3, #1
    1374:	d057      	beq.n	1426 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1376:	6863      	ldr	r3, [r4, #4]
    1378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    137c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    137e:	69e3      	ldr	r3, [r4, #28]
    1380:	f013 0f04 	tst.w	r3, #4
    1384:	d1fb      	bne.n	137e <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1386:	882b      	ldrh	r3, [r5, #0]
    1388:	f413 6f80 	tst.w	r3, #1024	; 0x400
    138c:	d056      	beq.n	143c <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    138e:	886a      	ldrh	r2, [r5, #2]
    1390:	f012 0f01 	tst.w	r2, #1
    1394:	d004      	beq.n	13a0 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1396:	886a      	ldrh	r2, [r5, #2]
    1398:	b292      	uxth	r2, r2
    139a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    139e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    13a0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    13a4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    13a8:	69e3      	ldr	r3, [r4, #28]
    13aa:	f013 0f04 	tst.w	r3, #4
    13ae:	d1fb      	bne.n	13a8 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    13b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    13b6:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    13b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    13bc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13be:	69e3      	ldr	r3, [r4, #28]
    13c0:	f013 0f04 	tst.w	r3, #4
    13c4:	d1fb      	bne.n	13be <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    13c6:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    13c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    13cc:	7e33      	ldrb	r3, [r6, #24]
    13ce:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    13d0:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    13d2:	1e51      	subs	r1, r2, #1
    13d4:	b11a      	cbz	r2, 13de <_sercom_i2c_sync_send_address+0x8a>
    13d6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    13d8:	f013 0f03 	tst.w	r3, #3
    13dc:	d0f6      	beq.n	13cc <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    13de:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    13e0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13e4:	69e3      	ldr	r3, [r4, #28]
    13e6:	f013 0f04 	tst.w	r3, #4
    13ea:	d1fb      	bne.n	13e4 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    13ec:	8b63      	ldrh	r3, [r4, #26]
    13ee:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    13f0:	f010 0f01 	tst.w	r0, #1
    13f4:	f000 809c 	beq.w	1530 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    13f8:	f013 0f02 	tst.w	r3, #2
    13fc:	d032      	beq.n	1464 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    13fe:	2201      	movs	r2, #1
    1400:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1402:	886a      	ldrh	r2, [r5, #2]
    1404:	b292      	uxth	r2, r2
    1406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    140a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    140c:	886a      	ldrh	r2, [r5, #2]
    140e:	b292      	uxth	r2, r2
    1410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1414:	b292      	uxth	r2, r2
    1416:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1418:	f013 0f01 	tst.w	r3, #1
    141c:	f000 80d1 	beq.w	15c2 <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    1420:	f06f 0004 	mvn.w	r0, #4
    1424:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    1426:	2e00      	cmp	r6, #0
    1428:	d0a5      	beq.n	1376 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    142a:	6863      	ldr	r3, [r4, #4]
    142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1430:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1432:	69e3      	ldr	r3, [r4, #28]
    1434:	f013 0f04 	tst.w	r3, #4
    1438:	d1fb      	bne.n	1432 <_sercom_i2c_sync_send_address+0xde>
    143a:	e7a4      	b.n	1386 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    143c:	005b      	lsls	r3, r3, #1
    143e:	b2db      	uxtb	r3, r3
    1440:	886a      	ldrh	r2, [r5, #2]
    1442:	f002 0201 	and.w	r2, r2, #1
    1446:	431a      	orrs	r2, r3
    1448:	69e3      	ldr	r3, [r4, #28]
    144a:	f013 0f04 	tst.w	r3, #4
    144e:	d1fb      	bne.n	1448 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1450:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1456:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1458:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    145a:	69e3      	ldr	r3, [r4, #28]
    145c:	f013 0f04 	tst.w	r3, #4
    1460:	d1fb      	bne.n	145a <_sercom_i2c_sync_send_address+0x106>
    1462:	e7b0      	b.n	13c6 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1464:	f013 0f04 	tst.w	r3, #4
    1468:	d11f      	bne.n	14aa <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    146a:	886b      	ldrh	r3, [r5, #2]
    146c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1470:	d039      	beq.n	14e6 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1472:	882b      	ldrh	r3, [r5, #0]
    1474:	121b      	asrs	r3, r3, #8
    1476:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1478:	f003 0206 	and.w	r2, r3, #6
    147c:	69e3      	ldr	r3, [r4, #28]
    147e:	f013 0f04 	tst.w	r3, #4
    1482:	d1fb      	bne.n	147c <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1484:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    148a:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    148c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1490:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1492:	69e3      	ldr	r3, [r4, #28]
    1494:	f013 0f04 	tst.w	r3, #4
    1498:	d1fb      	bne.n	1492 <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    149a:	886b      	ldrh	r3, [r5, #2]
    149c:	b29b      	uxth	r3, r3
    149e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    14a2:	b29b      	uxth	r3, r3
    14a4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    14a6:	2000      	movs	r0, #0
    14a8:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    14aa:	686b      	ldr	r3, [r5, #4]
    14ac:	2b00      	cmp	r3, #0
    14ae:	dd04      	ble.n	14ba <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    14b0:	886b      	ldrh	r3, [r5, #2]
    14b2:	b29b      	uxth	r3, r3
    14b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    14b8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14ba:	886b      	ldrh	r3, [r5, #2]
    14bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14c0:	d108      	bne.n	14d4 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    14c2:	886b      	ldrh	r3, [r5, #2]
    14c4:	b29b      	uxth	r3, r3
    14c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14ca:	b29b      	uxth	r3, r3
    14cc:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    14ce:	f06f 0001 	mvn.w	r0, #1
    14d2:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14d4:	6863      	ldr	r3, [r4, #4]
    14d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14dc:	69e3      	ldr	r3, [r4, #28]
    14de:	f013 0f04 	tst.w	r3, #4
    14e2:	d1fb      	bne.n	14dc <_sercom_i2c_sync_send_address+0x188>
    14e4:	e7ed      	b.n	14c2 <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    14e6:	6868      	ldr	r0, [r5, #4]
    14e8:	b998      	cbnz	r0, 1512 <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    14ea:	886b      	ldrh	r3, [r5, #2]
    14ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14f0:	d106      	bne.n	1500 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    14f2:	886b      	ldrh	r3, [r5, #2]
    14f4:	b29b      	uxth	r3, r3
    14f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    14fa:	b29b      	uxth	r3, r3
    14fc:	806b      	strh	r3, [r5, #2]
    14fe:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1500:	6863      	ldr	r3, [r4, #4]
    1502:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1506:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1508:	69e3      	ldr	r3, [r4, #28]
    150a:	f013 0f04 	tst.w	r3, #4
    150e:	d1fb      	bne.n	1508 <_sercom_i2c_sync_send_address+0x1b4>
    1510:	e7ef      	b.n	14f2 <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1512:	68ab      	ldr	r3, [r5, #8]
    1514:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1516:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1518:	69e3      	ldr	r3, [r4, #28]
    151a:	f013 0f04 	tst.w	r3, #4
    151e:	d1fb      	bne.n	1518 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    1520:	68ab      	ldr	r3, [r5, #8]
    1522:	3301      	adds	r3, #1
    1524:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1526:	686b      	ldr	r3, [r5, #4]
    1528:	3b01      	subs	r3, #1
    152a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    152c:	2000      	movs	r0, #0
    152e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1530:	f010 0f02 	tst.w	r0, #2
    1534:	d048      	beq.n	15c8 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1536:	6869      	ldr	r1, [r5, #4]
    1538:	2900      	cmp	r1, #0
    153a:	d03d      	beq.n	15b8 <_sercom_i2c_sync_send_address+0x264>
    153c:	f013 0f04 	tst.w	r3, #4
    1540:	d13a      	bne.n	15b8 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    1542:	3901      	subs	r1, #1
    1544:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1546:	b901      	cbnz	r1, 154a <_sercom_i2c_sync_send_address+0x1f6>
    1548:	b1e2      	cbz	r2, 1584 <_sercom_i2c_sync_send_address+0x230>
    154a:	2901      	cmp	r1, #1
    154c:	d018      	beq.n	1580 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    154e:	686b      	ldr	r3, [r5, #4]
    1550:	b94b      	cbnz	r3, 1566 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    1552:	886b      	ldrh	r3, [r5, #2]
    1554:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1558:	d11d      	bne.n	1596 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    155a:	886b      	ldrh	r3, [r5, #2]
    155c:	b29b      	uxth	r3, r3
    155e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1562:	b29b      	uxth	r3, r3
    1564:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1566:	68aa      	ldr	r2, [r5, #8]
    1568:	1c53      	adds	r3, r2, #1
    156a:	60ab      	str	r3, [r5, #8]
    156c:	69e3      	ldr	r3, [r4, #28]
    156e:	f013 0f04 	tst.w	r3, #4
    1572:	d1fb      	bne.n	156c <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1576:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1578:	2302      	movs	r3, #2
    157a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    157c:	2000      	movs	r0, #0
    157e:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1580:	2a00      	cmp	r2, #0
    1582:	d0e4      	beq.n	154e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1584:	6863      	ldr	r3, [r4, #4]
    1586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    158a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    158c:	69e3      	ldr	r3, [r4, #28]
    158e:	f013 0f04 	tst.w	r3, #4
    1592:	d1fb      	bne.n	158c <_sercom_i2c_sync_send_address+0x238>
    1594:	e7db      	b.n	154e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1596:	6863      	ldr	r3, [r4, #4]
    1598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    159c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    159e:	69e3      	ldr	r3, [r4, #28]
    15a0:	f013 0f04 	tst.w	r3, #4
    15a4:	d1fb      	bne.n	159e <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15a6:	6863      	ldr	r3, [r4, #4]
    15a8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15ae:	69e3      	ldr	r3, [r4, #28]
    15b0:	f013 0f04 	tst.w	r3, #4
    15b4:	d1fb      	bne.n	15ae <_sercom_i2c_sync_send_address+0x25a>
    15b6:	e7d0      	b.n	155a <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15b8:	2302      	movs	r3, #2
    15ba:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    15bc:	f06f 0001 	mvn.w	r0, #1
    15c0:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    15c2:	f06f 0003 	mvn.w	r0, #3
    15c6:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    15c8:	2000      	movs	r0, #0
}
    15ca:	bd70      	pop	{r4, r5, r6, pc}
    15cc:	000030e8 	.word	0x000030e8
    15d0:	00000c1d 	.word	0x00000c1d

000015d4 <_spi_m_dma_rx_enable>:
{
    15d4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    15d6:	4604      	mov	r4, r0
    15d8:	b168      	cbz	r0, 15f6 <_spi_m_dma_rx_enable+0x22>
    15da:	6803      	ldr	r3, [r0, #0]
    15dc:	b14b      	cbz	r3, 15f2 <_spi_m_dma_rx_enable+0x1e>
    15de:	2001      	movs	r0, #1
    15e0:	f640 32fe 	movw	r2, #3070	; 0xbfe
    15e4:	4905      	ldr	r1, [pc, #20]	; (15fc <_spi_m_dma_rx_enable+0x28>)
    15e6:	4b06      	ldr	r3, [pc, #24]	; (1600 <_spi_m_dma_rx_enable+0x2c>)
    15e8:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    15ea:	6820      	ldr	r0, [r4, #0]
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <_spi_m_dma_rx_enable+0x30>)
    15ee:	4798      	blx	r3
}
    15f0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    15f2:	2000      	movs	r0, #0
    15f4:	e7f4      	b.n	15e0 <_spi_m_dma_rx_enable+0xc>
    15f6:	2000      	movs	r0, #0
    15f8:	e7f2      	b.n	15e0 <_spi_m_dma_rx_enable+0xc>
    15fa:	bf00      	nop
    15fc:	000030e8 	.word	0x000030e8
    1600:	00000c1d 	.word	0x00000c1d
    1604:	0000115b 	.word	0x0000115b

00001608 <_spi_m_dma_rx_disable>:
{
    1608:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    160a:	4604      	mov	r4, r0
    160c:	b168      	cbz	r0, 162a <_spi_m_dma_rx_disable+0x22>
    160e:	6803      	ldr	r3, [r0, #0]
    1610:	b14b      	cbz	r3, 1626 <_spi_m_dma_rx_disable+0x1e>
    1612:	2001      	movs	r0, #1
    1614:	f640 4205 	movw	r2, #3077	; 0xc05
    1618:	4905      	ldr	r1, [pc, #20]	; (1630 <_spi_m_dma_rx_disable+0x28>)
    161a:	4b06      	ldr	r3, [pc, #24]	; (1634 <_spi_m_dma_rx_disable+0x2c>)
    161c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    161e:	6820      	ldr	r0, [r4, #0]
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <_spi_m_dma_rx_disable+0x30>)
    1622:	4798      	blx	r3
}
    1624:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1626:	2000      	movs	r0, #0
    1628:	e7f4      	b.n	1614 <_spi_m_dma_rx_disable+0xc>
    162a:	2000      	movs	r0, #0
    162c:	e7f2      	b.n	1614 <_spi_m_dma_rx_disable+0xc>
    162e:	bf00      	nop
    1630:	000030e8 	.word	0x000030e8
    1634:	00000c1d 	.word	0x00000c1d
    1638:	0000117d 	.word	0x0000117d

0000163c <_i2c_m_sync_init>:
{
    163c:	b538      	push	{r3, r4, r5, lr}
    163e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1640:	4604      	mov	r4, r0
    1642:	f240 5219 	movw	r2, #1305	; 0x519
    1646:	4906      	ldr	r1, [pc, #24]	; (1660 <_i2c_m_sync_init+0x24>)
    1648:	3000      	adds	r0, #0
    164a:	bf18      	it	ne
    164c:	2001      	movne	r0, #1
    164e:	4b05      	ldr	r3, [pc, #20]	; (1664 <_i2c_m_sync_init+0x28>)
    1650:	4798      	blx	r3
	i2c_dev->hw = hw;
    1652:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1654:	4629      	mov	r1, r5
    1656:	4620      	mov	r0, r4
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <_i2c_m_sync_init+0x2c>)
    165a:	4798      	blx	r3
}
    165c:	bd38      	pop	{r3, r4, r5, pc}
    165e:	bf00      	nop
    1660:	000030e8 	.word	0x000030e8
    1664:	00000c1d 	.word	0x00000c1d
    1668:	00001275 	.word	0x00001275

0000166c <_i2c_m_sync_enable>:
{
    166c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    166e:	4e1b      	ldr	r6, [pc, #108]	; (16dc <_i2c_m_sync_enable+0x70>)
    1670:	4604      	mov	r4, r0
    1672:	f240 5236 	movw	r2, #1334	; 0x536
    1676:	4631      	mov	r1, r6
    1678:	3000      	adds	r0, #0
    167a:	bf18      	it	ne
    167c:	2001      	movne	r0, #1
    167e:	4d18      	ldr	r5, [pc, #96]	; (16e0 <_i2c_m_sync_enable+0x74>)
    1680:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1682:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1684:	f240 6206 	movw	r2, #1542	; 0x606
    1688:	4631      	mov	r1, r6
    168a:	1c20      	adds	r0, r4, #0
    168c:	bf18      	it	ne
    168e:	2001      	movne	r0, #1
    1690:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1692:	6823      	ldr	r3, [r4, #0]
    1694:	f043 0302 	orr.w	r3, r3, #2
    1698:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    169a:	69e3      	ldr	r3, [r4, #28]
    169c:	f013 0f03 	tst.w	r3, #3
    16a0:	d1fb      	bne.n	169a <_i2c_m_sync_enable+0x2e>
    16a2:	2104      	movs	r1, #4
    16a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    16a8:	69e3      	ldr	r3, [r4, #28]
    16aa:	f013 0f04 	tst.w	r3, #4
    16ae:	d1fb      	bne.n	16a8 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    16b0:	8b63      	ldrh	r3, [r4, #26]
    16b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    16b6:	2b01      	cmp	r3, #1
    16b8:	d00b      	beq.n	16d2 <_i2c_m_sync_enable+0x66>
		timeout--;
    16ba:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    16bc:	2a00      	cmp	r2, #0
    16be:	dcf3      	bgt.n	16a8 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    16c0:	3901      	subs	r1, #1
    16c2:	d008      	beq.n	16d6 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    16c4:	2310      	movs	r3, #16
    16c6:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16c8:	69e3      	ldr	r3, [r4, #28]
    16ca:	f013 0f04 	tst.w	r3, #4
    16ce:	d1fb      	bne.n	16c8 <_i2c_m_sync_enable+0x5c>
    16d0:	e7e8      	b.n	16a4 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    16d2:	2000      	movs	r0, #0
    16d4:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    16d6:	f06f 0005 	mvn.w	r0, #5
}
    16da:	bd70      	pop	{r4, r5, r6, pc}
    16dc:	000030e8 	.word	0x000030e8
    16e0:	00000c1d 	.word	0x00000c1d

000016e4 <_i2c_m_sync_transfer>:
{
    16e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16e8:	4605      	mov	r5, r0
    16ea:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    16ec:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    16ee:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1990 <_i2c_m_sync_transfer+0x2ac>
    16f2:	f240 52d1 	movw	r2, #1489	; 0x5d1
    16f6:	4641      	mov	r1, r8
    16f8:	3000      	adds	r0, #0
    16fa:	bf18      	it	ne
    16fc:	2001      	movne	r0, #1
    16fe:	4fa2      	ldr	r7, [pc, #648]	; (1988 <_i2c_m_sync_transfer+0x2a4>)
    1700:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1702:	6928      	ldr	r0, [r5, #16]
    1704:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1708:	4641      	mov	r1, r8
    170a:	3000      	adds	r0, #0
    170c:	bf18      	it	ne
    170e:	2001      	movne	r0, #1
    1710:	47b8      	blx	r7
	ASSERT(msg);
    1712:	f240 52d3 	movw	r2, #1491	; 0x5d3
    1716:	4641      	mov	r1, r8
    1718:	1c30      	adds	r0, r6, #0
    171a:	bf18      	it	ne
    171c:	2001      	movne	r0, #1
    171e:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1720:	886b      	ldrh	r3, [r5, #2]
    1722:	f413 7f80 	tst.w	r3, #256	; 0x100
    1726:	f040 812a 	bne.w	197e <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    172a:	8873      	ldrh	r3, [r6, #2]
    172c:	b29b      	uxth	r3, r3
    172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1732:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1734:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1738:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    173c:	6863      	ldr	r3, [r4, #4]
    173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1742:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1744:	69e3      	ldr	r3, [r4, #28]
    1746:	f013 0f04 	tst.w	r3, #4
    174a:	d1fb      	bne.n	1744 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    174c:	4628      	mov	r0, r5
    174e:	4b8f      	ldr	r3, [pc, #572]	; (198c <_i2c_m_sync_transfer+0x2a8>)
    1750:	4798      	blx	r3
	if (ret) {
    1752:	4603      	mov	r3, r0
    1754:	2800      	cmp	r0, #0
    1756:	f000 80b0 	beq.w	18ba <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    175a:	886a      	ldrh	r2, [r5, #2]
    175c:	b292      	uxth	r2, r2
    175e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1762:	b292      	uxth	r2, r2
    1764:	806a      	strh	r2, [r5, #2]
		return ret;
    1766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    176a:	f06f 0004 	mvn.w	r0, #4
    176e:	e0b7      	b.n	18e0 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1770:	8873      	ldrh	r3, [r6, #2]
    1772:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1776:	d107      	bne.n	1788 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1778:	886b      	ldrh	r3, [r5, #2]
    177a:	b29b      	uxth	r3, r3
    177c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1780:	b29b      	uxth	r3, r3
    1782:	806b      	strh	r3, [r5, #2]
			return ret;
    1784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1788:	6863      	ldr	r3, [r4, #4]
    178a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    178e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1790:	69e3      	ldr	r3, [r4, #28]
    1792:	f013 0f04 	tst.w	r3, #4
    1796:	d1fb      	bne.n	1790 <_i2c_m_sync_transfer+0xac>
    1798:	e7ee      	b.n	1778 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    179a:	f013 0f04 	tst.w	r3, #4
    179e:	d11f      	bne.n	17e0 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    17a0:	886b      	ldrh	r3, [r5, #2]
    17a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17a6:	d039      	beq.n	181c <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    17a8:	882b      	ldrh	r3, [r5, #0]
    17aa:	121b      	asrs	r3, r3, #8
    17ac:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17ae:	f003 0206 	and.w	r2, r3, #6
    17b2:	69e3      	ldr	r3, [r4, #28]
    17b4:	f013 0f04 	tst.w	r3, #4
    17b8:	d1fb      	bne.n	17b2 <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    17c0:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    17c2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17c6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17c8:	69e3      	ldr	r3, [r4, #28]
    17ca:	f013 0f04 	tst.w	r3, #4
    17ce:	d1fb      	bne.n	17c8 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    17d0:	886b      	ldrh	r3, [r5, #2]
    17d2:	b29b      	uxth	r3, r3
    17d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    17d8:	b29b      	uxth	r3, r3
    17da:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    17dc:	2000      	movs	r0, #0
    17de:	e06b      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    17e0:	686b      	ldr	r3, [r5, #4]
    17e2:	2b00      	cmp	r3, #0
    17e4:	dd04      	ble.n	17f0 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    17e6:	886b      	ldrh	r3, [r5, #2]
    17e8:	b29b      	uxth	r3, r3
    17ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17ee:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    17f0:	886b      	ldrh	r3, [r5, #2]
    17f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17f6:	d108      	bne.n	180a <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    17f8:	886b      	ldrh	r3, [r5, #2]
    17fa:	b29b      	uxth	r3, r3
    17fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1800:	b29b      	uxth	r3, r3
    1802:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1804:	f06f 0001 	mvn.w	r0, #1
    1808:	e056      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    180a:	6863      	ldr	r3, [r4, #4]
    180c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1810:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1812:	69e3      	ldr	r3, [r4, #28]
    1814:	f013 0f04 	tst.w	r3, #4
    1818:	d1fb      	bne.n	1812 <_i2c_m_sync_transfer+0x12e>
    181a:	e7ed      	b.n	17f8 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    181c:	6868      	ldr	r0, [r5, #4]
    181e:	b998      	cbnz	r0, 1848 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1820:	886b      	ldrh	r3, [r5, #2]
    1822:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1826:	d106      	bne.n	1836 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1828:	886b      	ldrh	r3, [r5, #2]
    182a:	b29b      	uxth	r3, r3
    182c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1830:	b29b      	uxth	r3, r3
    1832:	806b      	strh	r3, [r5, #2]
    1834:	e040      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1836:	6863      	ldr	r3, [r4, #4]
    1838:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    183c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    183e:	69e3      	ldr	r3, [r4, #28]
    1840:	f013 0f04 	tst.w	r3, #4
    1844:	d1fb      	bne.n	183e <_i2c_m_sync_transfer+0x15a>
    1846:	e7ef      	b.n	1828 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1848:	68ab      	ldr	r3, [r5, #8]
    184a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    184c:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    184e:	69e3      	ldr	r3, [r4, #28]
    1850:	f013 0f04 	tst.w	r3, #4
    1854:	d1fb      	bne.n	184e <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1856:	68ab      	ldr	r3, [r5, #8]
    1858:	3301      	adds	r3, #1
    185a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    185c:	686b      	ldr	r3, [r5, #4]
    185e:	3b01      	subs	r3, #1
    1860:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1862:	2000      	movs	r0, #0
    1864:	e028      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1866:	f017 0f02 	tst.w	r7, #2
    186a:	f000 8083 	beq.w	1974 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    186e:	6869      	ldr	r1, [r5, #4]
    1870:	2900      	cmp	r1, #0
    1872:	d077      	beq.n	1964 <_i2c_m_sync_transfer+0x280>
    1874:	f013 0f04 	tst.w	r3, #4
    1878:	d174      	bne.n	1964 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    187a:	3901      	subs	r1, #1
    187c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    187e:	b909      	cbnz	r1, 1884 <_i2c_m_sync_transfer+0x1a0>
    1880:	2a00      	cmp	r2, #0
    1882:	d055      	beq.n	1930 <_i2c_m_sync_transfer+0x24c>
    1884:	2901      	cmp	r1, #1
    1886:	d051      	beq.n	192c <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1888:	686b      	ldr	r3, [r5, #4]
    188a:	b94b      	cbnz	r3, 18a0 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    188c:	886b      	ldrh	r3, [r5, #2]
    188e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1892:	d156      	bne.n	1942 <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1894:	886b      	ldrh	r3, [r5, #2]
    1896:	b29b      	uxth	r3, r3
    1898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    189c:	b29b      	uxth	r3, r3
    189e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    18a0:	68aa      	ldr	r2, [r5, #8]
    18a2:	1c53      	adds	r3, r2, #1
    18a4:	60ab      	str	r3, [r5, #8]
    18a6:	69e3      	ldr	r3, [r4, #28]
    18a8:	f013 0f04 	tst.w	r3, #4
    18ac:	d1fb      	bne.n	18a6 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    18ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18b0:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    18b2:	2302      	movs	r3, #2
    18b4:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    18b6:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    18b8:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    18ba:	886a      	ldrh	r2, [r5, #2]
    18bc:	f412 7f80 	tst.w	r2, #256	; 0x100
    18c0:	d05a      	beq.n	1978 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    18c2:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    18c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    18c8:	7e03      	ldrb	r3, [r0, #24]
    18ca:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    18cc:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    18ce:	1e51      	subs	r1, r2, #1
    18d0:	2a00      	cmp	r2, #0
    18d2:	f43f af4a 	beq.w	176a <_i2c_m_sync_transfer+0x86>
    18d6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    18d8:	f013 0f03 	tst.w	r3, #3
    18dc:	d0f4      	beq.n	18c8 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    18de:	2000      	movs	r0, #0
		if (ret) {
    18e0:	2800      	cmp	r0, #0
    18e2:	f47f af45 	bne.w	1770 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    18e6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18e8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18ec:	69e3      	ldr	r3, [r4, #28]
    18ee:	f013 0f04 	tst.w	r3, #4
    18f2:	d1fb      	bne.n	18ec <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    18f4:	8b63      	ldrh	r3, [r4, #26]
    18f6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    18f8:	f017 0f01 	tst.w	r7, #1
    18fc:	d0b3      	beq.n	1866 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    18fe:	f013 0f02 	tst.w	r3, #2
    1902:	f43f af4a 	beq.w	179a <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1906:	2201      	movs	r2, #1
    1908:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    190a:	886a      	ldrh	r2, [r5, #2]
    190c:	b292      	uxth	r2, r2
    190e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1912:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1914:	886a      	ldrh	r2, [r5, #2]
    1916:	b292      	uxth	r2, r2
    1918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    191c:	b292      	uxth	r2, r2
    191e:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1920:	f013 0f01 	tst.w	r3, #1
    1924:	d023      	beq.n	196e <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    1926:	f06f 0004 	mvn.w	r0, #4
    192a:	e7c5      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    192c:	2a00      	cmp	r2, #0
    192e:	d0ab      	beq.n	1888 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1930:	6863      	ldr	r3, [r4, #4]
    1932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1936:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1938:	69e3      	ldr	r3, [r4, #28]
    193a:	f013 0f04 	tst.w	r3, #4
    193e:	d1fb      	bne.n	1938 <_i2c_m_sync_transfer+0x254>
    1940:	e7a2      	b.n	1888 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1942:	6863      	ldr	r3, [r4, #4]
    1944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1948:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    194a:	69e3      	ldr	r3, [r4, #28]
    194c:	f013 0f04 	tst.w	r3, #4
    1950:	d1fb      	bne.n	194a <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1952:	6863      	ldr	r3, [r4, #4]
    1954:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1958:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    195a:	69e3      	ldr	r3, [r4, #28]
    195c:	f013 0f04 	tst.w	r3, #4
    1960:	d1fb      	bne.n	195a <_i2c_m_sync_transfer+0x276>
    1962:	e797      	b.n	1894 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1964:	2302      	movs	r3, #2
    1966:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1968:	f06f 0001 	mvn.w	r0, #1
    196c:	e7a4      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    196e:	f06f 0003 	mvn.w	r0, #3
    1972:	e7a1      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1974:	2000      	movs	r0, #0
    1976:	e79f      	b.n	18b8 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1978:	4618      	mov	r0, r3
    197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    197e:	f06f 0005 	mvn.w	r0, #5
}
    1982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1986:	bf00      	nop
    1988:	00000c1d 	.word	0x00000c1d
    198c:	00001355 	.word	0x00001355
    1990:	000030e8 	.word	0x000030e8

00001994 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	4605      	mov	r5, r0
    1998:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    199a:	4608      	mov	r0, r1
    199c:	4b50      	ldr	r3, [pc, #320]	; (1ae0 <_spi_m_dma_init+0x14c>)
    199e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    19a0:	2300      	movs	r3, #0
    19a2:	2b00      	cmp	r3, #0
    19a4:	d072      	beq.n	1a8c <_spi_m_dma_init+0xf8>
	return NULL;
    19a6:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    19a8:	2d00      	cmp	r5, #0
    19aa:	d07b      	beq.n	1aa4 <_spi_m_dma_init+0x110>
    19ac:	2c00      	cmp	r4, #0
    19ae:	d077      	beq.n	1aa0 <_spi_m_dma_init+0x10c>
    19b0:	2001      	movs	r0, #1
    19b2:	f640 42b3 	movw	r2, #3251	; 0xcb3
    19b6:	494b      	ldr	r1, [pc, #300]	; (1ae4 <_spi_m_dma_init+0x150>)
    19b8:	4b4b      	ldr	r3, [pc, #300]	; (1ae8 <_spi_m_dma_init+0x154>)
    19ba:	4798      	blx	r3

	if (regs == NULL) {
    19bc:	2e00      	cmp	r6, #0
    19be:	f000 808b 	beq.w	1ad8 <_spi_m_dma_init+0x144>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19c2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19c4:	f013 0f01 	tst.w	r3, #1
    19c8:	d11d      	bne.n	1a06 <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19ca:	6833      	ldr	r3, [r6, #0]
    19cc:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d0:	69e3      	ldr	r3, [r4, #28]
    19d2:	f013 0f03 	tst.w	r3, #3
    19d6:	d1fb      	bne.n	19d0 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19d8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19da:	f013 0f02 	tst.w	r3, #2
    19de:	d00b      	beq.n	19f8 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19e0:	6823      	ldr	r3, [r4, #0]
    19e2:	f023 0302 	bic.w	r3, r3, #2
    19e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19e8:	69e3      	ldr	r3, [r4, #28]
    19ea:	f013 0f03 	tst.w	r3, #3
    19ee:	d1fb      	bne.n	19e8 <_spi_m_dma_init+0x54>
    19f0:	69e3      	ldr	r3, [r4, #28]
    19f2:	f013 0f02 	tst.w	r3, #2
    19f6:	d1fb      	bne.n	19f0 <_spi_m_dma_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    19f8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    19fc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19fe:	69e3      	ldr	r3, [r4, #28]
    1a00:	f013 0f03 	tst.w	r3, #3
    1a04:	d1fb      	bne.n	19fe <_spi_m_dma_init+0x6a>
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f01 	tst.w	r3, #1
    1a0c:	d1fb      	bne.n	1a06 <_spi_m_dma_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1a0e:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1a10:	2c00      	cmp	r4, #0
    1a12:	d04b      	beq.n	1aac <_spi_m_dma_init+0x118>
    1a14:	2e00      	cmp	r6, #0
    1a16:	d047      	beq.n	1aa8 <_spi_m_dma_init+0x114>
    1a18:	2001      	movs	r0, #1
    1a1a:	f640 120a 	movw	r2, #2314	; 0x90a
    1a1e:	4931      	ldr	r1, [pc, #196]	; (1ae4 <_spi_m_dma_init+0x150>)
    1a20:	4b31      	ldr	r3, [pc, #196]	; (1ae8 <_spi_m_dma_init+0x154>)
    1a22:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a24:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a2a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a30:	69e3      	ldr	r3, [r4, #28]
    1a32:	f013 0f03 	tst.w	r3, #3
    1a36:	d1fb      	bne.n	1a30 <_spi_m_dma_init+0x9c>
	    (regs->ctrlb
    1a38:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a3a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a3e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a46:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a48:	69e3      	ldr	r3, [r4, #28]
    1a4a:	f013 0f17 	tst.w	r3, #23
    1a4e:	d1fb      	bne.n	1a48 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a50:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a52:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a54:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    1a5a:	4620      	mov	r0, r4
    1a5c:	4b23      	ldr	r3, [pc, #140]	; (1aec <_spi_m_dma_init+0x158>)
    1a5e:	4798      	blx	r3
    1a60:	bb30      	cbnz	r0, 1ab0 <_spi_m_dma_init+0x11c>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    1a62:	4620      	mov	r0, r4
    1a64:	4b22      	ldr	r3, [pc, #136]	; (1af0 <_spi_m_dma_init+0x15c>)
    1a66:	4798      	blx	r3
    1a68:	4601      	mov	r1, r0
    1a6a:	f105 001c 	add.w	r0, r5, #28
    1a6e:	4b21      	ldr	r3, [pc, #132]	; (1af4 <_spi_m_dma_init+0x160>)
    1a70:	4798      	blx	r3
	dev->resource->back                 = dev;
    1a72:	69eb      	ldr	r3, [r5, #28]
    1a74:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    1a76:	69eb      	ldr	r3, [r5, #28]
    1a78:	4a1f      	ldr	r2, [pc, #124]	; (1af8 <_spi_m_dma_init+0x164>)
    1a7a:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1a7c:	69eb      	ldr	r3, [r5, #28]
    1a7e:	4a1f      	ldr	r2, [pc, #124]	; (1afc <_spi_m_dma_init+0x168>)
    1a80:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1a82:	69eb      	ldr	r3, [r5, #28]
    1a84:	4a1e      	ldr	r2, [pc, #120]	; (1b00 <_spi_m_dma_init+0x16c>)
    1a86:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    1a88:	2000      	movs	r0, #0
    1a8a:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a8c:	2805      	cmp	r0, #5
    1a8e:	d002      	beq.n	1a96 <_spi_m_dma_init+0x102>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a90:	3301      	adds	r3, #1
    1a92:	b2db      	uxtb	r3, r3
    1a94:	e785      	b.n	19a2 <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    1a96:	eb03 1603 	add.w	r6, r3, r3, lsl #4
    1a9a:	4b1a      	ldr	r3, [pc, #104]	; (1b04 <_spi_m_dma_init+0x170>)
    1a9c:	441e      	add	r6, r3
    1a9e:	e783      	b.n	19a8 <_spi_m_dma_init+0x14>
	ASSERT(dev && hw);
    1aa0:	2000      	movs	r0, #0
    1aa2:	e786      	b.n	19b2 <_spi_m_dma_init+0x1e>
    1aa4:	2000      	movs	r0, #0
    1aa6:	e784      	b.n	19b2 <_spi_m_dma_init+0x1e>
	ASSERT(hw && regs);
    1aa8:	2000      	movs	r0, #0
    1aaa:	e7b6      	b.n	1a1a <_spi_m_dma_init+0x86>
    1aac:	2000      	movs	r0, #0
    1aae:	e7b4      	b.n	1a1a <_spi_m_dma_init+0x86>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    1ab0:	4620      	mov	r0, r4
    1ab2:	4b15      	ldr	r3, [pc, #84]	; (1b08 <_spi_m_dma_init+0x174>)
    1ab4:	4798      	blx	r3
    1ab6:	4601      	mov	r1, r0
    1ab8:	f105 001c 	add.w	r0, r5, #28
    1abc:	4b0d      	ldr	r3, [pc, #52]	; (1af4 <_spi_m_dma_init+0x160>)
    1abe:	4798      	blx	r3
		dev->resource->back                 = dev;
    1ac0:	69eb      	ldr	r3, [r5, #28]
    1ac2:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    1ac4:	69eb      	ldr	r3, [r5, #28]
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <_spi_m_dma_init+0x178>)
    1ac8:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    1aca:	69eb      	ldr	r3, [r5, #28]
    1acc:	4a0b      	ldr	r2, [pc, #44]	; (1afc <_spi_m_dma_init+0x168>)
    1ace:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    1ad0:	69eb      	ldr	r3, [r5, #28]
    1ad2:	4a0b      	ldr	r2, [pc, #44]	; (1b00 <_spi_m_dma_init+0x16c>)
    1ad4:	609a      	str	r2, [r3, #8]
    1ad6:	e7c4      	b.n	1a62 <_spi_m_dma_init+0xce>
		return ERR_INVALID_ARG;
    1ad8:	f06f 000c 	mvn.w	r0, #12
}
    1adc:	bd70      	pop	{r4, r5, r6, pc}
    1ade:	bf00      	nop
    1ae0:	000010f9 	.word	0x000010f9
    1ae4:	000030e8 	.word	0x000030e8
    1ae8:	00000c1d 	.word	0x00000c1d
    1aec:	000011c1 	.word	0x000011c1
    1af0:	000011a9 	.word	0x000011a9
    1af4:	00000f99 	.word	0x00000f99
    1af8:	00001215 	.word	0x00001215
    1afc:	00001221 	.word	0x00001221
    1b00:	00001209 	.word	0x00001209
    1b04:	000030d4 	.word	0x000030d4
    1b08:	000011d9 	.word	0x000011d9
    1b0c:	000011fd 	.word	0x000011fd

00001b10 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    1b10:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b12:	4604      	mov	r4, r0
    1b14:	b168      	cbz	r0, 1b32 <_spi_m_dma_enable+0x22>
    1b16:	6803      	ldr	r3, [r0, #0]
    1b18:	b14b      	cbz	r3, 1b2e <_spi_m_dma_enable+0x1e>
    1b1a:	2001      	movs	r0, #1
    1b1c:	f640 42e1 	movw	r2, #3297	; 0xce1
    1b20:	4905      	ldr	r1, [pc, #20]	; (1b38 <_spi_m_dma_enable+0x28>)
    1b22:	4b06      	ldr	r3, [pc, #24]	; (1b3c <_spi_m_dma_enable+0x2c>)
    1b24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1b26:	6820      	ldr	r0, [r4, #0]
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <_spi_m_dma_enable+0x30>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1b2e:	2000      	movs	r0, #0
    1b30:	e7f4      	b.n	1b1c <_spi_m_dma_enable+0xc>
    1b32:	2000      	movs	r0, #0
    1b34:	e7f2      	b.n	1b1c <_spi_m_dma_enable+0xc>
    1b36:	bf00      	nop
    1b38:	000030e8 	.word	0x000030e8
    1b3c:	00000c1d 	.word	0x00000c1d
    1b40:	00001139 	.word	0x00001139

00001b44 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	4605      	mov	r5, r0
    1b48:	4614      	mov	r4, r2
	switch (type) {
    1b4a:	2903      	cmp	r1, #3
    1b4c:	d835      	bhi.n	1bba <_spi_m_dma_register_callback+0x76>
    1b4e:	e8df f001 	tbb	[pc, r1]
    1b52:	0d02      	.short	0x0d02
    1b54:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    1b56:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b58:	6800      	ldr	r0, [r0, #0]
    1b5a:	4b18      	ldr	r3, [pc, #96]	; (1bbc <_spi_m_dma_register_callback+0x78>)
    1b5c:	4798      	blx	r3
    1b5e:	1c22      	adds	r2, r4, #0
    1b60:	bf18      	it	ne
    1b62:	2201      	movne	r2, #1
    1b64:	2100      	movs	r1, #0
    1b66:	4b16      	ldr	r3, [pc, #88]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b68:	4798      	blx	r3
		break;
    1b6a:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    1b6c:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    1b6e:	6800      	ldr	r0, [r0, #0]
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1b72:	4798      	blx	r3
    1b74:	1c22      	adds	r2, r4, #0
    1b76:	bf18      	it	ne
    1b78:	2201      	movne	r2, #1
    1b7a:	2100      	movs	r1, #0
    1b7c:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b7e:	4798      	blx	r3
		break;
    1b80:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    1b82:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b84:	6800      	ldr	r0, [r0, #0]
    1b86:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1b88:	4798      	blx	r3
    1b8a:	3400      	adds	r4, #0
    1b8c:	bf18      	it	ne
    1b8e:	2401      	movne	r4, #1
    1b90:	4622      	mov	r2, r4
    1b92:	2101      	movs	r1, #1
    1b94:	4e0a      	ldr	r6, [pc, #40]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1b96:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    1b98:	6828      	ldr	r0, [r5, #0]
    1b9a:	4b08      	ldr	r3, [pc, #32]	; (1bbc <_spi_m_dma_register_callback+0x78>)
    1b9c:	4798      	blx	r3
    1b9e:	4622      	mov	r2, r4
    1ba0:	2101      	movs	r1, #1
    1ba2:	47b0      	blx	r6
		break;
    1ba4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    1ba6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    1ba8:	6800      	ldr	r0, [r0, #0]
    1baa:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <_spi_m_dma_register_callback+0x80>)
    1bac:	4798      	blx	r3
    1bae:	1c22      	adds	r2, r4, #0
    1bb0:	bf18      	it	ne
    1bb2:	2201      	movne	r2, #1
    1bb4:	2102      	movs	r1, #2
    1bb6:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <_spi_m_dma_register_callback+0x7c>)
    1bb8:	4798      	blx	r3
    1bba:	bd70      	pop	{r4, r5, r6, pc}
    1bbc:	000011a9 	.word	0x000011a9
    1bc0:	00000e4d 	.word	0x00000e4d
    1bc4:	000011d9 	.word	0x000011d9

00001bc8 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    1bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bcc:	4605      	mov	r5, r0
    1bce:	4689      	mov	r9, r1
    1bd0:	4690      	mov	r8, r2
    1bd2:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    1bd4:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1bd6:	4620      	mov	r0, r4
    1bd8:	4b33      	ldr	r3, [pc, #204]	; (1ca8 <_spi_m_dma_transfer+0xe0>)
    1bda:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1bdc:	2300      	movs	r3, #0
    1bde:	2b00      	cmp	r3, #0
    1be0:	d03f      	beq.n	1c62 <_spi_m_dma_transfer+0x9a>
	return NULL;
    1be2:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    1be6:	4620      	mov	r0, r4
    1be8:	4b30      	ldr	r3, [pc, #192]	; (1cac <_spi_m_dma_transfer+0xe4>)
    1bea:	4798      	blx	r3
    1bec:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    1bee:	4620      	mov	r0, r4
    1bf0:	4b2f      	ldr	r3, [pc, #188]	; (1cb0 <_spi_m_dma_transfer+0xe8>)
    1bf2:	4798      	blx	r3
    1bf4:	4604      	mov	r4, r0

	if (rxbuf) {
    1bf6:	f1b8 0f00 	cmp.w	r8, #0
    1bfa:	d03c      	beq.n	1c76 <_spi_m_dma_transfer+0xae>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    1bfc:	4628      	mov	r0, r5
    1bfe:	4b2d      	ldr	r3, [pc, #180]	; (1cb4 <_spi_m_dma_transfer+0xec>)
    1c00:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    1c02:	6828      	ldr	r0, [r5, #0]
    1c04:	4b2c      	ldr	r3, [pc, #176]	; (1cb8 <_spi_m_dma_transfer+0xf0>)
    1c06:	4798      	blx	r3
    1c08:	4601      	mov	r1, r0
    1c0a:	4630      	mov	r0, r6
    1c0c:	4b2b      	ldr	r3, [pc, #172]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c0e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    1c10:	4641      	mov	r1, r8
    1c12:	4630      	mov	r0, r6
    1c14:	4b2a      	ldr	r3, [pc, #168]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c16:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    1c18:	4639      	mov	r1, r7
    1c1a:	4630      	mov	r0, r6
    1c1c:	4b29      	ldr	r3, [pc, #164]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1c1e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    1c20:	2100      	movs	r1, #0
    1c22:	4630      	mov	r0, r6
    1c24:	4b28      	ldr	r3, [pc, #160]	; (1cc8 <_spi_m_dma_transfer+0x100>)
    1c26:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    1c28:	f1b9 0f00 	cmp.w	r9, #0
    1c2c:	d027      	beq.n	1c7e <_spi_m_dma_transfer+0xb6>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    1c2e:	4649      	mov	r1, r9
    1c30:	4620      	mov	r0, r4
    1c32:	4b22      	ldr	r3, [pc, #136]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c34:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c36:	6828      	ldr	r0, [r5, #0]
    1c38:	4b24      	ldr	r3, [pc, #144]	; (1ccc <_spi_m_dma_transfer+0x104>)
    1c3a:	4798      	blx	r3
    1c3c:	4601      	mov	r1, r0
    1c3e:	4620      	mov	r0, r4
    1c40:	4b1f      	ldr	r3, [pc, #124]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c42:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    1c44:	2101      	movs	r1, #1
    1c46:	4620      	mov	r0, r4
    1c48:	4b21      	ldr	r3, [pc, #132]	; (1cd0 <_spi_m_dma_transfer+0x108>)
    1c4a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c4c:	4639      	mov	r1, r7
    1c4e:	4620      	mov	r0, r4
    1c50:	4b1c      	ldr	r3, [pc, #112]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1c52:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    1c54:	2100      	movs	r1, #0
    1c56:	4620      	mov	r0, r4
    1c58:	4b1b      	ldr	r3, [pc, #108]	; (1cc8 <_spi_m_dma_transfer+0x100>)
    1c5a:	4798      	blx	r3

	return ERR_NONE;
}
    1c5c:	2000      	movs	r0, #0
    1c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sercomspi_regs[i].n == n) {
    1c62:	2805      	cmp	r0, #5
    1c64:	d002      	beq.n	1c6c <_spi_m_dma_transfer+0xa4>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c66:	3301      	adds	r3, #1
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	e7b8      	b.n	1bde <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    1c6c:	eb03 1a03 	add.w	sl, r3, r3, lsl #4
    1c70:	4b18      	ldr	r3, [pc, #96]	; (1cd4 <_spi_m_dma_transfer+0x10c>)
    1c72:	449a      	add	sl, r3
    1c74:	e7b7      	b.n	1be6 <_spi_m_dma_transfer+0x1e>
		_spi_m_dma_rx_disable(dev);
    1c76:	4628      	mov	r0, r5
    1c78:	4b17      	ldr	r3, [pc, #92]	; (1cd8 <_spi_m_dma_transfer+0x110>)
    1c7a:	4798      	blx	r3
    1c7c:	e7d4      	b.n	1c28 <_spi_m_dma_transfer+0x60>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    1c7e:	f10a 010e 	add.w	r1, sl, #14
    1c82:	4620      	mov	r0, r4
    1c84:	4b0d      	ldr	r3, [pc, #52]	; (1cbc <_spi_m_dma_transfer+0xf4>)
    1c86:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    1c88:	6828      	ldr	r0, [r5, #0]
    1c8a:	4b10      	ldr	r3, [pc, #64]	; (1ccc <_spi_m_dma_transfer+0x104>)
    1c8c:	4798      	blx	r3
    1c8e:	4601      	mov	r1, r0
    1c90:	4620      	mov	r0, r4
    1c92:	4b0b      	ldr	r3, [pc, #44]	; (1cc0 <_spi_m_dma_transfer+0xf8>)
    1c94:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    1c96:	2100      	movs	r1, #0
    1c98:	4620      	mov	r0, r4
    1c9a:	4b0d      	ldr	r3, [pc, #52]	; (1cd0 <_spi_m_dma_transfer+0x108>)
    1c9c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    1c9e:	4639      	mov	r1, r7
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <_spi_m_dma_transfer+0xfc>)
    1ca4:	4798      	blx	r3
    1ca6:	e7d5      	b.n	1c54 <_spi_m_dma_transfer+0x8c>
    1ca8:	000010f9 	.word	0x000010f9
    1cac:	000011d9 	.word	0x000011d9
    1cb0:	000011a9 	.word	0x000011a9
    1cb4:	000015d5 	.word	0x000015d5
    1cb8:	0000119f 	.word	0x0000119f
    1cbc:	00000ed9 	.word	0x00000ed9
    1cc0:	00000ec9 	.word	0x00000ec9
    1cc4:	00000f05 	.word	0x00000f05
    1cc8:	00000f5d 	.word	0x00000f5d
    1ccc:	000011a3 	.word	0x000011a3
    1cd0:	00000ee9 	.word	0x00000ee9
    1cd4:	000030d4 	.word	0x000030d4
    1cd8:	00001609 	.word	0x00001609

00001cdc <TIMER_1_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1cdc:	4b2f      	ldr	r3, [pc, #188]	; (1d9c <TIMER_1_init+0xc0>)
    1cde:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_1_init()
{

	if (!hri_tc_is_syncing(TC3, TC_SYNCBUSY_SWRST)) {
    1ce0:	f013 0f01 	tst.w	r3, #1
    1ce4:	d120      	bne.n	1d28 <TIMER_1_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ce6:	4b2d      	ldr	r3, [pc, #180]	; (1d9c <TIMER_1_init+0xc0>)
    1ce8:	691b      	ldr	r3, [r3, #16]
    1cea:	f013 0f03 	tst.w	r3, #3
    1cee:	d1fa      	bne.n	1ce6 <TIMER_1_init+0xa>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1cf0:	4b2a      	ldr	r3, [pc, #168]	; (1d9c <TIMER_1_init+0xc0>)
    1cf2:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC3, TC_CTRLA_ENABLE)) {
    1cf4:	f013 0f02 	tst.w	r3, #2
    1cf8:	d00e      	beq.n	1d18 <TIMER_1_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1cfa:	4a28      	ldr	r2, [pc, #160]	; (1d9c <TIMER_1_init+0xc0>)
    1cfc:	6813      	ldr	r3, [r2, #0]
    1cfe:	f023 0302 	bic.w	r3, r3, #2
    1d02:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d04:	4b25      	ldr	r3, [pc, #148]	; (1d9c <TIMER_1_init+0xc0>)
    1d06:	691b      	ldr	r3, [r3, #16]
    1d08:	f013 0f03 	tst.w	r3, #3
    1d0c:	d1fa      	bne.n	1d04 <TIMER_1_init+0x28>
    1d0e:	4b23      	ldr	r3, [pc, #140]	; (1d9c <TIMER_1_init+0xc0>)
    1d10:	691b      	ldr	r3, [r3, #16]
    1d12:	f013 0f02 	tst.w	r3, #2
    1d16:	d1fa      	bne.n	1d0e <TIMER_1_init+0x32>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d18:	2201      	movs	r2, #1
    1d1a:	4b20      	ldr	r3, [pc, #128]	; (1d9c <TIMER_1_init+0xc0>)
    1d1c:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d1e:	4b1f      	ldr	r3, [pc, #124]	; (1d9c <TIMER_1_init+0xc0>)
    1d20:	691b      	ldr	r3, [r3, #16]
    1d22:	f013 0f03 	tst.w	r3, #3
    1d26:	d1fa      	bne.n	1d1e <TIMER_1_init+0x42>
    1d28:	4b1c      	ldr	r3, [pc, #112]	; (1d9c <TIMER_1_init+0xc0>)
    1d2a:	691b      	ldr	r3, [r3, #16]
    1d2c:	f013 0f01 	tst.w	r3, #1
    1d30:	d1fa      	bne.n	1d28 <TIMER_1_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d32:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    1d36:	4b19      	ldr	r3, [pc, #100]	; (1d9c <TIMER_1_init+0xc0>)
    1d38:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d3a:	4b18      	ldr	r3, [pc, #96]	; (1d9c <TIMER_1_init+0xc0>)
    1d3c:	691b      	ldr	r3, [r3, #16]
    1d3e:	f013 0f03 	tst.w	r3, #3
    1d42:	d1fa      	bne.n	1d3a <TIMER_1_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1d44:	4b15      	ldr	r3, [pc, #84]	; (1d9c <TIMER_1_init+0xc0>)
    1d46:	2200      	movs	r2, #0
    1d48:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1d4a:	22ff      	movs	r2, #255	; 0xff
    1d4c:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1d4e:	2201      	movs	r2, #1
    1d50:	731a      	strb	r2, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d52:	f643 5208 	movw	r2, #15624	; 0x3d08
    1d56:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d58:	4b10      	ldr	r3, [pc, #64]	; (1d9c <TIMER_1_init+0xc0>)
    1d5a:	691b      	ldr	r3, [r3, #16]
    1d5c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d60:	d1fa      	bne.n	1d58 <TIMER_1_init+0x7c>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d62:	f641 0269 	movw	r2, #6249	; 0x1869
    1d66:	4b0d      	ldr	r3, [pc, #52]	; (1d9c <TIMER_1_init+0xc0>)
    1d68:	83da      	strh	r2, [r3, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d6a:	4b0c      	ldr	r3, [pc, #48]	; (1d9c <TIMER_1_init+0xc0>)
    1d6c:	691b      	ldr	r3, [r3, #16]
    1d6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d72:	d1fa      	bne.n	1d6a <TIMER_1_init+0x8e>
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1d74:	4b09      	ldr	r3, [pc, #36]	; (1d9c <TIMER_1_init+0xc0>)
    1d76:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d7a:	80da      	strh	r2, [r3, #6]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1d7c:	2221      	movs	r2, #33	; 0x21
    1d7e:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1d80:	22de      	movs	r2, #222	; 0xde
    1d82:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d84:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1d86:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1d8a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <TIMER_1_init+0xc0>)
    1d8e:	691b      	ldr	r3, [r3, #16]
    1d90:	f013 0f03 	tst.w	r3, #3
    1d94:	d1fa      	bne.n	1d8c <TIMER_1_init+0xb0>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC3, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1d96:	2000      	movs	r0, #0
    1d98:	4770      	bx	lr
    1d9a:	bf00      	nop
    1d9c:	4101c000 	.word	0x4101c000

00001da0 <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1da0:	4b29      	ldr	r3, [pc, #164]	; (1e48 <TIMER_0_init+0xa8>)
    1da2:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    1da4:	f013 0f01 	tst.w	r3, #1
    1da8:	d120      	bne.n	1dec <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1daa:	4b27      	ldr	r3, [pc, #156]	; (1e48 <TIMER_0_init+0xa8>)
    1dac:	691b      	ldr	r3, [r3, #16]
    1dae:	f013 0f03 	tst.w	r3, #3
    1db2:	d1fa      	bne.n	1daa <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1db4:	4b24      	ldr	r3, [pc, #144]	; (1e48 <TIMER_0_init+0xa8>)
    1db6:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    1db8:	f013 0f02 	tst.w	r3, #2
    1dbc:	d00e      	beq.n	1ddc <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1dbe:	4a22      	ldr	r2, [pc, #136]	; (1e48 <TIMER_0_init+0xa8>)
    1dc0:	6813      	ldr	r3, [r2, #0]
    1dc2:	f023 0302 	bic.w	r3, r3, #2
    1dc6:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dc8:	4b1f      	ldr	r3, [pc, #124]	; (1e48 <TIMER_0_init+0xa8>)
    1dca:	691b      	ldr	r3, [r3, #16]
    1dcc:	f013 0f03 	tst.w	r3, #3
    1dd0:	d1fa      	bne.n	1dc8 <TIMER_0_init+0x28>
    1dd2:	4b1d      	ldr	r3, [pc, #116]	; (1e48 <TIMER_0_init+0xa8>)
    1dd4:	691b      	ldr	r3, [r3, #16]
    1dd6:	f013 0f02 	tst.w	r3, #2
    1dda:	d1fa      	bne.n	1dd2 <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1ddc:	2201      	movs	r2, #1
    1dde:	4b1a      	ldr	r3, [pc, #104]	; (1e48 <TIMER_0_init+0xa8>)
    1de0:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <TIMER_0_init+0xa8>)
    1de4:	691b      	ldr	r3, [r3, #16]
    1de6:	f013 0f03 	tst.w	r3, #3
    1dea:	d1fa      	bne.n	1de2 <TIMER_0_init+0x42>
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <TIMER_0_init+0xa8>)
    1dee:	691b      	ldr	r3, [r3, #16]
    1df0:	f013 0f01 	tst.w	r3, #1
    1df4:	d1fa      	bne.n	1dec <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1dfa:	4b13      	ldr	r3, [pc, #76]	; (1e48 <TIMER_0_init+0xa8>)
    1dfc:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dfe:	4b12      	ldr	r3, [pc, #72]	; (1e48 <TIMER_0_init+0xa8>)
    1e00:	691b      	ldr	r3, [r3, #16]
    1e02:	f013 0f03 	tst.w	r3, #3
    1e06:	d1fa      	bne.n	1dfe <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    1e08:	4b0f      	ldr	r3, [pc, #60]	; (1e48 <TIMER_0_init+0xa8>)
    1e0a:	2200      	movs	r2, #0
    1e0c:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    1e0e:	22ff      	movs	r2, #255	; 0xff
    1e10:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e12:	2201      	movs	r2, #1
    1e14:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e16:	f641 0269 	movw	r2, #6249	; 0x1869
    1e1a:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e1c:	4b0a      	ldr	r3, [pc, #40]	; (1e48 <TIMER_0_init+0xa8>)
    1e1e:	691b      	ldr	r3, [r3, #16]
    1e20:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e24:	d1fa      	bne.n	1e1c <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    1e26:	4b08      	ldr	r3, [pc, #32]	; (1e48 <TIMER_0_init+0xa8>)
    1e28:	2201      	movs	r2, #1
    1e2a:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    1e2c:	22fe      	movs	r2, #254	; 0xfe
    1e2e:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1e30:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1e32:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1e36:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <TIMER_0_init+0xa8>)
    1e3a:	691b      	ldr	r3, [r3, #16]
    1e3c:	f013 0f03 	tst.w	r3, #3
    1e40:	d1fa      	bne.n	1e38 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1e42:	2000      	movs	r0, #0
    1e44:	4770      	bx	lr
    1e46:	bf00      	nop
    1e48:	43001800 	.word	0x43001800

00001e4c <SensorRowUpdate>:
};
*/

void SensorRowUpdate(uint8_t row_select)
{
	switch(row_select){
    1e4c:	2802      	cmp	r0, #2
    1e4e:	d020      	beq.n	1e92 <SensorRowUpdate+0x46>
    1e50:	2803      	cmp	r0, #3
    1e52:	d03a      	beq.n	1eca <SensorRowUpdate+0x7e>
    1e54:	2801      	cmp	r0, #1
    1e56:	d000      	beq.n	1e5a <SensorRowUpdate+0xe>
    1e58:	4770      	bx	lr
		case 1: ;
			//BLDC_OUT->hall_bottom_x = BLDC_OUT->hall_bottom_x +1; //data1,2,3
			BLDC_OUT->hall_bottom_x = sensor1.data.x; //data1,2,3
    1e5a:	4929      	ldr	r1, [pc, #164]	; (1f00 <SensorRowUpdate+0xb4>)
    1e5c:	680b      	ldr	r3, [r1, #0]
    1e5e:	4a29      	ldr	r2, [pc, #164]	; (1f04 <SensorRowUpdate+0xb8>)
    1e60:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1e62:	62d8      	str	r0, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor1.data.y;
    1e64:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1e66:	6318      	str	r0, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor1.data.z;
    1e68:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1e6a:	635a      	str	r2, [r3, #52]	; 0x34
	
			BLDC_OUT->hall_middle_x = sensor4.data.x; //data4,5,6
    1e6c:	4a26      	ldr	r2, [pc, #152]	; (1f08 <SensorRowUpdate+0xbc>)
    1e6e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1e70:	6158      	str	r0, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor4.data.y;
    1e72:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1e74:	6198      	str	r0, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor4.data.z;
    1e76:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1e78:	61da      	str	r2, [r3, #28]
			
			BLDC_OUT->hall_top_x = sensor7.data.x; //data7,8,9
    1e7a:	4a24      	ldr	r2, [pc, #144]	; (1f0c <SensorRowUpdate+0xc0>)
    1e7c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1e7e:	6018      	str	r0, [r3, #0]
			BLDC_OUT->hall_top_y = sensor7.data.y;
    1e80:	680b      	ldr	r3, [r1, #0]
    1e82:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1e84:	6059      	str	r1, [r3, #4]
			BLDC_OUT->hall_top_z = sensor7.data.z;
    1e86:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1e88:	609a      	str	r2, [r3, #8]
			
			//mag_to_force(&sensorRow_Values_1, &sensor1, &sensor4, &sensor7);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 1;
    1e8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1e8e:	621a      	str	r2, [r3, #32]
			break;
    1e90:	4770      	bx	lr
		
		case 2: ;
			BLDC_OUT->hall_bottom_x = sensor2.data.x; //data1,2,3
    1e92:	491b      	ldr	r1, [pc, #108]	; (1f00 <SensorRowUpdate+0xb4>)
    1e94:	680b      	ldr	r3, [r1, #0]
    1e96:	4a1e      	ldr	r2, [pc, #120]	; (1f10 <SensorRowUpdate+0xc4>)
    1e98:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1e9a:	62d8      	str	r0, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor2.data.y;
    1e9c:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1e9e:	6318      	str	r0, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor2.data.z;
    1ea0:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1ea2:	635a      	str	r2, [r3, #52]	; 0x34
			
			BLDC_OUT->hall_middle_x = sensor5.data.x; //data4,5,6
    1ea4:	4a1b      	ldr	r2, [pc, #108]	; (1f14 <SensorRowUpdate+0xc8>)
    1ea6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1ea8:	6158      	str	r0, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor5.data.y;
    1eaa:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1eac:	6198      	str	r0, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor5.data.z;
    1eae:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1eb0:	61da      	str	r2, [r3, #28]
			
			BLDC_OUT->hall_top_x = sensor8.data.x; //data7,8,9
    1eb2:	4a19      	ldr	r2, [pc, #100]	; (1f18 <SensorRowUpdate+0xcc>)
    1eb4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1eb6:	6018      	str	r0, [r3, #0]
			BLDC_OUT->hall_top_y = sensor8.data.y;
    1eb8:	680b      	ldr	r3, [r1, #0]
    1eba:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1ebc:	6059      	str	r1, [r3, #4]
			BLDC_OUT->hall_top_z = sensor8.data.z;
    1ebe:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1ec0:	609a      	str	r2, [r3, #8]
		
			//mag_to_force(&sensorRow_Values_1, &sensor2, &sensor5, &sensor8);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 2;
    1ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ec6:	621a      	str	r2, [r3, #32]
			break;
    1ec8:	4770      	bx	lr
			
		case 3: ;
			BLDC_OUT->hall_bottom_x = sensor3.data.x; //data1,2,3
    1eca:	490d      	ldr	r1, [pc, #52]	; (1f00 <SensorRowUpdate+0xb4>)
    1ecc:	680b      	ldr	r3, [r1, #0]
    1ece:	4a13      	ldr	r2, [pc, #76]	; (1f1c <SensorRowUpdate+0xd0>)
    1ed0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1ed2:	62d8      	str	r0, [r3, #44]	; 0x2c
			BLDC_OUT->hall_bottom_y = sensor3.data.y;
    1ed4:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1ed6:	6318      	str	r0, [r3, #48]	; 0x30
			BLDC_OUT->hall_bottom_z = sensor3.data.z;
    1ed8:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1eda:	635a      	str	r2, [r3, #52]	; 0x34
			
			BLDC_OUT->hall_middle_x = sensor6.data.x; //data4,5,6
    1edc:	4a10      	ldr	r2, [pc, #64]	; (1f20 <SensorRowUpdate+0xd4>)
    1ede:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1ee0:	6158      	str	r0, [r3, #20]
			BLDC_OUT->hall_middle_y = sensor6.data.y;
    1ee2:	6d10      	ldr	r0, [r2, #80]	; 0x50
    1ee4:	6198      	str	r0, [r3, #24]
			BLDC_OUT->hall_middle_z = sensor6.data.z;
    1ee6:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1ee8:	61da      	str	r2, [r3, #28]
			
			BLDC_OUT->hall_top_x = sensor9.data.x; //data7,8,9
    1eea:	4a0e      	ldr	r2, [pc, #56]	; (1f24 <SensorRowUpdate+0xd8>)
    1eec:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    1eee:	6018      	str	r0, [r3, #0]
			BLDC_OUT->hall_top_y = sensor9.data.y;
    1ef0:	680b      	ldr	r3, [r1, #0]
    1ef2:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1ef4:	6059      	str	r1, [r3, #4]
			BLDC_OUT->hall_top_z = sensor9.data.z;
    1ef6:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1ef8:	609a      	str	r2, [r3, #8]
			
			//mag_to_force(&sensorRow_Values_1, &sensor3, &sensor6, &sensor9);
			//neuron_calc(&sensorRow_Values_1,&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);
			
			BLDC_OUT->hall_middle_temp = 3;
    1efa:	4a0b      	ldr	r2, [pc, #44]	; (1f28 <SensorRowUpdate+0xdc>)
    1efc:	621a      	str	r2, [r3, #32]
			break;
		}
};
    1efe:	e7ab      	b.n	1e58 <SensorRowUpdate+0xc>
    1f00:	20000074 	.word	0x20000074
    1f04:	20000cd8 	.word	0x20000cd8
    1f08:	20000c80 	.word	0x20000c80
    1f0c:	200009fc 	.word	0x200009fc
    1f10:	20000dd4 	.word	0x20000dd4
    1f14:	20000c28 	.word	0x20000c28
    1f18:	20000d7c 	.word	0x20000d7c
    1f1c:	20000b70 	.word	0x20000b70
    1f20:	20000b18 	.word	0x20000b18
    1f24:	20000bcc 	.word	0x20000bcc
    1f28:	40400000 	.word	0x40400000

00001f2c <main>:


int main(void)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b086      	sub	sp, #24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1f30:	4b37      	ldr	r3, [pc, #220]	; (2010 <main+0xe4>)
    1f32:	4798      	blx	r3
	configure_ethercat_dma_descriptors();
    1f34:	4b37      	ldr	r3, [pc, #220]	; (2014 <main+0xe8>)
    1f36:	4798      	blx	r3
	
	//Initialize I2C communication
	i2c_m_sync_get_io_descriptor(&I2C_0, &bmx_io);
    1f38:	4e37      	ldr	r6, [pc, #220]	; (2018 <main+0xec>)
    1f3a:	4c38      	ldr	r4, [pc, #224]	; (201c <main+0xf0>)
    1f3c:	4631      	mov	r1, r6
    1f3e:	4620      	mov	r0, r4
    1f40:	4b37      	ldr	r3, [pc, #220]	; (2020 <main+0xf4>)
    1f42:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    1f44:	4620      	mov	r0, r4
    1f46:	4b37      	ldr	r3, [pc, #220]	; (2024 <main+0xf8>)
    1f48:	4798      	blx	r3
    1f4a:	4c37      	ldr	r4, [pc, #220]	; (2028 <main+0xfc>)
    1f4c:	2540      	movs	r5, #64	; 0x40
    1f4e:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f50:	61a5      	str	r5, [r4, #24]
	// for testing purposes
	gpio_set_pin_level(TRG,false);
	gpio_set_pin_level(TRG,true);
	
	// Initialize Sensor Array
	SensorArray_Init(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    1f52:	6833      	ldr	r3, [r6, #0]
    1f54:	9305      	str	r3, [sp, #20]
    1f56:	4e35      	ldr	r6, [pc, #212]	; (202c <main+0x100>)
    1f58:	9604      	str	r6, [sp, #16]
    1f5a:	4b35      	ldr	r3, [pc, #212]	; (2030 <main+0x104>)
    1f5c:	9303      	str	r3, [sp, #12]
    1f5e:	4b35      	ldr	r3, [pc, #212]	; (2034 <main+0x108>)
    1f60:	9302      	str	r3, [sp, #8]
    1f62:	4b35      	ldr	r3, [pc, #212]	; (2038 <main+0x10c>)
    1f64:	9301      	str	r3, [sp, #4]
    1f66:	4b35      	ldr	r3, [pc, #212]	; (203c <main+0x110>)
    1f68:	9300      	str	r3, [sp, #0]
    1f6a:	4b35      	ldr	r3, [pc, #212]	; (2040 <main+0x114>)
    1f6c:	4a35      	ldr	r2, [pc, #212]	; (2044 <main+0x118>)
    1f6e:	4936      	ldr	r1, [pc, #216]	; (2048 <main+0x11c>)
    1f70:	4836      	ldr	r0, [pc, #216]	; (204c <main+0x120>)
    1f72:	4f37      	ldr	r7, [pc, #220]	; (2050 <main+0x124>)
    1f74:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f76:	6165      	str	r5, [r4, #20]
	//neuron_init(&neuron1_normal,&neuron1_shear,&neuron2_normal,&neuron2_shear, &neuron3_normal,&neuron3_shear);

	gpio_set_pin_level(TRG,false);
	
	//Initialize ReadoutVariables
	new_data = false;
    1f78:	2300      	movs	r3, #0
    1f7a:	4a36      	ldr	r2, [pc, #216]	; (2054 <main+0x128>)
    1f7c:	7013      	strb	r3, [r2, #0]
	triggered = false;
    1f7e:	4a36      	ldr	r2, [pc, #216]	; (2058 <main+0x12c>)
    1f80:	7013      	strb	r3, [r2, #0]
	data_readout = false;
    1f82:	4a36      	ldr	r2, [pc, #216]	; (205c <main+0x130>)
    1f84:	7013      	strb	r3, [r2, #0]
	wait_time = convDelayMicro(&sensor9);
    1f86:	4630      	mov	r0, r6
    1f88:	4b35      	ldr	r3, [pc, #212]	; (2060 <main+0x134>)
    1f8a:	4798      	blx	r3
    1f8c:	4b35      	ldr	r3, [pc, #212]	; (2064 <main+0x138>)
    1f8e:	8018      	strh	r0, [r3, #0]
    1f90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f94:	4b34      	ldr	r3, [pc, #208]	; (2068 <main+0x13c>)
    1f96:	60da      	str	r2, [r3, #12]
	//TIMER_init(wait_time);
	NVIC_EnableIRQ(TC3_IRQn);
	selected_row = 2; //1 = left, 2 = middle, 3 = right
    1f98:	2202      	movs	r2, #2
    1f9a:	4b34      	ldr	r3, [pc, #208]	; (206c <main+0x140>)
    1f9c:	701a      	strb	r2, [r3, #0]
	
	/* Replace with your application code */
	while (1) {
		
		if (triggered == false)	{
    1f9e:	4b2e      	ldr	r3, [pc, #184]	; (2058 <main+0x12c>)
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d025      	beq.n	1ff2 <main+0xc6>
			//triggerReadout_Prepare_Timer(50);
	//		timer_start(&TIMER_1);
			triggered = true;
			data_readout = false;
		}
		if(new_data == true && data_readout == false){	
    1fa6:	4b2b      	ldr	r3, [pc, #172]	; (2054 <main+0x128>)
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d0f7      	beq.n	1f9e <main+0x72>
    1fae:	4b2b      	ldr	r3, [pc, #172]	; (205c <main+0x130>)
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d1f3      	bne.n	1f9e <main+0x72>
			triggerReadoutArray(&sensor1,&sensor2,&sensor3,&sensor4,&sensor5,&sensor6,&sensor7,&sensor8,&sensor9,bmx_io);
    1fb6:	4b18      	ldr	r3, [pc, #96]	; (2018 <main+0xec>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	9305      	str	r3, [sp, #20]
    1fbc:	4b1b      	ldr	r3, [pc, #108]	; (202c <main+0x100>)
    1fbe:	9304      	str	r3, [sp, #16]
    1fc0:	4b1b      	ldr	r3, [pc, #108]	; (2030 <main+0x104>)
    1fc2:	9303      	str	r3, [sp, #12]
    1fc4:	4b1b      	ldr	r3, [pc, #108]	; (2034 <main+0x108>)
    1fc6:	9302      	str	r3, [sp, #8]
    1fc8:	4b1b      	ldr	r3, [pc, #108]	; (2038 <main+0x10c>)
    1fca:	9301      	str	r3, [sp, #4]
    1fcc:	4b1b      	ldr	r3, [pc, #108]	; (203c <main+0x110>)
    1fce:	9300      	str	r3, [sp, #0]
    1fd0:	4b1b      	ldr	r3, [pc, #108]	; (2040 <main+0x114>)
    1fd2:	4a1c      	ldr	r2, [pc, #112]	; (2044 <main+0x118>)
    1fd4:	491c      	ldr	r1, [pc, #112]	; (2048 <main+0x11c>)
    1fd6:	481d      	ldr	r0, [pc, #116]	; (204c <main+0x120>)
    1fd8:	4c25      	ldr	r4, [pc, #148]	; (2070 <main+0x144>)
    1fda:	47a0      	blx	r4
			SensorRowUpdate(selected_row);
    1fdc:	4b23      	ldr	r3, [pc, #140]	; (206c <main+0x140>)
    1fde:	7818      	ldrb	r0, [r3, #0]
    1fe0:	4b24      	ldr	r3, [pc, #144]	; (2074 <main+0x148>)
    1fe2:	4798      	blx	r3
			new_data = false; 
    1fe4:	2200      	movs	r2, #0
    1fe6:	4b1b      	ldr	r3, [pc, #108]	; (2054 <main+0x128>)
    1fe8:	701a      	strb	r2, [r3, #0]
			data_readout = true;
    1fea:	2201      	movs	r2, #1
    1fec:	4b1b      	ldr	r3, [pc, #108]	; (205c <main+0x130>)
    1fee:	701a      	strb	r2, [r3, #0]
    1ff0:	e7d5      	b.n	1f9e <main+0x72>
			BLDC_OUT->hall_middle_temp = 0;
    1ff2:	4b21      	ldr	r3, [pc, #132]	; (2078 <main+0x14c>)
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	2200      	movs	r2, #0
    1ff8:	621a      	str	r2, [r3, #32]
			triggerSensor(50);
    1ffa:	2032      	movs	r0, #50	; 0x32
    1ffc:	4b1f      	ldr	r3, [pc, #124]	; (207c <main+0x150>)
    1ffe:	4798      	blx	r3
			triggered = true;
    2000:	2201      	movs	r2, #1
    2002:	4b15      	ldr	r3, [pc, #84]	; (2058 <main+0x12c>)
    2004:	701a      	strb	r2, [r3, #0]
			data_readout = false;
    2006:	2200      	movs	r2, #0
    2008:	4b14      	ldr	r3, [pc, #80]	; (205c <main+0x130>)
    200a:	701a      	strb	r2, [r3, #0]
    200c:	e7cb      	b.n	1fa6 <main+0x7a>
    200e:	bf00      	nop
    2010:	000002d1 	.word	0x000002d1
    2014:	000007ad 	.word	0x000007ad
    2018:	20000a54 	.word	0x20000a54
    201c:	20000340 	.word	0x20000340
    2020:	00000aa1 	.word	0x00000aa1
    2024:	00000a85 	.word	0x00000a85
    2028:	41008000 	.word	0x41008000
    202c:	20000bcc 	.word	0x20000bcc
    2030:	20000d7c 	.word	0x20000d7c
    2034:	200009fc 	.word	0x200009fc
    2038:	20000b18 	.word	0x20000b18
    203c:	20000c28 	.word	0x20000c28
    2040:	20000c80 	.word	0x20000c80
    2044:	20000b70 	.word	0x20000b70
    2048:	20000dd4 	.word	0x20000dd4
    204c:	20000cd8 	.word	0x20000cd8
    2050:	00002dc9 	.word	0x00002dc9
    2054:	200009f8 	.word	0x200009f8
    2058:	20000c24 	.word	0x20000c24
    205c:	20000aa5 	.word	0x20000aa5
    2060:	00002859 	.word	0x00002859
    2064:	20000bc8 	.word	0x20000bc8
    2068:	e000e100 	.word	0xe000e100
    206c:	200009a8 	.word	0x200009a8
    2070:	00002d1d 	.word	0x00002d1d
    2074:	00001e4d 	.word	0x00001e4d
    2078:	20000074 	.word	0x20000074
    207c:	00002cdd 	.word	0x00002cdd

00002080 <TC3_Handler>:
	}
}

void TC3_Handler(void){
	
	if (TC3->COUNT16.INTFLAG.bit.OVF){
    2080:	4b0d      	ldr	r3, [pc, #52]	; (20b8 <TC3_Handler+0x38>)
    2082:	7a9b      	ldrb	r3, [r3, #10]
    2084:	f013 0f01 	tst.w	r3, #1
    2088:	d10d      	bne.n	20a6 <TC3_Handler+0x26>
		TC3->COUNT16.INTFLAG.bit.OVF =1;
		triggered = false;
	}
	else if (TC3->COUNT16.INTFLAG.bit.MC1){
    208a:	4b0b      	ldr	r3, [pc, #44]	; (20b8 <TC3_Handler+0x38>)
    208c:	7a9b      	ldrb	r3, [r3, #10]
    208e:	f013 0f20 	tst.w	r3, #32
    2092:	d007      	beq.n	20a4 <TC3_Handler+0x24>
		TC3->COUNT16.INTFLAG.bit.MC1 =1;
    2094:	4a08      	ldr	r2, [pc, #32]	; (20b8 <TC3_Handler+0x38>)
    2096:	7a93      	ldrb	r3, [r2, #10]
    2098:	f043 0320 	orr.w	r3, r3, #32
    209c:	7293      	strb	r3, [r2, #10]
		new_data = true;
    209e:	2201      	movs	r2, #1
    20a0:	4b06      	ldr	r3, [pc, #24]	; (20bc <TC3_Handler+0x3c>)
    20a2:	701a      	strb	r2, [r3, #0]
    20a4:	4770      	bx	lr
		TC3->COUNT16.INTFLAG.bit.OVF =1;
    20a6:	4a04      	ldr	r2, [pc, #16]	; (20b8 <TC3_Handler+0x38>)
    20a8:	7a93      	ldrb	r3, [r2, #10]
    20aa:	f043 0301 	orr.w	r3, r3, #1
    20ae:	7293      	strb	r3, [r2, #10]
		triggered = false;
    20b0:	2200      	movs	r2, #0
    20b2:	4b03      	ldr	r3, [pc, #12]	; (20c0 <TC3_Handler+0x40>)
    20b4:	701a      	strb	r2, [r3, #0]
    20b6:	4770      	bx	lr
    20b8:	4101c000 	.word	0x4101c000
    20bc:	200009f8 	.word	0x200009f8
    20c0:	20000c24 	.word	0x20000c24

000020c4 <select_prefix>:
 
}

uint8_t select_prefix(struct MLX90393 *hall_sensor, int order_code_last_digit)
{
    switch(order_code_last_digit){
    20c4:	3901      	subs	r1, #1
    20c6:	2903      	cmp	r1, #3
    20c8:	d805      	bhi.n	20d6 <select_prefix+0x12>
    20ca:	e8df f001 	tbb	[pc, r1]
    20ce:	0602      	.short	0x0602
    20d0:	0c09      	.short	0x0c09
        case 1: 
          hall_sensor->I2C_prefix = I2C_PREFIX_011 << 2;
    20d2:	230c      	movs	r3, #12
    20d4:	7043      	strb	r3, [r0, #1]
        case 4: 
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
          break;//I2C_PREFIX_014 << 1;
    }
    return hall_sensor->I2C_prefix;
}
    20d6:	7840      	ldrb	r0, [r0, #1]
    20d8:	4770      	bx	lr
          hall_sensor->I2C_prefix = I2C_PREFIX_012 << 2;
    20da:	2310      	movs	r3, #16
    20dc:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_012 << 2;
    20de:	e7fa      	b.n	20d6 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_013 << 2;
    20e0:	2314      	movs	r3, #20
    20e2:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_013 << 1;
    20e4:	e7f7      	b.n	20d6 <select_prefix+0x12>
          hall_sensor->I2C_prefix = I2C_PREFIX_014 << 2;
    20e6:	2318      	movs	r3, #24
    20e8:	7043      	strb	r3, [r0, #1]
          break;//I2C_PREFIX_014 << 1;
    20ea:	e7f4      	b.n	20d6 <select_prefix+0x12>

000020ec <i2c_m_sync_cmd_write_easy>:
  }
  return status;
}

int32_t i2c_m_sync_cmd_write_easy(struct io_descriptor *io, const uint8_t cmd, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	b083      	sub	sp, #12
    20f0:	4606      	mov	r6, r0
    20f2:	4617      	mov	r7, r2
    20f4:	461d      	mov	r5, r3
	int32_t ret;
	
	uint8_t buffer_write[1] = {cmd}; 
    20f6:	ab02      	add	r3, sp, #8
    20f8:	f803 1d04 	strb.w	r1, [r3, #-4]!
	ret = io_write(io, (uint8_t *)buffer_write, 1);
    20fc:	2201      	movs	r2, #1
    20fe:	4619      	mov	r1, r3
    2100:	4b0a      	ldr	r3, [pc, #40]	; (212c <i2c_m_sync_cmd_write_easy+0x40>)
    2102:	4798      	blx	r3
	if (ret != 1) {return -1;}
    2104:	2801      	cmp	r0, #1
    2106:	d10d      	bne.n	2124 <i2c_m_sync_cmd_write_easy+0x38>
    2108:	4604      	mov	r4, r0
	
	ret = io_read(io, (uint8_t *)buf_answer,length_answer);
    210a:	462a      	mov	r2, r5
    210c:	4639      	mov	r1, r7
    210e:	4630      	mov	r0, r6
    2110:	4b07      	ldr	r3, [pc, #28]	; (2130 <i2c_m_sync_cmd_write_easy+0x44>)
    2112:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    2114:	42a8      	cmp	r0, r5
    2116:	d102      	bne.n	211e <i2c_m_sync_cmd_write_easy+0x32>
		
	return 1;
}
    2118:	4620      	mov	r0, r4
    211a:	b003      	add	sp, #12
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ret != length_answer) {return -1;}
    211e:	f04f 34ff 	mov.w	r4, #4294967295
    2122:	e7f9      	b.n	2118 <i2c_m_sync_cmd_write_easy+0x2c>
	if (ret != 1) {return -1;}
    2124:	f04f 34ff 	mov.w	r4, #4294967295
    2128:	e7f6      	b.n	2118 <i2c_m_sync_cmd_write_easy+0x2c>
    212a:	bf00      	nop
    212c:	00000aa9 	.word	0x00000aa9
    2130:	00000add 	.word	0x00000add

00002134 <sendCommand>:
{
    2134:	b530      	push	{r4, r5, lr}
    2136:	b083      	sub	sp, #12
    2138:	460d      	mov	r5, r1
    213a:	4614      	mov	r4, r2
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    213c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2140:	7801      	ldrb	r1, [r0, #0]
    2142:	4808      	ldr	r0, [pc, #32]	; (2164 <sendCommand+0x30>)
    2144:	4b08      	ldr	r3, [pc, #32]	; (2168 <sendCommand+0x34>)
    2146:	4798      	blx	r3
  ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer_answer, (uint16_t) 1);
    2148:	2301      	movs	r3, #1
    214a:	aa01      	add	r2, sp, #4
    214c:	4629      	mov	r1, r5
    214e:	4620      	mov	r0, r4
    2150:	4c06      	ldr	r4, [pc, #24]	; (216c <sendCommand+0x38>)
    2152:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    2154:	2800      	cmp	r0, #0
    2156:	dd03      	ble.n	2160 <sendCommand+0x2c>
  return buffer_answer[0];
    2158:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    215c:	b003      	add	sp, #12
    215e:	bd30      	pop	{r4, r5, pc}
  if (ret < 1) {return STATUS_ERROR;}
    2160:	20ff      	movs	r0, #255	; 0xff
    2162:	e7fb      	b.n	215c <sendCommand+0x28>
    2164:	20000340 	.word	0x20000340
    2168:	00000a91 	.word	0x00000a91
    216c:	000020ed 	.word	0x000020ed

00002170 <i2c_m_sync_reg_read_easy>:

int32_t i2c_m_sync_reg_read_easy(struct io_descriptor *io, uint8_t cmd, uint8_t reg, const uint8_t *const buf_answer, const uint16_t length_answer)
{
    2170:	b570      	push	{r4, r5, r6, lr}
    2172:	b082      	sub	sp, #8
    2174:	4605      	mov	r5, r0
    2176:	461e      	mov	r6, r3
    2178:	f8bd 4018 	ldrh.w	r4, [sp, #24]
	int32_t ret;
	uint8_t buffer_write[2] = {0};
	buffer_write[0] = cmd;
    217c:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1]	= reg;
    2180:	f88d 2005 	strb.w	r2, [sp, #5]
		
	ret = io_write(io, (uint8_t *)buffer_write, 2);
    2184:	2202      	movs	r2, #2
    2186:	a901      	add	r1, sp, #4
    2188:	4b09      	ldr	r3, [pc, #36]	; (21b0 <i2c_m_sync_reg_read_easy+0x40>)
    218a:	4798      	blx	r3
	if (ret != 2) {return -1;}
    218c:	2802      	cmp	r0, #2
    218e:	d10c      	bne.n	21aa <i2c_m_sync_reg_read_easy+0x3a>

	ret = io_read(io, (uint8_t *) buf_answer,length_answer);
    2190:	4622      	mov	r2, r4
    2192:	4631      	mov	r1, r6
    2194:	4628      	mov	r0, r5
    2196:	4b07      	ldr	r3, [pc, #28]	; (21b4 <i2c_m_sync_reg_read_easy+0x44>)
    2198:	4798      	blx	r3
	if (ret != length_answer) {return -1;}
    219a:	42a0      	cmp	r0, r4
    219c:	d102      	bne.n	21a4 <i2c_m_sync_reg_read_easy+0x34>
	
	return 1;
    219e:	2001      	movs	r0, #1
}
    21a0:	b002      	add	sp, #8
    21a2:	bd70      	pop	{r4, r5, r6, pc}
	if (ret != length_answer) {return -1;}
    21a4:	f04f 30ff 	mov.w	r0, #4294967295
    21a8:	e7fa      	b.n	21a0 <i2c_m_sync_reg_read_easy+0x30>
	if (ret != 2) {return -1;}
    21aa:	f04f 30ff 	mov.w	r0, #4294967295
    21ae:	e7f7      	b.n	21a0 <i2c_m_sync_reg_read_easy+0x30>
    21b0:	00000aa9 	.word	0x00000aa9
    21b4:	00000add 	.word	0x00000add

000021b8 <i2c_m_sync_reg_write_easy>:

int32_t i2c_m_sync_reg_write_easy(struct io_descriptor *io, uint8_t cmd, uint16_t data, uint8_t reg, const uint8_t *const buf_answer)
{
    21b8:	b510      	push	{r4, lr}
    21ba:	b082      	sub	sp, #8
    21bc:	4604      	mov	r4, r0
	int32_t ret;

	uint8_t buffer_write[4] = {0};
	buffer_write[0] = cmd;
    21be:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer_write[1] = (data & 0xff00) >> 8;
    21c2:	0a11      	lsrs	r1, r2, #8
    21c4:	f88d 1005 	strb.w	r1, [sp, #5]
	buffer_write[2] = data & 0x00ff;
    21c8:	f88d 2006 	strb.w	r2, [sp, #6]
	buffer_write[3] = reg;
    21cc:	f88d 3007 	strb.w	r3, [sp, #7]
	
	ret = io_write(io, (uint8_t *)buffer_write, 4);
    21d0:	2204      	movs	r2, #4
    21d2:	eb0d 0102 	add.w	r1, sp, r2
    21d6:	4b09      	ldr	r3, [pc, #36]	; (21fc <i2c_m_sync_reg_write_easy+0x44>)
    21d8:	4798      	blx	r3
	if (ret != 4) {return -1;}
    21da:	2804      	cmp	r0, #4
    21dc:	d10b      	bne.n	21f6 <i2c_m_sync_reg_write_easy+0x3e>
		
	ret = io_read(io, (uint8_t *)buf_answer,1);
    21de:	2201      	movs	r2, #1
    21e0:	9904      	ldr	r1, [sp, #16]
    21e2:	4620      	mov	r0, r4
    21e4:	4b06      	ldr	r3, [pc, #24]	; (2200 <i2c_m_sync_reg_write_easy+0x48>)
    21e6:	4798      	blx	r3
	if (ret != 1) {return -1;}
    21e8:	2801      	cmp	r0, #1
    21ea:	d101      	bne.n	21f0 <i2c_m_sync_reg_write_easy+0x38>
	
	return 1;
		
}
    21ec:	b002      	add	sp, #8
    21ee:	bd10      	pop	{r4, pc}
	if (ret != 1) {return -1;}
    21f0:	f04f 30ff 	mov.w	r0, #4294967295
    21f4:	e7fa      	b.n	21ec <i2c_m_sync_reg_write_easy+0x34>
	if (ret != 4) {return -1;}
    21f6:	f04f 30ff 	mov.w	r0, #4294967295
    21fa:	e7f7      	b.n	21ec <i2c_m_sync_reg_write_easy+0x34>
    21fc:	00000aa9 	.word	0x00000aa9
    2200:	00000add 	.word	0x00000add

00002204 <cache_invalidate>:


// cache functions
void cache_invalidate(struct MLX90393 *hall_sensor)
{
  hall_sensor->cache.dirty = ALL_DIRTY_MASK;
    2204:	2308      	movs	r3, #8
    2206:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    220a:	4770      	bx	lr

0000220c <initialize>:
void initialize(struct MLX90393 *hall_sensor) {
    220c:	b508      	push	{r3, lr}
    hall_sensor->I2C_prefix = 0;
    220e:	2200      	movs	r2, #0
    2210:	7042      	strb	r2, [r0, #1]
    hall_sensor->I2C_address = 0;
    2212:	7002      	strb	r2, [r0, #0]
    hall_sensor->gain_multipliers[0] = 5.f;
    2214:	4a0e      	ldr	r2, [pc, #56]	; (2250 <initialize+0x44>)
    2216:	6082      	str	r2, [r0, #8]
    hall_sensor->gain_multipliers[1] = 4.f;
    2218:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    221c:	60c2      	str	r2, [r0, #12]
    hall_sensor->gain_multipliers[2] = 3.f;
    221e:	4a0d      	ldr	r2, [pc, #52]	; (2254 <initialize+0x48>)
    2220:	6102      	str	r2, [r0, #16]
    hall_sensor->gain_multipliers[3] = 2.5f;
    2222:	4a0d      	ldr	r2, [pc, #52]	; (2258 <initialize+0x4c>)
    2224:	6142      	str	r2, [r0, #20]
    hall_sensor->gain_multipliers[4] = 2.f;
    2226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    222a:	6182      	str	r2, [r0, #24]
    hall_sensor->gain_multipliers[5] = 1.66666667f;
    222c:	4a0b      	ldr	r2, [pc, #44]	; (225c <initialize+0x50>)
    222e:	61c2      	str	r2, [r0, #28]
    hall_sensor->gain_multipliers[6] = 1.33333333f;
    2230:	4a0b      	ldr	r2, [pc, #44]	; (2260 <initialize+0x54>)
    2232:	6202      	str	r2, [r0, #32]
    hall_sensor->gain_multipliers[7] = 1.f;
    2234:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2238:	6242      	str	r2, [r0, #36]	; 0x24
    hall_sensor->base_xy_sens_hc0 = 0.196f;
    223a:	4a0a      	ldr	r2, [pc, #40]	; (2264 <initialize+0x58>)
    223c:	6282      	str	r2, [r0, #40]	; 0x28
    hall_sensor->base_z_sens_hc0 = 0.316f;
    223e:	4a0a      	ldr	r2, [pc, #40]	; (2268 <initialize+0x5c>)
    2240:	62c2      	str	r2, [r0, #44]	; 0x2c
    hall_sensor->base_xy_sens_hc0xc = 0.150f;
    2242:	4a0a      	ldr	r2, [pc, #40]	; (226c <initialize+0x60>)
    2244:	6302      	str	r2, [r0, #48]	; 0x30
    hall_sensor->base_z_sens_hc0xc = 0.242f;
    2246:	4a0a      	ldr	r2, [pc, #40]	; (2270 <initialize+0x64>)
    2248:	6342      	str	r2, [r0, #52]	; 0x34
    cache_invalidate(hall_sensor);
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <initialize+0x68>)
    224c:	4798      	blx	r3
    224e:	bd08      	pop	{r3, pc}
    2250:	40a00000 	.word	0x40a00000
    2254:	40400000 	.word	0x40400000
    2258:	40200000 	.word	0x40200000
    225c:	3fd55555 	.word	0x3fd55555
    2260:	3faaaaab 	.word	0x3faaaaab
    2264:	3e48b439 	.word	0x3e48b439
    2268:	3ea1cac1 	.word	0x3ea1cac1
    226c:	3e19999a 	.word	0x3e19999a
    2270:	3e77ced9 	.word	0x3e77ced9
    2274:	00002205 	.word	0x00002205

00002278 <cache_invalidate_address>:
}

void cache_invalidate_address(struct MLX90393 *hall_sensor, uint8_t address)
{
  hall_sensor->cache.dirty |= ALL_DIRTY_MASK & (1<<address);
    2278:	2301      	movs	r3, #1
    227a:	fa03 f101 	lsl.w	r1, r3, r1
    227e:	f001 0108 	and.w	r1, r1, #8
    2282:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    2286:	4319      	orrs	r1, r3
    2288:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    228c:	4770      	bx	lr

0000228e <cache_set>:
}

void cache_set(struct MLX90393 *hall_sensor, uint8_t address, uint16_t data){
  if (address < CACHESIZE){
    228e:	2902      	cmp	r1, #2
    2290:	d80c      	bhi.n	22ac <cache_set+0x1e>
    hall_sensor->cache.reg[address] = data;
    2292:	f101 031c 	add.w	r3, r1, #28
    2296:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    229a:	805a      	strh	r2, [r3, #2]
    hall_sensor->cache.dirty &= ~(1 << address);
    229c:	2301      	movs	r3, #1
    229e:	408b      	lsls	r3, r1
    22a0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    22a4:	ea21 0103 	bic.w	r1, r1, r3
    22a8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    22ac:	4770      	bx	lr
	...

000022b0 <readRegister>:
{
    22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b2:	b085      	sub	sp, #20
    22b4:	4604      	mov	r4, r0
    22b6:	460d      	mov	r5, r1
    22b8:	4617      	mov	r7, r2
    22ba:	461e      	mov	r6, r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    22bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    22c0:	7801      	ldrb	r1, [r0, #0]
    22c2:	4810      	ldr	r0, [pc, #64]	; (2304 <readRegister+0x54>)
    22c4:	4b10      	ldr	r3, [pc, #64]	; (2308 <readRegister+0x58>)
    22c6:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    22c8:	00aa      	lsls	r2, r5, #2
  ret = i2c_m_sync_reg_read_easy(io, cmd, reg_adress, (uint8_t *)buffer, (uint16_t) 3);
    22ca:	2303      	movs	r3, #3
    22cc:	9300      	str	r3, [sp, #0]
    22ce:	ab03      	add	r3, sp, #12
    22d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    22d4:	2150      	movs	r1, #80	; 0x50
    22d6:	4630      	mov	r0, r6
    22d8:	4e0c      	ldr	r6, [pc, #48]	; (230c <readRegister+0x5c>)
    22da:	47b0      	blx	r6
  if (ret < 1) {return STATUS_ERROR;}
    22dc:	2800      	cmp	r0, #0
    22de:	dc03      	bgt.n	22e8 <readRegister+0x38>
    22e0:	26ff      	movs	r6, #255	; 0xff
}
    22e2:	4630      	mov	r0, r6
    22e4:	b005      	add	sp, #20
    22e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t status = buffer[0];
    22e8:	f89d 600c 	ldrb.w	r6, [sp, #12]
  uint8_t b_h = buffer[1];
    22ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint8_t b_l = buffer[2];
    22f0:	f89d 200e 	ldrb.w	r2, [sp, #14]
  *(data) = ((uint16_t) b_h <<8) | b_l;
    22f4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    22f8:	803a      	strh	r2, [r7, #0]
  cache_set(hall_sensor, address, *(data));
    22fa:	4629      	mov	r1, r5
    22fc:	4620      	mov	r0, r4
    22fe:	4b04      	ldr	r3, [pc, #16]	; (2310 <readRegister+0x60>)
    2300:	4798      	blx	r3
  return status;
    2302:	e7ee      	b.n	22e2 <readRegister+0x32>
    2304:	20000340 	.word	0x20000340
    2308:	00000a91 	.word	0x00000a91
    230c:	00002171 	.word	0x00002171
    2310:	0000228f 	.word	0x0000228f

00002314 <reset>:
}

//sensor commands 

uint8_t reset(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2314:	b538      	push	{r3, r4, r5, lr}
    2316:	4604      	mov	r4, r0
    2318:	460d      	mov	r5, r1
  cache_invalidate(hall_sensor);
    231a:	4b06      	ldr	r3, [pc, #24]	; (2334 <reset+0x20>)
    231c:	4798      	blx	r3

  uint8_t status = sendCommand(hall_sensor, CMD_RESET, io);
    231e:	462a      	mov	r2, r5
    2320:	21f0      	movs	r1, #240	; 0xf0
    2322:	4620      	mov	r0, r4
    2324:	4b04      	ldr	r3, [pc, #16]	; (2338 <reset+0x24>)
    2326:	4798      	blx	r3
    2328:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay_ms(3);
    232a:	2003      	movs	r0, #3
    232c:	4b03      	ldr	r3, [pc, #12]	; (233c <reset+0x28>)
    232e:	4798      	blx	r3
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
    2330:	4620      	mov	r0, r4
    2332:	bd38      	pop	{r3, r4, r5, pc}
    2334:	00002205 	.word	0x00002205
    2338:	00002135 	.word	0x00002135
    233c:	000009c5 	.word	0x000009c5

00002340 <exit_command>:
{
  return sendCommand(hall_sensor, CMD_NOP, io);
}

uint8_t exit_command(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2340:	b508      	push	{r3, lr}
  return sendCommand(hall_sensor, CMD_EXIT, io);
    2342:	460a      	mov	r2, r1
    2344:	2180      	movs	r1, #128	; 0x80
    2346:	4b01      	ldr	r3, [pc, #4]	; (234c <exit_command+0xc>)
    2348:	4798      	blx	r3
  delay_ms(2);
}
    234a:	bd08      	pop	{r3, pc}
    234c:	00002135 	.word	0x00002135

00002350 <readMeasurement>:
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
  return sendCommand(hall_sensor, cmd, io);
}

uint8_t readMeasurement(struct MLX90393 *hall_sensor, uint8_t zyxt_flags, struct io_descriptor *io)
{
    2350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2354:	b084      	sub	sp, #16
    2356:	4605      	mov	r5, r0
    2358:	460c      	mov	r4, r1
    235a:	4690      	mov	r8, r2
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
    235c:	f001 060f 	and.w	r6, r1, #15
    2360:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    2364:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2368:	7801      	ldrb	r1, [r0, #0]
    236a:	483d      	ldr	r0, [pc, #244]	; (2460 <readMeasurement+0x110>)
    236c:	4b3d      	ldr	r3, [pc, #244]	; (2464 <readMeasurement+0x114>)
    236e:	4798      	blx	r3

  int32_t ret;

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    2370:	f014 0908 	ands.w	r9, r4, #8
    2374:	d05b      	beq.n	242e <readMeasurement+0xde>
    2376:	2302      	movs	r3, #2
    2378:	f014 0a04 	ands.w	sl, r4, #4
    237c:	d059      	beq.n	2432 <readMeasurement+0xe2>
    237e:	2202      	movs	r2, #2
    2380:	4413      	add	r3, r2
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
    2382:	f004 0702 	and.w	r7, r4, #2
                       ((zyxt_flags & Y_FLAG)?2:0) +
    2386:	443b      	add	r3, r7
    2388:	b2da      	uxtb	r2, r3
                       ((zyxt_flags & X_FLAG)?2:0) +
    238a:	f014 0401 	ands.w	r4, r4, #1
    238e:	d052      	beq.n	2436 <readMeasurement+0xe6>
    2390:	2302      	movs	r3, #2
    2392:	4413      	add	r3, r2
    2394:	b2db      	uxtb	r3, r3
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    2396:	3301      	adds	r3, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

    ret = i2c_m_sync_cmd_write_easy(io, cmd, (uint8_t *)buffer, (uint16_t) count);
    2398:	b2db      	uxtb	r3, r3
    239a:	aa01      	add	r2, sp, #4
    239c:	4631      	mov	r1, r6
    239e:	4640      	mov	r0, r8
    23a0:	4e31      	ldr	r6, [pc, #196]	; (2468 <readMeasurement+0x118>)
    23a2:	47b0      	blx	r6
    
    if (ret < 1) {return STATUS_ERROR;}
    23a4:	2800      	cmp	r0, #0
    23a6:	dd59      	ble.n	245c <readMeasurement+0x10c>

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
    23a8:	2c00      	cmp	r4, #0
    23aa:	d046      	beq.n	243a <readMeasurement+0xea>
    hall_sensor->dataRaw.t =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    23ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
    23b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    23b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    23b8:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    i += 2;
    23bc:	2303      	movs	r3, #3
  } else {
    hall_sensor->dataRaw.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    23be:	2f00      	cmp	r7, #0
    23c0:	d040      	beq.n	2444 <readMeasurement+0xf4>
    hall_sensor->dataRaw.x =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    23c2:	aa04      	add	r2, sp, #16
    23c4:	441a      	add	r2, r3
    23c6:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    23ca:	1c59      	adds	r1, r3, #1
    23cc:	aa04      	add	r2, sp, #16
    23ce:	4411      	add	r1, r2
    23d0:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    23d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    23d8:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    i += 2;
    23dc:	3302      	adds	r3, #2
    23de:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    23e0:	f1ba 0f00 	cmp.w	sl, #0
    23e4:	d032      	beq.n	244c <readMeasurement+0xfc>
    hall_sensor->dataRaw.y =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    23e6:	aa04      	add	r2, sp, #16
    23e8:	441a      	add	r2, r3
    23ea:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
    23ee:	1c59      	adds	r1, r3, #1
    23f0:	aa04      	add	r2, sp, #16
    23f2:	4411      	add	r1, r2
    23f4:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
    23f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    23fc:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    i += 2;
    2400:	3302      	adds	r3, #2
    2402:	b2db      	uxtb	r3, r3
  } else {
    hall_sensor->dataRaw.y = 0;
  }
  if (zyxt_flags & Z_FLAG){
    2404:	f1b9 0f00 	cmp.w	r9, #0
    2408:	d024      	beq.n	2454 <readMeasurement+0x104>
    hall_sensor->dataRaw.z =  ((uint16_t) buffer[i] <<8) | buffer[i+1];
    240a:	aa04      	add	r2, sp, #16
    240c:	441a      	add	r2, r3
    240e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
    2412:	3301      	adds	r3, #1
    2414:	a904      	add	r1, sp, #16
    2416:	440b      	add	r3, r1
    2418:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    241c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2420:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    i += 2;
  } else {
    hall_sensor->dataRaw.z = 0;
  }

  return buffer[0];
    2424:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    2428:	b004      	add	sp, #16
    242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
    242e:	2300      	movs	r3, #0
    2430:	e7a2      	b.n	2378 <readMeasurement+0x28>
    2432:	2200      	movs	r2, #0
    2434:	e7a4      	b.n	2380 <readMeasurement+0x30>
                       ((zyxt_flags & X_FLAG)?2:0) +
    2436:	2300      	movs	r3, #0
    2438:	e7ab      	b.n	2392 <readMeasurement+0x42>
    hall_sensor->dataRaw.t = 0;
    243a:	2300      	movs	r3, #0
    243c:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
  uint8_t i = 1;
    2440:	2301      	movs	r3, #1
    2442:	e7bc      	b.n	23be <readMeasurement+0x6e>
    hall_sensor->dataRaw.x = 0;
    2444:	2200      	movs	r2, #0
    2446:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
    244a:	e7c9      	b.n	23e0 <readMeasurement+0x90>
    hall_sensor->dataRaw.y = 0;
    244c:	2200      	movs	r2, #0
    244e:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
    2452:	e7d7      	b.n	2404 <readMeasurement+0xb4>
    hall_sensor->dataRaw.z = 0;
    2454:	2300      	movs	r3, #0
    2456:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    245a:	e7e3      	b.n	2424 <readMeasurement+0xd4>
    if (ret < 1) {return STATUS_ERROR;}
    245c:	20ff      	movs	r0, #255	; 0xff
    245e:	e7e3      	b.n	2428 <readMeasurement+0xd8>
    2460:	20000340 	.word	0x20000340
    2464:	00000a91 	.word	0x00000a91
    2468:	000020ed 	.word	0x000020ed

0000246c <convertRaw>:
{
  return sendCommand(hall_sensor, CMD_MEMORY_STORE, io);
}

void convertRaw(struct MLX90393 *hall_sensor)
{
    246c:	b470      	push	{r4, r5, r6}
  const uint8_t gain_sel = (hall_sensor->cache.reg[GAIN_SEL_REG] & GAIN_SEL_MASK) >> GAIN_SEL_SHIFT;
    246e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    2470:	f3c2 1302 	ubfx	r3, r2, #4, #3
  const uint8_t hallconf = (hall_sensor->cache.reg[HALLCONF_REG] & HALLCONF_MASK) >> HALLCONF_SHIFT;
    2474:	f002 020f 	and.w	r2, r2, #15
  const uint8_t res_xyz = (hall_sensor->cache.reg[RES_XYZ_REG] & RES_XYZ_MASK) >> RES_XYZ_SHIFT;
    2478:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    247a:	f3c1 1147 	ubfx	r1, r1, #5, #8
    247e:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  const uint8_t res_x = (res_xyz >> 0) & 0x3;
    2482:	f001 0103 	and.w	r1, r1, #3
  const uint8_t res_y = (res_xyz >> 2) & 0x3;
    2486:	f3c5 0681 	ubfx	r6, r5, #2, #2
  const uint8_t res_z = (res_xyz >> 4) & 0x3;
    248a:	092d      	lsrs	r5, r5, #4
  uint8_t tcmp_en = (hall_sensor->cache.reg[TCMP_EN_REG] & TCMP_EN_MASK) >> TCMP_EN_SHIFT;
    248c:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    248e:	f3c4 2480 	ubfx	r4, r4, #10, #1

  float xy_sens;
  float z_sens;

  switch(hallconf){
    2492:	2a0c      	cmp	r2, #12
    2494:	f000 8091 	beq.w	25ba <convertRaw+0x14e>
  default:
  case 0:
    xy_sens = hall_sensor->base_xy_sens_hc0;
    2498:	ed90 5a0a 	vldr	s10, [r0, #40]	; 0x28
    z_sens = hall_sensor->base_z_sens_hc0;
    249c:	edd0 4a0b 	vldr	s9, [r0, #44]	; 0x2c
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    z_sens = hall_sensor->base_z_sens_hc0xc;
    break;
  }

  float gain_factor = hall_sensor->gain_multipliers[gain_sel & 0x7];
    24a0:	3302      	adds	r3, #2
    24a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    24a6:	edd3 5a00 	vldr	s11, [r3]

  if (tcmp_en){
    24aa:	2c00      	cmp	r4, #0
    24ac:	f000 808a 	beq.w	25c4 <convertRaw+0x158>
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    24b0:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    24b4:	ee06 3a90 	vmov	s13, r3
    24b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    24bc:	eddf 7ae0 	vldr	s15, [pc, #896]	; 2840 <convertRaw+0x3d4>
    24c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
    24c4:	ee65 6a26 	vmul.f32	s13, s10, s13
    24c8:	ee65 6aa6 	vmul.f32	s13, s11, s13
               gain_factor * (1 << res_x) );
    24cc:	2201      	movs	r2, #1
    24ce:	fa02 f101 	lsl.w	r1, r2, r1
    24d2:	ee07 1a90 	vmov	s15, r1
    24d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    24da:	ee66 6a26 	vmul.f32	s13, s12, s13
    hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    24de:	edc0 6a13 	vstr	s13, [r0, #76]	; 0x4c
                 gain_factor * (1 << res_x) );
      break;
    }
  }

  if (tcmp_en){
    24e2:	2c00      	cmp	r4, #0
    24e4:	f000 80d4 	beq.w	2690 <convertRaw+0x224>
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    24e8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    24ec:	ee07 3a10 	vmov	s14, r3
    24f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    24f4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 2840 <convertRaw+0x3d4>
    24f8:	ee37 7a67 	vsub.f32	s14, s14, s15
    24fc:	ee25 7a07 	vmul.f32	s14, s10, s14
    2500:	ee25 7a87 	vmul.f32	s14, s11, s14
               gain_factor * (1 << res_y) );
    2504:	2301      	movs	r3, #1
    2506:	40b3      	lsls	r3, r6
    2508:	ee07 3a90 	vmov	s15, r3
    250c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2510:	ee26 7a87 	vmul.f32	s14, s13, s14
    hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    2514:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
                 gain_factor * (1 << res_y) );
      break;
    }
  }

  if (tcmp_en){
    2518:	2c00      	cmp	r4, #0
    251a:	f000 811c 	beq.w	2756 <convertRaw+0x2ea>
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    251e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    2522:	ee07 3a90 	vmov	s15, r3
    2526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    252a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2840 <convertRaw+0x3d4>
    252e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2532:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2536:	ee65 7aa7 	vmul.f32	s15, s11, s15
               gain_factor * (1 << res_z) );
    253a:	2301      	movs	r3, #1
    253c:	fa03 f505 	lsl.w	r5, r3, r5
    2540:	ee07 5a10 	vmov	s14, r5
    2544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2548:	ee67 7a27 	vmul.f32	s15, s14, s15
    hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    254c:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
                 gain_factor * (1 << res_z) );
      break;
    }
  }

  hall_sensor->data.t = 25 + (hall_sensor->dataRaw.t - 46244.f)/45.2f;
    2550:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    2554:	ee07 3a90 	vmov	s15, r3
    2558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    255c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 2844 <convertRaw+0x3d8>
    2560:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2564:	eddf 6ab8 	vldr	s13, [pc, #736]	; 2848 <convertRaw+0x3dc>
    2568:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    256c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    2570:	ee77 7a27 	vadd.f32	s15, s14, s15
    2574:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
  
  if (hall_sensor->data.x >50000)
    2578:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
    257c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 284c <convertRaw+0x3e0>
    2580:	eef4 7ac7 	vcmpe.f32	s15, s14
    2584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2588:	f340 814a 	ble.w	2820 <convertRaw+0x3b4>
  {
	  hall_sensor->data.x = 50000;
    258c:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
	  if (hall_sensor->data.x < -50000)
	  {
		  hall_sensor->data.x = -50000;
	  }
  }
    if (hall_sensor->data.y > 50000)
    2590:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
    2594:	ed9f 7aad 	vldr	s14, [pc, #692]	; 284c <convertRaw+0x3e0>
    2598:	eef4 7ac7 	vcmpe.f32	s15, s14
    259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25a0:	f300 8149 	bgt.w	2836 <convertRaw+0x3ca>
    {
	    hall_sensor->data.y = 50000;
    }
    else
    {
	    if (hall_sensor->data.y < -50000)
    25a4:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 2850 <convertRaw+0x3e4>
    25a8:	eef4 7ac7 	vcmpe.f32	s15, s14
    25ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25b0:	f140 8143 	bpl.w	283a <convertRaw+0x3ce>
	    {
		    hall_sensor->data.y = -50000;
    25b4:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
	    if (hall_sensor->data.z < -50000)
	    {
		    //hall_sensor->data.z = -50000;
	    }
    }
}
    25b8:	e13f      	b.n	283a <convertRaw+0x3ce>
    xy_sens = hall_sensor->base_xy_sens_hc0xc;
    25ba:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
    z_sens = hall_sensor->base_z_sens_hc0xc;
    25be:	edd0 4a0d 	vldr	s9, [r0, #52]	; 0x34
    break;
    25c2:	e76d      	b.n	24a0 <convertRaw+0x34>
    switch(res_x){
    25c4:	2903      	cmp	r1, #3
    25c6:	d88c      	bhi.n	24e2 <convertRaw+0x76>
    25c8:	e8df f001 	tbb	[pc, r1]
    25cc:	482e1802 	.word	0x482e1802
		hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    25d0:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    25d4:	ee07 3a90 	vmov	s15, r3
    25d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    25dc:	ee67 7a85 	vmul.f32	s15, s15, s10
    25e0:	ee25 7aa7 	vmul.f32	s14, s11, s15
    25e4:	2301      	movs	r3, #1
    25e6:	fa03 f101 	lsl.w	r1, r3, r1
    25ea:	ee07 1a90 	vmov	s15, r1
    25ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    25f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    25f6:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		break;
    25fa:	e772      	b.n	24e2 <convertRaw+0x76>
      hall_sensor->data.x = (int16_t) hall_sensor->dataRaw.x * xy_sens * gain_factor * (1 << res_x);
    25fc:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    2600:	ee07 3a90 	vmov	s15, r3
    2604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2608:	ee67 7a85 	vmul.f32	s15, s15, s10
    260c:	ee25 7aa7 	vmul.f32	s14, s11, s15
    2610:	2301      	movs	r3, #1
    2612:	fa03 f101 	lsl.w	r1, r3, r1
    2616:	ee07 1a90 	vmov	s15, r1
    261a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    261e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2622:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    2626:	e75c      	b.n	24e2 <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2628:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    262c:	ee07 3a90 	vmov	s15, r3
    2630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2634:	ed9f 7a82 	vldr	s14, [pc, #520]	; 2840 <convertRaw+0x3d4>
    2638:	ee77 7ac7 	vsub.f32	s15, s15, s14
    263c:	ee65 7a27 	vmul.f32	s15, s10, s15
    2640:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2644:	2301      	movs	r3, #1
    2646:	fa03 f101 	lsl.w	r1, r3, r1
    264a:	ee07 1a10 	vmov	s14, r1
    264e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2652:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 32768.f) * xy_sens *
    2656:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    265a:	e742      	b.n	24e2 <convertRaw+0x76>
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    265c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    2660:	ee07 3a90 	vmov	s15, r3
    2664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2668:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 2854 <convertRaw+0x3e8>
    266c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2670:	ee65 7a27 	vmul.f32	s15, s10, s15
    2674:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_x) );
    2678:	2301      	movs	r3, #1
    267a:	fa03 f101 	lsl.w	r1, r3, r1
    267e:	ee07 1a10 	vmov	s14, r1
    2682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2686:	ee67 7a27 	vmul.f32	s15, s14, s15
      hall_sensor->data.x = ( (hall_sensor->dataRaw.x - 16384.f) * xy_sens *
    268a:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
      break;
    268e:	e728      	b.n	24e2 <convertRaw+0x76>
    switch(res_y){
    2690:	2e03      	cmp	r6, #3
    2692:	f63f af41 	bhi.w	2518 <convertRaw+0xac>
    2696:	e8df f006 	tbb	[pc, r6]
    269a:	1702      	.short	0x1702
    269c:	452c      	.short	0x452c
		hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    269e:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    26a2:	ee07 3a10 	vmov	s14, r3
    26a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    26aa:	ee27 7a05 	vmul.f32	s14, s14, s10
    26ae:	ee25 5a87 	vmul.f32	s10, s11, s14
    26b2:	2301      	movs	r3, #1
    26b4:	40b3      	lsls	r3, r6
    26b6:	ee07 3a90 	vmov	s15, r3
    26ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    26be:	ee27 7a05 	vmul.f32	s14, s14, s10
    26c2:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
		break;
    26c6:	e727      	b.n	2518 <convertRaw+0xac>
      hall_sensor->data.y = (int16_t) hall_sensor->dataRaw.y * xy_sens * gain_factor * (1 << res_y);
    26c8:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
    26cc:	ee07 3a10 	vmov	s14, r3
    26d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    26d4:	ee27 7a05 	vmul.f32	s14, s14, s10
    26d8:	ee25 5a87 	vmul.f32	s10, s11, s14
    26dc:	2301      	movs	r3, #1
    26de:	40b3      	lsls	r3, r6
    26e0:	ee07 3a90 	vmov	s15, r3
    26e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    26e8:	ee27 7a05 	vmul.f32	s14, s14, s10
    26ec:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    26f0:	e712      	b.n	2518 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    26f2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    26f6:	ee07 3a10 	vmov	s14, r3
    26fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    26fe:	eddf 7a50 	vldr	s15, [pc, #320]	; 2840 <convertRaw+0x3d4>
    2702:	ee37 7a67 	vsub.f32	s14, s14, s15
    2706:	ee25 7a07 	vmul.f32	s14, s10, s14
    270a:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    270e:	2301      	movs	r3, #1
    2710:	40b3      	lsls	r3, r6
    2712:	ee07 3a90 	vmov	s15, r3
    2716:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    271a:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 32768.f) * xy_sens *
    271e:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2722:	e6f9      	b.n	2518 <convertRaw+0xac>
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2724:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    2728:	ee07 3a10 	vmov	s14, r3
    272c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2730:	eddf 7a48 	vldr	s15, [pc, #288]	; 2854 <convertRaw+0x3e8>
    2734:	ee37 7a67 	vsub.f32	s14, s14, s15
    2738:	ee25 7a07 	vmul.f32	s14, s10, s14
    273c:	ee25 7a87 	vmul.f32	s14, s11, s14
                 gain_factor * (1 << res_y) );
    2740:	2301      	movs	r3, #1
    2742:	40b3      	lsls	r3, r6
    2744:	ee07 3a90 	vmov	s15, r3
    2748:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    274c:	ee25 7a07 	vmul.f32	s14, s10, s14
      hall_sensor->data.y = ( (hall_sensor->dataRaw.y - 16384.f) * xy_sens *
    2750:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
      break;
    2754:	e6e0      	b.n	2518 <convertRaw+0xac>
    switch(res_z){
    2756:	2d03      	cmp	r5, #3
    2758:	f63f aefa 	bhi.w	2550 <convertRaw+0xe4>
    275c:	e8df f005 	tbb	[pc, r5]
    2760:	462c1702 	.word	0x462c1702
		hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    2764:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2768:	ee07 3a90 	vmov	s15, r3
    276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2770:	ee67 7aa4 	vmul.f32	s15, s15, s9
    2774:	ee65 5aa7 	vmul.f32	s11, s11, s15
    2778:	2301      	movs	r3, #1
    277a:	40ab      	lsls	r3, r5
    277c:	ee07 3a90 	vmov	s15, r3
    2780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2784:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2788:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		break;
    278c:	e6e0      	b.n	2550 <convertRaw+0xe4>
      hall_sensor->data.z = (int16_t) hall_sensor->dataRaw.z * z_sens * gain_factor * (1 << res_z);
    278e:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
    2792:	ee07 3a90 	vmov	s15, r3
    2796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    279a:	ee67 7aa4 	vmul.f32	s15, s15, s9
    279e:	ee65 5aa7 	vmul.f32	s11, s11, s15
    27a2:	2301      	movs	r3, #1
    27a4:	40ab      	lsls	r3, r5
    27a6:	ee07 3a90 	vmov	s15, r3
    27aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
    27b2:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    27b6:	e6cb      	b.n	2550 <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    27b8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    27bc:	ee07 3a90 	vmov	s15, r3
    27c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2840 <convertRaw+0x3d4>
    27c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    27cc:	ee64 7aa7 	vmul.f32	s15, s9, s15
    27d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    27d4:	2301      	movs	r3, #1
    27d6:	fa03 f505 	lsl.w	r5, r3, r5
    27da:	ee07 5a10 	vmov	s14, r5
    27de:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    27e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 32768.f) * z_sens *
    27e6:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    27ea:	e6b1      	b.n	2550 <convertRaw+0xe4>
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    27ec:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    27f0:	ee07 3a90 	vmov	s15, r3
    27f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    27f8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2854 <convertRaw+0x3e8>
    27fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2800:	ee64 7aa7 	vmul.f32	s15, s9, s15
    2804:	ee65 7aa7 	vmul.f32	s15, s11, s15
                 gain_factor * (1 << res_z) );
    2808:	2301      	movs	r3, #1
    280a:	fa03 f505 	lsl.w	r5, r3, r5
    280e:	ee07 5a10 	vmov	s14, r5
    2812:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    2816:	ee65 7aa7 	vmul.f32	s15, s11, s15
      hall_sensor->data.z = ( (hall_sensor->dataRaw.z - 16384.f) * z_sens *
    281a:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
      break;
    281e:	e697      	b.n	2550 <convertRaw+0xe4>
	  if (hall_sensor->data.x < -50000)
    2820:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2850 <convertRaw+0x3e4>
    2824:	eef4 7ac7 	vcmpe.f32	s15, s14
    2828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    282c:	f57f aeb0 	bpl.w	2590 <convertRaw+0x124>
		  hall_sensor->data.x = -50000;
    2830:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    2834:	e6ac      	b.n	2590 <convertRaw+0x124>
	    hall_sensor->data.y = 50000;
    2836:	ed80 7a14 	vstr	s14, [r0, #80]	; 0x50
}
    283a:	bc70      	pop	{r4, r5, r6}
    283c:	4770      	bx	lr
    283e:	bf00      	nop
    2840:	47000000 	.word	0x47000000
    2844:	4734a400 	.word	0x4734a400
    2848:	4234cccd 	.word	0x4234cccd
    284c:	47435000 	.word	0x47435000
    2850:	c7435000 	.word	0xc7435000
    2854:	46800000 	.word	0x46800000

00002858 <convDelayMicro>:
					   
					   */
	return delaytimeMilli;
}

uint16_t convDelayMicro(struct MLX90393 *hall_sensor) {
    2858:	b410      	push	{r4}
  const uint8_t osr = (hall_sensor->cache.reg[OSR_REG] & OSR_MASK) >> OSR_SHIFT;
    285a:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    285c:	f002 0303 	and.w	r3, r2, #3
  const uint8_t osr2 = (hall_sensor->cache.reg[OSR2_REG] & OSR2_MASK) >> OSR2_SHIFT;
    2860:	f3c2 24c1 	ubfx	r4, r2, #11, #2
  const uint8_t dig_flt = (hall_sensor->cache.reg[DIG_FLT_REG] & DIG_FLT_MASK) >> DIG_FLT_SHIFT;
    2864:	f3c2 0182 	ubfx	r1, r2, #2, #3
  const uint8_t magnetic_axis = 3;
  
  uint32_t delayTimeMicro = (magnetic_axis * (((2 + (1 << dig_flt)) * (1 << osr) *64) + 67)) + ((192*(1<<osr2)) + 67) ; 
    2868:	2201      	movs	r2, #1
    286a:	408a      	lsls	r2, r1
    286c:	3202      	adds	r2, #2
    286e:	409a      	lsls	r2, r3
    2870:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2874:	0193      	lsls	r3, r2, #6
    2876:	f103 00c9 	add.w	r0, r3, #201	; 0xc9
    287a:	23c0      	movs	r3, #192	; 0xc0
    287c:	40a3      	lsls	r3, r4
    287e:	3343      	adds	r3, #67	; 0x43
    2880:	4418      	add	r0, r3
  uint16_t delayTimeMicro_final = delayTimeMicro/100 + 8; 
    2882:	4b05      	ldr	r3, [pc, #20]	; (2898 <convDelayMicro+0x40>)
    2884:	fba3 3000 	umull	r3, r0, r3, r0
    2888:	f3c0 104f 	ubfx	r0, r0, #5, #16
    288c:	3008      	adds	r0, #8
                      (1 << osr2) * 0.192f ) *
                       1.3f;  // 30% tolerance
					   
					   */
	return delayTimeMicro_final;
}
    288e:	b280      	uxth	r0, r0
    2890:	f85d 4b04 	ldr.w	r4, [sp], #4
    2894:	4770      	bx	lr
    2896:	bf00      	nop
    2898:	51eb851f 	.word	0x51eb851f

0000289c <isOK>:
}

//checks 
bool isOK(uint8_t status)
{
  return (status & ERROR_BIT) == 0;
    289c:	0900      	lsrs	r0, r0, #4
    289e:	f080 0001 	eor.w	r0, r0, #1
}
    28a2:	f000 0001 	and.w	r0, r0, #1
    28a6:	4770      	bx	lr

000028a8 <writeRegister>:
{
    28a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28aa:	b085      	sub	sp, #20
    28ac:	4605      	mov	r5, r0
    28ae:	460e      	mov	r6, r1
    28b0:	4617      	mov	r7, r2
    28b2:	461c      	mov	r4, r3
  cache_invalidate_address(hall_sensor, address);
    28b4:	4b12      	ldr	r3, [pc, #72]	; (2900 <writeRegister+0x58>)
    28b6:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(&I2C_0, hall_sensor->I2C_address, I2C_M_SEVEN);
    28b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    28bc:	7829      	ldrb	r1, [r5, #0]
    28be:	4811      	ldr	r0, [pc, #68]	; (2904 <writeRegister+0x5c>)
    28c0:	4b11      	ldr	r3, [pc, #68]	; (2908 <writeRegister+0x60>)
    28c2:	4798      	blx	r3
  uint8_t reg_adress = (address & 0x3f)<<2;
    28c4:	00b3      	lsls	r3, r6, #2
  ret = i2c_m_sync_reg_write_easy(io, cmd, data, reg_adress, (uint8_t *)buffer_answer);
    28c6:	aa03      	add	r2, sp, #12
    28c8:	9200      	str	r2, [sp, #0]
    28ca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    28ce:	463a      	mov	r2, r7
    28d0:	2160      	movs	r1, #96	; 0x60
    28d2:	4620      	mov	r0, r4
    28d4:	4c0d      	ldr	r4, [pc, #52]	; (290c <writeRegister+0x64>)
    28d6:	47a0      	blx	r4
  if (ret < 1) {return STATUS_ERROR;}
    28d8:	2800      	cmp	r0, #0
    28da:	dd0e      	ble.n	28fa <writeRegister+0x52>
  const uint8_t status = buffer_answer[0];
    28dc:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (isOK(status)) {
    28e0:	4620      	mov	r0, r4
    28e2:	4b0b      	ldr	r3, [pc, #44]	; (2910 <writeRegister+0x68>)
    28e4:	4798      	blx	r3
    28e6:	b908      	cbnz	r0, 28ec <writeRegister+0x44>
  return status;
    28e8:	4620      	mov	r0, r4
    28ea:	e007      	b.n	28fc <writeRegister+0x54>
    cache_set(hall_sensor, address, data);
    28ec:	463a      	mov	r2, r7
    28ee:	4631      	mov	r1, r6
    28f0:	4628      	mov	r0, r5
    28f2:	4b08      	ldr	r3, [pc, #32]	; (2914 <writeRegister+0x6c>)
    28f4:	4798      	blx	r3
  return status;
    28f6:	4620      	mov	r0, r4
    28f8:	e000      	b.n	28fc <writeRegister+0x54>
  if (ret < 1) {return STATUS_ERROR;}
    28fa:	20ff      	movs	r0, #255	; 0xff
}
    28fc:	b005      	add	sp, #20
    28fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2900:	00002279 	.word	0x00002279
    2904:	20000340 	.word	0x20000340
    2908:	00000a91 	.word	0x00000a91
    290c:	000021b9 	.word	0x000021b9
    2910:	0000289d 	.word	0x0000289d
    2914:	0000228f 	.word	0x0000228f

00002918 <hasError>:

bool hasError(uint8_t status)
{
  return (status & ERROR_BIT) != 0;
}
    2918:	f3c0 1000 	ubfx	r0, r0, #4, #1
    291c:	4770      	bx	lr
	...

00002920 <cache_fill>:
  if (hall_sensor->cache.dirty != 0) {
    2920:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    2924:	b30a      	cbz	r2, 296a <cache_fill+0x4a>
uint8_t cache_fill(struct MLX90393 *hall_sensor, struct io_descriptor *io) {
    2926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2928:	460e      	mov	r6, r1
    292a:	4605      	mov	r5, r0
    292c:	2400      	movs	r4, #0
    292e:	e001      	b.n	2934 <cache_fill+0x14>
    for (uint8_t address=0; address < CACHESIZE; ++address){
    2930:	3401      	adds	r4, #1
    2932:	b2e4      	uxtb	r4, r4
    2934:	2c02      	cmp	r4, #2
    2936:	d815      	bhi.n	2964 <cache_fill+0x44>
      if (hall_sensor->cache.dirty & (1 << address)){
    2938:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    293c:	4123      	asrs	r3, r4
    293e:	f013 0f01 	tst.w	r3, #1
    2942:	d0f5      	beq.n	2930 <cache_fill+0x10>
        if (hasError(readRegister(hall_sensor, address, &(hall_sensor->cache.reg[address]), io))) {
    2944:	f104 021c 	add.w	r2, r4, #28
    2948:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    294c:	4633      	mov	r3, r6
    294e:	3202      	adds	r2, #2
    2950:	4621      	mov	r1, r4
    2952:	4628      	mov	r0, r5
    2954:	4f06      	ldr	r7, [pc, #24]	; (2970 <cache_fill+0x50>)
    2956:	47b8      	blx	r7
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <cache_fill+0x54>)
    295a:	4798      	blx	r3
    295c:	2800      	cmp	r0, #0
    295e:	d0e7      	beq.n	2930 <cache_fill+0x10>
          return STATUS_ERROR;
    2960:	22ff      	movs	r2, #255	; 0xff
    2962:	e000      	b.n	2966 <cache_fill+0x46>
  return STATUS_OK;
    2964:	2200      	movs	r2, #0
}
    2966:	4610      	mov	r0, r2
    2968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    296a:	4610      	mov	r0, r2
    296c:	4770      	bx	lr
    296e:	bf00      	nop
    2970:	000022b1 	.word	0x000022b1
    2974:	00002919 	.word	0x00002919

00002978 <startMeasurement>:
{
    2978:	b570      	push	{r4, r5, r6, lr}
    297a:	4606      	mov	r6, r0
    297c:	460c      	mov	r4, r1
    297e:	4615      	mov	r5, r2
  cache_fill(hall_sensor, io);
    2980:	4611      	mov	r1, r2
    2982:	4b05      	ldr	r3, [pc, #20]	; (2998 <startMeasurement+0x20>)
    2984:	4798      	blx	r3
  uint8_t cmd = CMD_START_MEASUREMENT | (zyxt_flags & 0xf);
    2986:	f004 010f 	and.w	r1, r4, #15
  return sendCommand(hall_sensor, cmd, io);
    298a:	462a      	mov	r2, r5
    298c:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    2990:	4630      	mov	r0, r6
    2992:	4b02      	ldr	r3, [pc, #8]	; (299c <startMeasurement+0x24>)
    2994:	4798      	blx	r3
}
    2996:	bd70      	pop	{r4, r5, r6, pc}
    2998:	00002921 	.word	0x00002921
    299c:	00002135 	.word	0x00002135

000029a0 <checkStatus>:

uint8_t checkStatus(uint8_t status)
{
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
    29a0:	f010 0f10 	tst.w	r0, #16
    29a4:	d001      	beq.n	29aa <checkStatus+0xa>
    29a6:	20ff      	movs	r0, #255	; 0xff
    29a8:	4770      	bx	lr
    29aa:	2000      	movs	r0, #0
    29ac:	4770      	bx	lr
	...

000029b0 <setGainSel>:
{
    29b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29b4:	b082      	sub	sp, #8
    29b6:	4607      	mov	r7, r0
    29b8:	4688      	mov	r8, r1
    29ba:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    29bc:	2400      	movs	r4, #0
    29be:	aa02      	add	r2, sp, #8
    29c0:	f822 4d02 	strh.w	r4, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, GAIN_SEL_REG, &old_val, io);
    29c4:	462b      	mov	r3, r5
    29c6:	4621      	mov	r1, r4
    29c8:	4e0f      	ldr	r6, [pc, #60]	; (2a08 <setGainSel+0x58>)
    29ca:	47b0      	blx	r6
    29cc:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, GAIN_SEL_REG, (old_val & ~GAIN_SEL_MASK) | (((uint16_t) gain_sel << GAIN_SEL_SHIFT) & GAIN_SEL_MASK), io);
    29ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    29d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    29d6:	b212      	sxth	r2, r2
    29d8:	ea4f 1808 	mov.w	r8, r8, lsl #4
    29dc:	f008 0870 	and.w	r8, r8, #112	; 0x70
    29e0:	ea42 0208 	orr.w	r2, r2, r8
    29e4:	462b      	mov	r3, r5
    29e6:	b292      	uxth	r2, r2
    29e8:	4621      	mov	r1, r4
    29ea:	4638      	mov	r0, r7
    29ec:	4c07      	ldr	r4, [pc, #28]	; (2a0c <setGainSel+0x5c>)
    29ee:	47a0      	blx	r4
    29f0:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    29f2:	4630      	mov	r0, r6
    29f4:	4d06      	ldr	r5, [pc, #24]	; (2a10 <setGainSel+0x60>)
    29f6:	47a8      	blx	r5
    29f8:	4604      	mov	r4, r0
    29fa:	4638      	mov	r0, r7
    29fc:	47a8      	blx	r5
    29fe:	4320      	orrs	r0, r4
}
    2a00:	b2c0      	uxtb	r0, r0
    2a02:	b002      	add	sp, #8
    2a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a08:	000022b1 	.word	0x000022b1
    2a0c:	000028a9 	.word	0x000028a9
    2a10:	000029a1 	.word	0x000029a1

00002a14 <setResolution>:
{
    2a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a16:	b083      	sub	sp, #12
    2a18:	4605      	mov	r5, r0
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
    2a1a:	011b      	lsls	r3, r3, #4
    2a1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2a20:	0092      	lsls	r2, r2, #2
    2a22:	f002 020c 	and.w	r2, r2, #12
    2a26:	431a      	orrs	r2, r3
    2a28:	f001 0103 	and.w	r1, r1, #3
    2a2c:	ea42 0401 	orr.w	r4, r2, r1
  uint16_t old_val = 0;
    2a30:	aa02      	add	r2, sp, #8
    2a32:	2300      	movs	r3, #0
    2a34:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, RES_XYZ_REG, &old_val, io);
    2a38:	9b08      	ldr	r3, [sp, #32]
    2a3a:	2102      	movs	r1, #2
    2a3c:	4e0d      	ldr	r6, [pc, #52]	; (2a74 <setResolution+0x60>)
    2a3e:	47b0      	blx	r6
    2a40:	4607      	mov	r7, r0
  uint8_t status2 = writeRegister(hall_sensor, RES_XYZ_REG, (old_val & ~RES_XYZ_MASK) | ((res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK), io);
    2a42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2a46:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    2a4a:	b212      	sxth	r2, r2
    2a4c:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
    2a50:	9b08      	ldr	r3, [sp, #32]
    2a52:	b292      	uxth	r2, r2
    2a54:	2102      	movs	r1, #2
    2a56:	4628      	mov	r0, r5
    2a58:	4c07      	ldr	r4, [pc, #28]	; (2a78 <setResolution+0x64>)
    2a5a:	47a0      	blx	r4
    2a5c:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2a5e:	4638      	mov	r0, r7
    2a60:	4d06      	ldr	r5, [pc, #24]	; (2a7c <setResolution+0x68>)
    2a62:	47a8      	blx	r5
    2a64:	4604      	mov	r4, r0
    2a66:	4630      	mov	r0, r6
    2a68:	47a8      	blx	r5
    2a6a:	4320      	orrs	r0, r4
}
    2a6c:	b2c0      	uxtb	r0, r0
    2a6e:	b003      	add	sp, #12
    2a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a72:	bf00      	nop
    2a74:	000022b1 	.word	0x000022b1
    2a78:	000028a9 	.word	0x000028a9
    2a7c:	000029a1 	.word	0x000029a1

00002a80 <setOverSampling>:
{
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a82:	b083      	sub	sp, #12
    2a84:	4607      	mov	r7, r0
    2a86:	460c      	mov	r4, r1
    2a88:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2a8a:	aa02      	add	r2, sp, #8
    2a8c:	2300      	movs	r3, #0
    2a8e:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, OSR_REG, &old_val, io);
    2a92:	462b      	mov	r3, r5
    2a94:	2102      	movs	r1, #2
    2a96:	4e0e      	ldr	r6, [pc, #56]	; (2ad0 <setOverSampling+0x50>)
    2a98:	47b0      	blx	r6
    2a9a:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, OSR_REG, (old_val & ~OSR_MASK) | (((uint16_t)osr << OSR_SHIFT) & OSR_MASK), io);
    2a9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2aa0:	f022 0203 	bic.w	r2, r2, #3
    2aa4:	b212      	sxth	r2, r2
    2aa6:	f004 0403 	and.w	r4, r4, #3
    2aaa:	4322      	orrs	r2, r4
    2aac:	462b      	mov	r3, r5
    2aae:	b292      	uxth	r2, r2
    2ab0:	2102      	movs	r1, #2
    2ab2:	4638      	mov	r0, r7
    2ab4:	4c07      	ldr	r4, [pc, #28]	; (2ad4 <setOverSampling+0x54>)
    2ab6:	47a0      	blx	r4
    2ab8:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2aba:	4630      	mov	r0, r6
    2abc:	4d06      	ldr	r5, [pc, #24]	; (2ad8 <setOverSampling+0x58>)
    2abe:	47a8      	blx	r5
    2ac0:	4604      	mov	r4, r0
    2ac2:	4638      	mov	r0, r7
    2ac4:	47a8      	blx	r5
    2ac6:	4320      	orrs	r0, r4
}
    2ac8:	b2c0      	uxtb	r0, r0
    2aca:	b003      	add	sp, #12
    2acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ace:	bf00      	nop
    2ad0:	000022b1 	.word	0x000022b1
    2ad4:	000028a9 	.word	0x000028a9
    2ad8:	000029a1 	.word	0x000029a1

00002adc <setDigitalFiltering>:
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	b083      	sub	sp, #12
    2ae0:	4607      	mov	r7, r0
    2ae2:	460c      	mov	r4, r1
    2ae4:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2ae6:	aa02      	add	r2, sp, #8
    2ae8:	2300      	movs	r3, #0
    2aea:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, DIG_FLT_REG, &old_val, io);
    2aee:	462b      	mov	r3, r5
    2af0:	2102      	movs	r1, #2
    2af2:	4e0e      	ldr	r6, [pc, #56]	; (2b2c <setDigitalFiltering+0x50>)
    2af4:	47b0      	blx	r6
    2af6:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, DIG_FLT_REG, (old_val & ~DIG_FLT_MASK) | (((uint16_t) dig_flt << DIG_FLT_SHIFT) & DIG_FLT_MASK),io);
    2af8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2afc:	f022 021c 	bic.w	r2, r2, #28
    2b00:	b212      	sxth	r2, r2
    2b02:	00a4      	lsls	r4, r4, #2
    2b04:	f004 041c 	and.w	r4, r4, #28
    2b08:	4322      	orrs	r2, r4
    2b0a:	462b      	mov	r3, r5
    2b0c:	b292      	uxth	r2, r2
    2b0e:	2102      	movs	r1, #2
    2b10:	4638      	mov	r0, r7
    2b12:	4c07      	ldr	r4, [pc, #28]	; (2b30 <setDigitalFiltering+0x54>)
    2b14:	47a0      	blx	r4
    2b16:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2b18:	4630      	mov	r0, r6
    2b1a:	4d06      	ldr	r5, [pc, #24]	; (2b34 <setDigitalFiltering+0x58>)
    2b1c:	47a8      	blx	r5
    2b1e:	4604      	mov	r4, r0
    2b20:	4638      	mov	r0, r7
    2b22:	47a8      	blx	r5
    2b24:	4320      	orrs	r0, r4
}
    2b26:	b2c0      	uxtb	r0, r0
    2b28:	b003      	add	sp, #12
    2b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b2c:	000022b1 	.word	0x000022b1
    2b30:	000028a9 	.word	0x000028a9
    2b34:	000029a1 	.word	0x000029a1

00002b38 <setTemperatureCompensation>:
{
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3a:	b083      	sub	sp, #12
    2b3c:	4606      	mov	r6, r0
    2b3e:	4614      	mov	r4, r2
  uint8_t tcmp_en = enabled?1:0;
    2b40:	1c0f      	adds	r7, r1, #0
    2b42:	bf18      	it	ne
    2b44:	2701      	movne	r7, #1
  uint16_t old_val = 0;
    2b46:	aa02      	add	r2, sp, #8
    2b48:	2300      	movs	r3, #0
    2b4a:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, TCMP_EN_REG, &old_val, io);
    2b4e:	4623      	mov	r3, r4
    2b50:	2101      	movs	r1, #1
    2b52:	4d0d      	ldr	r5, [pc, #52]	; (2b88 <setTemperatureCompensation+0x50>)
    2b54:	47a8      	blx	r5
    2b56:	4605      	mov	r5, r0
  uint8_t status2 = writeRegister(hall_sensor, TCMP_EN_REG, (old_val & ~TCMP_EN_MASK) | (((uint16_t) tcmp_en << TCMP_EN_SHIFT) & TCMP_EN_MASK), io);
    2b58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2b60:	b212      	sxth	r2, r2
    2b62:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
    2b66:	4623      	mov	r3, r4
    2b68:	b292      	uxth	r2, r2
    2b6a:	2101      	movs	r1, #1
    2b6c:	4630      	mov	r0, r6
    2b6e:	4c07      	ldr	r4, [pc, #28]	; (2b8c <setTemperatureCompensation+0x54>)
    2b70:	47a0      	blx	r4
    2b72:	4606      	mov	r6, r0
  return checkStatus(status1) | checkStatus(status2);
    2b74:	4628      	mov	r0, r5
    2b76:	4d06      	ldr	r5, [pc, #24]	; (2b90 <setTemperatureCompensation+0x58>)
    2b78:	47a8      	blx	r5
    2b7a:	4604      	mov	r4, r0
    2b7c:	4630      	mov	r0, r6
    2b7e:	47a8      	blx	r5
    2b80:	4320      	orrs	r0, r4
}
    2b82:	b2c0      	uxtb	r0, r0
    2b84:	b003      	add	sp, #12
    2b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b88:	000022b1 	.word	0x000022b1
    2b8c:	000028a9 	.word	0x000028a9
    2b90:	000029a1 	.word	0x000029a1

00002b94 <begin>:
{
    2b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b98:	b082      	sub	sp, #8
    2b9a:	4604      	mov	r4, r0
    2b9c:	4617      	mov	r7, r2
    2b9e:	461e      	mov	r6, r3
    2ba0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  select_prefix(hall_sensor, order_code_last_digit);
    2ba2:	4b24      	ldr	r3, [pc, #144]	; (2c34 <begin+0xa0>)
    2ba4:	4798      	blx	r3
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2ba6:	f994 2001 	ldrsb.w	r2, [r4, #1]
    2baa:	2f00      	cmp	r7, #0
    2bac:	d13f      	bne.n	2c2e <begin+0x9a>
    2bae:	2300      	movs	r3, #0
    2bb0:	4313      	orrs	r3, r2
    2bb2:	2e00      	cmp	r6, #0
    2bb4:	bf18      	it	ne
    2bb6:	f043 0301 	orrne.w	r3, r3, #1
    2bba:	7023      	strb	r3, [r4, #0]
  hall_sensor->DRDY_pin = DRDY;
    2bbc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2bc0:	70a3      	strb	r3, [r4, #2]
  exit_command(hall_sensor, io);
    2bc2:	4629      	mov	r1, r5
    2bc4:	4620      	mov	r0, r4
    2bc6:	4b1c      	ldr	r3, [pc, #112]	; (2c38 <begin+0xa4>)
    2bc8:	4798      	blx	r3
  uint8_t status1 = checkStatus(reset(hall_sensor, io));
    2bca:	4629      	mov	r1, r5
    2bcc:	4620      	mov	r0, r4
    2bce:	4b1b      	ldr	r3, [pc, #108]	; (2c3c <begin+0xa8>)
    2bd0:	4798      	blx	r3
    2bd2:	4b1b      	ldr	r3, [pc, #108]	; (2c40 <begin+0xac>)
    2bd4:	4798      	blx	r3
    2bd6:	4681      	mov	r9, r0
  uint8_t status2 = setGainSel(hall_sensor, 2, io); //7
    2bd8:	462a      	mov	r2, r5
    2bda:	2102      	movs	r1, #2
    2bdc:	4620      	mov	r0, r4
    2bde:	4b19      	ldr	r3, [pc, #100]	; (2c44 <begin+0xb0>)
    2be0:	4798      	blx	r3
    2be2:	4682      	mov	sl, r0
  uint8_t status3 = setResolution(hall_sensor, 0, 0, 0, io); //0,0,0
    2be4:	9500      	str	r5, [sp, #0]
    2be6:	2300      	movs	r3, #0
    2be8:	461a      	mov	r2, r3
    2bea:	4619      	mov	r1, r3
    2bec:	4620      	mov	r0, r4
    2bee:	4e16      	ldr	r6, [pc, #88]	; (2c48 <begin+0xb4>)
    2bf0:	47b0      	blx	r6
    2bf2:	4680      	mov	r8, r0
  uint8_t status4 = setOverSampling(hall_sensor, 1, io); //3
    2bf4:	462a      	mov	r2, r5
    2bf6:	2101      	movs	r1, #1
    2bf8:	4620      	mov	r0, r4
    2bfa:	4b14      	ldr	r3, [pc, #80]	; (2c4c <begin+0xb8>)
    2bfc:	4798      	blx	r3
    2bfe:	4607      	mov	r7, r0
  uint8_t status5 = setDigitalFiltering(hall_sensor, 2, io); //7
    2c00:	462a      	mov	r2, r5
    2c02:	2102      	movs	r1, #2
    2c04:	4620      	mov	r0, r4
    2c06:	4b12      	ldr	r3, [pc, #72]	; (2c50 <begin+0xbc>)
    2c08:	4798      	blx	r3
    2c0a:	4606      	mov	r6, r0
  uint8_t status6 = setTemperatureCompensation(hall_sensor, 0, io);//0
    2c0c:	462a      	mov	r2, r5
    2c0e:	2100      	movs	r1, #0
    2c10:	4620      	mov	r0, r4
    2c12:	4b10      	ldr	r3, [pc, #64]	; (2c54 <begin+0xc0>)
    2c14:	4798      	blx	r3
  return status1 | status2 | status3 | status4 | status5 | status6;
    2c16:	ea49 090a 	orr.w	r9, r9, sl
    2c1a:	ea48 0809 	orr.w	r8, r8, r9
    2c1e:	ea47 0708 	orr.w	r7, r7, r8
    2c22:	433e      	orrs	r6, r7
    2c24:	4330      	orrs	r0, r6
}
    2c26:	b2c0      	uxtb	r0, r0
    2c28:	b002      	add	sp, #8
    2c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hall_sensor->I2C_address = hall_sensor->I2C_prefix | (A1?2:0) | (A0?1:0);
    2c2e:	2302      	movs	r3, #2
    2c30:	e7be      	b.n	2bb0 <begin+0x1c>
    2c32:	bf00      	nop
    2c34:	000020c5 	.word	0x000020c5
    2c38:	00002341 	.word	0x00002341
    2c3c:	00002315 	.word	0x00002315
    2c40:	000029a1 	.word	0x000029a1
    2c44:	000029b1 	.word	0x000029b1
    2c48:	00002a15 	.word	0x00002a15
    2c4c:	00002a81 	.word	0x00002a81
    2c50:	00002add 	.word	0x00002add
    2c54:	00002b39 	.word	0x00002b39

00002c58 <setExtTrig>:
{
    2c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c5a:	b083      	sub	sp, #12
    2c5c:	4607      	mov	r7, r0
    2c5e:	460c      	mov	r4, r1
    2c60:	4615      	mov	r5, r2
  uint16_t old_val = 0;
    2c62:	aa02      	add	r2, sp, #8
    2c64:	2300      	movs	r3, #0
    2c66:	f822 3d02 	strh.w	r3, [r2, #-2]!
  uint8_t status1 = readRegister(hall_sensor, EXT_TRIG_REG, &old_val, io);
    2c6a:	462b      	mov	r3, r5
    2c6c:	2101      	movs	r1, #1
    2c6e:	4e0f      	ldr	r6, [pc, #60]	; (2cac <setExtTrig+0x54>)
    2c70:	47b0      	blx	r6
    2c72:	4606      	mov	r6, r0
  uint8_t status2 = writeRegister(hall_sensor, EXT_TRIG_REG, (old_val & ~EXT_TRIG_MASK) | (((uint16_t) ext_trig << EXT_TRIG_SHIFT) & EXT_TRIG_MASK), io);
    2c74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    2c7c:	b213      	sxth	r3, r2
    2c7e:	b2a2      	uxth	r2, r4
    2c80:	02d2      	lsls	r2, r2, #11
    2c82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    2c86:	431a      	orrs	r2, r3
    2c88:	462b      	mov	r3, r5
    2c8a:	b292      	uxth	r2, r2
    2c8c:	2101      	movs	r1, #1
    2c8e:	4638      	mov	r0, r7
    2c90:	4c07      	ldr	r4, [pc, #28]	; (2cb0 <setExtTrig+0x58>)
    2c92:	47a0      	blx	r4
    2c94:	4607      	mov	r7, r0
  return checkStatus(status1) | checkStatus(status2);
    2c96:	4630      	mov	r0, r6
    2c98:	4d06      	ldr	r5, [pc, #24]	; (2cb4 <setExtTrig+0x5c>)
    2c9a:	47a8      	blx	r5
    2c9c:	4604      	mov	r4, r0
    2c9e:	4638      	mov	r0, r7
    2ca0:	47a8      	blx	r5
    2ca2:	4320      	orrs	r0, r4
}
    2ca4:	b2c0      	uxtb	r0, r0
    2ca6:	b003      	add	sp, #12
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2caa:	bf00      	nop
    2cac:	000022b1 	.word	0x000022b1
    2cb0:	000028a9 	.word	0x000028a9
    2cb4:	000029a1 	.word	0x000029a1

00002cb8 <triggerInitialize>:
#include <Melexis/SensorArray.h>
#include "math.h"


void triggerInitialize(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2cb8:	b538      	push	{r3, r4, r5, lr}
    2cba:	4605      	mov	r5, r0
    2cbc:	460c      	mov	r4, r1
		//setTrigIntSel(hall_sensor,1,io);
		setExtTrig(hall_sensor,1,io);
    2cbe:	460a      	mov	r2, r1
    2cc0:	2101      	movs	r1, #1
    2cc2:	4b04      	ldr	r3, [pc, #16]	; (2cd4 <triggerInitialize+0x1c>)
    2cc4:	4798      	blx	r3
		//startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
		startMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG, io);
    2cc6:	4622      	mov	r2, r4
    2cc8:	210e      	movs	r1, #14
    2cca:	4628      	mov	r0, r5
    2ccc:	4b02      	ldr	r3, [pc, #8]	; (2cd8 <triggerInitialize+0x20>)
    2cce:	4798      	blx	r3
    2cd0:	bd38      	pop	{r3, r4, r5, pc}
    2cd2:	bf00      	nop
    2cd4:	00002c59 	.word	0x00002c59
    2cd8:	00002979 	.word	0x00002979

00002cdc <triggerSensor>:
}


void triggerSensor(uint16_t pulseTime)
{
    2cdc:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cde:	4c03      	ldr	r4, [pc, #12]	; (2cec <triggerSensor+0x10>)
    2ce0:	2540      	movs	r5, #64	; 0x40
    2ce2:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(TRG,true);
	delay_us(pulseTime);
    2ce4:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <triggerSensor+0x14>)
    2ce6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce8:	6165      	str	r5, [r4, #20]
    2cea:	bd38      	pop	{r3, r4, r5, pc}
    2cec:	41008000 	.word	0x41008000
    2cf0:	000009a5 	.word	0x000009a5

00002cf4 <triggerReadout>:
{
	triggerSensor(pulseTime);
};

uint8_t triggerReadout(struct MLX90393 *hall_sensor, struct io_descriptor *io)
{
    2cf4:	b538      	push	{r3, r4, r5, lr}
    2cf6:	4605      	mov	r5, r0
	//uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG | T_FLAG, io);
	uint8_t status = readMeasurement(hall_sensor, X_FLAG | Y_FLAG | Z_FLAG , io);
    2cf8:	460a      	mov	r2, r1
    2cfa:	210e      	movs	r1, #14
    2cfc:	4b04      	ldr	r3, [pc, #16]	; (2d10 <triggerReadout+0x1c>)
    2cfe:	4798      	blx	r3
    2d00:	4604      	mov	r4, r0
	convertRaw(hall_sensor);
    2d02:	4628      	mov	r0, r5
    2d04:	4b03      	ldr	r3, [pc, #12]	; (2d14 <triggerReadout+0x20>)
    2d06:	4798      	blx	r3
	return checkStatus(status);
    2d08:	4620      	mov	r0, r4
    2d0a:	4b03      	ldr	r3, [pc, #12]	; (2d18 <triggerReadout+0x24>)
    2d0c:	4798      	blx	r3
};
    2d0e:	bd38      	pop	{r3, r4, r5, pc}
    2d10:	00002351 	.word	0x00002351
    2d14:	0000246d 	.word	0x0000246d
    2d18:	000029a1 	.word	0x000029a1

00002d1c <triggerReadoutArray>:

uint8_t triggerReadoutArray(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3, 
						    struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6, 
					        struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
					        struct io_descriptor *io)
{
    2d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d20:	b083      	sub	sp, #12
    2d22:	4688      	mov	r8, r1
    2d24:	4617      	mov	r7, r2
    2d26:	461e      	mov	r6, r3
	uint8_t status1 = triggerReadout(hall_sensor_1,io);
    2d28:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d2a:	4c25      	ldr	r4, [pc, #148]	; (2dc0 <triggerReadoutArray+0xa4>)
    2d2c:	47a0      	blx	r4
    2d2e:	4605      	mov	r5, r0
	uint8_t status2 = triggerReadout(hall_sensor_2,io);
    2d30:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d32:	4640      	mov	r0, r8
    2d34:	47a0      	blx	r4
    2d36:	4683      	mov	fp, r0
	uint8_t status3 = triggerReadout(hall_sensor_3,io);
    2d38:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d3a:	4638      	mov	r0, r7
    2d3c:	47a0      	blx	r4
    2d3e:	4682      	mov	sl, r0
	uint8_t status4 = triggerReadout(hall_sensor_4,io);
    2d40:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d42:	4630      	mov	r0, r6
    2d44:	47a0      	blx	r4
    2d46:	4681      	mov	r9, r0
	uint8_t status5 = triggerReadout(hall_sensor_5,io);
    2d48:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d4c:	47a0      	blx	r4
    2d4e:	4680      	mov	r8, r0
	uint8_t status6 = triggerReadout(hall_sensor_6,io);
    2d50:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d52:	980d      	ldr	r0, [sp, #52]	; 0x34
    2d54:	47a0      	blx	r4
    2d56:	4607      	mov	r7, r0
	uint8_t status7 = triggerReadout(hall_sensor_7,io);
    2d58:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    2d5c:	47a0      	blx	r4
    2d5e:	4606      	mov	r6, r0
	uint8_t status8 = triggerReadout(hall_sensor_8,io);
    2d60:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d62:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2d64:	47a0      	blx	r4
    2d66:	9000      	str	r0, [sp, #0]
	uint8_t status9 = triggerReadout(hall_sensor_9,io);
    2d68:	9911      	ldr	r1, [sp, #68]	; 0x44
    2d6a:	9810      	ldr	r0, [sp, #64]	; 0x40
    2d6c:	47a0      	blx	r4
    2d6e:	9001      	str	r0, [sp, #4]
	
	return checkStatus(status1) | checkStatus(status2) | checkStatus(status3) | checkStatus(status4) | checkStatus(status5) | checkStatus(status6) | checkStatus(status7) | checkStatus(status8) | checkStatus(status9);
    2d70:	4628      	mov	r0, r5
    2d72:	4d14      	ldr	r5, [pc, #80]	; (2dc4 <triggerReadoutArray+0xa8>)
    2d74:	47a8      	blx	r5
    2d76:	4604      	mov	r4, r0
    2d78:	4658      	mov	r0, fp
    2d7a:	47a8      	blx	r5
    2d7c:	4304      	orrs	r4, r0
    2d7e:	b2e4      	uxtb	r4, r4
    2d80:	4650      	mov	r0, sl
    2d82:	47a8      	blx	r5
    2d84:	4304      	orrs	r4, r0
    2d86:	b2e4      	uxtb	r4, r4
    2d88:	4648      	mov	r0, r9
    2d8a:	47a8      	blx	r5
    2d8c:	4304      	orrs	r4, r0
    2d8e:	b2e4      	uxtb	r4, r4
    2d90:	4640      	mov	r0, r8
    2d92:	47a8      	blx	r5
    2d94:	4304      	orrs	r4, r0
    2d96:	b2e4      	uxtb	r4, r4
    2d98:	4638      	mov	r0, r7
    2d9a:	47a8      	blx	r5
    2d9c:	4304      	orrs	r4, r0
    2d9e:	b2e4      	uxtb	r4, r4
    2da0:	4630      	mov	r0, r6
    2da2:	47a8      	blx	r5
    2da4:	4304      	orrs	r4, r0
    2da6:	b2e4      	uxtb	r4, r4
    2da8:	9800      	ldr	r0, [sp, #0]
    2daa:	47a8      	blx	r5
    2dac:	4304      	orrs	r4, r0
    2dae:	b2e4      	uxtb	r4, r4
    2db0:	9801      	ldr	r0, [sp, #4]
    2db2:	47a8      	blx	r5
    2db4:	4320      	orrs	r0, r4
};
    2db6:	b2c0      	uxtb	r0, r0
    2db8:	b003      	add	sp, #12
    2dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dbe:	bf00      	nop
    2dc0:	00002cf5 	.word	0x00002cf5
    2dc4:	000029a1 	.word	0x000029a1

00002dc8 <SensorArray_Init>:

void SensorArray_Init(struct MLX90393 *hall_sensor_1, struct MLX90393 *hall_sensor_2, struct MLX90393 *hall_sensor_3,
struct MLX90393 *hall_sensor_4, struct MLX90393 *hall_sensor_5, struct MLX90393 *hall_sensor_6,
struct MLX90393 *hall_sensor_7, struct MLX90393 *hall_sensor_8, struct MLX90393 *hall_sensor_9,
struct io_descriptor *io)
{
    2dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dcc:	b083      	sub	sp, #12
    2dce:	4606      	mov	r6, r0
    2dd0:	468b      	mov	fp, r1
    2dd2:	4692      	mov	sl, r2
    2dd4:	4699      	mov	r9, r3
    2dd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
	//bottom row left
	initialize(hall_sensor_1);
    2dd8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2ec8 <SensorArray_Init+0x100>
    2ddc:	47c0      	blx	r8
	begin(hall_sensor_1,1,0,0,false, io);
    2dde:	9501      	str	r5, [sp, #4]
    2de0:	2400      	movs	r4, #0
    2de2:	9400      	str	r4, [sp, #0]
    2de4:	4623      	mov	r3, r4
    2de6:	4622      	mov	r2, r4
    2de8:	2101      	movs	r1, #1
    2dea:	4630      	mov	r0, r6
    2dec:	4f34      	ldr	r7, [pc, #208]	; (2ec0 <SensorArray_Init+0xf8>)
    2dee:	47b8      	blx	r7
	triggerInitialize(hall_sensor_1, io);
    2df0:	4629      	mov	r1, r5
    2df2:	4630      	mov	r0, r6
    2df4:	4e33      	ldr	r6, [pc, #204]	; (2ec4 <SensorArray_Init+0xfc>)
    2df6:	47b0      	blx	r6
	
	//bottom row middle
	initialize(hall_sensor_2);
    2df8:	4658      	mov	r0, fp
    2dfa:	47c0      	blx	r8
	begin(hall_sensor_2,1,0,1,false, io);
    2dfc:	9501      	str	r5, [sp, #4]
    2dfe:	9400      	str	r4, [sp, #0]
    2e00:	2301      	movs	r3, #1
    2e02:	4622      	mov	r2, r4
    2e04:	4619      	mov	r1, r3
    2e06:	4658      	mov	r0, fp
    2e08:	47b8      	blx	r7
	triggerInitialize(hall_sensor_2, io);
    2e0a:	4629      	mov	r1, r5
    2e0c:	4658      	mov	r0, fp
    2e0e:	47b0      	blx	r6
	
	//bottom row right
	initialize(hall_sensor_3);
    2e10:	4650      	mov	r0, sl
    2e12:	47c0      	blx	r8
	begin(hall_sensor_3,1,1,0,false, io);
    2e14:	9501      	str	r5, [sp, #4]
    2e16:	9400      	str	r4, [sp, #0]
    2e18:	4623      	mov	r3, r4
    2e1a:	2201      	movs	r2, #1
    2e1c:	4611      	mov	r1, r2
    2e1e:	4650      	mov	r0, sl
    2e20:	47b8      	blx	r7
	triggerInitialize(hall_sensor_3, io);
    2e22:	4629      	mov	r1, r5
    2e24:	4650      	mov	r0, sl
    2e26:	47b0      	blx	r6
	
	//middle row left
	initialize(hall_sensor_4);
    2e28:	4648      	mov	r0, r9
    2e2a:	47c0      	blx	r8
	begin(hall_sensor_4,2,0,0,false, io);
    2e2c:	9501      	str	r5, [sp, #4]
    2e2e:	9400      	str	r4, [sp, #0]
    2e30:	4623      	mov	r3, r4
    2e32:	4622      	mov	r2, r4
    2e34:	2102      	movs	r1, #2
    2e36:	4648      	mov	r0, r9
    2e38:	47b8      	blx	r7
	triggerInitialize(hall_sensor_4, io);
    2e3a:	4629      	mov	r1, r5
    2e3c:	4648      	mov	r0, r9
    2e3e:	47b0      	blx	r6
	
	//middle row middle
	initialize(hall_sensor_5);
    2e40:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e42:	47c0      	blx	r8
	begin(hall_sensor_5,2,0,1,false, io);
    2e44:	9501      	str	r5, [sp, #4]
    2e46:	9400      	str	r4, [sp, #0]
    2e48:	2301      	movs	r3, #1
    2e4a:	4622      	mov	r2, r4
    2e4c:	2102      	movs	r1, #2
    2e4e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e50:	47b8      	blx	r7
	triggerInitialize(hall_sensor_5, io);
    2e52:	4629      	mov	r1, r5
    2e54:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e56:	47b0      	blx	r6
	
	//middle row right
	initialize(hall_sensor_6);
    2e58:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e5a:	47c0      	blx	r8
	begin(hall_sensor_6,2,1,0,false, io);
    2e5c:	9501      	str	r5, [sp, #4]
    2e5e:	9400      	str	r4, [sp, #0]
    2e60:	4623      	mov	r3, r4
    2e62:	2201      	movs	r2, #1
    2e64:	2102      	movs	r1, #2
    2e66:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e68:	47b8      	blx	r7
	triggerInitialize(hall_sensor_6, io);
    2e6a:	4629      	mov	r1, r5
    2e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e6e:	47b0      	blx	r6
	
	//top row left
	initialize(hall_sensor_7);
    2e70:	980e      	ldr	r0, [sp, #56]	; 0x38
    2e72:	47c0      	blx	r8
	begin(hall_sensor_7,3,0,0,false, io);
    2e74:	9501      	str	r5, [sp, #4]
    2e76:	9400      	str	r4, [sp, #0]
    2e78:	4623      	mov	r3, r4
    2e7a:	4622      	mov	r2, r4
    2e7c:	2103      	movs	r1, #3
    2e7e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2e80:	47b8      	blx	r7
	triggerInitialize(hall_sensor_7, io);
    2e82:	4629      	mov	r1, r5
    2e84:	980e      	ldr	r0, [sp, #56]	; 0x38
    2e86:	47b0      	blx	r6
	
	//top row middle
	initialize(hall_sensor_8);
    2e88:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2e8a:	47c0      	blx	r8
	begin(hall_sensor_8,3,0,1,false, io);
    2e8c:	9501      	str	r5, [sp, #4]
    2e8e:	9400      	str	r4, [sp, #0]
    2e90:	2301      	movs	r3, #1
    2e92:	4622      	mov	r2, r4
    2e94:	2103      	movs	r1, #3
    2e96:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2e98:	47b8      	blx	r7
	triggerInitialize(hall_sensor_8, io);
    2e9a:	4629      	mov	r1, r5
    2e9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2e9e:	47b0      	blx	r6
	
	//top row right
	initialize(hall_sensor_9);
    2ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
    2ea2:	47c0      	blx	r8
	begin(hall_sensor_9,3,1,0,false, io);
    2ea4:	9501      	str	r5, [sp, #4]
    2ea6:	9400      	str	r4, [sp, #0]
    2ea8:	4623      	mov	r3, r4
    2eaa:	2201      	movs	r2, #1
    2eac:	2103      	movs	r1, #3
    2eae:	9810      	ldr	r0, [sp, #64]	; 0x40
    2eb0:	47b8      	blx	r7
	triggerInitialize(hall_sensor_9, io);
    2eb2:	4629      	mov	r1, r5
    2eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
    2eb6:	47b0      	blx	r6
}
    2eb8:	b003      	add	sp, #12
    2eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ebe:	bf00      	nop
    2ec0:	00002b95 	.word	0x00002b95
    2ec4:	00002cb9 	.word	0x00002cb9
    2ec8:	0000220d 	.word	0x0000220d

00002ecc <__libc_init_array>:
    2ecc:	b570      	push	{r4, r5, r6, lr}
    2ece:	4e0d      	ldr	r6, [pc, #52]	; (2f04 <__libc_init_array+0x38>)
    2ed0:	4c0d      	ldr	r4, [pc, #52]	; (2f08 <__libc_init_array+0x3c>)
    2ed2:	1ba4      	subs	r4, r4, r6
    2ed4:	10a4      	asrs	r4, r4, #2
    2ed6:	2500      	movs	r5, #0
    2ed8:	42a5      	cmp	r5, r4
    2eda:	d109      	bne.n	2ef0 <__libc_init_array+0x24>
    2edc:	4e0b      	ldr	r6, [pc, #44]	; (2f0c <__libc_init_array+0x40>)
    2ede:	4c0c      	ldr	r4, [pc, #48]	; (2f10 <__libc_init_array+0x44>)
    2ee0:	f000 f910 	bl	3104 <_init>
    2ee4:	1ba4      	subs	r4, r4, r6
    2ee6:	10a4      	asrs	r4, r4, #2
    2ee8:	2500      	movs	r5, #0
    2eea:	42a5      	cmp	r5, r4
    2eec:	d105      	bne.n	2efa <__libc_init_array+0x2e>
    2eee:	bd70      	pop	{r4, r5, r6, pc}
    2ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2ef4:	4798      	blx	r3
    2ef6:	3501      	adds	r5, #1
    2ef8:	e7ee      	b.n	2ed8 <__libc_init_array+0xc>
    2efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2efe:	4798      	blx	r3
    2f00:	3501      	adds	r5, #1
    2f02:	e7f2      	b.n	2eea <__libc_init_array+0x1e>
    2f04:	00003110 	.word	0x00003110
    2f08:	00003110 	.word	0x00003110
    2f0c:	00003110 	.word	0x00003110
    2f10:	00003114 	.word	0x00003114

00002f14 <dummy_register>:
    2f14:	20000008                                ... 

00002f18 <abort_fifo_start>:
    2f18:	20000012                                ... 

00002f1c <wr_pdram_start>:
    2f1c:	2000004e                                N.. 

00002f20 <cf_pdram_start>:
    2f20:	20000038                                8.. 

00002f24 <rd_pdram_start>:
    2f24:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    2f34:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    2f44:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    2f54:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    2f64:	735f6c61 6d5f6970 616d645f 0000632e     al_spi_m_dma.c..

00002f74 <_cfgs>:
    2f74:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    3074:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    3084:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00003094 <_usarts>:
	...

000030ac <_i2cms>:
    30ac:	00000003 70200014 00000100 000000ff     ...... p........
    30bc:	00d70000 05f5e100                       ........

000030c4 <_i2css>:
	...

000030d4 <sercomspi_regs>:
    30d4:	0030000c 00020000 00000000 01ff0004     ..0.............
    30e4:	00000005 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    30f4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00003104 <_init>:
    3104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3106:	bf00      	nop
    3108:	bcf8      	pop	{r3, r4, r5, r6, r7}
    310a:	bc08      	pop	{r3}
    310c:	469e      	mov	lr, r3
    310e:	4770      	bx	lr

00003110 <__init_array_start>:
    3110:	00000289 	.word	0x00000289

00003114 <_fini>:
    3114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3116:	bf00      	nop
    3118:	bcf8      	pop	{r3, r4, r5, r6, r7}
    311a:	bc08      	pop	{r3}
    311c:	469e      	mov	lr, r3
    311e:	4770      	bx	lr

00003120 <__fini_array_start>:
    3120:	00000265 	.word	0x00000265
